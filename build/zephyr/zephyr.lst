
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20006cf0 	.word	0x20006cf0
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00006aad 	.word	0x00006aad
   8:	00022693 	.word	0x00022693
   c:	00006add 	.word	0x00006add
		if (fdtable[fd].obj == NULL) {
  10:	00006add 	.word	0x00006add
  14:	00006add 	.word	0x00006add
  18:	00006add 	.word	0x00006add
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	0000684d 	.word	0x0000684d
  30:	00006add 	.word	0x00006add
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00006805 	.word	0x00006805
  3c:	000214e3 	.word	0x000214e3

00000040 <_irq_vector_table>:
  40:	00006a6d 0001abf5 00006a6d 00006a6d     mj......mj..mj..
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00006a6d 00006a6d 00006a6d 00006a6d     mj..mj..mj..mj..
  60:	00006a6d 00006a6d 00006a6d 00006a6d     mj..mj..mj..mj..
  70:	00006a6d 00006a6d 00006a6d 00006a6d     mj..mj..mj..mj..
  80:	00006a6d 00006a6d 00006a6d 00006a6d     mj..mj..mj..mj..
  90:	00006a6d 00006a6d 00006a6d 00006a6d     mj..mj..mj..mj..
  a0:	00006a6d 00006a6d 00006a6d 00006a6d     mj..mj..mj..mj..
  b0:	00006a6d 00006a6d 00006a6d 00006a6d     mj..mj..mj..mj..
  c0:	00006a6d 00006a6d 00006a6d 00006a6d     mj..mj..mj..mj..
  d0:	00006a6d 00006a6d 00006a6d 00006a6d     mj..mj..mj..mj..
  e0:	00006a6d 00006a6d 00006a6d 00006a6d     mj..mj..mj..mj..
  f0:	00006a6d 00006a6d 00006a6d 00006a6d     mj..mj..mj..mj..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96e 	b.w	3f4 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9d08      	ldr	r5, [sp, #32]
     136:	460e      	mov	r6, r1
     138:	4604      	mov	r4, r0
     13a:	468c      	mov	ip, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8081 	bne.w	244 <CONFIG_UART_MUX_RX_STACK_SIZE+0x44>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d945      	bls.n	1d4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x14>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa06 f302 	lsl.w	r3, r6, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0c03 	orr.w	ip, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbc f6fe 	udiv	r6, ip, lr
     16c:	b2b9      	uxth	r1, r7
     16e:	fb0e cc16 	mls	ip, lr, r6, ip
     172:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     176:	fb06 f001 	mul.w	r0, r6, r1
     17a:	4298      	cmp	r0, r3
     17c:	d909      	bls.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     17e:	18fb      	adds	r3, r7, r3
     180:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     184:	f080 8115 	bcs.w	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     188:	4298      	cmp	r0, r3
     18a:	f240 8112 	bls.w	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     18e:	3e02      	subs	r6, #2
     190:	443b      	add	r3, r7
     192:	1a1b      	subs	r3, r3, r0
     194:	b2a4      	uxth	r4, r4
     196:	fbb3 f0fe 	udiv	r0, r3, lr
     19a:	fb0e 3310 	mls	r3, lr, r0, r3
     19e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a2:	fb00 f101 	mul.w	r1, r0, r1
     1a6:	42a1      	cmp	r1, r4
     1a8:	d909      	bls.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1aa:	193c      	adds	r4, r7, r4
     1ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b0:	f080 8101 	bcs.w	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     1b4:	42a1      	cmp	r1, r4
     1b6:	f240 80fe 	bls.w	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     1ba:	3802      	subs	r0, #2
     1bc:	443c      	add	r4, r7
     1be:	1a64      	subs	r4, r4, r1
     1c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1c4:	2100      	movs	r1, #0
     1c6:	b11d      	cbz	r5, 1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     1c8:	40d4      	lsrs	r4, r2
     1ca:	2300      	movs	r3, #0
     1cc:	e9c5 4300 	strd	r4, r3, [r5]
     1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d4:	b902      	cbnz	r2, 1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     1d6:	deff      	udf	#255	; 0xff
     1d8:	fab2 f282 	clz	r2, r2
     1dc:	2a00      	cmp	r2, #0
     1de:	d14f      	bne.n	280 <CONFIG_UART_MUX_RX_STACK_SIZE+0x80>
     1e0:	1bcb      	subs	r3, r1, r7
     1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e6:	fa1f f887 	uxth.w	r8, r7
     1ea:	2101      	movs	r1, #1
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c26      	lsrs	r6, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     1fa:	fb08 f30c 	mul.w	r3, r8, ip
     1fe:	42b3      	cmp	r3, r6
     200:	d907      	bls.n	212 <CONFIG_UART_MUX_RX_STACK_SIZE+0x12>
     202:	19be      	adds	r6, r7, r6
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     208:	d202      	bcs.n	210 <CONFIG_UART_MUX_RX_STACK_SIZE+0x10>
     20a:	42b3      	cmp	r3, r6
     20c:	f200 80eb 	bhi.w	3e6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe6>
     210:	4684      	mov	ip, r0
     212:	1af6      	subs	r6, r6, r3
     214:	b2a3      	uxth	r3, r4
     216:	fbb6 f0fe 	udiv	r0, r6, lr
     21a:	fb0e 6610 	mls	r6, lr, r0, r6
     21e:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     222:	fb08 f800 	mul.w	r8, r8, r0
     226:	45a0      	cmp	r8, r4
     228:	d907      	bls.n	23a <CONFIG_UART_MUX_RX_STACK_SIZE+0x3a>
     22a:	193c      	adds	r4, r7, r4
     22c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     230:	d202      	bcs.n	238 <CONFIG_UART_MUX_RX_STACK_SIZE+0x38>
     232:	45a0      	cmp	r8, r4
     234:	f200 80d2 	bhi.w	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     238:	4618      	mov	r0, r3
     23a:	eba4 0408 	sub.w	r4, r4, r8
     23e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     242:	e7c0      	b.n	1c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x6>
     244:	428b      	cmp	r3, r1
     246:	d908      	bls.n	25a <CONFIG_UART_MUX_RX_STACK_SIZE+0x5a>
     248:	2d00      	cmp	r5, #0
     24a:	f000 80af 	beq.w	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     24e:	2100      	movs	r1, #0
     250:	e9c5 0600 	strd	r0, r6, [r5]
     254:	4608      	mov	r0, r1
     256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25a:	fab3 f183 	clz	r1, r3
     25e:	2900      	cmp	r1, #0
     260:	d149      	bne.n	2f6 <CONFIG_UART_MUX_RX_STACK_SIZE+0xf6>
     262:	42b3      	cmp	r3, r6
     264:	d302      	bcc.n	26c <CONFIG_UART_MUX_RX_STACK_SIZE+0x6c>
     266:	4282      	cmp	r2, r0
     268:	f200 80bb 	bhi.w	3e2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe2>
     26c:	1a84      	subs	r4, r0, r2
     26e:	eb66 0303 	sbc.w	r3, r6, r3
     272:	2001      	movs	r0, #1
     274:	469c      	mov	ip, r3
     276:	2d00      	cmp	r5, #0
     278:	d0aa      	beq.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     27a:	e9c5 4c00 	strd	r4, ip, [r5]
     27e:	e7a7      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     280:	f1c2 0320 	rsb	r3, r2, #32
     284:	4097      	lsls	r7, r2
     286:	40d8      	lsrs	r0, r3
     288:	4091      	lsls	r1, r2
     28a:	40de      	lsrs	r6, r3
     28c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     290:	4308      	orrs	r0, r1
     292:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     296:	fbb6 f1fe 	udiv	r1, r6, lr
     29a:	fa1f f887 	uxth.w	r8, r7
     29e:	fb0e 6611 	mls	r6, lr, r1, r6
     2a2:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     2a6:	fb01 f308 	mul.w	r3, r1, r8
     2aa:	42b3      	cmp	r3, r6
     2ac:	fa04 f402 	lsl.w	r4, r4, r2
     2b0:	d909      	bls.n	2c6 <CONFIG_UART_MUX_RX_STACK_SIZE+0xc6>
     2b2:	19be      	adds	r6, r7, r6
     2b4:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2b8:	f080 808e 	bcs.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2bc:	42b3      	cmp	r3, r6
     2be:	f240 808b 	bls.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c2:	3902      	subs	r1, #2
     2c4:	443e      	add	r6, r7
     2c6:	1af3      	subs	r3, r6, r3
     2c8:	b286      	uxth	r6, r0
     2ca:	fbb3 f0fe 	udiv	r0, r3, lr
     2ce:	fb0e 3310 	mls	r3, lr, r0, r3
     2d2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     2d6:	fb00 f308 	mul.w	r3, r0, r8
     2da:	42b3      	cmp	r3, r6
     2dc:	d907      	bls.n	2ee <CONFIG_UART_MUX_RX_STACK_SIZE+0xee>
     2de:	19be      	adds	r6, r7, r6
     2e0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2e4:	d274      	bcs.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2e6:	42b3      	cmp	r3, r6
     2e8:	d972      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2ea:	3802      	subs	r0, #2
     2ec:	443e      	add	r6, r7
     2ee:	1af3      	subs	r3, r6, r3
     2f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2f4:	e77a      	b.n	1ec <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x2c>
     2f6:	f1c1 0720 	rsb	r7, r1, #32
     2fa:	fa03 f401 	lsl.w	r4, r3, r1
     2fe:	fa22 f307 	lsr.w	r3, r2, r7
     302:	431c      	orrs	r4, r3
     304:	fa20 f907 	lsr.w	r9, r0, r7
     308:	fa06 f301 	lsl.w	r3, r6, r1
     30c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     310:	40fe      	lsrs	r6, r7
     312:	ea49 0903 	orr.w	r9, r9, r3
     316:	ea4f 4319 	mov.w	r3, r9, lsr #16
     31a:	fbb6 fefc 	udiv	lr, r6, ip
     31e:	fa1f f884 	uxth.w	r8, r4
     322:	fb0c 661e 	mls	r6, ip, lr, r6
     326:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     32a:	fb0e fa08 	mul.w	sl, lr, r8
     32e:	45b2      	cmp	sl, r6
     330:	fa02 f201 	lsl.w	r2, r2, r1
     334:	fa00 f301 	lsl.w	r3, r0, r1
     338:	d908      	bls.n	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     33a:	19a6      	adds	r6, r4, r6
     33c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     340:	d248      	bcs.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     342:	45b2      	cmp	sl, r6
     344:	d946      	bls.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     346:	f1ae 0e02 	sub.w	lr, lr, #2
     34a:	4426      	add	r6, r4
     34c:	eba6 060a 	sub.w	r6, r6, sl
     350:	fa1f f989 	uxth.w	r9, r9
     354:	fbb6 f0fc 	udiv	r0, r6, ip
     358:	fb0c 6610 	mls	r6, ip, r0, r6
     35c:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45b0      	cmp	r8, r6
     366:	d907      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     368:	19a6      	adds	r6, r4, r6
     36a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     370:	45b0      	cmp	r8, r6
     372:	d92b      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     374:	3802      	subs	r0, #2
     376:	4426      	add	r6, r4
     378:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     37c:	eba6 0608 	sub.w	r6, r6, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454e      	cmp	r6, r9
     386:	46c4      	mov	ip, r8
     388:	46ce      	mov	lr, r9
     38a:	d318      	bcc.n	3be <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbe>
     38c:	d015      	beq.n	3ba <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xba>
     38e:	b375      	cbz	r5, 3ee <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x6>
     390:	ebb3 020c 	subs.w	r2, r3, ip
     394:	eb66 060e 	sbc.w	r6, r6, lr
     398:	fa06 f707 	lsl.w	r7, r6, r7
     39c:	fa22 f301 	lsr.w	r3, r2, r1
     3a0:	40ce      	lsrs	r6, r1
     3a2:	431f      	orrs	r7, r3
     3a4:	e9c5 7600 	strd	r7, r6, [r5]
     3a8:	2100      	movs	r1, #0
     3aa:	e711      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3ac:	4629      	mov	r1, r5
     3ae:	4628      	mov	r0, r5
     3b0:	e70e      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3b2:	4666      	mov	r6, ip
     3b4:	e6ed      	b.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     3b6:	4618      	mov	r0, r3
     3b8:	e701      	b.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     3ba:	4543      	cmp	r3, r8
     3bc:	d2e7      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3be:	ebb8 0c02 	subs.w	ip, r8, r2
     3c2:	eb69 0404 	sbc.w	r4, r9, r4
     3c6:	3801      	subs	r0, #1
     3c8:	46a6      	mov	lr, r4
     3ca:	e7e0      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3cc:	4660      	mov	r0, ip
     3ce:	e7d3      	b.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     3d0:	4660      	mov	r0, ip
     3d2:	e78c      	b.n	2ee <CONFIG_UART_MUX_RX_STACK_SIZE+0xee>
     3d4:	4686      	mov	lr, r0
     3d6:	e7b9      	b.n	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     3d8:	4661      	mov	r1, ip
     3da:	e774      	b.n	2c6 <CONFIG_UART_MUX_RX_STACK_SIZE+0xc6>
     3dc:	3802      	subs	r0, #2
     3de:	443c      	add	r4, r7
     3e0:	e72b      	b.n	23a <CONFIG_UART_MUX_RX_STACK_SIZE+0x3a>
     3e2:	4608      	mov	r0, r1
     3e4:	e747      	b.n	276 <CONFIG_UART_MUX_RX_STACK_SIZE+0x76>
     3e6:	f1ac 0c02 	sub.w	ip, ip, #2
     3ea:	443e      	add	r6, r7
     3ec:	e711      	b.n	212 <CONFIG_UART_MUX_RX_STACK_SIZE+0x12>
     3ee:	4629      	mov	r1, r5
     3f0:	e6ee      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3f2:	bf00      	nop

000003f4 <__aeabi_idiv0>:
     3f4:	4770      	bx	lr
     3f6:	bf00      	nop

000003f8 <main>:
static struct bt_conn_auth_cb auth_cb_display = {
	.cancel = auth_cancel,
};

void main(void)
{
     3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		.connected = connected,
		.disconnected = disconnected,
		.le_param_req = le_param_req,
	};

	printk("Starting Bluetooth Throughput example\n");
     3fc:	48b4      	ldr	r0, [pc, #720]	; (6d0 <CONFIG_BT_COMPANY_ID+0xdf>)
{
     3fe:	b08f      	sub	sp, #60	; 0x3c
	printk("Starting Bluetooth Throughput example\n");
     400:	f020 f91e 	bl	20640 <printk>

	console_init();
     404:	f005 fe22 	bl	604c <console_init>

	bt_conn_cb_register(&conn_callbacks);
     408:	48b2      	ldr	r0, [pc, #712]	; (6d4 <CONFIG_BT_COMPANY_ID+0xe3>)
     40a:	f009 fed5 	bl	a1b8 <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
     40e:	48b2      	ldr	r0, [pc, #712]	; (6d8 <CONFIG_BT_COMPANY_ID+0xe7>)
     410:	f00a fca4 	bl	ad5c <bt_conn_auth_cb_register>

	err = bt_enable(NULL);
     414:	2000      	movs	r0, #0
     416:	f009 f8dd 	bl	95d4 <bt_enable>
	if (err) {
     41a:	4601      	mov	r1, r0
     41c:	b128      	cbz	r0, 42a <CONFIG_BT_HCI_TX_STACK_SIZE+0x2a>
		printk("Bluetooth init failed (err %d)\n", err);
     41e:	48af      	ldr	r0, [pc, #700]	; (6dc <CONFIG_BT_COMPANY_ID+0xeb>)
	for (;;) {
		if (test_ready) {
			test_run();
		}
	}
}
     420:	b00f      	add	sp, #60	; 0x3c
     422:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printk("Bluetooth init failed (err %d)\n", err);
     426:	f020 b90b 	b.w	20640 <printk>
	printk("Bluetooth initialized\n");
     42a:	48ad      	ldr	r0, [pc, #692]	; (6e0 <CONFIG_BT_COMPANY_ID+0xef>)
     42c:	f020 f908 	bl	20640 <printk>
	err = bt_gatt_throughput_init(&gatt_throughput, &throughput_cb);
     430:	49ac      	ldr	r1, [pc, #688]	; (6e4 <CONFIG_BT_COMPANY_ID+0xf3>)
     432:	48ad      	ldr	r0, [pc, #692]	; (6e8 <CONFIG_BT_COMPANY_ID+0xf7>)
     434:	f004 fe02 	bl	503c <bt_gatt_throughput_init>
	if (err) {
     438:	b128      	cbz	r0, 446 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
		printk("Throughput service initialization failed.\n");
     43a:	48ac      	ldr	r0, [pc, #688]	; (6ec <CONFIG_BT_COMPANY_ID+0xfb>)
}
     43c:	b00f      	add	sp, #60	; 0x3c
     43e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printk("Throughput service initialization failed.\n");
     442:	f020 b8fd 	b.w	20640 <printk>
	adv_start();
     446:	f004 fbf3 	bl	4c30 <adv_start>
	if(start_flag == true){
     44a:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 70c <CONFIG_BT_COMPANY_ID+0x11b>
		if (test_ready) {
     44e:	4ba8      	ldr	r3, [pc, #672]	; (6f0 <CONFIG_BT_COMPANY_ID+0xff>)
     450:	781a      	ldrb	r2, [r3, #0]
     452:	2a00      	cmp	r2, #0
     454:	d0fc      	beq.n	450 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
	if (!test_ready) {
     456:	781a      	ldrb	r2, [r3, #0]
     458:	2a00      	cmp	r2, #0
     45a:	d0f9      	beq.n	450 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
	test_ready = false;
     45c:	2200      	movs	r2, #0
     45e:	701a      	strb	r2, [r3, #0]
	if(start_flag == true){
     460:	f898 3000 	ldrb.w	r3, [r8]
		err = bt_gatt_throughput_write(&gatt_throughput, dummy, 1);
     464:	49a3      	ldr	r1, [pc, #652]	; (6f4 <CONFIG_BT_COMPANY_ID+0x103>)
     466:	48a0      	ldr	r0, [pc, #640]	; (6e8 <CONFIG_BT_COMPANY_ID+0xf7>)
     468:	2201      	movs	r2, #1
	if(start_flag == true){
     46a:	2b00      	cmp	r3, #0
     46c:	f000 809d 	beq.w	5aa <CONFIG_BT_HCI_ECC_STACK_SIZE+0x15e>
		err = bt_gatt_throughput_write(&gatt_throughput, dummy, 1);
     470:	f020 f8c4 	bl	205fc <bt_gatt_throughput_write>
		if (err) {
     474:	4604      	mov	r4, r0
     476:	b118      	cbz	r0, 480 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x34>
			printk("Reset peer metrics failed.\n");
     478:	489f      	ldr	r0, [pc, #636]	; (6f8 <CONFIG_BT_COMPANY_ID+0x107>)
     47a:	f020 f8e1 	bl	20640 <printk>
			return;
     47e:	e7e6      	b.n	44e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2>
		stamp = k_uptime_get_32();
     480:	f020 f8af 	bl	205e2 <k_uptime_get_32>
			err = bt_gatt_throughput_write(&gatt_throughput, dummy, packet_size);
     484:	f8df 926c 	ldr.w	r9, [pc, #620]	; 6f4 <CONFIG_BT_COMPANY_ID+0x103>
     488:	f8df a25c 	ldr.w	sl, [pc, #604]	; 6e8 <CONFIG_BT_COMPANY_ID+0xf7>
		stamp = k_uptime_get_32();
     48c:	4605      	mov	r5, r0
		prog = 0;
     48e:	4626      	mov	r6, r4
		while (k_uptime_get_32()-stamp < 60000) {
     490:	f020 f8a7 	bl	205e2 <k_uptime_get_32>
     494:	1b43      	subs	r3, r0, r5
     496:	9304      	str	r3, [sp, #16]
     498:	f04f 0300 	mov.w	r3, #0
     49c:	eb63 0303 	sbc.w	r3, r3, r3
     4a0:	9305      	str	r3, [sp, #20]
     4a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     4a6:	2300      	movs	r3, #0
     4a8:	f64e 225f 	movw	r2, #59999	; 0xea5f
     4ac:	428b      	cmp	r3, r1
     4ae:	f04f 0b6e 	mov.w	fp, #110	; 0x6e
     4b2:	bf08      	it	eq
     4b4:	4282      	cmpeq	r2, r0
     4b6:	fb0b f706 	mul.w	r7, fp, r6
     4ba:	d309      	bcc.n	4d0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x84>
			err = bt_gatt_throughput_write(&gatt_throughput, dummy, packet_size);
     4bc:	4649      	mov	r1, r9
     4be:	465a      	mov	r2, fp
     4c0:	4650      	mov	r0, sl
     4c2:	f020 f89b 	bl	205fc <bt_gatt_throughput_write>
			if (err) {
     4c6:	4601      	mov	r1, r0
     4c8:	b390      	cbz	r0, 530 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe4>
				printk("GATT write failed (err %d)\n", err);
     4ca:	488c      	ldr	r0, [pc, #560]	; (6fc <CONFIG_BT_COMPANY_ID+0x10b>)
     4cc:	f020 f8b8 	bl	20640 <printk>
	return z_impl_k_uptime_ticks();
     4d0:	f025 fd9d 	bl	2600e <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     4d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     4d8:	460a      	mov	r2, r1
     4da:	fba0 0103 	umull	r0, r1, r0, r3
     4de:	fb03 1102 	mla	r1, r3, r2, r1
     4e2:	0bc2      	lsrs	r2, r0, #15
     4e4:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
static inline int64_t k_uptime_delta(int64_t *reftime)
{
	int64_t uptime, delta;

	uptime = k_uptime_get();
	delta = uptime - *reftime;
     4e8:	1b55      	subs	r5, r2, r5
		printk("\nDone\n");
     4ea:	4885      	ldr	r0, [pc, #532]	; (700 <CONFIG_BT_COMPANY_ID+0x10f>)
     4ec:	f020 f8a8 	bl	20640 <printk>
		printk("[local] sent %u bytes (%u KB) in %u ms at %llu kbps\n",
     4f0:	462a      	mov	r2, r5
     4f2:	2300      	movs	r3, #0
     4f4:	00f8      	lsls	r0, r7, #3
     4f6:	0f79      	lsrs	r1, r7, #29
     4f8:	f7ff fe02 	bl	100 <__aeabi_uldivmod>
     4fc:	e9cd 0100 	strd	r0, r1, [sp]
     500:	0abc      	lsrs	r4, r7, #10
     502:	462b      	mov	r3, r5
     504:	4622      	mov	r2, r4
		printk("[local] sent %u bytes (%u KB) in %u ms at %llu kbps\n",
     506:	4639      	mov	r1, r7
     508:	487e      	ldr	r0, [pc, #504]	; (704 <CONFIG_BT_COMPANY_ID+0x113>)
     50a:	f020 f899 	bl	20640 <printk>
		err = bt_gatt_throughput_read(&gatt_throughput);
     50e:	4876      	ldr	r0, [pc, #472]	; (6e8 <CONFIG_BT_COMPANY_ID+0xf7>)
     510:	f004 fe16 	bl	5140 <bt_gatt_throughput_read>
		if (err) {
     514:	4601      	mov	r1, r0
     516:	b110      	cbz	r0, 51e <CONFIG_BT_HCI_ECC_STACK_SIZE+0xd2>
			printk("GATT read failed (err %d)\n", err);
     518:	487b      	ldr	r0, [pc, #492]	; (708 <CONFIG_BT_COMPANY_ID+0x117>)
     51a:	f020 f891 	bl	20640 <printk>
	if(start_flag == true) start_flag = false;
     51e:	f898 3000 	ldrb.w	r3, [r8]
     522:	2b00      	cmp	r3, #0
     524:	f000 80cd 	beq.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     528:	2300      	movs	r3, #0
		start_flag = true;
     52a:	f888 3000 	strb.w	r3, [r8]
     52e:	e78e      	b.n	44e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2>
			while(k_uptime_get_32()-stamp2 <break_time) ;
     530:	f020 f857 	bl	205e2 <k_uptime_get_32>
     534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     536:	1ac3      	subs	r3, r0, r3
     538:	9302      	str	r3, [sp, #8]
     53a:	f04f 0300 	mov.w	r3, #0
     53e:	eb63 0303 	sbc.w	r3, r3, r3
     542:	9303      	str	r3, [sp, #12]
     544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     548:	2b00      	cmp	r3, #0
     54a:	bf08      	it	eq
     54c:	2a05      	cmpeq	r2, #5
     54e:	d3ef      	bcc.n	530 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe4>
			prog++;
     550:	3601      	adds	r6, #1
			data2 += packet_size;
     552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     556:	fbb6 f3f2 	udiv	r3, r6, r2
     55a:	fb02 6313 	mls	r3, r2, r3, r6
     55e:	346e      	adds	r4, #110	; 0x6e
			if(prog %1000 == 0) {
     560:	2b00      	cmp	r3, #0
     562:	d195      	bne.n	490 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x44>
				uint32_t delta2 = k_uptime_get_32()-stamp2;
     564:	f020 f83d 	bl	205e2 <k_uptime_get_32>
     568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     56a:	eba0 0b03 	sub.w	fp, r0, r3
						data2, data2 / 1024, delta2, ((uint64_t)data2 * 8 / delta2));
     56e:	17e3      	asrs	r3, r4, #31
     570:	00d9      	lsls	r1, r3, #3
				printk("[local] sent %u bytes (%u KB) in %u ms at %llu kbps\n",
     572:	2c00      	cmp	r4, #0
     574:	465a      	mov	r2, fp
     576:	f04f 0300 	mov.w	r3, #0
     57a:	ea4f 00c4 	mov.w	r0, r4, lsl #3
     57e:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
     582:	4627      	mov	r7, r4
     584:	bfb8      	it	lt
     586:	f204 37ff 	addwlt	r7, r4, #1023	; 0x3ff
     58a:	f7ff fdb9 	bl	100 <__aeabi_uldivmod>
     58e:	12bf      	asrs	r7, r7, #10
     590:	e9cd 0100 	strd	r0, r1, [sp]
     594:	465b      	mov	r3, fp
     596:	4621      	mov	r1, r4
     598:	485a      	ldr	r0, [pc, #360]	; (704 <CONFIG_BT_COMPANY_ID+0x113>)
     59a:	463a      	mov	r2, r7
     59c:	f020 f850 	bl	20640 <printk>
				stamp2 = k_uptime_get_32();
     5a0:	f020 f81f 	bl	205e2 <k_uptime_get_32>
				data2 = 0;
     5a4:	2400      	movs	r4, #0
				stamp2 = k_uptime_get_32();
     5a6:	900b      	str	r0, [sp, #44]	; 0x2c
     5a8:	e772      	b.n	490 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x44>
		err = bt_gatt_throughput_write(&gatt_throughput, dummy, 1);
     5aa:	f020 f827 	bl	205fc <bt_gatt_throughput_write>
		if (err) {
     5ae:	4604      	mov	r4, r0
     5b0:	2800      	cmp	r0, #0
     5b2:	f47f af61 	bne.w	478 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2c>
		stamp = k_uptime_get_32();
     5b6:	f020 f814 	bl	205e2 <k_uptime_get_32>
     5ba:	4683      	mov	fp, r0
     5bc:	900c      	str	r0, [sp, #48]	; 0x30
		stamp2 = k_uptime_get_32();
     5be:	f020 f810 	bl	205e2 <k_uptime_get_32>
			err = bt_gatt_throughput_write(&gatt_throughput, dummy, packet_size);
     5c2:	f8df a124 	ldr.w	sl, [pc, #292]	; 6e8 <CONFIG_BT_COMPANY_ID+0xf7>
		stamp2 = k_uptime_get_32();
     5c6:	4605      	mov	r5, r0
		prog = 0;
     5c8:	4626      	mov	r6, r4
		while (k_uptime_get_32()-stamp < 6000000000) {
     5ca:	f020 f80a 	bl	205e2 <k_uptime_get_32>
     5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     5d0:	1ac3      	subs	r3, r0, r3
     5d2:	9308      	str	r3, [sp, #32]
     5d4:	f04f 0300 	mov.w	r3, #0
     5d8:	eb63 0303 	sbc.w	r3, r3, r3
     5dc:	9309      	str	r3, [sp, #36]	; 0x24
     5de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
     5e2:	a339      	add	r3, pc, #228	; (adr r3, 6c8 <CONFIG_BT_COMPANY_ID+0xd7>)
     5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
     5e8:	428b      	cmp	r3, r1
     5ea:	f04f 096e 	mov.w	r9, #110	; 0x6e
     5ee:	bf08      	it	eq
     5f0:	4282      	cmpeq	r2, r0
     5f2:	fb09 f706 	mul.w	r7, r9, r6
     5f6:	d30c      	bcc.n	612 <CONFIG_BT_COMPANY_ID+0x21>
			stamp3 = k_uptime_get_32();
     5f8:	f01f fff3 	bl	205e2 <k_uptime_get_32>
			err = bt_gatt_throughput_write(&gatt_throughput, dummy, packet_size);
     5fc:	493d      	ldr	r1, [pc, #244]	; (6f4 <CONFIG_BT_COMPANY_ID+0x103>)
			stamp3 = k_uptime_get_32();
     5fe:	900d      	str	r0, [sp, #52]	; 0x34
			err = bt_gatt_throughput_write(&gatt_throughput, dummy, packet_size);
     600:	464a      	mov	r2, r9
     602:	4650      	mov	r0, sl
     604:	f01f fffa 	bl	205fc <bt_gatt_throughput_write>
			if (err) {
     608:	4601      	mov	r1, r0
     60a:	b1f8      	cbz	r0, 64c <CONFIG_BT_COMPANY_ID+0x5b>
				printk("GATT write failed (err %d)\n", err);
     60c:	483b      	ldr	r0, [pc, #236]	; (6fc <CONFIG_BT_COMPANY_ID+0x10b>)
     60e:	f020 f817 	bl	20640 <printk>
     612:	f025 fcfc 	bl	2600e <z_impl_k_uptime_ticks>
     616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     61a:	460a      	mov	r2, r1
     61c:	fba0 0103 	umull	r0, r1, r0, r3
     620:	fb03 1102 	mla	r1, r3, r2, r1
     624:	0bc4      	lsrs	r4, r0, #15
     626:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
     62a:	ebb4 040b 	subs.w	r4, r4, fp
		printk("\nDone\n");
     62e:	4834      	ldr	r0, [pc, #208]	; (700 <CONFIG_BT_COMPANY_ID+0x10f>)
     630:	f020 f806 	bl	20640 <printk>
		printk("[local] sent %u bytes (%u KB) in %u ms at %llu kbps\n",
     634:	4622      	mov	r2, r4
     636:	2300      	movs	r3, #0
     638:	00f8      	lsls	r0, r7, #3
     63a:	0f79      	lsrs	r1, r7, #29
     63c:	f7ff fd60 	bl	100 <__aeabi_uldivmod>
     640:	0abd      	lsrs	r5, r7, #10
     642:	e9cd 0100 	strd	r0, r1, [sp]
     646:	4623      	mov	r3, r4
     648:	462a      	mov	r2, r5
     64a:	e75c      	b.n	506 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xba>
			while(k_uptime_get_32()-stamp3 <break_time) ;
     64c:	f01f ffc9 	bl	205e2 <k_uptime_get_32>
     650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     652:	1ac3      	subs	r3, r0, r3
     654:	9306      	str	r3, [sp, #24]
     656:	f04f 0300 	mov.w	r3, #0
     65a:	eb63 0303 	sbc.w	r3, r3, r3
     65e:	9307      	str	r3, [sp, #28]
     660:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     664:	2b00      	cmp	r3, #0
     666:	bf08      	it	eq
     668:	2a05      	cmpeq	r2, #5
     66a:	d3ef      	bcc.n	64c <CONFIG_BT_COMPANY_ID+0x5b>
			prog++;
     66c:	3601      	adds	r6, #1
			data2+=packet_size;
     66e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     672:	fbb6 f3f2 	udiv	r3, r6, r2
     676:	fb02 6313 	mls	r3, r2, r3, r6
     67a:	346e      	adds	r4, #110	; 0x6e
			if(prog %1000 == 0) {
     67c:	2b00      	cmp	r3, #0
     67e:	d1a4      	bne.n	5ca <CONFIG_BT_HCI_ECC_STACK_SIZE+0x17e>
				uint32_t delta2 = k_uptime_get_32()-stamp2;
     680:	f01f ffaf 	bl	205e2 <k_uptime_get_32>
						data2, data2 / 1024, delta2, ((uint64_t)data2 * 8 / delta2));
     684:	17e3      	asrs	r3, r4, #31
				uint32_t delta2 = k_uptime_get_32()-stamp2;
     686:	1b45      	subs	r5, r0, r5
						data2, data2 / 1024, delta2, ((uint64_t)data2 * 8 / delta2));
     688:	00d9      	lsls	r1, r3, #3
				printk("[local] sent %u bytes (%u KB) in %u ms at %llu kbps\n",
     68a:	2c00      	cmp	r4, #0
     68c:	462a      	mov	r2, r5
     68e:	f04f 0300 	mov.w	r3, #0
     692:	ea4f 00c4 	mov.w	r0, r4, lsl #3
     696:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
     69a:	4627      	mov	r7, r4
     69c:	bfb8      	it	lt
     69e:	f204 37ff 	addwlt	r7, r4, #1023	; 0x3ff
     6a2:	f7ff fd2d 	bl	100 <__aeabi_uldivmod>
     6a6:	12bf      	asrs	r7, r7, #10
     6a8:	e9cd 0100 	strd	r0, r1, [sp]
     6ac:	462b      	mov	r3, r5
     6ae:	4621      	mov	r1, r4
     6b0:	4814      	ldr	r0, [pc, #80]	; (704 <CONFIG_BT_COMPANY_ID+0x113>)
     6b2:	463a      	mov	r2, r7
     6b4:	f01f ffc4 	bl	20640 <printk>
				stamp2 = k_uptime_get_32();
     6b8:	f01f ff93 	bl	205e2 <k_uptime_get_32>
				data2= 0;
     6bc:	2400      	movs	r4, #0
				stamp2 = k_uptime_get_32();
     6be:	4605      	mov	r5, r0
				data2= 0;
     6c0:	e783      	b.n	5ca <CONFIG_BT_HCI_ECC_STACK_SIZE+0x17e>
		start_flag = true;
     6c2:	2301      	movs	r3, #1
     6c4:	e731      	b.n	52a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xde>
     6c6:	bf00      	nop
     6c8:	65a0bbff 	.word	0x65a0bbff
     6cc:	00000001 	.word	0x00000001
     6d0:	000285e6 	.word	0x000285e6
     6d4:	20000138 	.word	0x20000138
     6d8:	20000118 	.word	0x20000118
     6dc:	0002860d 	.word	0x0002860d
     6e0:	0002862d 	.word	0x0002862d
     6e4:	000267c8 	.word	0x000267c8
     6e8:	20001704 	.word	0x20001704
     6ec:	00028644 	.word	0x00028644
     6f0:	20004def 	.word	0x20004def
     6f4:	20004cee 	.word	0x20004cee
     6f8:	0002866f 	.word	0x0002866f
     6fc:	0002868b 	.word	0x0002868b
     700:	000286dc 	.word	0x000286dc
     704:	000286a7 	.word	0x000286a7
     708:	000286e3 	.word	0x000286e3
     70c:	20004dee 	.word	0x20004dee

00000710 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
     710:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     712:	4d45      	ldr	r5, [pc, #276]	; (828 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x28>)
     714:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
     718:	6899      	ldr	r1, [r3, #8]
     71a:	f011 0101 	ands.w	r1, r1, #1
{
     71e:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     720:	d121      	bne.n	766 <hci_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     722:	aa03      	add	r2, sp, #12
     724:	f640 4003 	movw	r0, #3075	; 0xc03
     728:	f007 fd5e 	bl	81e8 <bt_hci_cmd_send_sync>
		if (err) {
     72c:	4604      	mov	r4, r0
     72e:	2800      	cmp	r0, #0
     730:	d176      	bne.n	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
		hci_reset_complete(rsp);
     732:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
     734:	689b      	ldr	r3, [r3, #8]
	if (status) {
     736:	781b      	ldrb	r3, [r3, #0]
     738:	b993      	cbnz	r3, 760 <hci_init+0x50>
	scan_dev_found_cb = NULL;
     73a:	4a3c      	ldr	r2, [pc, #240]	; (82c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2c>)
     73c:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     73e:	f105 0398 	add.w	r3, r5, #152	; 0x98
     742:	4618      	mov	r0, r3
     744:	f022 f90d 	bl	22962 <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     748:	f3bf 8f5b 	dmb	ish
     74c:	f000 0005 	and.w	r0, r0, #5
     750:	e853 2f00 	ldrex	r2, [r3]
     754:	e843 0100 	strex	r1, r0, [r3]
     758:	2900      	cmp	r1, #0
     75a:	d1f9      	bne.n	750 <hci_init+0x40>
     75c:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     760:	9803      	ldr	r0, [sp, #12]
     762:	f01d fc29 	bl	1dfb8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     766:	aa03      	add	r2, sp, #12
     768:	2100      	movs	r1, #0
     76a:	f241 0003 	movw	r0, #4099	; 0x1003
     76e:	f007 fd3b 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
     772:	4604      	mov	r4, r0
     774:	2800      	cmp	r0, #0
     776:	d153      	bne.n	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
	read_local_features_complete(rsp);
     778:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     77a:	482d      	ldr	r0, [pc, #180]	; (830 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30>)
     77c:	6899      	ldr	r1, [r3, #8]
     77e:	2208      	movs	r2, #8
     780:	3101      	adds	r1, #1
     782:	f021 ffcd 	bl	22720 <memcpy>
	net_buf_unref(rsp);
     786:	9803      	ldr	r0, [sp, #12]
     788:	f01d fc16 	bl	1dfb8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     78c:	4621      	mov	r1, r4
     78e:	aa03      	add	r2, sp, #12
     790:	f241 0001 	movw	r0, #4097	; 0x1001
     794:	f007 fd28 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
     798:	4604      	mov	r4, r0
     79a:	2800      	cmp	r0, #0
     79c:	d140      	bne.n	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
	read_local_ver_complete(rsp);
     79e:	9803      	ldr	r0, [sp, #12]
     7a0:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     7a2:	785a      	ldrb	r2, [r3, #1]
     7a4:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     7a8:	78d9      	ldrb	r1, [r3, #3]
     7aa:	789a      	ldrb	r2, [r3, #2]
     7ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     7b0:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
     7b2:	791a      	ldrb	r2, [r3, #4]
     7b4:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     7b8:	7a19      	ldrb	r1, [r3, #8]
     7ba:	79da      	ldrb	r2, [r3, #7]
     7bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     7c0:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     7c2:	795a      	ldrb	r2, [r3, #5]
     7c4:	799b      	ldrb	r3, [r3, #6]
     7c6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     7ca:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
     7cc:	f01d fbf4 	bl	1dfb8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     7d0:	4621      	mov	r1, r4
     7d2:	aa03      	add	r2, sp, #12
     7d4:	f241 0002 	movw	r0, #4098	; 0x1002
     7d8:	f007 fd06 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
     7dc:	4604      	mov	r4, r0
     7de:	b9f8      	cbnz	r0, 820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
	read_supported_commands_complete(rsp);
     7e0:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
     7e2:	4814      	ldr	r0, [pc, #80]	; (834 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x34>)
     7e4:	6899      	ldr	r1, [r3, #8]
     7e6:	2240      	movs	r2, #64	; 0x40
     7e8:	3101      	adds	r1, #1
     7ea:	f021 ff99 	bl	22720 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
     7ee:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
     7f2:	9803      	ldr	r0, [sp, #12]
		bt_dev.supported_commands[34] |= 0x04;
     7f4:	f043 0306 	orr.w	r3, r3, #6
     7f8:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
     7fc:	f01d fbdc 	bl	1dfb8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     800:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     804:	065b      	lsls	r3, r3, #25
     806:	d41d      	bmi.n	844 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x44>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     808:	4b0b      	ldr	r3, [pc, #44]	; (838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>)
     80a:	490c      	ldr	r1, [pc, #48]	; (83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>)
		BT_ERR("Non-LE capable controller detected!");
     80c:	480c      	ldr	r0, [pc, #48]	; (840 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x40>)
     80e:	1ac9      	subs	r1, r1, r3
     810:	08c9      	lsrs	r1, r1, #3
     812:	0189      	lsls	r1, r1, #6
     814:	f041 0101 	orr.w	r1, r1, #1
     818:	f020 f9d2 	bl	20bc0 <log_0>
		return -ENODEV;
     81c:	f06f 0412 	mvn.w	r4, #18
			return err;
		}
	}

	return 0;
}
     820:	4620      	mov	r0, r4
     822:	b009      	add	sp, #36	; 0x24
     824:	bdf0      	pop	{r4, r5, r6, r7, pc}
     826:	bf00      	nop
     828:	20000000 	.word	0x20000000
     82c:	20001908 	.word	0x20001908
     830:	20000040 	.word	0x20000040
     834:	20000048 	.word	0x20000048
     838:	00026544 	.word	0x00026544
     83c:	0002662c 	.word	0x0002662c
     840:	000296d6 	.word	0x000296d6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     844:	4621      	mov	r1, r4
     846:	aa03      	add	r2, sp, #12
     848:	f242 0003 	movw	r0, #8195	; 0x2003
     84c:	f007 fccc 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
     850:	4604      	mov	r4, r0
     852:	2800      	cmp	r0, #0
     854:	d1e4      	bne.n	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
	read_le_features_complete(rsp);
     856:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     858:	48a5      	ldr	r0, [pc, #660]	; (af0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2f0>)
     85a:	6899      	ldr	r1, [r3, #8]
     85c:	2208      	movs	r2, #8
     85e:	3101      	adds	r1, #1
     860:	f021 ff5e 	bl	22720 <memcpy>
	net_buf_unref(rsp);
     864:	9803      	ldr	r0, [sp, #12]
     866:	f01d fba7 	bl	1dfb8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     86a:	4621      	mov	r1, r4
     86c:	aa03      	add	r2, sp, #12
     86e:	f242 0002 	movw	r0, #8194	; 0x2002
     872:	f007 fcb9 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
     876:	4604      	mov	r4, r0
     878:	2800      	cmp	r0, #0
     87a:	d1d1      	bne.n	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
	le_read_buffer_size_complete(rsp);
     87c:	9b03      	ldr	r3, [sp, #12]
     87e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
     880:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     884:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
     888:	b291      	uxth	r1, r2
	if (!bt_dev.le.mtu) {
     88a:	b121      	cbz	r1, 896 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x96>
	k_sem_init(&bt_dev.le.pkts, rp->le_max_num, rp->le_max_num);
     88c:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     88e:	4899      	ldr	r0, [pc, #612]	; (af4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2f4>)
     890:	4611      	mov	r1, r2
     892:	f025 fad8 	bl	25e46 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     896:	9803      	ldr	r0, [sp, #12]
     898:	f01d fb8e 	bl	1dfb8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     89c:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
     8a0:	f016 0620 	ands.w	r6, r6, #32
     8a4:	f000 80ff 	beq.w	aa6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2a6>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     8a8:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
     8ac:	071f      	lsls	r7, r3, #28
     8ae:	d511      	bpl.n	8d4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xd4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     8b0:	aa03      	add	r2, sp, #12
     8b2:	2100      	movs	r1, #0
     8b4:	f242 001c 	movw	r0, #8220	; 0x201c
     8b8:	f007 fc96 	bl	81e8 <bt_hci_cmd_send_sync>
		if (err) {
     8bc:	4604      	mov	r4, r0
     8be:	2800      	cmp	r0, #0
     8c0:	d1ae      	bne.n	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
		le_read_supp_states_complete(rsp);
     8c2:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     8c4:	6883      	ldr	r3, [r0, #8]
     8c6:	f853 2f01 	ldr.w	r2, [r3, #1]!
     8ca:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     8cc:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
     8d0:	f01d fb72 	bl	1dfb8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     8d4:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     8d8:	069e      	lsls	r6, r3, #26
     8da:	d524      	bpl.n	926 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x126>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     8dc:	a902      	add	r1, sp, #8
     8de:	f10d 0006 	add.w	r0, sp, #6
     8e2:	f007 fcf9 	bl	82d8 <hci_le_read_max_data_len>
		if (err) {
     8e6:	4604      	mov	r4, r0
     8e8:	2800      	cmp	r0, #0
     8ea:	d199      	bne.n	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     8ec:	2104      	movs	r1, #4
     8ee:	f242 0024 	movw	r0, #8228	; 0x2024
     8f2:	f007 fb1d 	bl	7f30 <bt_hci_cmd_create>
		if (!buf) {
     8f6:	4606      	mov	r6, r0
     8f8:	2800      	cmp	r0, #0
     8fa:	f000 80db 	beq.w	ab4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2b4>
		cp = net_buf_add(buf, sizeof(*cp));
     8fe:	2104      	movs	r1, #4
     900:	3008      	adds	r0, #8
     902:	f024 fd73 	bl	253ec <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     906:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     90a:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     90c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
     910:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     912:	4622      	mov	r2, r4
     914:	4631      	mov	r1, r6
     916:	f242 0024 	movw	r0, #8228	; 0x2024
     91a:	f007 fc65 	bl	81e8 <bt_hci_cmd_send_sync>
		if (err) {
     91e:	4604      	mov	r4, r0
     920:	2800      	cmp	r0, #0
     922:	f47f af7d 	bne.w	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     926:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     92a:	065c      	lsls	r4, r3, #25
     92c:	d510      	bpl.n	950 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x150>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     92e:	aa03      	add	r2, sp, #12
     930:	2100      	movs	r1, #0
     932:	f242 002a 	movw	r0, #8234	; 0x202a
     936:	f007 fc57 	bl	81e8 <bt_hci_cmd_send_sync>
		if (err) {
     93a:	4604      	mov	r4, r0
     93c:	2800      	cmp	r0, #0
     93e:	f47f af6f 	bne.w	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
		le_read_resolving_list_size_complete(rsp);
     942:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
     944:	6883      	ldr	r3, [r0, #8]
     946:	785b      	ldrb	r3, [r3, #1]
     948:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
		net_buf_unref(rsp);
     94c:	f01d fb34 	bl	1dfb8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     950:	2108      	movs	r1, #8
     952:	f242 0001 	movw	r0, #8193	; 0x2001
     956:	f007 faeb 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
     95a:	4604      	mov	r4, r0
     95c:	2800      	cmp	r0, #0
     95e:	f000 80a9 	beq.w	ab4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2b4>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     962:	2108      	movs	r1, #8
     964:	4408      	add	r0, r1
     966:	f024 fd41 	bl	253ec <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     96a:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     96e:	f011 0f40 	tst.w	r1, #64	; 0x40
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     972:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     974:	f240 2302 	movw	r3, #514	; 0x202
     978:	bf08      	it	eq
     97a:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     97c:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     97e:	bf4c      	ite	mi
     980:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     984:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     988:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     98c:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     98e:	bf48      	it	mi
     990:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     994:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     998:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     99c:	bf18      	it	ne
     99e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     9a2:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     9a6:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     9a8:	bf48      	it	mi
     9aa:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     9ae:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     9b0:	bf08      	it	eq
     9b2:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     9b6:	2100      	movs	r1, #0
     9b8:	f022 f819 	bl	229ee <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     9bc:	4621      	mov	r1, r4
     9be:	2200      	movs	r2, #0
     9c0:	f242 0001 	movw	r0, #8193	; 0x2001
     9c4:	f007 fc10 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
     9c8:	4604      	mov	r4, r0
     9ca:	2800      	cmp	r0, #0
     9cc:	f47f af28 	bne.w	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     9d0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     9d4:	0698      	lsls	r0, r3, #26
     9d6:	d41e      	bmi.n	a16 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x216>
	if (bt_dev.le.mtu) {
     9d8:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
     9dc:	b9d9      	cbnz	r1, a16 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x216>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     9de:	aa03      	add	r2, sp, #12
     9e0:	f241 0005 	movw	r0, #4101	; 0x1005
     9e4:	f007 fc00 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
     9e8:	4604      	mov	r4, r0
     9ea:	2800      	cmp	r0, #0
     9ec:	f47f af18 	bne.w	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
	if (bt_dev.le.mtu) {
     9f0:	f8b5 30b0 	ldrh.w	r3, [r5, #176]	; 0xb0
     9f4:	b963      	cbnz	r3, a10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x210>
	read_buffer_size_complete(rsp);
     9f6:	9b03      	ldr	r3, [sp, #12]
     9f8:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
     9fa:	785a      	ldrb	r2, [r3, #1]
     9fc:	7899      	ldrb	r1, [r3, #2]
     9fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     a02:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
     a06:	889a      	ldrh	r2, [r3, #4]
     a08:	483a      	ldr	r0, [pc, #232]	; (af4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2f4>)
     a0a:	4611      	mov	r1, r2
     a0c:	f025 fa1b 	bl	25e46 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     a10:	9803      	ldr	r0, [sp, #12]
     a12:	f01d fad1 	bl	1dfb8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     a16:	2108      	movs	r1, #8
     a18:	f640 4001 	movw	r0, #3073	; 0xc01
     a1c:	f007 fa88 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
     a20:	4604      	mov	r4, r0
     a22:	2800      	cmp	r0, #0
     a24:	d046      	beq.n	ab4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2b4>
	ev = net_buf_add(buf, sizeof(*ev));
     a26:	2108      	movs	r1, #8
     a28:	4408      	add	r0, r1
     a2a:	f024 fcdf 	bl	253ec <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     a2e:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     a32:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
     a34:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     a36:	d552      	bpl.n	ade <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2de>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     a38:	a12b      	add	r1, pc, #172	; (adr r1, ae8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e8>)
     a3a:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     a3e:	f021 ffd6 	bl	229ee <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     a42:	4621      	mov	r1, r4
     a44:	2200      	movs	r2, #0
     a46:	f640 4001 	movw	r0, #3073	; 0xc01
     a4a:	f007 fbcd 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
     a4e:	4604      	mov	r4, r0
     a50:	2800      	cmp	r0, #0
     a52:	f47f aee5 	bne.w	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     a56:	4601      	mov	r1, r0
     a58:	aa02      	add	r2, sp, #8
     a5a:	f64f 4001 	movw	r0, #64513	; 0xfc01
     a5e:	f007 fbc3 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
     a62:	4e25      	ldr	r6, [pc, #148]	; (af8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2f8>)
     a64:	4b25      	ldr	r3, [pc, #148]	; (afc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2fc>)
     a66:	1af6      	subs	r6, r6, r3
     a68:	08f6      	lsrs	r6, r6, #3
     a6a:	01b6      	lsls	r6, r6, #6
     a6c:	2800      	cmp	r0, #0
     a6e:	d04d      	beq.n	b0c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30c>
		BT_WARN("Vendor HCI extensions not available");
     a70:	4823      	ldr	r0, [pc, #140]	; (b00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x300>)
     a72:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
     a76:	f020 f8a3 	bl	20bc0 <log_0>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
     a7a:	79eb      	ldrb	r3, [r5, #7]
     a7c:	2b00      	cmp	r3, #0
     a7e:	f47f aecf 	bne.w	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
		bt_setup_public_id_addr();
     a82:	f008 fcd1 	bl	9428 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
     a86:	79eb      	ldrb	r3, [r5, #7]
     a88:	2b00      	cmp	r3, #0
     a8a:	f47f aec9 	bne.w	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
		err = bt_setup_random_id_addr();
     a8e:	f008 fd75 	bl	957c <bt_setup_random_id_addr>
		if (err) {
     a92:	4604      	mov	r4, r0
     a94:	2800      	cmp	r0, #0
     a96:	f000 80a6 	beq.w	be6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3e6>
			BT_ERR("Unable to set identity address");
     a9a:	481a      	ldr	r0, [pc, #104]	; (b04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x304>)
     a9c:	f046 0101 	orr.w	r1, r6, #1
			BT_ERR("Unable to set random address");
     aa0:	f020 f88e 	bl	20bc0 <log_0>
			return err;
     aa4:	e6bc      	b.n	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     aa6:	2102      	movs	r1, #2
     aa8:	f640 406d 	movw	r0, #3181	; 0xc6d
     aac:	f007 fa40 	bl	7f30 <bt_hci_cmd_create>
		if (!buf) {
     ab0:	4604      	mov	r4, r0
     ab2:	b910      	cbnz	r0, aba <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2ba>
		return -ENOBUFS;
     ab4:	f06f 0436 	mvn.w	r4, #54	; 0x36
     ab8:	e6b2      	b.n	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
     aba:	2102      	movs	r1, #2
     abc:	3008      	adds	r0, #8
     abe:	f024 fc95 	bl	253ec <net_buf_simple_add>
		cp_le->le = 0x01;
     ac2:	2301      	movs	r3, #1
     ac4:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
     ac6:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     ac8:	4621      	mov	r1, r4
     aca:	4632      	mov	r2, r6
     acc:	f640 406d 	movw	r0, #3181	; 0xc6d
     ad0:	f007 fb8a 	bl	81e8 <bt_hci_cmd_send_sync>
		if (err) {
     ad4:	4604      	mov	r4, r0
     ad6:	2800      	cmp	r0, #0
     ad8:	f43f aee6 	beq.w	8a8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa8>
     adc:	e6a0      	b.n	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     ade:	480a      	ldr	r0, [pc, #40]	; (b08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x308>)
     ae0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     ae4:	e7ab      	b.n	a3e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x23e>
     ae6:	bf00      	nop
     ae8:	02008890 	.word	0x02008890
     aec:	20008000 	.word	0x20008000
     af0:	200000a0 	.word	0x200000a0
     af4:	200000b4 	.word	0x200000b4
     af8:	0002662c 	.word	0x0002662c
     afc:	00026544 	.word	0x00026544
     b00:	000296fa 	.word	0x000296fa
     b04:	000297ce 	.word	0x000297ce
     b08:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
     b0c:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     b0e:	483b      	ldr	r0, [pc, #236]	; (bfc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3fc>)
	rp.info = (void *)rsp->data;
     b10:	689f      	ldr	r7, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     b12:	f8b7 2001 	ldrh.w	r2, [r7, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
     b16:	2a03      	cmp	r2, #3
		return plat_str[platform];
     b18:	bf96      	itet	ls
     b1a:	4939      	ldrls	r1, [pc, #228]	; (c00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x400>)
	return "unknown";
     b1c:	4939      	ldrhi	r1, [pc, #228]	; (c04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x404>)
		return plat_str[platform];
     b1e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
     b22:	f046 0303 	orr.w	r3, r6, #3
     b26:	f020 f86c 	bl	20c02 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     b2a:	f8b7 1001 	ldrh.w	r1, [r7, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
     b2e:	f8b7 2003 	ldrh.w	r2, [r7, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     b32:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
     b34:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     b38:	d12e      	bne.n	b98 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x398>
	if (variant < ARRAY_SIZE(nordic_str)) {
     b3a:	2a03      	cmp	r2, #3
     b3c:	d82c      	bhi.n	b98 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x398>
		return nordic_str[variant];
     b3e:	4932      	ldr	r1, [pc, #200]	; (c08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x408>)
     b40:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
     b44:	4831      	ldr	r0, [pc, #196]	; (c0c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x40c>)
     b46:	f020 f85c 	bl	20c02 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     b4a:	797a      	ldrb	r2, [r7, #5]
     b4c:	4830      	ldr	r0, [pc, #192]	; (c10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x410>)
	if (variant < ARRAY_SIZE(var_str)) {
     b4e:	2a03      	cmp	r2, #3
		return var_str[variant];
     b50:	bf96      	itet	ls
     b52:	4930      	ldrls	r1, [pc, #192]	; (c14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x414>)
	return "unknown";
     b54:	492b      	ldrhi	r1, [pc, #172]	; (c04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x404>)
		return var_str[variant];
     b56:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     b5a:	e9cd 1203 	strd	r1, r2, [sp, #12]
     b5e:	79ba      	ldrb	r2, [r7, #6]
     b60:	9205      	str	r2, [sp, #20]
     b62:	f8b7 2007 	ldrh.w	r2, [r7, #7]
     b66:	9206      	str	r2, [sp, #24]
     b68:	f8d7 2009 	ldr.w	r2, [r7, #9]
     b6c:	9207      	str	r2, [sp, #28]
     b6e:	f046 0303 	orr.w	r3, r6, #3
     b72:	2205      	movs	r2, #5
     b74:	a903      	add	r1, sp, #12
     b76:	f020 f879 	bl	20c6c <log_n>
	net_buf_unref(rsp);
     b7a:	9802      	ldr	r0, [sp, #8]
     b7c:	f01d fa1c 	bl	1dfb8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     b80:	aa02      	add	r2, sp, #8
     b82:	2100      	movs	r1, #0
     b84:	f64f 4002 	movw	r0, #64514	; 0xfc02
     b88:	f007 fb2e 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
     b8c:	4607      	mov	r7, r0
     b8e:	b128      	cbz	r0, b9c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x39c>
		BT_WARN("Failed to read supported vendor commands");
     b90:	4821      	ldr	r0, [pc, #132]	; (c18 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x418>)
     b92:	f046 0102 	orr.w	r1, r6, #2
     b96:	e76e      	b.n	a76 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x276>
		return "unknown";
     b98:	491a      	ldr	r1, [pc, #104]	; (c04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x404>)
     b9a:	e7d3      	b.n	b44 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x344>
	rp.cmds = (void *)rsp->data;
     b9c:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     b9e:	481f      	ldr	r0, [pc, #124]	; (c1c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x41c>)
     ba0:	6899      	ldr	r1, [r3, #8]
     ba2:	2202      	movs	r2, #2
     ba4:	3101      	adds	r1, #1
     ba6:	f021 fdbb 	bl	22720 <memcpy>
	net_buf_unref(rsp);
     baa:	9802      	ldr	r0, [sp, #8]
     bac:	f01d fa04 	bl	1dfb8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
     bb0:	f895 3089 	ldrb.w	r3, [r5, #137]	; 0x89
     bb4:	075b      	lsls	r3, r3, #29
     bb6:	f57f af60 	bpl.w	a7a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x27a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     bba:	aa02      	add	r2, sp, #8
     bbc:	4639      	mov	r1, r7
     bbe:	f64f 4003 	movw	r0, #64515	; 0xfc03
     bc2:	f007 fb11 	bl	81e8 <bt_hci_cmd_send_sync>
		if (err) {
     bc6:	b118      	cbz	r0, bd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3d0>
			BT_WARN("Failed to read supported vendor features");
     bc8:	4815      	ldr	r0, [pc, #84]	; (c20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x420>)
     bca:	f046 0102 	orr.w	r1, r6, #2
     bce:	e752      	b.n	a76 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x276>
		rp.feat = (void *)rsp->data;
     bd0:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
     bd2:	4814      	ldr	r0, [pc, #80]	; (c24 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x424>)
     bd4:	6899      	ldr	r1, [r3, #8]
     bd6:	2201      	movs	r2, #1
     bd8:	4411      	add	r1, r2
     bda:	f021 fda1 	bl	22720 <memcpy>
		net_buf_unref(rsp);
     bde:	9802      	ldr	r0, [sp, #8]
     be0:	f01d f9ea 	bl	1dfb8 <net_buf_unref>
     be4:	e749      	b.n	a7a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x27a>
		err = set_random_address(&bt_dev.id_addr[0].a);
     be6:	4810      	ldr	r0, [pc, #64]	; (c28 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x428>)
     be8:	f007 fba0 	bl	832c <set_random_address>
		if (err) {
     bec:	4604      	mov	r4, r0
     bee:	2800      	cmp	r0, #0
     bf0:	f43f ae16 	beq.w	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
			BT_ERR("Unable to set random address");
     bf4:	480d      	ldr	r0, [pc, #52]	; (c2c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x42c>)
     bf6:	f046 0101 	orr.w	r1, r6, #1
     bfa:	e751      	b.n	aa0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2a0>
     bfc:	0002971e 	.word	0x0002971e
     c00:	00026b1c 	.word	0x00026b1c
     c04:	00029049 	.word	0x00029049
     c08:	00026ae4 	.word	0x00026ae4
     c0c:	00029737 	.word	0x00029737
     c10:	0002974f 	.word	0x0002974f
     c14:	00026b4c 	.word	0x00026b4c
     c18:	0002977c 	.word	0x0002977c
     c1c:	20000089 	.word	0x20000089
     c20:	000297a5 	.word	0x000297a5
     c24:	20000088 	.word	0x20000088
     c28:	20000001 	.word	0x20000001
     c2c:	000297ed 	.word	0x000297ed

00000c30 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c34:	4cb1      	ldr	r4, [pc, #708]	; (efc <ll_adv_enable+0x2cc>)
     c36:	b08f      	sub	sp, #60	; 0x3c
     c38:	f894 60d6 	ldrb.w	r6, [r4, #214]	; 0xd6
	uint8_t const handle = 0;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
     c3c:	2302      	movs	r3, #2
     c3e:	f006 0601 	and.w	r6, r6, #1
     c42:	930c      	str	r3, [sp, #48]	; 0x30
	uint32_t ticks_slot_offset;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
     c44:	2800      	cmp	r0, #0
     c46:	f000 81bf 	beq.w	fc8 <ll_adv_enable+0x398>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     c4a:	bbbe      	cbnz	r6, cbc <ll_adv_enable+0x8c>
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     c4c:	f894 807c 	ldrb.w	r8, [r4, #124]	; 0x7c
		ull_filter_adv_update(lll->filter_policy);
     c50:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     c54:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
     c58:	2727      	movs	r7, #39	; 0x27
     c5a:	232d      	movs	r3, #45	; 0x2d
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     c5c:	fb07 4808 	mla	r8, r7, r8, r4
     c60:	f000 0003 	and.w	r0, r0, #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     c64:	fb17 3702 	smlabb	r7, r7, r2, r3
		lll->rl_idx = FILTER_IDX_NONE;
     c68:	23ff      	movs	r3, #255	; 0xff
     c6a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		ull_filter_adv_update(lll->filter_policy);
     c6e:	f019 f90f 	bl	19e90 <ull_filter_adv_update>
		if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     c72:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
     c76:	0741      	lsls	r1, r0, #29
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     c78:	f108 087d 	add.w	r8, r8, #125	; 0x7d
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     c7c:	eb04 0907 	add.w	r9, r4, r7
     c80:	f100 8124 	bmi.w	ecc <ll_adv_enable+0x29c>
				tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     c84:	5de0      	ldrb	r0, [r4, r7]
     c86:	4631      	mov	r1, r6
     c88:	f3c0 1080 	ubfx	r0, r0, #6, #1
     c8c:	f011 fb66 	bl	1235c <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     c90:	2206      	movs	r2, #6
     c92:	4601      	mov	r1, r0
				tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     c94:	4605      	mov	r5, r0
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     c96:	f109 0002 	add.w	r0, r9, #2
     c9a:	f021 fd41 	bl	22720 <memcpy>
			memcpy(&pdu_scan->scan_rsp.addr[0], tx_addr,
     c9e:	4629      	mov	r1, r5
     ca0:	2206      	movs	r2, #6
     ca2:	f108 0002 	add.w	r0, r8, #2
     ca6:	f021 fd3b 	bl	22720 <memcpy>
		if (pdu_adv->tx_addr &&
     caa:	5de3      	ldrb	r3, [r4, r7]
     cac:	065a      	lsls	r2, r3, #25
     cae:	d40a      	bmi.n	cc6 <ll_adv_enable+0x96>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     cb0:	f013 0f0e 	tst.w	r3, #14
     cb4:	f040 80e2 	bne.w	e7c <ll_adv_enable+0x24c>
		if (lll->conn) {
     cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
     cba:	b18b      	cbz	r3, ce0 <ll_adv_enable+0xb0>
	ret = ull_ticker_status_take(ret, &ret_cb);
	if (ret) {
		mark = ull_disable_mark(adv);
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
     cbc:	260c      	movs	r6, #12
}
     cbe:	4630      	mov	r0, r6
     cc0:	b00f      	add	sp, #60	; 0x3c
     cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !mem_nz(pdu_adv->adv_ind.addr, BDADDR_SIZE)) {
     cc6:	2106      	movs	r1, #6
     cc8:	f109 0002 	add.w	r0, r9, #2
     ccc:	f00f fe16 	bl	108fc <mem_nz>
		if (pdu_adv->tx_addr &&
     cd0:	2800      	cmp	r0, #0
     cd2:	f000 822d 	beq.w	1130 <ll_adv_enable+0x500>
     cd6:	5de3      	ldrb	r3, [r4, r7]
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     cd8:	f013 0f0e 	tst.w	r3, #14
     cdc:	d0ec      	beq.n	cb8 <ll_adv_enable+0x88>
     cde:	e0cd      	b.n	e7c <ll_adv_enable+0x24c>
		link = ll_rx_link_alloc();
     ce0:	f014 f8c6 	bl	14e70 <ll_rx_link_alloc>
		if (!link) {
     ce4:	4682      	mov	sl, r0
     ce6:	2800      	cmp	r0, #0
     ce8:	f000 8249 	beq.w	117e <ll_adv_enable+0x54e>
		node_rx = ll_rx_alloc();
     cec:	f014 f8cc 	bl	14e88 <ll_rx_alloc>
		if (!node_rx) {
     cf0:	4683      	mov	fp, r0
     cf2:	2800      	cmp	r0, #0
     cf4:	f000 825c 	beq.w	11b0 <ll_adv_enable+0x580>
		conn = ll_conn_acquire();
     cf8:	f015 fc4e 	bl	16598 <ll_conn_acquire>
		if (!conn) {
     cfc:	4605      	mov	r5, r0
     cfe:	2800      	cmp	r0, #0
     d00:	f000 8253 	beq.w	11aa <ll_adv_enable+0x57a>
		conn_lll->handle = 0xFFFF;
     d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
     d08:	6f80      	ldr	r0, [r0, #120]	; 0x78
		conn_lll->handle = 0xFFFF;
     d0a:	85ab      	strh	r3, [r5, #44]	; 0x2c
		conn_lll = &conn->lll;
     d0c:	f105 031c 	add.w	r3, r5, #28
     d10:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     d12:	2800      	cmp	r0, #0
     d14:	f000 822f 	beq.w	1176 <ll_adv_enable+0x546>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     d18:	f105 026c 	add.w	r2, r5, #108	; 0x6c
     d1c:	f105 0168 	add.w	r1, r5, #104	; 0x68
     d20:	f00f fdf8 	bl	10914 <memq_init>
		conn_lll->phy_tx = BIT(0);
     d24:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
     d28:	4975      	ldr	r1, [pc, #468]	; (f00 <ll_adv_enable+0x2d0>)
		conn_lll->data_chan_sel = 0;
     d2a:	f895 e03d 	ldrb.w	lr, [r5, #61]	; 0x3d
		conn->common.fex_valid = 0;
     d2e:	f895 00dc 	ldrb.w	r0, [r5, #220]	; 0xdc
		conn_lll->slave.latency_enabled = 0;
     d32:	f895 c040 	ldrb.w	ip, [r5, #64]	; 0x40
		conn->llcp_terminate.node_rx.hdr.link = link;
     d36:	f8c5 a130 	str.w	sl, [r5, #304]	; 0x130
		conn_lll->phy_tx = BIT(0);
     d3a:	400a      	ands	r2, r1
     d3c:	f442 7288 	orr.w	r2, r2, #272	; 0x110
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     d40:	f895 1126 	ldrb.w	r1, [r5, #294]	; 0x126
		conn_lll->phy_tx = BIT(0);
     d44:	f042 0201 	orr.w	r2, r2, #1
		conn_lll->data_chan_sel = 0;
     d48:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
     d4c:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
		conn->common.fex_valid = 0;
     d50:	f020 0003 	bic.w	r0, r0, #3
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     d54:	f021 0103 	bic.w	r1, r1, #3
		conn_lll->phy_tx = BIT(0);
     d58:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
		conn_lll->data_chan_use = 0;
     d5c:	2200      	movs	r2, #0
		conn_lll->slave.latency_enabled = 0;
     d5e:	f362 0c00 	bfi	ip, r2, #0, #1
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     d62:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
		conn_lll->data_chan_sel = 0;
     d66:	f885 e03d 	strb.w	lr, [r5, #61]	; 0x3d
		conn->common.fex_valid = 0;
     d6a:	f885 00dc 	strb.w	r0, [r5, #220]	; 0xdc
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     d6e:	f885 1126 	strb.w	r1, [r5, #294]	; 0x126
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
     d72:	4864      	ldr	r0, [pc, #400]	; (f04 <ll_adv_enable+0x2d4>)
		conn->llcp_feature.features_conn = LL_FEAT;
     d74:	4964      	ldr	r1, [pc, #400]	; (f08 <ll_adv_enable+0x2d8>)
		conn_lll->data_chan_use = 0;
     d76:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
		conn->connect_expire = 6;
     d7a:	f04f 0e06 	mov.w	lr, #6
		conn_lll->slave.window_widening_event_us = 0;
     d7e:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
		conn_lll->latency_prepare = 0;
     d82:	866a      	strh	r2, [r5, #50]	; 0x32
		conn_lll->latency_event = 0;
     d84:	636a      	str	r2, [r5, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
     d86:	656a      	str	r2, [r5, #84]	; 0x54
		conn->supervision_expire = 0;
     d88:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
		conn->procedure_expire = 0;
     d8c:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     d90:	f8a5 20e8 	strh.w	r2, [r5, #232]	; 0xe8
     d94:	f885 20ea 	strb.w	r2, [r5, #234]	; 0xea
		conn->llcp_rx = NULL;
     d98:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     d9c:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     da0:	f8a5 2118 	strh.w	r2, [r5, #280]	; 0x118
		conn->llcp_feature.features_peer = 0;
     da4:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     da8:	f8a5 2124 	strh.w	r2, [r5, #292]	; 0x124
		conn->llcp_terminate.reason_peer = 0;
     dac:	f885 212f 	strb.w	r2, [r5, #303]	; 0x12f
		conn_lll->link_tx_free = NULL;
     db0:	67aa      	str	r2, [r5, #120]	; 0x78
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     db2:	65eb      	str	r3, [r5, #92]	; 0x5c
		conn_lll->slave.latency_enabled = 0;
     db4:	f885 c040 	strb.w	ip, [r5, #64]	; 0x40
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
     db8:	6628      	str	r0, [r5, #96]	; 0x60
		conn->connect_expire = 6;
     dba:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
		conn->llcp_feature.features_conn = LL_FEAT;
     dbe:	f8c5 111c 	str.w	r1, [r5, #284]	; 0x11c
		conn_lll->packet_tx_head_len = 0;
     dc2:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		conn->llcp_conn_param.disabled = 0;
     dc6:	f895 e172 	ldrb.w	lr, [r5, #370]	; 0x172
		conn->llcp_length.disabled = 0U;
     dca:	f895 c19a 	ldrb.w	ip, [r5, #410]	; 0x19a
		conn_lll->sn = 0;
     dce:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     dd2:	f895 1152 	ldrb.w	r1, [r5, #338]	; 0x152
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     dd6:	f8a5 2150 	strh.w	r2, [r5, #336]	; 0x150
		conn->llcp_length.disabled = 0U;
     dda:	f362 0cc3 	bfi	ip, r2, #3, #1
		conn->llcp_conn_param.disabled = 0;
     dde:	f362 1e04 	bfi	lr, r2, #4, #1
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     de2:	f021 0107 	bic.w	r1, r1, #7
		conn_lll->sn = 0;
     de6:	f020 001f 	bic.w	r0, r0, #31
		conn->llcp_conn_param.req = 0;
     dea:	f8a5 2170 	strh.w	r2, [r5, #368]	; 0x170
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     dee:	f8a5 2198 	strh.w	r2, [r5, #408]	; 0x198
		conn->llcp_length.cache.tx_octets = 0U;
     df2:	f8a5 21a4 	strh.w	r2, [r5, #420]	; 0x1a4
		conn->llcp_length.disabled = 0U;
     df6:	f885 c19a 	strb.w	ip, [r5, #410]	; 0x19a
		conn->llcp_conn_param.disabled = 0;
     dfa:	f885 e172 	strb.w	lr, [r5, #370]	; 0x172
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     dfe:	f885 1152 	strb.w	r1, [r5, #338]	; 0x152
		conn_lll->sn = 0;
     e02:	f885 007e 	strb.w	r0, [r5, #126]	; 0x7e
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     e06:	f015 feb5 	bl	16b74 <ull_conn_default_tx_octets_get>
     e0a:	f8a5 00d6 	strh.w	r0, [r5, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
     e0e:	f015 feb7 	bl	16b80 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     e12:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
     e16:	493d      	ldr	r1, [pc, #244]	; (f0c <ll_adv_enable+0x2dc>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     e18:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     e1c:	4019      	ands	r1, r3
     e1e:	f8c5 11a8 	str.w	r1, [r5, #424]	; 0x1a8
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     e22:	f015 feb3 	bl	16b8c <ull_conn_default_phy_tx_get>
     e26:	f895 11ac 	ldrb.w	r1, [r5, #428]	; 0x1ac
     e2a:	f360 0102 	bfi	r1, r0, #0, #3
     e2e:	f885 11ac 	strb.w	r1, [r5, #428]	; 0x1ac
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     e32:	f015 feb1 	bl	16b98 <ull_conn_default_phy_rx_get>
		adv->node_rx_cc_free = node_rx;
     e36:	e9c4 ab33 	strd	sl, fp, [r4, #204]	; 0xcc
		lll->conn = conn_lll;
     e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     e3c:	6263      	str	r3, [r4, #36]	; 0x24
		conn->phy_pref_flags = 0;
     e3e:	f895 11ac 	ldrb.w	r1, [r5, #428]	; 0x1ac
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     e42:	f895 c020 	ldrb.w	ip, [r5, #32]
	hdr->parent = parent;
     e46:	61ed      	str	r5, [r5, #28]
     e48:	0103      	lsls	r3, r0, #4
		conn->tx_data = conn->tx_data_last = 0;
     e4a:	2200      	movs	r2, #0
		conn->phy_pref_flags = 0;
     e4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
     e50:	f021 0178 	bic.w	r1, r1, #120	; 0x78
     e54:	430b      	orrs	r3, r1
	hdr->is_stop = 0U;
     e56:	f362 0c00 	bfi	ip, r2, #0, #1
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     e5a:	e9c5 226e 	strd	r2, r2, [r5, #440]	; 0x1b8
     e5e:	e9c5 226c 	strd	r2, r2, [r5, #432]	; 0x1b0
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     e62:	e9c5 2205 	strd	r2, r2, [r5, #20]
		conn->tx_data = conn->tx_data_last = 0;
     e66:	f8c5 21c0 	str.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_flags = 0;
     e6a:	f885 31ac 	strb.w	r3, [r5, #428]	; 0x1ac
     e6e:	f885 c020 	strb.w	ip, [r5, #32]
		err = lll_clock_wait();
     e72:	f01a fabd 	bl	1b3f0 <lll_clock_wait>
		if (err) {
     e76:	2800      	cmp	r0, #0
     e78:	f040 8166 	bne.w	1148 <ll_adv_enable+0x518>
	uint8_t ch_map = lll->chan_map;
     e7c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     e80:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     e82:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     e86:	a80d      	add	r0, sp, #52	; 0x34
	uint8_t ch_map = lll->chan_map;
     e88:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     e8c:	f00f feba 	bl	10c04 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     e90:	2800      	cmp	r0, #0
     e92:	f000 8092 	beq.w	fba <ll_adv_enable+0x38a>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     e96:	5de3      	ldrb	r3, [r4, r7]
     e98:	f003 030f 	and.w	r3, r3, #15
     e9c:	2b02      	cmp	r3, #2
     e9e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
     ea2:	d035      	beq.n	f10 <ll_adv_enable+0x2e0>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     ea4:	2b01      	cmp	r3, #1
     ea6:	f000 8153 	beq.w	1150 <ll_adv_enable+0x520>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
     eaa:	f898 0001 	ldrb.w	r0, [r8, #1]
     eae:	3010      	adds	r0, #16
		const uint16_t scan_rsp_us =
     eb0:	00c1      	lsls	r1, r0, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     eb2:	2b00      	cmp	r3, #0
     eb4:	f000 813e 	beq.w	1134 <ll_adv_enable+0x504>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     eb8:	2b06      	cmp	r3, #6
     eba:	f000 817e 	beq.w	11ba <ll_adv_enable+0x58a>
     ebe:	f44f 70da 	mov.w	r0, #436	; 0x1b4
     ec2:	f44f 711b 	mov.w	r1, #620	; 0x26c
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     ec6:	fb00 1002 	mla	r0, r0, r2, r1
     eca:	e02c      	b.n	f26 <ll_adv_enable+0x2f6>
			lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     ecc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     ed0:	4632      	mov	r2, r6
     ed2:	f104 01d7 	add.w	r1, r4, #215	; 0xd7
     ed6:	f019 f9df 	bl	1a298 <ull_filter_rl_find>
			if (lll->rl_idx != FILTER_IDX_NONE) {
     eda:	28ff      	cmp	r0, #255	; 0xff
			lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     edc:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
			if (lll->rl_idx != FILTER_IDX_NONE) {
     ee0:	d002      	beq.n	ee8 <ll_adv_enable+0x2b8>
				ull_filter_rpa_update(false);
     ee2:	4630      	mov	r0, r6
     ee4:	f019 f8a0 	bl	1a028 <ull_filter_rpa_update>
			ull_filter_adv_pdu_update(adv, pdu_adv);
     ee8:	4649      	mov	r1, r9
     eea:	4804      	ldr	r0, [pc, #16]	; (efc <ll_adv_enable+0x2cc>)
     eec:	f019 f816 	bl	19f1c <ull_filter_adv_pdu_update>
			ull_filter_adv_pdu_update(adv, pdu_scan);
     ef0:	4802      	ldr	r0, [pc, #8]	; (efc <ll_adv_enable+0x2cc>)
     ef2:	4641      	mov	r1, r8
     ef4:	f019 f812 	bl	19f1c <ull_filter_adv_pdu_update>
		if (!priv) {
     ef8:	e6d7      	b.n	caa <ll_adv_enable+0x7a>
     efa:	bf00      	nop
     efc:	20002d28 	.word	0x20002d28
     f00:	fffff880 	.word	0xfffff880
     f04:	01480148 	.word	0x01480148
     f08:	000149ff 	.word	0x000149ff
     f0c:	f6ff0000 	.word	0xf6ff0000
			adv_size += pdu_adv->len;
     f10:	f899 3001 	ldrb.w	r3, [r9, #1]
     f14:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     f16:	00db      	lsls	r3, r3, #3
     f18:	fb00 f003 	mul.w	r0, r0, r3
     f1c:	f500 70aa 	add.w	r0, r0, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
     f20:	2364      	movs	r3, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     f22:	fb03 0002 	mla	r0, r3, r2, r0
     f26:	f894 c020 	ldrb.w	ip, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     f2a:	4aaf      	ldr	r2, [pc, #700]	; (11e8 <ll_adv_enable+0x5b8>)
	hdr->parent = parent;
     f2c:	61e4      	str	r4, [r4, #28]
     f2e:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
     f30:	f365 0c00 	bfi	ip, r5, #0, #1
	adv->evt.ticks_xtal_to_start =
     f34:	2331      	movs	r3, #49	; 0x31
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     f36:	fba0 0102 	umull	r0, r1, r0, r2
	adv->evt.ticks_xtal_to_start =
     f3a:	6023      	str	r3, [r4, #0]
     f3c:	f884 c020 	strb.w	ip, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     f40:	a3a7      	add	r3, pc, #668	; (adr r3, 11e0 <ll_adv_enable+0x5b0>)
     f42:	e9d3 2300 	ldrd	r2, r3, [r3]
     f46:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_preempt_to_start =
     f4a:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     f4e:	f7ff f8d7 	bl	100 <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
     f52:	f8b4 90d4 	ldrh.w	r9, [r4, #212]	; 0xd4
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     f56:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
     f58:	f011 f9fa 	bl	12350 <ticker_ticks_now_get>
     f5c:	4680      	mov	r8, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     f5e:	f1b9 0f00 	cmp.w	r9, #0
     f62:	d107      	bne.n	f74 <ll_adv_enable+0x344>
     f64:	5de5      	ldrb	r5, [r4, r7]
     f66:	f005 050f 	and.w	r5, r5, #15
     f6a:	f1a5 0501 	sub.w	r5, r5, #1
     f6e:	fab5 f585 	clz	r5, r5
     f72:	096d      	lsrs	r5, r5, #5
     f74:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
     f78:	68e3      	ldr	r3, [r4, #12]
     f7a:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
     f7e:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     f82:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
     f86:	f000 8083 	beq.w	1090 <ll_adv_enable+0x460>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     f8a:	4d98      	ldr	r5, [pc, #608]	; (11ec <ll_adv_enable+0x5bc>)
     f8c:	4a98      	ldr	r2, [pc, #608]	; (11f0 <ll_adv_enable+0x5c0>)
     f8e:	9304      	str	r3, [sp, #16]
     f90:	2000      	movs	r0, #0
     f92:	af0c      	add	r7, sp, #48	; 0x30
     f94:	9301      	str	r3, [sp, #4]
     f96:	9205      	str	r2, [sp, #20]
     f98:	2103      	movs	r1, #3
     f9a:	e9cd 5707 	strd	r5, r7, [sp, #28]
     f9e:	e9cd 0002 	strd	r0, r0, [sp, #8]
     fa2:	9406      	str	r4, [sp, #24]
     fa4:	9000      	str	r0, [sp, #0]
     fa6:	4643      	mov	r3, r8
     fa8:	2202      	movs	r2, #2
     faa:	f011 f8c1 	bl	12130 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     fae:	4639      	mov	r1, r7
     fb0:	f013 fff2 	bl	14f98 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     fb4:	2800      	cmp	r0, #0
     fb6:	f000 80a7 	beq.w	1108 <ll_adv_enable+0x4d8>
	if (adv->lll.conn) {
     fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
     fbc:	2b00      	cmp	r3, #0
     fbe:	f43f ae7d 	beq.w	cbc <ll_adv_enable+0x8c>
		conn_release(adv);
     fc2:	f014 fafb 	bl	155bc <conn_release.constprop.0>
     fc6:	e679      	b.n	cbc <ll_adv_enable+0x8c>
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
     fc8:	930d      	str	r3, [sp, #52]	; 0x34
	if (!adv || !adv->is_enabled) {
     fca:	2e00      	cmp	r6, #0
     fcc:	f43f ae76 	beq.w	cbc <ll_adv_enable+0x8c>
	mark = ull_disable_mark(adv);
     fd0:	4620      	mov	r0, r4
     fd2:	f013 ffef 	bl	14fb4 <ull_disable_mark>
	LL_ASSERT(mark == adv);
     fd6:	4284      	cmp	r4, r0
     fd8:	d00c      	beq.n	ff4 <ll_adv_enable+0x3c4>
     fda:	4a86      	ldr	r2, [pc, #536]	; (11f4 <ll_adv_enable+0x5c4>)
     fdc:	4986      	ldr	r1, [pc, #536]	; (11f8 <ll_adv_enable+0x5c8>)
     fde:	4887      	ldr	r0, [pc, #540]	; (11fc <ll_adv_enable+0x5cc>)
     fe0:	f240 632b 	movw	r3, #1579	; 0x62b
     fe4:	f01f fb2c 	bl	20640 <printk>
     fe8:	4040      	eors	r0, r0
     fea:	f380 8811 	msr	BASEPRI, r0
     fee:	f04f 0003 	mov.w	r0, #3
     ff2:	df02      	svc	2
	if (adv->lll.is_hdcd) {
     ff4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     ff8:	07d8      	lsls	r0, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     ffa:	ad0d      	add	r5, sp, #52	; 0x34
	if (adv->lll.is_hdcd) {
     ffc:	d50e      	bpl.n	101c <ll_adv_enable+0x3ec>
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     ffe:	2103      	movs	r1, #3
    1000:	4b7a      	ldr	r3, [pc, #488]	; (11ec <ll_adv_enable+0x5bc>)
    1002:	9500      	str	r5, [sp, #0]
    1004:	2201      	movs	r2, #1
    1006:	2000      	movs	r0, #0
    1008:	f011 f8fe 	bl	12208 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    100c:	4629      	mov	r1, r5
    100e:	f013 ffc3 	bl	14f98 <ull_ticker_status_take>
		if (ret) {
    1012:	2800      	cmp	r0, #0
    1014:	f040 80db 	bne.w	11ce <ll_adv_enable+0x59e>
		ret_cb = TICKER_STATUS_BUSY;
    1018:	2302      	movs	r3, #2
    101a:	930d      	str	r3, [sp, #52]	; 0x34
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    101c:	2103      	movs	r1, #3
    101e:	4b73      	ldr	r3, [pc, #460]	; (11ec <ll_adv_enable+0x5bc>)
    1020:	9500      	str	r5, [sp, #0]
    1022:	2202      	movs	r2, #2
    1024:	2000      	movs	r0, #0
    1026:	f011 f8ef 	bl	12208 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    102a:	4629      	mov	r1, r5
    102c:	f013 ffb4 	bl	14f98 <ull_ticker_status_take>
	if (ret) {
    1030:	2800      	cmp	r0, #0
    1032:	f040 80a6 	bne.w	1182 <ll_adv_enable+0x552>
	}

	ret = ull_disable(&adv->lll);
    1036:	4872      	ldr	r0, [pc, #456]	; (1200 <ll_adv_enable+0x5d0>)
    1038:	f013 fff8 	bl	1502c <ull_disable>
	LL_ASSERT(!ret);
    103c:	2800      	cmp	r0, #0
    103e:	f040 808c 	bne.w	115a <ll_adv_enable+0x52a>

	mark = ull_disable_unmark(adv);
    1042:	4870      	ldr	r0, [pc, #448]	; (1204 <ll_adv_enable+0x5d4>)
    1044:	f013 ffc2 	bl	14fcc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    1048:	4284      	cmp	r4, r0
    104a:	d00c      	beq.n	1066 <ll_adv_enable+0x436>
    104c:	4a69      	ldr	r2, [pc, #420]	; (11f4 <ll_adv_enable+0x5c4>)
    104e:	496a      	ldr	r1, [pc, #424]	; (11f8 <ll_adv_enable+0x5c8>)
    1050:	486a      	ldr	r0, [pc, #424]	; (11fc <ll_adv_enable+0x5cc>)
    1052:	f240 634d 	movw	r3, #1613	; 0x64d
    1056:	f01f faf3 	bl	20640 <printk>
    105a:	4040      	eors	r0, r0
    105c:	f380 8811 	msr	BASEPRI, r0
    1060:	f04f 0003 	mov.w	r0, #3
    1064:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
    1066:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1068:	b10b      	cbz	r3, 106e <ll_adv_enable+0x43e>
		conn_release(adv);
    106a:	f014 faa7 	bl	155bc <conn_release.constprop.0>
	}
#endif /* CONFIG_BT_PERIPHERAL */

	adv->is_enabled = 0U;
    106e:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6

#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
    1072:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
    1074:	f36f 0300 	bfc	r3, #0, #1
    1078:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
    107c:	f014 fe56 	bl	15d2c <ull_scan_is_enabled_get>
    1080:	4606      	mov	r6, r0
    1082:	2800      	cmp	r0, #0
    1084:	d03d      	beq.n	1102 <ll_adv_enable+0x4d2>
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
    1086:	2600      	movs	r6, #0
}
    1088:	4630      	mov	r0, r6
    108a:	b00f      	add	sp, #60	; 0x3c
    108c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1090:	4a5d      	ldr	r2, [pc, #372]	; (1208 <ll_adv_enable+0x5d8>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1092:	485e      	ldr	r0, [pc, #376]	; (120c <ll_adv_enable+0x5dc>)
		ret = ticker_start_ext(
    1094:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1096:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    109a:	fba9 0100 	umull	r0, r1, r9, r0
		ret = ticker_start_ext(
    109e:	f8df e14c 	ldr.w	lr, [pc, #332]	; 11ec <ll_adv_enable+0x5bc>
    10a2:	9406      	str	r4, [sp, #24]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    10a4:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    10a6:	2391      	movs	r3, #145	; 0x91
    10a8:	fb03 1109 	mla	r1, r3, r9, r1
		ret = ticker_start_ext(
    10ac:	f8df c140 	ldr.w	ip, [pc, #320]	; 11f0 <ll_adv_enable+0x5c0>
    10b0:	9209      	str	r2, [sp, #36]	; 0x24
    10b2:	af0c      	add	r7, sp, #48	; 0x30
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    10b4:	a34a      	add	r3, pc, #296	; (adr r3, 11e0 <ll_adv_enable+0x5b0>)
    10b6:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
    10ba:	f64f 79ff 	movw	r9, #65535	; 0xffff
    10be:	e9cd e707 	strd	lr, r7, [sp, #28]
    10c2:	9502      	str	r5, [sp, #8]
    10c4:	f8cd c014 	str.w	ip, [sp, #20]
    10c8:	f8cd 900c 	str.w	r9, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    10cc:	f7ff f818 	bl	100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
    10d0:	4643      	mov	r3, r8
    10d2:	e9cd 5000 	strd	r5, r0, [sp]
    10d6:	2202      	movs	r2, #2
    10d8:	4628      	mov	r0, r5
    10da:	2103      	movs	r1, #3
    10dc:	f010 ffd2 	bl	12084 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    10e0:	4639      	mov	r1, r7
    10e2:	f013 ff59 	bl	14f98 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    10e6:	2800      	cmp	r0, #0
    10e8:	f47f af67 	bne.w	fba <ll_adv_enable+0x38a>
	adv->is_enabled = 1;
    10ec:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
    10f0:	f043 0301 	orr.w	r3, r3, #1
    10f4:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
    10f8:	f014 fe18 	bl	15d2c <ull_scan_is_enabled_get>
    10fc:	2800      	cmp	r0, #0
    10fe:	d1c2      	bne.n	1086 <ll_adv_enable+0x456>
		ull_filter_adv_scan_state_cb(BIT(0));
    1100:	2001      	movs	r0, #1
    1102:	f018 fea3 	bl	19e4c <ull_filter_adv_scan_state_cb>
    1106:	e5da      	b.n	cbe <ll_adv_enable+0x8e>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1108:	4941      	ldr	r1, [pc, #260]	; (1210 <ll_adv_enable+0x5e0>)
    110a:	9105      	str	r1, [sp, #20]
    110c:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    1110:	e9cd 5707 	strd	r5, r7, [sp, #28]
    1114:	9200      	str	r2, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
    1116:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1118:	e9cd 0003 	strd	r0, r0, [sp, #12]
    111c:	e9cd 0001 	strd	r0, r0, [sp, #4]
    1120:	9406      	str	r4, [sp, #24]
    1122:	4643      	mov	r3, r8
    1124:	2201      	movs	r2, #1
    1126:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    1128:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    112a:	f011 f801 	bl	12130 <ticker_start>
    112e:	e7d7      	b.n	10e0 <ll_adv_enable+0x4b0>
			return BT_HCI_ERR_INVALID_PARAM;
    1130:	2612      	movs	r6, #18
    1132:	e5c4      	b.n	cbe <ll_adv_enable+0x8e>
				adv_size += pdu_adv->len;
    1134:	f899 0001 	ldrb.w	r0, [r9, #1]
    1138:	3010      	adds	r0, #16
    113a:	00c0      	lsls	r0, r0, #3
    113c:	f500 734d 	add.w	r3, r0, #820	; 0x334
    1140:	4419      	add	r1, r3
    1142:	f500 709a 	add.w	r0, r0, #308	; 0x134
    1146:	e6be      	b.n	ec6 <ll_adv_enable+0x296>
			conn_release(adv);
    1148:	f014 fa38 	bl	155bc <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    114c:	2603      	movs	r6, #3
    114e:	e5b6      	b.n	cbe <ll_adv_enable+0x8e>
    1150:	f44f 70f2 	mov.w	r0, #484	; 0x1e4
    1154:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
    1158:	e6b5      	b.n	ec6 <ll_adv_enable+0x296>
	LL_ASSERT(!ret);
    115a:	4a26      	ldr	r2, [pc, #152]	; (11f4 <ll_adv_enable+0x5c4>)
    115c:	492d      	ldr	r1, [pc, #180]	; (1214 <ll_adv_enable+0x5e4>)
    115e:	4827      	ldr	r0, [pc, #156]	; (11fc <ll_adv_enable+0x5cc>)
    1160:	f240 634a 	movw	r3, #1610	; 0x64a
    1164:	f01f fa6c 	bl	20640 <printk>
    1168:	4040      	eors	r0, r0
    116a:	f380 8811 	msr	BASEPRI, r0
    116e:	f04f 0003 	mov.w	r0, #3
    1172:	df02      	svc	2
    1174:	e765      	b.n	1042 <ll_adv_enable+0x412>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    1176:	f105 0070 	add.w	r0, r5, #112	; 0x70
    117a:	67a8      	str	r0, [r5, #120]	; 0x78
    117c:	e5cc      	b.n	d18 <ll_adv_enable+0xe8>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    117e:	2607      	movs	r6, #7
    1180:	e59d      	b.n	cbe <ll_adv_enable+0x8e>
		mark = ull_disable_mark(adv);
    1182:	4820      	ldr	r0, [pc, #128]	; (1204 <ll_adv_enable+0x5d4>)
    1184:	f013 ff16 	bl	14fb4 <ull_disable_mark>
		LL_ASSERT(mark == adv);
    1188:	4284      	cmp	r4, r0
    118a:	f43f ad97 	beq.w	cbc <ll_adv_enable+0x8c>
    118e:	f240 6344 	movw	r3, #1604	; 0x644
    1192:	4a18      	ldr	r2, [pc, #96]	; (11f4 <ll_adv_enable+0x5c4>)
    1194:	4918      	ldr	r1, [pc, #96]	; (11f8 <ll_adv_enable+0x5c8>)
    1196:	4819      	ldr	r0, [pc, #100]	; (11fc <ll_adv_enable+0x5cc>)
    1198:	f01f fa52 	bl	20640 <printk>
    119c:	4040      	eors	r0, r0
    119e:	f380 8811 	msr	BASEPRI, r0
    11a2:	f04f 0003 	mov.w	r0, #3
    11a6:	df02      	svc	2
    11a8:	e588      	b.n	cbc <ll_adv_enable+0x8c>
			ll_rx_release(node_rx);
    11aa:	4658      	mov	r0, fp
    11ac:	f013 fe72 	bl	14e94 <ll_rx_release>
			ll_rx_link_release(link);
    11b0:	4650      	mov	r0, sl
    11b2:	f013 fe63 	bl	14e7c <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    11b6:	2607      	movs	r6, #7
    11b8:	e581      	b.n	cbe <ll_adv_enable+0x8e>
				adv_size += pdu_adv->len;
    11ba:	f899 3001 	ldrb.w	r3, [r9, #1]
    11be:	3310      	adds	r3, #16
    11c0:	00db      	lsls	r3, r3, #3
    11c2:	f503 704d 	add.w	r0, r3, #820	; 0x334
    11c6:	4401      	add	r1, r0
    11c8:	f503 709a 	add.w	r0, r3, #308	; 0x134
    11cc:	e67b      	b.n	ec6 <ll_adv_enable+0x296>
			mark = ull_disable_mark(adv);
    11ce:	480d      	ldr	r0, [pc, #52]	; (1204 <ll_adv_enable+0x5d4>)
    11d0:	f013 fef0 	bl	14fb4 <ull_disable_mark>
			LL_ASSERT(mark == adv);
    11d4:	4284      	cmp	r4, r0
    11d6:	f43f ad71 	beq.w	cbc <ll_adv_enable+0x8c>
    11da:	f240 6335 	movw	r3, #1589	; 0x635
    11de:	e7d8      	b.n	1192 <ll_adv_enable+0x562>
    11e0:	1afd498d 	.word	0x1afd498d
    11e4:	00000007 	.word	0x00000007
    11e8:	3b9aca00 	.word	0x3b9aca00
    11ec:	00014f8d 	.word	0x00014f8d
    11f0:	00015331 	.word	0x00015331
    11f4:	00027284 	.word	0x00027284
    11f8:	00027374 	.word	0x00027374
    11fc:	00026ecc 	.word	0x00026ecc
    1200:	20002d44 	.word	0x20002d44
    1204:	20002d28 	.word	0x20002d28
    1208:	20002e08 	.word	0x20002e08
    120c:	84e72a00 	.word	0x84e72a00
    1210:	00015539 	.word	0x00015539
    1214:	00027188 	.word	0x00027188

00001218 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
    1218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
    121a:	4e19      	ldr	r6, [pc, #100]	; (1280 <ll_scan_params_set+0x68>)
{
    121c:	f89d 4018 	ldrb.w	r4, [sp, #24]
	if (!scan || scan->is_enabled) {
    1220:	f896 5048 	ldrb.w	r5, [r6, #72]	; 0x48
    1224:	f015 0701 	ands.w	r7, r5, #1
    1228:	d121      	bne.n	126e <ll_scan_params_set+0x56>
	lll->filter_policy = filter_policy;
    122a:	f896 c032 	ldrb.w	ip, [r6, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    122e:	f8df e054 	ldr.w	lr, [pc, #84]	; 1284 <ll_scan_params_set+0x6c>
	lll->interval = interval;
    1232:	f8a6 1042 	strh.w	r1, [r6, #66]	; 0x42
	lll->filter_policy = filter_policy;
    1236:	00e4      	lsls	r4, r4, #3
    1238:	f004 0418 	and.w	r4, r4, #24
    123c:	f00c 0c67 	and.w	ip, ip, #103	; 0x67
    1240:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
	scan->own_addr_type = own_addr_type;
    1244:	f363 0542 	bfi	r5, r3, #1, #2
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    1248:	fba2 010e 	umull	r0, r1, r2, lr
	lll->filter_policy = filter_policy;
    124c:	ea44 040c 	orr.w	r4, r4, ip
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    1250:	2391      	movs	r3, #145	; 0x91
    1252:	fb03 1102 	mla	r1, r3, r2, r1
	scan->own_addr_type = own_addr_type;
    1256:	f886 5048 	strb.w	r5, [r6, #72]	; 0x48
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    125a:	a307      	add	r3, pc, #28	; (adr r3, 1278 <ll_scan_params_set+0x60>)
    125c:	e9d3 2300 	ldrd	r2, r3, [r3]
	lll->filter_policy = filter_policy;
    1260:	f886 4032 	strb.w	r4, [r6, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    1264:	f7fe ff4c 	bl	100 <__aeabi_uldivmod>
    1268:	6470      	str	r0, [r6, #68]	; 0x44
}
    126a:	4638      	mov	r0, r7
    126c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    126e:	270c      	movs	r7, #12
}
    1270:	4638      	mov	r0, r7
    1272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1274:	f3af 8000 	nop.w
    1278:	1afd498d 	.word	0x1afd498d
    127c:	00000007 	.word	0x00000007
    1280:	20002e2c 	.word	0x20002e2c
    1284:	84e72a00 	.word	0x84e72a00

00001288 <ull_scan_params_set>:
{
    1288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    128a:	f89d 4018 	ldrb.w	r4, [sp, #24]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    128e:	4e10      	ldr	r6, [pc, #64]	; (12d0 <ull_scan_params_set+0x48>)
{
    1290:	4605      	mov	r5, r0
	lll->filter_policy = filter_policy;
    1292:	00e4      	lsls	r4, r4, #3
    1294:	7d80      	ldrb	r0, [r0, #22]
	lll->interval = interval;
    1296:	84ea      	strh	r2, [r5, #38]	; 0x26
	lll->filter_policy = filter_policy;
    1298:	f004 0418 	and.w	r4, r4, #24
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    129c:	fba3 6706 	umull	r6, r7, r3, r6
	lll->filter_policy = filter_policy;
    12a0:	f000 0067 	and.w	r0, r0, #103	; 0x67
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    12a4:	2291      	movs	r2, #145	; 0x91
	lll->filter_policy = filter_policy;
    12a6:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
    12aa:	4301      	orrs	r1, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    12ac:	fb02 7703 	mla	r7, r2, r3, r7
	lll->filter_policy = filter_policy;
    12b0:	75a9      	strb	r1, [r5, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    12b2:	a305      	add	r3, pc, #20	; (adr r3, 12c8 <ull_scan_params_set+0x40>)
    12b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    12b8:	4630      	mov	r0, r6
    12ba:	4639      	mov	r1, r7
    12bc:	f7fe ff20 	bl	100 <__aeabi_uldivmod>
    12c0:	62a8      	str	r0, [r5, #40]	; 0x28
}
    12c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12c4:	f3af 8000 	nop.w
    12c8:	1afd498d 	.word	0x1afd498d
    12cc:	00000007 	.word	0x00000007
    12d0:	84e72a00 	.word	0x84e72a00
    12d4:	00000000 	.word	0x00000000

000012d8 <ull_scan_enable>:
{
    12d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	lll->chan = 0;
    12dc:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
{
    12e0:	4604      	mov	r4, r0
	ll_addr_get(lll->init_addr_type, lll->init_addr);
    12e2:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
    12e6:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    12ea:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    12ee:	f3c0 0040 	ubfx	r0, r0, #1, #1
{
    12f2:	b08f      	sub	sp, #60	; 0x3c
	lll->init_addr_type = scan->own_addr_type;
    12f4:	f360 1386 	bfi	r3, r0, #6, #1
    12f8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
    12fc:	2302      	movs	r3, #2
    12fe:	930b      	str	r3, [sp, #44]	; 0x2c
	ll_addr_get(lll->init_addr_type, lll->init_addr);
    1300:	f011 f82c 	bl	1235c <ll_addr_get>
    1304:	f894 3020 	ldrb.w	r3, [r4, #32]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval * 625U);
    1308:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
    130c:	484c      	ldr	r0, [pc, #304]	; (1440 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb8>)
	hdr->parent = parent;
    130e:	61e4      	str	r4, [r4, #28]
    1310:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
    1312:	f365 0300 	bfi	r3, r5, #0, #1
    1316:	fba6 0100 	umull	r0, r1, r6, r0
    131a:	2291      	movs	r2, #145	; 0x91
    131c:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1320:	fb02 1106 	mla	r1, r2, r6, r1
    1324:	f884 3020 	strb.w	r3, [r4, #32]
    1328:	a343      	add	r3, pc, #268	; (adr r3, 1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>)
    132a:	e9d3 2300 	ldrd	r2, r3, [r3]
    132e:	f7fe fee7 	bl	100 <__aeabi_uldivmod>
	if ((lll->ticks_window +
    1332:	6c63      	ldr	r3, [r4, #68]	; 0x44
	scan->evt.ticks_active_to_start = 0U;
    1334:	6065      	str	r5, [r4, #4]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval * 625U);
    1336:	4607      	mov	r7, r0
	if ((lll->ticks_window +
    1338:	3309      	adds	r3, #9
	    (ticks_interval -
    133a:	f1a7 0231 	sub.w	r2, r7, #49	; 0x31
	if ((lll->ticks_window +
    133e:	4293      	cmp	r3, r2
	scan->evt.ticks_xtal_to_start =
    1340:	f04f 0131 	mov.w	r1, #49	; 0x31
	scan->evt.ticks_preempt_to_start =
    1344:	60a5      	str	r5, [r4, #8]
		lll->ticks_window = 0;
    1346:	bf28      	it	cs
    1348:	6465      	strcs	r5, [r4, #68]	; 0x44
	scan->evt.ticks_xtal_to_start =
    134a:	6021      	str	r1, [r4, #0]
		scan->evt.ticks_slot =
    134c:	bf34      	ite	cc
    134e:	60e3      	strcc	r3, [r4, #12]
		scan->evt.ticks_slot =
    1350:	60e2      	strcs	r2, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
    1352:	f010 fffd 	bl	12350 <ticker_ticks_now_get>
	if (!lll->conn) {
    1356:	6a65      	ldr	r5, [r4, #36]	; 0x24
	ticks_anchor = ticker_ticks_now_get();
    1358:	4680      	mov	r8, r0
	if (!lll->conn) {
    135a:	2d00      	cmp	r5, #0
    135c:	d04c      	beq.n	13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    135e:	4d39      	ldr	r5, [pc, #228]	; (1444 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1360:	9406      	str	r4, [sp, #24]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    1362:	f8b4 a042 	ldrh.w	sl, [r4, #66]	; 0x42
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1366:	4a38      	ldr	r2, [pc, #224]	; (1448 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0>)
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    1368:	4835      	ldr	r0, [pc, #212]	; (1440 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb8>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    136a:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1454 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    136e:	1b65      	subs	r5, r4, r5
    1370:	08ad      	lsrs	r5, r5, #2
    1372:	fba2 3505 	umull	r3, r5, r2, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    1376:	fbaa 0100 	umull	r0, r1, sl, r0
    137a:	2291      	movs	r2, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    137c:	68e3      	ldr	r3, [r4, #12]
    137e:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    1380:	fb02 110a 	mla	r1, r2, sl, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1384:	4a31      	ldr	r2, [pc, #196]	; (144c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc4>)
    1386:	9205      	str	r2, [sp, #20]
    1388:	f04f 0900 	mov.w	r9, #0
    138c:	ae0b      	add	r6, sp, #44	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    138e:	a32a      	add	r3, pc, #168	; (adr r3, 1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>)
    1390:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1394:	f8cd c01c 	str.w	ip, [sp, #28]
    1398:	9608      	str	r6, [sp, #32]
    139a:	f8cd 900c 	str.w	r9, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    139e:	f7fe feaf 	bl	100 <__aeabi_uldivmod>
    13a2:	4610      	mov	r0, r2
    13a4:	4619      	mov	r1, r3
    13a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    13aa:	2300      	movs	r3, #0
    13ac:	f7fe fea8 	bl	100 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    13b0:	086d      	lsrs	r5, r5, #1
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
    13b2:	3504      	adds	r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    13b4:	b2ed      	uxtb	r5, r5
    13b6:	462a      	mov	r2, r5
    13b8:	9002      	str	r0, [sp, #8]
    13ba:	4643      	mov	r3, r8
    13bc:	2103      	movs	r1, #3
    13be:	f8cd 9000 	str.w	r9, [sp]
    13c2:	4648      	mov	r0, r9
    13c4:	9701      	str	r7, [sp, #4]
    13c6:	f010 feb3 	bl	12130 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    13ca:	4631      	mov	r1, r6
    13cc:	f013 fde4 	bl	14f98 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    13d0:	4605      	mov	r5, r0
    13d2:	b968      	cbnz	r0, 13f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x68>
	scan->is_enabled = 1U;
    13d4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    13d8:	f043 0301 	orr.w	r3, r3, #1
    13dc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ull_adv_is_enabled_get(0))
    13e0:	f014 fa98 	bl	15914 <ull_adv_is_enabled_get>
    13e4:	4604      	mov	r4, r0
    13e6:	b1f8      	cbz	r0, 1428 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa0>
	return 0;
    13e8:	4628      	mov	r0, r5
}
    13ea:	b00f      	add	sp, #60	; 0x3c
    13ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    13f0:	200c      	movs	r0, #12
}
    13f2:	b00f      	add	sp, #60	; 0x3c
    13f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    13f8:	68e1      	ldr	r1, [r4, #12]
		uint32_t ticks_ref = 0U;
    13fa:	950c      	str	r5, [sp, #48]	; 0x30
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    13fc:	ab0d      	add	r3, sp, #52	; 0x34
    13fe:	aa0c      	add	r2, sp, #48	; 0x30
    1400:	2003      	movs	r0, #3
		uint32_t offset_us = 0U;
    1402:	950d      	str	r5, [sp, #52]	; 0x34
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    1404:	f002 fc14 	bl	3c30 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
    1408:	990d      	ldr	r1, [sp, #52]	; 0x34
    140a:	2900      	cmp	r1, #0
    140c:	d0a7      	beq.n	135e <ull_scan_enable+0x86>
				       HAL_TICKER_US_TO_TICKS(offset_us);
    140e:	4810      	ldr	r0, [pc, #64]	; (1450 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8>)
    1410:	a309      	add	r3, pc, #36	; (adr r3, 1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>)
    1412:	e9d3 2300 	ldrd	r2, r3, [r3]
    1416:	fba1 0100 	umull	r0, r1, r1, r0
    141a:	f7fe fe71 	bl	100 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
    141e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1420:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
    1424:	4498      	add	r8, r3
    1426:	e79a      	b.n	135e <ull_scan_enable+0x86>
		ull_filter_adv_scan_state_cb(BIT(1));
    1428:	2002      	movs	r0, #2
    142a:	f018 fd0f 	bl	19e4c <ull_filter_adv_scan_state_cb>
	return 0;
    142e:	4620      	mov	r0, r4
}
    1430:	b00f      	add	sp, #60	; 0x3c
    1432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1436:	bf00      	nop
    1438:	1afd498d 	.word	0x1afd498d
    143c:	00000007 	.word	0x00000007
    1440:	84e72a00 	.word	0x84e72a00
    1444:	20002e2c 	.word	0x20002e2c
    1448:	1af286bd 	.word	0x1af286bd
    144c:	00015aad 	.word	0x00015aad
    1450:	3b9aca00 	.word	0x3b9aca00
    1454:	00014f8d 	.word	0x00014f8d

00001458 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    1458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    145c:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
    145e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1462:	429f      	cmp	r7, r3
{
    1464:	b08d      	sub	sp, #52	; 0x34
    1466:	4604      	mov	r4, r0
    1468:	460d      	mov	r5, r1
    146a:	4616      	mov	r6, r2
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    146c:	f000 8089 	beq.w	1582 <ull_conn_llcp+0x12a>

	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    1470:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    1474:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1478:	429a      	cmp	r2, r3
    147a:	d00e      	beq.n	149a <ull_conn_llcp+0x42>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    147c:	1a9b      	subs	r3, r3, r2
    147e:	f003 0303 	and.w	r3, r3, #3
    1482:	2b02      	cmp	r3, #2
    1484:	d01b      	beq.n	14be <ull_conn_llcp+0x66>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    1486:	f894 212d 	ldrb.w	r2, [r4, #301]	; 0x12d
    148a:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
    148e:	429a      	cmp	r2, r3
    1490:	d130      	bne.n	14f4 <ull_conn_llcp+0x9c>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
    1492:	2000      	movs	r0, #0
}
    1494:	b00d      	add	sp, #52	; 0x34
    1496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !conn->llcp_enc.pause_rx) {
    149a:	f894 7152 	ldrb.w	r7, [r4, #338]	; 0x152
	if ((conn->llcp_ack == conn->llcp_req) &&
    149e:	f017 0801 	ands.w	r8, r7, #1
    14a2:	d1f0      	bne.n	1486 <ull_conn_llcp+0x2e>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    14a4:	f894 1105 	ldrb.w	r1, [r4, #261]	; 0x105
    14a8:	f894 0104 	ldrb.w	r0, [r4, #260]	; 0x104
    14ac:	4288      	cmp	r0, r1
    14ae:	f000 83b6 	beq.w	1c1e <ull_conn_llcp+0x7c6>
			conn->llcp_ack -= 2U;
    14b2:	1e93      	subs	r3, r2, #2
			conn->llcp_type = LLCP_CONN_UPD;
    14b4:	2101      	movs	r1, #1
			conn->llcp_ack -= 2U;
    14b6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CONN_UPD;
    14ba:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    14be:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    14c2:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
    14c6:	429a      	cmp	r2, r3
    14c8:	d006      	beq.n	14d8 <ull_conn_llcp+0x80>
			if ((conn->llcp_length.state ==
    14ca:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
    14ce:	f002 0106 	and.w	r1, r2, #6
    14d2:	2904      	cmp	r1, #4
    14d4:	f000 83e9 	beq.w	1caa <ull_conn_llcp+0x852>
		switch (conn->llcp_type) {
    14d8:	f894 70ea 	ldrb.w	r7, [r4, #234]	; 0xea
    14dc:	1e7b      	subs	r3, r7, #1
    14de:	2b05      	cmp	r3, #5
    14e0:	f200 838f 	bhi.w	1c02 <ull_conn_llcp+0x7aa>
    14e4:	e8df f013 	tbh	[pc, r3, lsl #1]
    14e8:	03260070 	.word	0x03260070
    14ec:	038d02a2 	.word	0x038d02a2
    14f0:	01c80350 	.word	0x01c80350
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    14f4:	4830      	ldr	r0, [pc, #192]	; (15b8 <ull_conn_llcp+0x160>)
    14f6:	f00f f9b7 	bl	10868 <mem_acquire>
		if (tx) {
    14fa:	b358      	cbz	r0, 1554 <ull_conn_llcp+0xfc>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    14fc:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
    1500:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1504:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    1506:	2202      	movs	r2, #2
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1508:	f043 0303 	orr.w	r3, r3, #3
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    150c:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    150e:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
    1510:	71c2      	strb	r2, [r0, #7]
					 struct node_tx *tx, bool pause)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* data/ctrl packet is in the head */
	    conn->tx_head &&
    1512:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_tx->llctrl.terminate_ind.error_code =
    1516:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    151a:	7202      	strb	r2, [r0, #8]
	if (
    151c:	b32b      	cbz	r3, 156a <ull_conn_llcp+0x112>
#if defined(CONFIG_BT_CTLR_LE_ENC)
	    !conn->llcp_enc.pause_tx &&
    151e:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1522:	0791      	lsls	r1, r2, #30
    1524:	d421      	bmi.n	156a <ull_conn_llcp+0x112>
#endif /* CONFIG_BT_CTLR_LE_ENC */
#if defined(CONFIG_BT_CTLR_PHY)
	    !conn->llcp_phy.pause_tx &&
    1526:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    152a:	07d2      	lsls	r2, r2, #31
    152c:	d41d      	bmi.n	156a <ull_conn_llcp+0x112>

		/* if data transmitted once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->tx_head == conn->tx_data) {
    152e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1532:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1534:	bf04      	itt	eq
    1536:	681a      	ldreq	r2, [r3, #0]
    1538:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->tx_ctrl) {
    153c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1540:	b9b2      	cbnz	r2, 1570 <ull_conn_llcp+0x118>
			tx->next = conn->tx_head->next;
    1542:	681a      	ldr	r2, [r3, #0]
    1544:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    1546:	6018      	str	r0, [r3, #0]
			 * control PDU in Encryption Procedure that is not
			 * implicitly paused, will set the control and control
			 * last marker.
			 */
			if (!pause) {
				conn->tx_ctrl = tx;
    1548:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    154a:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
			ctrl_tx_last_enqueue(conn, tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (!tx->next) {
    154e:	b90b      	cbnz	r3, 1554 <ull_conn_llcp+0xfc>
		conn->tx_data_last = tx;
    1550:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
		if (!conn->procedure_expire) {
    1554:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    1558:	2800      	cmp	r0, #0
    155a:	d19a      	bne.n	1492 <ull_conn_llcp+0x3a>
			conn->procedure_expire = conn->supervision_reload;
    155c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
    1560:	2b01      	cmp	r3, #1
    1562:	d91c      	bls.n	159e <ull_conn_llcp+0x146>
			conn->procedure_expire = conn->supervision_reload;
    1564:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1568:	e793      	b.n	1492 <ull_conn_llcp+0x3a>
		if (!conn->tx_ctrl) {
    156a:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    156e:	b1e2      	cbz	r2, 15aa <ull_conn_llcp+0x152>
	tx->next = conn->tx_ctrl_last->next;
    1570:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1574:	681a      	ldr	r2, [r3, #0]
    1576:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1578:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    157a:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    157e:	6803      	ldr	r3, [r0, #0]
}
    1580:	e7e5      	b.n	154e <ull_conn_llcp+0xf6>
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    1582:	4a0e      	ldr	r2, [pc, #56]	; (15bc <ull_conn_llcp+0x164>)
    1584:	490e      	ldr	r1, [pc, #56]	; (15c0 <ull_conn_llcp+0x168>)
    1586:	480f      	ldr	r0, [pc, #60]	; (15c4 <ull_conn_llcp+0x16c>)
    1588:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    158c:	f01f f858 	bl	20640 <printk>
    1590:	4040      	eors	r0, r0
    1592:	f380 8811 	msr	BASEPRI, r0
    1596:	f04f 0003 	mov.w	r0, #3
    159a:	df02      	svc	2
    159c:	e768      	b.n	1470 <ull_conn_llcp+0x18>
				conn->procedure_expire++;
    159e:	3301      	adds	r3, #1
    15a0:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
    15a4:	b00d      	add	sp, #52	; 0x34
    15a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    15aa:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    15ac:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    15b0:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    15b4:	e7cb      	b.n	154e <ull_conn_llcp+0xf6>
    15b6:	bf00      	nop
    15b8:	20003c54 	.word	0x20003c54
    15bc:	000273f4 	.word	0x000273f4
    15c0:	0002755c 	.word	0x0002755c
    15c4:	00026ecc 	.word	0x00026ecc
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
    15c8:	f8df 9454 	ldr.w	r9, [pc, #1108]	; 1a20 <ull_conn_llcp+0x5c8>

	/* set mutex */
	if (!conn_upd) {
    15cc:	f8d9 3000 	ldr.w	r3, [r9]
    15d0:	2b00      	cmp	r3, #0
    15d2:	f000 8585 	beq.w	20e0 <ull_conn_llcp+0xc88>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    15d6:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
    15da:	8e62      	ldrh	r2, [r4, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    15dc:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    15e0:	4490      	add	r8, r2
    15e2:	44b0      	add	r8, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    15e4:	f013 0303 	ands.w	r3, r3, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    15e8:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    15ec:	f040 83b8 	bne.w	1d60 <ull_conn_llcp+0x908>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    15f0:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
    15f4:	eba8 020b 	sub.w	r2, r8, fp
    15f8:	b297      	uxth	r7, r2
				    pdu_ctrl_tx, NULL, NULL);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */

		ctrl_tx_enqueue(conn, tx);

	} else if (instant_latency <= 0x7FFF) {
    15fa:	0412      	lsls	r2, r2, #16
    15fc:	f53f af43 	bmi.w	1486 <ull_conn_llcp+0x2e>
		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;
		conn->llcp_ack = conn->llcp_req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1600:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
    1604:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1608:	f894 0104 	ldrb.w	r0, [r4, #260]	; 0x104
    160c:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1610:	428a      	cmp	r2, r1
		conn->llcp_ack = conn->llcp_req;
    1612:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1616:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    161a:	d009      	beq.n	1630 <ull_conn_llcp+0x1d8>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    161c:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1620:	f002 0207 	and.w	r2, r2, #7
    1624:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1626:	bf04      	itt	eq
    1628:	f884 1171 	strbeq.w	r1, [r4, #369]	; 0x171

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    162c:	f8a4 30cc 	strheq.w	r3, [r4, #204]	; 0xcc
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    1630:	f8d9 3000 	ldr.w	r3, [r9]
    1634:	429c      	cmp	r4, r3
	conn_upd_curr = NULL;
    1636:	bf04      	itt	eq
    1638:	2300      	moveq	r3, #0
    163a:	f8c9 3000 	streq.w	r3, [r9]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    163e:	f8d4 9100 	ldr.w	r9, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1642:	f1b9 0f00 	cmp.w	r9, #0
    1646:	f000 8616 	beq.w	2276 <ull_conn_llcp+0xe1e>
    164a:	f8d9 0000 	ldr.w	r0, [r9]
    164e:	2800      	cmp	r0, #0
    1650:	f000 8611 	beq.w	2276 <ull_conn_llcp+0xe1e>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    1654:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
    1658:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
		conn->llcp_rx = rx->hdr.link->mem;
    165a:	6841      	ldr	r1, [r0, #4]
    165c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		if ((conn->llcp_cu.interval != lll->interval) ||
    1660:	4293      	cmp	r3, r2
    1662:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
    1666:	f8b4 c10c 	ldrh.w	ip, [r4, #268]	; 0x10c
    166a:	f000 8725 	beq.w	24b8 <ull_conn_llcp+0x1060>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * 1250) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    166e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1670:	f8a9 2006 	strh.w	r2, [r9, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1674:	f04f 0e0b 	mov.w	lr, #11

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
    1678:	2200      	movs	r2, #0
			cu->interval = conn->llcp_cu.interval;
    167a:	f8a9 301e 	strh.w	r3, [r9, #30]
			cu->latency = conn->llcp_cu.latency;
    167e:	f8a9 1020 	strh.w	r1, [r9, #32]
			cu->timeout = conn->llcp_cu.timeout;
    1682:	f8a9 c022 	strh.w	ip, [r9, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1686:	f889 e004 	strb.w	lr, [r9, #4]
			cu->status = 0x00;
    168a:	f889 201c 	strb.w	r2, [r9, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    168e:	4649      	mov	r1, r9
    1690:	f013 fc06 	bl	14ea0 <ll_rx_put>
		ll_rx_sched();
    1694:	f013 fc0e 	bl	14eb4 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1698:	6823      	ldr	r3, [r4, #0]
    169a:	2b00      	cmp	r3, #0
    169c:	da09      	bge.n	16b2 <ull_conn_llcp+0x25a>
			uint32_t ticks_prepare_to_start =
    169e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
				MAX(conn->evt.ticks_active_to_start,
				    conn->evt.ticks_preempt_to_start);

			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    16a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    16a6:	428a      	cmp	r2, r1
    16a8:	bf2c      	ite	cs
    16aa:	18ad      	addcs	r5, r5, r2
    16ac:	186d      	addcc	r5, r5, r1
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    16ae:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    16b0:	1aed      	subs	r5, r5, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    16b2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    16b4:	f8b4 a108 	ldrh.w	sl, [r4, #264]	; 0x108
		conn_interval_old = instant_latency * lll->interval;
    16b8:	fb13 f307 	smulbb	r3, r3, r7
    16bc:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    16be:	fbb3 f1fa 	udiv	r1, r3, sl
		conn_interval_new = latency * conn->llcp_cu.interval;
    16c2:	fb1a f201 	smulbb	r2, sl, r1
    16c6:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    16c8:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    16ca:	fa1f f981 	uxth.w	r9, r1
		if (conn_interval_new > conn_interval_old) {
    16ce:	f080 85c0 	bcs.w	2252 <ull_conn_llcp+0xdfa>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    16d2:	1ad3      	subs	r3, r2, r3
    16d4:	48c8      	ldr	r0, [pc, #800]	; (19f8 <ull_conn_llcp+0x5a0>)
    16d6:	f240 42e2 	movw	r2, #1250	; 0x4e2
    16da:	fb02 f303 	mul.w	r3, r2, r3
    16de:	fba3 0100 	umull	r0, r1, r3, r0
    16e2:	a3c3      	add	r3, pc, #780	; (adr r3, 19f0 <ull_conn_llcp+0x598>)
    16e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    16e8:	f7fe fd0a 	bl	100 <__aeabi_uldivmod>
    16ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16f0:	4405      	add	r5, r0
				(conn_interval_new - conn_interval_old) * 1250U);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) * 1250U);
		}
		lll->latency_prepare += lazy;
    16f2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		lll->latency_prepare -= (instant_latency - latency);
    16f4:	ebab 0808 	sub.w	r8, fp, r8
		lll->latency_prepare += lazy;
    16f8:	441e      	add	r6, r3
		conn_interval_us = conn->llcp_cu.interval * 1250U;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    16fa:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    16fe:	44c8      	add	r8, r9
    1700:	4446      	add	r6, r8
		} else if (lll->role) {
    1702:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    1704:	f240 48e2 	movw	r8, #1250	; 0x4e2
		lll->latency_prepare -= (instant_latency - latency);
    1708:	8666      	strh	r6, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    170a:	fb08 f60a 	mul.w	r6, r8, sl
		} else if (lll->role) {
    170e:	f2c0 8705 	blt.w	251c <ull_conn_llcp+0x10c4>
			periodic_us -= lll->slave.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1712:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    1716:	49b8      	ldr	r1, [pc, #736]	; (19f8 <ull_conn_llcp+0x5a0>)
    1718:	a3b5      	add	r3, pc, #724	; (adr r3, 19f0 <ull_conn_llcp+0x598>)
    171a:	e9d3 2300 	ldrd	r2, r3, [r3]
    171e:	fba0 0101 	umull	r0, r1, r0, r1
    1722:	f7fe fced 	bl	100 <__aeabi_uldivmod>
    1726:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
    172a:	3701      	adds	r7, #1
		periodic_us = conn_interval_us;
    172c:	46b0      	mov	r8, r6

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    172e:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
		lll->latency = conn->llcp_cu.latency;
    1732:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1736:	4bb1      	ldr	r3, [pc, #708]	; (19fc <ull_conn_llcp+0x5a4>)
		lll->interval = conn->llcp_cu.interval;
    1738:	f8a4 a02e 	strh.w	sl, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    173c:	f242 7010 	movw	r0, #10000	; 0x2710
    1740:	fb00 6202 	mla	r2, r0, r2, r6
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1744:	48ae      	ldr	r0, [pc, #696]	; (1a00 <ull_conn_llcp+0x5a8>)
		lll->latency = conn->llcp_cu.latency;
    1746:	8621      	strh	r1, [r4, #48]	; 0x30
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1748:	4433      	add	r3, r6
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    174a:	4430      	add	r0, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    174c:	fbb3 f3f6 	udiv	r3, r3, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1750:	3a01      	subs	r2, #1
    1752:	fbb2 f2f6 	udiv	r2, r2, r6
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1756:	fbb0 f6f6 	udiv	r6, r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    175a:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    175e:	b298      	uxth	r0, r3
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1760:	1d8a      	adds	r2, r1, #6
    1762:	4290      	cmp	r0, r2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1764:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1768:	f8a4 60ca 	strh.w	r6, [r4, #202]	; 0xca
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    176c:	dd02      	ble.n	1774 <ull_conn_llcp+0x31c>
				     (conn->apto_reload - (lll->latency + 6)) :
    176e:	1a40      	subs	r0, r0, r1
    1770:	3806      	subs	r0, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1772:	b280      	uxth	r0, r0
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    1774:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1778:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
		if (conn->llcp_cu.cmd) {
    177c:	075e      	lsls	r6, r3, #29
			conn->supervision_expire = 0U;
    177e:	bf44      	itt	mi
    1780:	2300      	movmi	r3, #0
    1782:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1786:	2102      	movs	r1, #2
    1788:	2001      	movs	r0, #1
    178a:	f01c f993 	bl	1dab4 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    178e:	2200      	movs	r2, #0
    1790:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1792:	4682      	mov	sl, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1794:	2001      	movs	r0, #1
    1796:	f00f f90b 	bl	109b0 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    179a:	499a      	ldr	r1, [pc, #616]	; (1a04 <ull_conn_llcp+0x5ac>)
    179c:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    17a0:	4620      	mov	r0, r4
    17a2:	f00f f897 	bl	108d4 <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    17a6:	1d46      	adds	r6, r0, #5
    17a8:	b2f6      	uxtb	r6, r6
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    17aa:	4b97      	ldr	r3, [pc, #604]	; (1a08 <ull_conn_llcp+0x5b0>)
    17ac:	9400      	str	r4, [sp, #0]
    17ae:	4632      	mov	r2, r6
    17b0:	2101      	movs	r1, #1
    17b2:	2000      	movs	r0, #0
    17b4:	f010 fd28 	bl	12208 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    17b8:	f030 0302 	bics.w	r3, r0, #2
    17bc:	d00c      	beq.n	17d8 <ull_conn_llcp+0x380>
    17be:	4a93      	ldr	r2, [pc, #588]	; (1a0c <ull_conn_llcp+0x5b4>)
    17c0:	4993      	ldr	r1, [pc, #588]	; (1a10 <ull_conn_llcp+0x5b8>)
    17c2:	4894      	ldr	r0, [pc, #592]	; (1a14 <ull_conn_llcp+0x5bc>)
    17c4:	f640 135a 	movw	r3, #2394	; 0x95a
    17c8:	f01e ff3a 	bl	20640 <printk>
    17cc:	4040      	eors	r0, r0
    17ce:	f380 8811 	msr	BASEPRI, r0
    17d2:	f04f 0003 	mov.w	r0, #3
    17d6:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    17d8:	4b87      	ldr	r3, [pc, #540]	; (19f8 <ull_conn_llcp+0x5a0>)
    17da:	fba8 8903 	umull	r8, r9, r8, r3
    17de:	4640      	mov	r0, r8
    17e0:	a383      	add	r3, pc, #524	; (adr r3, 19f0 <ull_conn_llcp+0x598>)
    17e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    17e6:	4649      	mov	r1, r9
    17e8:	f7fe fc8a 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    17ec:	4a8a      	ldr	r2, [pc, #552]	; (1a18 <ull_conn_llcp+0x5c0>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    17ee:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    17f2:	fbab 2302 	umull	r2, r3, fp, r2
    17f6:	2107      	movs	r1, #7
    17f8:	ebb8 0002 	subs.w	r0, r8, r2
    17fc:	fb01 330b 	mla	r3, r1, fp, r3
    1800:	eb69 0103 	sbc.w	r1, r9, r3
    1804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1808:	2300      	movs	r3, #0
    180a:	f7fe fc79 	bl	100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    180e:	f8df e214 	ldr.w	lr, [pc, #532]	; 1a24 <ull_conn_llcp+0x5cc>
    1812:	4982      	ldr	r1, [pc, #520]	; (1a1c <ull_conn_llcp+0x5c4>)
				     TICKER_LAZY_MUST_EXPIRE,
#else
				     TICKER_NULL_LAZY,
#endif /* CONFIG_BT_CTLR_CONN_META */
				     (ticks_slot_overhead +
				      conn->evt.ticks_slot),
    1814:	68e2      	ldr	r2, [r4, #12]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1816:	f8df c210 	ldr.w	ip, [pc, #528]	; 1a28 <ull_conn_llcp+0x5d0>
				     HAL_TICKER_REMAINDER(periodic_us),
    181a:	4603      	mov	r3, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    181c:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
				      conn->evt.ticks_slot),
    1820:	9204      	str	r2, [sp, #16]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1822:	ea11 0120 	ands.w	r1, r1, r0, asr #32
    1826:	bf38      	it	cc
    1828:	4671      	movcc	r1, lr
    182a:	2000      	movs	r0, #0
    182c:	9302      	str	r3, [sp, #8]
    182e:	9105      	str	r1, [sp, #20]
    1830:	462b      	mov	r3, r5
    1832:	f8cd b004 	str.w	fp, [sp, #4]
    1836:	9408      	str	r4, [sp, #32]
    1838:	9406      	str	r4, [sp, #24]
    183a:	9700      	str	r7, [sp, #0]
    183c:	4632      	mov	r2, r6
    183e:	f8cd c01c 	str.w	ip, [sp, #28]
    1842:	9003      	str	r0, [sp, #12]
    1844:	2101      	movs	r1, #1
    1846:	f010 fc73 	bl	12130 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    184a:	f030 0302 	bics.w	r3, r0, #2
    184e:	d00c      	beq.n	186a <ull_conn_llcp+0x412>
    1850:	4a6e      	ldr	r2, [pc, #440]	; (1a0c <ull_conn_llcp+0x5b4>)
    1852:	496f      	ldr	r1, [pc, #444]	; (1a10 <ull_conn_llcp+0x5b8>)
    1854:	486f      	ldr	r0, [pc, #444]	; (1a14 <ull_conn_llcp+0x5bc>)
    1856:	f640 1374 	movw	r3, #2420	; 0x974
    185a:	f01e fef1 	bl	20640 <printk>
    185e:	4040      	eors	r0, r0
    1860:	f380 8811 	msr	BASEPRI, r0
    1864:	f04f 0003 	mov.w	r0, #3
    1868:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    186a:	f1ba 0f00 	cmp.w	sl, #0
    186e:	f040 863d 	bne.w	24ec <ull_conn_llcp+0x1094>
				return -ECANCELED;
    1872:	f06f 0047 	mvn.w	r0, #71	; 0x47
    1876:	e60d      	b.n	1494 <ull_conn_llcp+0x3c>
			event_counter = lll->event_counter +
    1878:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    187a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  uint16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
    187c:	f894 50ec 	ldrb.w	r5, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    1880:	4413      	add	r3, r2
					lll->latency_prepare + lazy;
    1882:	441e      	add	r6, r3
	if (conn->llcp.phy_upd_ind.initiate) {
    1884:	07e8      	lsls	r0, r5, #31
			event_counter = lll->event_counter +
    1886:	b2b6      	uxth	r6, r6
	if (conn->llcp.phy_upd_ind.initiate) {
    1888:	462b      	mov	r3, r5
    188a:	f100 83c3 	bmi.w	2014 <ull_conn_llcp+0xbbc>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    188e:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
    1892:	1ab6      	subs	r6, r6, r2
    1894:	0436      	lsls	r6, r6, #16
    1896:	f53f adf6 	bmi.w	1486 <ull_conn_llcp+0x2e>
	if (!conn->common.fex_valid ||
    189a:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = lll->phy_tx;
    189e:	f894 a064 	ldrb.w	sl, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
    18a2:	f894 b065 	ldrb.w	fp, [r4, #101]	; 0x65
		conn->llcp_ack = conn->llcp_req;
    18a6:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
    18aa:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
	if (!conn->common.fex_valid ||
    18ae:	07d0      	lsls	r0, r2, #31

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		uint16_t eff_tx_time = lll->max_tx_time;
		uint16_t eff_rx_time = lll->max_rx_time;
    18b0:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
	feature_coded_phy = (conn->llcp_feature.features_conn &
    18b4:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
    18b8:	f8b4 60d8 	ldrh.w	r6, [r4, #216]	; 0xd8
		old_tx = lll->phy_tx;
    18bc:	f00a 0a07 	and.w	sl, sl, #7
		old_rx = lll->phy_rx;
    18c0:	f00b 0b07 	and.w	fp, fp, #7
	if (!conn->common.fex_valid ||
    18c4:	f140 8626 	bpl.w	2514 <ull_conn_llcp+0x10bc>
    18c8:	050a      	lsls	r2, r1, #20
    18ca:	f141 8141 	bpl.w	2b50 <ull_conn_llcp+0x16f8>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    18ce:	f244 2990 	movw	r9, #17040	; 0x4290
    18d2:	454e      	cmp	r6, r9
    18d4:	bf28      	it	cs
    18d6:	464e      	movcs	r6, r9
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    18d8:	f5b6 7fa4 	cmp.w	r6, #328	; 0x148
    18dc:	4632      	mov	r2, r6
    18de:	bf38      	it	cc
    18e0:	f44f 72a4 	movcc.w	r2, #328	; 0x148
    18e4:	920a      	str	r2, [sp, #40]	; 0x28
		uint16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
    18e6:	f015 0f1c 	tst.w	r5, #28
    18ea:	f040 86f3 	bne.w	26d4 <ull_conn_llcp+0x127c>
		uint16_t eff_tx_time = lll->max_tx_time;
    18ee:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
    18f2:	f015 0fe0 	tst.w	r5, #224	; 0xe0
    18f6:	d00e      	beq.n	1916 <ull_conn_llcp+0x4be>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    18f8:	930b      	str	r3, [sp, #44]	; 0x2c
    18fa:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    18fe:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    1902:	0969      	lsrs	r1, r5, #5
    1904:	f361 0202 	bfi	r2, r1, #0, #3
    1908:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    190c:	464a      	mov	r2, r9
    190e:	f014 fa91 	bl	15e34 <calc_eff_time>
    1912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1914:	4680      	mov	r8, r0
					      max_rx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		lll->phy_flags = conn->phy_pref_flags;
    1916:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
    191a:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    191e:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		lll->phy_flags = conn->phy_pref_flags;
    1922:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    1926:	f362 01c3 	bfi	r1, r2, #3, #1
    192a:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
		LL_ASSERT(rx && rx->hdr.link);
    192e:	2d00      	cmp	r5, #0
    1930:	f000 87c2 	beq.w	28b8 <ull_conn_llcp+0x1460>
    1934:	6828      	ldr	r0, [r5, #0]
    1936:	2800      	cmp	r0, #0
    1938:	f000 87be 	beq.w	28b8 <ull_conn_llcp+0x1460>
		conn->llcp_rx = rx->hdr.link->mem;
    193c:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    1940:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
    1944:	6846      	ldr	r6, [r0, #4]
    1946:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    194a:	079e      	lsls	r6, r3, #30
    194c:	f3c1 0e02 	ubfx	lr, r1, #0, #3
    1950:	f3c2 0c02 	ubfx	ip, r2, #0, #3
    1954:	f001 0107 	and.w	r1, r1, #7
    1958:	f002 0207 	and.w	r2, r2, #7
    195c:	d402      	bmi.n	1964 <ull_conn_llcp+0x50c>
    195e:	458a      	cmp	sl, r1
    1960:	f001 815d 	beq.w	2c1e <ull_conn_llcp+0x17c6>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
    1964:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1966:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1968:	220f      	movs	r2, #15

		upd = (void *)rx->pdu;
		upd->status = 0U;
    196a:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
    196c:	f885 e01d 	strb.w	lr, [r5, #29]
		upd->rx = lll->phy_rx;
    1970:	f885 c01e 	strb.w	ip, [r5, #30]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1974:	712a      	strb	r2, [r5, #4]
		upd->status = 0U;
    1976:	772b      	strb	r3, [r5, #28]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1978:	4629      	mov	r1, r5
    197a:	f013 fa91 	bl	14ea0 <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
    197e:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1982:	2d00      	cmp	r5, #0
    1984:	f000 87b5 	beq.w	28f2 <ull_conn_llcp+0x149a>
    1988:	6828      	ldr	r0, [r5, #0]
    198a:	2800      	cmp	r0, #0
    198c:	f000 87b1 	beq.w	28f2 <ull_conn_llcp+0x149a>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
    1990:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn->llcp_rx = rx->hdr.link->mem;
    1994:	6842      	ldr	r2, [r0, #4]
    1996:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		if ((eff_tx_time <= lll->max_tx_time) &&
    199a:	42bb      	cmp	r3, r7
    199c:	d309      	bcc.n	19b2 <ull_conn_llcp+0x55a>
    199e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    19a0:	4293      	cmp	r3, r2
    19a2:	d806      	bhi.n	19b2 <ull_conn_llcp+0x55a>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
    19a4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		    (lll->max_tx_time <= max_tx_time) &&
    19a8:	4543      	cmp	r3, r8
    19aa:	d302      	bcc.n	19b2 <ull_conn_llcp+0x55a>
		    (eff_rx_time <= lll->max_rx_time) &&
    19ac:	454b      	cmp	r3, r9
    19ae:	f241 814a 	bls.w	2c46 <ull_conn_llcp+0x17ee>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
    19b2:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
    19b6:	f8a4 8062 	strh.w	r8, [r4, #98]	; 0x62
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    19ba:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    19bc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    19be:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    19c0:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    19c4:	2102      	movs	r1, #2
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    19c6:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    19c8:	7129      	strb	r1, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    19ca:	772b      	strb	r3, [r5, #28]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    19cc:	776a      	strb	r2, [r5, #29]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    19ce:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    19d2:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    19d6:	842b      	strh	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    19d8:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    19da:	84aa      	strh	r2, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    19dc:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    19de:	4629      	mov	r1, r5
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    19e0:	f8a5 8022 	strh.w	r8, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    19e4:	84ef      	strh	r7, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    19e6:	f013 fa5b 	bl	14ea0 <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
    19ea:	f013 fa63 	bl	14eb4 <ll_rx_sched>
    19ee:	e54a      	b.n	1486 <ull_conn_llcp+0x2e>
    19f0:	1afd498d 	.word	0x1afd498d
    19f4:	00000007 	.word	0x00000007
    19f8:	3b9aca00 	.word	0x3b9aca00
    19fc:	01c9c37f 	.word	0x01c9c37f
    1a00:	026259ff 	.word	0x026259ff
    1a04:	20002e8c 	.word	0x20002e8c
    1a08:	000161b5 	.word	0x000161b5
    1a0c:	000273f4 	.word	0x000273f4
    1a10:	000274d4 	.word	0x000274d4
    1a14:	00026ecc 	.word	0x00026ecc
    1a18:	1afd498d 	.word	0x1afd498d
    1a1c:	00019075 	.word	0x00019075
    1a20:	2000321c 	.word	0x2000321c
    1a24:	000191e9 	.word	0x000191e9
    1a28:	0001615d 	.word	0x0001615d
	if (conn->llcp.encryption.state) {
    1a2c:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1a30:	f013 0503 	ands.w	r5, r3, #3
    1a34:	f000 8287 	beq.w	1f46 <ull_conn_llcp+0xaee>
		if (lll->role &&
    1a38:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	f6bf ad22 	bge.w	1486 <ull_conn_llcp+0x2e>
    1a42:	2d01      	cmp	r5, #1
    1a44:	f47f ad1f 	bne.w	1486 <ull_conn_llcp+0x2e>
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1a48:	48c1      	ldr	r0, [pc, #772]	; (1d50 <ull_conn_llcp+0x8f8>)
    1a4a:	f00e ff0d 	bl	10868 <mem_acquire>
	if (!tx) {
    1a4e:	4605      	mov	r5, r0
    1a50:	2800      	cmp	r0, #0
    1a52:	f43f ad18 	beq.w	1486 <ull_conn_llcp+0x2e>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1a56:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    1a58:	220d      	movs	r2, #13
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1a5a:	f043 0303 	orr.w	r3, r3, #3
			   sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1a5e:	2704      	movs	r7, #4
	BUILD_ASSERT(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), ivs) ==
		     (offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
		     sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

	/* NOTE: if not sufficient random numbers, ignore waiting */
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    1a60:	f100 0608 	add.w	r6, r0, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1a64:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    1a66:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1a68:	71c7      	strb	r7, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    1a6a:	210c      	movs	r1, #12
    1a6c:	4630      	mov	r0, r6
    1a6e:	f019 fadf 	bl	1b030 <lll_csrand_isr_get>
			   sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds) +
			   sizeof(pdu_ctrl_tx->llctrl.enc_rsp.ivs));

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    1a72:	4631      	mov	r1, r6
    1a74:	2208      	movs	r2, #8
    1a76:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    1a7a:	f020 fe51 	bl	22720 <memcpy>
	       &pdu_ctrl_tx->llctrl.enc_rsp.skds[0], 8);
	memcpy(&conn->lll.ccm_rx.iv[4],
    1a7e:	463a      	mov	r2, r7
    1a80:	f105 0110 	add.w	r1, r5, #16
    1a84:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    1a88:	f020 fe4a 	bl	22720 <memcpy>
	    conn->tx_head &&
    1a8c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    1a90:	2b00      	cmp	r3, #0
    1a92:	f000 87a2 	beq.w	29da <ull_conn_llcp+0x1582>
	    !conn->llcp_enc.pause_tx &&
    1a96:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1a9a:	0797      	lsls	r7, r2, #30
    1a9c:	f100 879d 	bmi.w	29da <ull_conn_llcp+0x1582>
	    !conn->llcp_phy.pause_tx &&
    1aa0:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1aa4:	07d6      	lsls	r6, r2, #31
    1aa6:	f100 8798 	bmi.w	29da <ull_conn_llcp+0x1582>
		if (conn->tx_head == conn->tx_data) {
    1aaa:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1aae:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1ab0:	bf04      	itt	eq
    1ab2:	681a      	ldreq	r2, [r3, #0]
    1ab4:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1ab8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1abc:	2a00      	cmp	r2, #0
    1abe:	f001 8211 	beq.w	2ee4 <ull_conn_llcp+0x1a8c>
	tx->next = conn->tx_ctrl_last->next;
    1ac2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1ac6:	681a      	ldr	r2, [r3, #0]
    1ac8:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1aca:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1acc:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    1ad0:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	f001 81a0 	beq.w	2e18 <ull_conn_llcp+0x19c0>
			rx = ll_pdu_rx_alloc();
    1ad8:	f013 fa10 	bl	14efc <ll_pdu_rx_alloc>
			if (!rx) {
    1adc:	4605      	mov	r5, r0
    1ade:	2800      	cmp	r0, #0
    1ae0:	f43f acd1 	beq.w	1486 <ull_conn_llcp+0x2e>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1ae4:	7f2b      	ldrb	r3, [r5, #28]
			rx->hdr.handle = conn->lll.handle;
    1ae6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1ae8:	80ea      	strh	r2, [r5, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1aea:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1aee:	2602      	movs	r6, #2
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1af0:	2117      	movs	r1, #23
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1af2:	2203      	movs	r2, #3
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1af4:	772b      	strb	r3, [r5, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1af6:	7769      	strb	r1, [r5, #29]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1af8:	77ea      	strb	r2, [r5, #31]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    1afa:	f204 1155 	addw	r1, r4, #341	; 0x155
    1afe:	2208      	movs	r2, #8
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1b00:	712e      	strb	r6, [r5, #4]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    1b02:	f105 0020 	add.w	r0, r5, #32
    1b06:	f020 fe0b 	bl	22720 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    1b0a:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
    1b0e:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    1b12:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    1b16:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
    1b1a:	6828      	ldr	r0, [r5, #0]
    1b1c:	4629      	mov	r1, r5
    1b1e:	f013 f9bf 	bl	14ea0 <ll_rx_put>
			ll_rx_sched();
    1b22:	f013 f9c7 	bl	14eb4 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    1b26:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1b2a:	f366 0301 	bfi	r3, r6, #0, #2
    1b2e:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    1b32:	e4a8      	b.n	1486 <ull_conn_llcp+0x2e>
			event_counter = lll->event_counter +
    1b34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    1b36:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
    1b38:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    1b3c:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
    1b3e:	441e      	add	r6, r3
	if (conn->llcp.chan_map.initiate) {
    1b40:	07d0      	lsls	r0, r2, #31
			event_counter = lll->event_counter +
    1b42:	b2b6      	uxth	r6, r6
	if (conn->llcp.chan_map.initiate) {
    1b44:	f100 81b1 	bmi.w	1eaa <ull_conn_llcp+0xa52>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    1b48:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    1b4c:	1af6      	subs	r6, r6, r3
    1b4e:	0433      	lsls	r3, r6, #16
    1b50:	f53f ac99 	bmi.w	1486 <ull_conn_llcp+0x2e>
		conn->llcp_ack = conn->llcp_req;
    1b54:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1b58:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&lll->data_chan_map[0],
    1b5c:	f104 0538 	add.w	r5, r4, #56	; 0x38
    1b60:	2205      	movs	r2, #5
    1b62:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1b66:	4628      	mov	r0, r5
    1b68:	f020 fdda 	bl	22720 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    1b6c:	4628      	mov	r0, r5
    1b6e:	2105      	movs	r1, #5
    1b70:	f00f f848 	bl	10c04 <util_ones_count_get>
		lll->data_chan_count =
    1b74:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    1b78:	2201      	movs	r2, #1
		lll->data_chan_count =
    1b7a:	f360 0305 	bfi	r3, r0, #0, #6
    1b7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    1b82:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
    1b86:	e47e      	b.n	1486 <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1b88:	4871      	ldr	r0, [pc, #452]	; (1d50 <ull_conn_llcp+0x8f8>)
    1b8a:	f00e fe6d 	bl	10868 <mem_acquire>
	if (tx) {
    1b8e:	2800      	cmp	r0, #0
    1b90:	f43f ac79 	beq.w	1486 <ull_conn_llcp+0x2e>
		conn->llcp_ack = conn->llcp_req;
    1b94:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1b98:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1b9c:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b9e:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1ba0:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    1ba2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ba6:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1baa:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1bac:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1bae:	71c1      	strb	r1, [r0, #7]
	if (
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	f000 8343 	beq.w	223c <ull_conn_llcp+0xde4>
	    !conn->llcp_enc.pause_tx &&
    1bb6:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1bba:	0796      	lsls	r6, r2, #30
    1bbc:	f100 833e 	bmi.w	223c <ull_conn_llcp+0xde4>
	    !conn->llcp_phy.pause_tx &&
    1bc0:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1bc4:	07d5      	lsls	r5, r2, #31
    1bc6:	f100 8339 	bmi.w	223c <ull_conn_llcp+0xde4>
		if (conn->tx_head == conn->tx_data) {
    1bca:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1bce:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1bd0:	bf04      	itt	eq
    1bd2:	681a      	ldreq	r2, [r3, #0]
    1bd4:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1bd8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1bdc:	2a00      	cmp	r2, #0
    1bde:	f001 8145 	beq.w	2e6c <ull_conn_llcp+0x1a14>
	tx->next = conn->tx_ctrl_last->next;
    1be2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1be6:	681a      	ldr	r2, [r3, #0]
    1be8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1bea:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1bec:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1bf0:	6803      	ldr	r3, [r0, #0]
	if (!tx->next) {
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	f000 8553 	beq.w	269e <ull_conn_llcp+0x1246>
		conn->procedure_expire = conn->procedure_reload;
    1bf8:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1bfc:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1c00:	e441      	b.n	1486 <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
    1c02:	4a54      	ldr	r2, [pc, #336]	; (1d54 <ull_conn_llcp+0x8fc>)
    1c04:	4954      	ldr	r1, [pc, #336]	; (1d58 <ull_conn_llcp+0x900>)
    1c06:	4855      	ldr	r0, [pc, #340]	; (1d5c <ull_conn_llcp+0x904>)
    1c08:	f240 337a 	movw	r3, #890	; 0x37a
    1c0c:	f01e fd18 	bl	20640 <printk>
    1c10:	4040      	eors	r0, r0
    1c12:	f380 8811 	msr	BASEPRI, r0
    1c16:	f04f 0003 	mov.w	r0, #3
    1c1a:	df02      	svc	2
			break;
    1c1c:	e433      	b.n	1486 <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    1c1e:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
    1c22:	f894 c118 	ldrb.w	ip, [r4, #280]	; 0x118
    1c26:	4560      	cmp	r0, ip
    1c28:	d156      	bne.n	1cd8 <ull_conn_llcp+0x880>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    1c2a:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
    1c2e:	f894 c124 	ldrb.w	ip, [r4, #292]	; 0x124
    1c32:	4560      	cmp	r0, ip
    1c34:	f000 8330 	beq.w	2298 <ull_conn_llcp+0xe40>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    1c38:	eba0 000c 	sub.w	r0, r0, ip
    1c3c:	07c1      	lsls	r1, r0, #31
    1c3e:	f57f ac22 	bpl.w	1486 <ull_conn_llcp+0x2e>
	if (conn->llcp_version.tx == 0U) {
    1c42:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
    1c46:	07da      	lsls	r2, r3, #31
    1c48:	f141 8029 	bpl.w	2c9e <ull_conn_llcp+0x1846>
	} else if (conn->llcp_version.rx) {
    1c4c:	079a      	lsls	r2, r3, #30
    1c4e:	f141 8021 	bpl.w	2c94 <ull_conn_llcp+0x183c>
		rx = ll_pdu_rx_alloc();
    1c52:	f013 f953 	bl	14efc <ll_pdu_rx_alloc>
		if (!rx) {
    1c56:	4601      	mov	r1, r0
    1c58:	2800      	cmp	r0, #0
    1c5a:	d072      	beq.n	1d42 <ull_conn_llcp+0x8ea>
		conn->llcp_version.ack = conn->llcp_version.req;
    1c5c:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    1c60:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1c64:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    1c66:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1c68:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1c6a:	f043 0303 	orr.w	r3, r3, #3
    1c6e:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1c70:	2002      	movs	r0, #2
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1c72:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1c74:	230c      	movs	r3, #12
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1c76:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1c78:	774a      	strb	r2, [r1, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1c7a:	77cb      	strb	r3, [r1, #31]
		pdu->llctrl.version_ind.company_id =
    1c7c:	f8b4 2128 	ldrh.w	r2, [r4, #296]	; 0x128
		pdu->llctrl.version_ind.sub_version_number =
    1c80:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
		pdu->llctrl.version_ind.version_number =
    1c84:	f894 0127 	ldrb.w	r0, [r4, #295]	; 0x127
    1c88:	f881 0020 	strb.w	r0, [r1, #32]
		pdu->llctrl.version_ind.company_id =
    1c8c:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
    1c90:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
    1c94:	6808      	ldr	r0, [r1, #0]
    1c96:	f013 f903 	bl	14ea0 <ll_rx_put>
		ll_rx_sched();
    1c9a:	f013 f90b 	bl	14eb4 <ll_rx_sched>
    1c9e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1ca2:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    1ca6:	f7ff bbe9 	b.w	147c <ull_conn_llcp+0x24>
	switch (conn->llcp_length.state) {
    1caa:	f002 0107 	and.w	r1, r2, #7
    1cae:	2906      	cmp	r1, #6
    1cb0:	f201 8296 	bhi.w	31e0 <ull_conn_llcp+0x1d88>
    1cb4:	a001      	add	r0, pc, #4	; (adr r0, 1cbc <ull_conn_llcp+0x864>)
    1cb6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1cba:	bf00      	nop
    1cbc:	0000216d 	.word	0x0000216d
    1cc0:	000014d9 	.word	0x000014d9
    1cc4:	000014d9 	.word	0x000014d9
    1cc8:	000014d9 	.word	0x000014d9
    1ccc:	000020e9 	.word	0x000020e9
    1cd0:	000020e9 	.word	0x000020e9
    1cd4:	000014d9 	.word	0x000014d9
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    1cd8:	eba0 000c 	sub.w	r0, r0, ip
    1cdc:	07c3      	lsls	r3, r0, #31
    1cde:	f57f abd2 	bpl.w	1486 <ull_conn_llcp+0x2e>
	if (conn->common.fex_valid) {
    1ce2:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
    1ce6:	f011 0701 	ands.w	r7, r1, #1
    1cea:	f000 847d 	beq.w	25e8 <ull_conn_llcp+0x1190>
		rx = ll_pdu_rx_alloc();
    1cee:	f013 f905 	bl	14efc <ll_pdu_rx_alloc>
		if (!rx) {
    1cf2:	4607      	mov	r7, r0
    1cf4:	b328      	cbz	r0, 1d42 <ull_conn_llcp+0x8ea>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    1cf6:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    1cfa:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1cfe:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    1d00:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1d02:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1d04:	f043 0303 	orr.w	r3, r3, #3
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1d08:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1d0a:	2002      	movs	r0, #2
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1d0c:	4641      	mov	r1, r8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1d0e:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1d10:	7138      	strb	r0, [r7, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1d12:	777a      	strb	r2, [r7, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    1d14:	77fa      	strb	r2, [r7, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1d16:	f107 0020 	add.w	r0, r7, #32
    1d1a:	2208      	movs	r2, #8
    1d1c:	f020 fd2b 	bl	22776 <memset>
		sys_put_le24(conn->llcp_feature.features_peer,
    1d20:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	dst[0] = val;
    1d24:	f887 3020 	strb.w	r3, [r7, #32]
	dst[1] = val >> 8;
    1d28:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    1d2c:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    1d2e:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	dst[2] = val >> 16;
    1d32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    1d36:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
    1d38:	6808      	ldr	r0, [r1, #0]
    1d3a:	f013 f8b1 	bl	14ea0 <ll_rx_put>
	ll_rx_sched();
    1d3e:	f013 f8b9 	bl	14eb4 <ll_rx_sched>
	break;
    1d42:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1d46:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    1d4a:	f7ff bb97 	b.w	147c <ull_conn_llcp+0x24>
    1d4e:	bf00      	nop
    1d50:	20003c54 	.word	0x20003c54
    1d54:	000273f4 	.word	0x000273f4
    1d58:	00026f3c 	.word	0x00026f3c
    1d5c:	00026ecc 	.word	0x00026ecc
		rx = ll_pdu_rx_alloc_peek(1);
    1d60:	2001      	movs	r0, #1
    1d62:	f013 f8ad 	bl	14ec0 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1d66:	4607      	mov	r7, r0
    1d68:	2800      	cmp	r0, #0
    1d6a:	f43f ab8c 	beq.w	1486 <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1d6e:	48a3      	ldr	r0, [pc, #652]	; (1ffc <ull_conn_llcp+0xba4>)
    1d70:	f00e fd7a 	bl	10868 <mem_acquire>
		if (!tx) {
    1d74:	4606      	mov	r6, r0
    1d76:	2800      	cmp	r0, #0
    1d78:	f43f ab85 	beq.w	1486 <ull_conn_llcp+0x2e>
		(void)ll_pdu_rx_alloc();
    1d7c:	f013 f8be 	bl	14efc <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    1d80:	683b      	ldr	r3, [r7, #0]
    1d82:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1d86:	605a      	str	r2, [r3, #4]
		switch (conn->llcp_cu.state) {
    1d88:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->llcp_rx = rx;
    1d8c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		switch (conn->llcp_cu.state) {
    1d90:	f003 0303 	and.w	r3, r3, #3
    1d94:	2b01      	cmp	r3, #1
    1d96:	f000 86ba 	beq.w	2b0e <ull_conn_llcp+0x16b6>
    1d9a:	2b02      	cmp	r3, #2
    1d9c:	f000 861a 	beq.w	29d4 <ull_conn_llcp+0x157c>
			LL_ASSERT(0);
    1da0:	4a97      	ldr	r2, [pc, #604]	; (2000 <ull_conn_llcp+0xba8>)
    1da2:	4998      	ldr	r1, [pc, #608]	; (2004 <ull_conn_llcp+0xbac>)
    1da4:	4898      	ldr	r0, [pc, #608]	; (2008 <ull_conn_llcp+0xbb0>)
    1da6:	f640 037f 	movw	r3, #2175	; 0x87f
    1daa:	f01e fc49 	bl	20640 <printk>
    1dae:	4040      	eors	r0, r0
    1db0:	f380 8811 	msr	BASEPRI, r0
    1db4:	f04f 0003 	mov.w	r0, #3
    1db8:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
    1dba:	2100      	movs	r1, #0
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1dbc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1dbe:	f894 7106 	ldrb.w	r7, [r4, #262]	; 0x106
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1dc2:	7932      	ldrb	r2, [r6, #4]
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1dc4:	4443      	add	r3, r8
    1dc6:	3306      	adds	r3, #6
    1dc8:	b298      	uxth	r0, r3
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1dca:	f36f 0701 	bfc	r7, #0, #2
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1dce:	230c      	movs	r3, #12
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1dd0:	f884 7106 	strb.w	r7, [r4, #262]	; 0x106
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1dd4:	f8a4 00ec 	strh.w	r0, [r4, #236]	; 0xec
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1dd8:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1ddc:	7173      	strb	r3, [r6, #5]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1dde:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    1de2:	4f8a      	ldr	r7, [pc, #552]	; (200c <ull_conn_llcp+0xbb4>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1de4:	7132      	strb	r2, [r6, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1de6:	2200      	movs	r2, #0
    1de8:	71f2      	strb	r2, [r6, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1dea:	fba7 2303 	umull	r2, r3, r7, r3
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1dee:	f894 7114 	ldrb.w	r7, [r4, #276]	; 0x114
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1df2:	6822      	ldr	r2, [r4, #0]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1df4:	7237      	strb	r7, [r6, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1df6:	f8b4 7108 	ldrh.w	r7, [r4, #264]	; 0x108
    1dfa:	f8a6 700b 	strh.w	r7, [r6, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1dfe:	f8b4 710a 	ldrh.w	r7, [r4, #266]	; 0x10a
    1e02:	f8a6 700d 	strh.w	r7, [r6, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1e06:	f3c3 238f 	ubfx	r3, r3, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1e0a:	f8b4 710c 	ldrh.w	r7, [r4, #268]	; 0x10c
    1e0e:	f8a6 700f 	strh.w	r7, [r6, #15]
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1e12:	2a00      	cmp	r2, #0
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1e14:	f8a6 0011 	strh.w	r0, [r6, #17]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1e18:	f8a6 3009 	strh.w	r3, [r6, #9]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    1e1c:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1e20:	da0a      	bge.n	1e38 <ull_conn_llcp+0x9e0>
			uint32_t ticks_prepare_to_start =
    1e22:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
				(conn->evt.ticks_xtal_to_start &
    1e26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    1e2a:	4283      	cmp	r3, r0
    1e2c:	bf2c      	ite	cs
    1e2e:	18ed      	addcs	r5, r5, r3
    1e30:	182d      	addcc	r5, r5, r0
    1e32:	1aaa      	subs	r2, r5, r2
    1e34:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    1e38:	4b75      	ldr	r3, [pc, #468]	; (2010 <ull_conn_llcp+0xbb8>)
		conn->llcp.conn_upd.pdu_win_offset = (uint16_t *)
    1e3a:	f106 0009 	add.w	r0, r6, #9
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1e3e:	2201      	movs	r2, #1
		conn->llcp.conn_upd.pdu_win_offset = (uint16_t *)
    1e40:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    1e44:	60d9      	str	r1, [r3, #12]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1e46:	4610      	mov	r0, r2
    1e48:	2102      	movs	r1, #2
		mfy_sched_offset->param = (void *)conn;
    1e4a:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1e4c:	f00e fde4 	bl	10a18 <mayfly_enqueue>
		LL_ASSERT(!retval);
    1e50:	2800      	cmp	r0, #0
    1e52:	f040 865f 	bne.w	2b14 <ull_conn_llcp+0x16bc>
	    conn->tx_head &&
    1e56:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	f000 834f 	beq.w	24fe <ull_conn_llcp+0x10a6>
	    !conn->llcp_enc.pause_tx &&
    1e60:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1e64:	0790      	lsls	r0, r2, #30
    1e66:	f100 834a 	bmi.w	24fe <ull_conn_llcp+0x10a6>
	    !conn->llcp_phy.pause_tx &&
    1e6a:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1e6e:	07d1      	lsls	r1, r2, #31
    1e70:	f100 8345 	bmi.w	24fe <ull_conn_llcp+0x10a6>
		if (conn->tx_head == conn->tx_data) {
    1e74:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1e78:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1e7a:	bf04      	itt	eq
    1e7c:	681a      	ldreq	r2, [r3, #0]
    1e7e:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1e82:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1e86:	2a00      	cmp	r2, #0
    1e88:	f001 8006 	beq.w	2e98 <ull_conn_llcp+0x1a40>
	tx->next = conn->tx_ctrl_last->next;
    1e8c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1e90:	681a      	ldr	r2, [r3, #0]
    1e92:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    1e94:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    1e96:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    1e9a:	6833      	ldr	r3, [r6, #0]
	if (!tx->next) {
    1e9c:	2b00      	cmp	r3, #0
    1e9e:	f47f aaf2 	bne.w	1486 <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
    1ea2:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    1ea6:	f7ff baee 	b.w	1486 <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1eaa:	4854      	ldr	r0, [pc, #336]	; (1ffc <ull_conn_llcp+0xba4>)
    1eac:	f00e fcdc 	bl	10868 <mem_acquire>
		if (tx) {
    1eb0:	4605      	mov	r5, r0
    1eb2:	2800      	cmp	r0, #0
    1eb4:	f43f aae7 	beq.w	1486 <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
    1eb8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1eba:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
    1ebc:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
    1ec0:	441e      	add	r6, r3
						      conn->lll.latency + 6;
    1ec2:	1db3      	adds	r3, r6, #6
			conn->llcp.chan_map.instant = event_counter +
    1ec4:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			conn->llcp.chan_map.initiate = 0U;
    1ec8:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->llctrl.opcode =
    1ecc:	2301      	movs	r3, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ece:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1ed2:	2008      	movs	r0, #8
			conn->llcp.chan_map.initiate = 0U;
    1ed4:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ed8:	712a      	strb	r2, [r5, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1eda:	7168      	strb	r0, [r5, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1edc:	71eb      	strb	r3, [r5, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    1ede:	2205      	movs	r2, #5
    1ee0:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1ee4:	1828      	adds	r0, r5, r0
    1ee6:	f020 fc1b 	bl	22720 <memcpy>
	    conn->tx_head &&
    1eea:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    1eee:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    1ef2:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
    1ef6:	2b00      	cmp	r3, #0
    1ef8:	f000 83e1 	beq.w	26be <ull_conn_llcp+0x1266>
	    !conn->llcp_enc.pause_tx &&
    1efc:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1f00:	0791      	lsls	r1, r2, #30
    1f02:	f100 83dc 	bmi.w	26be <ull_conn_llcp+0x1266>
	    !conn->llcp_phy.pause_tx &&
    1f06:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1f0a:	07d2      	lsls	r2, r2, #31
    1f0c:	f100 83d7 	bmi.w	26be <ull_conn_llcp+0x1266>
		if (conn->tx_head == conn->tx_data) {
    1f10:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1f14:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1f16:	bf04      	itt	eq
    1f18:	681a      	ldreq	r2, [r3, #0]
    1f1a:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1f1e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1f22:	2a00      	cmp	r2, #0
    1f24:	f000 87cb 	beq.w	2ebe <ull_conn_llcp+0x1a66>
	tx->next = conn->tx_ctrl_last->next;
    1f28:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1f2c:	681a      	ldr	r2, [r3, #0]
    1f2e:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1f30:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1f32:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    1f36:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
    1f38:	2b00      	cmp	r3, #0
    1f3a:	f47f aaa4 	bne.w	1486 <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
    1f3e:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    1f42:	f7ff baa0 	b.w	1486 <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1f46:	482d      	ldr	r0, [pc, #180]	; (1ffc <ull_conn_llcp+0xba4>)
    1f48:	f00e fc8e 	bl	10868 <mem_acquire>
	if (!tx) {
    1f4c:	4606      	mov	r6, r0
    1f4e:	2800      	cmp	r0, #0
    1f50:	f43f aa99 	beq.w	1486 <ull_conn_llcp+0x2e>
	if (!lll->role) {
    1f54:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1f58:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
    1f5a:	f100 0804 	add.w	r8, r0, #4
	if (!lll->role) {
    1f5e:	f280 84d8 	bge.w	2912 <ull_conn_llcp+0x14ba>
	else if (!lll->enc_rx) {
    1f62:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    1f66:	0719      	lsls	r1, r3, #28
    1f68:	f100 86de 	bmi.w	2d28 <ull_conn_llcp+0x18d0>
		if (conn->llcp.encryption.error_code) {
    1f6c:	f894 50ed 	ldrb.w	r5, [r4, #237]	; 0xed
    1f70:	2d00      	cmp	r5, #0
    1f72:	f000 8556 	beq.w	2a22 <ull_conn_llcp+0x15ca>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f76:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    1f78:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f7c:	f043 0303 	orr.w	r3, r3, #3
	if (conn->common.fex_valid &&
    1f80:	07d2      	lsls	r2, r2, #31
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f82:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    1f84:	f140 86fe 	bpl.w	2d84 <ull_conn_llcp+0x192c>
	    (conn->llcp_feature.features_conn &
    1f88:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	if (conn->common.fex_valid &&
    1f8c:	075b      	lsls	r3, r3, #29
    1f8e:	f140 86f9 	bpl.w	2d84 <ull_conn_llcp+0x192c>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1f92:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1f94:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
    1f96:	7245      	strb	r5, [r0, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1f98:	71c2      	strb	r2, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1f9a:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    1f9c:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
    1f9e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	conn->llcp.encryption.error_code = 0U;
    1fa2:	2200      	movs	r2, #0
    1fa4:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
	if (
    1fa8:	2b00      	cmp	r3, #0
    1faa:	f000 8584 	beq.w	2ab6 <ull_conn_llcp+0x165e>
	    !conn->llcp_enc.pause_tx &&
    1fae:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1fb2:	0790      	lsls	r0, r2, #30
    1fb4:	f100 857f 	bmi.w	2ab6 <ull_conn_llcp+0x165e>
	    !conn->llcp_phy.pause_tx &&
    1fb8:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1fbc:	07d1      	lsls	r1, r2, #31
    1fbe:	f100 857a 	bmi.w	2ab6 <ull_conn_llcp+0x165e>
		if (conn->tx_head == conn->tx_data) {
    1fc2:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1fc6:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1fc8:	bf04      	itt	eq
    1fca:	681a      	ldreq	r2, [r3, #0]
    1fcc:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1fd0:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1fd4:	2a00      	cmp	r2, #0
    1fd6:	f000 87ca 	beq.w	2f6e <ull_conn_llcp+0x1b16>
	tx->next = conn->tx_ctrl_last->next;
    1fda:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1fde:	681a      	ldr	r2, [r3, #0]
    1fe0:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    1fe2:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    1fe4:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1fe8:	6833      	ldr	r3, [r6, #0]
    1fea:	2b00      	cmp	r3, #0
    1fec:	f000 8613 	beq.w	2c16 <ull_conn_llcp+0x17be>
	conn->llcp_ack = conn->llcp_req;
    1ff0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1ff4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    1ff8:	f7ff ba45 	b.w	1486 <ull_conn_llcp+0x2e>
    1ffc:	20003c54 	.word	0x20003c54
    2000:	000273f4 	.word	0x000273f4
    2004:	00026f3c 	.word	0x00026f3c
    2008:	00026ecc 	.word	0x00026ecc
    200c:	d1b71759 	.word	0xd1b71759
    2010:	20000588 	.word	0x20000588
		rx = ll_pdu_rx_alloc_peek(2);
    2014:	2002      	movs	r0, #2
    2016:	f012 ff53 	bl	14ec0 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    201a:	4605      	mov	r5, r0
    201c:	2800      	cmp	r0, #0
    201e:	f43f aa32 	beq.w	1486 <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2022:	48c7      	ldr	r0, [pc, #796]	; (2340 <ull_conn_llcp+0xee8>)
    2024:	f00e fc20 	bl	10868 <mem_acquire>
		if (!tx) {
    2028:	4680      	mov	r8, r0
    202a:	2800      	cmp	r0, #0
    202c:	f43f aa2b 	beq.w	1486 <ull_conn_llcp+0x2e>
		conn->llcp.phy_upd_ind.initiate = 0U;
    2030:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    2034:	f36f 0300 	bfc	r3, #0, #1
		if (!((conn->llcp.phy_upd_ind.tx |
    2038:	f3c3 0782 	ubfx	r7, r3, #2, #3
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    203c:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    2040:	4317      	orrs	r7, r2
		conn->llcp.phy_upd_ind.initiate = 0U;
    2042:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
    2046:	b2db      	uxtb	r3, r3
    2048:	f040 8606 	bne.w	2c58 <ull_conn_llcp+0x1800>
			conn->llcp_ack = conn->llcp_req;
    204c:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.phy_upd_ind.instant = 0U;
    2050:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
    2054:	0799      	lsls	r1, r3, #30
			conn->llcp_ack = conn->llcp_req;
    2056:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
    205a:	f100 86a7 	bmi.w	2dac <ull_conn_llcp+0x1954>
    205e:	463b      	mov	r3, r7
    2060:	4639      	mov	r1, r7
		pdu_ctrl_tx->len =
    2062:	2205      	movs	r2, #5
    2064:	f888 2005 	strb.w	r2, [r8, #5]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    2068:	f888 7008 	strb.w	r7, [r8, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    206c:	f898 2004 	ldrb.w	r2, [r8, #4]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    2070:	f888 3009 	strb.w	r3, [r8, #9]
	    conn->tx_head &&
    2074:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    2078:	f8a8 100a 	strh.w	r1, [r8, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    207c:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    2080:	2118      	movs	r1, #24
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2082:	f888 2004 	strb.w	r2, [r8, #4]
		pdu_ctrl_tx->llctrl.opcode =
    2086:	f888 1007 	strb.w	r1, [r8, #7]
	if (
    208a:	2b00      	cmp	r3, #0
    208c:	f000 830b 	beq.w	26a6 <ull_conn_llcp+0x124e>
	    !conn->llcp_enc.pause_tx &&
    2090:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2094:	0792      	lsls	r2, r2, #30
    2096:	f100 8306 	bmi.w	26a6 <ull_conn_llcp+0x124e>
	    !conn->llcp_phy.pause_tx &&
    209a:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    209e:	07d7      	lsls	r7, r2, #31
    20a0:	f100 8301 	bmi.w	26a6 <ull_conn_llcp+0x124e>
		if (conn->tx_head == conn->tx_data) {
    20a4:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    20a8:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    20aa:	bf04      	itt	eq
    20ac:	681a      	ldreq	r2, [r3, #0]
    20ae:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    20b2:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    20b6:	2a00      	cmp	r2, #0
    20b8:	f000 86f6 	beq.w	2ea8 <ull_conn_llcp+0x1a50>
	tx->next = conn->tx_ctrl_last->next;
    20bc:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    20c0:	681a      	ldr	r2, [r3, #0]
    20c2:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    20c6:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
    20ca:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    20ce:	f8d8 3000 	ldr.w	r3, [r8]
	if (!tx->next) {
    20d2:	2b00      	cmp	r3, #0
    20d4:	f47f a9d7 	bne.w	1486 <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
    20d8:	f8c4 81c0 	str.w	r8, [r4, #448]	; 0x1c0
    20dc:	f7ff b9d3 	b.w	1486 <ull_conn_llcp+0x2e>
		conn_upd_curr = conn;
    20e0:	f8c9 4000 	str.w	r4, [r9]
    20e4:	f7ff ba77 	b.w	15d6 <ull_conn_llcp+0x17e>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    20e8:	f002 0207 	and.w	r2, r2, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    20ec:	f8b4 c19c 	ldrh.w	ip, [r4, #412]	; 0x19c
		lll->max_rx_time = conn->llcp_length.rx_time;
    20f0:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    20f4:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		uint16_t tx_time = conn->llcp_length.tx_time;
    20f8:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    20fc:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    2100:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
    2102:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    2106:	f000 8536 	beq.w	2b76 <ull_conn_llcp+0x171e>
			conn->llcp_length.state =
    210a:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    210e:	2206      	movs	r2, #6
    2110:	f362 0302 	bfi	r3, r2, #0, #3
    2114:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    2118:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    211c:	2f00      	cmp	r7, #0
    211e:	f000 84e2 	beq.w	2ae6 <ull_conn_llcp+0x168e>
    2122:	6838      	ldr	r0, [r7, #0]
    2124:	2800      	cmp	r0, #0
    2126:	f000 84de 	beq.w	2ae6 <ull_conn_llcp+0x168e>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    212a:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    212c:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    212e:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    2132:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    2136:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    213a:	2202      	movs	r2, #2
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    213c:	773b      	strb	r3, [r7, #28]
		pdu_ctrl_rx->len =
    213e:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    2142:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
    2144:	f8a7 e006 	strh.w	lr, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    2148:	f8a7 c020 	strh.w	ip, [r7, #32]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    214c:	8479      	strh	r1, [r7, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    214e:	713a      	strb	r2, [r7, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    2150:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
    2152:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2154:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    2158:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		pdu_ctrl_rx->len =
    215c:	f887 a01d 	strb.w	sl, [r7, #29]
		ll_rx_put(rx->hdr.link, rx);
    2160:	f012 fe9e 	bl	14ea0 <ll_rx_put>
		ll_rx_sched();
    2164:	f012 fea6 	bl	14eb4 <ll_rx_sched>
	break;
    2168:	f7ff b9b6 	b.w	14d8 <ull_conn_llcp+0x80>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    216c:	4874      	ldr	r0, [pc, #464]	; (2340 <ull_conn_llcp+0xee8>)
    216e:	f00e fb7b 	bl	10868 <mem_acquire>
		if (!tx) {
    2172:	2800      	cmp	r0, #0
    2174:	f43f a9b0 	beq.w	14d8 <ull_conn_llcp+0x80>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2178:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    217c:	f8b4 119e 	ldrh.w	r1, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    2180:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    2184:	f8a4 10d6 	strh.w	r1, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2188:	2701      	movs	r7, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    218a:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    218e:	f367 0202 	bfi	r2, r7, #0, #3
    2192:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
		pdu_ctrl_tx->len =
    2196:	2709      	movs	r7, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2198:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len =
    219a:	7147      	strb	r7, [r0, #5]
	if (!conn->common.fex_valid ||
    219c:	f894 70dc 	ldrb.w	r7, [r4, #220]	; 0xdc
	feature_coded_phy = (conn->llcp_feature.features_conn &
    21a0:	f8d4 e11c 	ldr.w	lr, [r4, #284]	; 0x11c
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    21a4:	8181      	strh	r1, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    21a6:	f042 0203 	orr.w	r2, r2, #3
    21aa:	7102      	strb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    21ac:	f06f 0204 	mvn.w	r2, #4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    21b0:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    21b4:	2100      	movs	r1, #0
    21b6:	7202      	strb	r2, [r0, #8]
	if (!conn->common.fex_valid ||
    21b8:	07fa      	lsls	r2, r7, #31
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    21ba:	f880 c007 	strb.w	ip, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    21be:	7241      	strb	r1, [r0, #9]
	if (!conn->common.fex_valid ||
    21c0:	f140 8485 	bpl.w	2ace <ull_conn_llcp+0x1676>
    21c4:	f41e 6f00 	tst.w	lr, #2048	; 0x800
    21c8:	f000 862d 	beq.w	2e26 <ull_conn_llcp+0x19ce>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    21cc:	f244 2190 	movw	r1, #17040	; 0x4290
    21d0:	428b      	cmp	r3, r1
    21d2:	bf28      	it	cs
    21d4:	460b      	movcs	r3, r1
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    21d6:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    21da:	bf38      	it	cc
    21dc:	f44f 73a4 	movcc.w	r3, #328	; 0x148
	    conn->tx_head &&
    21e0:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    21e4:	8141      	strh	r1, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    21e6:	81c3      	strh	r3, [r0, #14]
	if (
    21e8:	2a00      	cmp	r2, #0
    21ea:	f000 8377 	beq.w	28dc <ull_conn_llcp+0x1484>
	    !conn->llcp_enc.pause_tx &&
    21ee:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    21f2:	079b      	lsls	r3, r3, #30
    21f4:	f100 8372 	bmi.w	28dc <ull_conn_llcp+0x1484>
	    !conn->llcp_phy.pause_tx &&
    21f8:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    21fc:	07df      	lsls	r7, r3, #31
    21fe:	f100 836d 	bmi.w	28dc <ull_conn_llcp+0x1484>
		if (conn->tx_head == conn->tx_data) {
    2202:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    2206:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
    2208:	bf04      	itt	eq
    220a:	6813      	ldreq	r3, [r2, #0]
    220c:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2210:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2214:	2b00      	cmp	r3, #0
    2216:	f000 868d 	beq.w	2f34 <ull_conn_llcp+0x1adc>
	tx->next = conn->tx_ctrl_last->next;
    221a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    221e:	681a      	ldr	r2, [r3, #0]
    2220:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2222:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    2224:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    2228:	6802      	ldr	r2, [r0, #0]
	if (!tx->next) {
    222a:	2a00      	cmp	r2, #0
    222c:	f000 85b0 	beq.w	2d90 <ull_conn_llcp+0x1938>
		conn->procedure_expire = conn->procedure_reload;
    2230:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    2234:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
    2238:	f7ff b94e 	b.w	14d8 <ull_conn_llcp+0x80>
		if (!conn->tx_ctrl) {
    223c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2240:	2a00      	cmp	r2, #0
    2242:	f47f acce 	bne.w	1be2 <ull_conn_llcp+0x78a>
			tx->next = conn->tx_head;
    2246:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2248:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    224c:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    2250:	e4cf      	b.n	1bf2 <ull_conn_llcp+0x79a>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2252:	fb0a 3311 	mls	r3, sl, r1, r3
    2256:	f240 42e2 	movw	r2, #1250	; 0x4e2
    225a:	483a      	ldr	r0, [pc, #232]	; (2344 <ull_conn_llcp+0xeec>)
    225c:	b29b      	uxth	r3, r3
    225e:	fb02 f303 	mul.w	r3, r2, r3
    2262:	fba3 0100 	umull	r0, r1, r3, r0
    2266:	a334      	add	r3, pc, #208	; (adr r3, 2338 <ull_conn_llcp+0xee0>)
    2268:	e9d3 2300 	ldrd	r2, r3, [r3]
    226c:	f7fd ff48 	bl	100 <__aeabi_uldivmod>
    2270:	1a2d      	subs	r5, r5, r0
    2272:	f7ff ba3e 	b.w	16f2 <ull_conn_llcp+0x29a>
		LL_ASSERT(rx && rx->hdr.link);
    2276:	4a34      	ldr	r2, [pc, #208]	; (2348 <ull_conn_llcp+0xef0>)
    2278:	4934      	ldr	r1, [pc, #208]	; (234c <ull_conn_llcp+0xef4>)
    227a:	4835      	ldr	r0, [pc, #212]	; (2350 <ull_conn_llcp+0xef8>)
    227c:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
    2280:	f01e f9de 	bl	20640 <printk>
    2284:	4040      	eors	r0, r0
    2286:	f380 8811 	msr	BASEPRI, r0
    228a:	f04f 0003 	mov.w	r0, #3
    228e:	df02      	svc	2
    2290:	f8d9 0000 	ldr.w	r0, [r9]
    2294:	f7ff b9de 	b.w	1654 <ull_conn_llcp+0x1fc>
		} else if (conn->llcp_conn_param.ack !=
    2298:	f894 c171 	ldrb.w	ip, [r4, #369]	; 0x171
    229c:	f894 0170 	ldrb.w	r0, [r4, #368]	; 0x170
    22a0:	4584      	cmp	ip, r0
    22a2:	f000 8229 	beq.w	26f8 <ull_conn_llcp+0x12a0>
	conn_upd = conn_upd_curr;
    22a6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 2354 <ull_conn_llcp+0xefc>
    22aa:	f8d9 0000 	ldr.w	r0, [r9]
	if (conn_upd && (conn_upd != conn)) {
    22ae:	2800      	cmp	r0, #0
    22b0:	f000 859c 	beq.w	2dec <ull_conn_llcp+0x1994>
    22b4:	4284      	cmp	r4, r0
    22b6:	f47f a8e6 	bne.w	1486 <ull_conn_llcp+0x2e>
	switch (conn->llcp_conn_param.state) {
    22ba:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
    22be:	f000 0007 	and.w	r0, r0, #7
    22c2:	2805      	cmp	r0, #5
    22c4:	f200 8779 	bhi.w	31ba <ull_conn_llcp+0x1d62>
    22c8:	f20f 0c04 	addw	ip, pc, #4
    22cc:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    22d0:	000023d9 	.word	0x000023d9
    22d4:	00002359 	.word	0x00002359
    22d8:	000022e9 	.word	0x000022e9
    22dc:	0000147d 	.word	0x0000147d
    22e0:	0000147d 	.word	0x0000147d
    22e4:	0000147d 	.word	0x0000147d
	if (conn->llcp_enc.pause_tx) {
    22e8:	07bb      	lsls	r3, r7, #30
    22ea:	f53f a8cc 	bmi.w	1486 <ull_conn_llcp+0x2e>
	rx = ll_pdu_rx_alloc();
    22ee:	f012 fe05 	bl	14efc <ll_pdu_rx_alloc>
	if (!rx) {
    22f2:	4601      	mov	r1, r0
    22f4:	2800      	cmp	r0, #0
    22f6:	f43f ad24 	beq.w	1d42 <ull_conn_llcp+0x8ea>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    22fa:	7f03      	ldrb	r3, [r0, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    22fc:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    2300:	2003      	movs	r0, #3
    2302:	f360 0202 	bfi	r2, r0, #0, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2306:	4303      	orrs	r3, r0
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2308:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
	rx->hdr.handle = conn->lll.handle;
    230c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    230e:	770b      	strb	r3, [r1, #28]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2310:	2702      	movs	r7, #2
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2312:	2318      	movs	r3, #24
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2314:	710f      	strb	r7, [r1, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2316:	774b      	strb	r3, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2318:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    231c:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rx->hdr.handle = conn->lll.handle;
    2320:	80c8      	strh	r0, [r1, #6]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2322:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2326:	840a      	strh	r2, [r1, #32]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2328:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    232c:	844b      	strh	r3, [r1, #34]	; 0x22
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    232e:	230f      	movs	r3, #15
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2330:	8488      	strh	r0, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2332:	84ca      	strh	r2, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2334:	77cb      	strb	r3, [r1, #31]
    2336:	e4ff      	b.n	1d38 <ull_conn_llcp+0x8e0>
    2338:	1afd498d 	.word	0x1afd498d
    233c:	00000007 	.word	0x00000007
    2340:	20003c54 	.word	0x20003c54
    2344:	3b9aca00 	.word	0x3b9aca00
    2348:	000273f4 	.word	0x000273f4
    234c:	00027578 	.word	0x00027578
    2350:	00026ecc 	.word	0x00026ecc
    2354:	2000321c 	.word	0x2000321c
	if (conn->llcp_conn_param.status) {
    2358:	f894 7173 	ldrb.w	r7, [r4, #371]	; 0x173
    235c:	2f00      	cmp	r7, #0
    235e:	f040 860d 	bne.w	2f7c <ull_conn_llcp+0x1b24>
	if (!conn->lll.role) {
    2362:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    2366:	2b00      	cmp	r3, #0
    2368:	f2c0 862d 	blt.w	2fc6 <ull_conn_llcp+0x1b6e>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    236c:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		if (conn->llcp_conn_param.preferred_periodicity) {
    2370:	f894 017c 	ldrb.w	r0, [r4, #380]	; 0x17c
		conn->llcp_cu.win_offset_us = 0U;
    2374:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2378:	2205      	movs	r2, #5
    237a:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp_cu.win_size = 1U;
    237e:	2201      	movs	r2, #1
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2380:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
		conn->llcp_cu.win_size = 1U;
    2384:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
		if (conn->llcp_conn_param.preferred_periodicity) {
    2388:	2800      	cmp	r0, #0
    238a:	f000 8704 	beq.w	3196 <ull_conn_llcp+0x1d3e>
				((conn->llcp_conn_param.interval_min /
    238e:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    2392:	fbb3 f3f0 	udiv	r3, r3, r0
				  conn->llcp_conn_param.preferred_periodicity) +
    2396:	4413      	add	r3, r2
			conn->llcp_cu.interval =
    2398:	fb13 f300 	smulbb	r3, r3, r0
    239c:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    239e:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    23a2:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
    23a6:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    23aa:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    23ae:	009b      	lsls	r3, r3, #2
    23b0:	f020 0207 	bic.w	r2, r0, #7
    23b4:	f043 0302 	orr.w	r3, r3, #2
    23b8:	4313      	orrs	r3, r2
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    23ba:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    23be:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    23c2:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.ack--;
    23c6:	3901      	subs	r1, #1
    23c8:	f884 1105 	strb.w	r1, [r4, #261]	; 0x105
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    23cc:	f8a4 010a 	strh.w	r0, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    23d0:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
		return;
    23d4:	f7ff b857 	b.w	1486 <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    23d8:	48d9      	ldr	r0, [pc, #868]	; (2740 <ull_conn_llcp+0x12e8>)
			event_counter = lll->event_counter +
    23da:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    23de:	f8b4 a032 	ldrh.w	sl, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    23e2:	f00e fa41 	bl	10868 <mem_acquire>
	if (!tx) {
    23e6:	4607      	mov	r7, r0
    23e8:	2800      	cmp	r0, #0
    23ea:	f43f acaa 	beq.w	1d42 <ull_conn_llcp+0x8ea>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    23ee:	7902      	ldrb	r2, [r0, #4]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    23f0:	f894 1172 	ldrb.w	r1, [r4, #370]	; 0x172
    23f4:	2004      	movs	r0, #4
    23f6:	f360 0102 	bfi	r1, r0, #0, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    23fa:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    23fe:	2018      	movs	r0, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    2400:	f884 1172 	strb.w	r1, [r4, #370]	; 0x172
			event_counter = lll->event_counter +
    2404:	eb08 030a 	add.w	r3, r8, sl
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2408:	713a      	strb	r2, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    240a:	7178      	strb	r0, [r7, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    240c:	f8b4 0174 	ldrh.w	r0, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2410:	f8b4 1176 	ldrh.w	r1, [r4, #374]	; 0x176
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2414:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2418:	8138      	strh	r0, [r7, #8]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    241a:	4433      	add	r3, r6
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    241c:	f8b4 017a 	ldrh.w	r0, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2420:	8179      	strh	r1, [r7, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2422:	81ba      	strh	r2, [r7, #12]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2424:	210f      	movs	r1, #15
	p->preferred_periodicity = 0U;
    2426:	2200      	movs	r2, #0
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    2428:	f8a7 3011 	strh.w	r3, [r7, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
    242c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2430:	81f8      	strh	r0, [r7, #14]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2432:	71f9      	strb	r1, [r7, #7]
	p->preferred_periodicity = 0U;
    2434:	743a      	strb	r2, [r7, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    2436:	74fa      	strb	r2, [r7, #19]
    2438:	753a      	strb	r2, [r7, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
    243a:	757b      	strb	r3, [r7, #21]
    243c:	75bb      	strb	r3, [r7, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    243e:	75fb      	strb	r3, [r7, #23]
    2440:	763b      	strb	r3, [r7, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    2442:	767b      	strb	r3, [r7, #25]
    2444:	76bb      	strb	r3, [r7, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    2446:	76fb      	strb	r3, [r7, #27]
    2448:	773b      	strb	r3, [r7, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    244a:	777b      	strb	r3, [r7, #29]
    244c:	77bb      	strb	r3, [r7, #30]
	ctrl_tx_pause_enqueue(conn, tx, false);
    244e:	4639      	mov	r1, r7
    2450:	4620      	mov	r0, r4
    2452:	f013 fd41 	bl	15ed8 <ctrl_tx_pause_enqueue>
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    2456:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    2458:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
	conn_upd_curr = conn;
    245c:	f8c9 4000 	str.w	r4, [r9]
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    2460:	2a00      	cmp	r2, #0
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    2462:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
	conn->procedure_expire = conn->procedure_reload;
    2466:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    246a:	da0a      	bge.n	2482 <ull_conn_llcp+0x102a>
			uint32_t ticks_prepare_to_start =
    246c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
				(conn->evt.ticks_xtal_to_start &
    2470:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    2474:	428b      	cmp	r3, r1
    2476:	bf2c      	ite	cs
    2478:	18eb      	addcs	r3, r5, r3
    247a:	186b      	addcc	r3, r5, r1
    247c:	1a9b      	subs	r3, r3, r2
    247e:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
		s_mfy_sched_offset.param = (void *)conn;
    2482:	4bb0      	ldr	r3, [pc, #704]	; (2744 <ull_conn_llcp+0x12ec>)
		conn->llcp_conn_param.pdu_win_offset0 = (uint16_t *)&p->offset0;
    2484:	3713      	adds	r7, #19
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2486:	2201      	movs	r2, #1
		conn->llcp_conn_param.pdu_win_offset0 = (uint16_t *)&p->offset0;
    2488:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    248c:	4610      	mov	r0, r2
    248e:	2102      	movs	r1, #2
		s_mfy_sched_offset.param = (void *)conn;
    2490:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2492:	f00e fac1 	bl	10a18 <mayfly_enqueue>
		LL_ASSERT(!retval);
    2496:	2800      	cmp	r0, #0
    2498:	f43f ac53 	beq.w	1d42 <ull_conn_llcp+0x8ea>
    249c:	4aaa      	ldr	r2, [pc, #680]	; (2748 <ull_conn_llcp+0x12f0>)
    249e:	49ab      	ldr	r1, [pc, #684]	; (274c <ull_conn_llcp+0x12f4>)
    24a0:	f640 336d 	movw	r3, #2925	; 0xb6d
		LL_ASSERT(0);
    24a4:	48aa      	ldr	r0, [pc, #680]	; (2750 <ull_conn_llcp+0x12f8>)
    24a6:	f01e f8cb 	bl	20640 <printk>
    24aa:	4040      	eors	r0, r0
    24ac:	f380 8811 	msr	BASEPRI, r0
    24b0:	f04f 0003 	mov.w	r0, #3
    24b4:	df02      	svc	2
		break;
    24b6:	e444      	b.n	1d42 <ull_conn_llcp+0x8ea>
		if ((conn->llcp_cu.interval != lll->interval) ||
    24b8:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    24ba:	428a      	cmp	r2, r1
    24bc:	f47f a8d7 	bne.w	166e <ull_conn_llcp+0x216>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    24c0:	f240 42e2 	movw	r2, #1250	; 0x4e2
    24c4:	fb02 fa03 	mul.w	sl, r2, r3
    24c8:	f242 7210 	movw	r2, #10000	; 0x2710
		    (conn->llcp_cu.latency != lll->latency) ||
    24cc:	f8b4 e0c6 	ldrh.w	lr, [r4, #198]	; 0xc6
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    24d0:	fb02 a20c 	mla	r2, r2, ip, sl
    24d4:	3a01      	subs	r2, #1
    24d6:	fbb2 f2fa 	udiv	r2, r2, sl
		    (conn->llcp_cu.latency != lll->latency) ||
    24da:	b292      	uxth	r2, r2
    24dc:	4596      	cmp	lr, r2
    24de:	f47f a8c6 	bne.w	166e <ull_conn_llcp+0x216>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    24e2:	2303      	movs	r3, #3
    24e4:	f889 3004 	strb.w	r3, [r9, #4]
    24e8:	f7ff b8d1 	b.w	168e <ull_conn_llcp+0x236>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    24ec:	2201      	movs	r2, #1
    24ee:	4610      	mov	r0, r2
    24f0:	2102      	movs	r1, #2
    24f2:	f00e fa5d 	bl	109b0 <mayfly_enable>
				return -ECANCELED;
    24f6:	f06f 0047 	mvn.w	r0, #71	; 0x47
    24fa:	f7fe bfcb 	b.w	1494 <ull_conn_llcp+0x3c>
		if (!conn->tx_ctrl) {
    24fe:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2502:	2a00      	cmp	r2, #0
    2504:	f47f acc2 	bne.w	1e8c <ull_conn_llcp+0xa34>
			tx->next = conn->tx_head;
    2508:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    250a:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    250e:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    2512:	e4c3      	b.n	1e9c <ull_conn_llcp+0xa44>
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
    2514:	f640 0948 	movw	r9, #2120	; 0x848
    2518:	f7ff b9db 	b.w	18d2 <ull_conn_llcp+0x47a>
			lll->slave.window_widening_prepare_us -=
    251c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    251e:	6c63      	ldr	r3, [r4, #68]	; 0x44
                        conn->slave.ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
    2520:	f8df a23c 	ldr.w	sl, [pc, #572]	; 2760 <ull_conn_llcp+0x1308>
			lll->slave.window_widening_prepare_us -=
    2524:	fb03 2717 	mls	r7, r3, r7, r2
    2528:	64e7      	str	r7, [r4, #76]	; 0x4c
				(((lll_conn_ppm_local_get() +
    252a:	f019 ff55 	bl	1c3d8 <lll_conn_ppm_local_get>
    252e:	4607      	mov	r7, r0
				   lll_conn_ppm_get(conn->slave.sca)) *
    2530:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    2534:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2538:	f019 ff50 	bl	1c3dc <lll_conn_ppm_get>
				(((lll_conn_ppm_local_get() +
    253c:	183b      	adds	r3, r7, r0
				   lll_conn_ppm_get(conn->slave.sca)) *
    253e:	fb06 f303 	mul.w	r3, r6, r3
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2542:	4f84      	ldr	r7, [pc, #528]	; (2754 <ull_conn_llcp+0x12fc>)
				conn->llcp_cu.win_size * 1250U;
    2544:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
                        conn->slave.ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
    2548:	f8b4 b180 	ldrh.w	fp, [r4, #384]	; 0x180
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    254c:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    2550:	f203 233f 	addw	r3, r3, #575	; 0x23f
    2554:	fba7 1303 	umull	r1, r3, r7, r3
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2558:	0871      	lsrs	r1, r6, #1
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    255a:	0c9f      	lsrs	r7, r3, #18
                        conn->slave.ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
    255c:	fb08 fb0b 	mul.w	fp, r8, fp
				conn->llcp_cu.win_size * 1250U;
    2560:	fb08 f302 	mul.w	r3, r8, r2
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2564:	f1a1 0296 	sub.w	r2, r1, #150	; 0x96
			lll->slave.window_widening_periodic_us =
    2568:	6467      	str	r7, [r4, #68]	; 0x44
			lll->slave.window_size_prepare_us =
    256a:	6563      	str	r3, [r4, #84]	; 0x54
                        conn->slave.ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
    256c:	fb8b 010a 	smull	r0, r1, fp, sl
			lll->slave.window_widening_max_us =
    2570:	920a      	str	r2, [sp, #40]	; 0x28
    2572:	64a2      	str	r2, [r4, #72]	; 0x48
                        conn->slave.ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
    2574:	a370      	add	r3, pc, #448	; (adr r3, 2738 <ull_conn_llcp+0x12e0>)
    2576:	e9d3 2300 	ldrd	r2, r3, [r3]
    257a:	f7fd fdc1 	bl	100 <__aeabi_uldivmod>
			lll->slave.window_widening_prepare_us +=
    257e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    2580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                        conn->slave.ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
    2582:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
				lll->slave.window_widening_periodic_us *
    2586:	fb07 f909 	mul.w	r9, r7, r9
			lll->slave.window_widening_prepare_us +=
    258a:	444b      	add	r3, r9
    258c:	4293      	cmp	r3, r2
    258e:	bf28      	it	cs
    2590:	4613      	movcs	r3, r2
    2592:	64e3      	str	r3, [r4, #76]	; 0x4c
                        ticks_at_expire += HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0*1250U);
    2594:	fbab 010a 	umull	r0, r1, fp, sl
    2598:	a367      	add	r3, pc, #412	; (adr r3, 2738 <ull_conn_llcp+0x12e0>)
    259a:	e9d3 2300 	ldrd	r2, r3, [r3]
    259e:	f7fd fdaf 	bl	100 <__aeabi_uldivmod>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    25a2:	a365      	add	r3, pc, #404	; (adr r3, 2738 <ull_conn_llcp+0x12e0>)
    25a4:	e9d3 2300 	ldrd	r2, r3, [r3]
                        ticks_at_expire += HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0*1250U);
    25a8:	4684      	mov	ip, r0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    25aa:	fba9 010a 	umull	r0, r1, r9, sl
    25ae:	4465      	add	r5, ip
    25b0:	f7fd fda6 	bl	100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    25b4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    25b8:	4684      	mov	ip, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    25ba:	4867      	ldr	r0, [pc, #412]	; (2758 <ull_conn_llcp+0x1300>)
    25bc:	fba0 3003 	umull	r3, r0, r0, r3
    25c0:	0a80      	lsrs	r0, r0, #10
    25c2:	fb08 f000 	mul.w	r0, r8, r0
    25c6:	fba0 010a 	umull	r0, r1, r0, sl
    25ca:	a35b      	add	r3, pc, #364	; (adr r3, 2738 <ull_conn_llcp+0x12e0>)
    25cc:	e9d3 2300 	ldrd	r2, r3, [r3]
                        ticks_at_expire += HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0*1250U);
    25d0:	eba5 050c 	sub.w	r5, r5, ip
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    25d4:	f7fd fd94 	bl	100 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    25d8:	eba6 0807 	sub.w	r8, r6, r7
    25dc:	f8b4 a108 	ldrh.w	sl, [r4, #264]	; 0x108
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    25e0:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    25e4:	f7ff b8a3 	b.w	172e <ull_conn_llcp+0x2d6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    25e8:	4855      	ldr	r0, [pc, #340]	; (2740 <ull_conn_llcp+0x12e8>)
    25ea:	f00e f93d 	bl	10868 <mem_acquire>
	if (tx) {
    25ee:	4680      	mov	r8, r0
    25f0:	2800      	cmp	r0, #0
    25f2:	f43f aba6 	beq.w	1d42 <ull_conn_llcp+0x8ea>
		conn->llcp_feature.ack--;
    25f6:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		conn->llcp_feature.features_conn = LL_FEAT;
    25fa:	4a58      	ldr	r2, [pc, #352]	; (275c <ull_conn_llcp+0x1304>)
    25fc:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
		conn->llcp_feature.ack--;
    2600:	3b01      	subs	r3, #1
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    2602:	2209      	movs	r2, #9
		conn->llcp_feature.ack--;
    2604:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    2608:	7142      	strb	r2, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    260a:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    260e:	7903      	ldrb	r3, [r0, #4]
		pdu->llctrl.opcode = !conn->lll.role ?
    2610:	2a00      	cmp	r2, #0
    2612:	bfac      	ite	ge
    2614:	2208      	movge	r2, #8
    2616:	220e      	movlt	r2, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2618:	f043 0303 	orr.w	r3, r3, #3
		pdu->llctrl.opcode = !conn->lll.role ?
    261c:	71c2      	strb	r2, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    261e:	2208      	movs	r2, #8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2620:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    2622:	4639      	mov	r1, r7
    2624:	4410      	add	r0, r2
    2626:	f020 f8a6 	bl	22776 <memset>
		sys_put_le24(conn->llcp_feature.features_conn,
    262a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	dst[0] = val;
    262e:	f888 3008 	strb.w	r3, [r8, #8]
	dst[1] = val >> 8;
    2632:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    2636:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    2638:	f888 2009 	strb.w	r2, [r8, #9]
	dst[2] = val >> 16;
    263c:	f888 300a 	strb.w	r3, [r8, #10]
	    conn->tx_head &&
    2640:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    2644:	2b00      	cmp	r3, #0
    2646:	f000 81d4 	beq.w	29f2 <ull_conn_llcp+0x159a>
	    !conn->llcp_enc.pause_tx &&
    264a:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    264e:	0797      	lsls	r7, r2, #30
    2650:	f100 81cf 	bmi.w	29f2 <ull_conn_llcp+0x159a>
	    !conn->llcp_phy.pause_tx &&
    2654:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2658:	07d0      	lsls	r0, r2, #31
    265a:	f100 81ca 	bmi.w	29f2 <ull_conn_llcp+0x159a>
		if (conn->tx_head == conn->tx_data) {
    265e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2662:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2664:	bf04      	itt	eq
    2666:	681a      	ldreq	r2, [r3, #0]
    2668:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    266c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2670:	2a00      	cmp	r2, #0
    2672:	f000 8467 	beq.w	2f44 <ull_conn_llcp+0x1aec>
	tx->next = conn->tx_ctrl_last->next;
    2676:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    267a:	681a      	ldr	r2, [r3, #0]
    267c:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    2680:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
    2684:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    2688:	f8d8 3000 	ldr.w	r3, [r8]
	if (!tx->next) {
    268c:	2b00      	cmp	r3, #0
    268e:	f000 83c7 	beq.w	2e20 <ull_conn_llcp+0x19c8>
		conn->procedure_expire = conn->procedure_reload;
    2692:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    2696:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    269a:	f7ff bb52 	b.w	1d42 <ull_conn_llcp+0x8ea>
		conn->tx_data_last = tx;
    269e:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    26a2:	f7ff baa9 	b.w	1bf8 <ull_conn_llcp+0x7a0>
		if (!conn->tx_ctrl) {
    26a6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    26aa:	2a00      	cmp	r2, #0
    26ac:	f47f ad06 	bne.w	20bc <ull_conn_llcp+0xc64>
			tx->next = conn->tx_head;
    26b0:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    26b4:	e9c4 886c 	strd	r8, r8, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    26b8:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    26bc:	e509      	b.n	20d2 <ull_conn_llcp+0xc7a>
		if (!conn->tx_ctrl) {
    26be:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    26c2:	2a00      	cmp	r2, #0
    26c4:	f47f ac30 	bne.w	1f28 <ull_conn_llcp+0xad0>
			tx->next = conn->tx_head;
    26c8:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    26ca:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    26ce:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    26d2:	e431      	b.n	1f38 <ull_conn_llcp+0xae0>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    26d4:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    26d8:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    26dc:	930b      	str	r3, [sp, #44]	; 0x2c
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    26de:	f3c5 0182 	ubfx	r1, r5, #2, #3
    26e2:	f361 0202 	bfi	r2, r1, #0, #3
    26e6:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    26ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    26ec:	f013 fba2 	bl	15e34 <calc_eff_time>
    26f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    26f2:	4607      	mov	r7, r0
    26f4:	f7ff b8fd 	b.w	18f2 <ull_conn_llcp+0x49a>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    26f8:	f894 7198 	ldrb.w	r7, [r4, #408]	; 0x198
    26fc:	f894 1199 	ldrb.w	r1, [r4, #409]	; 0x199
    2700:	42b9      	cmp	r1, r7
    2702:	f000 8243 	beq.w	2b8c <ull_conn_llcp+0x1734>
	switch (conn->llcp_length.state) {
    2706:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
    270a:	f000 0107 	and.w	r1, r0, #7
    270e:	2906      	cmp	r1, #6
    2710:	f200 8575 	bhi.w	31fe <ull_conn_llcp+0x1da6>
    2714:	f20f 0c04 	addw	ip, pc, #4
    2718:	f85c f021 	ldr.w	pc, [ip, r1, lsl #2]
    271c:	000027f1 	.word	0x000027f1
    2720:	0000147d 	.word	0x0000147d
    2724:	0000147d 	.word	0x0000147d
    2728:	0000147d 	.word	0x0000147d
    272c:	00002765 	.word	0x00002765
    2730:	00002765 	.word	0x00002765
    2734:	0000147d 	.word	0x0000147d
    2738:	1afd498d 	.word	0x1afd498d
    273c:	00000007 	.word	0x00000007
    2740:	20003c54 	.word	0x20003c54
    2744:	20000598 	.word	0x20000598
    2748:	000273f4 	.word	0x000273f4
    274c:	000271b0 	.word	0x000271b0
    2750:	00026ecc 	.word	0x00026ecc
    2754:	431bde83 	.word	0x431bde83
    2758:	d1b71759 	.word	0xd1b71759
    275c:	000149ff 	.word	0x000149ff
    2760:	3b9aca00 	.word	0x3b9aca00
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    2764:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
    2768:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    276c:	f000 0307 	and.w	r3, r0, #7
		lll->max_rx_time = conn->llcp_length.rx_time;
    2770:	f8b4 21a0 	ldrh.w	r2, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    2774:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		uint16_t tx_time = conn->llcp_length.tx_time;
    2778:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_time = conn->llcp_length.rx_time;
    277c:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    2780:	2b04      	cmp	r3, #4
    2782:	f000 83ea 	beq.w	2f5a <ull_conn_llcp+0x1b02>
			conn->llcp_length.state =
    2786:	4603      	mov	r3, r0
    2788:	2206      	movs	r2, #6
    278a:	f362 0302 	bfi	r3, r2, #0, #3
    278e:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    2792:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    2796:	2f00      	cmp	r7, #0
    2798:	f000 83bd 	beq.w	2f16 <ull_conn_llcp+0x1abe>
    279c:	6838      	ldr	r0, [r7, #0]
    279e:	2800      	cmp	r0, #0
    27a0:	f000 83b9 	beq.w	2f16 <ull_conn_llcp+0x1abe>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    27a4:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    27a6:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    27a8:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    27ac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    27b0:	f043 0303 	orr.w	r3, r3, #3
    27b4:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    27b6:	2202      	movs	r2, #2
		pdu_ctrl_rx->len =
    27b8:	2309      	movs	r3, #9
    27ba:	777b      	strb	r3, [r7, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    27bc:	713a      	strb	r2, [r7, #4]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    27be:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    27c2:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    27c6:	8439      	strh	r1, [r7, #32]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    27c8:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    27ca:	847a      	strh	r2, [r7, #34]	; 0x22
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    27cc:	77fb      	strb	r3, [r7, #31]
		rx->hdr.handle = conn->lll.handle;
    27ce:	f8a7 c006 	strh.w	ip, [r7, #6]
		ll_rx_put(rx->hdr.link, rx);
    27d2:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    27d4:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    27d8:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    27dc:	f012 fb60 	bl	14ea0 <ll_rx_put>
		ll_rx_sched();
    27e0:	f012 fb68 	bl	14eb4 <ll_rx_sched>
	break;
    27e4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    27e8:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    27ec:	f7fe be46 	b.w	147c <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    27f0:	48d0      	ldr	r0, [pc, #832]	; (2b34 <ull_conn_llcp+0x16dc>)
    27f2:	f00e f839 	bl	10868 <mem_acquire>
		if (!tx) {
    27f6:	2800      	cmp	r0, #0
    27f8:	f43f aaa3 	beq.w	1d42 <ull_conn_llcp+0x8ea>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    27fc:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    2800:	f8b4 119e 	ldrh.w	r1, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    2804:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    2808:	f8a4 10d6 	strh.w	r1, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    280c:	2701      	movs	r7, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    280e:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2812:	f367 0202 	bfi	r2, r7, #0, #3
		pdu_ctrl_tx->len =
    2816:	2709      	movs	r7, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2818:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    281c:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len =
    281e:	7147      	strb	r7, [r0, #5]
	if (!conn->common.fex_valid ||
    2820:	f894 70dc 	ldrb.w	r7, [r4, #220]	; 0xdc
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    2824:	8181      	strh	r1, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2826:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    282a:	2114      	movs	r1, #20
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    282c:	f04f 0c00 	mov.w	ip, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2830:	7102      	strb	r2, [r0, #4]
	if (!conn->common.fex_valid ||
    2832:	07ff      	lsls	r7, r7, #31
	feature_coded_phy = (conn->llcp_feature.features_conn &
    2834:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    2838:	71c1      	strb	r1, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    283a:	f06f 0104 	mvn.w	r1, #4
    283e:	f880 c009 	strb.w	ip, [r0, #9]
    2842:	7201      	strb	r1, [r0, #8]
	if (!conn->common.fex_valid ||
    2844:	f140 835c 	bpl.w	2f00 <ull_conn_llcp+0x1aa8>
    2848:	0511      	lsls	r1, r2, #20
    284a:	f140 841b 	bpl.w	3084 <ull_conn_llcp+0x1c2c>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    284e:	f244 2290 	movw	r2, #17040	; 0x4290
    2852:	4293      	cmp	r3, r2
    2854:	bf28      	it	cs
    2856:	4613      	movcs	r3, r2
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    2858:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    285c:	bf38      	it	cc
    285e:	f44f 73a4 	movcc.w	r3, #328	; 0x148
	    conn->tx_head &&
    2862:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    2866:	8142      	strh	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    2868:	81c3      	strh	r3, [r0, #14]
	if (
    286a:	2900      	cmp	r1, #0
    286c:	f000 832f 	beq.w	2ece <ull_conn_llcp+0x1a76>
	    !conn->llcp_enc.pause_tx &&
    2870:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    2874:	079b      	lsls	r3, r3, #30
    2876:	f100 832a 	bmi.w	2ece <ull_conn_llcp+0x1a76>
	    !conn->llcp_phy.pause_tx &&
    287a:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    287e:	07df      	lsls	r7, r3, #31
    2880:	f100 8325 	bmi.w	2ece <ull_conn_llcp+0x1a76>
		if (conn->tx_head == conn->tx_data) {
    2884:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    2888:	4299      	cmp	r1, r3
			conn->tx_data = conn->tx_data->next;
    288a:	bf04      	itt	eq
    288c:	680b      	ldreq	r3, [r1, #0]
    288e:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2892:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2896:	2b00      	cmp	r3, #0
    2898:	f000 8481 	beq.w	319e <ull_conn_llcp+0x1d46>
	tx->next = conn->tx_ctrl_last->next;
    289c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    28a0:	681a      	ldr	r2, [r3, #0]
    28a2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    28a4:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    28a6:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    28aa:	6803      	ldr	r3, [r0, #0]
    28ac:	2b00      	cmp	r3, #0
    28ae:	f47f aef0 	bne.w	2692 <ull_conn_llcp+0x123a>
		conn->tx_data_last = tx;
    28b2:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    28b6:	e6ec      	b.n	2692 <ull_conn_llcp+0x123a>
		LL_ASSERT(rx && rx->hdr.link);
    28b8:	4a9f      	ldr	r2, [pc, #636]	; (2b38 <ull_conn_llcp+0x16e0>)
    28ba:	49a0      	ldr	r1, [pc, #640]	; (2b3c <ull_conn_llcp+0x16e4>)
    28bc:	48a0      	ldr	r0, [pc, #640]	; (2b40 <ull_conn_llcp+0x16e8>)
    28be:	f640 632f 	movw	r3, #3631	; 0xe2f
    28c2:	f01d febd 	bl	20640 <printk>
    28c6:	4040      	eors	r0, r0
    28c8:	f380 8811 	msr	BASEPRI, r0
    28cc:	f04f 0003 	mov.w	r0, #3
    28d0:	df02      	svc	2
    28d2:	6828      	ldr	r0, [r5, #0]
    28d4:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    28d8:	f7ff b830 	b.w	193c <ull_conn_llcp+0x4e4>
		if (!conn->tx_ctrl) {
    28dc:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    28e0:	2b00      	cmp	r3, #0
    28e2:	f47f ac9a 	bne.w	221a <ull_conn_llcp+0xdc2>
			tx->next = conn->tx_head;
    28e6:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    28e8:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    28ec:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    28f0:	e49b      	b.n	222a <ull_conn_llcp+0xdd2>
		LL_ASSERT(rx && rx->hdr.link);
    28f2:	4a91      	ldr	r2, [pc, #580]	; (2b38 <ull_conn_llcp+0x16e0>)
    28f4:	4991      	ldr	r1, [pc, #580]	; (2b3c <ull_conn_llcp+0x16e4>)
    28f6:	4892      	ldr	r0, [pc, #584]	; (2b40 <ull_conn_llcp+0x16e8>)
    28f8:	f640 635b 	movw	r3, #3675	; 0xe5b
    28fc:	f01d fea0 	bl	20640 <printk>
    2900:	4040      	eors	r0, r0
    2902:	f380 8811 	msr	BASEPRI, r0
    2906:	f04f 0003 	mov.w	r0, #3
    290a:	df02      	svc	2
    290c:	6828      	ldr	r0, [r5, #0]
    290e:	f7ff b83f 	b.w	1990 <ull_conn_llcp+0x538>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    2912:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    2916:	463b      	mov	r3, r7
    2918:	462a      	mov	r2, r5
    291a:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    291e:	f204 105d 	addw	r0, r4, #349	; 0x15d
    2922:	f01a fb1f 	bl	1cf64 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    2926:	4639      	mov	r1, r7
    2928:	2210      	movs	r2, #16
    292a:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    292e:	f01f fef7 	bl	22720 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    2932:	2208      	movs	r2, #8
    2934:	f104 0198 	add.w	r1, r4, #152	; 0x98
    2938:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    293c:	f01f fef0 	bl	22720 <memcpy>
		lll->ccm_rx.direction = 0;
    2940:	f894 0097 	ldrb.w	r0, [r4, #151]	; 0x97
		lll->ccm_tx.direction = 1;
    2944:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
		lll->enc_rx = 1;
    2948:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    294c:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
		lll->enc_rx = 1;
    2950:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
    2954:	f365 0000 	bfi	r0, r5, #0, #1
		lll->ccm_tx.direction = 1;
    2958:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
    295c:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
		lll->enc_rx = 1;
    2960:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    2964:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    2968:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    296c:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    2970:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    2974:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    2978:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    297c:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
		lll->ccm_tx.counter = 0;
    2980:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2984:	4641      	mov	r1, r8
		lll->ccm_tx.counter = 0;
    2986:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		lll->ccm_tx.direction = 1;
    298a:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    298e:	4620      	mov	r0, r4
    2990:	f013 fcbe 	bl	16310 <start_enc_rsp_send>
	    conn->tx_head &&
    2994:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    2998:	2b00      	cmp	r3, #0
    299a:	d036      	beq.n	2a0a <ull_conn_llcp+0x15b2>
	    !conn->llcp_enc.pause_tx &&
    299c:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    29a0:	0795      	lsls	r5, r2, #30
    29a2:	d432      	bmi.n	2a0a <ull_conn_llcp+0x15b2>
	    !conn->llcp_phy.pause_tx &&
    29a4:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    29a8:	07d0      	lsls	r0, r2, #31
    29aa:	d42e      	bmi.n	2a0a <ull_conn_llcp+0x15b2>
		if (conn->tx_head == conn->tx_data) {
    29ac:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    29b0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    29b2:	bf04      	itt	eq
    29b4:	681a      	ldreq	r2, [r3, #0]
    29b6:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    29ba:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    29be:	2a00      	cmp	r2, #0
    29c0:	f47f ab0b 	bne.w	1fda <ull_conn_llcp+0xb82>
			tx->next = conn->tx_head->next;
    29c4:	681a      	ldr	r2, [r3, #0]
    29c6:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    29c8:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    29ca:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    29cc:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    29d0:	f7ff bb0b 	b.w	1fea <ull_conn_llcp+0xb92>
		switch (conn->llcp_cu.state) {
    29d4:	495b      	ldr	r1, [pc, #364]	; (2b44 <ull_conn_llcp+0x16ec>)
    29d6:	f7ff b9f1 	b.w	1dbc <ull_conn_llcp+0x964>
		if (!conn->tx_ctrl) {
    29da:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    29de:	2a00      	cmp	r2, #0
    29e0:	f47f a86f 	bne.w	1ac2 <ull_conn_llcp+0x66a>
			tx->next = conn->tx_head;
    29e4:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    29e6:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    29ea:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    29ee:	f7ff b870 	b.w	1ad2 <ull_conn_llcp+0x67a>
		if (!conn->tx_ctrl) {
    29f2:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    29f6:	2a00      	cmp	r2, #0
    29f8:	f47f ae3d 	bne.w	2676 <ull_conn_llcp+0x121e>
			tx->next = conn->tx_head;
    29fc:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    2a00:	e9c4 886c 	strd	r8, r8, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2a04:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    2a08:	e640      	b.n	268c <ull_conn_llcp+0x1234>
		if (!conn->tx_ctrl) {
    2a0a:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2a0e:	2a00      	cmp	r2, #0
    2a10:	f47f aae3 	bne.w	1fda <ull_conn_llcp+0xb82>
			tx->next = conn->tx_head;
    2a14:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2a16:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2a1a:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    2a1e:	f7ff bae4 	b.w	1fea <ull_conn_llcp+0xb92>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    2a22:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    2a26:	463b      	mov	r3, r7
    2a28:	462a      	mov	r2, r5
    2a2a:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    2a2e:	f204 105d 	addw	r0, r4, #349	; 0x15d
    2a32:	f01a fa97 	bl	1cf64 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    2a36:	4639      	mov	r1, r7
    2a38:	2210      	movs	r2, #16
    2a3a:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    2a3e:	f01f fe6f 	bl	22720 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    2a42:	2208      	movs	r2, #8
    2a44:	f104 0198 	add.w	r1, r4, #152	; 0x98
    2a48:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    2a4c:	f01f fe68 	bl	22720 <memcpy>
			lll->ccm_rx.direction = 1U;
    2a50:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    2a54:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    2a58:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    2a5c:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
			lll->ccm_rx.direction = 1U;
    2a60:	f042 0201 	orr.w	r2, r2, #1
			lll->ccm_tx.direction = 0U;
    2a64:	f365 0100 	bfi	r1, r5, #0, #1
			lll->enc_rx = 1U;
    2a68:	f043 0308 	orr.w	r3, r3, #8
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2a6c:	2001      	movs	r0, #1
			lll->ccm_rx.direction = 1U;
    2a6e:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    2a72:	f884 10b8 	strb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    2a76:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    2a7a:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    2a7e:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    2a82:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    2a86:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    2a8a:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    2a8e:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    2a92:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
			lll->ccm_tx.counter = 0U;
    2a96:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    2a9a:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2a9e:	7932      	ldrb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2aa0:	7170      	strb	r0, [r6, #5]
	    conn->tx_head &&
    2aa2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2aa6:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    2aaa:	2105      	movs	r1, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2aac:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
    2aae:	71f1      	strb	r1, [r6, #7]
	if (
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	f47f aa7c 	bne.w	1fae <ull_conn_llcp+0xb56>
		if (!conn->tx_ctrl) {
    2ab6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2aba:	2a00      	cmp	r2, #0
    2abc:	f47f aa8d 	bne.w	1fda <ull_conn_llcp+0xb82>
			tx->next = conn->tx_head;
    2ac0:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2ac2:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2ac6:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    2aca:	f7ff ba8d 	b.w	1fe8 <ull_conn_llcp+0xb90>
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
    2ace:	f640 0148 	movw	r1, #2120	; 0x848
    2ad2:	428b      	cmp	r3, r1
    2ad4:	bf28      	it	cs
    2ad6:	460b      	movcs	r3, r1
    2ad8:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    2adc:	bf38      	it	cc
    2ade:	f44f 73a4 	movcc.w	r3, #328	; 0x148
    2ae2:	f7ff bb7d 	b.w	21e0 <ull_conn_llcp+0xd88>
		LL_ASSERT(rx && rx->hdr.link);
    2ae6:	4a14      	ldr	r2, [pc, #80]	; (2b38 <ull_conn_llcp+0x16e0>)
    2ae8:	4914      	ldr	r1, [pc, #80]	; (2b3c <ull_conn_llcp+0x16e4>)
    2aea:	4815      	ldr	r0, [pc, #84]	; (2b40 <ull_conn_llcp+0x16e8>)
    2aec:	f640 43ff 	movw	r3, #3327	; 0xcff
    2af0:	f01d fda6 	bl	20640 <printk>
    2af4:	4040      	eors	r0, r0
    2af6:	f380 8811 	msr	BASEPRI, r0
    2afa:	f04f 0003 	mov.w	r0, #3
    2afe:	df02      	svc	2
    2b00:	6838      	ldr	r0, [r7, #0]
    2b02:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
    2b06:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
    2b0a:	f7ff bb0e 	b.w	212a <ull_conn_llcp+0xcd2>
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
    2b0e:	490e      	ldr	r1, [pc, #56]	; (2b48 <ull_conn_llcp+0x16f0>)
    2b10:	f7ff b954 	b.w	1dbc <ull_conn_llcp+0x964>
		LL_ASSERT(!retval);
    2b14:	4a08      	ldr	r2, [pc, #32]	; (2b38 <ull_conn_llcp+0x16e0>)
    2b16:	490d      	ldr	r1, [pc, #52]	; (2b4c <ull_conn_llcp+0x16f4>)
    2b18:	4809      	ldr	r0, [pc, #36]	; (2b40 <ull_conn_llcp+0x16e8>)
    2b1a:	f640 033a 	movw	r3, #2106	; 0x83a
    2b1e:	f01d fd8f 	bl	20640 <printk>
    2b22:	4040      	eors	r0, r0
    2b24:	f380 8811 	msr	BASEPRI, r0
    2b28:	f04f 0003 	mov.w	r0, #3
    2b2c:	df02      	svc	2
    2b2e:	f7ff b992 	b.w	1e56 <ull_conn_llcp+0x9fe>
    2b32:	bf00      	nop
    2b34:	20003c54 	.word	0x20003c54
    2b38:	000273f4 	.word	0x000273f4
    2b3c:	00027578 	.word	0x00027578
    2b40:	00026ecc 	.word	0x00026ecc
    2b44:	00003e01 	.word	0x00003e01
    2b48:	00019891 	.word	0x00019891
    2b4c:	000271b0 	.word	0x000271b0
	    (!feature_coded_phy && !feature_phy_2m)) {
    2b50:	05cf      	lsls	r7, r1, #23
    2b52:	f57f acdf 	bpl.w	2514 <ull_conn_llcp+0x10bc>
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M),
    2b56:	f5b6 6f85 	cmp.w	r6, #1064	; 0x428
    2b5a:	bf28      	it	cs
    2b5c:	f44f 6685 	movcs.w	r6, #1064	; 0x428
    2b60:	f5b6 7fa4 	cmp.w	r6, #328	; 0x148
    2b64:	4632      	mov	r2, r6
    2b66:	bf38      	it	cc
    2b68:	f44f 72a4 	movcc.w	r2, #328	; 0x148
    2b6c:	920a      	str	r2, [sp, #40]	; 0x28
    2b6e:	f44f 6985 	mov.w	r9, #1064	; 0x428
    2b72:	f7fe beb8 	b.w	18e6 <ull_conn_llcp+0x48e>
			if (!conn->llcp_length.cache.tx_octets) {
    2b76:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    2b7a:	2a00      	cmp	r2, #0
    2b7c:	f040 8165 	bne.w	2e4a <ull_conn_llcp+0x19f2>
				conn->llcp_length.ack = conn->llcp_length.req;
    2b80:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    2b84:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    2b88:	f7ff bac6 	b.w	2118 <ull_conn_llcp+0xcc0>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    2b8c:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    2b90:	f894 11a9 	ldrb.w	r1, [r4, #425]	; 0x1a9
    2b94:	4299      	cmp	r1, r3
    2b96:	f43e ac76 	beq.w	1486 <ull_conn_llcp+0x2e>
	switch (conn->llcp_phy.state) {
    2b9a:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    2b9e:	f001 0003 	and.w	r0, r1, #3
    2ba2:	2803      	cmp	r0, #3
    2ba4:	f000 827f 	beq.w	30a6 <ull_conn_llcp+0x1c4e>
    2ba8:	2800      	cmp	r0, #0
    2baa:	f47e ac6c 	bne.w	1486 <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2bae:	48d1      	ldr	r0, [pc, #836]	; (2ef4 <ull_conn_llcp+0x1a9c>)
    2bb0:	f00d fe5a 	bl	10868 <mem_acquire>
		if (!tx) {
    2bb4:	4601      	mov	r1, r0
    2bb6:	2800      	cmp	r0, #0
    2bb8:	f43f a8c3 	beq.w	1d42 <ull_conn_llcp+0x8ea>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2bbc:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2bc0:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2bc4:	f894 71ab 	ldrb.w	r7, [r4, #427]	; 0x1ab
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2bc8:	2001      	movs	r0, #1
    2bca:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2bce:	f3c3 0082 	ubfx	r0, r3, #2, #3
    2bd2:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2bd6:	f3c3 1042 	ubfx	r0, r3, #5, #3
    2bda:	f360 1206 	bfi	r2, r0, #4, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2bde:	f3c7 0740 	ubfx	r7, r7, #1, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2be2:	7908      	ldrb	r0, [r1, #4]
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2be4:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2be8:	f367 02c3 	bfi	r2, r7, #3, #1
    2bec:	f884 21ac 	strb.w	r2, [r4, #428]	; 0x1ac
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2bf0:	f3c3 0c82 	ubfx	ip, r3, #2, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2bf4:	f040 0003 	orr.w	r0, r0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2bf8:	f3c3 1342 	ubfx	r3, r3, #5, #3
		pdu_ctrl_tx->len =
    2bfc:	2703      	movs	r7, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2bfe:	2216      	movs	r2, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2c00:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2c02:	71ca      	strb	r2, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
    2c04:	f881 c008 	strb.w	ip, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    2c08:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->len =
    2c0a:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2c0c:	2200      	movs	r2, #0
    2c0e:	4620      	mov	r0, r4
    2c10:	f013 f962 	bl	15ed8 <ctrl_tx_pause_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    2c14:	e53d      	b.n	2692 <ull_conn_llcp+0x123a>
		conn->tx_data_last = tx;
    2c16:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    2c1a:	f7ff b9e9 	b.w	1ff0 <ull_conn_llcp+0xb98>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2c1e:	4593      	cmp	fp, r2
    2c20:	f47e aea0 	bne.w	1964 <ull_conn_llcp+0x50c>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2c24:	2303      	movs	r3, #3
    2c26:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    2c28:	4629      	mov	r1, r5
    2c2a:	f012 f939 	bl	14ea0 <ll_rx_put>
				rx = conn->llcp_rx;
    2c2e:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
				LL_ASSERT(rx && rx->hdr.link);
    2c32:	2d00      	cmp	r5, #0
    2c34:	f000 8217 	beq.w	3066 <ull_conn_llcp+0x1c0e>
    2c38:	6828      	ldr	r0, [r5, #0]
    2c3a:	2800      	cmp	r0, #0
    2c3c:	f000 8213 	beq.w	3066 <ull_conn_llcp+0x1c0e>
				conn->llcp_rx = rx->hdr.link->mem;
    2c40:	6843      	ldr	r3, [r0, #4]
    2c42:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2c46:	2303      	movs	r3, #3
    2c48:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    2c4a:	4629      	mov	r1, r5
    2c4c:	f012 f928 	bl	14ea0 <ll_rx_put>
			ll_rx_sched();
    2c50:	f012 f930 	bl	14eb4 <ll_rx_sched>
			return;
    2c54:	f7fe bc17 	b.w	1486 <ull_conn_llcp+0x2e>
			conn->llcp.phy_upd_ind.instant = event_counter +
    2c58:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2c5a:	441e      	add	r6, r3
							 lll->latency +
    2c5c:	1db3      	adds	r3, r6, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
    2c5e:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
    2c62:	f012 f94b 	bl	14efc <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    2c66:	682b      	ldr	r3, [r5, #0]
    2c68:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2c6c:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    2c6e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
			rx = ll_pdu_rx_alloc();
    2c72:	f012 f943 	bl	14efc <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    2c76:	6803      	ldr	r3, [r0, #0]
    2c78:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2c7c:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    2c7e:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    2c82:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    2c86:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    2c8a:	f3c3 0782 	ubfx	r7, r3, #2, #3
    2c8e:	095b      	lsrs	r3, r3, #5
    2c90:	f7ff b9e7 	b.w	2062 <ull_conn_llcp+0xc0a>
		LL_ASSERT(0);
    2c94:	f640 331e 	movw	r3, #2846	; 0xb1e
		LL_ASSERT(0);
    2c98:	4a97      	ldr	r2, [pc, #604]	; (2ef8 <ull_conn_llcp+0x1aa0>)
    2c9a:	4998      	ldr	r1, [pc, #608]	; (2efc <ull_conn_llcp+0x1aa4>)
    2c9c:	e402      	b.n	24a4 <ull_conn_llcp+0x104c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2c9e:	4895      	ldr	r0, [pc, #596]	; (2ef4 <ull_conn_llcp+0x1a9c>)
    2ca0:	f00d fde2 	bl	10868 <mem_acquire>
		if (tx) {
    2ca4:	2800      	cmp	r0, #0
    2ca6:	f43f a84c 	beq.w	1d42 <ull_conn_llcp+0x8ea>
			conn->llcp_version.ack--;
    2caa:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
			conn->llcp_version.tx = 1U;
    2cae:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
			conn->llcp_version.ack--;
    2cb2:	3a01      	subs	r2, #1
    2cb4:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2cb8:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
    2cba:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
    2cbe:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
    2cc0:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2cc4:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
    2cc8:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
    2cca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2cce:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.version_ind.version_number =
    2cd0:	210b      	movs	r1, #11
			pdu->llctrl.version_ind.company_id = cid;
    2cd2:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
    2cd6:	270c      	movs	r7, #12
			pdu->llctrl.version_ind.version_number =
    2cd8:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    2cda:	7242      	strb	r2, [r0, #9]
    2cdc:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
    2cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			pdu->llctrl.opcode =
    2ce2:	71c7      	strb	r7, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
    2ce4:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    2ce6:	72c2      	strb	r2, [r0, #11]
    2ce8:	7302      	strb	r2, [r0, #12]
	if (
    2cea:	2b00      	cmp	r3, #0
    2cec:	f000 80c6 	beq.w	2e7c <ull_conn_llcp+0x1a24>
	    !conn->llcp_enc.pause_tx &&
    2cf0:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2cf4:	0797      	lsls	r7, r2, #30
    2cf6:	f100 80c1 	bmi.w	2e7c <ull_conn_llcp+0x1a24>
	    !conn->llcp_phy.pause_tx &&
    2cfa:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2cfe:	07d1      	lsls	r1, r2, #31
    2d00:	f100 80bc 	bmi.w	2e7c <ull_conn_llcp+0x1a24>
		if (conn->tx_head == conn->tx_data) {
    2d04:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2d08:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2d0a:	bf04      	itt	eq
    2d0c:	681a      	ldreq	r2, [r3, #0]
    2d0e:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2d12:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2d16:	2a00      	cmp	r2, #0
    2d18:	f47f adc0 	bne.w	289c <ull_conn_llcp+0x1444>
			tx->next = conn->tx_head->next;
    2d1c:	681a      	ldr	r2, [r3, #0]
    2d1e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2d20:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    2d22:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2d26:	e5c0      	b.n	28aa <ull_conn_llcp+0x1452>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2d28:	4641      	mov	r1, r8
    2d2a:	4620      	mov	r0, r4
    2d2c:	f013 faf0 	bl	16310 <start_enc_rsp_send>
	    conn->tx_head &&
    2d30:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    2d34:	b383      	cbz	r3, 2d98 <ull_conn_llcp+0x1940>
	    !conn->llcp_enc.pause_tx &&
    2d36:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2d3a:	0792      	lsls	r2, r2, #30
    2d3c:	d42c      	bmi.n	2d98 <ull_conn_llcp+0x1940>
	    !conn->llcp_phy.pause_tx &&
    2d3e:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2d42:	07d7      	lsls	r7, r2, #31
    2d44:	d428      	bmi.n	2d98 <ull_conn_llcp+0x1940>
		if (conn->tx_head == conn->tx_data) {
    2d46:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2d4a:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2d4c:	bf04      	itt	eq
    2d4e:	681a      	ldreq	r2, [r3, #0]
    2d50:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2d54:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2d58:	2a00      	cmp	r2, #0
    2d5a:	f000 817e 	beq.w	305a <ull_conn_llcp+0x1c02>
	tx->next = conn->tx_ctrl_last->next;
    2d5e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2d62:	681a      	ldr	r2, [r3, #0]
    2d64:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    2d66:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    2d68:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    2d6c:	6833      	ldr	r3, [r6, #0]
    2d6e:	2b00      	cmp	r3, #0
    2d70:	f000 808f 	beq.w	2e92 <ull_conn_llcp+0x1a3a>
		conn->llcp_enc.pause_rx = 0U;
    2d74:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    2d78:	f023 0303 	bic.w	r3, r3, #3
    2d7c:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
    2d80:	f7ff b936 	b.w	1ff0 <ull_conn_llcp+0xb98>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    2d84:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
    2d86:	7235      	strb	r5, [r6, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    2d88:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    2d8a:	2702      	movs	r7, #2
    2d8c:	f7ff b906 	b.w	1f9c <ull_conn_llcp+0xb44>
		conn->tx_data_last = tx;
    2d90:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    2d94:	f7ff ba4c 	b.w	2230 <ull_conn_llcp+0xdd8>
		if (!conn->tx_ctrl) {
    2d98:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2d9c:	2a00      	cmp	r2, #0
    2d9e:	d1de      	bne.n	2d5e <ull_conn_llcp+0x1906>
			tx->next = conn->tx_head;
    2da0:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2da2:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2da6:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    2daa:	e7df      	b.n	2d6c <ull_conn_llcp+0x1914>
				(void)ll_pdu_rx_alloc();
    2dac:	f012 f8a6 	bl	14efc <ll_pdu_rx_alloc>
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2db0:	230f      	movs	r3, #15
				rx->hdr.handle = lll->handle;
    2db2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
				upd->status = 0U;
    2db4:	772f      	strb	r7, [r5, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2db6:	712b      	strb	r3, [r5, #4]
				upd->tx = lll->phy_tx;
    2db8:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
    2dbc:	6828      	ldr	r0, [r5, #0]
				rx->hdr.handle = lll->handle;
    2dbe:	80ea      	strh	r2, [r5, #6]
				upd->tx = lll->phy_tx;
    2dc0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2dc4:	776b      	strb	r3, [r5, #29]
				upd->rx = lll->phy_rx;
    2dc6:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    2dca:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2dce:	77ab      	strb	r3, [r5, #30]
				ll_rx_put(rx->hdr.link, rx);
    2dd0:	4629      	mov	r1, r5
    2dd2:	f012 f865 	bl	14ea0 <ll_rx_put>
				ll_rx_sched();
    2dd6:	f012 f86d 	bl	14eb4 <ll_rx_sched>
    2dda:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    2dde:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    2de2:	f3c3 0782 	ubfx	r7, r3, #2, #3
    2de6:	095b      	lsrs	r3, r3, #5
    2de8:	f7ff b93b 	b.w	2062 <ull_conn_llcp+0xc0a>
	switch (conn->llcp_conn_param.state) {
    2dec:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    2df0:	f003 0307 	and.w	r3, r3, #7
    2df4:	2b05      	cmp	r3, #5
    2df6:	f200 81e0 	bhi.w	31ba <ull_conn_llcp+0x1d62>
    2dfa:	a201      	add	r2, pc, #4	; (adr r2, 2e00 <ull_conn_llcp+0x19a8>)
    2dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2e00:	000023d9 	.word	0x000023d9
    2e04:	00002359 	.word	0x00002359
    2e08:	000022e9 	.word	0x000022e9
    2e0c:	00001487 	.word	0x00001487
    2e10:	00001487 	.word	0x00001487
    2e14:	00001487 	.word	0x00001487
		conn->tx_data_last = tx;
    2e18:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    2e1c:	f7fe be5c 	b.w	1ad8 <ull_conn_llcp+0x680>
    2e20:	f8c4 81c0 	str.w	r8, [r4, #448]	; 0x1c0
		conn->procedure_expire = conn->procedure_reload;
    2e24:	e435      	b.n	2692 <ull_conn_llcp+0x123a>
	    (!feature_coded_phy && !feature_phy_2m)) {
    2e26:	f41e 7f80 	tst.w	lr, #256	; 0x100
    2e2a:	f43f ae50 	beq.w	2ace <ull_conn_llcp+0x1676>
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M),
    2e2e:	f5b3 6f85 	cmp.w	r3, #1064	; 0x428
    2e32:	bf28      	it	cs
    2e34:	f44f 6385 	movcs.w	r3, #1064	; 0x428
    2e38:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    2e3c:	bf38      	it	cc
    2e3e:	f44f 73a4 	movcc.w	r3, #328	; 0x148
    2e42:	f44f 6185 	mov.w	r1, #1064	; 0x428
    2e46:	f7ff b9cb 	b.w	21e0 <ull_conn_llcp+0xd88>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2e4a:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.tx_time =
    2e4e:	f8b4 71a6 	ldrh.w	r7, [r4, #422]	; 0x1a6
				conn->llcp_length.tx_octets =
    2e52:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.cache.tx_octets = 0;
    2e56:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2e58:	f363 0002 	bfi	r0, r3, #0, #3
    2e5c:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    2e60:	f8a4 31a4 	strh.w	r3, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    2e64:	f8a4 71a2 	strh.w	r7, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2e68:	f7ff b956 	b.w	2118 <ull_conn_llcp+0xcc0>
			tx->next = conn->tx_head->next;
    2e6c:	681a      	ldr	r2, [r3, #0]
    2e6e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2e70:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    2e72:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2e74:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2e78:	f7fe bebb 	b.w	1bf2 <ull_conn_llcp+0x79a>
		if (!conn->tx_ctrl) {
    2e7c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2e80:	2a00      	cmp	r2, #0
    2e82:	f47f ad0b 	bne.w	289c <ull_conn_llcp+0x1444>
			tx->next = conn->tx_head;
    2e86:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2e88:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2e8c:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    2e90:	e50b      	b.n	28aa <ull_conn_llcp+0x1452>
		conn->tx_data_last = tx;
    2e92:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    2e96:	e76d      	b.n	2d74 <ull_conn_llcp+0x191c>
			tx->next = conn->tx_head->next;
    2e98:	681a      	ldr	r2, [r3, #0]
    2e9a:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2e9c:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    2e9e:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    2ea0:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    2ea4:	f7fe bffa 	b.w	1e9c <ull_conn_llcp+0xa44>
			tx->next = conn->tx_head->next;
    2ea8:	681a      	ldr	r2, [r3, #0]
    2eaa:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    2eae:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
    2eb2:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    2eb6:	e9c4 886d 	strd	r8, r8, [r4, #436]	; 0x1b4
    2eba:	f7ff b90a 	b.w	20d2 <ull_conn_llcp+0xc7a>
			tx->next = conn->tx_head->next;
    2ebe:	681a      	ldr	r2, [r3, #0]
    2ec0:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2ec2:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    2ec4:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    2ec6:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    2eca:	f7ff b835 	b.w	1f38 <ull_conn_llcp+0xae0>
		if (!conn->tx_ctrl) {
    2ece:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	f47f ace2 	bne.w	289c <ull_conn_llcp+0x1444>
			tx->next = conn->tx_head;
    2ed8:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
    2eda:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2ede:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    2ee2:	e4e2      	b.n	28aa <ull_conn_llcp+0x1452>
			tx->next = conn->tx_head->next;
    2ee4:	681a      	ldr	r2, [r3, #0]
    2ee6:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2ee8:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    2eea:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    2eec:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    2ef0:	f7fe bdef 	b.w	1ad2 <ull_conn_llcp+0x67a>
    2ef4:	20003c54 	.word	0x20003c54
    2ef8:	000273f4 	.word	0x000273f4
    2efc:	00026f3c 	.word	0x00026f3c
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
    2f00:	f640 0248 	movw	r2, #2120	; 0x848
    2f04:	4293      	cmp	r3, r2
    2f06:	bf28      	it	cs
    2f08:	4613      	movcs	r3, r2
    2f0a:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    2f0e:	bf38      	it	cc
    2f10:	f44f 73a4 	movcc.w	r3, #328	; 0x148
    2f14:	e4a5      	b.n	2862 <ull_conn_llcp+0x140a>
		LL_ASSERT(rx && rx->hdr.link);
    2f16:	4abb      	ldr	r2, [pc, #748]	; (3204 <ull_conn_llcp+0x1dac>)
    2f18:	49bb      	ldr	r1, [pc, #748]	; (3208 <ull_conn_llcp+0x1db0>)
    2f1a:	48bc      	ldr	r0, [pc, #752]	; (320c <ull_conn_llcp+0x1db4>)
    2f1c:	f640 43ff 	movw	r3, #3327	; 0xcff
    2f20:	f01d fb8e 	bl	20640 <printk>
    2f24:	4040      	eors	r0, r0
    2f26:	f380 8811 	msr	BASEPRI, r0
    2f2a:	f04f 0003 	mov.w	r0, #3
    2f2e:	df02      	svc	2
    2f30:	6838      	ldr	r0, [r7, #0]
    2f32:	e437      	b.n	27a4 <ull_conn_llcp+0x134c>
			tx->next = conn->tx_head->next;
    2f34:	6813      	ldr	r3, [r2, #0]
    2f36:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    2f38:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
    2f3a:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
    2f3c:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2f40:	f7ff b973 	b.w	222a <ull_conn_llcp+0xdd2>
			tx->next = conn->tx_head->next;
    2f44:	681a      	ldr	r2, [r3, #0]
    2f46:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    2f4a:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
    2f4e:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    2f52:	e9c4 886d 	strd	r8, r8, [r4, #436]	; 0x1b4
    2f56:	f7ff bb99 	b.w	268c <ull_conn_llcp+0x1234>
			if (!conn->llcp_length.cache.tx_octets) {
    2f5a:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    2f5e:	2a00      	cmp	r2, #0
    2f60:	f040 80e3 	bne.w	312a <ull_conn_llcp+0x1cd2>
				conn->llcp_length.ack = conn->llcp_length.req;
    2f64:	f884 7199 	strb.w	r7, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    2f68:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    2f6c:	e411      	b.n	2792 <ull_conn_llcp+0x133a>
			tx->next = conn->tx_head->next;
    2f6e:	681a      	ldr	r2, [r3, #0]
    2f70:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2f72:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    2f74:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    2f78:	f7ff b836 	b.w	1fe8 <ull_conn_llcp+0xb90>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2f7c:	48a4      	ldr	r0, [pc, #656]	; (3210 <ull_conn_llcp+0x1db8>)
    2f7e:	f00d fc73 	bl	10868 <mem_acquire>
		if (!tx) {
    2f82:	4601      	mov	r1, r0
    2f84:	2800      	cmp	r0, #0
    2f86:	f43e aedc 	beq.w	1d42 <ull_conn_llcp+0x8ea>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2f8a:	7903      	ldrb	r3, [r0, #4]
    2f8c:	f043 0303 	orr.w	r3, r3, #3
    2f90:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2f92:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2f94:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2f96:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2f98:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2f9a:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2f9c:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
    2f9e:	f894 3173 	ldrb.w	r3, [r4, #371]	; 0x173
    2fa2:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2fa4:	2200      	movs	r2, #0
    2fa6:	4620      	mov	r0, r4
    2fa8:	f012 ff96 	bl	15ed8 <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2fac:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    2fb0:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
    2fb4:	2300      	movs	r3, #0
    2fb6:	f8c9 3000 	str.w	r3, [r9]
		return;
    2fba:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    2fbe:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    2fc2:	f7fe ba5b 	b.w	147c <ull_conn_llcp+0x24>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2fc6:	4892      	ldr	r0, [pc, #584]	; (3210 <ull_conn_llcp+0x1db8>)
    2fc8:	f00d fc4e 	bl	10868 <mem_acquire>
	if (!tx) {
    2fcc:	4601      	mov	r1, r0
    2fce:	2800      	cmp	r0, #0
    2fd0:	f43e aeb7 	beq.w	1d42 <ull_conn_llcp+0x8ea>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2fd4:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2fd6:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2fd8:	f043 0303 	orr.w	r3, r3, #3
    2fdc:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2fde:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
    2fe0:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	rsp->interval_max =
    2fe4:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rsp->latency =
    2fe8:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	rsp->interval_min =
    2fec:	810a      	strh	r2, [r1, #8]
	rsp->timeout =
    2fee:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	rsp->interval_max =
    2ff2:	814b      	strh	r3, [r1, #10]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2ff4:	2310      	movs	r3, #16
	rsp->latency =
    2ff6:	8188      	strh	r0, [r1, #12]
	rsp->timeout =
    2ff8:	81ca      	strh	r2, [r1, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2ffa:	71cb      	strb	r3, [r1, #7]
	rsp->preferred_periodicity =
    2ffc:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
    3000:	740b      	strb	r3, [r1, #16]
	rsp->reference_conn_event_count =
    3002:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    3006:	f8b4 0180 	ldrh.w	r0, [r4, #384]	; 0x180
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    300a:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
	rsp->reference_conn_event_count =
    300e:	f8a1 3011 	strh.w	r3, [r1, #17]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    3012:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    3016:	f8a1 0013 	strh.w	r0, [r1, #19]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    301a:	f8b4 0186 	ldrh.w	r0, [r4, #390]	; 0x186
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    301e:	f8a1 2015 	strh.w	r2, [r1, #21]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    3022:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    3026:	f8a1 3017 	strh.w	r3, [r1, #23]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    302a:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    302e:	f8a1 301d 	strh.w	r3, [r1, #29]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    3032:	f8a1 0019 	strh.w	r0, [r1, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    3036:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
    303a:	4620      	mov	r0, r4
    303c:	463a      	mov	r2, r7
    303e:	f012 ff4b 	bl	15ed8 <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    3042:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    3046:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
    304a:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    304e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    3052:	f8c9 7000 	str.w	r7, [r9]
}
    3056:	f7fe ba11 	b.w	147c <ull_conn_llcp+0x24>
			tx->next = conn->tx_head->next;
    305a:	681a      	ldr	r2, [r3, #0]
    305c:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    305e:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    3060:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    3064:	e682      	b.n	2d6c <ull_conn_llcp+0x1914>
				LL_ASSERT(rx && rx->hdr.link);
    3066:	4a67      	ldr	r2, [pc, #412]	; (3204 <ull_conn_llcp+0x1dac>)
    3068:	4967      	ldr	r1, [pc, #412]	; (3208 <ull_conn_llcp+0x1db0>)
    306a:	4868      	ldr	r0, [pc, #416]	; (320c <ull_conn_llcp+0x1db4>)
    306c:	f640 633e 	movw	r3, #3646	; 0xe3e
    3070:	f01d fae6 	bl	20640 <printk>
    3074:	4040      	eors	r0, r0
    3076:	f380 8811 	msr	BASEPRI, r0
    307a:	f04f 0003 	mov.w	r0, #3
    307e:	df02      	svc	2
    3080:	6828      	ldr	r0, [r5, #0]
    3082:	e5dd      	b.n	2c40 <ull_conn_llcp+0x17e8>
	    (!feature_coded_phy && !feature_phy_2m)) {
    3084:	05d2      	lsls	r2, r2, #23
    3086:	f57f af3b 	bpl.w	2f00 <ull_conn_llcp+0x1aa8>
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M),
    308a:	f5b3 6f85 	cmp.w	r3, #1064	; 0x428
    308e:	bf28      	it	cs
    3090:	f44f 6385 	movcs.w	r3, #1064	; 0x428
    3094:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    3098:	bf38      	it	cc
    309a:	f44f 73a4 	movcc.w	r3, #328	; 0x148
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_2M),
    309e:	f44f 6285 	mov.w	r2, #1064	; 0x428
    30a2:	f7ff bbde 	b.w	2862 <ull_conn_llcp+0x140a>
		if (conn->llcp_phy.tx & BIT(1)) {
    30a6:	0708      	lsls	r0, r1, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    30a8:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
		if (conn->llcp_phy.tx & BIT(1)) {
    30ac:	f3c1 0382 	ubfx	r3, r1, #2, #3
    30b0:	d553      	bpl.n	315a <ull_conn_llcp+0x1d02>
			conn->llcp_phy.tx = BIT(1);
    30b2:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    30b6:	2102      	movs	r1, #2
    30b8:	f361 0384 	bfi	r3, r1, #2, #3
    30bc:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.rx & BIT(1)) {
    30c0:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    30c4:	065f      	lsls	r7, r3, #25
    30c6:	ea4f 1153 	mov.w	r1, r3, lsr #5
    30ca:	d53e      	bpl.n	314a <ull_conn_llcp+0x1cf2>
			conn->llcp_phy.rx = BIT(1);
    30cc:	2102      	movs	r1, #2
    30ce:	f361 1347 	bfi	r3, r1, #5, #3
    30d2:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    30d6:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    30da:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    30de:	f894 7065 	ldrb.w	r7, [r4, #101]	; 0x65
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    30e2:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    30e6:	f3c3 0082 	ubfx	r0, r3, #2, #3
    30ea:	f00c 0c07 	and.w	ip, ip, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    30ee:	f007 0707 	and.w	r7, r7, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    30f2:	f3c1 0180 	ubfx	r1, r1, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    30f6:	4584      	cmp	ip, r0
    30f8:	bf08      	it	eq
    30fa:	2000      	moveq	r0, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    30fc:	0049      	lsls	r1, r1, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    30fe:	ebb7 1f53 	cmp.w	r7, r3, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    3102:	f041 0101 	orr.w	r1, r1, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3106:	ea4f 1353 	mov.w	r3, r3, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    310a:	bf08      	it	eq
    310c:	2300      	moveq	r3, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    310e:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    3112:	ea41 0180 	orr.w	r1, r1, r0, lsl #2
		conn->llcp_ack -= 2U;
    3116:	1e93      	subs	r3, r2, #2
		conn->llcp_type = LLCP_PHY_UPD;
    3118:	2006      	movs	r0, #6
		conn->llcp_ack -= 2U;
    311a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->llcp.phy_upd_ind.initiate = 1U;
    311e:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
    3122:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    3126:	f7fe b9d7 	b.w	14d8 <ull_conn_llcp+0x80>
				conn->llcp_length.cache.tx_octets = 0;
    312a:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    312c:	4603      	mov	r3, r0
    312e:	f361 0302 	bfi	r3, r1, #0, #3
				conn->llcp_length.tx_octets =
    3132:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.tx_time =
    3136:	f8b4 21a6 	ldrh.w	r2, [r4, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    313a:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    313e:	f8a4 11a4 	strh.w	r1, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    3142:	f8a4 21a2 	strh.w	r2, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    3146:	f7ff bb24 	b.w	2792 <ull_conn_llcp+0x133a>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    314a:	07c8      	lsls	r0, r1, #31
    314c:	d50f      	bpl.n	316e <ull_conn_llcp+0x1d16>
			conn->llcp_phy.rx = BIT(0);
    314e:	2101      	movs	r1, #1
    3150:	f361 1347 	bfi	r3, r1, #5, #3
    3154:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    3158:	e7bd      	b.n	30d6 <ull_conn_llcp+0x1c7e>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    315a:	07d9      	lsls	r1, r3, #31
    315c:	d510      	bpl.n	3180 <ull_conn_llcp+0x1d28>
			conn->llcp_phy.tx = BIT(0);
    315e:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    3162:	2101      	movs	r1, #1
    3164:	f361 0384 	bfi	r3, r1, #2, #3
    3168:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    316c:	e7a8      	b.n	30c0 <ull_conn_llcp+0x1c68>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    316e:	f011 0104 	ands.w	r1, r1, #4
			conn->llcp_phy.rx = BIT(2);
    3172:	bf18      	it	ne
    3174:	2104      	movne	r1, #4
			conn->llcp_phy.rx = 0U;
    3176:	f361 1347 	bfi	r3, r1, #5, #3
    317a:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    317e:	e7aa      	b.n	30d6 <ull_conn_llcp+0x1c7e>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    3180:	f013 0304 	ands.w	r3, r3, #4
    3184:	d012      	beq.n	31ac <ull_conn_llcp+0x1d54>
			conn->llcp_phy.tx = BIT(2);
    3186:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    318a:	2104      	movs	r1, #4
    318c:	f361 0384 	bfi	r3, r1, #2, #3
    3190:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    3194:	e794      	b.n	30c0 <ull_conn_llcp+0x1c68>
				conn->llcp_conn_param.interval_max;
    3196:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    319a:	f7ff b900 	b.w	239e <ull_conn_llcp+0xf46>
			tx->next = conn->tx_head->next;
    319e:	680b      	ldr	r3, [r1, #0]
    31a0:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    31a2:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl_last = tx;
    31a4:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    31a8:	f7ff bb7f 	b.w	28aa <ull_conn_llcp+0x1452>
			conn->llcp_phy.tx = 0U;
    31ac:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    31b0:	f363 0184 	bfi	r1, r3, #2, #3
    31b4:	f884 11aa 	strb.w	r1, [r4, #426]	; 0x1aa
    31b8:	e782      	b.n	30c0 <ull_conn_llcp+0x1c68>
		LL_ASSERT(0);
    31ba:	4a12      	ldr	r2, [pc, #72]	; (3204 <ull_conn_llcp+0x1dac>)
    31bc:	4915      	ldr	r1, [pc, #84]	; (3214 <ull_conn_llcp+0x1dbc>)
    31be:	4813      	ldr	r0, [pc, #76]	; (320c <ull_conn_llcp+0x1db4>)
    31c0:	f640 432b 	movw	r3, #3115	; 0xc2b
    31c4:	f01d fa3c 	bl	20640 <printk>
    31c8:	4040      	eors	r0, r0
    31ca:	f380 8811 	msr	BASEPRI, r0
    31ce:	f04f 0003 	mov.w	r0, #3
    31d2:	df02      	svc	2
		break;
    31d4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    31d8:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    31dc:	f7fe b94e 	b.w	147c <ull_conn_llcp+0x24>
		LL_ASSERT(0);
    31e0:	4a08      	ldr	r2, [pc, #32]	; (3204 <ull_conn_llcp+0x1dac>)
    31e2:	490c      	ldr	r1, [pc, #48]	; (3214 <ull_conn_llcp+0x1dbc>)
    31e4:	4809      	ldr	r0, [pc, #36]	; (320c <ull_conn_llcp+0x1db4>)
    31e6:	f640 5327 	movw	r3, #3367	; 0xd27
    31ea:	f01d fa29 	bl	20640 <printk>
    31ee:	4040      	eors	r0, r0
    31f0:	f380 8811 	msr	BASEPRI, r0
    31f4:	f04f 0003 	mov.w	r0, #3
    31f8:	df02      	svc	2
		break;
    31fa:	f7fe b96d 	b.w	14d8 <ull_conn_llcp+0x80>
		LL_ASSERT(0);
    31fe:	f640 5327 	movw	r3, #3367	; 0xd27
    3202:	e549      	b.n	2c98 <ull_conn_llcp+0x1840>
    3204:	000273f4 	.word	0x000273f4
    3208:	00027578 	.word	0x00027578
    320c:	00026ecc 	.word	0x00026ecc
    3210:	20003c54 	.word	0x20003c54
    3214:	00026f3c 	.word	0x00026f3c

00003218 <ull_slave_setup>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param);
static void ticker_op_cb(uint32_t status, void *param);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    3218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t win_offset;
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	((struct lll_adv *)ftr->param)->conn = NULL;
    321c:	f8d2 c000 	ldr.w	ip, [r2]
{
    3220:	461d      	mov	r5, r3

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;
    3222:	f853 6b0c 	ldr.w	r6, [r3], #12
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    3226:	f8dc 9000 	ldr.w	r9, [ip]
{
    322a:	b095      	sub	sp, #84	; 0x54
    322c:	4617      	mov	r7, r2
	((struct lll_adv *)ftr->param)->conn = NULL;
    322e:	2200      	movs	r2, #0
{
    3230:	4686      	mov	lr, r0
	((struct lll_adv *)ftr->param)->conn = NULL;
    3232:	f8cc 2008 	str.w	r2, [ip, #8]

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    3236:	4618      	mov	r0, r3
{
    3238:	460c      	mov	r4, r1
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    323a:	2203      	movs	r2, #3
    323c:	312e      	adds	r1, #46	; 0x2e
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    323e:	f105 0a08 	add.w	sl, r5, #8
{
    3242:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    3246:	f105 081c 	add.w	r8, r5, #28
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    324a:	f01f fa69 	bl	22720 <memcpy>
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    324e:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    3252:	2204      	movs	r2, #4
    3254:	4650      	mov	r0, sl
    3256:	f01f fa63 	bl	22720 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    325a:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    325e:	2205      	movs	r2, #5
    3260:	4640      	mov	r0, r8
    3262:	f01f fa5d 	bl	22720 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    3266:	4640      	mov	r0, r8
    3268:	2105      	movs	r1, #5
    326a:	f00d fccb 	bl	10c04 <util_ones_count_get>
    326e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    3272:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    3276:	f360 0305 	bfi	r3, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    327a:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    327c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    3280:	d90a      	bls.n	3298 <ull_slave_setup+0x80>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    3282:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    3286:	f003 021f 	and.w	r2, r3, #31
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    328a:	3a05      	subs	r2, #5
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    328c:	f3c3 0104 	ubfx	r1, r3, #0, #5
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    3290:	2a0b      	cmp	r2, #11
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    3292:	f885 1022 	strb.w	r1, [r5, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    3296:	d902      	bls.n	329e <ull_slave_setup+0x86>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    3298:	b015      	add	sp, #84	; 0x54
    329a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    329e:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
	lll->interval = interval;
    32a2:	f8a5 8012 	strh.w	r8, [r5, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    32a6:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    32aa:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
	conn->slave.sca = pdu_adv->connect_ind.sca;
    32ae:	f896 10dc 	ldrb.w	r1, [r6, #220]	; 0xdc
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    32b2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->slave.sca = pdu_adv->connect_ind.sca;
    32b6:	095b      	lsrs	r3, r3, #5
    32b8:	f363 0184 	bfi	r1, r3, #2, #3
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    32bc:	82aa      	strh	r2, [r5, #20]
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    32be:	8e63      	ldrh	r3, [r4, #50]	; 0x32
	conn->slave.sca = pdu_adv->connect_ind.sca;
    32c0:	f886 10dc 	strb.w	r1, [r6, #220]	; 0xdc
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    32c4:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		(((lll_conn_ppm_local_get() +
    32c8:	f019 f886 	bl	1c3d8 <lll_conn_ppm_local_get>
    32cc:	4603      	mov	r3, r0
		   lll_conn_ppm_get(conn->slave.sca)) *
    32ce:	f896 00dc 	ldrb.w	r0, [r6, #220]	; 0xdc
		(((lll_conn_ppm_local_get() +
    32d2:	930b      	str	r3, [sp, #44]	; 0x2c
		   lll_conn_ppm_get(conn->slave.sca)) *
    32d4:	f3c0 0082 	ubfx	r0, r0, #2, #3
    32d8:	f019 f880 	bl	1c3dc <lll_conn_ppm_get>
		(((lll_conn_ppm_local_get() +
    32dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    32de:	f8df c328 	ldr.w	ip, [pc, #808]	; 3608 <ull_slave_setup+0x3f0>
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    32e2:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    32e6:	8aaa      	ldrh	r2, [r5, #20]
	conn_interval_us = interval * 1250U;
    32e8:	f240 4be2 	movw	fp, #1250	; 0x4e2
    32ec:	fb0b f808 	mul.w	r8, fp, r8
		(((lll_conn_ppm_local_get() +
    32f0:	4418      	add	r0, r3
		   lll_conn_ppm_get(conn->slave.sca)) *
    32f2:	fb08 f000 	mul.w	r0, r8, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    32f6:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    32fa:	f200 203f 	addw	r0, r0, #575	; 0x23f
    32fe:	fbac c000 	umull	ip, r0, ip, r0
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    3302:	ea4f 0c58 	mov.w	ip, r8, lsr #1
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    3306:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    3308:	fb0b f101 	mul.w	r1, fp, r1
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    330c:	f1ac 0c96 	sub.w	ip, ip, #150	; 0x96
	lll->slave.window_widening_periodic_us =
    3310:	62a8      	str	r0, [r5, #40]	; 0x28
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    3312:	f8c5 c02c 	str.w	ip, [r5, #44]	; 0x2c
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    3316:	63e9      	str	r1, [r5, #60]	; 0x3c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    3318:	8f21      	ldrh	r1, [r4, #56]	; 0x38
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    331a:	4bb1      	ldr	r3, [pc, #708]	; (35e0 <ull_slave_setup+0x3c8>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    331c:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    3320:	f242 7c10 	movw	ip, #10000	; 0x2710
    3324:	fb0c 8101 	mla	r1, ip, r1, r8
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    3328:	48ae      	ldr	r0, [pc, #696]	; (35e4 <ull_slave_setup+0x3cc>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    332a:	4443      	add	r3, r8
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    332c:	f102 0c06 	add.w	ip, r2, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    3330:	3901      	subs	r1, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    3332:	fbb3 f3f8 	udiv	r3, r3, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    3336:	fbb1 f1f8 	udiv	r1, r1, r8
    333a:	f8a6 10c6 	strh.w	r1, [r6, #198]	; 0xc6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    333e:	b299      	uxth	r1, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    3340:	4561      	cmp	r1, ip
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    3342:	4440      	add	r0, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    3344:	f8a6 10d2 	strh.w	r1, [r6, #210]	; 0xd2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    3348:	fbb0 f0f8 	udiv	r0, r0, r8
    334c:	f8a6 00ca 	strh.w	r0, [r6, #202]	; 0xca
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    3350:	dd02      	ble.n	3358 <ull_slave_setup+0x140>
			     (conn->apto_reload - (lll->latency + 6)) :
    3352:	1a89      	subs	r1, r1, r2
    3354:	3906      	subs	r1, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    3356:	b289      	uxth	r1, r1
    3358:	f8a6 10ce 	strh.w	r1, [r6, #206]	; 0xce
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    335c:	2204      	movs	r2, #4
    335e:	4651      	mov	r1, sl
    3360:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    3364:	f01f f9dc 	bl	22720 <memcpy>
	peer_addr_type = pdu_adv->tx_addr;
    3368:	7f23      	ldrb	r3, [r4, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    336a:	f104 0a1e 	add.w	sl, r4, #30
    336e:	4651      	mov	r1, sl
	peer_addr_type = pdu_adv->tx_addr;
    3370:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    3374:	2206      	movs	r2, #6
    3376:	a812      	add	r0, sp, #72	; 0x48
	peer_addr_type = pdu_adv->tx_addr;
    3378:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    337c:	f01f f9d0 	bl	22720 <memcpy>
	chan_sel = pdu_adv->chan_sel;
    3380:	7f23      	ldrb	r3, [r4, #28]
	cc->status = 0U;
    3382:	f44f 7280 	mov.w	r2, #256	; 0x100
    3386:	83a2      	strh	r2, [r4, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    3388:	f899 002a 	ldrb.w	r0, [r9, #42]	; 0x2a
	uint8_t rl_idx = ftr->rl_idx;
    338c:	f897 b012 	ldrb.w	fp, [r7, #18]
	chan_sel = pdu_adv->chan_sel;
    3390:	f3c3 1240 	ubfx	r2, r3, #5, #1
    3394:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    3398:	920b      	str	r2, [sp, #44]	; 0x2c
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    339a:	f017 fa6b 	bl	1a874 <ull_filter_lll_lrpa_used>
    339e:	4601      	mov	r1, r0
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    33a0:	2206      	movs	r2, #6
    33a2:	f104 002b 	add.w	r0, r4, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    33a6:	2900      	cmp	r1, #0
    33a8:	f040 80ed 	bne.w	3586 <ull_slave_setup+0x36e>
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    33ac:	f01f f9e3 	bl	22776 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    33b0:	f104 0325 	add.w	r3, r4, #37	; 0x25
    33b4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    33b8:	930e      	str	r3, [sp, #56]	; 0x38
    33ba:	f104 031f 	add.w	r3, r4, #31
    33be:	f000 80eb 	beq.w	3598 <ull_slave_setup+0x380>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    33c2:	461a      	mov	r2, r3
    33c4:	4651      	mov	r1, sl
    33c6:	4658      	mov	r0, fp
    33c8:	f016 fc8e 	bl	19ce8 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    33cc:	7fa2      	ldrb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    33ce:	980e      	ldr	r0, [sp, #56]	; 0x38
		cc->peer_addr_type += 2;
    33d0:	3202      	adds	r2, #2
    33d2:	77a2      	strb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    33d4:	a912      	add	r1, sp, #72	; 0x48
    33d6:	2206      	movs	r2, #6
    33d8:	f01f f9a2 	bl	22720 <memcpy>
	cc->sca = conn->slave.sca;
    33dc:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
	cc->interval = lll->interval;
    33e0:	8a69      	ldrh	r1, [r5, #18]
	cc->latency = lll->latency;
    33e2:	8aaa      	ldrh	r2, [r5, #20]
    33e4:	86a2      	strh	r2, [r4, #52]	; 0x34
	cc->sca = conn->slave.sca;
    33e6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    33ea:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	cc->timeout = timeout;
    33ee:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    33f2:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->interval = lll->interval;
    33f4:	8661      	strh	r1, [r4, #50]	; 0x32
	lll->handle = ll_conn_handle_get(conn);
    33f6:	4630      	mov	r0, r6
    33f8:	f013 f8da 	bl	165b0 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    33fc:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    33fe:	8228      	strh	r0, [r5, #16]
	rx->handle = lll->handle;
    3400:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
    3402:	687c      	ldr	r4, [r7, #4]
		ll_rx_put(link, rx);
    3404:	980a      	ldr	r0, [sp, #40]	; 0x28
    3406:	f011 fd4b 	bl	14ea0 <ll_rx_put>
		rx->handle = lll->handle;
    340a:	8a2b      	ldrh	r3, [r5, #16]
    340c:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    340e:	230e      	movs	r3, #14
    3410:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
    3412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		link = rx->link;
    3414:	6820      	ldr	r0, [r4, #0]
		if (chan_sel) {
    3416:	2b00      	cmp	r3, #0
    3418:	f000 80ba 	beq.w	3590 <ull_slave_setup+0x378>
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    341c:	f895 e009 	ldrb.w	lr, [r5, #9]
				      lll->access_addr[0];
    3420:	7a2b      	ldrb	r3, [r5, #8]
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    3422:	f895 c00b 	ldrb.w	ip, [r5, #11]
				      lll->access_addr[2];
    3426:	7aa9      	ldrb	r1, [r5, #10]
			lll->data_chan_sel = 1;
    3428:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    342c:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    3430:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
			lll->data_chan_id = aa_ms ^ aa_ls;
    3434:	404b      	eors	r3, r1
			lll->data_chan_sel = 1;
    3436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
			cs->csa = 0x01;
    343a:	2101      	movs	r1, #1
			lll->data_chan_id = aa_ms ^ aa_ls;
    343c:	846b      	strh	r3, [r5, #34]	; 0x22
			lll->data_chan_sel = 1;
    343e:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
			cs->csa = 0x01;
    3442:	7721      	strb	r1, [r4, #28]
	ll_rx_put(link, rx);
    3444:	4621      	mov	r1, r4
    3446:	f011 fd2b 	bl	14ea0 <ll_rx_put>
	ll_rx_sched();
    344a:	f011 fd33 	bl	14eb4 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    344e:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
    3452:	2101      	movs	r1, #1
    3454:	f000 0007 	and.w	r0, r0, #7
    3458:	f017 ff54 	bl	1b304 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    345c:	4a62      	ldr	r2, [pc, #392]	; (35e8 <ull_slave_setup+0x3d0>)
	conn->evt.ticks_active_to_start = 0U;
    345e:	f04f 0a00 	mov.w	sl, #0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    3462:	4683      	mov	fp, r0
	conn->evt.ticks_xtal_to_start =
    3464:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    3466:	f200 4052 	addw	r0, r0, #1106	; 0x452
    346a:	fba0 0102 	umull	r0, r1, r0, r2
	conn->evt.ticks_xtal_to_start =
    346e:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    3470:	e9c6 aa01 	strd	sl, sl, [r6, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    3474:	a358      	add	r3, pc, #352	; (adr r3, 35d8 <ull_slave_setup+0x3c0>)
    3476:	e9d3 2300 	ldrd	r2, r3, [r3]
    347a:	f7fc fe41 	bl	100 <__aeabi_uldivmod>
    347e:	68fc      	ldr	r4, [r7, #12]
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    3480:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    3484:	6aad      	ldr	r5, [r5, #40]	; 0x28
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    3486:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    348a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    348e:	fb03 3302 	mla	r3, r3, r2, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3492:	2102      	movs	r1, #2
    3494:	4652      	mov	r2, sl
	conn->evt.ticks_slot =
    3496:	60f0      	str	r0, [r6, #12]
    3498:	f5a4 74ae 	sub.w	r4, r4, #348	; 0x15c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    349c:	2001      	movs	r0, #1
	conn_offset_us -= EVENT_JITTER_US;
    349e:	441c      	add	r4, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    34a0:	f00d fa86 	bl	109b0 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    34a4:	4648      	mov	r0, r9
    34a6:	f012 fa1b 	bl	158e0 <ull_adv_handle_get>
    34aa:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    34ac:	4b4f      	ldr	r3, [pc, #316]	; (35ec <ull_slave_setup+0x3d4>)
    34ae:	f8cd 9000 	str.w	r9, [sp]
    34b2:	b2d2      	uxtb	r2, r2
    34b4:	4650      	mov	r0, sl
    34b6:	2101      	movs	r1, #1
    34b8:	f00e fea6 	bl	12208 <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    34bc:	2801      	cmp	r0, #1
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    34be:	eba8 0805 	sub.w	r8, r8, r5
	conn_offset_us -= ready_delay_us;
    34c2:	eba4 040b 	sub.w	r4, r4, fp
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    34c6:	d07f      	beq.n	35c8 <ull_slave_setup+0x3b0>
	if (adv->lll.is_hdcd) {
    34c8:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
    34cc:	07db      	lsls	r3, r3, #31
    34ce:	d473      	bmi.n	35b8 <ull_slave_setup+0x3a0>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    34d0:	4630      	mov	r0, r6
    34d2:	f013 f86d 	bl	165b0 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    34d6:	f8df b110 	ldr.w	fp, [pc, #272]	; 35e8 <ull_slave_setup+0x3d0>
    34da:	fba8 890b 	umull	r8, r9, r8, fp
    34de:	a33e      	add	r3, pc, #248	; (adr r3, 35d8 <ull_slave_setup+0x3c0>)
    34e0:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    34e4:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    34e6:	4649      	mov	r1, r9
    34e8:	4640      	mov	r0, r8
    34ea:	f7fc fe09 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    34ee:	4a40      	ldr	r2, [pc, #256]	; (35f0 <ull_slave_setup+0x3d8>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    34f0:	9606      	str	r6, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    34f2:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
    34f6:	fbaa 2302 	umull	r2, r3, sl, r2
    34fa:	2107      	movs	r1, #7
    34fc:	fb01 330a 	mla	r3, r1, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3500:	f44f 7194 	mov.w	r1, #296	; 0x128
    3504:	68bf      	ldr	r7, [r7, #8]
    3506:	9108      	str	r1, [sp, #32]
    3508:	493a      	ldr	r1, [pc, #232]	; (35f4 <ull_slave_setup+0x3dc>)
    350a:	9107      	str	r1, [sp, #28]
    350c:	493a      	ldr	r1, [pc, #232]	; (35f8 <ull_slave_setup+0x3e0>)
    350e:	9105      	str	r1, [sp, #20]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3510:	ebb8 0002 	subs.w	r0, r8, r2
    3514:	eb69 0103 	sbc.w	r1, r9, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3518:	68f3      	ldr	r3, [r6, #12]
    351a:	9304      	str	r3, [sp, #16]
    351c:	2600      	movs	r6, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    351e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3522:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3524:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3526:	f7fc fdeb 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    352a:	a32b      	add	r3, pc, #172	; (adr r3, 35d8 <ull_slave_setup+0x3c0>)
    352c:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3530:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3532:	fba4 010b 	umull	r0, r1, r4, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3536:	e9cd ac01 	strd	sl, ip, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    353a:	f7fc fde1 	bl	100 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    353e:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3540:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3544:	b2ed      	uxtb	r5, r5
    3546:	3f31      	subs	r7, #49	; 0x31
    3548:	463b      	mov	r3, r7
    354a:	9000      	str	r0, [sp, #0]
    354c:	462a      	mov	r2, r5
    354e:	4630      	mov	r0, r6
    3550:	2101      	movs	r1, #1
    3552:	f00e fded 	bl	12130 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3556:	f030 0302 	bics.w	r3, r0, #2
    355a:	d00c      	beq.n	3576 <ull_slave_setup+0x35e>
    355c:	4a27      	ldr	r2, [pc, #156]	; (35fc <ull_slave_setup+0x3e4>)
    355e:	4928      	ldr	r1, [pc, #160]	; (3600 <ull_slave_setup+0x3e8>)
    3560:	4828      	ldr	r0, [pc, #160]	; (3604 <ull_slave_setup+0x3ec>)
    3562:	f240 1329 	movw	r3, #297	; 0x129
    3566:	f01d f86b 	bl	20640 <printk>
    356a:	4040      	eors	r0, r0
    356c:	f380 8811 	msr	BASEPRI, r0
    3570:	f04f 0003 	mov.w	r0, #3
    3574:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    3576:	2201      	movs	r2, #1
    3578:	4610      	mov	r0, r2
    357a:	2102      	movs	r1, #2
    357c:	f00d fa18 	bl	109b0 <mayfly_enable>
}
    3580:	b015      	add	sp, #84	; 0x54
    3582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    3586:	f104 0124 	add.w	r1, r4, #36	; 0x24
    358a:	f01f f8c9 	bl	22720 <memcpy>
    358e:	e70f      	b.n	33b0 <ull_slave_setup+0x198>
			cs->csa = 0x00;
    3590:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    3594:	7723      	strb	r3, [r4, #28]
    3596:	e755      	b.n	3444 <ull_slave_setup+0x22c>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    3598:	980e      	ldr	r0, [sp, #56]	; 0x38
    359a:	9311      	str	r3, [sp, #68]	; 0x44
    359c:	2206      	movs	r2, #6
    359e:	2100      	movs	r1, #0
    35a0:	f01f f8e9 	bl	22776 <memset>
		cc->peer_addr_type = peer_addr_type;
    35a4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    35a8:	77a3      	strb	r3, [r4, #30]
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    35aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    35ac:	a912      	add	r1, sp, #72	; 0x48
    35ae:	4618      	mov	r0, r3
    35b0:	2206      	movs	r2, #6
    35b2:	f01f f8b5 	bl	22720 <memcpy>
    35b6:	e711      	b.n	33dc <ull_slave_setup+0x1c4>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    35b8:	2300      	movs	r3, #0
    35ba:	2201      	movs	r2, #1
    35bc:	9300      	str	r3, [sp, #0]
    35be:	4618      	mov	r0, r3
    35c0:	4611      	mov	r1, r2
    35c2:	f00e fe21 	bl	12208 <ticker_stop>
    35c6:	e783      	b.n	34d0 <ull_slave_setup+0x2b8>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    35c8:	f011 fd0c 	bl	14fe4 <ull_disable_mark_get>
    35cc:	4581      	cmp	r9, r0
    35ce:	f43f af7b 	beq.w	34c8 <ull_slave_setup+0x2b0>
    35d2:	f015 fd2b 	bl	1902c <ticker_op_stop_adv_cb.part.0>
    35d6:	e777      	b.n	34c8 <ull_slave_setup+0x2b0>
    35d8:	1afd498d 	.word	0x1afd498d
    35dc:	00000007 	.word	0x00000007
    35e0:	01c9c37f 	.word	0x01c9c37f
    35e4:	026259ff 	.word	0x026259ff
    35e8:	3b9aca00 	.word	0x3b9aca00
    35ec:	00019059 	.word	0x00019059
    35f0:	1afd498d 	.word	0x1afd498d
    35f4:	00018ffd 	.word	0x00018ffd
    35f8:	00019075 	.word	0x00019075
    35fc:	0002762c 	.word	0x0002762c
    3600:	000274d4 	.word	0x000274d4
    3604:	00026ecc 	.word	0x00026ecc
    3608:	431bde83 	.word	0x431bde83
    360c:	00000000 	.word	0x00000000

00003610 <ull_slave_done>:
{
    3610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	preamble_to_addr_us =
    3614:	e9d0 c70b 	ldrd	ip, r7, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    3618:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
				       window_widening_event_us +
    361c:	eb0c 0407 	add.w	r4, ip, r7
	start_to_address_expected_us = EVENT_JITTER_US +
    3620:	3430      	adds	r4, #48	; 0x30
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    3622:	45a0      	cmp	r8, r4
{
    3624:	460e      	mov	r6, r1
    3626:	4615      	mov	r5, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    3628:	d818      	bhi.n	365c <ull_slave_done+0x4c>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    362a:	4f1b      	ldr	r7, [pc, #108]	; (3698 <ull_slave_done+0x88>)
    362c:	a318      	add	r3, pc, #96	; (adr r3, 3690 <ull_slave_done+0x80>)
    362e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3632:	fbac 0107 	umull	r0, r1, ip, r7
    3636:	f7fc fd63 	bl	100 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    363a:	eba4 0408 	sub.w	r4, r4, r8
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    363e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    3642:	6030      	str	r0, [r6, #0]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    3644:	a312      	add	r3, pc, #72	; (adr r3, 3690 <ull_slave_done+0x80>)
    3646:	e9d3 2300 	ldrd	r2, r3, [r3]
    364a:	fba4 0107 	umull	r0, r1, r4, r7
    364e:	f7fc fd57 	bl	100 <__aeabi_uldivmod>
    3652:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    3656:	6028      	str	r0, [r5, #0]
}
    3658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    365c:	4c0e      	ldr	r4, [pc, #56]	; (3698 <ull_slave_done+0x88>)
    365e:	a30c      	add	r3, pc, #48	; (adr r3, 3690 <ull_slave_done+0x80>)
    3660:	e9d3 2300 	ldrd	r2, r3, [r3]
    3664:	fba8 0104 	umull	r0, r1, r8, r4
    3668:	f7fc fd4a 	bl	100 <__aeabi_uldivmod>
    366c:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    3670:	f107 0030 	add.w	r0, r7, #48	; 0x30
		*ticks_drift_plus =
    3674:	6033      	str	r3, [r6, #0]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    3676:	fba0 0104 	umull	r0, r1, r0, r4
    367a:	a305      	add	r3, pc, #20	; (adr r3, 3690 <ull_slave_done+0x80>)
    367c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3680:	f7fc fd3e 	bl	100 <__aeabi_uldivmod>
    3684:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    3688:	6028      	str	r0, [r5, #0]
}
    368a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    368e:	bf00      	nop
    3690:	1afd498d 	.word	0x1afd498d
    3694:	00000007 	.word	0x00000007
    3698:	3b9aca00 	.word	0x3b9aca00
    369c:	00000000 	.word	0x00000000

000036a0 <ull_master_setup>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

void ull_master_setup(memq_link_t *link, struct node_rx_hdr *rx,
		      struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    36a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	scan = ((struct lll_scan *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;

	pdu_tx = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_tx->rx_addr;
    36a4:	7f0e      	ldrb	r6, [r1, #28]
{
    36a6:	4617      	mov	r7, r2
	((struct lll_scan *)ftr->param)->conn = NULL;
    36a8:	6812      	ldr	r2, [r2, #0]
{
    36aa:	b091      	sub	sp, #68	; 0x44
    36ac:	460c      	mov	r4, r1
	((struct lll_scan *)ftr->param)->conn = NULL;
    36ae:	f04f 0a00 	mov.w	sl, #0
{
    36b2:	461d      	mov	r5, r3
	((struct lll_scan *)ftr->param)->conn = NULL;
    36b4:	f8c2 a008 	str.w	sl, [r2, #8]
	peer_addr_type = pdu_tx->rx_addr;
    36b8:	f3c6 13c0 	ubfx	r3, r6, #7, #1
	scan = ((struct lll_scan *)ftr->param)->hdr.parent;
    36bc:	f8d2 9000 	ldr.w	r9, [r2]
	peer_addr_type = pdu_tx->rx_addr;
    36c0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    36c4:	3124      	adds	r1, #36	; 0x24
    36c6:	2206      	movs	r2, #6
{
    36c8:	4680      	mov	r8, r0
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    36ca:	a80e      	add	r0, sp, #56	; 0x38
	conn = lll->hdr.parent;
    36cc:	682e      	ldr	r6, [r5, #0]
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    36ce:	f01f f827 	bl	22720 <memcpy>

	/* This is the chan sel bit from the received adv pdu */
	chan_sel = pdu_tx->chan_sel;
    36d2:	7f23      	ldrb	r3, [r4, #28]

	cc = (void *)pdu_tx;
	cc->status = 0U;
    36d4:	f8a4 a01c 	strh.w	sl, [r4, #28]
	cc->role = 0U;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;

	if (ftr->lrpa_used) {
    36d8:	7c79      	ldrb	r1, [r7, #17]
	uint8_t rl_idx = ftr->rl_idx;
    36da:	f897 a012 	ldrb.w	sl, [r7, #18]
	chan_sel = pdu_tx->chan_sel;
    36de:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (ftr->lrpa_used) {
    36e2:	f011 0101 	ands.w	r1, r1, #1
	chan_sel = pdu_tx->chan_sel;
    36e6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    36ea:	920b      	str	r2, [sp, #44]	; 0x2c
	if (ftr->lrpa_used) {
    36ec:	f104 002b 	add.w	r0, r4, #43	; 0x2b
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    36f0:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
    36f4:	f000 80ef 	beq.w	38d6 <ull_master_setup+0x236>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    36f8:	f104 011e 	add.w	r1, r4, #30
    36fc:	f01f f810 	bl	22720 <memcpy>
		       BDADDR_SIZE);
	} else {
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
	}

	if (rl_idx != FILTER_IDX_NONE) {
    3700:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    3704:	f104 0325 	add.w	r3, r4, #37	; 0x25
    3708:	f104 0b1f 	add.w	fp, r4, #31
    370c:	f000 80ed 	beq.w	38ea <ull_master_setup+0x24a>
		/* Store identity address */
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3710:	465a      	mov	r2, fp
    3712:	4650      	mov	r0, sl
    3714:	f104 011e 	add.w	r1, r4, #30
    3718:	930d      	str	r3, [sp, #52]	; 0x34
    371a:	f016 fae5 	bl	19ce8 <ll_rl_id_addr_get>
				  &cc->peer_addr[0]);
		/* Mark it as identity address from RPA (0x02, 0x03) */
		cc->peer_addr_type += 2;
    371e:	7fa2      	ldrb	r2, [r4, #30]

		/* Store peer RPA */
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3720:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		cc->peer_addr_type += 2;
    3722:	3202      	adds	r2, #2
    3724:	77a2      	strb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3726:	a90e      	add	r1, sp, #56	; 0x38
    3728:	4618      	mov	r0, r3
    372a:	2206      	movs	r2, #6
    372c:	f01e fff8 	bl	22720 <memcpy>
#endif /* CONFIG_BT_CTLR_PRIVACY */
		cc->peer_addr_type = peer_addr_type;
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
	}

	cc->interval = lll->interval;
    3730:	8a6b      	ldrh	r3, [r5, #18]
	cc->latency = lll->latency;
    3732:	8aaa      	ldrh	r2, [r5, #20]
	cc->interval = lll->interval;
    3734:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->timeout = scan->lll.conn_timeout;
    3736:	f8b9 3030 	ldrh.w	r3, [r9, #48]	; 0x30
    373a:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->latency = lll->latency;
    373c:	86a2      	strh	r2, [r4, #52]	; 0x34
	cc->sca = lll_conn_sca_local_get();
    373e:	f018 fe49 	bl	1c3d4 <lll_conn_sca_local_get>
    3742:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

	lll->handle = ll_conn_handle_get(conn);
    3746:	4630      	mov	r0, r6
    3748:	f012 ff32 	bl	165b0 <ll_conn_handle_get>
    374c:	4603      	mov	r3, r0
    374e:	8228      	strh	r0, [r5, #16]
		 * rx node.
		 */
		rx_csa = (void *)ftr->extra;

		/* Enqueue the connection event */
		ll_rx_put(link, rx);
    3750:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    3752:	80e3      	strh	r3, [r4, #6]
		ll_rx_put(link, rx);
    3754:	4640      	mov	r0, r8
		rx_csa = (void *)ftr->extra;
    3756:	687c      	ldr	r4, [r7, #4]
		ll_rx_put(link, rx);
    3758:	f011 fba2 	bl	14ea0 <ll_rx_put>

		/* use the rx node for CSA event */
		rx = (void *)rx_csa;
		link = rx->link;

		rx->handle = lll->handle;
    375c:	8a2b      	ldrh	r3, [r5, #16]
    375e:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    3760:	230e      	movs	r3, #14
    3762:	7123      	strb	r3, [r4, #4]

		cs = (void *)rx_csa->pdu;

		if (chan_sel) {
    3764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		link = rx->link;
    3766:	6820      	ldr	r0, [r4, #0]
		if (chan_sel) {
    3768:	2b00      	cmp	r3, #0
    376a:	f000 80b0 	beq.w	38ce <ull_master_setup+0x22e>
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    376e:	f895 e009 	ldrb.w	lr, [r5, #9]
				      lll->access_addr[0];
    3772:	7a2b      	ldrb	r3, [r5, #8]
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    3774:	f895 c00b 	ldrb.w	ip, [r5, #11]
				      lll->access_addr[2];
    3778:	7aa9      	ldrb	r1, [r5, #10]

			lll->data_chan_sel = 1;
    377a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    377e:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    3782:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
			lll->data_chan_id = aa_ms ^ aa_ls;
    3786:	404b      	eors	r3, r1
			lll->data_chan_sel = 1;
    3788:	f042 0240 	orr.w	r2, r2, #64	; 0x40

			cs->csa = 0x01;
    378c:	2101      	movs	r1, #1
			lll->data_chan_id = aa_ms ^ aa_ls;
    378e:	846b      	strh	r3, [r5, #34]	; 0x22
			lll->data_chan_sel = 1;
    3790:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
			cs->csa = 0x01;
    3794:	7721      	strb	r1, [r4, #28]
		} else {
			cs->csa = 0x00;
		}
	}

	ll_rx_put(link, rx);
    3796:	4621      	mov	r1, r4
    3798:	f011 fb82 	bl	14ea0 <ll_rx_put>
	ll_rx_sched();
    379c:	f011 fb8a 	bl	14eb4 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(lll->phy_tx,
						      lll->phy_flags);
    37a0:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    37a4:	f8df a180 	ldr.w	sl, [pc, #384]	; 3928 <ull_master_setup+0x288>
	ready_delay_us = lll_radio_tx_ready_delay_get(lll->phy_tx,
    37a8:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    37ac:	f000 0007 	and.w	r0, r0, #7
    37b0:	f017 fda6 	bl	1b300 <lll_radio_tx_ready_delay_get>
	conn->evt.ticks_active_to_start = 0U;
    37b4:	2400      	movs	r4, #0
	ready_delay_us = lll_radio_tx_ready_delay_get(lll->phy_tx,
    37b6:	4683      	mov	fp, r0
	conn->evt.ticks_xtal_to_start =
    37b8:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    37ba:	f200 4052 	addw	r0, r0, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    37be:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    37c0:	e9c6 4401 	strd	r4, r4, [r6, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    37c4:	a350      	add	r3, pc, #320	; (adr r3, 3908 <ull_master_setup+0x268>)
    37c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    37ca:	fba0 010a 	umull	r0, r1, r0, sl
    37ce:	f7fc fc97 	bl	100 <__aeabi_uldivmod>
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	conn_interval_us = lll->interval * 1250;
    37d2:	f8b5 c012 	ldrh.w	ip, [r5, #18]
	conn_offset_us = ftr->radio_end_us;
    37d6:	68fb      	ldr	r3, [r7, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    37d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->evt.ticks_slot =
    37dc:	60f0      	str	r0, [r6, #12]

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    37de:	4622      	mov	r2, r4
    37e0:	2102      	movs	r1, #2
    37e2:	2001      	movs	r0, #1
	conn_interval_us = lll->interval * 1250;
    37e4:	f240 48e2 	movw	r8, #1250	; 0x4e2
    37e8:	fb08 f80c 	mul.w	r8, r8, ip
	conn_offset_us -= EVENT_OVERHEAD_START_US;
    37ec:	f5a3 7587 	sub.w	r5, r3, #270	; 0x10e
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    37f0:	f00d f8de 	bl	109b0 <mayfly_enable>
#endif

	/* Stop Scanner */
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    37f4:	4648      	mov	r0, r9
    37f6:	f012 fa7d 	bl	15cf4 <ull_scan_handle_get>
    37fa:	1d02      	adds	r2, r0, #4
    37fc:	b2d2      	uxtb	r2, r2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    37fe:	4b44      	ldr	r3, [pc, #272]	; (3910 <ull_master_setup+0x270>)
				    TICKER_USER_ID_ULL_HIGH,
				    ticker_id_scan, ticker_op_stop_scan_cb,
				    (void *)(uint32_t)ticker_id_scan);
    3800:	9200      	str	r2, [sp, #0]
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    3802:	2101      	movs	r1, #1
    3804:	4620      	mov	r0, r4
    3806:	f00e fcff 	bl	12208 <ticker_stop>

	/* Scanner stop can expire while here in this ISR.
	 * Deferred attempt to stop can fail as it would have
	 * expired, hence ignore failure.
	 */
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    380a:	4623      	mov	r3, r4
    380c:	2203      	movs	r2, #3
    380e:	2101      	movs	r1, #1
    3810:	9400      	str	r4, [sp, #0]
    3812:	4620      	mov	r0, r4
    3814:	f00e fcf8 	bl	12208 <ticker_stop>
		    TICKER_ID_SCAN_STOP, NULL, NULL);

	/* Start master */
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3818:	4630      	mov	r0, r6
    381a:	f012 fec9 	bl	165b0 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    381e:	9606      	str	r6, [sp, #24]
    3820:	f44f 7332 	mov.w	r3, #712	; 0x2c8
    3824:	68bf      	ldr	r7, [r7, #8]
    3826:	4a3b      	ldr	r2, [pc, #236]	; (3914 <ull_master_setup+0x274>)
    3828:	9308      	str	r3, [sp, #32]
    382a:	4b3b      	ldr	r3, [pc, #236]	; (3918 <ull_master_setup+0x278>)
    382c:	9207      	str	r2, [sp, #28]
    382e:	9305      	str	r3, [sp, #20]
    3830:	68f3      	ldr	r3, [r6, #12]
    3832:	9304      	str	r3, [sp, #16]
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ftr->ticks_anchor - ticks_slot_offset,
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3834:	fb88 890a 	smull	r8, r9, r8, sl
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3838:	f100 0c05 	add.w	ip, r0, #5
				     HAL_TICKER_REMAINDER(conn_interval_us),
    383c:	a332      	add	r3, pc, #200	; (adr r3, 3908 <ull_master_setup+0x268>)
    383e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3842:	4640      	mov	r0, r8
    3844:	4649      	mov	r1, r9
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3846:	fa5f f68c 	uxtb.w	r6, ip
    384a:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    384c:	f7fc fc58 	bl	100 <__aeabi_uldivmod>
    3850:	4610      	mov	r0, r2
    3852:	4619      	mov	r1, r3
    3854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3858:	2300      	movs	r3, #0
    385a:	f7fc fc51 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    385e:	a32a      	add	r3, pc, #168	; (adr r3, 3908 <ull_master_setup+0x268>)
    3860:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3864:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3866:	4649      	mov	r1, r9
    3868:	4640      	mov	r0, r8
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    386a:	f8cd c008 	str.w	ip, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    386e:	f7fc fc47 	bl	100 <__aeabi_uldivmod>
	conn_offset_us -= ready_delay_us;
    3872:	eba5 050b 	sub.w	r5, r5, fp
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3876:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3878:	a323      	add	r3, pc, #140	; (adr r3, 3908 <ull_master_setup+0x268>)
    387a:	e9d3 2300 	ldrd	r2, r3, [r3]
    387e:	fba5 010a 	umull	r0, r1, r5, sl
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3882:	f8cd c004 	str.w	ip, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3886:	f7fc fc3b 	bl	100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    388a:	3f31      	subs	r7, #49	; 0x31
    388c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3890:	463b      	mov	r3, r7
    3892:	9000      	str	r0, [sp, #0]
    3894:	4632      	mov	r2, r6
    3896:	4620      	mov	r0, r4
    3898:	2101      	movs	r1, #1
    389a:	f00e fc49 	bl	12130 <ticker_start>
				     TICKER_NULL_LAZY,
				     (conn->evt.ticks_slot +
				      ticks_slot_overhead),
				     ull_master_ticker_cb, conn, ticker_op_cb,
				     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    389e:	f030 0302 	bics.w	r3, r0, #2
    38a2:	d00c      	beq.n	38be <ull_master_setup+0x21e>
    38a4:	4a1d      	ldr	r2, [pc, #116]	; (391c <ull_master_setup+0x27c>)
    38a6:	491e      	ldr	r1, [pc, #120]	; (3920 <ull_master_setup+0x280>)
    38a8:	481e      	ldr	r0, [pc, #120]	; (3924 <ull_master_setup+0x284>)
    38aa:	f240 23c9 	movw	r3, #713	; 0x2c9
    38ae:	f01c fec7 	bl	20640 <printk>
    38b2:	4040      	eors	r0, r0
    38b4:	f380 8811 	msr	BASEPRI, r0
    38b8:	f04f 0003 	mov.w	r0, #3
    38bc:	df02      	svc	2

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    38be:	2201      	movs	r2, #1
    38c0:	4610      	mov	r0, r2
    38c2:	2102      	movs	r1, #2
    38c4:	f00d f874 	bl	109b0 <mayfly_enable>
#endif
}
    38c8:	b011      	add	sp, #68	; 0x44
    38ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cs->csa = 0x00;
    38ce:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    38d2:	7723      	strb	r3, [r4, #28]
    38d4:	e75f      	b.n	3796 <ull_master_setup+0xf6>
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    38d6:	f01e ff4e 	bl	22776 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    38da:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    38de:	f104 0325 	add.w	r3, r4, #37	; 0x25
    38e2:	f104 0b1f 	add.w	fp, r4, #31
    38e6:	f47f af13 	bne.w	3710 <ull_master_setup+0x70>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    38ea:	4618      	mov	r0, r3
    38ec:	2206      	movs	r2, #6
    38ee:	2100      	movs	r1, #0
    38f0:	f01e ff41 	bl	22776 <memset>
		cc->peer_addr_type = peer_addr_type;
    38f4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    38f8:	77a3      	strb	r3, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
    38fa:	a90e      	add	r1, sp, #56	; 0x38
    38fc:	4658      	mov	r0, fp
    38fe:	2206      	movs	r2, #6
    3900:	f01e ff0e 	bl	22720 <memcpy>
    3904:	e714      	b.n	3730 <ull_master_setup+0x90>
    3906:	bf00      	nop
    3908:	1afd498d 	.word	0x1afd498d
    390c:	00000007 	.word	0x00000007
    3910:	000191b5 	.word	0x000191b5
    3914:	000191b9 	.word	0x000191b9
    3918:	000191e9 	.word	0x000191e9
    391c:	000276b4 	.word	0x000276b4
    3920:	000274d4 	.word	0x000274d4
    3924:	00026ecc 	.word	0x00026ecc
    3928:	3b9aca00 	.word	0x3b9aca00
    392c:	00000000 	.word	0x00000000

00003930 <win_offset_calc>:

static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
			    uint32_t *ticks_to_offset_next,
			    uint16_t conn_interval, uint8_t *offset_max,
			    uint8_t *win_offset)
{
    3930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3934:	b091      	sub	sp, #68	; 0x44
    3936:	4604      	mov	r4, r0
    3938:	9007      	str	r0, [sp, #28]
	}
#endif

	ticks_slot_abs += conn_curr->evt.ticks_slot;

	if (conn_curr->lll.role) {
    393a:	f990 003d 	ldrsb.w	r0, [r0, #61]	; 0x3d
	ticks_slot_abs += conn_curr->evt.ticks_slot;
    393e:	68e4      	ldr	r4, [r4, #12]
    3940:	940b      	str	r4, [sp, #44]	; 0x2c
	if (conn_curr->lll.role) {
    3942:	2800      	cmp	r0, #0
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
    3944:	bfb8      	it	lt
    3946:	3414      	addlt	r4, #20
{
    3948:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
    394c:	9305      	str	r3, [sp, #20]
	}

	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
    394e:	f04f 02ff 	mov.w	r2, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    3952:	f04f 0300 	mov.w	r3, #0
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
    3956:	bfb8      	it	lt
    3958:	940b      	strlt	r4, [sp, #44]	; 0x2c
{
    395a:	e9dd 7b1a 	ldrd	r7, fp, [sp, #104]	; 0x68
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    395e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
    3962:	4690      	mov	r8, r2
		ticks_anchor_prev = offset_index = offset = 0U;
    3964:	461e      	mov	r6, r3
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
    3966:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
    396a:	9206      	str	r2, [sp, #24]
		ticks_anchor_prev = offset_index = offset = 0U;
    396c:	461c      	mov	r4, r3
    396e:	469a      	mov	sl, r3
	ticks_slot_abs_prev = 0U;
    3970:	9304      	str	r3, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    3972:	461d      	mov	r5, r3
    3974:	e049      	b.n	3a0a <win_offset_calc+0xda>
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);

		if (ticker_id == 0xff) {
    3976:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    397a:	28ff      	cmp	r0, #255	; 0xff
    397c:	d069      	beq.n	3a52 <win_offset_calc+0x122>
			break;
		}

		/* ticks_anchor shall not change during this loop */
		if ((ticker_id_prev != 0xff) &&
    397e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    3982:	d011      	beq.n	39a8 <win_offset_calc+0x78>
    3984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3986:	4553      	cmp	r3, sl
    3988:	d00e      	beq.n	39a8 <win_offset_calc+0x78>
		    (ticks_anchor != ticks_anchor_prev)) {
			LL_ASSERT(0);
    398a:	4aa1      	ldr	r2, [pc, #644]	; (3c10 <win_offset_calc+0x2e0>)
    398c:	49a1      	ldr	r1, [pc, #644]	; (3c14 <win_offset_calc+0x2e4>)
    398e:	48a2      	ldr	r0, [pc, #648]	; (3c18 <win_offset_calc+0x2e8>)
    3990:	f240 1375 	movw	r3, #373	; 0x175
    3994:	f01c fe54 	bl	20640 <printk>
    3998:	4040      	eors	r0, r0
    399a:	f380 8811 	msr	BASEPRI, r0
    399e:	f04f 0003 	mov.w	r0, #3
    39a2:	df02      	svc	2
    39a4:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33

		/* consider advertiser time as available. Any other time used by
		 * tickers declared outside the controller is also available.
		 */
#if defined(CONFIG_BT_BROADCASTER)
		if ((ticker_id < TICKER_ID_ADV_BASE) ||
    39a8:	1e83      	subs	r3, r0, #2
    39aa:	2b04      	cmp	r3, #4
    39ac:	f200 80a2 	bhi.w	3af4 <win_offset_calc+0x1c4>
#endif /* !CONFIG_BT_BROADCASTER */
		{
			continue;
		}

		if (ticker_id < TICKER_ID_CONN_BASE) {
    39b0:	2804      	cmp	r0, #4
    39b2:	f240 80ac 	bls.w	3b0e <win_offset_calc+0x1de>
		}

		/* TODO: handle scanner; for now we exit with as much we
		 * where able to fill (offsets).
		 */
		if (ticker_id_other != 0xff) {
    39b6:	9b06      	ldr	r3, [sp, #24]
    39b8:	2bff      	cmp	r3, #255	; 0xff
    39ba:	f040 8097 	bne.w	3aec <win_offset_calc+0x1bc>
			break;
		}

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    39be:	3805      	subs	r0, #5
    39c0:	b280      	uxth	r0, r0
    39c2:	f012 fdfd 	bl	165c0 <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
    39c6:	9b07      	ldr	r3, [sp, #28]
    39c8:	4283      	cmp	r3, r0
    39ca:	f000 8093 	beq.w	3af4 <win_offset_calc+0x1c4>
    39ce:	9909      	ldr	r1, [sp, #36]	; 0x24
    39d0:	f990 203d 	ldrsb.w	r2, [r0, #61]	; 0x3d
    39d4:	783b      	ldrb	r3, [r7, #0]
    39d6:	2900      	cmp	r1, #0
    39d8:	f040 80a7 	bne.w	3b2a <win_offset_calc+0x1fa>
    39dc:	2a00      	cmp	r2, #0
    39de:	db12      	blt.n	3a06 <win_offset_calc+0xd6>

				ticks_slot_abs_curr = ticks_prepare_to_start;
			}
#endif

			ticks_slot_abs_curr += conn->evt.ticks_slot +
    39e0:	68c2      	ldr	r2, [r0, #12]
				ticks_to_expire + ticks_prepare_reduced;
    39e2:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
			uint32_t ticks_slot_margin = 0U;
    39e6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->evt.ticks_slot +
    39ea:	3228      	adds	r2, #40	; 0x28
    39ec:	9208      	str	r2, [sp, #32]
				ticks_slot_margin =
					HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
				ticks_slot_abs_curr += ticks_slot_margin;
			}

			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    39ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    39f0:	6812      	ldr	r2, [r2, #0]
    39f2:	454a      	cmp	r2, r9
    39f4:	f0c0 80a8 	bcc.w	3b48 <win_offset_calc+0x218>
			}

			ticks_anchor_prev = ticks_anchor;
			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    39f8:	9a08      	ldr	r2, [sp, #32]
			ticks_anchor_prev = ticks_anchor;
    39fa:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
			ticker_id_prev = ticker_id;
    39fe:	f89d 8033 	ldrb.w	r8, [sp, #51]	; 0x33
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    3a02:	9204      	str	r2, [sp, #16]
			ticker_id_prev = ticker_id;
    3a04:	464d      	mov	r5, r9
		}
	} while (offset_index < *offset_max);
    3a06:	429c      	cmp	r4, r3
    3a08:	d277      	bcs.n	3afa <win_offset_calc+0x1ca>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
    3a0a:	ab0f      	add	r3, sp, #60	; 0x3c
    3a0c:	9302      	str	r3, [sp, #8]
    3a0e:	4b83      	ldr	r3, [pc, #524]	; (3c1c <win_offset_calc+0x2ec>)
    3a10:	9301      	str	r3, [sp, #4]
    3a12:	ab0d      	add	r3, sp, #52	; 0x34
		uint32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3a14:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
    3a16:	9300      	str	r3, [sp, #0]
    3a18:	f10d 0233 	add.w	r2, sp, #51	; 0x33
    3a1c:	ab0e      	add	r3, sp, #56	; 0x38
    3a1e:	2000      	movs	r0, #0
		uint32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3a20:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
    3a22:	f00e fc37 	bl	12294 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    3a26:	2802      	cmp	r0, #2
    3a28:	d074      	beq.n	3b14 <win_offset_calc+0x1e4>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    3a2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3a2c:	2b00      	cmp	r3, #0
    3a2e:	d0a2      	beq.n	3976 <win_offset_calc+0x46>
    3a30:	4a77      	ldr	r2, [pc, #476]	; (3c10 <win_offset_calc+0x2e0>)
    3a32:	497b      	ldr	r1, [pc, #492]	; (3c20 <win_offset_calc+0x2f0>)
    3a34:	4878      	ldr	r0, [pc, #480]	; (3c18 <win_offset_calc+0x2e8>)
    3a36:	f44f 73b6 	mov.w	r3, #364	; 0x16c
    3a3a:	f01c fe01 	bl	20640 <printk>
    3a3e:	4040      	eors	r0, r0
    3a40:	f380 8811 	msr	BASEPRI, r0
    3a44:	f04f 0003 	mov.w	r0, #3
    3a48:	df02      	svc	2
		if (ticker_id == 0xff) {
    3a4a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    3a4e:	28ff      	cmp	r0, #255	; 0xff
    3a50:	d195      	bne.n	397e <win_offset_calc+0x4e>

	if (ticker_id == 0xff) {
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
    3a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3a54:	681a      	ldr	r2, [r3, #0]
			ticks_to_expire_prev = *ticks_to_offset_next;
		}

		while (offset_index < *offset_max) {
    3a56:	783b      	ldrb	r3, [r7, #0]
    3a58:	4295      	cmp	r5, r2
    3a5a:	bf38      	it	cc
    3a5c:	4615      	movcc	r5, r2
    3a5e:	42a3      	cmp	r3, r4
    3a60:	d942      	bls.n	3ae8 <win_offset_calc+0x1b8>
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3a62:	9b04      	ldr	r3, [sp, #16]
    3a64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 3c28 <win_offset_calc+0x2f8>
    3a68:	18eb      	adds	r3, r5, r3
    3a6a:	fba3 0108 	umull	r0, r1, r3, r8
    3a6e:	2607      	movs	r6, #7
    3a70:	fb06 1103 	mla	r1, r6, r3, r1
    3a74:	a364      	add	r3, pc, #400	; (adr r3, 3c08 <win_offset_calc+0x2d8>)
    3a76:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a7a:	f7fc fb41 	bl	100 <__aeabi_uldivmod>
							ticks_slot_abs_prev) /
    3a7e:	4b69      	ldr	r3, [pc, #420]	; (3c24 <win_offset_calc+0x2f4>)
    3a80:	fba3 2000 	umull	r2, r0, r3, r0
				 1250;
			if (offset >= conn_interval) {
    3a84:	9a05      	ldr	r2, [sp, #20]
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3a86:	f3c0 218f 	ubfx	r1, r0, #10, #16
			if (offset >= conn_interval) {
    3a8a:	428a      	cmp	r2, r1
							ticks_slot_abs_prev) /
    3a8c:	ea4f 2090 	mov.w	r0, r0, lsr #10
			if (offset >= conn_interval) {
    3a90:	f240 80a9 	bls.w	3be6 <win_offset_calc+0x2b6>
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3a94:	f20f 1a70 	addw	sl, pc, #368	; 0x170
    3a98:	e9da 9a00 	ldrd	r9, sl, [sl]
							ticks_slot_abs_prev) /
    3a9c:	9306      	str	r3, [sp, #24]
    3a9e:	e00c      	b.n	3aba <win_offset_calc+0x18a>
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3aa0:	f7fc fb2e 	bl	100 <__aeabi_uldivmod>
							ticks_slot_abs_prev) /
    3aa4:	9b06      	ldr	r3, [sp, #24]
    3aa6:	fba3 3000 	umull	r3, r0, r3, r0
			if (offset >= conn_interval) {
    3aaa:	9b05      	ldr	r3, [sp, #20]
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3aac:	f3c0 218f 	ubfx	r1, r0, #10, #16
			if (offset >= conn_interval) {
    3ab0:	428b      	cmp	r3, r1
							ticks_slot_abs_prev) /
    3ab2:	ea4f 2090 	mov.w	r0, r0, lsr #10
			if (offset >= conn_interval) {
    3ab6:	f240 8096 	bls.w	3be6 <win_offset_calc+0x2b6>
				ticks_to_expire_prev = 0U;

				break;
			}

			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
    3aba:	eb0b 0c44 	add.w	ip, fp, r4, lsl #1
	dst[0] = val;
    3abe:	f80b 0014 	strb.w	r0, [fp, r4, lsl #1]
	dst[1] = val >> 8;
    3ac2:	0a09      	lsrs	r1, r1, #8
    3ac4:	f88c 1001 	strb.w	r1, [ip, #1]
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3ac8:	9904      	ldr	r1, [sp, #16]
		while (offset_index < *offset_max) {
    3aca:	f897 c000 	ldrb.w	ip, [r7]
							    offset_index)));
			offset_index++;
    3ace:	3401      	adds	r4, #1

			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    3ad0:	3528      	adds	r5, #40	; 0x28
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3ad2:	eb01 0e05 	add.w	lr, r1, r5
			offset_index++;
    3ad6:	b2e4      	uxtb	r4, r4
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3ad8:	fbae 0108 	umull	r0, r1, lr, r8
		while (offset_index < *offset_max) {
    3adc:	45a4      	cmp	ip, r4
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3ade:	464a      	mov	r2, r9
    3ae0:	4653      	mov	r3, sl
    3ae2:	fb06 110e 	mla	r1, r6, lr, r1
		while (offset_index < *offset_max) {
    3ae6:	d8db      	bhi.n	3aa0 <win_offset_calc+0x170>
		}

		*ticks_to_offset_next = ticks_to_expire_prev;
    3ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3aea:	601d      	str	r5, [r3, #0]
	}

	*offset_max = offset_index;
    3aec:	703c      	strb	r4, [r7, #0]
}
    3aee:	b011      	add	sp, #68	; 0x44
    3af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3af4:	783b      	ldrb	r3, [r7, #0]
	} while (offset_index < *offset_max);
    3af6:	429c      	cmp	r4, r3
    3af8:	d387      	bcc.n	3a0a <win_offset_calc+0xda>
	if (ticker_id == 0xff) {
    3afa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    3afe:	2bff      	cmp	r3, #255	; 0xff
    3b00:	d1f4      	bne.n	3aec <win_offset_calc+0x1bc>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
    3b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3b04:	681b      	ldr	r3, [r3, #0]
    3b06:	429d      	cmp	r5, r3
    3b08:	bf38      	it	cc
    3b0a:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
    3b0c:	e7ec      	b.n	3ae8 <win_offset_calc+0x1b8>
    3b0e:	783b      	ldrb	r3, [r7, #0]
		if (ticker_id < TICKER_ID_CONN_BASE) {
    3b10:	9006      	str	r0, [sp, #24]
    3b12:	e778      	b.n	3a06 <win_offset_calc+0xd6>
			while (ret_cb == TICKER_STATUS_BUSY) {
    3b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3b16:	2b02      	cmp	r3, #2
    3b18:	d187      	bne.n	3a2a <win_offset_calc+0xfa>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    3b1a:	2102      	movs	r1, #2
    3b1c:	2000      	movs	r0, #0
    3b1e:	f00e fbff 	bl	12320 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    3b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3b24:	2b02      	cmp	r3, #2
    3b26:	d0f8      	beq.n	3b1a <win_offset_calc+0x1ea>
    3b28:	e77f      	b.n	3a2a <win_offset_calc+0xfa>
			if (conn->lll.role) {
    3b2a:	2a00      	cmp	r2, #0
			ticks_slot_abs_curr += conn->evt.ticks_slot +
    3b2c:	68c1      	ldr	r1, [r0, #12]
				ticks_to_expire + ticks_prepare_reduced;
    3b2e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
			if (conn->lll.role) {
    3b32:	da4d      	bge.n	3bd0 <win_offset_calc+0x2a0>
				ticks_slot_abs_curr += ticks_slot_margin;
    3b34:	f101 023c 	add.w	r2, r1, #60	; 0x3c
    3b38:	9208      	str	r2, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    3b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3b3c:	6812      	ldr	r2, [r2, #0]
    3b3e:	454a      	cmp	r2, r9
				ticks_slot_margin =
    3b40:	f04f 0814 	mov.w	r8, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    3b44:	f4bf af58 	bcs.w	39f8 <win_offset_calc+0xc8>
				if (ticks_to_expire_prev <
    3b48:	4295      	cmp	r5, r2
    3b4a:	bf38      	it	cc
    3b4c:	4615      	movcc	r5, r2
				while ((offset_index < *offset_max) &&
    3b4e:	429c      	cmp	r4, r3
    3b50:	d237      	bcs.n	3bc2 <win_offset_calc+0x292>
    3b52:	9b04      	ldr	r3, [sp, #16]
    3b54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3b56:	971a      	str	r7, [sp, #104]	; 0x68
    3b58:	4413      	add	r3, r2
    3b5a:	4498      	add	r8, r3
    3b5c:	e01b      	b.n	3b96 <win_offset_calc+0x266>
					offset = HAL_TICKER_TICKS_TO_US(
    3b5e:	f7fc facf 	bl	100 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    3b62:	4b30      	ldr	r3, [pc, #192]	; (3c24 <win_offset_calc+0x2f4>)
					if (offset >= conn_interval) {
    3b64:	9f05      	ldr	r7, [sp, #20]
						ticks_slot_abs_prev) / 1250;
    3b66:	fba3 3000 	umull	r3, r0, r3, r0
					offset = HAL_TICKER_TICKS_TO_US(
    3b6a:	f3c0 268f 	ubfx	r6, r0, #10, #16
					if (offset >= conn_interval) {
    3b6e:	42be      	cmp	r6, r7
					sys_put_le16(offset,
    3b70:	eb0b 0244 	add.w	r2, fp, r4, lsl #1
					offset_index++;
    3b74:	f104 0301 	add.w	r3, r4, #1
    3b78:	ea4f 2116 	mov.w	r1, r6, lsr #8
						ticks_slot_abs_prev) / 1250;
    3b7c:	ea4f 2090 	mov.w	r0, r0, lsr #10
					ticks_to_expire_prev +=
    3b80:	f105 0528 	add.w	r5, r5, #40	; 0x28
					if (offset >= conn_interval) {
    3b84:	d233      	bcs.n	3bee <win_offset_calc+0x2be>
	dst[0] = val;
    3b86:	f80b 0014 	strb.w	r0, [fp, r4, lsl #1]
	dst[1] = val >> 8;
    3b8a:	7051      	strb	r1, [r2, #1]
				while ((offset_index < *offset_max) &&
    3b8c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    3b8e:	7812      	ldrb	r2, [r2, #0]
					offset_index++;
    3b90:	b2dc      	uxtb	r4, r3
				while ((offset_index < *offset_max) &&
    3b92:	42a2      	cmp	r2, r4
    3b94:	d922      	bls.n	3bdc <win_offset_calc+0x2ac>
				       (ticker_ticks_diff_get(
    3b96:	4629      	mov	r1, r5
    3b98:	4648      	mov	r0, r9
    3b9a:	f00e fbdb 	bl	12354 <ticker_ticks_diff_get>
					offset = HAL_TICKER_TICKS_TO_US(
    3b9e:	9b04      	ldr	r3, [sp, #16]
    3ba0:	4a21      	ldr	r2, [pc, #132]	; (3c28 <win_offset_calc+0x2f8>)
    3ba2:	442b      	add	r3, r5
				       (ticker_ticks_diff_get(
    3ba4:	4684      	mov	ip, r0
				while ((offset_index < *offset_max) &&
    3ba6:	45c4      	cmp	ip, r8
					offset = HAL_TICKER_TICKS_TO_US(
    3ba8:	fba3 0102 	umull	r0, r1, r3, r2
    3bac:	f04f 0207 	mov.w	r2, #7
    3bb0:	fb02 1103 	mla	r1, r2, r3, r1
    3bb4:	f04f 0a00 	mov.w	sl, #0
    3bb8:	a313      	add	r3, pc, #76	; (adr r3, 3c08 <win_offset_calc+0x2d8>)
    3bba:	e9d3 2300 	ldrd	r2, r3, [r3]
				while ((offset_index < *offset_max) &&
    3bbe:	d2ce      	bcs.n	3b5e <win_offset_calc+0x22e>
    3bc0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
				*ticks_to_offset_next = ticks_to_expire_prev;
    3bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3bc4:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
    3bc6:	9b05      	ldr	r3, [sp, #20]
    3bc8:	42b3      	cmp	r3, r6
    3bca:	d915      	bls.n	3bf8 <win_offset_calc+0x2c8>
    3bcc:	783b      	ldrb	r3, [r7, #0]
    3bce:	e713      	b.n	39f8 <win_offset_calc+0xc8>
			ticks_slot_abs_curr += conn->evt.ticks_slot +
    3bd0:	f101 0228 	add.w	r2, r1, #40	; 0x28
    3bd4:	9208      	str	r2, [sp, #32]
			uint32_t ticks_slot_margin = 0U;
    3bd6:	f04f 0800 	mov.w	r8, #0
    3bda:	e708      	b.n	39ee <win_offset_calc+0xbe>
				*ticks_to_offset_next = ticks_to_expire_prev;
    3bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3bde:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    3be0:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
    3be2:	783b      	ldrb	r3, [r7, #0]
    3be4:	e708      	b.n	39f8 <win_offset_calc+0xc8>
		*ticks_to_offset_next = ticks_to_expire_prev;
    3be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_to_expire_prev = 0U;
    3be8:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
    3bea:	601d      	str	r5, [r3, #0]
    3bec:	e77e      	b.n	3aec <win_offset_calc+0x1bc>
				*ticks_to_offset_next = ticks_to_expire_prev;
    3bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3bf0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    3bf2:	f8c3 a000 	str.w	sl, [r3]
						ticks_to_expire_prev = 0U;
    3bf6:	4655      	mov	r5, sl
	if (ticker_id == 0xff) {
    3bf8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    3bfc:	2bff      	cmp	r3, #255	; 0xff
    3bfe:	f47f af75 	bne.w	3aec <win_offset_calc+0x1bc>
    3c02:	e726      	b.n	3a52 <win_offset_calc+0x122>
    3c04:	f3af 8000 	nop.w
    3c08:	3b9aca00 	.word	0x3b9aca00
    3c0c:	00000000 	.word	0x00000000
    3c10:	0002770c 	.word	0x0002770c
    3c14:	00026f3c 	.word	0x00026f3c
    3c18:	00026ecc 	.word	0x00026ecc
    3c1c:	00019875 	.word	0x00019875
    3c20:	00027750 	.word	0x00027750
    3c24:	d1b71759 	.word	0xd1b71759
    3c28:	1afd498d 	.word	0x1afd498d
    3c2c:	00000000 	.word	0x00000000

00003c30 <ull_sched_after_mstr_slot_get>:
{
    3c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c34:	b08f      	sub	sp, #60	; 0x3c
    3c36:	461c      	mov	r4, r3
	ticker_id = ticker_id_prev = 0xff;
    3c38:	26ff      	movs	r6, #255	; 0xff
{
    3c3a:	9309      	str	r3, [sp, #36]	; 0x24
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    3c3c:	3104      	adds	r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3c3e:	2300      	movs	r3, #0
    3c40:	f8df 8110 	ldr.w	r8, [pc, #272]	; 3d54 <ull_sched_after_mstr_slot_get+0x124>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    3c44:	f8df b110 	ldr.w	fp, [pc, #272]	; 3d58 <ull_sched_after_mstr_slot_get+0x128>
    3c48:	f8df a110 	ldr.w	sl, [pc, #272]	; 3d5c <ull_sched_after_mstr_slot_get+0x12c>
    3c4c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 3d60 <ull_sched_after_mstr_slot_get+0x130>
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3c50:	6023      	str	r3, [r4, #0]
	ticker_id = ticker_id_prev = 0xff;
    3c52:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
    3c56:	9604      	str	r6, [sp, #16]
	ticks_slot_abs_prev = 0U;
    3c58:	9305      	str	r3, [sp, #20]
{
    3c5a:	4604      	mov	r4, r0
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    3c5c:	9108      	str	r1, [sp, #32]
{
    3c5e:	4615      	mov	r5, r2
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3c60:	930c      	str	r3, [sp, #48]	; 0x30
    3c62:	9306      	str	r3, [sp, #24]
    3c64:	af0d      	add	r7, sp, #52	; 0x34
    3c66:	ae0c      	add	r6, sp, #48	; 0x30
		uint32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3c68:	f04f 0c02 	mov.w	ip, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    3c6c:	e9cd 8701 	strd	r8, r7, [sp, #4]
    3c70:	9600      	str	r6, [sp, #0]
    3c72:	462b      	mov	r3, r5
    3c74:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
    3c78:	4621      	mov	r1, r4
    3c7a:	2000      	movs	r0, #0
		uint32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3c7c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    3c80:	f00e fb08 	bl	12294 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    3c84:	2802      	cmp	r0, #2
    3c86:	d031      	beq.n	3cec <ull_sched_after_mstr_slot_get+0xbc>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    3c88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d134      	bne.n	3cf8 <ull_sched_after_mstr_slot_get+0xc8>
		if (ticker_id == 0xff) {
    3c8e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    3c92:	28ff      	cmp	r0, #255	; 0xff
    3c94:	d040      	beq.n	3d18 <ull_sched_after_mstr_slot_get+0xe8>
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
    3c96:	3805      	subs	r0, #5
    3c98:	b2c3      	uxtb	r3, r0
    3c9a:	2b01      	cmp	r3, #1
    3c9c:	d8e4      	bhi.n	3c68 <ull_sched_after_mstr_slot_get+0x38>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    3c9e:	b280      	uxth	r0, r0
    3ca0:	f012 fc8e 	bl	165c0 <ll_conn_get>
		if (conn && !conn->lll.role) {
    3ca4:	2800      	cmp	r0, #0
    3ca6:	d0df      	beq.n	3c68 <ull_sched_after_mstr_slot_get+0x38>
    3ca8:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
    3cac:	2b00      	cmp	r3, #0
    3cae:	dbdb      	blt.n	3c68 <ull_sched_after_mstr_slot_get+0x38>
			if ((ticker_id_prev != 0xff) &&
    3cb0:	9904      	ldr	r1, [sp, #16]
			ticks_slot_abs_curr +=
    3cb2:	68c3      	ldr	r3, [r0, #12]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
    3cb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if ((ticker_id_prev != 0xff) &&
    3cb6:	29ff      	cmp	r1, #255	; 0xff
			ticks_slot_abs_curr +=
    3cb8:	f103 0304 	add.w	r3, r3, #4
			if ((ticker_id_prev != 0xff) &&
    3cbc:	d00c      	beq.n	3cd8 <ull_sched_after_mstr_slot_get+0xa8>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    3cbe:	9906      	ldr	r1, [sp, #24]
    3cc0:	9307      	str	r3, [sp, #28]
    3cc2:	4610      	mov	r0, r2
    3cc4:	9204      	str	r2, [sp, #16]
    3cc6:	f00e fb45 	bl	12354 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    3cca:	9b05      	ldr	r3, [sp, #20]
    3ccc:	9a08      	ldr	r2, [sp, #32]
    3cce:	1899      	adds	r1, r3, r2
			if ((ticker_id_prev != 0xff) &&
    3cd0:	4288      	cmp	r0, r1
    3cd2:	9a04      	ldr	r2, [sp, #16]
    3cd4:	9b07      	ldr	r3, [sp, #28]
    3cd6:	d822      	bhi.n	3d1e <ull_sched_after_mstr_slot_get+0xee>
			ticks_to_expire_prev = ticks_to_expire_normal;
    3cd8:	e9cd 3205 	strd	r3, r2, [sp, #20]
			ticker_id_prev = ticker_id;
    3cdc:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3ce0:	9304      	str	r3, [sp, #16]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    3ce2:	e7c1      	b.n	3c68 <ull_sched_after_mstr_slot_get+0x38>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    3ce4:	4621      	mov	r1, r4
    3ce6:	2000      	movs	r0, #0
    3ce8:	f00e fb1a 	bl	12320 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    3cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3cee:	2b02      	cmp	r3, #2
    3cf0:	d0f8      	beq.n	3ce4 <ull_sched_after_mstr_slot_get+0xb4>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    3cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	d0ca      	beq.n	3c8e <ull_sched_after_mstr_slot_get+0x5e>
    3cf8:	2352      	movs	r3, #82	; 0x52
    3cfa:	465a      	mov	r2, fp
    3cfc:	4651      	mov	r1, sl
    3cfe:	4648      	mov	r0, r9
    3d00:	f01c fc9e 	bl	20640 <printk>
    3d04:	4040      	eors	r0, r0
    3d06:	f380 8811 	msr	BASEPRI, r0
    3d0a:	f04f 0003 	mov.w	r0, #3
    3d0e:	df02      	svc	2
		if (ticker_id == 0xff) {
    3d10:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    3d14:	28ff      	cmp	r0, #255	; 0xff
    3d16:	d1be      	bne.n	3c96 <ull_sched_after_mstr_slot_get+0x66>
	if (ticker_id_prev != 0xff) {
    3d18:	9b04      	ldr	r3, [sp, #16]
    3d1a:	2bff      	cmp	r3, #255	; 0xff
    3d1c:	d010      	beq.n	3d40 <ull_sched_after_mstr_slot_get+0x110>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3d1e:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    3d22:	480b      	ldr	r0, [pc, #44]	; (3d50 <ull_sched_after_mstr_slot_get+0x120>)
    3d24:	4413      	add	r3, r2
    3d26:	fba3 0100 	umull	r0, r1, r3, r0
    3d2a:	2207      	movs	r2, #7
    3d2c:	fb02 1103 	mla	r1, r2, r3, r1
    3d30:	a305      	add	r3, pc, #20	; (adr r3, 3d48 <ull_sched_after_mstr_slot_get+0x118>)
    3d32:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d36:	f7fc f9e3 	bl	100 <__aeabi_uldivmod>
    3d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
						    ticks_slot_abs_prev) +
    3d3c:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3d3e:	6018      	str	r0, [r3, #0]
}
    3d40:	b00f      	add	sp, #60	; 0x3c
    3d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d46:	bf00      	nop
    3d48:	3b9aca00 	.word	0x3b9aca00
    3d4c:	00000000 	.word	0x00000000
    3d50:	1afd498d 	.word	0x1afd498d
    3d54:	00019875 	.word	0x00019875
    3d58:	0002770c 	.word	0x0002770c
    3d5c:	00027750 	.word	0x00027750
    3d60:	00026ecc 	.word	0x00026ecc
    3d64:	00000000 	.word	0x00000000

00003d68 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
    3d68:	b570      	push	{r4, r5, r6, lr}
    3d6a:	461c      	mov	r4, r3
    3d6c:	b082      	sub	sp, #8
    3d6e:	4615      	mov	r5, r2
    3d70:	4606      	mov	r6, r0
	uint32_t ticks_anchor_offset = ticks_anchor;

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    3d72:	aa01      	add	r2, sp, #4
    3d74:	2002      	movs	r0, #2
	uint32_t ticks_anchor_offset = ticks_anchor;
    3d76:	9501      	str	r5, [sp, #4]
	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    3d78:	f7ff ff5a 	bl	3c30 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
    3d7c:	6823      	ldr	r3, [r4, #0]
    3d7e:	b30b      	cbz	r3, 3dc4 <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
    3d80:	9801      	ldr	r0, [sp, #4]
    3d82:	1b43      	subs	r3, r0, r5
    3d84:	021b      	lsls	r3, r3, #8
    3d86:	d41f      	bmi.n	3dc8 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
    3d88:	4629      	mov	r1, r5
    3d8a:	f00e fae3 	bl	12354 <ticker_ticks_diff_get>
    3d8e:	4b1a      	ldr	r3, [pc, #104]	; (3df8 <after_mstr_offset_get+0x90>)
    3d90:	4602      	mov	r2, r0
    3d92:	fba0 0103 	umull	r0, r1, r0, r3
    3d96:	2307      	movs	r3, #7
    3d98:	fb03 1102 	mla	r1, r3, r2, r1
    3d9c:	a314      	add	r3, pc, #80	; (adr r3, 3df0 <after_mstr_offset_get+0x88>)
    3d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3da2:	f7fc f9ad 	bl	100 <__aeabi_uldivmod>
    3da6:	6822      	ldr	r2, [r4, #0]
    3da8:	4402      	add	r2, r0
    3daa:	6022      	str	r2, [r4, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
    3dac:	2a00      	cmp	r2, #0
    3dae:	db09      	blt.n	3dc4 <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * 1250;
    3db0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    3db4:	fb01 f006 	mul.w	r0, r1, r6

		while (*win_offset_us > conn_interval_us) {
    3db8:	4290      	cmp	r0, r2
    3dba:	d203      	bcs.n	3dc4 <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
    3dbc:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
    3dbe:	4290      	cmp	r0, r2
    3dc0:	d3fc      	bcc.n	3dbc <after_mstr_offset_get+0x54>
    3dc2:	6022      	str	r2, [r4, #0]
		}
	}
}
    3dc4:	b002      	add	sp, #8
    3dc6:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
    3dc8:	4601      	mov	r1, r0
    3dca:	4628      	mov	r0, r5
    3dcc:	f00e fac2 	bl	12354 <ticker_ticks_diff_get>
    3dd0:	4b09      	ldr	r3, [pc, #36]	; (3df8 <after_mstr_offset_get+0x90>)
    3dd2:	4602      	mov	r2, r0
    3dd4:	fba0 0103 	umull	r0, r1, r0, r3
    3dd8:	2307      	movs	r3, #7
    3dda:	fb03 1102 	mla	r1, r3, r2, r1
    3dde:	a304      	add	r3, pc, #16	; (adr r3, 3df0 <after_mstr_offset_get+0x88>)
    3de0:	e9d3 2300 	ldrd	r2, r3, [r3]
    3de4:	f7fc f98c 	bl	100 <__aeabi_uldivmod>
    3de8:	6822      	ldr	r2, [r4, #0]
    3dea:	1a12      	subs	r2, r2, r0
    3dec:	6022      	str	r2, [r4, #0]
    3dee:	e7dd      	b.n	3dac <after_mstr_offset_get+0x44>
    3df0:	3b9aca00 	.word	0x3b9aca00
    3df4:	00000000 	.word	0x00000000
    3df8:	1afd498d 	.word	0x1afd498d
    3dfc:	00000000 	.word	0x00000000

00003e00 <ull_sched_mfy_win_offset_select>:
{
    3e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e04:	f8b0 2180 	ldrh.w	r2, [r0, #384]	; 0x180
{
    3e08:	b088      	sub	sp, #32
    3e0a:	4605      	mov	r5, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e0c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    3e10:	4845      	ldr	r0, [pc, #276]	; (3f28 <ull_sched_mfy_win_offset_select+0x128>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3e12:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e14:	fb03 f302 	mul.w	r3, r3, r2
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3e18:	2700      	movs	r7, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e1a:	fb83 0100 	smull	r0, r1, r3, r0
	uint8_t offset_m_max = OFFSET_M_MAX;
    3e1e:	2406      	movs	r4, #6
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e20:	a33f      	add	r3, pc, #252	; (adr r3, 3f20 <ull_sched_mfy_win_offset_select+0x120>)
    3e22:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3e26:	6077      	str	r7, [r6, #4]
    3e28:	9705      	str	r7, [sp, #20]
    3e2a:	60b7      	str	r7, [r6, #8]
	uint8_t offset_m_max = OFFSET_M_MAX;
    3e2c:	f88d 400f 	strb.w	r4, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e30:	f7fc f966 	bl	100 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
    3e34:	f10d 020f 	add.w	r2, sp, #15
    3e38:	9601      	str	r6, [sp, #4]
    3e3a:	f8b5 3176 	ldrh.w	r3, [r5, #374]	; 0x176
    3e3e:	9200      	str	r2, [sp, #0]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e40:	4604      	mov	r4, r0
	win_offset_calc(conn, 1, &ticks_to_offset,
    3e42:	2101      	movs	r1, #1
    3e44:	4628      	mov	r0, r5
    3e46:	aa04      	add	r2, sp, #16
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e48:	9404      	str	r4, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
    3e4a:	f7ff fd71 	bl	3930 <win_offset_calc>
		while (offset_index_m < offset_m_max) {
    3e4e:	f89d c00f 	ldrb.w	ip, [sp, #15]
    3e52:	f10c 34ff 	add.w	r4, ip, #4294967295	; 0xffffffff
    3e56:	b2e4      	uxtb	r4, r4
    3e58:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
    3e5c:	4639      	mov	r1, r7
    3e5e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    3e62:	462f      	mov	r7, r5
    3e64:	f105 0e0c 	add.w	lr, r5, #12
			if (win_offset_s != 0xffff) {
    3e68:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return ((uint16_t)src[1] << 8) | src[0];
    3e6c:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
    3e70:	f897 2180 	ldrb.w	r2, [r7, #384]	; 0x180
    3e74:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    3e78:	fa0f f882 	sxth.w	r8, r2
		while (offset_index_m < offset_m_max) {
    3e7c:	f1bc 0f00 	cmp.w	ip, #0
    3e80:	d009      	beq.n	3e96 <ull_sched_mfy_win_offset_select+0x96>
    3e82:	4633      	mov	r3, r6
			if (win_offset_s != 0xffff) {
    3e84:	4282      	cmp	r2, r0
    3e86:	d003      	beq.n	3e90 <ull_sched_mfy_win_offset_select+0x90>
				if (win_offset_s ==
    3e88:	8819      	ldrh	r1, [r3, #0]
    3e8a:	4291      	cmp	r1, r2
    3e8c:	d017      	beq.n	3ebe <ull_sched_mfy_win_offset_select+0xbe>
				has_offset_s = 1U;
    3e8e:	2101      	movs	r1, #1
    3e90:	3302      	adds	r3, #2
		while (offset_index_m < offset_m_max) {
    3e92:	429c      	cmp	r4, r3
    3e94:	d1f6      	bne.n	3e84 <ull_sched_mfy_win_offset_select+0x84>
	while (offset_index_s < OFFSET_S_MAX) {
    3e96:	3702      	adds	r7, #2
    3e98:	45be      	cmp	lr, r7
    3e9a:	d1e7      	bne.n	3e6c <ull_sched_mfy_win_offset_select+0x6c>
	} else if (!has_offset_s) {
    3e9c:	b9f1      	cbnz	r1, 3edc <ull_sched_mfy_win_offset_select+0xdc>
		conn->llcp_cu.win_offset_us = win_offset_m[0] * 1250;
    3e9e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    3ea2:	f8d5 10f0 	ldr.w	r1, [r5, #240]	; 0xf0
		conn->llcp_cu.win_offset_us = win_offset_m[0] * 1250;
    3ea6:	f240 42e2 	movw	r2, #1250	; 0x4e2
    3eaa:	fb02 f203 	mul.w	r2, r2, r3
	dst[1] = val >> 8;
    3eae:	0a18      	lsrs	r0, r3, #8
    3eb0:	f8c5 2110 	str.w	r2, [r5, #272]	; 0x110
	dst[0] = val;
    3eb4:	700b      	strb	r3, [r1, #0]
	dst[1] = val >> 8;
    3eb6:	7048      	strb	r0, [r1, #1]
}
    3eb8:	b008      	add	sp, #32
    3eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    3ebe:	f8d5 10f0 	ldr.w	r1, [r5, #240]	; 0xf0
		conn->llcp_cu.win_offset_us = win_offset_s * 1250;
    3ec2:	f240 43e2 	movw	r3, #1250	; 0x4e2
    3ec6:	fb03 f302 	mul.w	r3, r3, r2
    3eca:	0a12      	lsrs	r2, r2, #8
    3ecc:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
	dst[0] = val;
    3ed0:	f881 8000 	strb.w	r8, [r1]
	dst[1] = val >> 8;
    3ed4:	704a      	strb	r2, [r1, #1]
}
    3ed6:	b008      	add	sp, #32
    3ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->llcp_ack = conn->llcp_req;
    3edc:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    3ee0:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
		conn->llcp_ack = conn->llcp_req;
    3ee4:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    3ee8:	f885 3171 	strb.w	r3, [r5, #369]	; 0x171
		ull_conn_upd_curr_reset();
    3eec:	f015 f880 	bl	18ff0 <ull_conn_upd_curr_reset>
			((uint8_t *)conn->llcp.conn_upd.pdu_win_offset -
    3ef0:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3ef4:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    3ef8:	2503      	movs	r5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3efa:	432a      	orrs	r2, r5
		pdu_ctrl_tx->llctrl.opcode =
    3efc:	2411      	movs	r4, #17
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    3efe:	200f      	movs	r0, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    3f00:	2120      	movs	r1, #32
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3f02:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    3f06:	f803 5c04 	strb.w	r5, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    3f0a:	f803 4c02 	strb.w	r4, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    3f0e:	f803 0c01 	strb.w	r0, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    3f12:	7019      	strb	r1, [r3, #0]
}
    3f14:	b008      	add	sp, #32
    3f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f1a:	bf00      	nop
    3f1c:	f3af 8000 	nop.w
    3f20:	1afd498d 	.word	0x1afd498d
    3f24:	00000007 	.word	0x00000007
    3f28:	3b9aca00 	.word	0x3b9aca00
    3f2c:	00000000 	.word	0x00000000

00003f30 <isr_rx>:

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void isr_rx(void *param)
{
    3f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f34:	b083      	sub	sp, #12
    3f36:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_latency_capture();
	}

	/* Read radio status and events */
	trx_done = radio_is_done();
    3f38:	f019 fab8 	bl	1d4ac <radio_is_done>
	if (trx_done) {
    3f3c:	f010 0fff 	tst.w	r0, #255	; 0xff
    3f40:	d10a      	bne.n	3f58 <isr_rx+0x28>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
		devmatch_id = irkmatch_id = 0xFF;
	}

	/* Clear radio status and events */
	lll_isr_status_reset();
    3f42:	f017 f9f3 	bl	1b32c <lll_isr_status_reset>
			return;
		}
	}

isr_rx_do_close:
	radio_isr_set(isr_done, lll);
    3f46:	489c      	ldr	r0, [pc, #624]	; (41b8 <isr_rx+0x288>)
    3f48:	4621      	mov	r1, r4
    3f4a:	f019 f96d 	bl	1d228 <radio_isr_set>
	radio_disable();
}
    3f4e:	b003      	add	sp, #12
    3f50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
    3f54:	f019 ba7c 	b.w	1d450 <radio_disable>
		crc_ok = radio_crc_is_valid();
    3f58:	f019 fac8 	bl	1d4ec <radio_crc_is_valid>
    3f5c:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
    3f60:	f019 fb4e 	bl	1d600 <radio_filter_has_match>
    3f64:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
    3f66:	f019 fb55 	bl	1d614 <radio_filter_match_get>
    3f6a:	4606      	mov	r6, r0
		irkmatch_ok = radio_ar_has_match();
    3f6c:	f019 fd6e 	bl	1da4c <radio_ar_has_match>
    3f70:	b2c5      	uxtb	r5, r0
		irkmatch_id = radio_ar_match_get();
    3f72:	f019 fd59 	bl	1da28 <radio_ar_match_get>
    3f76:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
    3f78:	f019 fb0a 	bl	1d590 <radio_rssi_is_ready>
    3f7c:	4681      	mov	r9, r0
	lll_isr_status_reset();
    3f7e:	f017 f9d5 	bl	1b32c <lll_isr_status_reset>
	rl_idx = devmatch_ok ?
    3f82:	2f00      	cmp	r7, #0
    3f84:	f040 80a9 	bne.w	40da <isr_rx+0x1aa>
    3f88:	2d00      	cmp	r5, #0
    3f8a:	f040 80b8 	bne.w	40fe <isr_rx+0x1ce>
    3f8e:	26ff      	movs	r6, #255	; 0xff
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
    3f90:	f1b8 0f00 	cmp.w	r8, #0
    3f94:	d0d7      	beq.n	3f46 <isr_rx+0x16>

static inline bool isr_rx_scan_check(struct lll_scan *lll, uint8_t irkmatch_ok,
				     uint8_t devmatch_ok, uint8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return (((lll->filter_policy & 0x01) == 0) &&
    3f96:	7da3      	ldrb	r3, [r4, #22]
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
    3f98:	0719      	lsls	r1, r3, #28
    3f9a:	f100 80a6 	bmi.w	40ea <isr_rx+0x1ba>
	return (((lll->filter_policy & 0x01) == 0) &&
    3f9e:	2f00      	cmp	r7, #0
    3fa0:	f040 81e0 	bne.w	4364 <isr_rx+0x434>
{
	struct node_rx_pdu *node_rx;
	struct pdu_adv *pdu_adv_rx;
	bool dir_report = false;

	node_rx = ull_pdu_rx_alloc_peek(1);
    3fa4:	2001      	movs	r0, #1
    3fa6:	f011 f87f 	bl	150a8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    3faa:	4607      	mov	r7, r0
    3fac:	2800      	cmp	r0, #0
    3fae:	f000 81f1 	beq.w	4394 <isr_rx+0x464>
	pdu_adv_rx = (void *)node_rx->pdu;

	if (0) {
#if defined(CONFIG_BT_CENTRAL)
	/* Initiator */
	} else if ((lll->conn) &&
    3fb2:	68a3      	ldr	r3, [r4, #8]
		rssi_ready = radio_rssi_is_ready();
    3fb4:	fa5f f989 	uxtb.w	r9, r9
	} else if ((lll->conn) &&
    3fb8:	2b00      	cmp	r3, #0
    3fba:	f000 80d2 	beq.w	4162 <isr_rx+0x232>
}

static inline bool isr_scan_init_check(struct lll_scan *lll,
				       struct pdu_adv *pdu, uint8_t rl_idx)
{
	return ((((lll->filter_policy & 0x01) != 0U) ||
    3fbe:	7da3      	ldrb	r3, [r4, #22]
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
    3fc0:	071a      	lsls	r2, r3, #28
    3fc2:	f140 81db 	bpl.w	437c <isr_rx+0x44c>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    3fc6:	7f38      	ldrb	r0, [r7, #28]
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
    3fc8:	f010 030f 	ands.w	r3, r0, #15
    3fcc:	f040 809d 	bne.w	410a <isr_rx+0x1da>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    3fd0:	7f7b      	ldrb	r3, [r7, #29]
    3fd2:	2b25      	cmp	r3, #37	; 0x25
    3fd4:	f200 81a2 	bhi.w	431c <isr_rx+0x3ec>
			rx = ull_pdu_rx_alloc_peek(4);
    3fd8:	2004      	movs	r0, #4
    3fda:	f011 f865 	bl	150a8 <ull_pdu_rx_alloc_peek>
		if (!rx) {
    3fde:	2800      	cmp	r0, #0
    3fe0:	d0b1      	beq.n	3f46 <isr_rx+0x16>
		pdu_end_us = radio_tmr_end_get();
    3fe2:	f019 fc3b 	bl	1d85c <radio_tmr_end_get>
		if (!lll->ticks_window) {
    3fe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		pdu_end_us = radio_tmr_end_get();
    3fe8:	4680      	mov	r8, r0
		if (!lll->ticks_window) {
    3fea:	b943      	cbnz	r3, 3ffe <isr_rx+0xce>
			scan_interval_us = lll->interval * 625U;
    3fec:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    3fee:	f240 2371 	movw	r3, #625	; 0x271
    3ff2:	fb03 f302 	mul.w	r3, r3, r2
			pdu_end_us %= scan_interval_us;
    3ff6:	fbb0 f2f3 	udiv	r2, r0, r3
    3ffa:	fb03 0812 	mls	r8, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
    3ffe:	6823      	ldr	r3, [r4, #0]
    4000:	486e      	ldr	r0, [pc, #440]	; (41bc <isr_rx+0x28c>)
    4002:	68db      	ldr	r3, [r3, #12]
    4004:	2207      	movs	r2, #7
    4006:	fba3 0100 	umull	r0, r1, r3, r0
    400a:	fb02 1103 	mla	r1, r2, r3, r1
    400e:	a368      	add	r3, pc, #416	; (adr r3, 41b0 <isr_rx+0x280>)
    4010:	e9d3 2300 	ldrd	r2, r3, [r3]
    4014:	f7fc f874 	bl	100 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    4018:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
    401c:	4543      	cmp	r3, r8
    401e:	d392      	bcc.n	3f46 <isr_rx+0x16>
		radio_switch_complete_and_disable();
    4020:	f019 fa90 	bl	1d544 <radio_switch_complete_and_disable>
		lll_conn = lll->conn;
    4024:	f8d4 a008 	ldr.w	sl, [r4, #8]
		pdu_tx = (void *)radio_pkt_scratch_get();
    4028:	f019 fa6e 	bl	1d508 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    402c:	7f3b      	ldrb	r3, [r7, #28]
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    402e:	7802      	ldrb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    4030:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    4034:	01db      	lsls	r3, r3, #7
    4036:	f002 0250 	and.w	r2, r2, #80	; 0x50
    403a:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    403e:	4313      	orrs	r3, r2
		pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
    4040:	2222      	movs	r2, #34	; 0x22
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    4042:	7003      	strb	r3, [r0, #0]
		pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
    4044:	7042      	strb	r2, [r0, #1]
		pdu_tx = (void *)radio_pkt_scratch_get();
    4046:	4681      	mov	r9, r0
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4048:	4630      	mov	r0, r6
    404a:	f016 fc21 	bl	1a890 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    404e:	7de3      	ldrb	r3, [r4, #23]
    4050:	07da      	lsls	r2, r3, #31
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4052:	4683      	mov	fp, r0
		if (lll->rpa_gen && lrpa) {
    4054:	f109 0002 	add.w	r0, r9, #2
    4058:	f140 8206 	bpl.w	4468 <isr_rx+0x538>
    405c:	f1bb 0f00 	cmp.w	fp, #0
    4060:	f000 8202 	beq.w	4468 <isr_rx+0x538>
			pdu_tx->tx_addr = 1;
    4064:	f899 3000 	ldrb.w	r3, [r9]
    4068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    406c:	f889 3000 	strb.w	r3, [r9]
			memcpy(&pdu_tx->connect_ind.init_addr[0], lrpa->val,
    4070:	2206      	movs	r2, #6
    4072:	4659      	mov	r1, fp
    4074:	f01e fb54 	bl	22720 <memcpy>
		memcpy(&pdu_tx->connect_ind.adv_addr[0],
    4078:	2206      	movs	r2, #6
    407a:	f107 011e 	add.w	r1, r7, #30
    407e:	f109 0008 	add.w	r0, r9, #8
    4082:	f01e fb4d 	bl	22720 <memcpy>
		memcpy(&pdu_tx->connect_ind.access_addr[0],
    4086:	2204      	movs	r2, #4
    4088:	f10a 0108 	add.w	r1, sl, #8
    408c:	f109 000e 	add.w	r0, r9, #14
    4090:	f01e fb46 	bl	22720 <memcpy>
		memcpy(&pdu_tx->connect_ind.crc_init[0],
    4094:	2203      	movs	r2, #3
    4096:	f10a 010c 	add.w	r1, sl, #12
    409a:	f109 0012 	add.w	r0, r9, #18
    409e:	f01e fb3f 	bl	22720 <memcpy>
		pdu_tx->connect_ind.win_size = 1;
    40a2:	2301      	movs	r3, #1
    40a4:	f889 3015 	strb.w	r3, [r9, #21]
		conn_interval_us = (uint32_t)lll_conn->interval * 1250U;
    40a8:	f8ba 3012 	ldrh.w	r3, [sl, #18]
    40ac:	9301      	str	r3, [sp, #4]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    40ae:	f019 fbd5 	bl	1d85c <radio_tmr_end_get>
		    lll->conn_win_offset_us == 0U) {
    40b2:	f8d4 8010 	ldr.w	r8, [r4, #16]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    40b6:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
		if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
    40ba:	f1b8 0f00 	cmp.w	r8, #0
    40be:	f000 81f8 	beq.w	44b2 <isr_rx+0x582>
		conn_interval_us = (uint32_t)lll_conn->interval * 1250U;
    40c2:	9901      	ldr	r1, [sp, #4]
    40c4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    40c8:	fb02 f201 	mul.w	r2, r2, r1
			while ((conn_space_us & ((uint32_t)1 << 31)) ||
    40cc:	f1b8 0f00 	cmp.w	r8, #0
    40d0:	db01      	blt.n	40d6 <isr_rx+0x1a6>
    40d2:	4543      	cmp	r3, r8
    40d4:	d974      	bls.n	41c0 <isr_rx+0x290>
				conn_space_us += conn_interval_us;
    40d6:	4490      	add	r8, r2
    40d8:	e7f8      	b.n	40cc <isr_rx+0x19c>
		 ull_filter_lll_rl_idx(!!(lll->filter_policy & 0x01),
    40da:	7da0      	ldrb	r0, [r4, #22]
    40dc:	b2f1      	uxtb	r1, r6
    40de:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    40e2:	f016 fbf3 	bl	1a8cc <ull_filter_lll_rl_idx>
    40e6:	4606      	mov	r6, r0
    40e8:	e752      	b.n	3f90 <isr_rx+0x60>
		(((lll->filter_policy & 0x01) != 0) &&
    40ea:	2f00      	cmp	r7, #0
    40ec:	f47f af5a 	bne.w	3fa4 <isr_rx+0x74>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
    40f0:	4630      	mov	r0, r6
    40f2:	f016 fca7 	bl	1aa44 <ull_filter_lll_irk_whitelisted>
    40f6:	2800      	cmp	r0, #0
    40f8:	f47f af54 	bne.w	3fa4 <isr_rx+0x74>
    40fc:	e723      	b.n	3f46 <isr_rx+0x16>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    40fe:	fa5f f08a 	uxtb.w	r0, sl
    4102:	f016 fc4d 	bl	1a9a0 <ull_filter_lll_rl_irk_idx>
    4106:	4606      	mov	r6, r0
    4108:	e742      	b.n	3f90 <isr_rx+0x60>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    410a:	2b01      	cmp	r3, #1
    410c:	f040 80e0 	bne.w	42d0 <isr_rx+0x3a0>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    4110:	7f7b      	ldrb	r3, [r7, #29]
    4112:	2b0c      	cmp	r3, #12
    4114:	f47f af17 	bne.w	3f46 <isr_rx+0x16>
				       struct pdu_adv *pdu, uint8_t rl_idx,
				       bool *dir_report)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
					   pdu->direct_ind.tgt_addr, rl_idx)) {
    4118:	f107 0824 	add.w	r8, r7, #36	; 0x24
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
    411c:	09c0      	lsrs	r0, r0, #7
    411e:	4641      	mov	r1, r8
    4120:	4632      	mov	r2, r6
    4122:	f016 fd3d 	bl	1aba0 <ull_filter_lll_rl_addr_resolve>
    4126:	2800      	cmp	r0, #0
    4128:	f47f af56 	bne.w	3fd8 <isr_rx+0xa8>
		return true;
	} else if (init && lll->rpa_gen &&
    412c:	7de3      	ldrb	r3, [r4, #23]
    412e:	07db      	lsls	r3, r3, #31
    4130:	f100 81f2 	bmi.w	4518 <isr_rx+0x5e8>
		 */
		return false;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return (((lll->init_addr_type == pdu->rx_addr) &&
    4134:	7da3      	ldrb	r3, [r4, #22]
    4136:	7f38      	ldrb	r0, [r7, #28]
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
			BDADDR_SIZE))) ||
    4138:	f3c3 1280 	ubfx	r2, r3, #6, #1
    413c:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
    4140:	f000 8214 	beq.w	456c <isr_rx+0x63c>

static inline bool isr_scan_tgta_rpa_check(struct lll_scan *lll,
					   struct pdu_adv *pdu,
					   bool *dir_report)
{
	if (((lll->filter_policy & 0x02) != 0U) &&
    4144:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    4148:	0798      	lsls	r0, r3, #30
    414a:	d50a      	bpl.n	4162 <isr_rx+0x232>
    414c:	f997 301c 	ldrsb.w	r3, [r7, #28]
    4150:	2b00      	cmp	r3, #0
    4152:	da06      	bge.n	4162 <isr_rx+0x232>
	    (pdu->rx_addr != 0) &&
    4154:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    4158:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    415c:	2b40      	cmp	r3, #64	; 0x40
    415e:	f43f af3b 	beq.w	3fd8 <isr_rx+0xa8>
    4162:	7f38      	ldrb	r0, [r7, #28]
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    4164:	f010 030f 	ands.w	r3, r0, #15
    4168:	f040 80b2 	bne.w	42d0 <isr_rx+0x3a0>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    416c:	7f7b      	ldrb	r3, [r7, #29]
    416e:	2b25      	cmp	r3, #37	; 0x25
    4170:	f63f aee9 	bhi.w	3f46 <isr_rx+0x16>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    4174:	f994 2016 	ldrsb.w	r2, [r4, #22]
    4178:	2a00      	cmp	r2, #0
    417a:	f2c0 811e 	blt.w	43ba <isr_rx+0x48a>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    417e:	2b25      	cmp	r3, #37	; 0x25
	bool dir_report = false;
    4180:	bf98      	it	ls
    4182:	f04f 0800 	movls.w	r8, #0
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    4186:	f200 80c9 	bhi.w	431c <isr_rx+0x3ec>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    418a:	2b00      	cmp	r3, #0
    418c:	f43f aedb 	beq.w	3f46 <isr_rx+0x16>
		 (pdu_adv_rx->len != 0) &&
    4190:	68a3      	ldr	r3, [r4, #8]
    4192:	2b00      	cmp	r3, #0
    4194:	f47f aed7 	bne.w	3f46 <isr_rx+0x16>
		err = isr_rx_scan_report(lll, rssi_ready,
    4198:	2d00      	cmp	r5, #0
    419a:	bf14      	ite	ne
    419c:	4631      	movne	r1, r6
    419e:	21ff      	moveq	r1, #255	; 0xff
    41a0:	4642      	mov	r2, r8
    41a2:	4648      	mov	r0, r9
    41a4:	f018 f834 	bl	1c210 <isr_rx_scan_report.isra.0>
		if (err) {
    41a8:	e6cd      	b.n	3f46 <isr_rx+0x16>
    41aa:	bf00      	nop
    41ac:	f3af 8000 	nop.w
    41b0:	3b9aca00 	.word	0x3b9aca00
    41b4:	00000000 	.word	0x00000000
    41b8:	0001bf6d 	.word	0x0001bf6d
    41bc:	1afd498d 	.word	0x1afd498d
				sys_cpu_to_le16((conn_space_us -
    41c0:	49cd      	ldr	r1, [pc, #820]	; (44f8 <isr_rx+0x5c8>)
			pdu_tx->connect_ind.win_size++;
    41c2:	f899 2015 	ldrb.w	r2, [r9, #21]
				sys_cpu_to_le16((conn_space_us -
    41c6:	eba8 0303 	sub.w	r3, r8, r3
    41ca:	fba1 1303 	umull	r1, r3, r1, r3
			pdu_tx->connect_ind.win_offset =
    41ce:	f3c3 238f 	ubfx	r3, r3, #10, #16
			pdu_tx->connect_ind.win_size++;
    41d2:	3201      	adds	r2, #1
			pdu_tx->connect_ind.win_offset =
    41d4:	f8a9 3016 	strh.w	r3, [r9, #22]
			pdu_tx->connect_ind.win_size++;
    41d8:	f889 2015 	strb.w	r2, [r9, #21]
		pdu_tx->connect_ind.interval =
    41dc:	f8ba 1012 	ldrh.w	r1, [sl, #18]
		pdu_tx->connect_ind.latency =
    41e0:	f8ba 2014 	ldrh.w	r2, [sl, #20]
		pdu_tx->connect_ind.timeout =
    41e4:	8aa3      	ldrh	r3, [r4, #20]
    41e6:	f8a9 301c 	strh.w	r3, [r9, #28]
		pdu_tx->connect_ind.interval =
    41ea:	f8a9 1018 	strh.w	r1, [r9, #24]
		pdu_tx->connect_ind.latency =
    41ee:	f8a9 201a 	strh.w	r2, [r9, #26]
		memcpy(&pdu_tx->connect_ind.chan_map[0],
    41f2:	f10a 011c 	add.w	r1, sl, #28
    41f6:	2205      	movs	r2, #5
    41f8:	f109 001e 	add.w	r0, r9, #30
    41fc:	f01e fa90 	bl	22720 <memcpy>
		pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
    4200:	f89a 2022 	ldrb.w	r2, [sl, #34]	; 0x22
    4204:	f899 3023 	ldrb.w	r3, [r9, #35]	; 0x23
    4208:	f362 0304 	bfi	r3, r2, #0, #5
    420c:	f889 3023 	strb.w	r3, [r9, #35]	; 0x23
		pdu_tx->connect_ind.sca = lll_conn_sca_local_get();
    4210:	f018 f8e0 	bl	1c3d4 <lll_conn_sca_local_get>
    4214:	f899 3023 	ldrb.w	r3, [r9, #35]	; 0x23
    4218:	f360 1347 	bfi	r3, r0, #5, #3
    421c:	f889 3023 	strb.w	r3, [r9, #35]	; 0x23
		radio_pkt_tx_set(pdu_tx);
    4220:	4648      	mov	r0, r9
    4222:	f019 f8e7 	bl	1d3f4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    4226:	f019 f937 	bl	1d498 <radio_is_ready>
    422a:	2800      	cmp	r0, #0
    422c:	f040 8155 	bne.w	44da <isr_rx+0x5aa>
		radio_isr_set(isr_cleanup, lll);
    4230:	48b2      	ldr	r0, [pc, #712]	; (44fc <isr_rx+0x5cc>)
    4232:	4621      	mov	r1, r4
    4234:	f018 fff8 	bl	1d228 <radio_isr_set>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
    4238:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
    423a:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
    423e:	07db      	lsls	r3, r3, #31
    4240:	7122      	strb	r2, [r4, #4]
    4242:	f100 813c 	bmi.w	44be <isr_rx+0x58e>
		rx = ull_pdu_rx_alloc();
    4246:	f010 ff4d 	bl	150e4 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    424a:	2309      	movs	r3, #9
		rx = ull_pdu_rx_alloc();
    424c:	4682      	mov	sl, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    424e:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
    4250:	f64f 73ff 	movw	r3, #65535	; 0xffff
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    4254:	2224      	movs	r2, #36	; 0x24
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    4256:	7f3f      	ldrb	r7, [r7, #28]
		rx->hdr.handle = 0xffff;
    4258:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    425a:	4649      	mov	r1, r9
    425c:	301c      	adds	r0, #28
    425e:	f01e fa5f 	bl	22720 <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    4262:	f89a 301c 	ldrb.w	r3, [sl, #28]
		ftr->param = lll;
    4266:	f8ca 4008 	str.w	r4, [sl, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    426a:	f3c7 1740 	ubfx	r7, r7, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    426e:	f367 1345 	bfi	r3, r7, #5, #1
    4272:	f88a 301c 	strb.w	r3, [sl, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    4276:	f019 fa95 	bl	1d7a4 <radio_tmr_start_get>
				    radio_tx_chain_delay_get(0, 0);
    427a:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    427c:	f8ca 0010 	str.w	r0, [sl, #16]
				    radio_tx_chain_delay_get(0, 0);
    4280:	4608      	mov	r0, r1
    4282:	f019 f8c7 	bl	1d414 <radio_tx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    4286:	2d00      	cmp	r5, #0
    4288:	bf08      	it	eq
    428a:	26ff      	moveq	r6, #255	; 0xff
    428c:	f88a 601a 	strb.w	r6, [sl, #26]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    4290:	7de2      	ldrb	r2, [r4, #23]
		ftr->radio_end_us = conn_space_us -
    4292:	eba8 0000 	sub.w	r0, r8, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    4296:	f012 0201 	ands.w	r2, r2, #1
		ftr->radio_end_us = conn_space_us -
    429a:	f8ca 0014 	str.w	r0, [sl, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    429e:	d003      	beq.n	42a8 <isr_rx+0x378>
    42a0:	f1bb 0200 	subs.w	r2, fp, #0
    42a4:	bf18      	it	ne
    42a6:	2201      	movne	r2, #1
    42a8:	f89a 3019 	ldrb.w	r3, [sl, #25]
    42ac:	f362 0300 	bfi	r3, r2, #0, #1
    42b0:	f88a 3019 	strb.w	r3, [sl, #25]
			ftr->extra = ull_pdu_rx_alloc();
    42b4:	f010 ff16 	bl	150e4 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
    42b8:	4651      	mov	r1, sl
			ftr->extra = ull_pdu_rx_alloc();
    42ba:	f8ca 000c 	str.w	r0, [sl, #12]
		ull_rx_put(rx->hdr.link, rx);
    42be:	f8da 0000 	ldr.w	r0, [sl]
    42c2:	f010 ff27 	bl	15114 <ull_rx_put>
}
    42c6:	b003      	add	sp, #12
    42c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ull_rx_sched();
    42cc:	f010 bf32 	b.w	15134 <ull_rx_sched>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    42d0:	2b06      	cmp	r3, #6
    42d2:	d06d      	beq.n	43b0 <isr_rx+0x480>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    42d4:	2b02      	cmp	r3, #2
    42d6:	f000 80c5 	beq.w	4464 <isr_rx+0x534>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    42da:	2b01      	cmp	r3, #1
    42dc:	d11e      	bne.n	431c <isr_rx+0x3ec>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    42de:	7f7b      	ldrb	r3, [r7, #29]
    42e0:	2b0c      	cmp	r3, #12
    42e2:	f47f ae30 	bne.w	3f46 <isr_rx+0x16>
					   pdu->direct_ind.tgt_addr, rl_idx)) {
    42e6:	f107 0a24 	add.w	sl, r7, #36	; 0x24
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
    42ea:	09c0      	lsrs	r0, r0, #7
    42ec:	4651      	mov	r1, sl
    42ee:	4632      	mov	r2, r6
    42f0:	f016 fc56 	bl	1aba0 <ull_filter_lll_rl_addr_resolve>
    42f4:	4680      	mov	r8, r0
    42f6:	bb88      	cbnz	r0, 435c <isr_rx+0x42c>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    42f8:	7da3      	ldrb	r3, [r4, #22]
    42fa:	7f38      	ldrb	r0, [r7, #28]
			BDADDR_SIZE))) ||
    42fc:	f3c3 1280 	ubfx	r2, r3, #6, #1
    4300:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
    4304:	f000 811a 	beq.w	453c <isr_rx+0x60c>
	if (((lll->filter_policy & 0x02) != 0U) &&
    4308:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    430c:	0798      	lsls	r0, r3, #30
    430e:	d504      	bpl.n	431a <isr_rx+0x3ea>
    4310:	f997 301c 	ldrsb.w	r3, [r7, #28]
    4314:	2b00      	cmp	r3, #0
    4316:	f2c0 8106 	blt.w	4526 <isr_rx+0x5f6>
    431a:	7f38      	ldrb	r0, [r7, #28]
					&dir_report))) ||
    431c:	f000 000f 	and.w	r0, r0, #15
    4320:	2804      	cmp	r0, #4
    4322:	f47f ae10 	bne.w	3f46 <isr_rx+0x16>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    4326:	7f7b      	ldrb	r3, [r7, #29]
    4328:	2b25      	cmp	r3, #37	; 0x25
    432a:	f63f ae0c 	bhi.w	3f46 <isr_rx+0x16>
		   (lll->state != 0U) &&
    432e:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    4330:	07da      	lsls	r2, r3, #31
    4332:	f57f ae08 	bpl.w	3f46 <isr_rx+0x16>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    4336:	f019 f8e7 	bl	1d508 <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
    433a:	7f3b      	ldrb	r3, [r7, #28]
    433c:	7802      	ldrb	r2, [r0, #0]
    433e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4342:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    4346:	f47f adfe 	bne.w	3f46 <isr_rx+0x16>
		(memcmp(&sreq->scan_req.adv_addr[0],
    434a:	3008      	adds	r0, #8
    434c:	2206      	movs	r2, #6
    434e:	f107 011e 	add.w	r1, r7, #30
    4352:	f01e f9d5 	bl	22700 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    4356:	2800      	cmp	r0, #0
    4358:	f47f adf5 	bne.w	3f46 <isr_rx+0x16>
    435c:	7f7b      	ldrb	r3, [r7, #29]
	bool dir_report = false;
    435e:	f04f 0800 	mov.w	r8, #0
    4362:	e712      	b.n	418a <isr_rx+0x25a>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
    4364:	4631      	mov	r1, r6
    4366:	4628      	mov	r0, r5
    4368:	f016 fba8 	bl	1aabc <ull_filter_lll_rl_idx_allowed>
    436c:	2800      	cmp	r0, #0
    436e:	f47f ae19 	bne.w	3fa4 <isr_rx+0x74>
		(((lll->filter_policy & 0x01) != 0) &&
    4372:	7da3      	ldrb	r3, [r4, #22]
								rl_idx))) ||
    4374:	071b      	lsls	r3, r3, #28
    4376:	f57f ade6 	bpl.w	3f46 <isr_rx+0x16>
    437a:	e613      	b.n	3fa4 <isr_rx+0x74>
	if (rl_idx != FILTER_IDX_NONE) {
    437c:	2eff      	cmp	r6, #255	; 0xff
    437e:	f000 8082 	beq.w	4486 <isr_rx+0x556>
		return (rl_idx == lll->rl_idx);
    4382:	7e23      	ldrb	r3, [r4, #24]
    4384:	1b9b      	subs	r3, r3, r6
    4386:	fab3 f383 	clz	r3, r3
    438a:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & 0x01) != 0U) ||
    438c:	2b00      	cmp	r3, #0
    438e:	f47f ae1a 	bne.w	3fc6 <isr_rx+0x96>
    4392:	e6e6      	b.n	4162 <isr_rx+0x232>
	LL_ASSERT(node_rx);
    4394:	4a5a      	ldr	r2, [pc, #360]	; (4500 <isr_rx+0x5d0>)
    4396:	495b      	ldr	r1, [pc, #364]	; (4504 <isr_rx+0x5d4>)
    4398:	485b      	ldr	r0, [pc, #364]	; (4508 <isr_rx+0x5d8>)
    439a:	f240 2397 	movw	r3, #663	; 0x297
    439e:	f01c f94f 	bl	20640 <printk>
    43a2:	4040      	eors	r0, r0
    43a4:	f380 8811 	msr	BASEPRI, r0
    43a8:	f04f 0003 	mov.w	r0, #3
    43ac:	df02      	svc	2
    43ae:	e600      	b.n	3fb2 <isr_rx+0x82>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    43b0:	7f7b      	ldrb	r3, [r7, #29]
    43b2:	2b25      	cmp	r3, #37	; 0x25
    43b4:	f67f aede 	bls.w	4174 <isr_rx+0x244>
    43b8:	e7b0      	b.n	431c <isr_rx+0x3ec>
		   lll->type &&
    43ba:	68a2      	ldr	r2, [r4, #8]
    43bc:	2a00      	cmp	r2, #0
    43be:	f47f aede 	bne.w	417e <isr_rx+0x24e>
		radio_tmr_tifs_set(EVENT_IFS_US);
    43c2:	2096      	movs	r0, #150	; 0x96
    43c4:	f019 f93c 	bl	1d640 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    43c8:	2000      	movs	r0, #0
    43ca:	f019 f8a1 	bl	1d510 <radio_switch_complete_and_rx>
		err = isr_rx_scan_report(lll, rssi_ready,
    43ce:	2d00      	cmp	r5, #0
    43d0:	bf14      	ite	ne
    43d2:	4631      	movne	r1, r6
    43d4:	21ff      	moveq	r1, #255	; 0xff
    43d6:	4648      	mov	r0, r9
    43d8:	2200      	movs	r2, #0
    43da:	f017 ff19 	bl	1c210 <isr_rx_scan_report.isra.0>
		if (err) {
    43de:	2800      	cmp	r0, #0
    43e0:	f47f adb1 	bne.w	3f46 <isr_rx+0x16>
		pdu_tx = (void *)radio_pkt_scratch_get();
    43e4:	f019 f890 	bl	1d508 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    43e8:	7f3b      	ldrb	r3, [r7, #28]
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    43ea:	7802      	ldrb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    43ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    43f0:	01db      	lsls	r3, r3, #7
		pdu_tx = (void *)radio_pkt_scratch_get();
    43f2:	4605      	mov	r5, r0
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    43f4:	f002 0270 	and.w	r2, r2, #112	; 0x70
    43f8:	f043 0303 	orr.w	r3, r3, #3
    43fc:	4313      	orrs	r3, r2
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    43fe:	220c      	movs	r2, #12
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4400:	4630      	mov	r0, r6
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    4402:	702b      	strb	r3, [r5, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    4404:	706a      	strb	r2, [r5, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4406:	f016 fa43 	bl	1a890 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    440a:	7de3      	ldrb	r3, [r4, #23]
    440c:	07de      	lsls	r6, r3, #31
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    440e:	4601      	mov	r1, r0
		if (lll->rpa_gen && lrpa) {
    4410:	f140 809d 	bpl.w	454e <isr_rx+0x61e>
    4414:	2800      	cmp	r0, #0
    4416:	f000 809a 	beq.w	454e <isr_rx+0x61e>
			pdu_tx->tx_addr = 1;
    441a:	782b      	ldrb	r3, [r5, #0]
    441c:	4628      	mov	r0, r5
    441e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4422:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    4426:	2206      	movs	r2, #6
    4428:	f01e f97a 	bl	22720 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
    442c:	f107 011e 	add.w	r1, r7, #30
    4430:	2206      	movs	r2, #6
    4432:	f105 0008 	add.w	r0, r5, #8
    4436:	f01e f973 	bl	22720 <memcpy>
		radio_pkt_tx_set(pdu_tx);
    443a:	4628      	mov	r0, r5
    443c:	f018 ffda 	bl	1d3f4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    4440:	f019 f82a 	bl	1d498 <radio_is_ready>
    4444:	2800      	cmp	r0, #0
    4446:	f040 809c 	bne.w	4582 <isr_rx+0x652>
		radio_tmr_end_capture();
    444a:	f019 f9ff 	bl	1d84c <radio_tmr_end_capture>
		lll->state = 1U;
    444e:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    4450:	482e      	ldr	r0, [pc, #184]	; (450c <isr_rx+0x5dc>)
		lll->state = 1U;
    4452:	f043 0301 	orr.w	r3, r3, #1
		radio_isr_set(isr_tx, lll);
    4456:	4621      	mov	r1, r4
		lll->state = 1U;
    4458:	75a3      	strb	r3, [r4, #22]
}
    445a:	b003      	add	sp, #12
    445c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		radio_isr_set(isr_tx, lll);
    4460:	f018 bee2 	b.w	1d228 <radio_isr_set>
    4464:	7f7b      	ldrb	r3, [r7, #29]
    4466:	e68a      	b.n	417e <isr_rx+0x24e>
			pdu_tx->tx_addr = lll->init_addr_type;
    4468:	7da3      	ldrb	r3, [r4, #22]
    446a:	f899 2000 	ldrb.w	r2, [r9]
    446e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4472:	f363 1286 	bfi	r2, r3, #6, #1
    4476:	f889 2000 	strb.w	r2, [r9]
			memcpy(&pdu_tx->connect_ind.init_addr[0],
    447a:	f104 0119 	add.w	r1, r4, #25
    447e:	2206      	movs	r2, #6
    4480:	f01e f94e 	bl	22720 <memcpy>
    4484:	e5f8      	b.n	4078 <isr_rx+0x148>
	return ((lll->adv_addr_type == pdu->tx_addr) &&
    4486:	7f38      	ldrb	r0, [r7, #28]
    4488:	f3c3 1340 	ubfx	r3, r3, #5, #1
    448c:	f3c0 1280 	ubfx	r2, r0, #6, #1
    4490:	4293      	cmp	r3, r2
    4492:	f47f ae67 	bne.w	4164 <isr_rx+0x234>
		!memcmp(lll->adv_addr, &pdu->adv_ind.addr[0], BDADDR_SIZE));
    4496:	2206      	movs	r2, #6
    4498:	f107 011e 	add.w	r1, r7, #30
    449c:	f104 001f 	add.w	r0, r4, #31
    44a0:	f01e f92e 	bl	22700 <memcmp>
	return ((lll->adv_addr_type == pdu->tx_addr) &&
    44a4:	fab0 f380 	clz	r3, r0
    44a8:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & 0x01) != 0U) ||
    44aa:	2b00      	cmp	r3, #0
    44ac:	f47f ad8b 	bne.w	3fc6 <isr_rx+0x96>
    44b0:	e657      	b.n	4162 <isr_rx+0x232>
			pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
    44b2:	f889 8016 	strb.w	r8, [r9, #22]
    44b6:	f889 8017 	strb.w	r8, [r9, #23]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    44ba:	4698      	mov	r8, r3
    44bc:	e68e      	b.n	41dc <isr_rx+0x2ac>
		LL_ASSERT(!ret);
    44be:	4a10      	ldr	r2, [pc, #64]	; (4500 <isr_rx+0x5d0>)
    44c0:	4913      	ldr	r1, [pc, #76]	; (4510 <isr_rx+0x5e0>)
    44c2:	4811      	ldr	r0, [pc, #68]	; (4508 <isr_rx+0x5d8>)
    44c4:	f240 3336 	movw	r3, #822	; 0x336
    44c8:	f01c f8ba 	bl	20640 <printk>
    44cc:	4040      	eors	r0, r0
    44ce:	f380 8811 	msr	BASEPRI, r0
    44d2:	f04f 0003 	mov.w	r0, #3
    44d6:	df02      	svc	2
    44d8:	e6b5      	b.n	4246 <isr_rx+0x316>
		LL_ASSERT(!radio_is_ready());
    44da:	4a09      	ldr	r2, [pc, #36]	; (4500 <isr_rx+0x5d0>)
    44dc:	490d      	ldr	r1, [pc, #52]	; (4514 <isr_rx+0x5e4>)
    44de:	480a      	ldr	r0, [pc, #40]	; (4508 <isr_rx+0x5d8>)
    44e0:	f44f 7344 	mov.w	r3, #784	; 0x310
    44e4:	f01c f8ac 	bl	20640 <printk>
    44e8:	4040      	eors	r0, r0
    44ea:	f380 8811 	msr	BASEPRI, r0
    44ee:	f04f 0003 	mov.w	r0, #3
    44f2:	df02      	svc	2
    44f4:	e69c      	b.n	4230 <isr_rx+0x300>
    44f6:	bf00      	nop
    44f8:	d1b71759 	.word	0xd1b71759
    44fc:	0001c1b1 	.word	0x0001c1b1
    4500:	00027b4c 	.word	0x00027b4c
    4504:	00027b98 	.word	0x00027b98
    4508:	00026ecc 	.word	0x00026ecc
    450c:	0001bf89 	.word	0x0001bf89
    4510:	00027188 	.word	0x00027188
    4514:	00027b14 	.word	0x00027b14
		   ull_filter_lll_lrpa_get(rl_idx)) {
    4518:	4630      	mov	r0, r6
    451a:	f016 f9b9 	bl	1a890 <ull_filter_lll_lrpa_get>
	} else if (init && lll->rpa_gen &&
    451e:	2800      	cmp	r0, #0
    4520:	f47f ae1f 	bne.w	4162 <isr_rx+0x232>
    4524:	e606      	b.n	4134 <isr_rx+0x204>
	    (pdu->rx_addr != 0) &&
    4526:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    452a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    452e:	2b40      	cmp	r3, #64	; 0x40
    4530:	f47f aef3 	bne.w	431a <isr_rx+0x3ea>
    4534:	7f7b      	ldrb	r3, [r7, #29]
			*dir_report = true;
    4536:	f04f 0801 	mov.w	r8, #1
    453a:	e626      	b.n	418a <isr_rx+0x25a>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
    453c:	4651      	mov	r1, sl
    453e:	2206      	movs	r2, #6
    4540:	f104 0019 	add.w	r0, r4, #25
    4544:	f01e f8dc 	bl	22700 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    4548:	b348      	cbz	r0, 459e <isr_rx+0x66e>
    454a:	7da3      	ldrb	r3, [r4, #22]
    454c:	e6dc      	b.n	4308 <isr_rx+0x3d8>
			pdu_tx->tx_addr = lll->init_addr_type;
    454e:	7da3      	ldrb	r3, [r4, #22]
    4550:	782a      	ldrb	r2, [r5, #0]
    4552:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4556:	4628      	mov	r0, r5
    4558:	f363 1286 	bfi	r2, r3, #6, #1
    455c:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
    4560:	f104 0119 	add.w	r1, r4, #25
    4564:	2206      	movs	r2, #6
    4566:	f01e f8db 	bl	22720 <memcpy>
    456a:	e75f      	b.n	442c <isr_rx+0x4fc>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
    456c:	4641      	mov	r1, r8
    456e:	2206      	movs	r2, #6
    4570:	f104 0019 	add.w	r0, r4, #25
    4574:	f01e f8c4 	bl	22700 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    4578:	2800      	cmp	r0, #0
    457a:	f43f ad2d 	beq.w	3fd8 <isr_rx+0xa8>
    457e:	7da3      	ldrb	r3, [r4, #22]
    4580:	e5e0      	b.n	4144 <isr_rx+0x214>
		LL_ASSERT(!radio_is_ready());
    4582:	4a08      	ldr	r2, [pc, #32]	; (45a4 <isr_rx+0x674>)
    4584:	4908      	ldr	r1, [pc, #32]	; (45a8 <isr_rx+0x678>)
    4586:	4809      	ldr	r0, [pc, #36]	; (45ac <isr_rx+0x67c>)
    4588:	f240 3391 	movw	r3, #913	; 0x391
    458c:	f01c f858 	bl	20640 <printk>
    4590:	4040      	eors	r0, r0
    4592:	f380 8811 	msr	BASEPRI, r0
    4596:	f04f 0003 	mov.w	r0, #3
    459a:	df02      	svc	2
    459c:	e755      	b.n	444a <isr_rx+0x51a>
    459e:	7f7b      	ldrb	r3, [r7, #29]
    45a0:	e5f3      	b.n	418a <isr_rx+0x25a>
    45a2:	bf00      	nop
    45a4:	00027b4c 	.word	0x00027b4c
    45a8:	00027b14 	.word	0x00027b14
    45ac:	00026ecc 	.word	0x00026ecc

000045b0 <svc_attr_memory_release>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    45b0:	4b10      	ldr	r3, [pc, #64]	; (45f4 <svc_attr_memory_release+0x44>)
    45b2:	4a11      	ldr	r2, [pc, #68]	; (45f8 <svc_attr_memory_release+0x48>)
static void svc_attr_memory_release(struct bt_gatt_dm *dm)
{
	sys_snode_t *node;
	struct data_chunk_item *item;

	LOG_DBG("Attr memory release");
    45b4:	4911      	ldr	r1, [pc, #68]	; (45fc <svc_attr_memory_release+0x4c>)
    45b6:	1ad2      	subs	r2, r2, r3
    45b8:	08d2      	lsrs	r2, r2, #3
    45ba:	0192      	lsls	r2, r2, #6
{
    45bc:	b510      	push	{r4, lr}
	LOG_DBG("Attr memory release");
    45be:	f042 0204 	orr.w	r2, r2, #4
{
    45c2:	4604      	mov	r4, r0
	LOG_DBG("Attr memory release");
    45c4:	480e      	ldr	r0, [pc, #56]	; (4600 <svc_attr_memory_release+0x50>)
    45c6:	f01c fb08 	bl	20bda <log_1>

	/* Clear attributes */
	dm->cur_attr_id = 0;
    45ca:	2300      	movs	r3, #0
    45cc:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    45d0:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c

	/* Release dynamic memory data chunks */
	while (!sys_slist_is_empty(&dm->chunk_list)) {
    45d4:	b910      	cbnz	r0, 45dc <svc_attr_memory_release+0x2c>
		node = sys_slist_get_not_empty(&dm->chunk_list);
		item = CONTAINER_OF(node, struct data_chunk_item, node);
		k_free(item);
	}

	dm->cur_chunk_len = 0;
    45d6:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
    45da:	bd10      	pop	{r4, pc}
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    45dc:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    45e0:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    45e2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    45e6:	4290      	cmp	r0, r2
	list->tail = node;
    45e8:	bf08      	it	eq
    45ea:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
    45ee:	f021 fa3a 	bl	25a66 <k_free>
    45f2:	e7ed      	b.n	45d0 <svc_attr_memory_release+0x20>
    45f4:	00026544 	.word	0x00026544
    45f8:	0002661c 	.word	0x0002661c
    45fc:	0002825f 	.word	0x0002825f
    4600:	00027fac 	.word	0x00027fac

00004604 <get_uuid_size.isra.0.part.0>:

/* Returns size of UUID structure with padding for memory alignment */
static size_t get_uuid_size(const struct bt_uuid *uuid)
    4604:	b508      	push	{r3, lr}
    4606:	4906      	ldr	r1, [pc, #24]	; (4620 <get_uuid_size.isra.0.part.0+0x1c>)
    4608:	4b06      	ldr	r3, [pc, #24]	; (4624 <get_uuid_size.isra.0.part.0+0x20>)
	case BT_UUID_TYPE_32:
		return sizeof(struct bt_uuid_32);
	case BT_UUID_TYPE_128:
		return sizeof(struct bt_uuid_128);
	default:
		LOG_ERR("Unsupported UUID type.");
    460a:	4807      	ldr	r0, [pc, #28]	; (4628 <get_uuid_size.isra.0.part.0+0x24>)
    460c:	1ac9      	subs	r1, r1, r3
    460e:	08c9      	lsrs	r1, r1, #3
    4610:	0189      	lsls	r1, r1, #6
    4612:	f041 0101 	orr.w	r1, r1, #1
    4616:	f01c fad3 	bl	20bc0 <log_0>
		return 0;
	}
}
    461a:	2000      	movs	r0, #0
    461c:	bd08      	pop	{r3, pc}
    461e:	bf00      	nop
    4620:	0002661c 	.word	0x0002661c
    4624:	00026544 	.word	0x00026544
    4628:	00027fc4 	.word	0x00027fc4

0000462c <user_data_alloc.constprop.0>:
static void *user_data_alloc(struct bt_gatt_dm *dm,
    462c:	b538      	push	{r3, r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
    462e:	4c15      	ldr	r4, [pc, #84]	; (4684 <user_data_alloc.constprop.0+0x58>)
	if (sys_slist_is_empty(&dm->chunk_list) ||
    4630:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    4634:	1cc5      	adds	r5, r0, #3
    4636:	f025 0503 	bic.w	r5, r5, #3
	if (sys_slist_is_empty(&dm->chunk_list) ||
    463a:	b123      	cbz	r3, 4646 <user_data_alloc.constprop.0+0x1a>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    463c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    4640:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    4642:	2b74      	cmp	r3, #116	; 0x74
    4644:	d918      	bls.n	4678 <user_data_alloc.constprop.0+0x4c>
		item = k_malloc(sizeof(struct data_chunk_item));
    4646:	2078      	movs	r0, #120	; 0x78
    4648:	f01a feaa 	bl	1f3a0 <k_malloc>
		if (!item) {
    464c:	b178      	cbz	r0, 466e <user_data_alloc.constprop.0+0x42>
	parent->next = child;
    464e:	2300      	movs	r3, #0
    4650:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    4652:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    4656:	b95a      	cbnz	r2, 4670 <user_data_alloc.constprop.0+0x44>
	list->head = node;
    4658:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
		dm->cur_chunk_len = 0;
    465c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	user_data_loc = &item->data[dm->cur_chunk_len];
    4660:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    4664:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    4666:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    4668:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    466a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
}
    466e:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    4670:	6010      	str	r0, [r2, #0]
	list->tail = node;
    4672:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    4676:	e7f1      	b.n	465c <user_data_alloc.constprop.0+0x30>
	return list->tail;
    4678:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    467c:	2800      	cmp	r0, #0
    467e:	bf38      	it	cc
    4680:	2000      	movcc	r0, #0
    4682:	e7ed      	b.n	4660 <user_data_alloc.constprop.0+0x34>
    4684:	200015b0 	.word	0x200015b0

00004688 <attr_store.constprop.0>:
 * @param[in] attr           Service attribute
 * @param[in] additional_len Additional buffer length
 *
 * @return Pointer to newly stored attribute.
 */
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    4688:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    468c:	4b27      	ldr	r3, [pc, #156]	; (472c <attr_store.constprop.0+0xa4>)
    468e:	4d28      	ldr	r5, [pc, #160]	; (4730 <attr_store.constprop.0+0xa8>)
					  const struct bt_gatt_attr *attr,
					  size_t additional_len)
{
	struct bt_gatt_dm_attr *cur_attr;

	LOG_DBG("Attr store, pos: %zu, handle: %"PRIu16,
    4690:	4c28      	ldr	r4, [pc, #160]	; (4734 <attr_store.constprop.0+0xac>)
    4692:	1aed      	subs	r5, r5, r3
    4694:	08ed      	lsrs	r5, r5, #3
    4696:	01ad      	lsls	r5, r5, #6
    4698:	f045 0304 	orr.w	r3, r5, #4
    469c:	f8ad 3000 	strh.w	r3, [sp]
    46a0:	8a03      	ldrh	r3, [r0, #16]
    46a2:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    46a6:	4607      	mov	r7, r0
    46a8:	460e      	mov	r6, r1
	LOG_DBG("Attr store, pos: %zu, handle: %"PRIu16,
    46aa:	4823      	ldr	r0, [pc, #140]	; (4738 <attr_store.constprop.0+0xb0>)
    46ac:	4923      	ldr	r1, [pc, #140]	; (473c <attr_store.constprop.0+0xb4>)
    46ae:	f01c fac1 	bl	20c34 <log_3>
		dm->cur_attr_id,
		attr->handle);
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    46b2:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    46b6:	2b22      	cmp	r3, #34	; 0x22
    46b8:	d90a      	bls.n	46d0 <attr_store.constprop.0+0x48>
		LOG_ERR("No space for new attribute.");
    46ba:	4821      	ldr	r0, [pc, #132]	; (4740 <attr_store.constprop.0+0xb8>)
    46bc:	f045 0101 	orr.w	r1, r5, #1
    46c0:	f01c fa7e 	bl	20bc0 <log_0>
		return NULL;
    46c4:	f04f 0800 	mov.w	r8, #0
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];

	memcpy(cur_attr->uuid, attr->uuid, uuid_size);

	return cur_attr;
}
    46c8:	4640      	mov	r0, r8
    46ca:	b003      	add	sp, #12
    46cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    46d0:	683b      	ldr	r3, [r7, #0]
    46d2:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    46d4:	2b02      	cmp	r3, #2
    46d6:	d80e      	bhi.n	46f6 <attr_store.constprop.0+0x6e>
    46d8:	4a1a      	ldr	r2, [pc, #104]	; (4744 <attr_store.constprop.0+0xbc>)
    46da:	f812 9003 	ldrb.w	r9, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    46de:	eb06 0009 	add.w	r0, r6, r9
    46e2:	f7ff ffa3 	bl	462c <user_data_alloc.constprop.0>
	if (!attr_data) {
    46e6:	4680      	mov	r8, r0
    46e8:	b948      	cbnz	r0, 46fe <attr_store.constprop.0+0x76>
		LOG_ERR("No space for attribute data.");
    46ea:	4817      	ldr	r0, [pc, #92]	; (4748 <attr_store.constprop.0+0xc0>)
    46ec:	f045 0101 	orr.w	r1, r5, #1
    46f0:	f01c fa66 	bl	20bc0 <log_0>
		return NULL;
    46f4:	e7e8      	b.n	46c8 <attr_store.constprop.0+0x40>
    46f6:	f7ff ff85 	bl	4604 <get_uuid_size.isra.0.part.0>
    46fa:	4681      	mov	r9, r0
    46fc:	e7ef      	b.n	46de <attr_store.constprop.0+0x56>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    46fe:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    4702:	6839      	ldr	r1, [r7, #0]
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    4704:	1c5a      	adds	r2, r3, #1
    4706:	3303      	adds	r3, #3
    4708:	00db      	lsls	r3, r3, #3
    470a:	1d1d      	adds	r5, r3, #4
    470c:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    4710:	4425      	add	r5, r4
	cur_attr->handle = attr->handle;
    4712:	441c      	add	r4, r3
    4714:	8a3b      	ldrh	r3, [r7, #16]
    4716:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    4718:	7cbb      	ldrb	r3, [r7, #18]
    471a:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    471c:	4430      	add	r0, r6
    471e:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    4720:	464a      	mov	r2, r9
    4722:	f01d fffd 	bl	22720 <memcpy>
	return cur_attr;
    4726:	46a8      	mov	r8, r5
    4728:	e7ce      	b.n	46c8 <attr_store.constprop.0+0x40>
    472a:	bf00      	nop
    472c:	00026544 	.word	0x00026544
    4730:	0002661c 	.word	0x0002661c
    4734:	200015b0 	.word	0x200015b0
    4738:	00027fdb 	.word	0x00027fdb
    473c:	00028277 	.word	0x00028277
    4740:	00028000 	.word	0x00028000
    4744:	0002825c 	.word	0x0002825c
    4748:	0002801c 	.word	0x0002801c

0000474c <discovery_complete.constprop.0>:
    474c:	4b11      	ldr	r3, [pc, #68]	; (4794 <discovery_complete.constprop.0+0x48>)
    474e:	4a12      	ldr	r2, [pc, #72]	; (4798 <discovery_complete.constprop.0+0x4c>)
	return NULL;
}

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
    4750:	4812      	ldr	r0, [pc, #72]	; (479c <discovery_complete.constprop.0+0x50>)
    4752:	4913      	ldr	r1, [pc, #76]	; (47a0 <discovery_complete.constprop.0+0x54>)
    4754:	1ad2      	subs	r2, r2, r3
    4756:	08d2      	lsrs	r2, r2, #3
    4758:	0192      	lsls	r2, r2, #6
static void discovery_complete(struct bt_gatt_dm *dm)
    475a:	b510      	push	{r4, lr}
	LOG_DBG("Discovery complete.");
    475c:	f042 0204 	orr.w	r2, r2, #4
    4760:	f01c fa3b 	bl	20bda <log_1>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4764:	f3bf 8f5b 	dmb	ish
    4768:	480e      	ldr	r0, [pc, #56]	; (47a4 <discovery_complete.constprop.0+0x58>)
    476a:	f500 739c 	add.w	r3, r0, #312	; 0x138
    476e:	e853 2f00 	ldrex	r2, [r3]
    4772:	f042 0202 	orr.w	r2, r2, #2
    4776:	e843 2100 	strex	r1, r2, [r3]
    477a:	2900      	cmp	r1, #0
    477c:	d1f7      	bne.n	476e <discovery_complete.constprop.0+0x22>
    477e:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    4782:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    4786:	681b      	ldr	r3, [r3, #0]
    4788:	b11b      	cbz	r3, 4792 <discovery_complete.constprop.0+0x46>
		dm->callback->completed(dm, dm->context);
	}
}
    478a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->completed(dm, dm->context);
    478e:	6841      	ldr	r1, [r0, #4]
    4790:	4718      	bx	r3
}
    4792:	bd10      	pop	{r4, pc}
    4794:	00026544 	.word	0x00026544
    4798:	0002661c 	.word	0x0002661c
    479c:	00028039 	.word	0x00028039
    47a0:	00028282 	.word	0x00028282
    47a4:	200015b0 	.word	0x200015b0

000047a8 <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    47a8:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    47aa:	4c0f      	ldr	r4, [pc, #60]	; (47e8 <discovery_complete_error.constprop.0+0x40>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    47ac:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    47ae:	4620      	mov	r0, r4
    47b0:	f7ff fefe 	bl	45b0 <svc_attr_memory_release>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    47b4:	f3bf 8f5b 	dmb	ish
    47b8:	f504 739c 	add.w	r3, r4, #312	; 0x138
    47bc:	e853 2f00 	ldrex	r2, [r3]
    47c0:	f022 0201 	bic.w	r2, r2, #1
    47c4:	e843 2100 	strex	r1, r2, [r3]
    47c8:	2900      	cmp	r1, #0
    47ca:	d1f7      	bne.n	47bc <discovery_complete_error.constprop.0+0x14>
    47cc:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    47d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    47d4:	689b      	ldr	r3, [r3, #8]
    47d6:	b12b      	cbz	r3, 47e4 <discovery_complete_error.constprop.0+0x3c>
		dm->callback->error_found(dm->conn, err, dm->context);
    47d8:	6862      	ldr	r2, [r4, #4]
    47da:	6820      	ldr	r0, [r4, #0]
    47dc:	4629      	mov	r1, r5
	}
}
    47de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    47e2:	4718      	bx	r3
}
    47e4:	bd70      	pop	{r4, r5, r6, pc}
    47e6:	bf00      	nop
    47e8:	200015b0 	.word	0x200015b0

000047ec <discovery_complete_not_found>:
    47ec:	4b13      	ldr	r3, [pc, #76]	; (483c <discovery_complete_not_found+0x50>)
    47ee:	4a14      	ldr	r2, [pc, #80]	; (4840 <discovery_complete_not_found+0x54>)
	LOG_DBG("Discover complete. No service found.");
    47f0:	4914      	ldr	r1, [pc, #80]	; (4844 <discovery_complete_not_found+0x58>)
    47f2:	1ad2      	subs	r2, r2, r3
    47f4:	08d2      	lsrs	r2, r2, #3
    47f6:	0192      	lsls	r2, r2, #6
{
    47f8:	b510      	push	{r4, lr}
	LOG_DBG("Discover complete. No service found.");
    47fa:	f042 0204 	orr.w	r2, r2, #4
{
    47fe:	4604      	mov	r4, r0
	LOG_DBG("Discover complete. No service found.");
    4800:	4811      	ldr	r0, [pc, #68]	; (4848 <discovery_complete_not_found+0x5c>)
    4802:	f01c f9ea 	bl	20bda <log_1>
	svc_attr_memory_release(dm);
    4806:	4620      	mov	r0, r4
    4808:	f7ff fed2 	bl	45b0 <svc_attr_memory_release>
    480c:	f3bf 8f5b 	dmb	ish
    4810:	f504 739c 	add.w	r3, r4, #312	; 0x138
    4814:	e853 2f00 	ldrex	r2, [r3]
    4818:	f022 0201 	bic.w	r2, r2, #1
    481c:	e843 2100 	strex	r1, r2, [r3]
    4820:	2900      	cmp	r1, #0
    4822:	d1f7      	bne.n	4814 <discovery_complete_not_found+0x28>
    4824:	f3bf 8f5b 	dmb	ish
	if (dm->callback->service_not_found) {
    4828:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    482c:	685b      	ldr	r3, [r3, #4]
    482e:	b123      	cbz	r3, 483a <discovery_complete_not_found+0x4e>
		dm->callback->service_not_found(dm->conn, dm->context);
    4830:	e9d4 0100 	ldrd	r0, r1, [r4]
}
    4834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
    4838:	4718      	bx	r3
}
    483a:	bd10      	pop	{r4, pc}
    483c:	00026544 	.word	0x00026544
    4840:	0002661c 	.word	0x0002661c
    4844:	00028295 	.word	0x00028295
    4848:	00028051 	.word	0x00028051

0000484c <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    484c:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    484e:	4604      	mov	r4, r0
    4850:	b960      	cbnz	r0, 486c <uuid_store.constprop.0+0x20>
    4852:	4b0f      	ldr	r3, [pc, #60]	; (4890 <uuid_store.constprop.0+0x44>)
    4854:	490f      	ldr	r1, [pc, #60]	; (4894 <uuid_store.constprop.0+0x48>)
		LOG_ERR("Uninitialized UUID.");
    4856:	4810      	ldr	r0, [pc, #64]	; (4898 <uuid_store.constprop.0+0x4c>)
    4858:	1ac9      	subs	r1, r1, r3
    485a:	08c9      	lsrs	r1, r1, #3
    485c:	0189      	lsls	r1, r1, #6
    485e:	f041 0101 	orr.w	r1, r1, #1
    4862:	f01c f9ad 	bl	20bc0 <log_0>
		return NULL;
    4866:	4626      	mov	r6, r4
}
    4868:	4630      	mov	r0, r6
    486a:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    486c:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    486e:	2b02      	cmp	r3, #2
    4870:	d80a      	bhi.n	4888 <uuid_store.constprop.0+0x3c>
    4872:	4a0a      	ldr	r2, [pc, #40]	; (489c <uuid_store.constprop.0+0x50>)
    4874:	5cd5      	ldrb	r5, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    4876:	4628      	mov	r0, r5
    4878:	f7ff fed8 	bl	462c <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    487c:	462a      	mov	r2, r5
    487e:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    4880:	4606      	mov	r6, r0
	memcpy(buffer, uuid, size);
    4882:	f01d ff4d 	bl	22720 <memcpy>
	return (struct bt_uuid *)buffer;
    4886:	e7ef      	b.n	4868 <uuid_store.constprop.0+0x1c>
    4888:	f7ff febc 	bl	4604 <get_uuid_size.isra.0.part.0>
    488c:	4605      	mov	r5, r0
    488e:	e7f2      	b.n	4876 <uuid_store.constprop.0+0x2a>
    4890:	00026544 	.word	0x00026544
    4894:	0002661c 	.word	0x0002661c
    4898:	0002807a 	.word	0x0002807a
    489c:	0002825c 	.word	0x0002825c

000048a0 <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    48a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    48a4:	4b71      	ldr	r3, [pc, #452]	; (4a6c <discovery_callback+0x1cc>)
    48a6:	4e72      	ldr	r6, [pc, #456]	; (4a70 <discovery_callback+0x1d0>)
    48a8:	1af6      	subs	r6, r6, r3
    48aa:	08f6      	lsrs	r6, r6, #3
    48ac:	b085      	sub	sp, #20
    48ae:	4680      	mov	r8, r0
    48b0:	4614      	mov	r4, r2
	if (!attr) {
    48b2:	460d      	mov	r5, r1
    48b4:	01b6      	lsls	r6, r6, #6
    48b6:	b999      	cbnz	r1, 48e0 <discovery_callback+0x40>
		LOG_DBG("NULL attribute");
    48b8:	496e      	ldr	r1, [pc, #440]	; (4a74 <discovery_callback+0x1d4>)
    48ba:	486f      	ldr	r0, [pc, #444]	; (4a78 <discovery_callback+0x1d8>)
    48bc:	f046 0204 	orr.w	r2, r6, #4
    48c0:	f01c f98b 	bl	20bda <log_1>
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    48c4:	4f6d      	ldr	r7, [pc, #436]	; (4a7c <discovery_callback+0x1dc>)
    48c6:	683b      	ldr	r3, [r7, #0]
    48c8:	4543      	cmp	r3, r8
    48ca:	d011      	beq.n	48f0 <discovery_callback+0x50>
		LOG_ERR("Unexpected conn object. Aborting.");
    48cc:	486c      	ldr	r0, [pc, #432]	; (4a80 <discovery_callback+0x1e0>)
    48ce:	f046 0101 	orr.w	r1, r6, #1
    48d2:	f01c f975 	bl	20bc0 <log_0>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    48d6:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    48da:	f7ff ff65 	bl	47a8 <discovery_complete_error.constprop.0>
    48de:	e00e      	b.n	48fe <discovery_callback+0x5e>
		LOG_DBG("Attr: handle %u", attr->handle);
    48e0:	8a0a      	ldrh	r2, [r1, #16]
    48e2:	4868      	ldr	r0, [pc, #416]	; (4a84 <discovery_callback+0x1e4>)
    48e4:	4963      	ldr	r1, [pc, #396]	; (4a74 <discovery_callback+0x1d4>)
    48e6:	f046 0304 	orr.w	r3, r6, #4
    48ea:	f01c f98a 	bl	20c02 <log_2>
    48ee:	e7e9      	b.n	48c4 <discovery_callback+0x24>
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    48f0:	7c23      	ldrb	r3, [r4, #16]
    48f2:	2b03      	cmp	r3, #3
    48f4:	f000 809d 	beq.w	4a32 <discovery_callback+0x192>
    48f8:	d803      	bhi.n	4902 <discovery_callback+0x62>
    48fa:	2b02      	cmp	r3, #2
    48fc:	d124      	bne.n	4948 <discovery_callback+0xa8>
    48fe:	2400      	movs	r4, #0
    4900:	e08c      	b.n	4a1c <discovery_callback+0x17c>
    4902:	2b05      	cmp	r3, #5
    4904:	d1fb      	bne.n	48fe <discovery_callback+0x5e>
	if (!attr) {
    4906:	2d00      	cmp	r5, #0
    4908:	d175      	bne.n	49f6 <discovery_callback+0x156>
		if (dm->cur_attr_id > 1) {
    490a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
    490e:	2b01      	cmp	r3, #1
    4910:	d96e      	bls.n	49f0 <discovery_callback+0x150>
			LOG_DBG("Starting characteristic discovery");
    4912:	495d      	ldr	r1, [pc, #372]	; (4a88 <discovery_callback+0x1e8>)
    4914:	485d      	ldr	r0, [pc, #372]	; (4a8c <discovery_callback+0x1ec>)
    4916:	f046 0204 	orr.w	r2, r6, #4
    491a:	f01c f95e 	bl	20bda <log_1>
				dm->attrs[0].handle + 1;
    491e:	8c3b      	ldrh	r3, [r7, #32]
			int err = bt_gatt_discover(dm->conn,
    4920:	4639      	mov	r1, r7
				dm->attrs[0].handle + 1;
    4922:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    4924:	823b      	strh	r3, [r7, #16]
			int err = bt_gatt_discover(dm->conn,
    4926:	f851 0b08 	ldr.w	r0, [r1], #8
			dm->discover_params.type =
    492a:	2303      	movs	r3, #3
    492c:	763b      	strb	r3, [r7, #24]
			int err = bt_gatt_discover(dm->conn,
    492e:	f009 fb85 	bl	e03c <bt_gatt_discover>
			if (err) {
    4932:	4604      	mov	r4, r0
    4934:	2800      	cmp	r0, #0
    4936:	d0e2      	beq.n	48fe <discovery_callback+0x5e>
				LOG_ERR("Characteristic discover failed,"
    4938:	4601      	mov	r1, r0
    493a:	f046 0201 	orr.w	r2, r6, #1
    493e:	4854      	ldr	r0, [pc, #336]	; (4a90 <discovery_callback+0x1f0>)
    4940:	f01c f94b 	bl	20bda <log_1>
				discovery_complete_error(dm, err);
    4944:	4620      	mov	r0, r4
    4946:	e7c8      	b.n	48da <discovery_callback+0x3a>
	if (!attr) {
    4948:	b91d      	cbnz	r5, 4952 <discovery_callback+0xb2>
		discovery_complete_not_found(dm);
    494a:	4638      	mov	r0, r7
    494c:	f7ff ff4e 	bl	47ec <discovery_complete_not_found>
		return BT_GATT_ITER_STOP;
    4950:	e7d5      	b.n	48fe <discovery_callback+0x5e>
		attr_store(dm, attr, sizeof(*service_val));
    4952:	4628      	mov	r0, r5
    4954:	2108      	movs	r1, #8
	struct bt_gatt_service_val *service_val = attr->user_data;
    4956:	68ec      	ldr	r4, [r5, #12]
		attr_store(dm, attr, sizeof(*service_val));
    4958:	f7ff fe96 	bl	4688 <attr_store.constprop.0>
	if (!cur_attr) {
    495c:	4605      	mov	r5, r0
    495e:	b938      	cbnz	r0, 4970 <discovery_callback+0xd0>
		LOG_ERR("Not enough memory for service attribute.");
    4960:	484c      	ldr	r0, [pc, #304]	; (4a94 <discovery_callback+0x1f4>)
    4962:	f046 0101 	orr.w	r1, r6, #1
    4966:	f01c f92b 	bl	20bc0 <log_0>
		discovery_complete_error(dm, -ENOMEM);
    496a:	f06f 000b 	mvn.w	r0, #11
    496e:	e7b4      	b.n	48da <discovery_callback+0x3a>
	LOG_DBG("Service detected, handles range: <%u, %u>",
    4970:	8882      	ldrh	r2, [r0, #4]
    4972:	88a3      	ldrh	r3, [r4, #4]
    4974:	4948      	ldr	r1, [pc, #288]	; (4a98 <discovery_callback+0x1f8>)
    4976:	4849      	ldr	r0, [pc, #292]	; (4a9c <discovery_callback+0x1fc>)
    4978:	f046 0904 	orr.w	r9, r6, #4
    497c:	3201      	adds	r2, #1
    497e:	f8ad 9000 	strh.w	r9, [sp]
    4982:	f01c f957 	bl	20c34 <log_3>
		bt_gatt_dm_attr_service_val(cur_attr);
    4986:	4628      	mov	r0, r5
    4988:	f01b fd5c 	bl	20444 <bt_gatt_dm_attr_service_val>
    498c:	4680      	mov	r8, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    498e:	4621      	mov	r1, r4
    4990:	2208      	movs	r2, #8
    4992:	f01d fec5 	bl	22720 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    4996:	f8d8 0000 	ldr.w	r0, [r8]
    499a:	f7ff ff57 	bl	484c <uuid_store.constprop.0>
    499e:	4604      	mov	r4, r0
    49a0:	f8c8 0000 	str.w	r0, [r8]
	if (!cur_service_val->uuid) {
    49a4:	b938      	cbnz	r0, 49b6 <discovery_callback+0x116>
		LOG_ERR("Not enough memory for service attribute data.");
    49a6:	483e      	ldr	r0, [pc, #248]	; (4aa0 <discovery_callback+0x200>)
    49a8:	f046 0101 	orr.w	r1, r6, #1
    49ac:	f01c f908 	bl	20bc0 <log_0>
		discovery_complete_error(dm, -ENOMEM);
    49b0:	f06f 000b 	mvn.w	r0, #11
    49b4:	e047      	b.n	4a46 <discovery_callback+0x1a6>
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    49b6:	2305      	movs	r3, #5
    49b8:	763b      	strb	r3, [r7, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    49ba:	88ab      	ldrh	r3, [r5, #4]
	LOG_DBG("Starting descriptors discovery");
    49bc:	4936      	ldr	r1, [pc, #216]	; (4a98 <discovery_callback+0x1f8>)
    49be:	4839      	ldr	r0, [pc, #228]	; (4aa4 <discovery_callback+0x204>)
	dm->discover_params.start_handle = cur_attr->handle + 1;
    49c0:	3301      	adds	r3, #1
    49c2:	823b      	strh	r3, [r7, #16]
	LOG_DBG("Starting descriptors discovery");
    49c4:	464a      	mov	r2, r9
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    49c6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    49ca:	82fb      	strh	r3, [r7, #22]
	dm->discover_params.uuid         = NULL;
    49cc:	2400      	movs	r4, #0
    49ce:	60bc      	str	r4, [r7, #8]
	LOG_DBG("Starting descriptors discovery");
    49d0:	f01c f903 	bl	20bda <log_1>
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    49d4:	4639      	mov	r1, r7
    49d6:	f851 0b08 	ldr.w	r0, [r1], #8
    49da:	f009 fb2f 	bl	e03c <bt_gatt_discover>
	if (err) {
    49de:	4601      	mov	r1, r0
    49e0:	2800      	cmp	r0, #0
    49e2:	d08c      	beq.n	48fe <discovery_callback+0x5e>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    49e4:	4830      	ldr	r0, [pc, #192]	; (4aa8 <discovery_callback+0x208>)
    49e6:	f046 0201 	orr.w	r2, r6, #1
		LOG_ERR("Not enough memory for next attribute descriptor"
    49ea:	f01c f8f6 	bl	20bda <log_1>
		discovery_complete_error(dm, -ENOMEM);
    49ee:	e7df      	b.n	49b0 <discovery_callback+0x110>
			discovery_complete(dm);
    49f0:	f7ff feac 	bl	474c <discovery_complete.constprop.0>
    49f4:	e783      	b.n	48fe <discovery_callback+0x5e>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    49f6:	2400      	movs	r4, #0
    49f8:	f642 0303 	movw	r3, #10243	; 0x2803
    49fc:	6828      	ldr	r0, [r5, #0]
    49fe:	f88d 400c 	strb.w	r4, [sp, #12]
    4a02:	a903      	add	r1, sp, #12
    4a04:	f8ad 300e 	strh.w	r3, [sp, #14]
    4a08:	f01d ff59 	bl	228be <bt_uuid_cmp>
    4a0c:	b950      	cbnz	r0, 4a24 <discovery_callback+0x184>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    4a0e:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    4a10:	4628      	mov	r0, r5
    4a12:	f7ff fe39 	bl	4688 <attr_store.constprop.0>
    4a16:	4604      	mov	r4, r0
	if (!cur_attr) {
    4a18:	b130      	cbz	r0, 4a28 <discovery_callback+0x188>
	return BT_GATT_ITER_CONTINUE;
    4a1a:	2401      	movs	r4, #1
		__ASSERT(false, "Unknown param type.");
		break;
	}

	return BT_GATT_ITER_STOP;
}
    4a1c:	4620      	mov	r0, r4
    4a1e:	b005      	add	sp, #20
    4a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cur_attr = attr_store(dm, attr, 0);
    4a24:	4621      	mov	r1, r4
    4a26:	e7f3      	b.n	4a10 <discovery_callback+0x170>
		LOG_ERR("Not enough memory for next attribute descriptor"
    4a28:	8a29      	ldrh	r1, [r5, #16]
    4a2a:	4820      	ldr	r0, [pc, #128]	; (4aac <discovery_callback+0x20c>)
    4a2c:	f046 0201 	orr.w	r2, r6, #1
    4a30:	e7db      	b.n	49ea <discovery_callback+0x14a>
	if (!attr) {
    4a32:	2d00      	cmp	r5, #0
    4a34:	d0dc      	beq.n	49f0 <discovery_callback+0x150>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    4a36:	8a29      	ldrh	r1, [r5, #16]
    4a38:	4638      	mov	r0, r7
    4a3a:	f01b fce5 	bl	20408 <attr_find_by_handle>
	if (!cur_attr) {
    4a3e:	4604      	mov	r4, r0
    4a40:	b920      	cbnz	r0, 4a4c <discovery_callback+0x1ac>
		discovery_complete_error(dm, -ESRCH);
    4a42:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    4a46:	f7ff feaf 	bl	47a8 <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    4a4a:	e7e7      	b.n	4a1c <discovery_callback+0x17c>
	gatt_chrc = attr->user_data;
    4a4c:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    4a4e:	f01b fd19 	bl	20484 <bt_gatt_dm_attr_chrc_val>
    4a52:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    4a54:	4621      	mov	r1, r4
    4a56:	2208      	movs	r2, #8
    4a58:	f01d fe62 	bl	22720 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    4a5c:	6828      	ldr	r0, [r5, #0]
    4a5e:	f7ff fef5 	bl	484c <uuid_store.constprop.0>
    4a62:	4604      	mov	r4, r0
    4a64:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    4a66:	2800      	cmp	r0, #0
    4a68:	d1d7      	bne.n	4a1a <discovery_callback+0x17a>
    4a6a:	e7a1      	b.n	49b0 <discovery_callback+0x110>
    4a6c:	00026544 	.word	0x00026544
    4a70:	0002661c 	.word	0x0002661c
    4a74:	000282e8 	.word	0x000282e8
    4a78:	0002808e 	.word	0x0002808e
    4a7c:	200015b0 	.word	0x200015b0
    4a80:	000280b5 	.word	0x000280b5
    4a84:	000280a1 	.word	0x000280a1
    4a88:	000282cc 	.word	0x000282cc
    4a8c:	000281a6 	.word	0x000281a6
    4a90:	000281cc 	.word	0x000281cc
    4a94:	000280d7 	.word	0x000280d7
    4a98:	000282b2 	.word	0x000282b2
    4a9c:	00028100 	.word	0x00028100
    4aa0:	0002812e 	.word	0x0002812e
    4aa4:	0002815c 	.word	0x0002815c
    4aa8:	0002817f 	.word	0x0002817f
    4aac:	000281f7 	.word	0x000281f7

00004ab0 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    4ab0:	b570      	push	{r4, r5, r6, lr}
    4ab2:	4606      	mov	r6, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    4ab4:	4608      	mov	r0, r1
    4ab6:	b119      	cbz	r1, 4ac0 <bt_gatt_dm_start+0x10>
    4ab8:	7809      	ldrb	r1, [r1, #0]
    4aba:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    4abe:	d14a      	bne.n	4b56 <bt_gatt_dm_start+0xa6>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    4ac0:	2a00      	cmp	r2, #0
    4ac2:	d048      	beq.n	4b56 <bt_gatt_dm_start+0xa6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4ac4:	f3bf 8f5b 	dmb	ish
    4ac8:	4c26      	ldr	r4, [pc, #152]	; (4b64 <bt_gatt_dm_start+0xb4>)
    4aca:	f504 759c 	add.w	r5, r4, #312	; 0x138
    4ace:	e855 1f00 	ldrex	r1, [r5]
    4ad2:	f041 0c01 	orr.w	ip, r1, #1
    4ad6:	e845 ce00 	strex	lr, ip, [r5]
    4ada:	f1be 0f00 	cmp.w	lr, #0
    4ade:	d1f6      	bne.n	4ace <bt_gatt_dm_start+0x1e>
    4ae0:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    4ae4:	f011 0101 	ands.w	r1, r1, #1
    4ae8:	d138      	bne.n	4b5c <bt_gatt_dm_start+0xac>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    4aea:	e9c4 6300 	strd	r6, r3, [r4]
	list->tail = NULL;
    4aee:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    4af2:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    4af6:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    4afa:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    4afe:	b108      	cbz	r0, 4b04 <bt_gatt_dm_start+0x54>
    4b00:	f7ff fea4 	bl	484c <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    4b04:	4b18      	ldr	r3, [pc, #96]	; (4b68 <bt_gatt_dm_start+0xb8>)
    4b06:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    4b08:	2301      	movs	r3, #1
    4b0a:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    4b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    4b10:	60a0      	str	r0, [r4, #8]
	dm->discover_params.end_handle = 0xffff;
    4b12:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;

	err = bt_gatt_discover(conn, &dm->discover_params);
    4b14:	4915      	ldr	r1, [pc, #84]	; (4b6c <bt_gatt_dm_start+0xbc>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    4b16:	2300      	movs	r3, #0
	err = bt_gatt_discover(conn, &dm->discover_params);
    4b18:	4630      	mov	r0, r6
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    4b1a:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    4b1c:	f009 fa8e 	bl	e03c <bt_gatt_discover>
	if (err) {
    4b20:	4604      	mov	r4, r0
    4b22:	b1b0      	cbz	r0, 4b52 <bt_gatt_dm_start+0xa2>
    4b24:	4b12      	ldr	r3, [pc, #72]	; (4b70 <bt_gatt_dm_start+0xc0>)
    4b26:	4a13      	ldr	r2, [pc, #76]	; (4b74 <bt_gatt_dm_start+0xc4>)
    4b28:	1ad2      	subs	r2, r2, r3
    4b2a:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("Discover failed, error: %d.", err);
    4b2c:	0192      	lsls	r2, r2, #6
    4b2e:	4601      	mov	r1, r0
    4b30:	f042 0201 	orr.w	r2, r2, #1
    4b34:	4810      	ldr	r0, [pc, #64]	; (4b78 <bt_gatt_dm_start+0xc8>)
    4b36:	f01c f850 	bl	20bda <log_1>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4b3a:	f3bf 8f5b 	dmb	ish
    4b3e:	e855 3f00 	ldrex	r3, [r5]
    4b42:	f023 0301 	bic.w	r3, r3, #1
    4b46:	e845 3200 	strex	r2, r3, [r5]
    4b4a:	2a00      	cmp	r2, #0
    4b4c:	d1f7      	bne.n	4b3e <bt_gatt_dm_start+0x8e>
    4b4e:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    4b52:	4620      	mov	r0, r4
    4b54:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    4b56:	f06f 0415 	mvn.w	r4, #21
    4b5a:	e7fa      	b.n	4b52 <bt_gatt_dm_start+0xa2>
		return -EALREADY;
    4b5c:	f06f 0444 	mvn.w	r4, #68	; 0x44
    4b60:	e7f7      	b.n	4b52 <bt_gatt_dm_start+0xa2>
    4b62:	bf00      	nop
    4b64:	200015b0 	.word	0x200015b0
    4b68:	000048a1 	.word	0x000048a1
    4b6c:	200015b8 	.word	0x200015b8
    4b70:	00026544 	.word	0x00026544
    4b74:	0002661c 	.word	0x0002661c
    4b78:	00028235 	.word	0x00028235

00004b7c <discovery_error>:
	printk("Error while discovering GATT database: (%d)\n", err);
    4b7c:	4801      	ldr	r0, [pc, #4]	; (4b84 <discovery_error+0x8>)
    4b7e:	f01b bd5f 	b.w	20640 <printk>
    4b82:	bf00      	nop
    4b84:	000282fb 	.word	0x000282fb

00004b88 <discovery_service_not_found>:
	printk("Service not found\n");
    4b88:	4801      	ldr	r0, [pc, #4]	; (4b90 <discovery_service_not_found+0x8>)
    4b8a:	f01b bd59 	b.w	20640 <printk>
    4b8e:	bf00      	nop
    4b90:	00028328 	.word	0x00028328

00004b94 <throughput_send>:
{
    4b94:	b507      	push	{r0, r1, r2, lr}
	printk("\n[local] received %u bytes (%u KB)"
    4b96:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
    4b9a:	9300      	str	r3, [sp, #0]
    4b9c:	6803      	ldr	r3, [r0, #0]
    4b9e:	4803      	ldr	r0, [pc, #12]	; (4bac <throughput_send+0x18>)
    4ba0:	0a8a      	lsrs	r2, r1, #10
    4ba2:	f01b fd4d 	bl	20640 <printk>
}
    4ba6:	b003      	add	sp, #12
    4ba8:	f85d fb04 	ldr.w	pc, [sp], #4
    4bac:	0002833b 	.word	0x0002833b

00004bb0 <throughput_read>:
{
    4bb0:	b507      	push	{r0, r1, r2, lr}
	printk("[peer] received %u bytes (%u KB)"
    4bb2:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
    4bb6:	9300      	str	r3, [sp, #0]
    4bb8:	6803      	ldr	r3, [r0, #0]
    4bba:	4805      	ldr	r0, [pc, #20]	; (4bd0 <throughput_read+0x20>)
    4bbc:	0a8a      	lsrs	r2, r1, #10
    4bbe:	f01b fd3f 	bl	20640 <printk>
	test_ready = true;
    4bc2:	4b04      	ldr	r3, [pc, #16]	; (4bd4 <throughput_read+0x24>)
    4bc4:	2201      	movs	r2, #1
}
    4bc6:	2000      	movs	r0, #0
	test_ready = true;
    4bc8:	701a      	strb	r2, [r3, #0]
}
    4bca:	b003      	add	sp, #12
    4bcc:	f85d fb04 	ldr.w	pc, [sp], #4
    4bd0:	0002837b 	.word	0x0002837b
    4bd4:	20004def 	.word	0x20004def

00004bd8 <discovery_complete>:
{
    4bd8:	b538      	push	{r3, r4, r5, lr}
    4bda:	4604      	mov	r4, r0
    4bdc:	460d      	mov	r5, r1
	printk("Service discovery completed\n");
    4bde:	480e      	ldr	r0, [pc, #56]	; (4c18 <discovery_complete+0x40>)
    4be0:	f01b fd2e 	bl	20640 <printk>
	bt_gatt_throughput_handles_assign(dm, throughput);
    4be4:	4629      	mov	r1, r5
    4be6:	4620      	mov	r0, r4
    4be8:	f000 fa34 	bl	5054 <bt_gatt_throughput_handles_assign>
	bt_gatt_dm_data_release(dm);
    4bec:	4620      	mov	r0, r4
    4bee:	f01b fcd2 	bl	20596 <bt_gatt_dm_data_release>
	exchange_params.func = exchange_func;
    4bf2:	490a      	ldr	r1, [pc, #40]	; (4c1c <discovery_complete+0x44>)
    4bf4:	4b0a      	ldr	r3, [pc, #40]	; (4c20 <discovery_complete+0x48>)
    4bf6:	600b      	str	r3, [r1, #0]
	err = bt_gatt_exchange_mtu(default_conn, &exchange_params);
    4bf8:	4b0a      	ldr	r3, [pc, #40]	; (4c24 <discovery_complete+0x4c>)
    4bfa:	6818      	ldr	r0, [r3, #0]
    4bfc:	f009 f9f8 	bl	dff0 <bt_gatt_exchange_mtu>
	if (err) {
    4c00:	4601      	mov	r1, r0
    4c02:	b120      	cbz	r0, 4c0e <discovery_complete+0x36>
}
    4c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("MTU exchange failed (err %d)\n", err);
    4c08:	4807      	ldr	r0, [pc, #28]	; (4c28 <discovery_complete+0x50>)
    4c0a:	f01b bd19 	b.w	20640 <printk>
}
    4c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("MTU exchange pending\n");
    4c12:	4806      	ldr	r0, [pc, #24]	; (4c2c <discovery_complete+0x54>)
    4c14:	f01b bd14 	b.w	20640 <printk>
    4c18:	000283b9 	.word	0x000283b9
    4c1c:	20001700 	.word	0x20001700
    4c20:	00004e95 	.word	0x00004e95
    4c24:	200016fc 	.word	0x200016fc
    4c28:	000283d6 	.word	0x000283d6
    4c2c:	000283f4 	.word	0x000283f4

00004c30 <adv_start>:
{
    4c30:	b530      	push	{r4, r5, lr}
		BT_LE_ADV_PARAM(BT_LE_ADV_OPT_CONNECTABLE |
    4c32:	4d0c      	ldr	r5, [pc, #48]	; (4c64 <adv_start+0x34>)
    4c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    4c36:	b089      	sub	sp, #36	; 0x24
		BT_LE_ADV_PARAM(BT_LE_ADV_OPT_CONNECTABLE |
    4c38:	ac03      	add	r4, sp, #12
    4c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4c3c:	682b      	ldr	r3, [r5, #0]
    4c3e:	6023      	str	r3, [r4, #0]
	err = bt_le_adv_start(adv_param, ad, ARRAY_SIZE(ad), NULL,
    4c40:	2300      	movs	r3, #0
    4c42:	4909      	ldr	r1, [pc, #36]	; (4c68 <adv_start+0x38>)
    4c44:	9300      	str	r3, [sp, #0]
    4c46:	2202      	movs	r2, #2
    4c48:	a803      	add	r0, sp, #12
    4c4a:	f01e f810 	bl	22c6e <bt_le_adv_start>
	if (err) {
    4c4e:	4601      	mov	r1, r0
    4c50:	b120      	cbz	r0, 4c5c <adv_start+0x2c>
		printk("Failed to start advertiser (%d)\n", err);
    4c52:	4806      	ldr	r0, [pc, #24]	; (4c6c <adv_start+0x3c>)
    4c54:	f01b fcf4 	bl	20640 <printk>
}
    4c58:	b009      	add	sp, #36	; 0x24
    4c5a:	bd30      	pop	{r4, r5, pc}
	printk("Start advertising\n");
    4c5c:	4804      	ldr	r0, [pc, #16]	; (4c70 <adv_start+0x40>)
    4c5e:	f01b fcef 	bl	20640 <printk>
    4c62:	e7f9      	b.n	4c58 <adv_start+0x28>
    4c64:	000266c0 	.word	0x000266c0
    4c68:	000267b8 	.word	0x000267b8
    4c6c:	0002840a 	.word	0x0002840a
    4c70:	0002842b 	.word	0x0002842b

00004c74 <disconnected>:
{
    4c74:	b570      	push	{r4, r5, r6, lr}
    4c76:	b088      	sub	sp, #32
    4c78:	460d      	mov	r5, r1
	struct bt_conn_info info = {0};
    4c7a:	221c      	movs	r2, #28
    4c7c:	2100      	movs	r1, #0
{
    4c7e:	4604      	mov	r4, r0
	struct bt_conn_info info = {0};
    4c80:	a801      	add	r0, sp, #4
    4c82:	f01d fd78 	bl	22776 <memset>
	printk("Disconnected (reason 0x%02x)\n", reason);
    4c86:	4629      	mov	r1, r5
	if (default_conn) {
    4c88:	4d0e      	ldr	r5, [pc, #56]	; (4cc4 <disconnected+0x50>)
	printk("Disconnected (reason 0x%02x)\n", reason);
    4c8a:	480f      	ldr	r0, [pc, #60]	; (4cc8 <disconnected+0x54>)
    4c8c:	f01b fcd8 	bl	20640 <printk>
	test_ready = false;
    4c90:	4b0e      	ldr	r3, [pc, #56]	; (4ccc <disconnected+0x58>)
	if (default_conn) {
    4c92:	6828      	ldr	r0, [r5, #0]
	test_ready = false;
    4c94:	2600      	movs	r6, #0
    4c96:	701e      	strb	r6, [r3, #0]
	if (default_conn) {
    4c98:	b110      	cbz	r0, 4ca0 <disconnected+0x2c>
		bt_conn_unref(default_conn);
    4c9a:	f01e f90d 	bl	22eb8 <bt_conn_unref>
		default_conn = NULL;
    4c9e:	602e      	str	r6, [r5, #0]
	err = bt_conn_get_info(conn, &info);
    4ca0:	a901      	add	r1, sp, #4
    4ca2:	4620      	mov	r0, r4
    4ca4:	f005 fe1a 	bl	a8dc <bt_conn_get_info>
	if (err) {
    4ca8:	4601      	mov	r1, r0
    4caa:	b120      	cbz	r0, 4cb6 <disconnected+0x42>
		printk("Failed to get connection info (%d)\n", err);
    4cac:	4808      	ldr	r0, [pc, #32]	; (4cd0 <disconnected+0x5c>)
    4cae:	f01b fcc7 	bl	20640 <printk>
}
    4cb2:	b008      	add	sp, #32
    4cb4:	bd70      	pop	{r4, r5, r6, pc}
	if (info.role != BT_CONN_ROLE_MASTER) {
    4cb6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4cba:	2b00      	cmp	r3, #0
    4cbc:	d0f9      	beq.n	4cb2 <disconnected+0x3e>
		adv_start();
    4cbe:	f7ff ffb7 	bl	4c30 <adv_start>
    4cc2:	e7f6      	b.n	4cb2 <disconnected+0x3e>
    4cc4:	200016fc 	.word	0x200016fc
    4cc8:	0002843e 	.word	0x0002843e
    4ccc:	20004def 	.word	0x20004def
    4cd0:	0002845c 	.word	0x0002845c

00004cd4 <connected>:
{
    4cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cd6:	b08d      	sub	sp, #52	; 0x34
    4cd8:	460c      	mov	r4, r1
    4cda:	4606      	mov	r6, r0
	struct bt_conn_info info = {0};
    4cdc:	221c      	movs	r2, #28
    4cde:	2100      	movs	r1, #0
    4ce0:	a805      	add	r0, sp, #20
    4ce2:	f01d fd48 	bl	22776 <memset>
	if (hci_err) {
    4ce6:	b134      	cbz	r4, 4cf6 <connected+0x22>
		if (hci_err == BT_HCI_ERR_UNKNOWN_CONN_ID) {
    4ce8:	2c02      	cmp	r4, #2
    4cea:	d00e      	beq.n	4d0a <connected+0x36>
		printk("Connection failed (err 0x%02x)\n", hci_err);
    4cec:	482e      	ldr	r0, [pc, #184]	; (4da8 <connected+0xd4>)
    4cee:	4621      	mov	r1, r4
			printk("Discover failed (err %d)\n", err);
    4cf0:	f01b fca6 	bl	20640 <printk>
    4cf4:	e009      	b.n	4d0a <connected+0x36>
	if (default_conn) {
    4cf6:	4c2d      	ldr	r4, [pc, #180]	; (4dac <connected+0xd8>)
    4cf8:	6823      	ldr	r3, [r4, #0]
    4cfa:	b143      	cbz	r3, 4d0e <connected+0x3a>
		printk("Connection exists, disconnect second connection\n");
    4cfc:	482c      	ldr	r0, [pc, #176]	; (4db0 <connected+0xdc>)
    4cfe:	f01b fc9f 	bl	20640 <printk>
		bt_conn_disconnect(conn, BT_HCI_ERR_LOCALHOST_TERM_CONN);
    4d02:	2116      	movs	r1, #22
    4d04:	4630      	mov	r0, r6
    4d06:	f005 fe8d 	bl	aa24 <bt_conn_disconnect>
}
    4d0a:	b00d      	add	sp, #52	; 0x34
    4d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (scan_conn) {
    4d0e:	4d29      	ldr	r5, [pc, #164]	; (4db4 <connected+0xe0>)
	default_conn = bt_conn_ref(conn);
    4d10:	4630      	mov	r0, r6
    4d12:	f01e f8ca 	bl	22eaa <bt_conn_ref>
	if (scan_conn) {
    4d16:	682b      	ldr	r3, [r5, #0]
	default_conn = bt_conn_ref(conn);
    4d18:	6020      	str	r0, [r4, #0]
	if (scan_conn) {
    4d1a:	b16b      	cbz	r3, 4d38 <connected+0x64>
		if (scan_conn != conn) {
    4d1c:	42b3      	cmp	r3, r6
    4d1e:	d006      	beq.n	4d2e <connected+0x5a>
			printk("Stop scanning for master connection\n");
    4d20:	4825      	ldr	r0, [pc, #148]	; (4db8 <connected+0xe4>)
    4d22:	f01b fc8d 	bl	20640 <printk>
			bt_conn_disconnect(scan_conn,
    4d26:	6828      	ldr	r0, [r5, #0]
    4d28:	2116      	movs	r1, #22
    4d2a:	f005 fe7b 	bl	aa24 <bt_conn_disconnect>
		bt_conn_unref(scan_conn);
    4d2e:	6828      	ldr	r0, [r5, #0]
    4d30:	f01e f8c2 	bl	22eb8 <bt_conn_unref>
		scan_conn = NULL;
    4d34:	2300      	movs	r3, #0
    4d36:	602b      	str	r3, [r5, #0]
	err = bt_conn_get_info(default_conn, &info);
    4d38:	a905      	add	r1, sp, #20
    4d3a:	6820      	ldr	r0, [r4, #0]
    4d3c:	f005 fdce 	bl	a8dc <bt_conn_get_info>
	if (err) {
    4d40:	4601      	mov	r1, r0
    4d42:	b108      	cbz	r0, 4d48 <connected+0x74>
		printk("Failed to get connection info %d\n", err);
    4d44:	481d      	ldr	r0, [pc, #116]	; (4dbc <connected+0xe8>)
    4d46:	e7d3      	b.n	4cf0 <connected+0x1c>
	printk("Connected as %s\n",
    4d48:	4b1d      	ldr	r3, [pc, #116]	; (4dc0 <connected+0xec>)
    4d4a:	4a1e      	ldr	r2, [pc, #120]	; (4dc4 <connected+0xf0>)
    4d4c:	f89d 1015 	ldrb.w	r1, [sp, #21]
    4d50:	481d      	ldr	r0, [pc, #116]	; (4dc8 <connected+0xf4>)
    4d52:	2900      	cmp	r1, #0
    4d54:	bf0c      	ite	eq
    4d56:	4611      	moveq	r1, r2
    4d58:	4619      	movne	r1, r3
    4d5a:	f01b fc71 	bl	20640 <printk>
	printk("Conn. interval is %u units\n", info.le.interval);
    4d5e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    4d62:	481a      	ldr	r0, [pc, #104]	; (4dcc <connected+0xf8>)
    4d64:	f01b fc6c 	bl	20640 <printk>
	if (info.role == BT_CONN_ROLE_SLAVE) {
    4d68:	f89d 3015 	ldrb.w	r3, [sp, #21]
    4d6c:	2b01      	cmp	r3, #1
    4d6e:	d1cc      	bne.n	4d0a <connected+0x36>
				       BT_UUID_THROUGHPUT,
    4d70:	4b17      	ldr	r3, [pc, #92]	; (4dd0 <connected+0xfc>)
		err = bt_gatt_dm_start(default_conn,
    4d72:	6825      	ldr	r5, [r4, #0]
				       BT_UUID_THROUGHPUT,
    4d74:	466a      	mov	r2, sp
    4d76:	f103 0710 	add.w	r7, r3, #16
    4d7a:	4616      	mov	r6, r2
    4d7c:	6818      	ldr	r0, [r3, #0]
    4d7e:	6859      	ldr	r1, [r3, #4]
    4d80:	4614      	mov	r4, r2
    4d82:	c403      	stmia	r4!, {r0, r1}
    4d84:	3308      	adds	r3, #8
    4d86:	42bb      	cmp	r3, r7
    4d88:	4622      	mov	r2, r4
    4d8a:	d1f7      	bne.n	4d7c <connected+0xa8>
    4d8c:	781b      	ldrb	r3, [r3, #0]
    4d8e:	7023      	strb	r3, [r4, #0]
		err = bt_gatt_dm_start(default_conn,
    4d90:	4631      	mov	r1, r6
    4d92:	4b10      	ldr	r3, [pc, #64]	; (4dd4 <connected+0x100>)
    4d94:	4a10      	ldr	r2, [pc, #64]	; (4dd8 <connected+0x104>)
    4d96:	4628      	mov	r0, r5
    4d98:	f7ff fe8a 	bl	4ab0 <bt_gatt_dm_start>
		if (err) {
    4d9c:	4601      	mov	r1, r0
    4d9e:	2800      	cmp	r0, #0
    4da0:	d0b3      	beq.n	4d0a <connected+0x36>
			printk("Discover failed (err %d)\n", err);
    4da2:	480e      	ldr	r0, [pc, #56]	; (4ddc <connected+0x108>)
    4da4:	e7a4      	b.n	4cf0 <connected+0x1c>
    4da6:	bf00      	nop
    4da8:	0002848d 	.word	0x0002848d
    4dac:	200016fc 	.word	0x200016fc
    4db0:	000284ad 	.word	0x000284ad
    4db4:	20001724 	.word	0x20001724
    4db8:	000284de 	.word	0x000284de
    4dbc:	00028503 	.word	0x00028503
    4dc0:	00028487 	.word	0x00028487
    4dc4:	00028480 	.word	0x00028480
    4dc8:	00028525 	.word	0x00028525
    4dcc:	00028536 	.word	0x00028536
    4dd0:	000266d4 	.word	0x000266d4
    4dd4:	20001704 	.word	0x20001704
    4dd8:	20000154 	.word	0x20000154
    4ddc:	00028552 	.word	0x00028552

00004de0 <throughput_received>:
	if (met->write_len == 0) {
    4de0:	6843      	ldr	r3, [r0, #4]
    4de2:	4a08      	ldr	r2, [pc, #32]	; (4e04 <throughput_received+0x24>)
    4de4:	b91b      	cbnz	r3, 4dee <throughput_received+0xe>
		printk("\n");
    4de6:	4808      	ldr	r0, [pc, #32]	; (4e08 <throughput_received+0x28>)
		kb = 0;
    4de8:	6013      	str	r3, [r2, #0]
		printk("=");
    4dea:	f01b bc29 	b.w	20640 <printk>
	if ((met->write_len / 1024) != kb) {
    4dee:	6810      	ldr	r0, [r2, #0]
    4df0:	ebb0 2f93 	cmp.w	r0, r3, lsr #10
    4df4:	ea4f 2193 	mov.w	r1, r3, lsr #10
    4df8:	d002      	beq.n	4e00 <throughput_received+0x20>
		printk("=");
    4dfa:	4804      	ldr	r0, [pc, #16]	; (4e0c <throughput_received+0x2c>)
		kb = (met->write_len / 1024);
    4dfc:	6011      	str	r1, [r2, #0]
		printk("=");
    4dfe:	e7f4      	b.n	4dea <throughput_received+0xa>
}
    4e00:	4770      	bx	lr
    4e02:	bf00      	nop
    4e04:	20001720 	.word	0x20001720
    4e08:	000288f1 	.word	0x000288f1
    4e0c:	0002856c 	.word	0x0002856c

00004e10 <auth_cancel>:
{
    4e10:	b530      	push	{r4, r5, lr}
    4e12:	b093      	sub	sp, #76	; 0x4c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    4e14:	f01e f853 	bl	22ebe <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    4e18:	7803      	ldrb	r3, [r0, #0]
    4e1a:	4604      	mov	r4, r0
    4e1c:	ad07      	add	r5, sp, #28
    4e1e:	2b03      	cmp	r3, #3
    4e20:	d824      	bhi.n	4e6c <auth_cancel+0x5c>
    4e22:	e8df f003 	tbb	[pc, r3]
    4e26:	1d02      	.short	0x1d02
    4e28:	211f      	.short	0x211f
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    4e2a:	4913      	ldr	r1, [pc, #76]	; (4e78 <auth_cancel+0x68>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    4e2c:	4628      	mov	r0, r5
    4e2e:	f01d fc37 	bl	226a0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4e32:	79a3      	ldrb	r3, [r4, #6]
    4e34:	9505      	str	r5, [sp, #20]
    4e36:	7862      	ldrb	r2, [r4, #1]
    4e38:	9204      	str	r2, [sp, #16]
    4e3a:	78a2      	ldrb	r2, [r4, #2]
    4e3c:	9203      	str	r2, [sp, #12]
    4e3e:	78e2      	ldrb	r2, [r4, #3]
    4e40:	9202      	str	r2, [sp, #8]
    4e42:	7922      	ldrb	r2, [r4, #4]
    4e44:	9201      	str	r2, [sp, #4]
    4e46:	7962      	ldrb	r2, [r4, #5]
    4e48:	9200      	str	r2, [sp, #0]
    4e4a:	211e      	movs	r1, #30
    4e4c:	4a0b      	ldr	r2, [pc, #44]	; (4e7c <auth_cancel+0x6c>)
    4e4e:	a80a      	add	r0, sp, #40	; 0x28
    4e50:	f01b fc03 	bl	2065a <snprintk>
	printk("Pairing cancelled: %s\n", addr);
    4e54:	480a      	ldr	r0, [pc, #40]	; (4e80 <auth_cancel+0x70>)
    4e56:	a90a      	add	r1, sp, #40	; 0x28
    4e58:	f01b fbf2 	bl	20640 <printk>
}
    4e5c:	b013      	add	sp, #76	; 0x4c
    4e5e:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    4e60:	4908      	ldr	r1, [pc, #32]	; (4e84 <auth_cancel+0x74>)
    4e62:	e7e3      	b.n	4e2c <auth_cancel+0x1c>
		strcpy(type, "public-id");
    4e64:	4908      	ldr	r1, [pc, #32]	; (4e88 <auth_cancel+0x78>)
    4e66:	e7e1      	b.n	4e2c <auth_cancel+0x1c>
		strcpy(type, "random-id");
    4e68:	4908      	ldr	r1, [pc, #32]	; (4e8c <auth_cancel+0x7c>)
    4e6a:	e7df      	b.n	4e2c <auth_cancel+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    4e6c:	4a08      	ldr	r2, [pc, #32]	; (4e90 <auth_cancel+0x80>)
    4e6e:	210a      	movs	r1, #10
    4e70:	4628      	mov	r0, r5
    4e72:	f01b fbf2 	bl	2065a <snprintk>
		break;
    4e76:	e7dc      	b.n	4e32 <auth_cancel+0x22>
    4e78:	0002856e 	.word	0x0002856e
    4e7c:	00028590 	.word	0x00028590
    4e80:	000285b3 	.word	0x000285b3
    4e84:	00028575 	.word	0x00028575
    4e88:	0002857c 	.word	0x0002857c
    4e8c:	00028586 	.word	0x00028586
    4e90:	0002a546 	.word	0x0002a546

00004e94 <exchange_func>:
{
    4e94:	b530      	push	{r4, r5, lr}
    4e96:	b089      	sub	sp, #36	; 0x24
	struct bt_conn_info info = {0};
    4e98:	221c      	movs	r2, #28
{
    4e9a:	4604      	mov	r4, r0
    4e9c:	460d      	mov	r5, r1
	struct bt_conn_info info = {0};
    4e9e:	a801      	add	r0, sp, #4
    4ea0:	2100      	movs	r1, #0
    4ea2:	f01d fc68 	bl	22776 <memset>
	printk("MTU exchange %s\n", att_err == 0 ? "successful" : "failed");
    4ea6:	4b12      	ldr	r3, [pc, #72]	; (4ef0 <exchange_func+0x5c>)
    4ea8:	4912      	ldr	r1, [pc, #72]	; (4ef4 <exchange_func+0x60>)
    4eaa:	4813      	ldr	r0, [pc, #76]	; (4ef8 <exchange_func+0x64>)
    4eac:	2d00      	cmp	r5, #0
    4eae:	bf18      	it	ne
    4eb0:	4619      	movne	r1, r3
    4eb2:	f01b fbc5 	bl	20640 <printk>
	err = bt_conn_get_info(conn, &info);
    4eb6:	a901      	add	r1, sp, #4
    4eb8:	4620      	mov	r0, r4
    4eba:	f005 fd0f 	bl	a8dc <bt_conn_get_info>
	if (err){
    4ebe:	4601      	mov	r1, r0
    4ec0:	b120      	cbz	r0, 4ecc <exchange_func+0x38>
		printk("Failed to get connection info %d\n", err);
    4ec2:	480e      	ldr	r0, [pc, #56]	; (4efc <exchange_func+0x68>)
    4ec4:	f01b fbbc 	bl	20640 <printk>
}
    4ec8:	b009      	add	sp, #36	; 0x24
    4eca:	bd30      	pop	{r4, r5, pc}
	uint32_t stamp = k_uptime_get_32();
    4ecc:	f01b fb89 	bl	205e2 <k_uptime_get_32>
	while(k_uptime_get_32()-stamp < 60000);
    4ed0:	f64e 255f 	movw	r5, #59999	; 0xea5f
	uint32_t stamp = k_uptime_get_32();
    4ed4:	4604      	mov	r4, r0
	while(k_uptime_get_32()-stamp < 60000);
    4ed6:	f01b fb84 	bl	205e2 <k_uptime_get_32>
    4eda:	1b03      	subs	r3, r0, r4
    4edc:	42ab      	cmp	r3, r5
    4ede:	d9fa      	bls.n	4ed6 <exchange_func+0x42>
	if (info.role == BT_CONN_ROLE_SLAVE) {
    4ee0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4ee4:	2b01      	cmp	r3, #1
		test_ready = true;
    4ee6:	bf04      	itt	eq
    4ee8:	4a05      	ldreq	r2, [pc, #20]	; (4f00 <exchange_func+0x6c>)
    4eea:	7013      	strbeq	r3, [r2, #0]
    4eec:	e7ec      	b.n	4ec8 <exchange_func+0x34>
    4eee:	bf00      	nop
    4ef0:	00029919 	.word	0x00029919
    4ef4:	000285ca 	.word	0x000285ca
    4ef8:	000285d5 	.word	0x000285d5
    4efc:	00028503 	.word	0x00028503
    4f00:	20004def 	.word	0x20004def

00004f04 <write_callback>:
}

static ssize_t write_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      uint16_t len, uint16_t offset, uint8_t flags)
{
    4f04:	b570      	push	{r4, r5, r6, lr}

	uint64_t delta;

	struct bt_gatt_throughput_metrics *met_data = attr->user_data;

	delta = k_cycle_get_32() - clock_cycles;
    4f06:	4e1c      	ldr	r6, [pc, #112]	; (4f78 <write_callback+0x74>)
	struct bt_gatt_throughput_metrics *met_data = attr->user_data;
    4f08:	68cc      	ldr	r4, [r1, #12]
{
    4f0a:	461d      	mov	r5, r3
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    4f0c:	f001 fa2e 	bl	636c <z_timer_cycle_get_32>
	delta = k_cycle_get_32() - clock_cycles;
    4f10:	6833      	ldr	r3, [r6, #0]
    4f12:	1ac0      	subs	r0, r0, r3
    4f14:	4b19      	ldr	r3, [pc, #100]	; (4f7c <write_callback+0x78>)
    4f16:	fba0 0103 	umull	r0, r1, r0, r3
    4f1a:	0bc2      	lsrs	r2, r0, #15
	delta = k_cyc_to_ns_floor64(delta);

	if (len == 1) {
    4f1c:	2d01      	cmp	r5, #1
    4f1e:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
    4f22:	ea4f 33d1 	mov.w	r3, r1, lsr #15
    4f26:	d119      	bne.n	4f5c <write_callback+0x58>
		/* reset metrics */
		kb = 0;
		met_data->write_count = 0;
    4f28:	2300      	movs	r3, #0
		met_data->write_len = 0;
    4f2a:	e9c4 3300 	strd	r3, r3, [r4]
		met_data->write_rate = 0;
    4f2e:	60a3      	str	r3, [r4, #8]
    4f30:	f001 fa1c 	bl	636c <z_timer_cycle_get_32>
		clock_cycles = k_cycle_get_32();
    4f34:	6030      	str	r0, [r6, #0]
    4f36:	4b12      	ldr	r3, [pc, #72]	; (4f80 <write_callback+0x7c>)
    4f38:	4a12      	ldr	r2, [pc, #72]	; (4f84 <write_callback+0x80>)
		met_data->write_len += len;
		met_data->write_rate =
		    ((uint64_t)met_data->write_len << 3) * 1000000000 / delta;
	}

	LOG_DBG("Received data.");
    4f3a:	4913      	ldr	r1, [pc, #76]	; (4f88 <write_callback+0x84>)
    4f3c:	4813      	ldr	r0, [pc, #76]	; (4f8c <write_callback+0x88>)
    4f3e:	1ad2      	subs	r2, r2, r3
    4f40:	08d2      	lsrs	r2, r2, #3
    4f42:	0192      	lsls	r2, r2, #6
    4f44:	f042 0204 	orr.w	r2, r2, #4
    4f48:	f01b fe47 	bl	20bda <log_1>

	if (callbacks->data_received) {
    4f4c:	4b10      	ldr	r3, [pc, #64]	; (4f90 <write_callback+0x8c>)
    4f4e:	681b      	ldr	r3, [r3, #0]
    4f50:	685b      	ldr	r3, [r3, #4]
    4f52:	b10b      	cbz	r3, 4f58 <write_callback+0x54>
		callbacks->data_received(met_data);
    4f54:	4620      	mov	r0, r4
    4f56:	4798      	blx	r3
	}

	return len;
}
    4f58:	4628      	mov	r0, r5
    4f5a:	bd70      	pop	{r4, r5, r6, pc}
		met_data->write_count++;
    4f5c:	6821      	ldr	r1, [r4, #0]
		met_data->write_len += len;
    4f5e:	6866      	ldr	r6, [r4, #4]
		    ((uint64_t)met_data->write_len << 3) * 1000000000 / delta;
    4f60:	480c      	ldr	r0, [pc, #48]	; (4f94 <write_callback+0x90>)
		met_data->write_len += len;
    4f62:	442e      	add	r6, r5
		met_data->write_count++;
    4f64:	3101      	adds	r1, #1
    4f66:	6021      	str	r1, [r4, #0]
		    ((uint64_t)met_data->write_len << 3) * 1000000000 / delta;
    4f68:	fba6 0100 	umull	r0, r1, r6, r0
		met_data->write_len += len;
    4f6c:	6066      	str	r6, [r4, #4]
		    ((uint64_t)met_data->write_len << 3) * 1000000000 / delta;
    4f6e:	4431      	add	r1, r6
    4f70:	f7fb f8c6 	bl	100 <__aeabi_uldivmod>
		met_data->write_rate =
    4f74:	60a0      	str	r0, [r4, #8]
    4f76:	e7de      	b.n	4f36 <write_callback+0x32>
    4f78:	2000172c 	.word	0x2000172c
    4f7c:	3b9aca00 	.word	0x3b9aca00
    4f80:	00026544 	.word	0x00026544
    4f84:	00026624 	.word	0x00026624
    4f88:	00028802 	.word	0x00028802
    4f8c:	000286fe 	.word	0x000286fe
    4f90:	20001728 	.word	0x20001728
    4f94:	dcd65000 	.word	0xdcd65000

00004f98 <read_callback>:
			     const struct bt_gatt_attr *attr, void *buf,
			     uint16_t len, uint16_t offset)
{
	const struct bt_gatt_throughput_metrics *metrics = attr->user_data;

	len = MIN(sizeof(struct bt_gatt_throughput_metrics), len);
    4f98:	2b0c      	cmp	r3, #12
{
    4f9a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	len = MIN(sizeof(struct bt_gatt_throughput_metrics), len);
    4f9e:	bf28      	it	cs
    4fa0:	230c      	movcs	r3, #12
    4fa2:	461e      	mov	r6, r3

	if (callbacks->data_send) {
    4fa4:	4b11      	ldr	r3, [pc, #68]	; (4fec <read_callback+0x54>)
    4fa6:	681b      	ldr	r3, [r3, #0]
    4fa8:	689b      	ldr	r3, [r3, #8]
{
    4faa:	4607      	mov	r7, r0
    4fac:	460d      	mov	r5, r1
    4fae:	4690      	mov	r8, r2
	if (callbacks->data_send) {
    4fb0:	b10b      	cbz	r3, 4fb6 <read_callback+0x1e>
		callbacks->data_send(metrics);
    4fb2:	68c8      	ldr	r0, [r1, #12]
    4fb4:	4798      	blx	r3
    4fb6:	4a0e      	ldr	r2, [pc, #56]	; (4ff0 <read_callback+0x58>)
    4fb8:	4c0e      	ldr	r4, [pc, #56]	; (4ff4 <read_callback+0x5c>)
	}

	LOG_DBG("Data send.");
    4fba:	490f      	ldr	r1, [pc, #60]	; (4ff8 <read_callback+0x60>)
    4fbc:	480f      	ldr	r0, [pc, #60]	; (4ffc <read_callback+0x64>)
    4fbe:	1aa4      	subs	r4, r4, r2
    4fc0:	08e4      	lsrs	r4, r4, #3
    4fc2:	01a4      	lsls	r4, r4, #6
    4fc4:	f044 0204 	orr.w	r2, r4, #4
    4fc8:	f01b fe07 	bl	20bda <log_1>

	return bt_gatt_attr_read(
    4fcc:	68eb      	ldr	r3, [r5, #12]
    4fce:	9301      	str	r3, [sp, #4]
    4fd0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    4fd4:	9300      	str	r3, [sp, #0]
    4fd6:	9602      	str	r6, [sp, #8]
    4fd8:	4633      	mov	r3, r6
    4fda:	4642      	mov	r2, r8
    4fdc:	4629      	mov	r1, r5
    4fde:	4638      	mov	r0, r7
    4fe0:	f01f f96b 	bl	242ba <bt_gatt_attr_read>
		conn, attr, buf, len, offset, attr->user_data, len);
}
    4fe4:	b004      	add	sp, #16
    4fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fea:	bf00      	nop
    4fec:	20001728 	.word	0x20001728
    4ff0:	00026544 	.word	0x00026544
    4ff4:	00026624 	.word	0x00026624
    4ff8:	00028811 	.word	0x00028811
    4ffc:	00028711 	.word	0x00028711

00005000 <read_fn>:
{
    5000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5002:	461c      	mov	r4, r3
	memset(&metrics, 0, sizeof(struct bt_gatt_throughput_metrics));
    5004:	220c      	movs	r2, #12
    5006:	2100      	movs	r1, #0
    5008:	a801      	add	r0, sp, #4
    500a:	f01d fbb4 	bl	22776 <memset>
	if (data) {
    500e:	b914      	cbnz	r4, 5016 <read_fn+0x16>
	return BT_GATT_ITER_STOP;
    5010:	2000      	movs	r0, #0
}
    5012:	b004      	add	sp, #16
    5014:	bd10      	pop	{r4, pc}
		memcpy(&metrics, data, len);
    5016:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    501a:	2a0c      	cmp	r2, #12
    501c:	bf28      	it	cs
    501e:	220c      	movcs	r2, #12
    5020:	4621      	mov	r1, r4
    5022:	a801      	add	r0, sp, #4
    5024:	f01d fb7c 	bl	22720 <memcpy>
		if (callbacks->data_read) {
    5028:	4b03      	ldr	r3, [pc, #12]	; (5038 <read_fn+0x38>)
    502a:	681b      	ldr	r3, [r3, #0]
    502c:	681b      	ldr	r3, [r3, #0]
    502e:	2b00      	cmp	r3, #0
    5030:	d0ee      	beq.n	5010 <read_fn+0x10>
			return callbacks->data_read(&metrics);
    5032:	a801      	add	r0, sp, #4
    5034:	4798      	blx	r3
    5036:	e7ec      	b.n	5012 <read_fn+0x12>
    5038:	20001728 	.word	0x20001728

0000503c <bt_gatt_throughput_init>:
);

int bt_gatt_throughput_init(struct bt_gatt_throughput *throughput,
			    const struct bt_gatt_throughput_cb *cb)
{
	if (!throughput || !cb) {
    503c:	b120      	cbz	r0, 5048 <bt_gatt_throughput_init+0xc>
    503e:	b119      	cbz	r1, 5048 <bt_gatt_throughput_init+0xc>
		return -EINVAL;
	}

	callbacks = cb;
    5040:	4b03      	ldr	r3, [pc, #12]	; (5050 <bt_gatt_throughput_init+0x14>)

	return 0;
    5042:	2000      	movs	r0, #0
	callbacks = cb;
    5044:	6019      	str	r1, [r3, #0]
	return 0;
    5046:	4770      	bx	lr
		return -EINVAL;
    5048:	f06f 0015 	mvn.w	r0, #21
}
    504c:	4770      	bx	lr
    504e:	bf00      	nop
    5050:	20001728 	.word	0x20001728

00005054 <bt_gatt_throughput_handles_assign>:

int bt_gatt_throughput_handles_assign(struct bt_gatt_dm *dm,
				      struct bt_gatt_throughput *throughput)
{
    5054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5058:	b087      	sub	sp, #28
    505a:	460e      	mov	r6, r1
    505c:	4605      	mov	r5, r0
	const struct bt_gatt_dm_attr *gatt_service_attr =
			bt_gatt_dm_service_get(dm);
    505e:	f01b fa27 	bl	204b0 <bt_gatt_dm_service_get>
	const struct bt_gatt_service_val *gatt_service =
			bt_gatt_dm_attr_service_val(gatt_service_attr);
    5062:	f01b f9ef 	bl	20444 <bt_gatt_dm_attr_service_val>
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_THROUGHPUT)) {
    5066:	4b2e      	ldr	r3, [pc, #184]	; (5120 <bt_gatt_throughput_handles_assign+0xcc>)
    5068:	f8d0 c000 	ldr.w	ip, [r0]
    506c:	aa01      	add	r2, sp, #4
    506e:	f103 0e10 	add.w	lr, r3, #16
    5072:	4617      	mov	r7, r2
    5074:	6818      	ldr	r0, [r3, #0]
    5076:	6859      	ldr	r1, [r3, #4]
    5078:	4614      	mov	r4, r2
    507a:	c403      	stmia	r4!, {r0, r1}
    507c:	3308      	adds	r3, #8
    507e:	4573      	cmp	r3, lr
    5080:	4622      	mov	r2, r4
    5082:	d1f7      	bne.n	5074 <bt_gatt_throughput_handles_assign+0x20>
    5084:	781b      	ldrb	r3, [r3, #0]
    5086:	7023      	strb	r3, [r4, #0]
    5088:	4639      	mov	r1, r7
    508a:	4660      	mov	r0, ip
    508c:	f01d fc17 	bl	228be <bt_uuid_cmp>
    5090:	4680      	mov	r8, r0
    5092:	b128      	cbz	r0, 50a0 <bt_gatt_throughput_handles_assign+0x4c>
		return -ENOTSUP;
    5094:	f06f 0822 	mvn.w	r8, #34	; 0x22
	throughput->char_handle = gatt_desc->handle;

	/* Assign connection object. */
	throughput->conn = bt_gatt_dm_conn_get(dm);
	return 0;
}
    5098:	4640      	mov	r0, r8
    509a:	b007      	add	sp, #28
    509c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    50a0:	4b20      	ldr	r3, [pc, #128]	; (5124 <bt_gatt_throughput_handles_assign+0xd0>)
    50a2:	4c21      	ldr	r4, [pc, #132]	; (5128 <bt_gatt_throughput_handles_assign+0xd4>)
	LOG_DBG("Getting handles from Throughput service.");
    50a4:	4921      	ldr	r1, [pc, #132]	; (512c <bt_gatt_throughput_handles_assign+0xd8>)
    50a6:	4822      	ldr	r0, [pc, #136]	; (5130 <bt_gatt_throughput_handles_assign+0xdc>)
    50a8:	1ae4      	subs	r4, r4, r3
    50aa:	08e4      	lsrs	r4, r4, #3
    50ac:	01a4      	lsls	r4, r4, #6
    50ae:	f044 0204 	orr.w	r2, r4, #4
    50b2:	f01b fd92 	bl	20bda <log_1>
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_THROUGHPUT_CHAR);
    50b6:	f241 5324 	movw	r3, #5412	; 0x1524
    50ba:	4669      	mov	r1, sp
    50bc:	4628      	mov	r0, r5
    50be:	f88d 8000 	strb.w	r8, [sp]
    50c2:	f8ad 3002 	strh.w	r3, [sp, #2]
    50c6:	f01b fa17 	bl	204f8 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    50ca:	4681      	mov	r9, r0
    50cc:	b920      	cbnz	r0, 50d8 <bt_gatt_throughput_handles_assign+0x84>
		LOG_ERR("Missing Throughput characteristic.");
    50ce:	4819      	ldr	r0, [pc, #100]	; (5134 <bt_gatt_throughput_handles_assign+0xe0>)
    50d0:	f044 0101 	orr.w	r1, r4, #1
    50d4:	f01b fd74 	bl	20bc0 <log_0>
					    BT_UUID_THROUGHPUT_CHAR);
    50d8:	2300      	movs	r3, #0
    50da:	f88d 3004 	strb.w	r3, [sp, #4]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    50de:	463a      	mov	r2, r7
					    BT_UUID_THROUGHPUT_CHAR);
    50e0:	f241 5324 	movw	r3, #5412	; 0x1524
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    50e4:	4649      	mov	r1, r9
    50e6:	4628      	mov	r0, r5
					    BT_UUID_THROUGHPUT_CHAR);
    50e8:	f8ad 3006 	strh.w	r3, [sp, #6]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    50ec:	f01b fa41 	bl	20572 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    50f0:	4607      	mov	r7, r0
    50f2:	b938      	cbnz	r0, 5104 <bt_gatt_throughput_handles_assign+0xb0>
		LOG_ERR("Missing Throughput characteristic value descriptor");
    50f4:	4810      	ldr	r0, [pc, #64]	; (5138 <bt_gatt_throughput_handles_assign+0xe4>)
    50f6:	f044 0101 	orr.w	r1, r4, #1
    50fa:	f01b fd61 	bl	20bc0 <log_0>
		return -EINVAL;
    50fe:	f06f 0815 	mvn.w	r8, #21
    5102:	e7c9      	b.n	5098 <bt_gatt_throughput_handles_assign+0x44>
	LOG_DBG("Found handle for Throughput characteristic.");
    5104:	4909      	ldr	r1, [pc, #36]	; (512c <bt_gatt_throughput_handles_assign+0xd8>)
    5106:	480d      	ldr	r0, [pc, #52]	; (513c <bt_gatt_throughput_handles_assign+0xe8>)
    5108:	f044 0204 	orr.w	r2, r4, #4
    510c:	f01b fd65 	bl	20bda <log_1>
	throughput->char_handle = gatt_desc->handle;
    5110:	88bb      	ldrh	r3, [r7, #4]
    5112:	8033      	strh	r3, [r6, #0]
	throughput->conn = bt_gatt_dm_conn_get(dm);
    5114:	4628      	mov	r0, r5
    5116:	f01b f9c9 	bl	204ac <bt_gatt_dm_conn_get>
    511a:	61b0      	str	r0, [r6, #24]
	return 0;
    511c:	e7bc      	b.n	5098 <bt_gatt_throughput_handles_assign+0x44>
    511e:	bf00      	nop
    5120:	00026762 	.word	0x00026762
    5124:	00026544 	.word	0x00026544
    5128:	00026624 	.word	0x00026624
    512c:	0002881f 	.word	0x0002881f
    5130:	00028720 	.word	0x00028720
    5134:	0002874d 	.word	0x0002874d
    5138:	00028770 	.word	0x00028770
    513c:	000287a3 	.word	0x000287a3

00005140 <bt_gatt_throughput_read>:

int bt_gatt_throughput_read(struct bt_gatt_throughput *throughput)
{
	int err;

	throughput->read_params.single.handle = throughput->char_handle;
    5140:	8803      	ldrh	r3, [r0, #0]
{
    5142:	b510      	push	{r4, lr}
	throughput->read_params.single.handle = throughput->char_handle;
    5144:	8183      	strh	r3, [r0, #12]
	throughput->read_params.single.offset = 0;
    5146:	2300      	movs	r3, #0
    5148:	81c3      	strh	r3, [r0, #14]
	throughput->read_params.handle_count = 1;
	throughput->read_params.func = read_fn;
    514a:	4601      	mov	r1, r0
	throughput->read_params.handle_count = 1;
    514c:	2301      	movs	r3, #1
    514e:	6083      	str	r3, [r0, #8]
	throughput->read_params.func = read_fn;
    5150:	4b09      	ldr	r3, [pc, #36]	; (5178 <bt_gatt_throughput_read+0x38>)
    5152:	f841 3f04 	str.w	r3, [r1, #4]!

	err = bt_gatt_read(throughput->conn, &throughput->read_params);
    5156:	6980      	ldr	r0, [r0, #24]
    5158:	f009 fb16 	bl	e788 <bt_gatt_read>
	if (err) {
    515c:	4604      	mov	r4, r0
    515e:	b148      	cbz	r0, 5174 <bt_gatt_throughput_read+0x34>
    5160:	4906      	ldr	r1, [pc, #24]	; (517c <bt_gatt_throughput_read+0x3c>)
    5162:	4b07      	ldr	r3, [pc, #28]	; (5180 <bt_gatt_throughput_read+0x40>)
		LOG_ERR("Characteristic read failed.");
    5164:	4807      	ldr	r0, [pc, #28]	; (5184 <bt_gatt_throughput_read+0x44>)
    5166:	1ac9      	subs	r1, r1, r3
    5168:	08c9      	lsrs	r1, r1, #3
    516a:	0189      	lsls	r1, r1, #6
    516c:	f041 0101 	orr.w	r1, r1, #1
    5170:	f01b fd26 	bl	20bc0 <log_0>
	}

	return err;
}
    5174:	4620      	mov	r0, r4
    5176:	bd10      	pop	{r4, pc}
    5178:	00005001 	.word	0x00005001
    517c:	00026624 	.word	0x00026624
    5180:	00026544 	.word	0x00026544
    5184:	000287d3 	.word	0x000287d3

00005188 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
    5188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    518c:	b087      	sub	sp, #28
    518e:	460f      	mov	r7, r1
    5190:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
    5192:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
    5194:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    5198:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
    519c:	4c1f      	ldr	r4, [pc, #124]	; (521c <print_digits+0x94>)
{
    519e:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    51a0:	2514      	movs	r5, #20
{
    51a2:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
    51a4:	4698      	mov	r8, r3
    51a6:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    51aa:	ea50 0301 	orrs.w	r3, r0, r1
    51ae:	d119      	bne.n	51e4 <print_digits+0x5c>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
    51b0:	2d14      	cmp	r5, #20
		buf[i] = '0';
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    51b2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
    51b4:	bf14      	ite	ne
    51b6:	3501      	addne	r5, #1
		buf[i] = '0';
    51b8:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    51ba:	442c      	add	r4, r5
		buf[i] = '0';
    51bc:	bf08      	it	eq
    51be:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    51c2:	2c15      	cmp	r4, #21
    51c4:	d01b      	beq.n	51fe <print_digits+0x76>
    51c6:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
    51c8:	2c00      	cmp	r4, #0
    51ca:	dc1a      	bgt.n	5202 <print_digits+0x7a>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
    51cc:	f81d 0005 	ldrb.w	r0, [sp, r5]
    51d0:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
    51d2:	3501      	adds	r5, #1
		out(buf[i], ctx);
    51d4:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
    51d6:	2d15      	cmp	r5, #21
    51d8:	d1f8      	bne.n	51cc <print_digits+0x44>
	}
	for (/**/; pad > 0; pad--) {
    51da:	2c00      	cmp	r4, #0
    51dc:	dc19      	bgt.n	5212 <print_digits+0x8a>
		out(pad_char, ctx);
	}
}
    51de:	b007      	add	sp, #28
    51e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
    51e4:	4642      	mov	r2, r8
    51e6:	464b      	mov	r3, r9
    51e8:	f7fa ff8a 	bl	100 <__aeabi_uldivmod>
    51ec:	5ca2      	ldrb	r2, [r4, r2]
    51ee:	f80d 2005 	strb.w	r2, [sp, r5]
    51f2:	4684      	mov	ip, r0
    51f4:	460b      	mov	r3, r1
		num /= base;
    51f6:	4660      	mov	r0, ip
    51f8:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    51fa:	3d01      	subs	r5, #1
    51fc:	e7d5      	b.n	51aa <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    51fe:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
    5200:	e7e4      	b.n	51cc <print_digits+0x44>
	for (/**/; pad > 0 && pad_before; pad--) {
    5202:	f1bb 0f00 	cmp.w	fp, #0
    5206:	d0e1      	beq.n	51cc <print_digits+0x44>
		out(pad_char, ctx);
    5208:	4639      	mov	r1, r7
    520a:	4650      	mov	r0, sl
    520c:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
    520e:	3c01      	subs	r4, #1
    5210:	e7da      	b.n	51c8 <print_digits+0x40>
		out(pad_char, ctx);
    5212:	4639      	mov	r1, r7
    5214:	4650      	mov	r0, sl
    5216:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
    5218:	3c01      	subs	r4, #1
    521a:	e7de      	b.n	51da <print_digits+0x52>
    521c:	00028841 	.word	0x00028841

00005220 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    5220:	680b      	ldr	r3, [r1, #0]
    5222:	3301      	adds	r3, #1
    5224:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    5226:	4b01      	ldr	r3, [pc, #4]	; (522c <char_out+0xc>)
    5228:	681b      	ldr	r3, [r3, #0]
    522a:	4718      	bx	r3
    522c:	20000168 	.word	0x20000168

00005230 <__printk_hook_install>:
	_char_out = fn;
    5230:	4b01      	ldr	r3, [pc, #4]	; (5238 <__printk_hook_install+0x8>)
    5232:	6018      	str	r0, [r3, #0]
}
    5234:	4770      	bx	lr
    5236:	bf00      	nop
    5238:	20000168 	.word	0x20000168

0000523c <z_vprintk>:
{
    523c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    5240:	2600      	movs	r6, #0
{
    5242:	b087      	sub	sp, #28
    5244:	4605      	mov	r5, r0
    5246:	468b      	mov	fp, r1
    5248:	461c      	mov	r4, r3
	while (*fmt) {
    524a:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
	int min_width = -1;
    524e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    5252:	4637      	mov	r7, r6
			might_format = 0;
    5254:	2300      	movs	r3, #0
					break;
    5256:	e007      	b.n	5268 <z_vprintk+0x2c>
		if (!might_format) {
    5258:	b96b      	cbnz	r3, 5276 <z_vprintk+0x3a>
			if (*fmt != '%') {
    525a:	2825      	cmp	r0, #37	; 0x25
    525c:	f000 80fc 	beq.w	5458 <z_vprintk+0x21c>
				out((int)*fmt, ctx);
    5260:	4659      	mov	r1, fp
    5262:	9304      	str	r3, [sp, #16]
    5264:	47a8      	blx	r5
    5266:	9b04      	ldr	r3, [sp, #16]
	while (*fmt) {
    5268:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    526c:	2800      	cmp	r0, #0
    526e:	d1f3      	bne.n	5258 <z_vprintk+0x1c>
}
    5270:	b007      	add	sp, #28
    5272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    5276:	287a      	cmp	r0, #122	; 0x7a
    5278:	d80a      	bhi.n	5290 <z_vprintk+0x54>
    527a:	2862      	cmp	r0, #98	; 0x62
    527c:	d810      	bhi.n	52a0 <z_vprintk+0x64>
    527e:	2830      	cmp	r0, #48	; 0x30
    5280:	d052      	beq.n	5328 <z_vprintk+0xec>
    5282:	d845      	bhi.n	5310 <z_vprintk+0xd4>
    5284:	2825      	cmp	r0, #37	; 0x25
    5286:	f000 80e5 	beq.w	5454 <z_vprintk+0x218>
    528a:	282d      	cmp	r0, #45	; 0x2d
    528c:	f000 80ea 	beq.w	5464 <z_vprintk+0x228>
					out((int)'%', ctx);
    5290:	4659      	mov	r1, fp
    5292:	2025      	movs	r0, #37	; 0x25
    5294:	47a8      	blx	r5
					out((int)*fmt, ctx);
    5296:	f899 0000 	ldrb.w	r0, [r9]
    529a:	4659      	mov	r1, fp
    529c:	47a8      	blx	r5
    529e:	e7d9      	b.n	5254 <z_vprintk+0x18>
    52a0:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
    52a4:	2a17      	cmp	r2, #23
    52a6:	d8f3      	bhi.n	5290 <z_vprintk+0x54>
    52a8:	a101      	add	r1, pc, #4	; (adr r1, 52b0 <z_vprintk+0x74>)
    52aa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    52ae:	bf00      	nop
    52b0:	0000544d 	.word	0x0000544d
    52b4:	00005371 	.word	0x00005371
    52b8:	00005291 	.word	0x00005291
    52bc:	00005291 	.word	0x00005291
    52c0:	00005291 	.word	0x00005291
    52c4:	00005353 	.word	0x00005353
    52c8:	00005371 	.word	0x00005371
    52cc:	00005291 	.word	0x00005291
    52d0:	00005291 	.word	0x00005291
    52d4:	00005353 	.word	0x00005353
    52d8:	00005291 	.word	0x00005291
    52dc:	00005291 	.word	0x00005291
    52e0:	00005291 	.word	0x00005291
    52e4:	000053d5 	.word	0x000053d5
    52e8:	00005291 	.word	0x00005291
    52ec:	00005291 	.word	0x00005291
    52f0:	00005417 	.word	0x00005417
    52f4:	00005291 	.word	0x00005291
    52f8:	00005371 	.word	0x00005371
    52fc:	00005291 	.word	0x00005291
    5300:	00005291 	.word	0x00005291
    5304:	00005319 	.word	0x00005319
    5308:	00005291 	.word	0x00005291
    530c:	00005353 	.word	0x00005353
			switch (*fmt) {
    5310:	2839      	cmp	r0, #57	; 0x39
    5312:	d915      	bls.n	5340 <z_vprintk+0x104>
    5314:	2858      	cmp	r0, #88	; 0x58
    5316:	d1bb      	bne.n	5290 <z_vprintk+0x54>
				if (*fmt == 'p') {
    5318:	f899 3000 	ldrb.w	r3, [r9]
    531c:	2b70      	cmp	r3, #112	; 0x70
    531e:	d163      	bne.n	53e8 <z_vprintk+0x1ac>
					x = va_arg(ap, unsigned int);
    5320:	f854 2b04 	ldr.w	r2, [r4], #4
    5324:	2300      	movs	r3, #0
    5326:	e06a      	b.n	53fe <z_vprintk+0x1c2>
				if (min_width < 0 && padding == PAD_NONE) {
    5328:	f1b8 0f00 	cmp.w	r8, #0
    532c:	da0b      	bge.n	5346 <z_vprintk+0x10a>
    532e:	2f00      	cmp	r7, #0
    5330:	f000 809a 	beq.w	5468 <z_vprintk+0x22c>
					min_width = *fmt - '0';
    5334:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    5338:	2f00      	cmp	r7, #0
    533a:	bf08      	it	eq
    533c:	2702      	moveq	r7, #2
    533e:	e793      	b.n	5268 <z_vprintk+0x2c>
				if (min_width < 0) {
    5340:	f1b8 0f00 	cmp.w	r8, #0
    5344:	dbf6      	blt.n	5334 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
    5346:	220a      	movs	r2, #10
    5348:	fb02 0808 	mla	r8, r2, r8, r0
    534c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    5350:	e7f2      	b.n	5338 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
    5352:	2868      	cmp	r0, #104	; 0x68
    5354:	d103      	bne.n	535e <z_vprintk+0x122>
    5356:	2e68      	cmp	r6, #104	; 0x68
    5358:	d106      	bne.n	5368 <z_vprintk+0x12c>
					length_mod = 'H';
    535a:	2648      	movs	r6, #72	; 0x48
    535c:	e784      	b.n	5268 <z_vprintk+0x2c>
				} else if (*fmt == 'l' && length_mod == 'l') {
    535e:	286c      	cmp	r0, #108	; 0x6c
    5360:	d102      	bne.n	5368 <z_vprintk+0x12c>
    5362:	2e6c      	cmp	r6, #108	; 0x6c
    5364:	f000 8082 	beq.w	546c <z_vprintk+0x230>
				} else if (length_mod == 0) {
    5368:	2e00      	cmp	r6, #0
    536a:	d191      	bne.n	5290 <z_vprintk+0x54>
    536c:	4606      	mov	r6, r0
    536e:	e77b      	b.n	5268 <z_vprintk+0x2c>
				if (length_mod == 'z') {
    5370:	2e7a      	cmp	r6, #122	; 0x7a
    5372:	d103      	bne.n	537c <z_vprintk+0x140>
					d = va_arg(ap, int);
    5374:	f854 2b04 	ldr.w	r2, [r4], #4
    5378:	17d3      	asrs	r3, r2, #31
    537a:	e008      	b.n	538e <z_vprintk+0x152>
				} else if (length_mod == 'l') {
    537c:	2e6c      	cmp	r6, #108	; 0x6c
    537e:	d0f9      	beq.n	5374 <z_vprintk+0x138>
				} else if (length_mod == 'L') {
    5380:	2e4c      	cmp	r6, #76	; 0x4c
    5382:	d1f7      	bne.n	5374 <z_vprintk+0x138>
					long long lld = va_arg(ap, long long);
    5384:	3407      	adds	r4, #7
    5386:	f024 0407 	bic.w	r4, r4, #7
					d = (printk_val_t) lld;
    538a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				if (*fmt != 'u' && negative(d)) {
    538e:	2875      	cmp	r0, #117	; 0x75
    5390:	d00f      	beq.n	53b2 <z_vprintk+0x176>
    5392:	2a00      	cmp	r2, #0
    5394:	f173 0100 	sbcs.w	r1, r3, #0
    5398:	da0b      	bge.n	53b2 <z_vprintk+0x176>
					out((int)'-', ctx);
    539a:	4659      	mov	r1, fp
    539c:	202d      	movs	r0, #45	; 0x2d
    539e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    53a2:	47a8      	blx	r5
					d = -d;
    53a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    53a8:	4252      	negs	r2, r2
    53aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
    53ae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
    53b2:	1ef9      	subs	r1, r7, #3
    53b4:	bf18      	it	ne
    53b6:	2101      	movne	r1, #1
    53b8:	2f01      	cmp	r7, #1
    53ba:	bf0c      	ite	eq
    53bc:	2030      	moveq	r0, #48	; 0x30
    53be:	2020      	movne	r0, #32
    53c0:	e9cd 0802 	strd	r0, r8, [sp, #8]
    53c4:	9101      	str	r1, [sp, #4]
    53c6:	210a      	movs	r1, #10
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    53c8:	9100      	str	r1, [sp, #0]
    53ca:	4628      	mov	r0, r5
    53cc:	4659      	mov	r1, fp
    53ce:	f7ff fedb 	bl	5188 <print_digits>
    53d2:	e73f      	b.n	5254 <z_vprintk+0x18>
				out('0', ctx);
    53d4:	4659      	mov	r1, fp
    53d6:	2030      	movs	r0, #48	; 0x30
    53d8:	47a8      	blx	r5
				out('x', ctx);
    53da:	4659      	mov	r1, fp
    53dc:	2078      	movs	r0, #120	; 0x78
    53de:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
    53e0:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
    53e4:	2701      	movs	r7, #1
    53e6:	e797      	b.n	5318 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    53e8:	2e6c      	cmp	r6, #108	; 0x6c
    53ea:	d099      	beq.n	5320 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
    53ec:	2e4c      	cmp	r6, #76	; 0x4c
    53ee:	d197      	bne.n	5320 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
    53f0:	1de3      	adds	r3, r4, #7
    53f2:	f023 0307 	bic.w	r3, r3, #7
    53f6:	461c      	mov	r4, r3
    53f8:	685b      	ldr	r3, [r3, #4]
    53fa:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    53fe:	1ef9      	subs	r1, r7, #3
    5400:	bf18      	it	ne
    5402:	2101      	movne	r1, #1
    5404:	2f01      	cmp	r7, #1
    5406:	bf0c      	ite	eq
    5408:	2030      	moveq	r0, #48	; 0x30
    540a:	2020      	movne	r0, #32
    540c:	9101      	str	r1, [sp, #4]
    540e:	e9cd 0802 	strd	r0, r8, [sp, #8]
    5412:	2110      	movs	r1, #16
    5414:	e7d8      	b.n	53c8 <z_vprintk+0x18c>
				char *s = va_arg(ap, char *);
    5416:	46a2      	mov	sl, r4
    5418:	f85a 3b04 	ldr.w	r3, [sl], #4
				while (*s) {
    541c:	461c      	mov	r4, r3
    541e:	4621      	mov	r1, r4
    5420:	f814 0b01 	ldrb.w	r0, [r4], #1
    5424:	b940      	cbnz	r0, 5438 <z_vprintk+0x1fc>
				if (padding == PAD_SPACE_AFTER) {
    5426:	2f03      	cmp	r7, #3
    5428:	d122      	bne.n	5470 <z_vprintk+0x234>
					int remaining = min_width - (s - start);
    542a:	1acc      	subs	r4, r1, r3
    542c:	eba8 0404 	sub.w	r4, r8, r4
					while (remaining-- > 0) {
    5430:	2c00      	cmp	r4, #0
    5432:	dc06      	bgt.n	5442 <z_vprintk+0x206>
				char *s = va_arg(ap, char *);
    5434:	4654      	mov	r4, sl
    5436:	e70d      	b.n	5254 <z_vprintk+0x18>
					out((int)(*s++), ctx);
    5438:	4659      	mov	r1, fp
    543a:	9304      	str	r3, [sp, #16]
    543c:	47a8      	blx	r5
    543e:	9b04      	ldr	r3, [sp, #16]
    5440:	e7ed      	b.n	541e <z_vprintk+0x1e2>
						out(' ', ctx);
    5442:	4659      	mov	r1, fp
    5444:	2020      	movs	r0, #32
    5446:	47a8      	blx	r5
    5448:	3c01      	subs	r4, #1
    544a:	e7f1      	b.n	5430 <z_vprintk+0x1f4>
				out(c, ctx);
    544c:	f854 0b04 	ldr.w	r0, [r4], #4
    5450:	4659      	mov	r1, fp
    5452:	e723      	b.n	529c <z_vprintk+0x60>
				out((int)'%', ctx);
    5454:	4659      	mov	r1, fp
    5456:	e721      	b.n	529c <z_vprintk+0x60>
				length_mod = 0;
    5458:	461e      	mov	r6, r3
				padding = PAD_NONE;
    545a:	461f      	mov	r7, r3
				min_width = -1;
    545c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
    5460:	2301      	movs	r3, #1
    5462:	e701      	b.n	5268 <z_vprintk+0x2c>
			switch (*fmt) {
    5464:	2703      	movs	r7, #3
    5466:	e6ff      	b.n	5268 <z_vprintk+0x2c>
					padding = PAD_ZERO_BEFORE;
    5468:	2701      	movs	r7, #1
    546a:	e6fd      	b.n	5268 <z_vprintk+0x2c>
					length_mod = 'L';
    546c:	264c      	movs	r6, #76	; 0x4c
    546e:	e6fb      	b.n	5268 <z_vprintk+0x2c>
				char *s = va_arg(ap, char *);
    5470:	4654      	mov	r4, sl
			might_format = 0;
    5472:	4603      	mov	r3, r0
    5474:	e6f8      	b.n	5268 <z_vprintk+0x2c>
    5476:	bf00      	nop

00005478 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    5478:	b507      	push	{r0, r1, r2, lr}
    547a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    547c:	2100      	movs	r1, #0
{
    547e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    5480:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    5482:	4803      	ldr	r0, [pc, #12]	; (5490 <vprintk+0x18>)
    5484:	a901      	add	r1, sp, #4
    5486:	f7ff fed9 	bl	523c <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    548a:	b003      	add	sp, #12
    548c:	f85d fb04 	ldr.w	pc, [sp], #4
    5490:	00005221 	.word	0x00005221

00005494 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    5494:	b530      	push	{r4, r5, lr}
    5496:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    5498:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    549c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    549e:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    54a0:	4805      	ldr	r0, [pc, #20]	; (54b8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    54a2:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    54a4:	a901      	add	r1, sp, #4
    54a6:	f7ff fec9 	bl	523c <z_vprintk>

	if (ctx.count < ctx.max) {
    54aa:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    54ae:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    54b0:	bfb8      	it	lt
    54b2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    54b4:	b005      	add	sp, #20
    54b6:	bd30      	pop	{r4, r5, pc}
    54b8:	0002061b 	.word	0x0002061b

000054bc <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    54bc:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    54be:	4910      	ldr	r1, [pc, #64]	; (5500 <enable_logger+0x44>)
    54c0:	4810      	ldr	r0, [pc, #64]	; (5504 <enable_logger+0x48>)
{
    54c2:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    54c4:	2200      	movs	r2, #0
    54c6:	f020 fdcd 	bl	26064 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    54ca:	4d0f      	ldr	r5, [pc, #60]	; (5508 <enable_logger+0x4c>)
    54cc:	490f      	ldr	r1, [pc, #60]	; (550c <enable_logger+0x50>)
    54ce:	2200      	movs	r2, #0
    54d0:	2300      	movs	r3, #0
    54d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    54d6:	2400      	movs	r4, #0
    54d8:	230e      	movs	r3, #14
    54da:	e9cd 3403 	strd	r3, r4, [sp, #12]
    54de:	e9cd 4401 	strd	r4, r4, [sp, #4]
    54e2:	4b0b      	ldr	r3, [pc, #44]	; (5510 <enable_logger+0x54>)
    54e4:	9400      	str	r4, [sp, #0]
    54e6:	f44f 7240 	mov.w	r2, #768	; 0x300
    54ea:	4628      	mov	r0, r5
    54ec:	f01a fc44 	bl	1fd78 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    54f0:	4908      	ldr	r1, [pc, #32]	; (5514 <enable_logger+0x58>)
    54f2:	4628      	mov	r0, r5
    54f4:	f020 fcbf 	bl	25e76 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    54f8:	4620      	mov	r0, r4
    54fa:	b009      	add	sp, #36	; 0x24
    54fc:	bd30      	pop	{r4, r5, pc}
    54fe:	bf00      	nop
    5500:	00005519 	.word	0x00005519
    5504:	200009e8 	.word	0x200009e8
    5508:	20000a20 	.word	0x20000a20
    550c:	200057e0 	.word	0x200057e0
    5510:	00005931 	.word	0x00005931
    5514:	00028852 	.word	0x00028852

00005518 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5518:	4801      	ldr	r0, [pc, #4]	; (5520 <log_process_thread_timer_expiry_fn+0x8>)
    551a:	f01a bb9f 	b.w	1fc5c <z_impl_k_sem_give>
    551e:	bf00      	nop
    5520:	2000082c 	.word	0x2000082c

00005524 <log_core_init>:
{
    5524:	b508      	push	{r3, lr}
		log_msg_pool_init();
    5526:	f000 fa65 	bl	59f4 <log_msg_pool_init>
		log_list_init(&list);
    552a:	4809      	ldr	r0, [pc, #36]	; (5550 <log_core_init+0x2c>)
    552c:	f01b fb05 	bl	20b3a <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    5530:	2304      	movs	r3, #4
    5532:	2228      	movs	r2, #40	; 0x28
    5534:	4907      	ldr	r1, [pc, #28]	; (5554 <log_core_init+0x30>)
    5536:	4808      	ldr	r0, [pc, #32]	; (5558 <log_core_init+0x34>)
    5538:	f020 fa62 	bl	25a00 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    553c:	4b07      	ldr	r3, [pc, #28]	; (555c <log_core_init+0x38>)
    553e:	4a08      	ldr	r2, [pc, #32]	; (5560 <log_core_init+0x3c>)
    5540:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    5542:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    5546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    554a:	f000 bc97 	b.w	5e7c <log_output_timestamp_freq_set>
    554e:	bf00      	nop
    5550:	20001748 	.word	0x20001748
    5554:	20007a30 	.word	0x20007a30
    5558:	20001750 	.word	0x20001750
    555c:	2000016c 	.word	0x2000016c
    5560:	00020b79 	.word	0x00020b79

00005564 <dropped_notify>:
{
    5564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5566:	4b0f      	ldr	r3, [pc, #60]	; (55a4 <dropped_notify+0x40>)
    5568:	f3bf 8f5b 	dmb	ish
    556c:	2500      	movs	r5, #0
    556e:	e853 7f00 	ldrex	r7, [r3]
    5572:	e843 5200 	strex	r2, r5, [r3]
    5576:	2a00      	cmp	r2, #0
    5578:	d1f9      	bne.n	556e <dropped_notify+0xa>
    557a:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    557e:	4c0a      	ldr	r4, [pc, #40]	; (55a8 <dropped_notify+0x44>)
    5580:	4e0a      	ldr	r6, [pc, #40]	; (55ac <dropped_notify+0x48>)
    5582:	1b36      	subs	r6, r6, r4
    5584:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    5586:	42b5      	cmp	r5, r6
    5588:	db00      	blt.n	558c <dropped_notify+0x28>
}
    558a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    558c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    558e:	795b      	ldrb	r3, [r3, #5]
    5590:	b12b      	cbz	r3, 559e <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    5592:	6823      	ldr	r3, [r4, #0]
    5594:	68db      	ldr	r3, [r3, #12]
    5596:	b113      	cbz	r3, 559e <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    5598:	4639      	mov	r1, r7
    559a:	4620      	mov	r0, r4
    559c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    559e:	3501      	adds	r5, #1
    55a0:	3410      	adds	r4, #16
    55a2:	e7f0      	b.n	5586 <dropped_notify+0x22>
    55a4:	20001740 	.word	0x20001740
    55a8:	0002669c 	.word	0x0002669c
    55ac:	000266bc 	.word	0x000266bc

000055b0 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    55b0:	4b06      	ldr	r3, [pc, #24]	; (55cc <log_dropped+0x1c>)
    55b2:	f3bf 8f5b 	dmb	ish
    55b6:	e853 2f00 	ldrex	r2, [r3]
    55ba:	3201      	adds	r2, #1
    55bc:	e843 2100 	strex	r1, r2, [r3]
    55c0:	2900      	cmp	r1, #0
    55c2:	d1f8      	bne.n	55b6 <log_dropped+0x6>
    55c4:	f3bf 8f5b 	dmb	ish
}
    55c8:	4770      	bx	lr
    55ca:	bf00      	nop
    55cc:	20001740 	.word	0x20001740

000055d0 <log_source_name_get>:
    55d0:	4a04      	ldr	r2, [pc, #16]	; (55e4 <log_source_name_get+0x14>)
    55d2:	4b05      	ldr	r3, [pc, #20]	; (55e8 <log_source_name_get+0x18>)
    55d4:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    55d6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    55da:	bf34      	ite	cc
    55dc:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    55e0:	2000      	movcs	r0, #0
}
    55e2:	4770      	bx	lr
    55e4:	00026544 	.word	0x00026544
    55e8:	0002669c 	.word	0x0002669c

000055ec <log_backend_enable>:
	id += backend - log_backend_get(0);
    55ec:	4b09      	ldr	r3, [pc, #36]	; (5614 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    55ee:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    55f0:	1ac3      	subs	r3, r0, r3
    55f2:	111b      	asrs	r3, r3, #4
    55f4:	3301      	adds	r3, #1
{
    55f6:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    55f8:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    55fa:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    55fc:	4c06      	ldr	r4, [pc, #24]	; (5618 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    55fe:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    5600:	2201      	movs	r2, #1
    5602:	715a      	strb	r2, [r3, #5]
    5604:	7822      	ldrb	r2, [r4, #0]
    5606:	b912      	cbnz	r2, 560e <log_backend_enable+0x22>
    5608:	4804      	ldr	r0, [pc, #16]	; (561c <log_backend_enable+0x30>)
    560a:	f01a fb27 	bl	1fc5c <z_impl_k_sem_give>
	backend_attached = true;
    560e:	2301      	movs	r3, #1
    5610:	7023      	strb	r3, [r4, #0]
}
    5612:	bd10      	pop	{r4, pc}
    5614:	0002669c 	.word	0x0002669c
    5618:	20004df0 	.word	0x20004df0
    561c:	2000082c 	.word	0x2000082c

00005620 <log_init>:
{
    5620:	b570      	push	{r4, r5, r6, lr}
    5622:	4b11      	ldr	r3, [pc, #68]	; (5668 <log_init+0x48>)
    5624:	f3bf 8f5b 	dmb	ish
    5628:	e853 5f00 	ldrex	r5, [r3]
    562c:	1c6a      	adds	r2, r5, #1
    562e:	e843 2100 	strex	r1, r2, [r3]
    5632:	2900      	cmp	r1, #0
    5634:	d1f8      	bne.n	5628 <log_init+0x8>
    5636:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    563a:	b92d      	cbnz	r5, 5648 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    563c:	4c0b      	ldr	r4, [pc, #44]	; (566c <log_init+0x4c>)
    563e:	4e0c      	ldr	r6, [pc, #48]	; (5670 <log_init+0x50>)
    5640:	1b36      	subs	r6, r6, r4
    5642:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    5644:	42b5      	cmp	r5, r6
    5646:	db00      	blt.n	564a <log_init+0x2a>
}
    5648:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    564a:	7b23      	ldrb	r3, [r4, #12]
    564c:	b143      	cbz	r3, 5660 <log_init+0x40>
			if (backend->api->init != NULL) {
    564e:	6823      	ldr	r3, [r4, #0]
    5650:	695b      	ldr	r3, [r3, #20]
    5652:	b103      	cbz	r3, 5656 <log_init+0x36>
				backend->api->init();
    5654:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    5656:	2204      	movs	r2, #4
    5658:	2100      	movs	r1, #0
    565a:	4620      	mov	r0, r4
    565c:	f7ff ffc6 	bl	55ec <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    5660:	3501      	adds	r5, #1
    5662:	3410      	adds	r4, #16
    5664:	e7ee      	b.n	5644 <log_init+0x24>
    5666:	bf00      	nop
    5668:	20001744 	.word	0x20001744
    566c:	0002669c 	.word	0x0002669c
    5670:	000266bc 	.word	0x000266bc

00005674 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    5674:	4b16      	ldr	r3, [pc, #88]	; (56d0 <log_strdup+0x5c>)
    5676:	4298      	cmp	r0, r3
{
    5678:	b537      	push	{r0, r1, r2, r4, r5, lr}
    567a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    567c:	d302      	bcc.n	5684 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    567e:	4b15      	ldr	r3, [pc, #84]	; (56d4 <log_strdup+0x60>)
    5680:	4298      	cmp	r0, r3
    5682:	d320      	bcc.n	56c6 <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    5684:	4814      	ldr	r0, [pc, #80]	; (56d8 <log_strdup+0x64>)
    5686:	2200      	movs	r2, #0
    5688:	2300      	movs	r3, #0
    568a:	a901      	add	r1, sp, #4
    568c:	f019 fe2c 	bl	1f2e8 <k_mem_slab_alloc>
	if (err != 0) {
    5690:	4605      	mov	r5, r0
    5692:	b9d8      	cbnz	r0, 56cc <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5694:	2201      	movs	r2, #1
    5696:	9b01      	ldr	r3, [sp, #4]
    5698:	f3bf 8f5b 	dmb	ish
    569c:	e853 1f00 	ldrex	r1, [r3]
    56a0:	e843 2000 	strex	r0, r2, [r3]
    56a4:	2800      	cmp	r0, #0
    56a6:	d1f9      	bne.n	569c <log_strdup+0x28>
    56a8:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    56ac:	9801      	ldr	r0, [sp, #4]
    56ae:	4621      	mov	r1, r4
    56b0:	221f      	movs	r2, #31
    56b2:	3004      	adds	r0, #4
    56b4:	f01c fffe 	bl	226b4 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    56b8:	9c01      	ldr	r4, [sp, #4]
    56ba:	237e      	movs	r3, #126	; 0x7e
    56bc:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    56c0:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    56c4:	3404      	adds	r4, #4
}
    56c6:	4620      	mov	r0, r4
    56c8:	b003      	add	sp, #12
    56ca:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    56cc:	4c03      	ldr	r4, [pc, #12]	; (56dc <log_strdup+0x68>)
    56ce:	e7fa      	b.n	56c6 <log_strdup+0x52>
    56d0:	00026308 	.word	0x00026308
    56d4:	0002a7d0 	.word	0x0002a7d0
    56d8:	20001750 	.word	0x20001750
    56dc:	0002885a 	.word	0x0002885a

000056e0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    56e0:	b148      	cbz	r0, 56f6 <log_is_strdup+0x16>
    56e2:	4b05      	ldr	r3, [pc, #20]	; (56f8 <log_is_strdup+0x18>)
    56e4:	4298      	cmp	r0, r3
    56e6:	d305      	bcc.n	56f4 <log_is_strdup+0x14>
    56e8:	33a0      	adds	r3, #160	; 0xa0
    56ea:	4298      	cmp	r0, r3
    56ec:	bf2c      	ite	cs
    56ee:	2000      	movcs	r0, #0
    56f0:	2001      	movcc	r0, #1
    56f2:	4770      	bx	lr
    56f4:	2000      	movs	r0, #0
}
    56f6:	4770      	bx	lr
    56f8:	20007a30 	.word	0x20007a30

000056fc <z_impl_log_process>:
{
    56fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    5700:	4b4c      	ldr	r3, [pc, #304]	; (5834 <z_impl_log_process+0x138>)
    5702:	781b      	ldrb	r3, [r3, #0]
{
    5704:	b085      	sub	sp, #20
    5706:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    5708:	b903      	cbnz	r3, 570c <z_impl_log_process+0x10>
    570a:	b360      	cbz	r0, 5766 <z_impl_log_process+0x6a>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    570c:	f04f 0320 	mov.w	r3, #32
    5710:	f3ef 8611 	mrs	r6, BASEPRI
    5714:	f383 8811 	msr	BASEPRI, r3
    5718:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    571c:	4846      	ldr	r0, [pc, #280]	; (5838 <z_impl_log_process+0x13c>)
    571e:	f01b fa1c 	bl	20b5a <log_list_head_get>
    5722:	4605      	mov	r5, r0
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    5724:	f386 8811 	msr	BASEPRI, r6
    5728:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    572c:	b178      	cbz	r0, 574e <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    572e:	f3bf 8f5b 	dmb	ish
    5732:	4b42      	ldr	r3, [pc, #264]	; (583c <z_impl_log_process+0x140>)
    5734:	e853 2f00 	ldrex	r2, [r3]
    5738:	3a01      	subs	r2, #1
    573a:	e843 2100 	strex	r1, r2, [r3]
    573e:	2900      	cmp	r1, #0
    5740:	d1f8      	bne.n	5734 <z_impl_log_process+0x38>
    5742:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    5746:	b194      	cbz	r4, 576e <z_impl_log_process+0x72>
	log_msg_put(msg);
    5748:	4628      	mov	r0, r5
    574a:	f01b fb1d 	bl	20d88 <log_msg_put>
	if (!bypass && dropped_cnt) {
    574e:	b924      	cbnz	r4, 575a <z_impl_log_process+0x5e>
    5750:	4b3b      	ldr	r3, [pc, #236]	; (5840 <z_impl_log_process+0x144>)
    5752:	681b      	ldr	r3, [r3, #0]
    5754:	b10b      	cbz	r3, 575a <z_impl_log_process+0x5e>
		dropped_notify();
    5756:	f7ff ff05 	bl	5564 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    575a:	4837      	ldr	r0, [pc, #220]	; (5838 <z_impl_log_process+0x13c>)
    575c:	f01b f9fb 	bl	20b56 <log_list_head_peek>
    5760:	1e04      	subs	r4, r0, #0
    5762:	bf18      	it	ne
    5764:	2401      	movne	r4, #1
}
    5766:	4620      	mov	r0, r4
    5768:	b005      	add	sp, #20
    576a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    576e:	4b35      	ldr	r3, [pc, #212]	; (5844 <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    5770:	781b      	ldrb	r3, [r3, #0]
    5772:	b9cb      	cbnz	r3, 57a8 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5774:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    5776:	07db      	lsls	r3, r3, #31
    5778:	d416      	bmi.n	57a8 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    577a:	f01b fb18 	bl	20dae <log_msg_str_get>
    577e:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    5780:	4628      	mov	r0, r5
    5782:	f01b fadf 	bl	20d44 <log_msg_nargs_get>
    5786:	4601      	mov	r1, r0
    5788:	4640      	mov	r0, r8
    578a:	f01b f9f9 	bl	20b80 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    578e:	4f2e      	ldr	r7, [pc, #184]	; (5848 <z_impl_log_process+0x14c>)
    5790:	4b2e      	ldr	r3, [pc, #184]	; (584c <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    5792:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 5868 <z_impl_log_process+0x16c>
    5796:	1bdb      	subs	r3, r3, r7
    5798:	08db      	lsrs	r3, r3, #3
    579a:	9303      	str	r3, [sp, #12]
    579c:	4b2c      	ldr	r3, [pc, #176]	; (5850 <z_impl_log_process+0x154>)
    579e:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    57a0:	4606      	mov	r6, r0
    57a2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    57a6:	b936      	cbnz	r6, 57b6 <z_impl_log_process+0xba>
    57a8:	4e2a      	ldr	r6, [pc, #168]	; (5854 <z_impl_log_process+0x158>)
    57aa:	4f2b      	ldr	r7, [pc, #172]	; (5858 <z_impl_log_process+0x15c>)
    57ac:	1bbf      	subs	r7, r7, r6
    57ae:	113f      	asrs	r7, r7, #4
    57b0:	f04f 0800 	mov.w	r8, #0
    57b4:	e03a      	b.n	582c <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
    57b6:	fab6 f186 	clz	r1, r6
    57ba:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    57be:	4649      	mov	r1, r9
    57c0:	4628      	mov	r0, r5
    57c2:	f01b fac2 	bl	20d4a <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    57c6:	4b25      	ldr	r3, [pc, #148]	; (585c <z_impl_log_process+0x160>)
    57c8:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    57ca:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    57cc:	d302      	bcc.n	57d4 <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    57ce:	4b24      	ldr	r3, [pc, #144]	; (5860 <z_impl_log_process+0x164>)
    57d0:	4298      	cmp	r0, r3
    57d2:	d31a      	bcc.n	580a <z_impl_log_process+0x10e>
    57d4:	4608      	mov	r0, r1
    57d6:	f7ff ff83 	bl	56e0 <log_is_strdup>
    57da:	4602      	mov	r2, r0
    57dc:	b9a8      	cbnz	r0, 580a <z_impl_log_process+0x10e>
    57de:	4b21      	ldr	r3, [pc, #132]	; (5864 <z_impl_log_process+0x168>)
    57e0:	4299      	cmp	r1, r3
    57e2:	d012      	beq.n	580a <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
    57e4:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    57e6:	9803      	ldr	r0, [sp, #12]
    57e8:	0999      	lsrs	r1, r3, #6
    57ea:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    57ee:	ea4f 138a 	mov.w	r3, sl, lsl #6
    57f2:	f043 0301 	orr.w	r3, r3, #1
	return __log_const_start[source_id].name;
    57f6:	bf88      	it	hi
    57f8:	f857 2031 	ldrhi.w	r2, [r7, r1, lsl #3]
    57fc:	f8ad 3000 	strh.w	r3, [sp]
    5800:	4649      	mov	r1, r9
    5802:	4643      	mov	r3, r8
    5804:	4658      	mov	r0, fp
    5806:	f01b fa15 	bl	20c34 <log_3>
		mask &= ~BIT(idx);
    580a:	2101      	movs	r1, #1
    580c:	fa01 f109 	lsl.w	r1, r1, r9
    5810:	ea26 0601 	bic.w	r6, r6, r1
    5814:	e7c7      	b.n	57a6 <z_impl_log_process+0xaa>
	return backend->cb->active;
    5816:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    5818:	795b      	ldrb	r3, [r3, #5]
    581a:	b123      	cbz	r3, 5826 <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
    581c:	6833      	ldr	r3, [r6, #0]
    581e:	4629      	mov	r1, r5
    5820:	681b      	ldr	r3, [r3, #0]
    5822:	4630      	mov	r0, r6
    5824:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    5826:	f108 0801 	add.w	r8, r8, #1
    582a:	3610      	adds	r6, #16
    582c:	45b8      	cmp	r8, r7
    582e:	dbf2      	blt.n	5816 <z_impl_log_process+0x11a>
    5830:	e78a      	b.n	5748 <z_impl_log_process+0x4c>
    5832:	bf00      	nop
    5834:	20004df0 	.word	0x20004df0
    5838:	20001748 	.word	0x20001748
    583c:	2000173c 	.word	0x2000173c
    5840:	20001740 	.word	0x20001740
    5844:	20004df1 	.word	0x20004df1
    5848:	00026544 	.word	0x00026544
    584c:	0002669c 	.word	0x0002669c
    5850:	00026664 	.word	0x00026664
    5854:	0002669c 	.word	0x0002669c
    5858:	000266bc 	.word	0x000266bc
    585c:	00026308 	.word	0x00026308
    5860:	0002a7d0 	.word	0x0002a7d0
    5864:	0002885a 	.word	0x0002885a
    5868:	00028874 	.word	0x00028874

0000586c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    586c:	4b29      	ldr	r3, [pc, #164]	; (5914 <msg_finalize+0xa8>)
{
    586e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    5870:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    5872:	8141      	strh	r1, [r0, #10]
{
    5874:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    5876:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5878:	4d27      	ldr	r5, [pc, #156]	; (5918 <msg_finalize+0xac>)
    587a:	60e0      	str	r0, [r4, #12]
    587c:	f3bf 8f5b 	dmb	ish
    5880:	e855 3f00 	ldrex	r3, [r5]
    5884:	3301      	adds	r3, #1
    5886:	e845 3200 	strex	r2, r3, [r5]
    588a:	2a00      	cmp	r2, #0
    588c:	d1f8      	bne.n	5880 <msg_finalize+0x14>
    588e:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    5892:	f04f 0320 	mov.w	r3, #32
    5896:	f3ef 8611 	mrs	r6, BASEPRI
    589a:	f383 8811 	msr	BASEPRI, r3
    589e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    58a2:	481e      	ldr	r0, [pc, #120]	; (591c <msg_finalize+0xb0>)
    58a4:	4621      	mov	r1, r4
    58a6:	f01b f94c 	bl	20b42 <log_list_add_tail>
	__asm__ volatile(
    58aa:	f386 8811 	msr	BASEPRI, r6
    58ae:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    58b2:	4b1b      	ldr	r3, [pc, #108]	; (5920 <msg_finalize+0xb4>)
    58b4:	781b      	ldrb	r3, [r3, #0]
    58b6:	b183      	cbz	r3, 58da <msg_finalize+0x6e>
	__asm__ volatile(
    58b8:	f04f 0320 	mov.w	r3, #32
    58bc:	f3ef 8411 	mrs	r4, BASEPRI
    58c0:	f383 8811 	msr	BASEPRI, r3
    58c4:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    58c8:	2000      	movs	r0, #0
    58ca:	f7ff ff17 	bl	56fc <z_impl_log_process>
	__asm__ volatile(
    58ce:	f384 8811 	msr	BASEPRI, r4
    58d2:	f3bf 8f6f 	isb	sy
}
    58d6:	b002      	add	sp, #8
    58d8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    58da:	4a12      	ldr	r2, [pc, #72]	; (5924 <msg_finalize+0xb8>)
    58dc:	682b      	ldr	r3, [r5, #0]
    58de:	6812      	ldr	r2, [r2, #0]
    58e0:	2a00      	cmp	r2, #0
    58e2:	d0f8      	beq.n	58d6 <msg_finalize+0x6a>
    58e4:	2b01      	cmp	r3, #1
    58e6:	d10a      	bne.n	58fe <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    58e8:	2200      	movs	r2, #0
    58ea:	2300      	movs	r3, #0
    58ec:	e9cd 2300 	strd	r2, r3, [sp]
    58f0:	480d      	ldr	r0, [pc, #52]	; (5928 <msg_finalize+0xbc>)
    58f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    58f6:	2300      	movs	r3, #0
    58f8:	f01a fca2 	bl	20240 <z_impl_k_timer_start>
    58fc:	e7eb      	b.n	58d6 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    58fe:	2b0a      	cmp	r3, #10
    5900:	d1e9      	bne.n	58d6 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    5902:	4809      	ldr	r0, [pc, #36]	; (5928 <msg_finalize+0xbc>)
    5904:	f020 fbba 	bl	2607c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    5908:	4808      	ldr	r0, [pc, #32]	; (592c <msg_finalize+0xc0>)
}
    590a:	b002      	add	sp, #8
    590c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5910:	f01a b9a4 	b.w	1fc5c <z_impl_k_sem_give>
    5914:	2000016c 	.word	0x2000016c
    5918:	2000173c 	.word	0x2000173c
    591c:	20001748 	.word	0x20001748
    5920:	20004df1 	.word	0x20004df1
    5924:	2000176c 	.word	0x2000176c
    5928:	200009e8 	.word	0x200009e8
    592c:	2000082c 	.word	0x2000082c

00005930 <log_process_thread_func>:
{
    5930:	b510      	push	{r4, lr}
	log_init();
    5932:	f7ff fe75 	bl	5620 <log_init>
	return z_impl_k_current_get();
    5936:	f01a f98b 	bl	1fc50 <z_impl_k_current_get>
	proc_tid = process_tid;
    593a:	4b0c      	ldr	r3, [pc, #48]	; (596c <log_process_thread_func+0x3c>)
    593c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    593e:	b130      	cbz	r0, 594e <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    5940:	4b0b      	ldr	r3, [pc, #44]	; (5970 <log_process_thread_func+0x40>)
	    process_tid &&
    5942:	681b      	ldr	r3, [r3, #0]
    5944:	2b09      	cmp	r3, #9
    5946:	dd02      	ble.n	594e <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    5948:	480a      	ldr	r0, [pc, #40]	; (5974 <log_process_thread_func+0x44>)
    594a:	f01a f987 	bl	1fc5c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    594e:	4c09      	ldr	r4, [pc, #36]	; (5974 <log_process_thread_func+0x44>)
    5950:	2000      	movs	r0, #0
    5952:	f7ff fed3 	bl	56fc <z_impl_log_process>
		if (log_process(false) == false) {
    5956:	2800      	cmp	r0, #0
    5958:	d1fa      	bne.n	5950 <log_process_thread_func+0x20>
    595a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    595e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5962:	4620      	mov	r0, r4
    5964:	f01a f9a0 	bl	1fca8 <z_impl_k_sem_take>
    5968:	e7f2      	b.n	5950 <log_process_thread_func+0x20>
    596a:	bf00      	nop
    596c:	2000176c 	.word	0x2000176c
    5970:	2000173c 	.word	0x2000173c
    5974:	2000082c 	.word	0x2000082c

00005978 <z_impl_log_panic>:
{
    5978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    597a:	4f0e      	ldr	r7, [pc, #56]	; (59b4 <z_impl_log_panic+0x3c>)
    597c:	783d      	ldrb	r5, [r7, #0]
    597e:	b975      	cbnz	r5, 599e <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    5980:	4c0d      	ldr	r4, [pc, #52]	; (59b8 <z_impl_log_panic+0x40>)
    5982:	4e0e      	ldr	r6, [pc, #56]	; (59bc <z_impl_log_panic+0x44>)
	log_init();
    5984:	f7ff fe4c 	bl	5620 <log_init>
    5988:	1b36      	subs	r6, r6, r4
    598a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    598c:	42b5      	cmp	r5, r6
    598e:	db07      	blt.n	59a0 <z_impl_log_panic+0x28>
    5990:	2000      	movs	r0, #0
    5992:	f7ff feb3 	bl	56fc <z_impl_log_process>
		while (log_process(false) == true) {
    5996:	2800      	cmp	r0, #0
    5998:	d1fa      	bne.n	5990 <z_impl_log_panic+0x18>
	panic_mode = true;
    599a:	2301      	movs	r3, #1
    599c:	703b      	strb	r3, [r7, #0]
}
    599e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    59a0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    59a2:	795b      	ldrb	r3, [r3, #5]
    59a4:	b11b      	cbz	r3, 59ae <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    59a6:	6823      	ldr	r3, [r4, #0]
    59a8:	4620      	mov	r0, r4
    59aa:	691b      	ldr	r3, [r3, #16]
    59ac:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    59ae:	3501      	adds	r5, #1
    59b0:	3410      	adds	r4, #16
    59b2:	e7eb      	b.n	598c <z_impl_log_panic+0x14>
    59b4:	20004df1 	.word	0x20004df1
    59b8:	0002669c 	.word	0x0002669c
    59bc:	000266bc 	.word	0x000266bc

000059c0 <log_free>:
{
    59c0:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    59c2:	3804      	subs	r0, #4
    59c4:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    59c6:	f3bf 8f5b 	dmb	ish
    59ca:	e850 3f00 	ldrex	r3, [r0]
    59ce:	1e5a      	subs	r2, r3, #1
    59d0:	e840 2100 	strex	r1, r2, [r0]
    59d4:	2900      	cmp	r1, #0
    59d6:	d1f8      	bne.n	59ca <log_free+0xa>
    59d8:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    59dc:	2b01      	cmp	r3, #1
    59de:	d103      	bne.n	59e8 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    59e0:	4803      	ldr	r0, [pc, #12]	; (59f0 <log_free+0x30>)
    59e2:	a901      	add	r1, sp, #4
    59e4:	f019 fcb2 	bl	1f34c <k_mem_slab_free>
}
    59e8:	b003      	add	sp, #12
    59ea:	f85d fb04 	ldr.w	pc, [sp], #4
    59ee:	bf00      	nop
    59f0:	20001750 	.word	0x20001750

000059f4 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    59f4:	2320      	movs	r3, #32
    59f6:	4902      	ldr	r1, [pc, #8]	; (5a00 <log_msg_pool_init+0xc>)
    59f8:	4802      	ldr	r0, [pc, #8]	; (5a04 <log_msg_pool_init+0x10>)
    59fa:	461a      	mov	r2, r3
    59fc:	f020 b800 	b.w	25a00 <k_mem_slab_init>
    5a00:	20007ad0 	.word	0x20007ad0
    5a04:	20001770 	.word	0x20001770

00005a08 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    5a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    5a0a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    5a0c:	4d09      	ldr	r5, [pc, #36]	; (5a34 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    5a0e:	9301      	str	r3, [sp, #4]
    5a10:	2001      	movs	r0, #1
    5a12:	f7ff fe73 	bl	56fc <z_impl_log_process>
    5a16:	4604      	mov	r4, r0
			log_dropped();
    5a18:	f7ff fdca 	bl	55b0 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    5a1c:	2200      	movs	r2, #0
    5a1e:	2300      	movs	r3, #0
    5a20:	a901      	add	r1, sp, #4
    5a22:	4628      	mov	r0, r5
    5a24:	f019 fc60 	bl	1f2e8 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    5a28:	b108      	cbz	r0, 5a2e <log_msg_no_space_handle+0x26>
    5a2a:	2c00      	cmp	r4, #0
    5a2c:	d1f0      	bne.n	5a10 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    5a2e:	9801      	ldr	r0, [sp, #4]
    5a30:	b003      	add	sp, #12
    5a32:	bd30      	pop	{r4, r5, pc}
    5a34:	20001770 	.word	0x20001770

00005a38 <log_msg_chunk_alloc>:
{
    5a38:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    5a3a:	2300      	movs	r3, #0
    5a3c:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    5a3e:	4807      	ldr	r0, [pc, #28]	; (5a5c <log_msg_chunk_alloc+0x24>)
    5a40:	2200      	movs	r2, #0
    5a42:	2300      	movs	r3, #0
    5a44:	a901      	add	r1, sp, #4
    5a46:	f019 fc4f 	bl	1f2e8 <k_mem_slab_alloc>
	if (err != 0) {
    5a4a:	b110      	cbz	r0, 5a52 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    5a4c:	f7ff ffdc 	bl	5a08 <log_msg_no_space_handle>
    5a50:	9001      	str	r0, [sp, #4]
}
    5a52:	9801      	ldr	r0, [sp, #4]
    5a54:	b003      	add	sp, #12
    5a56:	f85d fb04 	ldr.w	pc, [sp], #4
    5a5a:	bf00      	nop
    5a5c:	20001770 	.word	0x20001770

00005a60 <msg_free>:
{
    5a60:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5a62:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    5a64:	7a45      	ldrb	r5, [r0, #9]
{
    5a66:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    5a68:	092d      	lsrs	r5, r5, #4
{
    5a6a:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    5a6c:	07d8      	lsls	r0, r3, #31
    5a6e:	d41c      	bmi.n	5aaa <msg_free+0x4a>
    5a70:	b1dd      	cbz	r5, 5aaa <msg_free+0x4a>
		uint32_t smask = 0;
    5a72:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    5a74:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    5a76:	9801      	ldr	r0, [sp, #4]
    5a78:	4631      	mov	r1, r6
    5a7a:	f01b f966 	bl	20d4a <log_msg_arg_get>
    5a7e:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    5a80:	f7ff fe2e 	bl	56e0 <log_is_strdup>
    5a84:	b170      	cbz	r0, 5aa4 <msg_free+0x44>
				if (smask == 0) {
    5a86:	b934      	cbnz	r4, 5a96 <msg_free+0x36>
					smask = z_log_get_s_mask(
    5a88:	9b01      	ldr	r3, [sp, #4]
    5a8a:	4629      	mov	r1, r5
    5a8c:	6918      	ldr	r0, [r3, #16]
    5a8e:	f01b f877 	bl	20b80 <z_log_get_s_mask>
					if (smask == 0) {
    5a92:	4604      	mov	r4, r0
    5a94:	b148      	cbz	r0, 5aaa <msg_free+0x4a>
				if (smask & BIT(i)) {
    5a96:	fa24 f306 	lsr.w	r3, r4, r6
    5a9a:	07d9      	lsls	r1, r3, #31
    5a9c:	d502      	bpl.n	5aa4 <msg_free+0x44>
					log_free(buf);
    5a9e:	4638      	mov	r0, r7
    5aa0:	f7ff ff8e 	bl	59c0 <log_free>
		for (i = 0; i < nargs; i++) {
    5aa4:	3601      	adds	r6, #1
    5aa6:	42ae      	cmp	r6, r5
    5aa8:	d3e5      	bcc.n	5a76 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    5aaa:	9b01      	ldr	r3, [sp, #4]
    5aac:	7a1a      	ldrb	r2, [r3, #8]
    5aae:	0792      	lsls	r2, r2, #30
    5ab0:	d504      	bpl.n	5abc <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    5ab2:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5ab4:	4c08      	ldr	r4, [pc, #32]	; (5ad8 <msg_free+0x78>)
    5ab6:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    5ab8:	9b03      	ldr	r3, [sp, #12]
    5aba:	b92b      	cbnz	r3, 5ac8 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    5abc:	4806      	ldr	r0, [pc, #24]	; (5ad8 <msg_free+0x78>)
    5abe:	a901      	add	r1, sp, #4
    5ac0:	f019 fc44 	bl	1f34c <k_mem_slab_free>
}
    5ac4:	b005      	add	sp, #20
    5ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    5ac8:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5aca:	a903      	add	r1, sp, #12
    5acc:	4620      	mov	r0, r4
    5ace:	f019 fc3d 	bl	1f34c <k_mem_slab_free>
		cont = next;
    5ad2:	9503      	str	r5, [sp, #12]
    5ad4:	e7f0      	b.n	5ab8 <msg_free+0x58>
    5ad6:	bf00      	nop
    5ad8:	20001770 	.word	0x20001770

00005adc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    5adc:	b40e      	push	{r1, r2, r3}
    5ade:	b503      	push	{r0, r1, lr}
    5ae0:	ab03      	add	r3, sp, #12
    5ae2:	4601      	mov	r1, r0
    5ae4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    5ae8:	4804      	ldr	r0, [pc, #16]	; (5afc <print_formatted+0x20>)
	va_start(args, fmt);
    5aea:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    5aec:	f7ff fba6 	bl	523c <z_vprintk>
#endif
	va_end(args);

	return length;
}
    5af0:	2000      	movs	r0, #0
    5af2:	b002      	add	sp, #8
    5af4:	f85d eb04 	ldr.w	lr, [sp], #4
    5af8:	b003      	add	sp, #12
    5afa:	4770      	bx	lr
    5afc:	00021157 	.word	0x00021157

00005b00 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    5b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b04:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    5b06:	f011 0402 	ands.w	r4, r1, #2
{
    5b0a:	4690      	mov	r8, r2
    5b0c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    5b10:	4606      	mov	r6, r0
    5b12:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    5b14:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    5b18:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    5b1c:	d007      	beq.n	5b2e <prefix_print+0x2e>
	if (!format) {
    5b1e:	f011 0f44 	tst.w	r1, #68	; 0x44
    5b22:	d137      	bne.n	5b94 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    5b24:	4932      	ldr	r1, [pc, #200]	; (5bf0 <prefix_print+0xf0>)
    5b26:	f7ff ffd9 	bl	5adc <print_formatted>
			length = print_formatted(log_output,
    5b2a:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    5b2c:	460c      	mov	r4, r1
	if (color) {
    5b2e:	f1b9 0f00 	cmp.w	r9, #0
    5b32:	d00a      	beq.n	5b4a <prefix_print+0x4a>
		const char *color = start && (colors[level] != NULL) ?
    5b34:	4b2f      	ldr	r3, [pc, #188]	; (5bf4 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    5b36:	4930      	ldr	r1, [pc, #192]	; (5bf8 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    5b38:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    5b3c:	4b2f      	ldr	r3, [pc, #188]	; (5bfc <prefix_print+0xfc>)
    5b3e:	4630      	mov	r0, r6
    5b40:	2a00      	cmp	r2, #0
    5b42:	bf08      	it	eq
    5b44:	461a      	moveq	r2, r3
    5b46:	f7ff ffc9 	bl	5adc <print_formatted>
	if (level_on) {
    5b4a:	b13d      	cbz	r5, 5b5c <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    5b4c:	4b2c      	ldr	r3, [pc, #176]	; (5c00 <prefix_print+0x100>)
    5b4e:	492d      	ldr	r1, [pc, #180]	; (5c04 <prefix_print+0x104>)
    5b50:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    5b54:	4630      	mov	r0, r6
    5b56:	f7ff ffc1 	bl	5adc <print_formatted>
    5b5a:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    5b5c:	f1b8 0f00 	cmp.w	r8, #0
    5b60:	d043      	beq.n	5bea <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    5b62:	2301      	movs	r3, #1
    5b64:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    5b68:	4b27      	ldr	r3, [pc, #156]	; (5c08 <prefix_print+0x108>)
    5b6a:	f017 0f10 	tst.w	r7, #16
    5b6e:	4f27      	ldr	r7, [pc, #156]	; (5c0c <prefix_print+0x10c>)
    5b70:	bf18      	it	ne
    5b72:	461f      	movne	r7, r3
    5b74:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    5b78:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    5b7c:	f7ff fd28 	bl	55d0 <log_source_name_get>
    5b80:	4639      	mov	r1, r7
    5b82:	4602      	mov	r2, r0
    5b84:	4630      	mov	r0, r6
    5b86:	f7ff ffa9 	bl	5adc <print_formatted>
    5b8a:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    5b8c:	4420      	add	r0, r4
    5b8e:	b005      	add	sp, #20
    5b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    5b94:	4b1e      	ldr	r3, [pc, #120]	; (5c10 <prefix_print+0x110>)
    5b96:	6819      	ldr	r1, [r3, #0]
    5b98:	2900      	cmp	r1, #0
    5b9a:	d0c7      	beq.n	5b2c <prefix_print+0x2c>
		timestamp /= timestamp_div;
    5b9c:	4b1d      	ldr	r3, [pc, #116]	; (5c14 <prefix_print+0x114>)
    5b9e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    5ba2:	681b      	ldr	r3, [r3, #0]
    5ba4:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    5ba8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    5bac:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    5bb0:	fbb4 f2fe 	udiv	r2, r4, lr
    5bb4:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    5bb8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    5bbc:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    5bc0:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5bc4:	fbb4 fbf1 	udiv	fp, r4, r1
    5bc8:	fb01 441b 	mls	r4, r1, fp, r4
    5bcc:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    5bd0:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5bd4:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    5bd8:	e9cd b101 	strd	fp, r1, [sp, #4]
    5bdc:	fb0a e113 	mls	r1, sl, r3, lr
    5be0:	9100      	str	r1, [sp, #0]
    5be2:	490d      	ldr	r1, [pc, #52]	; (5c18 <prefix_print+0x118>)
    5be4:	f7ff ff7a 	bl	5adc <print_formatted>
    5be8:	e79f      	b.n	5b2a <prefix_print+0x2a>
	total += print_formatted(log_output,
    5bea:	4f08      	ldr	r7, [pc, #32]	; (5c0c <prefix_print+0x10c>)
    5bec:	e7c2      	b.n	5b74 <prefix_print+0x74>
    5bee:	bf00      	nop
    5bf0:	000288c5 	.word	0x000288c5
    5bf4:	00026810 	.word	0x00026810
    5bf8:	000295ad 	.word	0x000295ad
    5bfc:	000288b7 	.word	0x000288b7
    5c00:	00026824 	.word	0x00026824
    5c04:	000288ea 	.word	0x000288ea
    5c08:	000288c1 	.word	0x000288c1
    5c0c:	000288bc 	.word	0x000288bc
    5c10:	2000178c 	.word	0x2000178c
    5c14:	20001790 	.word	0x20001790
    5c18:	000288ce 	.word	0x000288ce

00005c1c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    5c1c:	b538      	push	{r3, r4, r5, lr}
    5c1e:	460c      	mov	r4, r1
	if (color) {
    5c20:	07e1      	lsls	r1, r4, #31
{
    5c22:	4605      	mov	r5, r0
	if (color) {
    5c24:	d503      	bpl.n	5c2e <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    5c26:	4a08      	ldr	r2, [pc, #32]	; (5c48 <postfix_print+0x2c>)
    5c28:	4908      	ldr	r1, [pc, #32]	; (5c4c <postfix_print+0x30>)
    5c2a:	f7ff ff57 	bl	5adc <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5c2e:	06e2      	lsls	r2, r4, #27
    5c30:	d408      	bmi.n	5c44 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5c32:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    5c34:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    5c36:	bf4c      	ite	mi
    5c38:	4905      	ldrmi	r1, [pc, #20]	; (5c50 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    5c3a:	4906      	ldrpl	r1, [pc, #24]	; (5c54 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    5c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    5c40:	f7ff bf4c 	b.w	5adc <print_formatted>
}
    5c44:	bd38      	pop	{r3, r4, r5, pc}
    5c46:	bf00      	nop
    5c48:	000288b7 	.word	0x000288b7
    5c4c:	000295ad 	.word	0x000295ad
    5c50:	000288f1 	.word	0x000288f1
    5c54:	000288f0 	.word	0x000288f0

00005c58 <hexdump_line_print>:
{
    5c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c5c:	461d      	mov	r5, r3
    5c5e:	9b08      	ldr	r3, [sp, #32]
    5c60:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5c62:	06da      	lsls	r2, r3, #27
{
    5c64:	4604      	mov	r4, r0
    5c66:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5c68:	d405      	bmi.n	5c76 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5c6a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    5c6c:	bf4c      	ite	mi
    5c6e:	492a      	ldrmi	r1, [pc, #168]	; (5d18 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    5c70:	492a      	ldrpl	r1, [pc, #168]	; (5d1c <hexdump_line_print+0xc4>)
    5c72:	f7ff ff33 	bl	5adc <print_formatted>
		print_formatted(log_output, " ");
    5c76:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 5d24 <hexdump_line_print+0xcc>
{
    5c7a:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    5c7e:	45a8      	cmp	r8, r5
    5c80:	db2a      	blt.n	5cd8 <hexdump_line_print+0x80>
			print_formatted(log_output, "   ");
    5c82:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 5d28 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    5c86:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5d2c <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    5c8a:	f8df a098 	ldr.w	sl, [pc, #152]	; 5d24 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5c8e:	2500      	movs	r5, #0
		if (i < length) {
    5c90:	42bd      	cmp	r5, r7
    5c92:	d22f      	bcs.n	5cf4 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    5c94:	5d72      	ldrb	r2, [r6, r5]
    5c96:	4649      	mov	r1, r9
    5c98:	4620      	mov	r0, r4
    5c9a:	f7ff ff1f 	bl	5adc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5c9e:	3501      	adds	r5, #1
    5ca0:	2d10      	cmp	r5, #16
    5ca2:	d120      	bne.n	5ce6 <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    5ca4:	491e      	ldr	r1, [pc, #120]	; (5d20 <hexdump_line_print+0xc8>)
			print_formatted(log_output, " ");
    5ca6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5d24 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    5caa:	f8df 9084 	ldr.w	r9, [pc, #132]	; 5d30 <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
    5cae:	4620      	mov	r0, r4
    5cb0:	f7ff ff14 	bl	5adc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5cb4:	2500      	movs	r5, #0
		if (i < length) {
    5cb6:	42af      	cmp	r7, r5
    5cb8:	d928      	bls.n	5d0c <hexdump_line_print+0xb4>
			      isprint((int)c) ? c : '.');
    5cba:	5d72      	ldrb	r2, [r6, r5]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    5cbc:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    5cc0:	2b5f      	cmp	r3, #95	; 0x5f
    5cc2:	bf28      	it	cs
    5cc4:	222e      	movcs	r2, #46	; 0x2e
    5cc6:	4649      	mov	r1, r9
    5cc8:	4620      	mov	r0, r4
    5cca:	f7ff ff07 	bl	5adc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5cce:	3501      	adds	r5, #1
    5cd0:	2d10      	cmp	r5, #16
    5cd2:	d114      	bne.n	5cfe <hexdump_line_print+0xa6>
}
    5cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    5cd8:	4649      	mov	r1, r9
    5cda:	4620      	mov	r0, r4
    5cdc:	f7ff fefe 	bl	5adc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    5ce0:	f108 0801 	add.w	r8, r8, #1
    5ce4:	e7cb      	b.n	5c7e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    5ce6:	076a      	lsls	r2, r5, #29
    5ce8:	d1d2      	bne.n	5c90 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    5cea:	4651      	mov	r1, sl
    5cec:	4620      	mov	r0, r4
    5cee:	f7ff fef5 	bl	5adc <print_formatted>
    5cf2:	e7cd      	b.n	5c90 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    5cf4:	4641      	mov	r1, r8
    5cf6:	4620      	mov	r0, r4
    5cf8:	f7ff fef0 	bl	5adc <print_formatted>
    5cfc:	e7cf      	b.n	5c9e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    5cfe:	076b      	lsls	r3, r5, #29
    5d00:	d1d9      	bne.n	5cb6 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    5d02:	4641      	mov	r1, r8
    5d04:	4620      	mov	r0, r4
    5d06:	f7ff fee9 	bl	5adc <print_formatted>
    5d0a:	e7d4      	b.n	5cb6 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    5d0c:	4641      	mov	r1, r8
    5d0e:	4620      	mov	r0, r4
    5d10:	f7ff fee4 	bl	5adc <print_formatted>
    5d14:	e7db      	b.n	5cce <hexdump_line_print+0x76>
    5d16:	bf00      	nop
    5d18:	000288f1 	.word	0x000288f1
    5d1c:	000288f0 	.word	0x000288f0
    5d20:	000288fd 	.word	0x000288fd
    5d24:	000288fb 	.word	0x000288fb
    5d28:	000288f9 	.word	0x000288f9
    5d2c:	000288f3 	.word	0x000288f3
    5d30:	000288ff 	.word	0x000288ff

00005d34 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    5d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    5d38:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    5d3a:	f013 0807 	ands.w	r8, r3, #7
{
    5d3e:	4617      	mov	r7, r2
    5d40:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5d42:	7a0a      	ldrb	r2, [r1, #8]
    5d44:	4605      	mov	r5, r0
    5d46:	460e      	mov	r6, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    5d48:	d020      	beq.n	5d8c <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
    5d4a:	8949      	ldrh	r1, [r1, #10]
    5d4c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    5d50:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5d52:	43d2      	mvns	r2, r2
    5d54:	e9cd 8300 	strd	r8, r3, [sp]
    5d58:	9102      	str	r1, [sp, #8]
    5d5a:	68f3      	ldr	r3, [r6, #12]
    5d5c:	f002 0201 	and.w	r2, r2, #1
    5d60:	4639      	mov	r1, r7
    5d62:	f7ff fecd 	bl	5b00 <prefix_print>
    5d66:	4681      	mov	r9, r0
    5d68:	7a34      	ldrb	r4, [r6, #8]
    5d6a:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    5d6c:	f014 0401 	ands.w	r4, r4, #1
    5d70:	d00e      	beq.n	5d90 <log_output_msg_process+0x5c>
		std_print(msg, log_output);
    5d72:	4629      	mov	r1, r5
    5d74:	4630      	mov	r0, r6
    5d76:	f01b f884 	bl	20e82 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    5d7a:	f1b8 0f00 	cmp.w	r8, #0
    5d7e:	d02b      	beq.n	5dd8 <log_output_msg_process+0xa4>
		postfix_print(log_output, flags, level);
    5d80:	4642      	mov	r2, r8
    5d82:	4639      	mov	r1, r7
    5d84:	4628      	mov	r0, r5
    5d86:	f7ff ff49 	bl	5c1c <postfix_print>
    5d8a:	e025      	b.n	5dd8 <log_output_msg_process+0xa4>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    5d8c:	46c1      	mov	r9, r8
    5d8e:	e7eb      	b.n	5d68 <log_output_msg_process+0x34>
	} else if (raw_string) {
    5d90:	f1b8 0f00 	cmp.w	r8, #0
    5d94:	d126      	bne.n	5de4 <log_output_msg_process+0xb0>
	size_t offset = 0;
    5d96:	4627      	mov	r7, r4
		length = log_output->size;
    5d98:	68eb      	ldr	r3, [r5, #12]
    5d9a:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    5d9c:	aa06      	add	r2, sp, #24
    5d9e:	463b      	mov	r3, r7
    5da0:	68a9      	ldr	r1, [r5, #8]
    5da2:	4630      	mov	r0, r6
    5da4:	f01b f859 	bl	20e5a <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    5da8:	9a06      	ldr	r2, [sp, #24]
    5daa:	686b      	ldr	r3, [r5, #4]
    5dac:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    5dae:	b13a      	cbz	r2, 5dc0 <log_output_msg_process+0x8c>
			eol = (log_output->buf[length - 1] == '\n');
    5db0:	68ab      	ldr	r3, [r5, #8]
    5db2:	4413      	add	r3, r2
    5db4:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    5db8:	f1a4 030a 	sub.w	r3, r4, #10
    5dbc:	425c      	negs	r4, r3
    5dbe:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    5dc0:	4628      	mov	r0, r5
    5dc2:	f01b f9bb 	bl	2113c <log_output_flush>
		offset += length;
    5dc6:	9b06      	ldr	r3, [sp, #24]
    5dc8:	441f      	add	r7, r3
	} while (length > 0);
    5dca:	2b00      	cmp	r3, #0
    5dcc:	d1e4      	bne.n	5d98 <log_output_msg_process+0x64>
	if (eol) {
    5dce:	b11c      	cbz	r4, 5dd8 <log_output_msg_process+0xa4>
		print_formatted(log_output, "\r");
    5dd0:	4913      	ldr	r1, [pc, #76]	; (5e20 <log_output_msg_process+0xec>)
    5dd2:	4628      	mov	r0, r5
    5dd4:	f7ff fe82 	bl	5adc <print_formatted>
	}

	log_output_flush(log_output);
    5dd8:	4628      	mov	r0, r5
    5dda:	f01b f9af 	bl	2113c <log_output_flush>
}
    5dde:	b00a      	add	sp, #40	; 0x28
    5de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    5de4:	4630      	mov	r0, r6
    5de6:	f01a ffe2 	bl	20dae <log_msg_str_get>
    5dea:	490e      	ldr	r1, [pc, #56]	; (5e24 <log_output_msg_process+0xf0>)
    5dec:	4602      	mov	r2, r0
    5dee:	4628      	mov	r0, r5
    5df0:	f7ff fe74 	bl	5adc <print_formatted>
		length = sizeof(buf);
    5df4:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5df8:	aa05      	add	r2, sp, #20
    5dfa:	4623      	mov	r3, r4
    5dfc:	a906      	add	r1, sp, #24
    5dfe:	4630      	mov	r0, r6
		length = sizeof(buf);
    5e00:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5e04:	f01b f829 	bl	20e5a <log_msg_hexdump_data_get>
		if (length) {
    5e08:	9a05      	ldr	r2, [sp, #20]
    5e0a:	2a00      	cmp	r2, #0
    5e0c:	d0b8      	beq.n	5d80 <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
    5e0e:	464b      	mov	r3, r9
    5e10:	9700      	str	r7, [sp, #0]
    5e12:	a906      	add	r1, sp, #24
    5e14:	4628      	mov	r0, r5
    5e16:	f7ff ff1f 	bl	5c58 <hexdump_line_print>
			offset += length;
    5e1a:	9b05      	ldr	r3, [sp, #20]
    5e1c:	441c      	add	r4, r3
		length = sizeof(buf);
    5e1e:	e7eb      	b.n	5df8 <log_output_msg_process+0xc4>
    5e20:	00028902 	.word	0x00028902
    5e24:	000295ad 	.word	0x000295ad

00005e28 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    5e28:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    5e2a:	e9d0 4300 	ldrd	r4, r3, [r0]
    5e2e:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5e30:	4a0f      	ldr	r2, [pc, #60]	; (5e70 <log_output_dropped_process+0x48>)
    5e32:	f242 730f 	movw	r3, #9999	; 0x270f
    5e36:	428b      	cmp	r3, r1
    5e38:	bf28      	it	cs
    5e3a:	460b      	movcs	r3, r1
    5e3c:	4668      	mov	r0, sp
    5e3e:	2105      	movs	r1, #5
    5e40:	f01a fc0b 	bl	2065a <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1, dev);
    5e44:	462b      	mov	r3, r5
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5e46:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1, dev);
    5e48:	490a      	ldr	r1, [pc, #40]	; (5e74 <log_output_dropped_process+0x4c>)
    5e4a:	4620      	mov	r0, r4
    5e4c:	220b      	movs	r2, #11
    5e4e:	f01b f80b 	bl	20e68 <buffer_write>
	buffer_write(outf, buf, len, dev);
    5e52:	462b      	mov	r3, r5
    5e54:	4632      	mov	r2, r6
    5e56:	4669      	mov	r1, sp
    5e58:	4620      	mov	r0, r4
    5e5a:	f01b f805 	bl	20e68 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1, dev);
    5e5e:	4906      	ldr	r1, [pc, #24]	; (5e78 <log_output_dropped_process+0x50>)
    5e60:	462b      	mov	r3, r5
    5e62:	221b      	movs	r2, #27
    5e64:	4620      	mov	r0, r4
    5e66:	f01a ffff 	bl	20e68 <buffer_write>
}
    5e6a:	b002      	add	sp, #8
    5e6c:	bd70      	pop	{r4, r5, r6, pc}
    5e6e:	bf00      	nop
    5e70:	0002a1b4 	.word	0x0002a1b4
    5e74:	00028940 	.word	0x00028940
    5e78:	00028924 	.word	0x00028924

00005e7c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    5e7c:	4a08      	ldr	r2, [pc, #32]	; (5ea0 <log_output_timestamp_freq_set+0x24>)
{
    5e7e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    5e80:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    5e82:	4c08      	ldr	r4, [pc, #32]	; (5ea4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    5e84:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    5e86:	2100      	movs	r1, #0
    5e88:	42a0      	cmp	r0, r4
    5e8a:	d804      	bhi.n	5e96 <log_output_timestamp_freq_set+0x1a>
    5e8c:	b101      	cbz	r1, 5e90 <log_output_timestamp_freq_set+0x14>
    5e8e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    5e90:	4b05      	ldr	r3, [pc, #20]	; (5ea8 <log_output_timestamp_freq_set+0x2c>)
    5e92:	6018      	str	r0, [r3, #0]
}
    5e94:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    5e96:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    5e98:	005b      	lsls	r3, r3, #1
    5e9a:	2101      	movs	r1, #1
    5e9c:	e7f4      	b.n	5e88 <log_output_timestamp_freq_set+0xc>
    5e9e:	bf00      	nop
    5ea0:	20001790 	.word	0x20001790
    5ea4:	000f4240 	.word	0x000f4240
    5ea8:	2000178c 	.word	0x2000178c

00005eac <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    5eac:	4801      	ldr	r0, [pc, #4]	; (5eb4 <panic+0x8>)
    5eae:	f01b b945 	b.w	2113c <log_output_flush>
    5eb2:	bf00      	nop
    5eb4:	00026850 	.word	0x00026850

00005eb8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    5eb8:	4801      	ldr	r0, [pc, #4]	; (5ec0 <dropped+0x8>)
    5eba:	f7ff bfb5 	b.w	5e28 <log_output_dropped_process>
    5ebe:	bf00      	nop
    5ec0:	00026850 	.word	0x00026850

00005ec4 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    5ec4:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    5ec6:	4803      	ldr	r0, [pc, #12]	; (5ed4 <log_backend_uart_init+0x10>)
    5ec8:	f019 f854 	bl	1ef74 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    5ecc:	4b02      	ldr	r3, [pc, #8]	; (5ed8 <log_backend_uart_init+0x14>)
    5ece:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    5ed0:	bd08      	pop	{r3, pc}
    5ed2:	bf00      	nop
    5ed4:	0002894c 	.word	0x0002894c
    5ed8:	2000179c 	.word	0x2000179c

00005edc <put>:
{
    5edc:	b510      	push	{r4, lr}
	log_msg_get(msg);
    5ede:	4608      	mov	r0, r1
    5ee0:	460c      	mov	r4, r1
    5ee2:	f01a ff22 	bl	20d2a <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    5ee6:	4805      	ldr	r0, [pc, #20]	; (5efc <put+0x20>)
    5ee8:	4621      	mov	r1, r4
    5eea:	220f      	movs	r2, #15
    5eec:	f7ff ff22 	bl	5d34 <log_output_msg_process>
	log_msg_put(msg);
    5ef0:	4620      	mov	r0, r4
}
    5ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5ef6:	f01a bf47 	b.w	20d88 <log_msg_put>
    5efa:	bf00      	nop
    5efc:	00026850 	.word	0x00026850

00005f00 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    5f00:	4b01      	ldr	r3, [pc, #4]	; (5f08 <log_backend_rtt_init+0x8>)
    5f02:	2201      	movs	r2, #1
    5f04:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    5f06:	4770      	bx	lr
    5f08:	20004e03 	.word	0x20004e03

00005f0c <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    5f0c:	4b02      	ldr	r3, [pc, #8]	; (5f18 <panic+0xc>)
	log_output_flush(log_output);
    5f0e:	4803      	ldr	r0, [pc, #12]	; (5f1c <panic+0x10>)
    5f10:	2201      	movs	r2, #1
    5f12:	701a      	strb	r2, [r3, #0]
    5f14:	f01b b912 	b.w	2113c <log_output_flush>
    5f18:	20004e04 	.word	0x20004e04
    5f1c:	00026878 	.word	0x00026878

00005f20 <dropped>:
	log_output_dropped_process(log_output, cnt);
    5f20:	4801      	ldr	r0, [pc, #4]	; (5f28 <dropped+0x8>)
    5f22:	f7ff bf81 	b.w	5e28 <log_output_dropped_process>
    5f26:	bf00      	nop
    5f28:	00026878 	.word	0x00026878

00005f2c <put>:
{
    5f2c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    5f2e:	4608      	mov	r0, r1
    5f30:	460c      	mov	r4, r1
    5f32:	f01a fefa 	bl	20d2a <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    5f36:	4805      	ldr	r0, [pc, #20]	; (5f4c <put+0x20>)
    5f38:	4621      	mov	r1, r4
    5f3a:	220f      	movs	r2, #15
    5f3c:	f7ff fefa 	bl	5d34 <log_output_msg_process>
	log_msg_put(msg);
    5f40:	4620      	mov	r0, r4
}
    5f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5f46:	f01a bf1f 	b.w	20d88 <log_msg_put>
    5f4a:	bf00      	nop
    5f4c:	00026878 	.word	0x00026878

00005f50 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5f50:	4b05      	ldr	r3, [pc, #20]	; (5f68 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    5f52:	781b      	ldrb	r3, [r3, #0]
    5f54:	b11b      	cbz	r3, 5f5e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    5f56:	f241 3088 	movw	r0, #5000	; 0x1388
    5f5a:	f01f bf8a 	b.w	25e72 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    5f5e:	20a4      	movs	r0, #164	; 0xa4
    5f60:	2100      	movs	r1, #0
    5f62:	f019 be55 	b.w	1fc10 <z_impl_k_sleep>
    5f66:	bf00      	nop
    5f68:	20004e04 	.word	0x20004e04

00005f6c <data_out_block_mode>:
{
    5f6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5f70:	f8df 9090 	ldr.w	r9, [pc, #144]	; 6004 <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    5f74:	f8df b090 	ldr.w	fp, [pc, #144]	; 6008 <data_out_block_mode+0x9c>
{
    5f78:	4607      	mov	r7, r0
    5f7a:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
    5f7c:	2404      	movs	r4, #4
    5f7e:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    5f80:	f899 3000 	ldrb.w	r3, [r9]
    5f84:	b933      	cbnz	r3, 5f94 <data_out_block_mode+0x28>
    5f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5f8e:	4658      	mov	r0, fp
    5f90:	f019 fa22 	bl	1f3d8 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5f94:	4632      	mov	r2, r6
    5f96:	4639      	mov	r1, r7
    5f98:	2000      	movs	r0, #0
    5f9a:	f000 fa31 	bl	6400 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    5f9e:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5fa2:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    5fa4:	b913      	cbnz	r3, 5fac <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
    5fa6:	4658      	mov	r0, fp
    5fa8:	f019 fa8e 	bl	1f4c8 <z_impl_k_mutex_unlock>
		if (ret) {
    5fac:	4d14      	ldr	r5, [pc, #80]	; (6000 <data_out_block_mode+0x94>)
    5fae:	f1b8 0f00 	cmp.w	r8, #0
    5fb2:	d018      	beq.n	5fe6 <data_out_block_mode+0x7a>
	host_present = true;
    5fb4:	2301      	movs	r3, #1
    5fb6:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    5fb8:	f89a 3000 	ldrb.w	r3, [sl]
    5fbc:	b933      	cbnz	r3, 5fcc <data_out_block_mode+0x60>
}
    5fbe:	4630      	mov	r0, r6
    5fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    5fc4:	b95c      	cbnz	r4, 5fde <data_out_block_mode+0x72>
		host_present = false;
    5fc6:	702c      	strb	r4, [r5, #0]
    5fc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    5fcc:	2000      	movs	r0, #0
    5fce:	f000 fa63 	bl	6498 <SEGGER_RTT_HasDataUp>
    5fd2:	2800      	cmp	r0, #0
    5fd4:	d0f3      	beq.n	5fbe <data_out_block_mode+0x52>
    5fd6:	782b      	ldrb	r3, [r5, #0]
    5fd8:	2b00      	cmp	r3, #0
    5fda:	d1f3      	bne.n	5fc4 <data_out_block_mode+0x58>
    5fdc:	e7ef      	b.n	5fbe <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
    5fde:	3c01      	subs	r4, #1
    5fe0:	f7ff ffb6 	bl	5f50 <on_failed_write.part.0>
    5fe4:	e7f2      	b.n	5fcc <data_out_block_mode+0x60>
		} else if (host_present) {
    5fe6:	782b      	ldrb	r3, [r5, #0]
    5fe8:	b113      	cbz	r3, 5ff0 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
    5fea:	3c01      	subs	r4, #1
    5fec:	d104      	bne.n	5ff8 <data_out_block_mode+0x8c>
		host_present = false;
    5fee:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    5ff0:	782b      	ldrb	r3, [r5, #0]
    5ff2:	2b00      	cmp	r3, #0
    5ff4:	d1c4      	bne.n	5f80 <data_out_block_mode+0x14>
    5ff6:	e7e2      	b.n	5fbe <data_out_block_mode+0x52>
    5ff8:	f7ff ffaa 	bl	5f50 <on_failed_write.part.0>
    5ffc:	e7f8      	b.n	5ff0 <data_out_block_mode+0x84>
    5ffe:	bf00      	nop
    6000:	20004e03 	.word	0x20004e03
    6004:	20004e04 	.word	0x20004e04
    6008:	20000800 	.word	0x20000800

0000600c <tty_init>:

	return out_size;
}

int tty_init(struct tty_serial *tty, struct device *uart_dev)
{
    600c:	4602      	mov	r2, r0
    600e:	b510      	push	{r4, lr}
	if (!uart_dev) {
    6010:	4608      	mov	r0, r1
    6012:	b199      	cbz	r1, 603c <tty_init+0x30>
	}

	tty->uart_dev = uart_dev;

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    6014:	2400      	movs	r4, #0
	tty->tx_ringbuf = NULL;
	tty->tx_ringbuf_sz = 0U;

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;

	tty->rx_timeout = SYS_FOREVER_MS;
    6016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	tty->tx_timeout = SYS_FOREVER_MS;
    601a:	e9c2 4313 	strd	r4, r3, [r2, #76]	; 0x4c
	tty->rx_timeout = SYS_FOREVER_MS;
    601e:	6293      	str	r3, [r2, #40]	; 0x28
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    6020:	688b      	ldr	r3, [r1, #8]
	tty->uart_dev = uart_dev;
    6022:	6011      	str	r1, [r2, #0]
	tty->rx_ringbuf_sz = 0U;
    6024:	e9c2 4407 	strd	r4, r4, [r2, #28]
	tty->tx_ringbuf_sz = 0U;
    6028:	e9c2 4411 	strd	r4, r4, [r2, #68]	; 0x44
	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    602c:	6254      	str	r4, [r2, #36]	; 0x24
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    602e:	b143      	cbz	r3, 6042 <tty_init+0x36>
    6030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6032:	b133      	cbz	r3, 6042 <tty_init+0x36>
		api->irq_callback_set(dev, cb, user_data);
    6034:	4904      	ldr	r1, [pc, #16]	; (6048 <tty_init+0x3c>)
    6036:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
    6038:	4620      	mov	r0, r4
}
    603a:	bd10      	pop	{r4, pc}
		return -ENODEV;
    603c:	f06f 0012 	mvn.w	r0, #18
    6040:	e7fb      	b.n	603a <tty_init+0x2e>
	return 0;
    6042:	4618      	mov	r0, r3
    6044:	e7f9      	b.n	603a <tty_init+0x2e>
    6046:	bf00      	nop
    6048:	00021263 	.word	0x00021263

0000604c <console_init>:

	return c;
}

int console_init(void)
{
    604c:	b538      	push	{r3, r4, r5, lr}
    604e:	480e      	ldr	r0, [pc, #56]	; (6088 <console_init+0x3c>)
    6050:	f018 ff90 	bl	1ef74 <z_impl_device_get_binding>
	struct device *uart_dev;
	int ret;

	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	ret = tty_init(&console_serial, uart_dev);
    6054:	4601      	mov	r1, r0
    6056:	4605      	mov	r5, r0
    6058:	480c      	ldr	r0, [pc, #48]	; (608c <console_init+0x40>)
    605a:	f7ff ffd7 	bl	600c <tty_init>

	if (ret) {
    605e:	4604      	mov	r4, r0
    6060:	b960      	cbnz	r0, 607c <console_init+0x30>

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
			(const struct uart_driver_api *)uart_dev->driver_api;
		if (!api->irq_callback_set) {
    6062:	68ab      	ldr	r3, [r5, #8]
    6064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6066:	b15b      	cbz	r3, 6080 <console_init+0x34>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    6068:	4909      	ldr	r1, [pc, #36]	; (6090 <console_init+0x44>)
    606a:	4808      	ldr	r0, [pc, #32]	; (608c <console_init+0x40>)
    606c:	2210      	movs	r2, #16
    606e:	f01b f969 	bl	21344 <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    6072:	4908      	ldr	r1, [pc, #32]	; (6094 <console_init+0x48>)
    6074:	4805      	ldr	r0, [pc, #20]	; (608c <console_init+0x40>)
    6076:	2210      	movs	r2, #16
    6078:	f01b f94b 	bl	21312 <tty_set_rx_buf>

	return 0;
}
    607c:	4620      	mov	r0, r4
    607e:	bd38      	pop	{r3, r4, r5, pc}
			return -ENOTSUP;
    6080:	f06f 0422 	mvn.w	r4, #34	; 0x22
    6084:	e7fa      	b.n	607c <console_init+0x30>
    6086:	bf00      	nop
    6088:	0002894c 	.word	0x0002894c
    608c:	200017bc 	.word	0x200017bc
    6090:	20004e15 	.word	0x20004e15
    6094:	20004e05 	.word	0x20004e05

00006098 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    6098:	4b0a      	ldr	r3, [pc, #40]	; (60c4 <console_out+0x2c>)
{
    609a:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    609c:	b2c6      	uxtb	r6, r0
    609e:	681b      	ldr	r3, [r3, #0]
{
    60a0:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    60a2:	4630      	mov	r0, r6
    60a4:	4798      	blx	r3

	if (handled_by_debug_server) {
    60a6:	2801      	cmp	r0, #1
    60a8:	d00a      	beq.n	60c0 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    60aa:	2c0a      	cmp	r4, #10
    60ac:	4d06      	ldr	r5, [pc, #24]	; (60c8 <console_out+0x30>)
    60ae:	d103      	bne.n	60b8 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
    60b0:	6828      	ldr	r0, [r5, #0]
    60b2:	210d      	movs	r1, #13
    60b4:	f01b f958 	bl	21368 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    60b8:	6828      	ldr	r0, [r5, #0]
    60ba:	4631      	mov	r1, r6
    60bc:	f01b f954 	bl	21368 <uart_poll_out>

	return c;
}
    60c0:	4620      	mov	r0, r4
    60c2:	bd70      	pop	{r4, r5, r6, pc}
    60c4:	20000170 	.word	0x20000170
    60c8:	20001810 	.word	0x20001810

000060cc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    60cc:	b510      	push	{r4, lr}
    60ce:	4807      	ldr	r0, [pc, #28]	; (60ec <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    60d0:	4c07      	ldr	r4, [pc, #28]	; (60f0 <uart_console_init+0x24>)
    60d2:	f018 ff4f 	bl	1ef74 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    60d6:	4b07      	ldr	r3, [pc, #28]	; (60f4 <uart_console_init+0x28>)
    60d8:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    60da:	4620      	mov	r0, r4
    60dc:	f001 f814 	bl	7108 <__stdout_hook_install>
	__printk_hook_install(console_out);
    60e0:	4620      	mov	r0, r4
    60e2:	f7ff f8a5 	bl	5230 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
    60e6:	2000      	movs	r0, #0
    60e8:	bd10      	pop	{r4, pc}
    60ea:	bf00      	nop
    60ec:	0002894c 	.word	0x0002894c
    60f0:	00006099 	.word	0x00006099
    60f4:	20001810 	.word	0x20001810

000060f8 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    60f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      enum clock_control_nrf_type type)
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    60fa:	4e12      	ldr	r6, [pc, #72]	; (6144 <clkstarted_handle.constprop.0+0x4c>)
    60fc:	68f3      	ldr	r3, [r6, #12]
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    60fe:	240c      	movs	r4, #12
    6100:	fb04 3400 	mla	r4, r4, r0, r3
    6104:	2301      	movs	r3, #1
static void clkstarted_handle(struct device *dev,
    6106:	4605      	mov	r5, r0
	sub_data->started = true;
    6108:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    610a:	f04f 0320 	mov.w	r3, #32
    610e:	f3ef 8111 	mrs	r1, BASEPRI
    6112:	f383 8811 	msr	BASEPRI, r3
    6116:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    611a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    611c:	b12b      	cbz	r3, 612a <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    611e:	6860      	ldr	r0, [r4, #4]
    6120:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    6122:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6124:	4283      	cmp	r3, r0
	list->tail = node;
    6126:	bf08      	it	eq
    6128:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    612a:	f381 8811 	msr	BASEPRI, r1
    612e:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    6132:	b903      	cbnz	r3, 6136 <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    6134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    6136:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
    613a:	4629      	mov	r1, r5
    613c:	4630      	mov	r0, r6
    613e:	47b8      	blx	r7
    6140:	e7e3      	b.n	610a <clkstarted_handle.constprop.0+0x12>
    6142:	bf00      	nop
    6144:	20000714 	.word	0x20000714

00006148 <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6148:	4b15      	ldr	r3, [pc, #84]	; (61a0 <nrf_power_clock_isr+0x58>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    614a:	b507      	push	{r0, r1, r2, lr}
    614c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    614e:	b182      	cbz	r2, 6172 <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
    6150:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6154:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    6158:	07d1      	lsls	r1, r2, #31
    615a:	d50a      	bpl.n	6172 <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    615c:	2200      	movs	r2, #0
    615e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6160:	681b      	ldr	r3, [r3, #0]
    6162:	9300      	str	r3, [sp, #0]
    (void)dummy;
    6164:	9b00      	ldr	r3, [sp, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6166:	4b0f      	ldr	r3, [pc, #60]	; (61a4 <nrf_power_clock_isr+0x5c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    6168:	68db      	ldr	r3, [r3, #12]
    616a:	7a58      	ldrb	r0, [r3, #9]
    616c:	b908      	cbnz	r0, 6172 <nrf_power_clock_isr+0x2a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    616e:	f7ff ffc3 	bl	60f8 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6172:	4b0d      	ldr	r3, [pc, #52]	; (61a8 <nrf_power_clock_isr+0x60>)
    6174:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    6176:	b182      	cbz	r2, 619a <nrf_power_clock_isr+0x52>
    return p_reg->INTENSET & mask;
    6178:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    617c:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    6180:	0792      	lsls	r2, r2, #30
    6182:	d50a      	bpl.n	619a <nrf_power_clock_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6184:	2200      	movs	r2, #0
    6186:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6188:	681b      	ldr	r3, [r3, #0]
    618a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    618c:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    618e:	2001      	movs	r0, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    6190:	b003      	add	sp, #12
    6192:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6196:	f7ff bfaf 	b.w	60f8 <clkstarted_handle.constprop.0>
}
    619a:	b003      	add	sp, #12
    619c:	f85d fb04 	ldr.w	pc, [sp], #4
    61a0:	40000100 	.word	0x40000100
    61a4:	20000714 	.word	0x20000714
    61a8:	40000104 	.word	0x40000104

000061ac <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(uint32_t t)
{
	set_comparator(t + 2);
    61ac:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    61ae:	4b08      	ldr	r3, [pc, #32]	; (61d0 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    61b0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    61b4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    61b8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    61bc:	4290      	cmp	r0, r2
    61be:	d100      	bne.n	61c2 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    61c0:	4770      	bx	lr
    61c2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    61c6:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    61c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    61cc:	e7f2      	b.n	61b4 <handle_next_tick_case+0x8>
    61ce:	bf00      	nop
    61d0:	40011000 	.word	0x40011000

000061d4 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    61d4:	4b04      	ldr	r3, [pc, #16]	; (61e8 <event_clear+0x14>)
    61d6:	2200      	movs	r2, #0
{
    61d8:	b082      	sub	sp, #8
    61da:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    61dc:	681b      	ldr	r3, [r3, #0]
    61de:	9301      	str	r3, [sp, #4]
    (void)dummy;
    61e0:	9b01      	ldr	r3, [sp, #4]
}
    61e2:	b002      	add	sp, #8
    61e4:	4770      	bx	lr
    61e6:	bf00      	nop
    61e8:	40011140 	.word	0x40011140

000061ec <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(void *arg)
{
    61ec:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	event_clear();
    61ee:	f7ff fff1 	bl	61d4 <event_clear>
    return p_reg->CC[ch];
    61f2:	4b07      	ldr	r3, [pc, #28]	; (6210 <rtc_nrf_isr+0x24>)

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    61f4:	4a07      	ldr	r2, [pc, #28]	; (6214 <rtc_nrf_isr+0x28>)
    61f6:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    61fa:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    61fc:	1ac0      	subs	r0, r0, r3
    61fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    6202:	4403      	add	r3, r0
    6204:	6013      	str	r3, [r2, #0]
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
}
    6206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    620a:	f019 bf6b 	b.w	200e4 <z_clock_announce>
    620e:	bf00      	nop
    6210:	40011000 	.word	0x40011000
    6214:	2000182c 	.word	0x2000182c

00006218 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    6218:	b538      	push	{r3, r4, r5, lr}
    621a:	4814      	ldr	r0, [pc, #80]	; (626c <z_clock_driver_init+0x54>)
    621c:	f018 feaa 	bl	1ef74 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
    6220:	b300      	cbz	r0, 6264 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    6222:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    6224:	4d12      	ldr	r5, [pc, #72]	; (6270 <z_clock_driver_init+0x58>)
    6226:	681b      	ldr	r3, [r3, #0]
    6228:	2101      	movs	r1, #1
    622a:	2400      	movs	r4, #0
    622c:	4798      	blx	r3
    622e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508

	clock_control_on(clock, CLOCK_CONTROL_NRF_SUBSYS_LF);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
    6232:	f7ff ffcf 	bl	61d4 <event_clear>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6236:	4b0f      	ldr	r3, [pc, #60]	; (6274 <z_clock_driver_init+0x5c>)
    6238:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    623c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    6240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6244:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
    6248:	4622      	mov	r2, r4
    624a:	2101      	movs	r1, #1
    624c:	2011      	movs	r0, #17
    624e:	f000 fb3f 	bl	68d0 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
    6252:	2011      	movs	r0, #17
    6254:	f000 fb0a 	bl	686c <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6258:	4a07      	ldr	r2, [pc, #28]	; (6278 <z_clock_driver_init+0x60>)
    625a:	2301      	movs	r3, #1
    625c:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    625e:	4620      	mov	r0, r4
    6260:	602b      	str	r3, [r5, #0]
}
    6262:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    6264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6268:	e7fb      	b.n	6262 <z_clock_driver_init+0x4a>
    626a:	bf00      	nop
    626c:	0002897a 	.word	0x0002897a
    6270:	40011000 	.word	0x40011000
    6274:	e000e100 	.word	0xe000e100
    6278:	40011008 	.word	0x40011008

0000627c <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    627c:	b570      	push	{r4, r5, r6, lr}
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
    627e:	4b2a      	ldr	r3, [pc, #168]	; (6328 <z_clock_set_timeout+0xac>)
     return p_reg->COUNTER;
    6280:	4c2a      	ldr	r4, [pc, #168]	; (632c <z_clock_set_timeout+0xb0>)
    6282:	6819      	ldr	r1, [r3, #0]
    6284:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6288:	4d29      	ldr	r5, [pc, #164]	; (6330 <z_clock_set_timeout+0xb4>)
	return (a - b) & COUNTER_MAX;
    628a:	1a52      	subs	r2, r2, r1
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    628c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    6290:	bf08      	it	eq
    6292:	4628      	moveq	r0, r5
	return (a - b) & COUNTER_MAX;
    6294:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    6298:	0212      	lsls	r2, r2, #8
    629a:	d434      	bmi.n	6306 <z_clock_set_timeout+0x8a>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    629c:	3801      	subs	r0, #1
    629e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    62a2:	42a8      	cmp	r0, r5
    62a4:	bfa8      	it	ge
    62a6:	4628      	movge	r0, r5
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    62a8:	3301      	adds	r3, #1
    p_reg->INTENCLR = mask;
    62aa:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    62ae:	4418      	add	r0, r3
    62b0:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    62b4:	42a8      	cmp	r0, r5
    62b6:	bf94      	ite	ls
    62b8:	180d      	addls	r5, r1, r0
    62ba:	194d      	addhi	r5, r1, r5
     return p_reg->COUNTER;
    62bc:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    62c0:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	event_clear();
    62c4:	f7ff ff86 	bl	61d4 <event_clear>
	return (a - b) & COUNTER_MAX;
    62c8:	1a09      	subs	r1, r1, r0
    62ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    62ce:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    62d2:	2901      	cmp	r1, #1
    p_reg->CC[ch] = cc_val;
    62d4:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    62d8:	f8c4 6344 	str.w	r6, [r4, #836]	; 0x344
    62dc:	d104      	bne.n	62e8 <z_clock_set_timeout+0x6c>
	z_impl_k_busy_wait(usec_to_wait);
    62de:	200f      	movs	r0, #15
    62e0:	f01f fdc7 	bl	25e72 <z_impl_k_busy_wait>
		event_clear();
    62e4:	f7ff ff76 	bl	61d4 <event_clear>
    62e8:	4b12      	ldr	r3, [pc, #72]	; (6334 <z_clock_set_timeout+0xb8>)
    62ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    62ee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    62f2:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    62f6:	1a2b      	subs	r3, r5, r0
    62f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    62fc:	2b01      	cmp	r3, #1
    62fe:	d104      	bne.n	630a <z_clock_set_timeout+0x8e>
		handle_next_tick_case(t);
    6300:	f7ff ff54 	bl	61ac <handle_next_tick_case>
    6304:	e00b      	b.n	631e <z_clock_set_timeout+0xa2>
		ticks = 0;
    6306:	2000      	movs	r0, #0
    6308:	e7ce      	b.n	62a8 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    630a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    630e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    6312:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6316:	1a2d      	subs	r5, r5, r0
    6318:	3d02      	subs	r5, #2
	if (diff > MAX_TICKS) {
    631a:	022b      	lsls	r3, r5, #8
    631c:	d4f0      	bmi.n	6300 <z_clock_set_timeout+0x84>
    p_reg->INTENSET = mask;
    631e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6322:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
    6326:	bd70      	pop	{r4, r5, r6, pc}
    6328:	2000182c 	.word	0x2000182c
    632c:	40011000 	.word	0x40011000
    6330:	007fffff 	.word	0x007fffff
    6334:	e000e100 	.word	0xe000e100

00006338 <z_clock_elapsed>:
	__asm__ volatile(
    6338:	f04f 0220 	mov.w	r2, #32
    633c:	f3ef 8311 	mrs	r3, BASEPRI
    6340:	f382 8811 	msr	BASEPRI, r2
    6344:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    6348:	4a06      	ldr	r2, [pc, #24]	; (6364 <z_clock_elapsed+0x2c>)
    634a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    634e:	4a06      	ldr	r2, [pc, #24]	; (6368 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    6350:	6812      	ldr	r2, [r2, #0]
    6352:	1a80      	subs	r0, r0, r2
    6354:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    6358:	f383 8811 	msr	BASEPRI, r3
    635c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    6360:	4770      	bx	lr
    6362:	bf00      	nop
    6364:	40011000 	.word	0x40011000
    6368:	2000182c 	.word	0x2000182c

0000636c <z_timer_cycle_get_32>:
	__asm__ volatile(
    636c:	f04f 0320 	mov.w	r3, #32
    6370:	f3ef 8211 	mrs	r2, BASEPRI
    6374:	f383 8811 	msr	BASEPRI, r3
    6378:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    637c:	4906      	ldr	r1, [pc, #24]	; (6398 <z_timer_cycle_get_32+0x2c>)
    637e:	4b07      	ldr	r3, [pc, #28]	; (639c <z_timer_cycle_get_32+0x30>)
    6380:	6808      	ldr	r0, [r1, #0]
    6382:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    6386:	f382 8811 	msr	BASEPRI, r2
    638a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    638e:	1a1b      	subs	r3, r3, r0
    6390:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    6394:	4418      	add	r0, r3
    6396:	4770      	bx	lr
    6398:	2000182c 	.word	0x2000182c
    639c:	40011000 	.word	0x40011000

000063a0 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    63a0:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    63a2:	4c11      	ldr	r4, [pc, #68]	; (63e8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    63a4:	4a11      	ldr	r2, [pc, #68]	; (63ec <_DoInit+0x4c>)
    63a6:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    63a8:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    63aa:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    63ae:	4b10      	ldr	r3, [pc, #64]	; (63f0 <_DoInit+0x50>)
    63b0:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    63b2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    63b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    63b8:	4a0e      	ldr	r2, [pc, #56]	; (63f4 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    63ba:	490f      	ldr	r1, [pc, #60]	; (63f8 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    63bc:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    63be:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    63c0:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    63c2:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    63c4:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    63c6:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    63c8:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    63ca:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    63cc:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    63ce:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    63d0:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    63d2:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    63d4:	f01c f964 	bl	226a0 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    63d8:	4908      	ldr	r1, [pc, #32]	; (63fc <_DoInit+0x5c>)
    63da:	4620      	mov	r0, r4
    63dc:	f01c f960 	bl	226a0 <strcpy>
  p->acID[6] = ' ';
    63e0:	2320      	movs	r3, #32
    63e2:	71a3      	strb	r3, [r4, #6]
}
    63e4:	bd10      	pop	{r4, pc}
    63e6:	bf00      	nop
    63e8:	20001830 	.word	0x20001830
    63ec:	000289a4 	.word	0x000289a4
    63f0:	20004e35 	.word	0x20004e35
    63f4:	20004e25 	.word	0x20004e25
    63f8:	000289ad 	.word	0x000289ad
    63fc:	000289b1 	.word	0x000289b1

00006400 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    6404:	4f23      	ldr	r7, [pc, #140]	; (6494 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    6406:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    640a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    640c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6410:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    6412:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    6414:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6416:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6418:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    641a:	d834      	bhi.n	6486 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    641c:	f8d2 a020 	ldr.w	sl, [r2, #32]
    6420:	ebaa 0905 	sub.w	r9, sl, r5
    6424:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    6428:	4294      	cmp	r4, r2
    642a:	d811      	bhi.n	6450 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    642c:	f04f 0918 	mov.w	r9, #24
    6430:	fb06 9309 	mla	r3, r6, r9, r9
    6434:	443b      	add	r3, r7
    6436:	4622      	mov	r2, r4
    6438:	6858      	ldr	r0, [r3, #4]
    643a:	4641      	mov	r1, r8
    643c:	4428      	add	r0, r5
    643e:	f01c f96f 	bl	22720 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    6442:	fb09 7606 	mla	r6, r9, r6, r7
    6446:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    6448:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    644a:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    644c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    6450:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    6452:	429c      	cmp	r4, r3
    6454:	d81b      	bhi.n	648e <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    6456:	fb00 bb0b 	mla	fp, r0, fp, fp
    645a:	44bb      	add	fp, r7
    645c:	464a      	mov	r2, r9
    645e:	f8db 0004 	ldr.w	r0, [fp, #4]
    6462:	442c      	add	r4, r5
    6464:	4428      	add	r0, r5
    6466:	f01c f95b 	bl	22720 <memcpy>
      if (NumBytes) {
    646a:	ebb4 040a 	subs.w	r4, r4, sl
    646e:	d006      	beq.n	647e <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    6470:	f8db 0004 	ldr.w	r0, [fp, #4]
    6474:	4622      	mov	r2, r4
    6476:	eb08 0109 	add.w	r1, r8, r9
    647a:	f01c f951 	bl	22720 <memcpy>
      pRing->WrOff = NumBytes;
    647e:	2018      	movs	r0, #24
    6480:	fb00 7606 	mla	r6, r0, r6, r7
    6484:	e7e0      	b.n	6448 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    6486:	3b01      	subs	r3, #1
    6488:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    648a:	42a3      	cmp	r3, r4
    648c:	d2ce      	bcs.n	642c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    648e:	2000      	movs	r0, #0
    6490:	e7dc      	b.n	644c <SEGGER_RTT_WriteSkipNoLock+0x4c>
    6492:	bf00      	nop
    6494:	20001830 	.word	0x20001830

00006498 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    6498:	4b03      	ldr	r3, [pc, #12]	; (64a8 <SEGGER_RTT_HasDataUp+0x10>)
    649a:	2218      	movs	r2, #24
    649c:	fb02 3300 	mla	r3, r2, r0, r3
    64a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    64a2:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    64a4:	1a80      	subs	r0, r0, r2
    64a6:	4770      	bx	lr
    64a8:	20001830 	.word	0x20001830

000064ac <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    64ac:	4b01      	ldr	r3, [pc, #4]	; (64b4 <uECC_get_rng+0x8>)
    64ae:	6818      	ldr	r0, [r3, #0]
    64b0:	4770      	bx	lr
    64b2:	bf00      	nop
    64b4:	20000174 	.word	0x20000174

000064b8 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    64b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    64ba:	2208      	movs	r2, #8
{
    64bc:	b089      	sub	sp, #36	; 0x24
    64be:	460c      	mov	r4, r1
    64c0:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    64c2:	f01b f9d9 	bl	21878 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    64c6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    64c8:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    64ca:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    64cc:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    64ce:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    64d0:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    64d2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    64d4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    64d6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    64d8:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    64da:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    64dc:	2308      	movs	r3, #8
    64de:	466a      	mov	r2, sp
    64e0:	4669      	mov	r1, sp
    64e2:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    64e4:	e9cd 7701 	strd	r7, r7, [sp, #4]
    64e8:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    64ea:	f01b f8c7 	bl	2167c <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    64ee:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    64f0:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    64f2:	466a      	mov	r2, sp
    64f4:	4631      	mov	r1, r6
    64f6:	4630      	mov	r0, r6
    64f8:	f01b f8c0 	bl	2167c <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    64fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    64fe:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    6500:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6502:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    6504:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6506:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    6508:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    650a:	4405      	add	r5, r0
	tmp[7] = 0;
    650c:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6510:	466a      	mov	r2, sp
    6512:	2308      	movs	r3, #8
    6514:	4669      	mov	r1, sp
    6516:	4668      	mov	r0, sp
    6518:	f01b f8b0 	bl	2167c <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    651c:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    651e:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6520:	2308      	movs	r3, #8
    6522:	466a      	mov	r2, sp
    6524:	4630      	mov	r0, r6
    6526:	f01b f8a9 	bl	2167c <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    652a:	6a23      	ldr	r3, [r4, #32]
    652c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    652e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6530:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    6532:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6534:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    6536:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6538:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    653a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    653c:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    653e:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6540:	2308      	movs	r3, #8
    6542:	466a      	mov	r2, sp
    6544:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    6546:	e9cd 7704 	strd	r7, r7, [sp, #16]
    654a:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    654c:	f01b f896 	bl	2167c <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    6550:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6552:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    6554:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    6556:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    6558:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    655a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    655c:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    655e:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    6560:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    6562:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    6564:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    6566:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    656a:	6a23      	ldr	r3, [r4, #32]
    656c:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    656e:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6570:	2308      	movs	r3, #8
    6572:	466a      	mov	r2, sp
    6574:	4630      	mov	r0, r6
    6576:	f01b f881 	bl	2167c <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    657a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    657c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    657e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6580:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    6582:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6584:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    6586:	6a23      	ldr	r3, [r4, #32]
    6588:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    658a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    658c:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    658e:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6590:	2308      	movs	r3, #8
    6592:	466a      	mov	r2, sp
    6594:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    6596:	e9cd 7704 	strd	r7, r7, [sp, #16]
    659a:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    659c:	f01b f9a2 	bl	218e4 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    65a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    65a2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    65a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    65a6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    65a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    65aa:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    65ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    65ae:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    65b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    65b2:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    65b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    65b6:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    65b8:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    65ba:	2308      	movs	r3, #8
    65bc:	466a      	mov	r2, sp
    65be:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    65c0:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    65c4:	f01b f98e 	bl	218e4 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    65c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    65ca:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    65cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    65ce:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    65d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    65d2:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    65d4:	6a23      	ldr	r3, [r4, #32]
    65d6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    65d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    65da:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    65dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    65de:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    65e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    65e4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    65e6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    65e8:	2308      	movs	r3, #8
    65ea:	466a      	mov	r2, sp
    65ec:	4630      	mov	r0, r6
    65ee:	f01b f979 	bl	218e4 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    65f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    65f4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    65f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    65f8:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    65fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    65fe:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    6600:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6602:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    6604:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    6606:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    660a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    660c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    660e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6610:	2308      	movs	r3, #8
    6612:	466a      	mov	r2, sp
    6614:	4630      	mov	r0, r6
    6616:	f01b f965 	bl	218e4 <uECC_vli_sub>

	if (carry < 0) {
    661a:	1a2d      	subs	r5, r5, r0
    661c:	d410      	bmi.n	6640 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    661e:	4c0d      	ldr	r4, [pc, #52]	; (6654 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
    6620:	b935      	cbnz	r5, 6630 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    6622:	2208      	movs	r2, #8
    6624:	4631      	mov	r1, r6
    6626:	4620      	mov	r0, r4
    6628:	f01b f932 	bl	21890 <uECC_vli_cmp_unsafe>
		while (carry || 
    662c:	2801      	cmp	r0, #1
    662e:	d00f      	beq.n	6650 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    6630:	2308      	movs	r3, #8
    6632:	4622      	mov	r2, r4
    6634:	4631      	mov	r1, r6
    6636:	4630      	mov	r0, r6
    6638:	f01b f954 	bl	218e4 <uECC_vli_sub>
    663c:	1a2d      	subs	r5, r5, r0
    663e:	e7ef      	b.n	6620 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    6640:	4a04      	ldr	r2, [pc, #16]	; (6654 <vli_mmod_fast_secp256r1+0x19c>)
    6642:	2308      	movs	r3, #8
    6644:	4631      	mov	r1, r6
    6646:	4630      	mov	r0, r6
    6648:	f01b f818 	bl	2167c <uECC_vli_add>
		while (carry < 0);
    664c:	182d      	adds	r5, r5, r0
    664e:	d4f8      	bmi.n	6642 <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
    6650:	b009      	add	sp, #36	; 0x24
    6652:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6654:	000268b0 	.word	0x000268b0

00006658 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    6658:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    665a:	4e26      	ldr	r6, [pc, #152]	; (66f4 <tc_aes128_set_encrypt_key+0x9c>)
{
    665c:	4607      	mov	r7, r0
    665e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    6660:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    6662:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    6664:	ad01      	add	r5, sp, #4
    6666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6668:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    666a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    666c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    6670:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    6674:	4638      	mov	r0, r7
    6676:	2f00      	cmp	r7, #0
    6678:	d038      	beq.n	66ec <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    667a:	2c00      	cmp	r4, #0
    667c:	d038      	beq.n	66f0 <tc_aes128_set_encrypt_key+0x98>
    667e:	1f38      	subs	r0, r7, #4
    6680:	4621      	mov	r1, r4
    6682:	4602      	mov	r2, r0
    6684:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6686:	784b      	ldrb	r3, [r1, #1]
    6688:	780d      	ldrb	r5, [r1, #0]
    668a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    668c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    6690:	78cd      	ldrb	r5, [r1, #3]
    6692:	432b      	orrs	r3, r5
    6694:	788d      	ldrb	r5, [r1, #2]
    6696:	3104      	adds	r1, #4
    6698:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    669c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    669e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    66a2:	d1f0      	bne.n	6686 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    66a4:	4c14      	ldr	r4, [pc, #80]	; (66f8 <tc_aes128_set_encrypt_key+0xa0>)
    66a6:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    66a8:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    66aa:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    66ac:	d116      	bne.n	66dc <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    66ae:	f3c3 4207 	ubfx	r2, r3, #16, #8
    66b2:	5ca5      	ldrb	r5, [r4, r2]
    66b4:	0e1a      	lsrs	r2, r3, #24
    66b6:	5ca2      	ldrb	r2, [r4, r2]
    66b8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    66bc:	f3c3 2507 	ubfx	r5, r3, #8, #8
    66c0:	b2db      	uxtb	r3, r3
    66c2:	5d65      	ldrb	r5, [r4, r5]
    66c4:	5ce3      	ldrb	r3, [r4, r3]
    66c6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    66ca:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    66ce:	ad0c      	add	r5, sp, #48	; 0x30
    66d0:	f021 0303 	bic.w	r3, r1, #3
    66d4:	442b      	add	r3, r5
    66d6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    66da:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    66dc:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    66e0:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    66e2:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    66e4:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    66e6:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    66e8:	d1de      	bne.n	66a8 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    66ea:	2001      	movs	r0, #1
}
    66ec:	b00d      	add	sp, #52	; 0x34
    66ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    66f0:	4620      	mov	r0, r4
    66f2:	e7fb      	b.n	66ec <tc_aes128_set_encrypt_key+0x94>
    66f4:	000266e8 	.word	0x000266e8
    66f8:	000289b8 	.word	0x000289b8

000066fc <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    66fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6700:	4615      	mov	r5, r2
    6702:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    6704:	4606      	mov	r6, r0
    6706:	2800      	cmp	r0, #0
    6708:	d058      	beq.n	67bc <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    670a:	2900      	cmp	r1, #0
    670c:	d059      	beq.n	67c2 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    670e:	2a00      	cmp	r2, #0
    6710:	d059      	beq.n	67c6 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    6712:	2310      	movs	r3, #16
    6714:	460a      	mov	r2, r1
    6716:	4668      	mov	r0, sp
    6718:	4619      	mov	r1, r3
    671a:	f01a feeb 	bl	214f4 <_copy>
	add_round_key(state, s->words);
    671e:	4629      	mov	r1, r5
    6720:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    6722:	4c2a      	ldr	r4, [pc, #168]	; (67cc <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    6724:	f01b fdf0 	bl	22308 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    6728:	f105 0710 	add.w	r7, r5, #16
    672c:	46a1      	mov	r9, r4
    672e:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    6730:	46e8      	mov	r8, sp
{
    6732:	466a      	mov	r2, sp
    6734:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    6736:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    6738:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    673a:	5c61      	ldrb	r1, [r4, r1]
    673c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    6740:	d1f9      	bne.n	6736 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    6742:	4668      	mov	r0, sp
    6744:	f01b fe25 	bl	22392 <shift_rows>
	mult_row_column(t, s);
    6748:	4669      	mov	r1, sp
    674a:	a804      	add	r0, sp, #16
    674c:	f01b fe5a 	bl	22404 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    6750:	a901      	add	r1, sp, #4
    6752:	a805      	add	r0, sp, #20
    6754:	f01b fe56 	bl	22404 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    6758:	a902      	add	r1, sp, #8
    675a:	a806      	add	r0, sp, #24
    675c:	f01b fe52 	bl	22404 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    6760:	a903      	add	r1, sp, #12
    6762:	a807      	add	r0, sp, #28
    6764:	f01b fe4e 	bl	22404 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    6768:	2310      	movs	r3, #16
    676a:	4619      	mov	r1, r3
    676c:	eb0d 0203 	add.w	r2, sp, r3
    6770:	4668      	mov	r0, sp
    6772:	f01a febf 	bl	214f4 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    6776:	4639      	mov	r1, r7
    6778:	4668      	mov	r0, sp
    677a:	3710      	adds	r7, #16
    677c:	f01b fdc4 	bl	22308 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    6780:	42af      	cmp	r7, r5
    6782:	d1d5      	bne.n	6730 <tc_aes_encrypt+0x34>
    6784:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    6786:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    678a:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    678c:	f819 3003 	ldrb.w	r3, [r9, r3]
    6790:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    6794:	d1f7      	bne.n	6786 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    6796:	4668      	mov	r0, sp
    6798:	f01b fdfb 	bl	22392 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    679c:	4629      	mov	r1, r5
    679e:	4668      	mov	r0, sp
    67a0:	f01b fdb2 	bl	22308 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    67a4:	2310      	movs	r3, #16
    67a6:	4619      	mov	r1, r3
    67a8:	466a      	mov	r2, sp
    67aa:	4630      	mov	r0, r6
    67ac:	f01a fea2 	bl	214f4 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    67b0:	4668      	mov	r0, sp
    67b2:	2210      	movs	r2, #16
    67b4:	4621      	mov	r1, r4
    67b6:	f01a feaa 	bl	2150e <_set>

	return TC_CRYPTO_SUCCESS;
    67ba:	2001      	movs	r0, #1
}
    67bc:	b009      	add	sp, #36	; 0x24
    67be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    67c2:	4608      	mov	r0, r1
    67c4:	e7fa      	b.n	67bc <tc_aes_encrypt+0xc0>
    67c6:	4610      	mov	r0, r2
    67c8:	e7f8      	b.n	67bc <tc_aes_encrypt+0xc0>
    67ca:	bf00      	nop
    67cc:	000289b8 	.word	0x000289b8

000067d0 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    67d0:	4a09      	ldr	r2, [pc, #36]	; (67f8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    67d2:	490a      	ldr	r1, [pc, #40]	; (67fc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    67d4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    67d6:	6809      	ldr	r1, [r1, #0]
    67d8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    67da:	4909      	ldr	r1, [pc, #36]	; (6800 <arch_swap+0x30>)
	_current->arch.basepri = key;
    67dc:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    67de:	684b      	ldr	r3, [r1, #4]
    67e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    67e4:	604b      	str	r3, [r1, #4]
    67e6:	2300      	movs	r3, #0
    67e8:	f383 8811 	msr	BASEPRI, r3
    67ec:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    67f0:	6893      	ldr	r3, [r2, #8]
}
    67f2:	6f98      	ldr	r0, [r3, #120]	; 0x78
    67f4:	4770      	bx	lr
    67f6:	bf00      	nop
    67f8:	20004c80 	.word	0x20004c80
    67fc:	00027f94 	.word	0x00027f94
    6800:	e000ed00 	.word	0xe000ed00

00006804 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    6804:	490f      	ldr	r1, [pc, #60]	; (6844 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    6806:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    6808:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    680c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    680e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    6812:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6816:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6818:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    681c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    6820:	4f09      	ldr	r7, [pc, #36]	; (6848 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    6822:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    6826:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    6828:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    682a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    682c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    682e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    6830:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    6832:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    6836:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    683a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    683e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    6842:	4770      	bx	lr
    ldr r1, =_kernel
    6844:	20004c80 	.word	0x20004c80
    ldr v4, =_SCS_ICSR
    6848:	e000ed04 	.word	0xe000ed04

0000684c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    684c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    6850:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    6852:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    6856:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    685a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    685c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    6860:	2902      	cmp	r1, #2
    beq _oops
    6862:	d0ff      	beq.n	6864 <_oops>

00006864 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    6864:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    6866:	f01b ff10 	bl	2268a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    686a:	bd01      	pop	{r0, pc}

0000686c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    686c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    686e:	2b00      	cmp	r3, #0
    6870:	db08      	blt.n	6884 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6872:	2201      	movs	r2, #1
    6874:	f000 001f 	and.w	r0, r0, #31
    6878:	fa02 f000 	lsl.w	r0, r2, r0
    687c:	095b      	lsrs	r3, r3, #5
    687e:	4a02      	ldr	r2, [pc, #8]	; (6888 <arch_irq_enable+0x1c>)
    6880:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    6884:	4770      	bx	lr
    6886:	bf00      	nop
    6888:	e000e100 	.word	0xe000e100

0000688c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    688c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    688e:	2b00      	cmp	r3, #0
    6890:	db0d      	blt.n	68ae <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6892:	2201      	movs	r2, #1
    6894:	095b      	lsrs	r3, r3, #5
    6896:	f000 001f 	and.w	r0, r0, #31
    689a:	fa02 f000 	lsl.w	r0, r2, r0
    689e:	3320      	adds	r3, #32
    68a0:	4a03      	ldr	r2, [pc, #12]	; (68b0 <arch_irq_disable+0x24>)
    68a2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    68a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    68aa:	f3bf 8f6f 	isb	sy
}
    68ae:	4770      	bx	lr
    68b0:	e000e100 	.word	0xe000e100

000068b4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    68b4:	4b05      	ldr	r3, [pc, #20]	; (68cc <arch_irq_is_enabled+0x18>)
    68b6:	0942      	lsrs	r2, r0, #5
    68b8:	f000 001f 	and.w	r0, r0, #31
    68bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    68c0:	2301      	movs	r3, #1
    68c2:	fa03 f000 	lsl.w	r0, r3, r0
}
    68c6:	4010      	ands	r0, r2
    68c8:	4770      	bx	lr
    68ca:	bf00      	nop
    68cc:	e000e100 	.word	0xe000e100

000068d0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    68d0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    68d2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    68d4:	bfa8      	it	ge
    68d6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    68da:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    68de:	bfb8      	it	lt
    68e0:	4b06      	ldrlt	r3, [pc, #24]	; (68fc <z_arm_irq_priority_set+0x2c>)
    68e2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    68e6:	bfac      	ite	ge
    68e8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    68ec:	f000 000f 	andlt.w	r0, r0, #15
    68f0:	b2c9      	uxtb	r1, r1
    68f2:	bfb4      	ite	lt
    68f4:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    68f6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    68fa:	4770      	bx	lr
    68fc:	e000ed14 	.word	0xe000ed14

00006900 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    6900:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    6902:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    6904:	4b04      	ldr	r3, [pc, #16]	; (6918 <_arch_isr_direct_pm+0x18>)
    6906:	6a18      	ldr	r0, [r3, #32]
    6908:	b118      	cbz	r0, 6912 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    690a:	2200      	movs	r2, #0
    690c:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    690e:	f01e fff0 	bl	258f2 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    6912:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    6914:	bd08      	pop	{r3, pc}
    6916:	bf00      	nop
    6918:	20004c80 	.word	0x20004c80

0000691c <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    691c:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    6920:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    6922:	3a20      	subs	r2, #32
    6924:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    6928:	4908      	ldr	r1, [pc, #32]	; (694c <arch_new_thread+0x30>)
#endif

	pInitCtx->basic.a1 = (uint32_t)pEntry;
    692a:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (uint32_t)parameter1;
    692c:	9b00      	ldr	r3, [sp, #0]
    692e:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (uint32_t)parameter2;
    6930:	9b01      	ldr	r3, [sp, #4]
    6932:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (uint32_t)parameter3;
    6934:	9b02      	ldr	r3, [sp, #8]
    6936:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    6938:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    693c:	61d3      	str	r3, [r2, #28]
	pInitCtx->basic.pc &= 0xfffffffe;
    693e:	f021 0101 	bic.w	r1, r1, #1
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)pInitCtx;

	thread->arch.basepri = 0;
    6942:	2300      	movs	r3, #0
	pInitCtx->basic.pc &= 0xfffffffe;
    6944:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)pInitCtx;
    6946:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    6948:	6743      	str	r3, [r0, #116]	; 0x74

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    694a:	4770      	bx	lr
    694c:	00020675 	.word	0x00020675

00006950 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    6950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6952:	4606      	mov	r6, r0
    6954:	460c      	mov	r4, r1
    6956:	4617      	mov	r7, r2
    6958:	461d      	mov	r5, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    695a:	f000 fb0d 	bl	6f78 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    695e:	4b09      	ldr	r3, [pc, #36]	; (6984 <arch_switch_to_main_thread+0x34>)
	start_of_main_stack =
    6960:	443c      	add	r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    6962:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    6966:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    6968:	4628      	mov	r0, r5
    696a:	f384 8809 	msr	PSP, r4
    696e:	2100      	movs	r1, #0
    6970:	b663      	cpsie	if
    6972:	f381 8811 	msr	BASEPRI, r1
    6976:	f3bf 8f6f 	isb	sy
    697a:	2200      	movs	r2, #0
    697c:	2300      	movs	r3, #0
    697e:	f019 fe79 	bl	20674 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    6982:	bf00      	nop
    6984:	20004c80 	.word	0x20004c80

00006988 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    6988:	4901      	ldr	r1, [pc, #4]	; (6990 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    698a:	2210      	movs	r2, #16
	str	r2, [r1]
    698c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    698e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    6990:	e000ed10 	.word	0xe000ed10

00006994 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    6994:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    6996:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    6998:	f380 8811 	msr	BASEPRI, r0
	isb
    699c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    69a0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    69a4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    69a6:	b662      	cpsie	i
	isb
    69a8:	f3bf 8f6f 	isb	sy

	bx	lr
    69ac:	4770      	bx	lr
    69ae:	bf00      	nop

000069b0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    69b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    69b2:	4606      	mov	r6, r0

	if (esf != NULL) {
    69b4:	460c      	mov	r4, r1
    69b6:	b301      	cbz	r1, 69fa <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    69b8:	4b13      	ldr	r3, [pc, #76]	; (6a08 <z_arm_fatal_error+0x58>)
    69ba:	4d14      	ldr	r5, [pc, #80]	; (6a0c <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    69bc:	4814      	ldr	r0, [pc, #80]	; (6a10 <z_arm_fatal_error+0x60>)
    69be:	1aed      	subs	r5, r5, r3
    69c0:	08ed      	lsrs	r5, r5, #3
    69c2:	01ad      	lsls	r5, r5, #6
    69c4:	f045 0501 	orr.w	r5, r5, #1
    69c8:	f8ad 5000 	strh.w	r5, [sp]
    69cc:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    69d0:	6809      	ldr	r1, [r1, #0]
    69d2:	f01a f92f 	bl	20c34 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    69d6:	f8ad 5000 	strh.w	r5, [sp]
    69da:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    69de:	68e1      	ldr	r1, [r4, #12]
    69e0:	480c      	ldr	r0, [pc, #48]	; (6a14 <z_arm_fatal_error+0x64>)
    69e2:	f01a f927 	bl	20c34 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    69e6:	69e1      	ldr	r1, [r4, #28]
    69e8:	480b      	ldr	r0, [pc, #44]	; (6a18 <z_arm_fatal_error+0x68>)
    69ea:	462a      	mov	r2, r5
    69ec:	f01a f8f5 	bl	20bda <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    69f0:	69a1      	ldr	r1, [r4, #24]
    69f2:	480a      	ldr	r0, [pc, #40]	; (6a1c <z_arm_fatal_error+0x6c>)
    69f4:	462a      	mov	r2, r5
    69f6:	f01a f8f0 	bl	20bda <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    69fa:	4621      	mov	r1, r4
    69fc:	4630      	mov	r0, r6
}
    69fe:	b002      	add	sp, #8
    6a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    6a04:	f018 baf2 	b.w	1efec <z_fatal_error>
    6a08:	00026544 	.word	0x00026544
    6a0c:	0002667c 	.word	0x0002667c
    6a10:	00028ab8 	.word	0x00028ab8
    6a14:	00028ae7 	.word	0x00028ae7
    6a18:	00028b16 	.word	0x00028b16
    6a1c:	00028b25 	.word	0x00028b25

00006a20 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    6a20:	bf30      	wfi
    b z_SysNmiOnReset
    6a22:	f7ff bffd 	b.w	6a20 <z_SysNmiOnReset>
    6a26:	bf00      	nop

00006a28 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6a28:	4a0e      	ldr	r2, [pc, #56]	; (6a64 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    6a2a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6a2c:	4b0e      	ldr	r3, [pc, #56]	; (6a68 <z_arm_prep_c+0x40>)
    6a2e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    6a32:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    6a34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6a38:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    6a3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6a40:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    6a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    6a48:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    6a4c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    6a50:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    6a54:	f018 fb46 	bl	1f0e4 <z_bss_zero>
	z_data_copy();
    6a58:	f018 fb4e 	bl	1f0f8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    6a5c:	f000 fa5a 	bl	6f14 <z_arm_interrupt_init>
	z_cstart();
    6a60:	f018 fb88 	bl	1f174 <z_cstart>
    6a64:	00000000 	.word	0x00000000
    6a68:	e000ed00 	.word	0xe000ed00

00006a6c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    6a6c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    6a6e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    6a70:	4a0b      	ldr	r2, [pc, #44]	; (6aa0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    6a72:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    6a74:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    6a76:	bf1e      	ittt	ne
	movne	r1, #0
    6a78:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    6a7a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    6a7c:	f01e ff39 	blne	258f2 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    6a80:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    6a82:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    6a86:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    6a8a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    6a8e:	4905      	ldr	r1, [pc, #20]	; (6aa4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    6a90:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    6a92:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    6a94:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    6a96:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    6a9a:	4903      	ldr	r1, [pc, #12]	; (6aa8 <_isr_wrapper+0x3c>)
	bx r1
    6a9c:	4708      	bx	r1
    6a9e:	0000      	.short	0x0000
	ldr r2, =_kernel
    6aa0:	20004c80 	.word	0x20004c80
	ldr r1, =_sw_isr_table
    6aa4:	00026388 	.word	0x00026388
	ldr r1, =z_arm_int_exit
    6aa8:	00006ef9 	.word	0x00006ef9

00006aac <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    6aac:	f01b fe89 	bl	227c2 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6ab0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6ab2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6ab6:	4808      	ldr	r0, [pc, #32]	; (6ad8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    6ab8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    6abc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6abe:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    6ac2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    6ac6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6ac8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6aca:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6ace:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    6ad2:	f7ff ffa9 	bl	6a28 <z_arm_prep_c>
    6ad6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    6ad8:	20006e30 	.word	0x20006e30

00006adc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6adc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    6ae0:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    6ae4:	4672      	mov	r2, lr

	push {r0, lr}
    6ae6:	b501      	push	{r0, lr}

	bl z_arm_fault
    6ae8:	f000 f932 	bl	6d50 <z_arm_fault>

	pop {r0, pc}
    6aec:	bd01      	pop	{r0, pc}
    6aee:	bf00      	nop

00006af0 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    6af0:	b570      	push	{r4, r5, r6, lr}
    6af2:	4b23      	ldr	r3, [pc, #140]	; (6b80 <usage_fault.isra.0+0x90>)
    6af4:	4c23      	ldr	r4, [pc, #140]	; (6b84 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6af6:	4d24      	ldr	r5, [pc, #144]	; (6b88 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    6af8:	4824      	ldr	r0, [pc, #144]	; (6b8c <usage_fault.isra.0+0x9c>)
    6afa:	1ae4      	subs	r4, r4, r3
    6afc:	08e4      	lsrs	r4, r4, #3
    6afe:	01a4      	lsls	r4, r4, #6
    6b00:	f044 0601 	orr.w	r6, r4, #1
    6b04:	4631      	mov	r1, r6
    6b06:	f01a f85b 	bl	20bc0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6b0a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6b0c:	0193      	lsls	r3, r2, #6
    6b0e:	d503      	bpl.n	6b18 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    6b10:	481f      	ldr	r0, [pc, #124]	; (6b90 <usage_fault.isra.0+0xa0>)
    6b12:	4631      	mov	r1, r6
    6b14:	f01a f854 	bl	20bc0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    6b18:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b1a:	01dd      	lsls	r5, r3, #7
    6b1c:	d504      	bpl.n	6b28 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    6b1e:	481d      	ldr	r0, [pc, #116]	; (6b94 <usage_fault.isra.0+0xa4>)
    6b20:	f044 0101 	orr.w	r1, r4, #1
    6b24:	f01a f84c 	bl	20bc0 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6b28:	4d17      	ldr	r5, [pc, #92]	; (6b88 <usage_fault.isra.0+0x98>)
    6b2a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6b2c:	0310      	lsls	r0, r2, #12
    6b2e:	d504      	bpl.n	6b3a <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    6b30:	4819      	ldr	r0, [pc, #100]	; (6b98 <usage_fault.isra.0+0xa8>)
    6b32:	f044 0101 	orr.w	r1, r4, #1
    6b36:	f01a f843 	bl	20bc0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6b3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b3c:	0359      	lsls	r1, r3, #13
    6b3e:	d504      	bpl.n	6b4a <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    6b40:	4816      	ldr	r0, [pc, #88]	; (6b9c <usage_fault.isra.0+0xac>)
    6b42:	f044 0101 	orr.w	r1, r4, #1
    6b46:	f01a f83b 	bl	20bc0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6b4a:	4d0f      	ldr	r5, [pc, #60]	; (6b88 <usage_fault.isra.0+0x98>)
    6b4c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6b4e:	0392      	lsls	r2, r2, #14
    6b50:	d504      	bpl.n	6b5c <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    6b52:	4813      	ldr	r0, [pc, #76]	; (6ba0 <usage_fault.isra.0+0xb0>)
    6b54:	f044 0101 	orr.w	r1, r4, #1
    6b58:	f01a f832 	bl	20bc0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    6b5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b5e:	03db      	lsls	r3, r3, #15
    6b60:	d504      	bpl.n	6b6c <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    6b62:	4810      	ldr	r0, [pc, #64]	; (6ba4 <usage_fault.isra.0+0xb4>)
    6b64:	f044 0101 	orr.w	r1, r4, #1
    6b68:	f01a f82a 	bl	20bc0 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6b6c:	4a06      	ldr	r2, [pc, #24]	; (6b88 <usage_fault.isra.0+0x98>)
    6b6e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6b70:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    6b74:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    6b78:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    6b7a:	2000      	movs	r0, #0
    6b7c:	bd70      	pop	{r4, r5, r6, pc}
    6b7e:	bf00      	nop
    6b80:	00026544 	.word	0x00026544
    6b84:	0002667c 	.word	0x0002667c
    6b88:	e000ed00 	.word	0xe000ed00
    6b8c:	00028b53 	.word	0x00028b53
    6b90:	00028b6b 	.word	0x00028b6b
    6b94:	00028b7e 	.word	0x00028b7e
    6b98:	00028b98 	.word	0x00028b98
    6b9c:	00028bb6 	.word	0x00028bb6
    6ba0:	00028bdb 	.word	0x00028bdb
    6ba4:	00028bf5 	.word	0x00028bf5

00006ba8 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    6ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6bac:	4b27      	ldr	r3, [pc, #156]	; (6c4c <mem_manage_fault.isra.0+0xa4>)
    6bae:	4c28      	ldr	r4, [pc, #160]	; (6c50 <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6bb0:	4d28      	ldr	r5, [pc, #160]	; (6c54 <mem_manage_fault.isra.0+0xac>)
    6bb2:	1ae4      	subs	r4, r4, r3
    6bb4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    6bb6:	01a4      	lsls	r4, r4, #6
    6bb8:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    6bbc:	4607      	mov	r7, r0
    6bbe:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    6bc0:	4825      	ldr	r0, [pc, #148]	; (6c58 <mem_manage_fault.isra.0+0xb0>)
    6bc2:	4641      	mov	r1, r8
    6bc4:	f019 fffc 	bl	20bc0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6bc8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6bca:	06d1      	lsls	r1, r2, #27
    6bcc:	d503      	bpl.n	6bd6 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    6bce:	4823      	ldr	r0, [pc, #140]	; (6c5c <mem_manage_fault.isra.0+0xb4>)
    6bd0:	4641      	mov	r1, r8
    6bd2:	f019 fff5 	bl	20bc0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    6bd6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6bd8:	071a      	lsls	r2, r3, #28
    6bda:	d504      	bpl.n	6be6 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    6bdc:	4820      	ldr	r0, [pc, #128]	; (6c60 <mem_manage_fault.isra.0+0xb8>)
    6bde:	f044 0101 	orr.w	r1, r4, #1
    6be2:	f019 ffed 	bl	20bc0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    6be6:	4d1b      	ldr	r5, [pc, #108]	; (6c54 <mem_manage_fault.isra.0+0xac>)
    6be8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6bea:	079b      	lsls	r3, r3, #30
    6bec:	d512      	bpl.n	6c14 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    6bee:	f044 0801 	orr.w	r8, r4, #1
    6bf2:	481c      	ldr	r0, [pc, #112]	; (6c64 <mem_manage_fault.isra.0+0xbc>)
    6bf4:	4641      	mov	r1, r8
    6bf6:	f019 ffe3 	bl	20bc0 <log_0>
		mmfar = SCB->MMFAR;
    6bfa:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    6bfc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6bfe:	0618      	lsls	r0, r3, #24
    6c00:	d508      	bpl.n	6c14 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    6c02:	4819      	ldr	r0, [pc, #100]	; (6c68 <mem_manage_fault.isra.0+0xc0>)
    6c04:	4642      	mov	r2, r8
    6c06:	f019 ffe8 	bl	20bda <log_1>
			if (from_hard_fault) {
    6c0a:	b11f      	cbz	r7, 6c14 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    6c0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6c12:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    6c14:	4d0f      	ldr	r5, [pc, #60]	; (6c54 <mem_manage_fault.isra.0+0xac>)
    6c16:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6c18:	07d2      	lsls	r2, r2, #31
    6c1a:	d504      	bpl.n	6c26 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    6c1c:	4813      	ldr	r0, [pc, #76]	; (6c6c <mem_manage_fault.isra.0+0xc4>)
    6c1e:	f044 0101 	orr.w	r1, r4, #1
    6c22:	f019 ffcd 	bl	20bc0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    6c26:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6c28:	069b      	lsls	r3, r3, #26
    6c2a:	d504      	bpl.n	6c36 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    6c2c:	4810      	ldr	r0, [pc, #64]	; (6c70 <mem_manage_fault.isra.0+0xc8>)
    6c2e:	f044 0101 	orr.w	r1, r4, #1
    6c32:	f019 ffc5 	bl	20bc0 <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    6c36:	4b07      	ldr	r3, [pc, #28]	; (6c54 <mem_manage_fault.isra.0+0xac>)
    6c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6c3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    6c3c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6c3e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    6c42:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    6c44:	7030      	strb	r0, [r6, #0]
}
    6c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c4a:	bf00      	nop
    6c4c:	00026544 	.word	0x00026544
    6c50:	0002667c 	.word	0x0002667c
    6c54:	e000ed00 	.word	0xe000ed00
    6c58:	00028c20 	.word	0x00028c20
    6c5c:	00028c36 	.word	0x00028c36
    6c60:	00028c69 	.word	0x00028c69
    6c64:	00028c7c 	.word	0x00028c7c
    6c68:	00028c94 	.word	0x00028c94
    6c6c:	00028caa 	.word	0x00028caa
    6c70:	00028cc9 	.word	0x00028cc9

00006c74 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c78:	4b2a      	ldr	r3, [pc, #168]	; (6d24 <bus_fault.isra.0+0xb0>)
    6c7a:	4c2b      	ldr	r4, [pc, #172]	; (6d28 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6c7c:	4d2b      	ldr	r5, [pc, #172]	; (6d2c <bus_fault.isra.0+0xb8>)
    6c7e:	1ae4      	subs	r4, r4, r3
    6c80:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    6c82:	01a4      	lsls	r4, r4, #6
    6c84:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6c88:	4607      	mov	r7, r0
    6c8a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    6c8c:	4828      	ldr	r0, [pc, #160]	; (6d30 <bus_fault.isra.0+0xbc>)
    6c8e:	4641      	mov	r1, r8
    6c90:	f019 ff96 	bl	20bc0 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6c94:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6c96:	04d1      	lsls	r1, r2, #19
    6c98:	d503      	bpl.n	6ca2 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    6c9a:	4826      	ldr	r0, [pc, #152]	; (6d34 <bus_fault.isra.0+0xc0>)
    6c9c:	4641      	mov	r1, r8
    6c9e:	f019 ff8f 	bl	20bc0 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6ca2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6ca4:	051a      	lsls	r2, r3, #20
    6ca6:	d504      	bpl.n	6cb2 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    6ca8:	4823      	ldr	r0, [pc, #140]	; (6d38 <bus_fault.isra.0+0xc4>)
    6caa:	f044 0101 	orr.w	r1, r4, #1
    6cae:	f019 ff87 	bl	20bc0 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6cb2:	4d1e      	ldr	r5, [pc, #120]	; (6d2c <bus_fault.isra.0+0xb8>)
    6cb4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6cb6:	059b      	lsls	r3, r3, #22
    6cb8:	d512      	bpl.n	6ce0 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    6cba:	f044 0801 	orr.w	r8, r4, #1
    6cbe:	481f      	ldr	r0, [pc, #124]	; (6d3c <bus_fault.isra.0+0xc8>)
    6cc0:	4641      	mov	r1, r8
    6cc2:	f019 ff7d 	bl	20bc0 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    6cc6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6cc8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6cca:	0418      	lsls	r0, r3, #16
    6ccc:	d508      	bpl.n	6ce0 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6cce:	481c      	ldr	r0, [pc, #112]	; (6d40 <bus_fault.isra.0+0xcc>)
    6cd0:	4642      	mov	r2, r8
    6cd2:	f019 ff82 	bl	20bda <log_1>
			if (from_hard_fault) {
    6cd6:	b11f      	cbz	r7, 6ce0 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6cd8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6cda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6cde:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    6ce0:	4d12      	ldr	r5, [pc, #72]	; (6d2c <bus_fault.isra.0+0xb8>)
    6ce2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6ce4:	0559      	lsls	r1, r3, #21
    6ce6:	d504      	bpl.n	6cf2 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    6ce8:	4816      	ldr	r0, [pc, #88]	; (6d44 <bus_fault.isra.0+0xd0>)
    6cea:	f044 0101 	orr.w	r1, r4, #1
    6cee:	f019 ff67 	bl	20bc0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    6cf2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6cf4:	05da      	lsls	r2, r3, #23
    6cf6:	d50d      	bpl.n	6d14 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    6cf8:	4813      	ldr	r0, [pc, #76]	; (6d48 <bus_fault.isra.0+0xd4>)
    6cfa:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6cfe:	f019 ff5f 	bl	20bc0 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6d02:	4a0a      	ldr	r2, [pc, #40]	; (6d2c <bus_fault.isra.0+0xb8>)
    6d04:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    6d06:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6d08:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    6d0c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    6d0e:	7030      	strb	r0, [r6, #0]
}
    6d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6d14:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6d16:	049b      	lsls	r3, r3, #18
    6d18:	d5f3      	bpl.n	6d02 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6d1a:	480c      	ldr	r0, [pc, #48]	; (6d4c <bus_fault.isra.0+0xd8>)
    6d1c:	f044 0101 	orr.w	r1, r4, #1
    6d20:	e7ed      	b.n	6cfe <bus_fault.isra.0+0x8a>
    6d22:	bf00      	nop
    6d24:	00026544 	.word	0x00026544
    6d28:	0002667c 	.word	0x0002667c
    6d2c:	e000ed00 	.word	0xe000ed00
    6d30:	00028cf8 	.word	0x00028cf8
    6d34:	00028d0e 	.word	0x00028d0e
    6d38:	00028c69 	.word	0x00028c69
    6d3c:	00028d1f 	.word	0x00028d1f
    6d40:	00028d38 	.word	0x00028d38
    6d44:	00028d4d 	.word	0x00028d4d
    6d48:	00028d68 	.word	0x00028d68
    6d4c:	00028cc9 	.word	0x00028cc9

00006d50 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return)
{
    6d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6d54:	4b56      	ldr	r3, [pc, #344]	; (6eb0 <z_arm_fault+0x160>)
    6d56:	685e      	ldr	r6, [r3, #4]
{
    6d58:	b08a      	sub	sp, #40	; 0x28
    6d5a:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6d5c:	f3c6 0408 	ubfx	r4, r6, #0, #9
    6d60:	2500      	movs	r5, #0
    6d62:	f385 8811 	msr	BASEPRI, r5
    6d66:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    6d6a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    6d6e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    6d72:	d10d      	bne.n	6d90 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    6d74:	f002 030c 	and.w	r3, r2, #12
    6d78:	2b08      	cmp	r3, #8
    6d7a:	d10b      	bne.n	6d94 <z_arm_fault+0x44>
    6d7c:	494d      	ldr	r1, [pc, #308]	; (6eb4 <z_arm_fault+0x164>)
    6d7e:	4b4e      	ldr	r3, [pc, #312]	; (6eb8 <z_arm_fault+0x168>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    6d80:	484e      	ldr	r0, [pc, #312]	; (6ebc <z_arm_fault+0x16c>)
    6d82:	1ac9      	subs	r1, r1, r3
    6d84:	08c9      	lsrs	r1, r1, #3
    6d86:	0189      	lsls	r1, r1, #6
    6d88:	f041 0101 	orr.w	r1, r1, #1
    6d8c:	f019 ff18 	bl	20bc0 <log_0>
		return NULL;
    6d90:	462f      	mov	r7, r5
    6d92:	e003      	b.n	6d9c <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    6d94:	0712      	lsls	r2, r2, #28
    6d96:	d401      	bmi.n	6d9c <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    6d98:	4607      	mov	r7, r0
			*nested_exc = true;
    6d9a:	2501      	movs	r5, #1
	*recoverable = false;
    6d9c:	2300      	movs	r3, #0
    6d9e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    6da2:	1ee3      	subs	r3, r4, #3
    6da4:	2b09      	cmp	r3, #9
    6da6:	d86a      	bhi.n	6e7e <z_arm_fault+0x12e>
    6da8:	e8df f003 	tbb	[pc, r3]
    6dac:	3c5c5805 	.word	0x3c5c5805
    6db0:	69696969 	.word	0x69696969
    6db4:	6069      	.short	0x6069
    6db6:	4b40      	ldr	r3, [pc, #256]	; (6eb8 <z_arm_fault+0x168>)
    6db8:	4e3e      	ldr	r6, [pc, #248]	; (6eb4 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    6dba:	4841      	ldr	r0, [pc, #260]	; (6ec0 <z_arm_fault+0x170>)
    6dbc:	1af6      	subs	r6, r6, r3
    6dbe:	08f6      	lsrs	r6, r6, #3
    6dc0:	01b6      	lsls	r6, r6, #6
    6dc2:	f046 0601 	orr.w	r6, r6, #1
    6dc6:	4631      	mov	r1, r6
    6dc8:	f019 fefa 	bl	20bc0 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6dcc:	4b38      	ldr	r3, [pc, #224]	; (6eb0 <z_arm_fault+0x160>)
    6dce:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    6dd0:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6dd4:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    6dd8:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6ddc:	d005      	beq.n	6dea <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    6dde:	4839      	ldr	r0, [pc, #228]	; (6ec4 <z_arm_fault+0x174>)
    6de0:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    6de2:	f019 feed 	bl	20bc0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6de6:	2400      	movs	r4, #0
}
    6de8:	e01f      	b.n	6e2a <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    6dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6dec:	005b      	lsls	r3, r3, #1
    6dee:	d51c      	bpl.n	6e2a <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    6df0:	4835      	ldr	r0, [pc, #212]	; (6ec8 <z_arm_fault+0x178>)
    6df2:	4631      	mov	r1, r6
    6df4:	f019 fee4 	bl	20bc0 <log_0>
		if (SCB_MMFSR != 0) {
    6df8:	4b34      	ldr	r3, [pc, #208]	; (6ecc <z_arm_fault+0x17c>)
    6dfa:	781b      	ldrb	r3, [r3, #0]
    6dfc:	b12b      	cbz	r3, 6e0a <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    6dfe:	f10d 0107 	add.w	r1, sp, #7
    6e02:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    6e04:	f7ff fed0 	bl	6ba8 <mem_manage_fault.isra.0>
    6e08:	e00e      	b.n	6e28 <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    6e0a:	4b31      	ldr	r3, [pc, #196]	; (6ed0 <z_arm_fault+0x180>)
    6e0c:	781b      	ldrb	r3, [r3, #0]
    6e0e:	b12b      	cbz	r3, 6e1c <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    6e10:	f10d 0107 	add.w	r1, sp, #7
    6e14:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    6e16:	f7ff ff2d 	bl	6c74 <bus_fault.isra.0>
    6e1a:	e005      	b.n	6e28 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    6e1c:	4b2d      	ldr	r3, [pc, #180]	; (6ed4 <z_arm_fault+0x184>)
    6e1e:	881b      	ldrh	r3, [r3, #0]
    6e20:	b29b      	uxth	r3, r3
    6e22:	b113      	cbz	r3, 6e2a <z_arm_fault+0xda>
			reason = usage_fault(esf);
    6e24:	f7ff fe64 	bl	6af0 <usage_fault.isra.0>
    6e28:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    6e2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e2e:	b993      	cbnz	r3, 6e56 <z_arm_fault+0x106>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    6e30:	2220      	movs	r2, #32
    6e32:	4639      	mov	r1, r7
    6e34:	a802      	add	r0, sp, #8
    6e36:	f01b fc73 	bl	22720 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    6e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6e3c:	b39d      	cbz	r5, 6ea6 <z_arm_fault+0x156>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6e3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    6e42:	b922      	cbnz	r2, 6e4e <z_arm_fault+0xfe>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    6e44:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    6e48:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6e4c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    6e4e:	a902      	add	r1, sp, #8
    6e50:	4620      	mov	r0, r4
    6e52:	f7ff fdad 	bl	69b0 <z_arm_fatal_error>
}
    6e56:	b00a      	add	sp, #40	; 0x28
    6e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    6e5c:	f10d 0107 	add.w	r1, sp, #7
    6e60:	2000      	movs	r0, #0
    6e62:	e7cf      	b.n	6e04 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    6e64:	f10d 0107 	add.w	r1, sp, #7
    6e68:	2000      	movs	r0, #0
    6e6a:	e7d4      	b.n	6e16 <z_arm_fault+0xc6>
    6e6c:	4911      	ldr	r1, [pc, #68]	; (6eb4 <z_arm_fault+0x164>)
    6e6e:	4b12      	ldr	r3, [pc, #72]	; (6eb8 <z_arm_fault+0x168>)
	PR_FAULT_INFO(
    6e70:	4819      	ldr	r0, [pc, #100]	; (6ed8 <z_arm_fault+0x188>)
    6e72:	1ac9      	subs	r1, r1, r3
    6e74:	08c9      	lsrs	r1, r1, #3
    6e76:	0189      	lsls	r1, r1, #6
    6e78:	f041 0101 	orr.w	r1, r1, #1
    6e7c:	e7b1      	b.n	6de2 <z_arm_fault+0x92>
    6e7e:	4a0e      	ldr	r2, [pc, #56]	; (6eb8 <z_arm_fault+0x168>)
    6e80:	4b0c      	ldr	r3, [pc, #48]	; (6eb4 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** %s %d) *****",
    6e82:	4816      	ldr	r0, [pc, #88]	; (6edc <z_arm_fault+0x18c>)
    6e84:	4916      	ldr	r1, [pc, #88]	; (6ee0 <z_arm_fault+0x190>)
    6e86:	1a9b      	subs	r3, r3, r2
    6e88:	08db      	lsrs	r3, r3, #3
    6e8a:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    6e8e:	ea4f 1383 	mov.w	r3, r3, lsl #6
    6e92:	bf18      	it	ne
    6e94:	4601      	movne	r1, r0
    6e96:	f043 0301 	orr.w	r3, r3, #1
    6e9a:	4812      	ldr	r0, [pc, #72]	; (6ee4 <z_arm_fault+0x194>)
    6e9c:	f1a4 0210 	sub.w	r2, r4, #16
    6ea0:	f019 feaf 	bl	20c02 <log_2>
    6ea4:	e79f      	b.n	6de6 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6ea6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    6eaa:	f023 0301 	bic.w	r3, r3, #1
    6eae:	e7cd      	b.n	6e4c <z_arm_fault+0xfc>
    6eb0:	e000ed00 	.word	0xe000ed00
    6eb4:	0002667c 	.word	0x0002667c
    6eb8:	00026544 	.word	0x00026544
    6ebc:	00028d80 	.word	0x00028d80
    6ec0:	00028dab 	.word	0x00028dab
    6ec4:	00028dc2 	.word	0x00028dc2
    6ec8:	00028de3 	.word	0x00028de3
    6ecc:	e000ed28 	.word	0xe000ed28
    6ed0:	e000ed29 	.word	0xe000ed29
    6ed4:	e000ed2a 	.word	0xe000ed2a
    6ed8:	00028e02 	.word	0x00028e02
    6edc:	00028e4d 	.word	0x00028e4d
    6ee0:	00028e38 	.word	0x00028e38
    6ee4:	00028e66 	.word	0x00028e66

00006ee8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6ee8:	4a02      	ldr	r2, [pc, #8]	; (6ef4 <z_arm_fault_init+0xc>)
    6eea:	6953      	ldr	r3, [r2, #20]
    6eec:	f043 0310 	orr.w	r3, r3, #16
    6ef0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    6ef2:	4770      	bx	lr
    6ef4:	e000ed00 	.word	0xe000ed00

00006ef8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    6ef8:	4b04      	ldr	r3, [pc, #16]	; (6f0c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    6efa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    6efc:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    6efe:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    6f00:	d003      	beq.n	6f0a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    6f02:	4903      	ldr	r1, [pc, #12]	; (6f10 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    6f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    6f08:	600a      	str	r2, [r1, #0]

00006f0a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    6f0a:	4770      	bx	lr
	ldr r3, =_kernel
    6f0c:	20004c80 	.word	0x20004c80
	ldr r1, =_SCS_ICSR
    6f10:	e000ed04 	.word	0xe000ed04

00006f14 <z_arm_interrupt_init>:
    6f14:	4804      	ldr	r0, [pc, #16]	; (6f28 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    6f16:	2300      	movs	r3, #0
    6f18:	2120      	movs	r1, #32
    6f1a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    6f1c:	3301      	adds	r3, #1
    6f1e:	2b30      	cmp	r3, #48	; 0x30
    6f20:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    6f24:	d1f9      	bne.n	6f1a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    6f26:	4770      	bx	lr
    6f28:	e000e100 	.word	0xe000e100

00006f2c <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    6f2c:	b538      	push	{r3, r4, r5, lr}
    6f2e:	4604      	mov	r4, r0
	__asm__ volatile(
    6f30:	f04f 0320 	mov.w	r3, #32
    6f34:	f3ef 8511 	mrs	r5, BASEPRI
    6f38:	f383 8811 	msr	BASEPRI, r3
    6f3c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    6f40:	f018 fcea 	bl	1f918 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    6f44:	4b0a      	ldr	r3, [pc, #40]	; (6f70 <z_impl_k_thread_abort+0x44>)
    6f46:	689b      	ldr	r3, [r3, #8]
    6f48:	42a3      	cmp	r3, r4
    6f4a:	d10b      	bne.n	6f64 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    6f4c:	4b09      	ldr	r3, [pc, #36]	; (6f74 <z_impl_k_thread_abort+0x48>)
    6f4e:	685a      	ldr	r2, [r3, #4]
    6f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
    6f54:	b912      	cbnz	r2, 6f5c <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    6f56:	4628      	mov	r0, r5
    6f58:	f7ff fc3a 	bl	67d0 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6f5c:	685a      	ldr	r2, [r3, #4]
    6f5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    6f62:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    6f64:	4628      	mov	r0, r5
}
    6f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    6f6a:	f01e be7c 	b.w	25c66 <z_reschedule_irqlock>
    6f6e:	bf00      	nop
    6f70:	20004c80 	.word	0x20004c80
    6f74:	e000ed00 	.word	0xe000ed00

00006f78 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    6f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    6f7a:	4b08      	ldr	r3, [pc, #32]	; (6f9c <z_arm_configure_static_mpu_regions+0x24>)
    6f7c:	9301      	str	r3, [sp, #4]
    6f7e:	4b08      	ldr	r3, [pc, #32]	; (6fa0 <z_arm_configure_static_mpu_regions+0x28>)
    6f80:	9302      	str	r3, [sp, #8]
    6f82:	4b08      	ldr	r3, [pc, #32]	; (6fa4 <z_arm_configure_static_mpu_regions+0x2c>)
    6f84:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    6f86:	ab01      	add	r3, sp, #4
    6f88:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6f8a:	4a07      	ldr	r2, [pc, #28]	; (6fa8 <z_arm_configure_static_mpu_regions+0x30>)
    6f8c:	4b07      	ldr	r3, [pc, #28]	; (6fac <z_arm_configure_static_mpu_regions+0x34>)
    6f8e:	2101      	movs	r1, #1
    6f90:	4668      	mov	r0, sp
    6f92:	f000 f8af 	bl	70f4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    6f96:	b005      	add	sp, #20
    6f98:	f85d fb04 	ldr.w	pc, [sp], #4
    6f9c:	20000000 	.word	0x20000000
    6fa0:	00000000 	.word	0x00000000
    6fa4:	060b0000 	.word	0x060b0000
    6fa8:	20000000 	.word	0x20000000
    6fac:	20040000 	.word	0x20040000

00006fb0 <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    6fb0:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 7070 <mpu_configure_regions+0xc0>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    6fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fb6:	4606      	mov	r6, r0
    6fb8:	460f      	mov	r7, r1
	int i;
	int reg_index = start_reg_index;
    6fba:	4610      	mov	r0, r2

	for (i = 0; i < regions_num; i++) {
    6fbc:	2100      	movs	r1, #0
    6fbe:	42b9      	cmp	r1, r7
    6fc0:	da1b      	bge.n	6ffa <mpu_configure_regions+0x4a>
		if (regions[i]->size == 0U) {
    6fc2:	f856 e021 	ldr.w	lr, [r6, r1, lsl #2]
    6fc6:	f8de 4004 	ldr.w	r4, [lr, #4]
    6fca:	2c00      	cmp	r4, #0
    6fcc:	d046      	beq.n	705c <mpu_configure_regions+0xac>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    6fce:	b1ab      	cbz	r3, 6ffc <mpu_configure_regions+0x4c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    6fd0:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    6fd2:	422c      	tst	r4, r5
    6fd4:	d105      	bne.n	6fe2 <mpu_configure_regions+0x32>
		&&
    6fd6:	2c1f      	cmp	r4, #31
    6fd8:	d903      	bls.n	6fe2 <mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0U);
    6fda:	f8de 2000 	ldr.w	r2, [lr]
		&&
    6fde:	4215      	tst	r5, r2
    6fe0:	d00c      	beq.n	6ffc <mpu_configure_regions+0x4c>
    6fe2:	4a1f      	ldr	r2, [pc, #124]	; (7060 <mpu_configure_regions+0xb0>)
    6fe4:	4b1f      	ldr	r3, [pc, #124]	; (7064 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    6fe6:	4820      	ldr	r0, [pc, #128]	; (7068 <mpu_configure_regions+0xb8>)
    6fe8:	1ad2      	subs	r2, r2, r3
    6fea:	08d2      	lsrs	r2, r2, #3
    6fec:	0192      	lsls	r2, r2, #6
    6fee:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6ff2:	f019 fdf2 	bl	20bda <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    6ff6:	f06f 0015 	mvn.w	r0, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    6ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    6ffc:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    6ffe:	b2c5      	uxtb	r5, r0
	region_conf.base = new_region->start;
    7000:	f8de 2000 	ldr.w	r2, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    7004:	f8de 0008 	ldr.w	r0, [lr, #8]
    7008:	d916      	bls.n	7038 <mpu_configure_regions+0x88>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    700a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    700e:	d815      	bhi.n	703c <mpu_configure_regions+0x8c>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7010:	3c01      	subs	r4, #1
    7012:	fab4 f484 	clz	r4, r4
    7016:	f1c4 041f 	rsb	r4, r4, #31
    701a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    701c:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    701e:	ea44 0400 	orr.w	r4, r4, r0
    7022:	d90d      	bls.n	7040 <mpu_configure_regions+0x90>
    7024:	4a0e      	ldr	r2, [pc, #56]	; (7060 <mpu_configure_regions+0xb0>)
    7026:	4b0f      	ldr	r3, [pc, #60]	; (7064 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7028:	4810      	ldr	r0, [pc, #64]	; (706c <mpu_configure_regions+0xbc>)
    702a:	1ad2      	subs	r2, r2, r3
    702c:	08d2      	lsrs	r2, r2, #3
    702e:	0192      	lsls	r2, r2, #6
    7030:	f042 0201 	orr.w	r2, r2, #1
    7034:	4629      	mov	r1, r5
    7036:	e7dc      	b.n	6ff2 <mpu_configure_regions+0x42>
		return REGION_32B;
    7038:	2408      	movs	r4, #8
    703a:	e7ef      	b.n	701c <mpu_configure_regions+0x6c>
		return REGION_4G;
    703c:	243e      	movs	r4, #62	; 0x3e
    703e:	e7ed      	b.n	701c <mpu_configure_regions+0x6c>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7040:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    7044:	432a      	orrs	r2, r5
    7046:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    704a:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    704e:	f8cc 5008 	str.w	r5, [ip, #8]
		reg_index++;
    7052:	1c68      	adds	r0, r5, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7054:	f8cc 200c 	str.w	r2, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7058:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    705c:	3101      	adds	r1, #1
    705e:	e7ae      	b.n	6fbe <mpu_configure_regions+0xe>
    7060:	0002666c 	.word	0x0002666c
    7064:	00026544 	.word	0x00026544
    7068:	00028e7d 	.word	0x00028e7d
    706c:	00028ea0 	.word	0x00028ea0
    7070:	e000ed90 	.word	0xe000ed90

00007074 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    7074:	4b03      	ldr	r3, [pc, #12]	; (7084 <arm_core_mpu_enable+0x10>)
    7076:	2205      	movs	r2, #5
    7078:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    707a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    707e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    7082:	4770      	bx	lr
    7084:	e000ed90 	.word	0xe000ed90

00007088 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    7088:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    708c:	4b01      	ldr	r3, [pc, #4]	; (7094 <arm_core_mpu_disable+0xc>)
    708e:	2200      	movs	r2, #0
    7090:	605a      	str	r2, [r3, #4]
}
    7092:	4770      	bx	lr
    7094:	e000ed90 	.word	0xe000ed90

00007098 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    7098:	4913      	ldr	r1, [pc, #76]	; (70e8 <arm_mpu_init+0x50>)
    709a:	6808      	ldr	r0, [r1, #0]
    709c:	2808      	cmp	r0, #8
{
    709e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    70a0:	d81e      	bhi.n	70e0 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    70a2:	f7ff fff1 	bl	7088 <arm_core_mpu_disable>
	MPU->RNR = index;
    70a6:	4c11      	ldr	r4, [pc, #68]	; (70ec <arm_mpu_init+0x54>)
    70a8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    70aa:	2200      	movs	r2, #0
    70ac:	4290      	cmp	r0, r2
    70ae:	f101 010c 	add.w	r1, r1, #12
    70b2:	d105      	bne.n	70c0 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    70b4:	4b0e      	ldr	r3, [pc, #56]	; (70f0 <arm_mpu_init+0x58>)
    70b6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    70b8:	f7ff ffdc 	bl	7074 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    70bc:	2000      	movs	r0, #0
}
    70be:	bd10      	pop	{r4, pc}
    70c0:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    70c2:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    70c6:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    70ca:	4313      	orrs	r3, r2
    70cc:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    70d0:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    70d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    70d6:	f043 0301 	orr.w	r3, r3, #1
    70da:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    70dc:	3201      	adds	r2, #1
    70de:	e7e5      	b.n	70ac <arm_mpu_init+0x14>
		return -1;
    70e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    70e4:	e7eb      	b.n	70be <arm_mpu_init+0x26>
    70e6:	bf00      	nop
    70e8:	0002695c 	.word	0x0002695c
    70ec:	e000ed90 	.word	0xe000ed90
    70f0:	20005235 	.word	0x20005235

000070f4 <arm_core_mpu_configure_static_mpu_regions>:
{
    70f4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    70f6:	4c03      	ldr	r4, [pc, #12]	; (7104 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    70f8:	2301      	movs	r3, #1
    70fa:	7822      	ldrb	r2, [r4, #0]
    70fc:	f7ff ff58 	bl	6fb0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    7100:	7020      	strb	r0, [r4, #0]
}
    7102:	bd10      	pop	{r4, pc}
    7104:	20005235 	.word	0x20005235

00007108 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    7108:	4b01      	ldr	r3, [pc, #4]	; (7110 <__stdout_hook_install+0x8>)
    710a:	6018      	str	r0, [r3, #0]
}
    710c:	4770      	bx	lr
    710e:	bf00      	nop
    7110:	20000178 	.word	0x20000178

00007114 <nordicsemi_nrf52_init>:
    7114:	f04f 0320 	mov.w	r3, #32
    7118:	f3ef 8211 	mrs	r2, BASEPRI
    711c:	f383 8811 	msr	BASEPRI, r3
    7120:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    7124:	4906      	ldr	r1, [pc, #24]	; (7140 <nordicsemi_nrf52_init+0x2c>)
    7126:	2301      	movs	r3, #1
    7128:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    712c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7130:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    7134:	f382 8811 	msr	BASEPRI, r2
    7138:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    713c:	2000      	movs	r0, #0
    713e:	4770      	bx	lr
    7140:	4001e000 	.word	0x4001e000

00007144 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    7144:	b120      	cbz	r0, 7150 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    7146:	4b03      	ldr	r3, [pc, #12]	; (7154 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    7148:	0180      	lsls	r0, r0, #6
    714a:	f043 0301 	orr.w	r3, r3, #1
    714e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    7150:	4770      	bx	lr
    7152:	bf00      	nop
    7154:	000267b0 	.word	0x000267b0

00007158 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    7158:	4b0e      	ldr	r3, [pc, #56]	; (7194 <bt_hex_real+0x3c>)
    715a:	2940      	cmp	r1, #64	; 0x40
{
    715c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    715e:	bf28      	it	cs
    7160:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    7162:	4c0d      	ldr	r4, [pc, #52]	; (7198 <bt_hex_real+0x40>)
    7164:	1846      	adds	r6, r0, r1
    7166:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    7168:	42b0      	cmp	r0, r6
    716a:	f103 0302 	add.w	r3, r3, #2
    716e:	d104      	bne.n	717a <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    7170:	2300      	movs	r3, #0
    7172:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    7176:	4807      	ldr	r0, [pc, #28]	; (7194 <bt_hex_real+0x3c>)
    7178:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    717a:	7802      	ldrb	r2, [r0, #0]
    717c:	0912      	lsrs	r2, r2, #4
    717e:	5ca2      	ldrb	r2, [r4, r2]
    7180:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    7184:	f810 2b01 	ldrb.w	r2, [r0], #1
    7188:	f002 020f 	and.w	r2, r2, #15
    718c:	5ca2      	ldrb	r2, [r4, r2]
    718e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    7192:	e7e9      	b.n	7168 <bt_hex_real+0x10>
    7194:	20005236 	.word	0x20005236
    7198:	00028ed9 	.word	0x00028ed9

0000719c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    719c:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    719e:	7803      	ldrb	r3, [r0, #0]
    71a0:	b08b      	sub	sp, #44	; 0x2c
    71a2:	4604      	mov	r4, r0
    71a4:	ad07      	add	r5, sp, #28
    71a6:	2b03      	cmp	r3, #3
    71a8:	d821      	bhi.n	71ee <bt_addr_le_str_real+0x52>
    71aa:	e8df f003 	tbb	[pc, r3]
    71ae:	1a02      	.short	0x1a02
    71b0:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    71b2:	4912      	ldr	r1, [pc, #72]	; (71fc <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    71b4:	4628      	mov	r0, r5
    71b6:	f01b fa73 	bl	226a0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    71ba:	7863      	ldrb	r3, [r4, #1]
    71bc:	9304      	str	r3, [sp, #16]
    71be:	78a3      	ldrb	r3, [r4, #2]
    71c0:	9303      	str	r3, [sp, #12]
    71c2:	78e3      	ldrb	r3, [r4, #3]
    71c4:	9302      	str	r3, [sp, #8]
    71c6:	7923      	ldrb	r3, [r4, #4]
    71c8:	9301      	str	r3, [sp, #4]
    71ca:	7963      	ldrb	r3, [r4, #5]
    71cc:	9300      	str	r3, [sp, #0]
    71ce:	4a0c      	ldr	r2, [pc, #48]	; (7200 <bt_addr_le_str_real+0x64>)
    71d0:	79a3      	ldrb	r3, [r4, #6]
    71d2:	9505      	str	r5, [sp, #20]
    71d4:	211e      	movs	r1, #30
    71d6:	480b      	ldr	r0, [pc, #44]	; (7204 <bt_addr_le_str_real+0x68>)
    71d8:	f019 fa3f 	bl	2065a <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    71dc:	4809      	ldr	r0, [pc, #36]	; (7204 <bt_addr_le_str_real+0x68>)
    71de:	b00b      	add	sp, #44	; 0x2c
    71e0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    71e2:	4909      	ldr	r1, [pc, #36]	; (7208 <bt_addr_le_str_real+0x6c>)
    71e4:	e7e6      	b.n	71b4 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    71e6:	4909      	ldr	r1, [pc, #36]	; (720c <bt_addr_le_str_real+0x70>)
    71e8:	e7e4      	b.n	71b4 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    71ea:	4909      	ldr	r1, [pc, #36]	; (7210 <bt_addr_le_str_real+0x74>)
    71ec:	e7e2      	b.n	71b4 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    71ee:	4a09      	ldr	r2, [pc, #36]	; (7214 <bt_addr_le_str_real+0x78>)
    71f0:	210a      	movs	r1, #10
    71f2:	4628      	mov	r0, r5
    71f4:	f019 fa31 	bl	2065a <snprintk>
		break;
    71f8:	e7df      	b.n	71ba <bt_addr_le_str_real+0x1e>
    71fa:	bf00      	nop
    71fc:	0002856e 	.word	0x0002856e
    7200:	00028590 	.word	0x00028590
    7204:	200052b7 	.word	0x200052b7
    7208:	00028575 	.word	0x00028575
    720c:	0002857c 	.word	0x0002857c
    7210:	00028586 	.word	0x00028586
    7214:	0002a546 	.word	0x0002a546

00007218 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    7218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    721c:	4b64      	ldr	r3, [pc, #400]	; (73b0 <ecc_thread+0x198>)
    721e:	4d65      	ldr	r5, [pc, #404]	; (73b4 <ecc_thread+0x19c>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7220:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 73d4 <ecc_thread+0x1bc>
	return z_impl_k_sem_take(sem, timeout);
    7224:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 73d8 <ecc_thread+0x1c0>
    7228:	1aed      	subs	r5, r5, r3
    722a:	08ed      	lsrs	r5, r5, #3
    722c:	4647      	mov	r7, r8
    722e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7236:	4648      	mov	r0, r9
    7238:	f018 fd36 	bl	1fca8 <z_impl_k_sem_take>
    723c:	f3bf 8f5b 	dmb	ish
    7240:	f8d8 4000 	ldr.w	r4, [r8]
    7244:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    7248:	f014 0401 	ands.w	r4, r4, #1
    724c:	d05a      	beq.n	7304 <ecc_thread+0xec>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    724e:	f8df a17c 	ldr.w	sl, [pc, #380]	; 73cc <ecc_thread+0x1b4>
    7252:	4c59      	ldr	r4, [pc, #356]	; (73b8 <ecc_thread+0x1a0>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    7254:	4e59      	ldr	r6, [pc, #356]	; (73bc <ecc_thread+0x1a4>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    7256:	485a      	ldr	r0, [pc, #360]	; (73c0 <ecc_thread+0x1a8>)
    7258:	4652      	mov	r2, sl
    725a:	4621      	mov	r1, r4
    725c:	f01a f962 	bl	21524 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    7260:	bbe8      	cbnz	r0, 72de <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    7262:	01a9      	lsls	r1, r5, #6
    7264:	4857      	ldr	r0, [pc, #348]	; (73c4 <ecc_thread+0x1ac>)
    7266:	f041 0101 	orr.w	r1, r1, #1
    726a:	f019 fca9 	bl	20bc0 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    726e:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    727a:	2001      	movs	r0, #1
    727c:	f002 fd46 	bl	9d0c <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7280:	f100 0608 	add.w	r6, r0, #8
    7284:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7286:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7288:	4630      	mov	r0, r6
    728a:	f01e f8af 	bl	253ec <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    728e:	233e      	movs	r3, #62	; 0x3e
    7290:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    7292:	2342      	movs	r3, #66	; 0x42
    7294:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    7296:	2101      	movs	r1, #1
    7298:	4630      	mov	r0, r6
    729a:	f01e f8a7 	bl	253ec <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    729e:	2308      	movs	r3, #8
    72a0:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    72a2:	2141      	movs	r1, #65	; 0x41
    72a4:	4630      	mov	r0, r6
    72a6:	f01e f8a1 	bl	253ec <net_buf_simple_add>
    72aa:	4606      	mov	r6, r0
	evt->status = status;
    72ac:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    72b0:	f1ba 0f00 	cmp.w	sl, #0
    72b4:	d01d      	beq.n	72f2 <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
    72b6:	2240      	movs	r2, #64	; 0x40
    72b8:	2100      	movs	r1, #0
    72ba:	f01b fa5c 	bl	22776 <memset>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    72be:	f3bf 8f5b 	dmb	ish
    72c2:	e857 3f00 	ldrex	r3, [r7]
    72c6:	f023 0301 	bic.w	r3, r3, #1
    72ca:	e847 3200 	strex	r2, r3, [r7]
    72ce:	2a00      	cmp	r2, #0
    72d0:	d1f7      	bne.n	72c2 <ecc_thread+0xaa>
    72d2:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    72d6:	4620      	mov	r0, r4
	bt_recv(buf);
    72d8:	f001 feda 	bl	9090 <bt_recv>
	while (true) {
    72dc:	e7a7      	b.n	722e <ecc_thread+0x16>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    72de:	2220      	movs	r2, #32
    72e0:	4631      	mov	r1, r6
    72e2:	4620      	mov	r0, r4
    72e4:	f01b fa0c 	bl	22700 <memcmp>
    72e8:	2800      	cmp	r0, #0
    72ea:	d0b4      	beq.n	7256 <ecc_thread+0x3e>
	return 0;
    72ec:	f04f 0a00 	mov.w	sl, #0
    72f0:	e7bf      	b.n	7272 <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
    72f2:	4933      	ldr	r1, [pc, #204]	; (73c0 <ecc_thread+0x1a8>)
    72f4:	f01b fad2 	bl	2289c <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
    72f8:	4933      	ldr	r1, [pc, #204]	; (73c8 <ecc_thread+0x1b0>)
    72fa:	f106 0021 	add.w	r0, r6, #33	; 0x21
    72fe:	f01b facd 	bl	2289c <sys_memcpy_swap.constprop.0>
    7302:	e7dc      	b.n	72be <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7304:	f3bf 8f5b 	dmb	ish
    7308:	f8d8 3000 	ldr.w	r3, [r8]
    730c:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    7310:	079b      	lsls	r3, r3, #30
    7312:	d58c      	bpl.n	722e <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
    7314:	492d      	ldr	r1, [pc, #180]	; (73cc <ecc_thread+0x1b4>)
    7316:	482a      	ldr	r0, [pc, #168]	; (73c0 <ecc_thread+0x1a8>)
    7318:	f01a ffd3 	bl	222c2 <uECC_valid_public_key>
	if (ret < 0) {
    731c:	1e01      	subs	r1, r0, #0
    731e:	da38      	bge.n	7392 <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    7320:	01aa      	lsls	r2, r5, #6
    7322:	482b      	ldr	r0, [pc, #172]	; (73d0 <ecc_thread+0x1b8>)
    7324:	f042 0201 	orr.w	r2, r2, #1
    7328:	f019 fc57 	bl	20bda <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    732c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7334:	2001      	movs	r0, #1
    7336:	f002 fce9 	bl	9d0c <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    733a:	f100 0a08 	add.w	sl, r0, #8
    733e:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7340:	4606      	mov	r6, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7342:	4650      	mov	r0, sl
    7344:	f01e f852 	bl	253ec <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    7348:	233e      	movs	r3, #62	; 0x3e
    734a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    734c:	2322      	movs	r3, #34	; 0x22
    734e:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    7350:	2101      	movs	r1, #1
    7352:	4650      	mov	r0, sl
    7354:	f01e f84a 	bl	253ec <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    7358:	2309      	movs	r3, #9
    735a:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    735c:	2121      	movs	r1, #33	; 0x21
    735e:	4650      	mov	r0, sl
    7360:	f01e f844 	bl	253ec <net_buf_simple_add>
    7364:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    7366:	3001      	adds	r0, #1
    7368:	b9e4      	cbnz	r4, 73a4 <ecc_thread+0x18c>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    736a:	221f      	movs	r2, #31
    736c:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0, sizeof(evt->dhkey));
    736e:	4621      	mov	r1, r4
    7370:	2220      	movs	r2, #32
    7372:	f01b fa00 	bl	22776 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7376:	f3bf 8f5b 	dmb	ish
    737a:	e857 3f00 	ldrex	r3, [r7]
    737e:	f023 0302 	bic.w	r3, r3, #2
    7382:	e847 3200 	strex	r2, r3, [r7]
    7386:	2a00      	cmp	r2, #0
    7388:	d1f7      	bne.n	737a <ecc_thread+0x162>
    738a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    738e:	4630      	mov	r0, r6
    7390:	e7a2      	b.n	72d8 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
    7392:	4a0b      	ldr	r2, [pc, #44]	; (73c0 <ecc_thread+0x1a8>)
    7394:	4b0d      	ldr	r3, [pc, #52]	; (73cc <ecc_thread+0x1b4>)
    7396:	f1a2 0120 	sub.w	r1, r2, #32
    739a:	4610      	mov	r0, r2
    739c:	f01a f911 	bl	215c2 <uECC_shared_secret>
    73a0:	4604      	mov	r4, r0
    73a2:	e7c3      	b.n	732c <ecc_thread+0x114>
		evt->status = 0U;
    73a4:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    73a6:	4906      	ldr	r1, [pc, #24]	; (73c0 <ecc_thread+0x1a8>)
		evt->status = 0U;
    73a8:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    73aa:	f01b fa77 	bl	2289c <sys_memcpy_swap.constprop.0>
    73ae:	e7e2      	b.n	7376 <ecc_thread+0x15e>
    73b0:	00026544 	.word	0x00026544
    73b4:	00026634 	.word	0x00026634
    73b8:	200052d5 	.word	0x200052d5
    73bc:	00026a2c 	.word	0x00026a2c
    73c0:	200052f5 	.word	0x200052f5
    73c4:	00028ef1 	.word	0x00028ef1
    73c8:	20005315 	.word	0x20005315
    73cc:	0002697c 	.word	0x0002697c
    73d0:	00028f1a 	.word	0x00028f1a
    73d4:	200018d8 	.word	0x200018d8
    73d8:	20000814 	.word	0x20000814

000073dc <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    73dc:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    73de:	7d05      	ldrb	r5, [r0, #20]
    73e0:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    73e2:	b9ad      	cbnz	r5, 7410 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    73e4:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    73e6:	881a      	ldrh	r2, [r3, #0]
    73e8:	f242 0125 	movw	r1, #8229	; 0x2025
    73ec:	428a      	cmp	r2, r1
    73ee:	d017      	beq.n	7420 <bt_hci_ecc_send+0x44>
    73f0:	f242 0126 	movw	r1, #8230	; 0x2026
    73f4:	428a      	cmp	r2, r1
    73f6:	d03c      	beq.n	7472 <bt_hci_ecc_send+0x96>
    73f8:	f242 0101 	movw	r1, #8193	; 0x2001
    73fc:	428a      	cmp	r2, r1
    73fe:	d107      	bne.n	7410 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    7400:	78da      	ldrb	r2, [r3, #3]
    7402:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7406:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    7408:	791a      	ldrb	r2, [r3, #4]
    740a:	f022 0201 	bic.w	r2, r2, #1
    740e:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    7410:	4b31      	ldr	r3, [pc, #196]	; (74d8 <bt_hci_ecc_send+0xfc>)
    7412:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    7416:	4620      	mov	r0, r4
    7418:	691b      	ldr	r3, [r3, #16]
}
    741a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    741e:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    7420:	2103      	movs	r1, #3
    7422:	3008      	adds	r0, #8
    7424:	f01e f817 	bl	25456 <net_buf_simple_pull>
	net_buf_unref(buf);
    7428:	4620      	mov	r0, r4
    742a:	f016 fdc5 	bl	1dfb8 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    742e:	f3bf 8f5b 	dmb	ish
    7432:	4b2a      	ldr	r3, [pc, #168]	; (74dc <bt_hci_ecc_send+0x100>)
    7434:	681a      	ldr	r2, [r3, #0]
    7436:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    743a:	0790      	lsls	r0, r2, #30
    743c:	d507      	bpl.n	744e <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    743e:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    7440:	4629      	mov	r1, r5
    7442:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    7446:	f01b fa05 	bl	22854 <send_cmd_status>
}
    744a:	2000      	movs	r0, #0
    744c:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    744e:	f3bf 8f5b 	dmb	ish
    7452:	e853 2f00 	ldrex	r2, [r3]
    7456:	f042 0101 	orr.w	r1, r2, #1
    745a:	e843 1000 	strex	r0, r1, [r3]
    745e:	2800      	cmp	r0, #0
    7460:	d1f7      	bne.n	7452 <bt_hci_ecc_send+0x76>
    7462:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    7466:	07d1      	lsls	r1, r2, #31
    7468:	d4e9      	bmi.n	743e <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    746a:	481d      	ldr	r0, [pc, #116]	; (74e0 <bt_hci_ecc_send+0x104>)
    746c:	f018 fbf6 	bl	1fc5c <z_impl_k_sem_give>
}
    7470:	e7e6      	b.n	7440 <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
    7472:	2103      	movs	r1, #3
    7474:	3008      	adds	r0, #8
    7476:	f01d ffee 	bl	25456 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    747a:	f3bf 8f5b 	dmb	ish
    747e:	4b17      	ldr	r3, [pc, #92]	; (74dc <bt_hci_ecc_send+0x100>)
    7480:	681a      	ldr	r2, [r3, #0]
    7482:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    7486:	07d2      	lsls	r2, r2, #31
    7488:	d507      	bpl.n	749a <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    748a:	250c      	movs	r5, #12
	net_buf_unref(buf);
    748c:	4620      	mov	r0, r4
    748e:	f016 fd93 	bl	1dfb8 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    7492:	4629      	mov	r1, r5
    7494:	f242 0026 	movw	r0, #8230	; 0x2026
    7498:	e7d5      	b.n	7446 <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    749a:	89a2      	ldrh	r2, [r4, #12]
    749c:	2a3f      	cmp	r2, #63	; 0x3f
    749e:	d919      	bls.n	74d4 <bt_hci_ecc_send+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    74a0:	f3bf 8f5b 	dmb	ish
    74a4:	e853 2f00 	ldrex	r2, [r3]
    74a8:	f042 0102 	orr.w	r1, r2, #2
    74ac:	e843 1000 	strex	r0, r1, [r3]
    74b0:	2800      	cmp	r0, #0
    74b2:	d1f7      	bne.n	74a4 <bt_hci_ecc_send+0xc8>
    74b4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    74b8:	0793      	lsls	r3, r2, #30
    74ba:	d4e6      	bmi.n	748a <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    74bc:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
    74be:	4809      	ldr	r0, [pc, #36]	; (74e4 <bt_hci_ecc_send+0x108>)
    74c0:	f01b f9ec 	bl	2289c <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
    74c4:	4808      	ldr	r0, [pc, #32]	; (74e8 <bt_hci_ecc_send+0x10c>)
    74c6:	3120      	adds	r1, #32
    74c8:	f01b f9e8 	bl	2289c <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
    74cc:	4804      	ldr	r0, [pc, #16]	; (74e0 <bt_hci_ecc_send+0x104>)
    74ce:	f018 fbc5 	bl	1fc5c <z_impl_k_sem_give>
}
    74d2:	e7db      	b.n	748c <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    74d4:	2512      	movs	r5, #18
    74d6:	e7d9      	b.n	748c <bt_hci_ecc_send+0xb0>
    74d8:	20000000 	.word	0x20000000
    74dc:	200018d8 	.word	0x200018d8
    74e0:	20000814 	.word	0x20000814
    74e4:	200052f5 	.word	0x200052f5
    74e8:	20005315 	.word	0x20005315

000074ec <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    74ec:	b510      	push	{r4, lr}
    74ee:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    74f0:	4c0c      	ldr	r4, [pc, #48]	; (7524 <bt_hci_ecc_init+0x38>)
    74f2:	490d      	ldr	r1, [pc, #52]	; (7528 <bt_hci_ecc_init+0x3c>)
    74f4:	2200      	movs	r2, #0
    74f6:	2300      	movs	r3, #0
    74f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    74fc:	2300      	movs	r3, #0
    74fe:	220a      	movs	r2, #10
    7500:	e9cd 2303 	strd	r2, r3, [sp, #12]
    7504:	e9cd 3301 	strd	r3, r3, [sp, #4]
    7508:	9300      	str	r3, [sp, #0]
    750a:	f240 424c 	movw	r2, #1100	; 0x44c
    750e:	4b07      	ldr	r3, [pc, #28]	; (752c <bt_hci_ecc_init+0x40>)
    7510:	4620      	mov	r0, r4
    7512:	f018 fc31 	bl	1fd78 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    7516:	4906      	ldr	r1, [pc, #24]	; (7530 <bt_hci_ecc_init+0x44>)
    7518:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_THREAD_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    751a:	b008      	add	sp, #32
    751c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7520:	f01e bca9 	b.w	25e76 <z_impl_k_thread_name_set>
    7524:	20000aa0 	.word	0x20000aa0
    7528:	20005ae0 	.word	0x20005ae0
    752c:	00007219 	.word	0x00007219
    7530:	00028f3b 	.word	0x00028f3b

00007534 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    7534:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    7536:	7802      	ldrb	r2, [r0, #0]
    7538:	2a01      	cmp	r2, #1
{
    753a:	4604      	mov	r4, r0
    753c:	460b      	mov	r3, r1
	switch (src->type) {
    753e:	d016      	beq.n	756e <uuid_to_uuid128+0x3a>
    7540:	2a02      	cmp	r2, #2
    7542:	d02c      	beq.n	759e <uuid_to_uuid128+0x6a>
    7544:	b98a      	cbnz	r2, 756a <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    7546:	4a19      	ldr	r2, [pc, #100]	; (75ac <uuid_to_uuid128+0x78>)
    7548:	460d      	mov	r5, r1
    754a:	f102 0710 	add.w	r7, r2, #16
    754e:	6810      	ldr	r0, [r2, #0]
    7550:	6851      	ldr	r1, [r2, #4]
    7552:	462e      	mov	r6, r5
    7554:	c603      	stmia	r6!, {r0, r1}
    7556:	3208      	adds	r2, #8
    7558:	42ba      	cmp	r2, r7
    755a:	4635      	mov	r5, r6
    755c:	d1f7      	bne.n	754e <uuid_to_uuid128+0x1a>
    755e:	7812      	ldrb	r2, [r2, #0]
    7560:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    7562:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    7564:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    7566:	0a12      	lsrs	r2, r2, #8
    7568:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    756a:	bcf0      	pop	{r4, r5, r6, r7}
    756c:	4770      	bx	lr
		*dst = uuid128_base;
    756e:	4a0f      	ldr	r2, [pc, #60]	; (75ac <uuid_to_uuid128+0x78>)
    7570:	460d      	mov	r5, r1
    7572:	f102 0710 	add.w	r7, r2, #16
    7576:	6810      	ldr	r0, [r2, #0]
    7578:	6851      	ldr	r1, [r2, #4]
    757a:	462e      	mov	r6, r5
    757c:	c603      	stmia	r6!, {r0, r1}
    757e:	3208      	adds	r2, #8
    7580:	42ba      	cmp	r2, r7
    7582:	4635      	mov	r5, r6
    7584:	d1f7      	bne.n	7576 <uuid_to_uuid128+0x42>
    7586:	7812      	ldrb	r2, [r2, #0]
    7588:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    758a:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    758c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    758e:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    7592:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    7594:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    7596:	0a12      	lsrs	r2, r2, #8
    7598:	7399      	strb	r1, [r3, #14]
    759a:	741a      	strb	r2, [r3, #16]
}
    759c:	e7e5      	b.n	756a <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    759e:	4601      	mov	r1, r0
}
    75a0:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    75a2:	2211      	movs	r2, #17
    75a4:	4618      	mov	r0, r3
    75a6:	f01b b8bb 	b.w	22720 <memcpy>
    75aa:	bf00      	nop
    75ac:	00028f4d 	.word	0x00028f4d

000075b0 <le_dhkey_complete>:
{
    75b0:	b510      	push	{r4, lr}
	if (dh_key_cb) {
    75b2:	4c06      	ldr	r4, [pc, #24]	; (75cc <le_dhkey_complete+0x1c>)
    75b4:	6822      	ldr	r2, [r4, #0]
    75b6:	b132      	cbz	r2, 75c6 <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    75b8:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    75ba:	7803      	ldrb	r3, [r0, #0]
    75bc:	b923      	cbnz	r3, 75c8 <le_dhkey_complete+0x18>
    75be:	3001      	adds	r0, #1
    75c0:	4790      	blx	r2
		dh_key_cb = NULL;
    75c2:	2300      	movs	r3, #0
    75c4:	6023      	str	r3, [r4, #0]
}
    75c6:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    75c8:	2000      	movs	r0, #0
    75ca:	e7f9      	b.n	75c0 <le_dhkey_complete+0x10>
    75cc:	200018f4 	.word	0x200018f4

000075d0 <ver_str>:
{
    75d0:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    75d2:	4d0b      	ldr	r5, [pc, #44]	; (7600 <ver_str+0x30>)
{
    75d4:	4606      	mov	r6, r0
	const char * const str[] = {
    75d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    75d8:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    75da:	466c      	mov	r4, sp
    75dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    75de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    75e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    75e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    75e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    75ea:	2e0b      	cmp	r6, #11
		return str[ver];
    75ec:	bf9b      	ittet	ls
    75ee:	ab0c      	addls	r3, sp, #48	; 0x30
    75f0:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    75f4:	4803      	ldrhi	r0, [pc, #12]	; (7604 <ver_str+0x34>)
		return str[ver];
    75f6:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    75fa:	b00c      	add	sp, #48	; 0x30
    75fc:	bd70      	pop	{r4, r5, r6, pc}
    75fe:	bf00      	nop
    7600:	00026714 	.word	0x00026714
    7604:	00029049 	.word	0x00029049

00007608 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    7608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    760a:	4f0a      	ldr	r7, [pc, #40]	; (7634 <id_find+0x2c>)
{
    760c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    760e:	2500      	movs	r5, #0
    7610:	79fb      	ldrb	r3, [r7, #7]
    7612:	b2ec      	uxtb	r4, r5
    7614:	42a3      	cmp	r3, r4
    7616:	d802      	bhi.n	761e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    7618:	f06f 0401 	mvn.w	r4, #1
    761c:	e008      	b.n	7630 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    761e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    7622:	4439      	add	r1, r7
    7624:	4630      	mov	r0, r6
    7626:	f01b f9a5 	bl	22974 <bt_addr_le_cmp>
    762a:	3501      	adds	r5, #1
    762c:	2800      	cmp	r0, #0
    762e:	d1ef      	bne.n	7610 <id_find+0x8>
}
    7630:	4620      	mov	r0, r4
    7632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7634:	20000000 	.word	0x20000000

00007638 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    7638:	6843      	ldr	r3, [r0, #4]
{
    763a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    763c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    763e:	0558      	lsls	r0, r3, #21
    7640:	d408      	bmi.n	7654 <valid_adv_param+0x1c>
		return false;
	}

	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7642:	6922      	ldr	r2, [r4, #16]
    7644:	b10a      	cbz	r2, 764a <valid_adv_param+0x12>
    7646:	07d9      	lsls	r1, r3, #31
    7648:	d504      	bpl.n	7654 <valid_adv_param+0x1c>
	if (param->id >= bt_dev.id_count ||
    764a:	4d16      	ldr	r5, [pc, #88]	; (76a4 <valid_adv_param+0x6c>)
    764c:	7820      	ldrb	r0, [r4, #0]
    764e:	79eb      	ldrb	r3, [r5, #7]
    7650:	4283      	cmp	r3, r0
    7652:	d802      	bhi.n	765a <valid_adv_param+0x22>
			return false;
    7654:	2000      	movs	r0, #0
		return false;
	}

	return valid_adv_ext_param(param);
}
    7656:	b003      	add	sp, #12
    7658:	bd30      	pop	{r4, r5, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    765a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    765e:	2300      	movs	r3, #0
    7660:	4669      	mov	r1, sp
    7662:	4428      	add	r0, r5
    7664:	9300      	str	r3, [sp, #0]
    7666:	f8cd 3003 	str.w	r3, [sp, #3]
    766a:	f01b f983 	bl	22974 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    766e:	2800      	cmp	r0, #0
    7670:	d0f0      	beq.n	7654 <valid_adv_param+0x1c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7672:	6863      	ldr	r3, [r4, #4]
    7674:	07da      	lsls	r2, r3, #31
    7676:	d406      	bmi.n	7686 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    7678:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    767c:	2a08      	cmp	r2, #8
    767e:	d802      	bhi.n	7686 <valid_adv_param+0x4e>
    7680:	68a2      	ldr	r2, [r4, #8]
    7682:	2a9f      	cmp	r2, #159	; 0x9f
    7684:	d9e6      	bls.n	7654 <valid_adv_param+0x1c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    7686:	06db      	lsls	r3, r3, #27
    7688:	d401      	bmi.n	768e <valid_adv_param+0x56>
    768a:	6923      	ldr	r3, [r4, #16]
    768c:	b943      	cbnz	r3, 76a0 <valid_adv_param+0x68>
		if (param->interval_min > param->interval_max ||
    768e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    7692:	429a      	cmp	r2, r3
    7694:	d8de      	bhi.n	7654 <valid_adv_param+0x1c>
    7696:	2a1f      	cmp	r2, #31
    7698:	d9dc      	bls.n	7654 <valid_adv_param+0x1c>
		    param->interval_min < 0x0020 ||
    769a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    769e:	d8d9      	bhi.n	7654 <valid_adv_param+0x1c>
	return true;
    76a0:	2001      	movs	r0, #1
    76a2:	e7d8      	b.n	7656 <valid_adv_param+0x1e>
    76a4:	20000000 	.word	0x20000000

000076a8 <hci_data_buf_overflow>:
    76a8:	4905      	ldr	r1, [pc, #20]	; (76c0 <hci_data_buf_overflow+0x18>)
    76aa:	4a06      	ldr	r2, [pc, #24]	; (76c4 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    76ac:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    76ae:	4806      	ldr	r0, [pc, #24]	; (76c8 <hci_data_buf_overflow+0x20>)
    76b0:	1a52      	subs	r2, r2, r1
    76b2:	08d2      	lsrs	r2, r2, #3
    76b4:	0192      	lsls	r2, r2, #6
    76b6:	7819      	ldrb	r1, [r3, #0]
    76b8:	f042 0202 	orr.w	r2, r2, #2
    76bc:	f019 ba8d 	b.w	20bda <log_1>
    76c0:	00026544 	.word	0x00026544
    76c4:	0002662c 	.word	0x0002662c
    76c8:	00029051 	.word	0x00029051

000076cc <le_pkey_complete>:
{
    76cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    76ce:	6886      	ldr	r6, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    76d0:	480f      	ldr	r0, [pc, #60]	; (7710 <le_pkey_complete+0x44>)
    76d2:	f06f 0110 	mvn.w	r1, #16
    76d6:	f01b f950 	bl	2297a <atomic_and>
	if (!evt->status) {
    76da:	7833      	ldrb	r3, [r6, #0]
    76dc:	b943      	cbnz	r3, 76f0 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    76de:	1c71      	adds	r1, r6, #1
    76e0:	480c      	ldr	r0, [pc, #48]	; (7714 <le_pkey_complete+0x48>)
    76e2:	2240      	movs	r2, #64	; 0x40
    76e4:	f01b f81c 	bl	22720 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    76e8:	4809      	ldr	r0, [pc, #36]	; (7710 <le_pkey_complete+0x44>)
    76ea:	2108      	movs	r1, #8
    76ec:	f01b f954 	bl	22998 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    76f0:	4d09      	ldr	r5, [pc, #36]	; (7718 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    76f2:	4f08      	ldr	r7, [pc, #32]	; (7714 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    76f4:	682c      	ldr	r4, [r5, #0]
    76f6:	b90c      	cbnz	r4, 76fc <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    76f8:	602c      	str	r4, [r5, #0]
}
    76fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    76fc:	7832      	ldrb	r2, [r6, #0]
    76fe:	6823      	ldr	r3, [r4, #0]
    7700:	2a00      	cmp	r2, #0
    7702:	bf0c      	ite	eq
    7704:	4638      	moveq	r0, r7
    7706:	2000      	movne	r0, #0
    7708:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    770a:	6864      	ldr	r4, [r4, #4]
    770c:	e7f3      	b.n	76f6 <le_pkey_complete+0x2a>
    770e:	bf00      	nop
    7710:	20000098 	.word	0x20000098
    7714:	20005335 	.word	0x20005335
    7718:	200018f8 	.word	0x200018f8

0000771c <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    771c:	6883      	ldr	r3, [r0, #8]
{
    771e:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7720:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    7722:	4620      	mov	r0, r4
    7724:	f003 f810 	bl	a748 <bt_conn_lookup_handle>
	if (!conn) {
    7728:	b960      	cbnz	r0, 7744 <le_data_len_change+0x28>
    772a:	4a08      	ldr	r2, [pc, #32]	; (774c <le_data_len_change+0x30>)
    772c:	4b08      	ldr	r3, [pc, #32]	; (7750 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    772e:	4809      	ldr	r0, [pc, #36]	; (7754 <le_data_len_change+0x38>)
    7730:	1ad2      	subs	r2, r2, r3
    7732:	08d2      	lsrs	r2, r2, #3
    7734:	0192      	lsls	r2, r2, #6
    7736:	4621      	mov	r1, r4
    7738:	f042 0201 	orr.w	r2, r2, #1
}
    773c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7740:	f019 ba4b 	b.w	20bda <log_1>
}
    7744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    7748:	f01b bbb6 	b.w	22eb8 <bt_conn_unref>
    774c:	0002662c 	.word	0x0002662c
    7750:	00026544 	.word	0x00026544
    7754:	00029079 	.word	0x00029079

00007758 <le_conn_update_complete>:
{
    7758:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    775a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    775c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    7760:	4630      	mov	r0, r6
    7762:	f002 fff1 	bl	a748 <bt_conn_lookup_handle>
	if (!conn) {
    7766:	4604      	mov	r4, r0
    7768:	b960      	cbnz	r0, 7784 <le_conn_update_complete+0x2c>
    776a:	4a1e      	ldr	r2, [pc, #120]	; (77e4 <le_conn_update_complete+0x8c>)
    776c:	4b1e      	ldr	r3, [pc, #120]	; (77e8 <le_conn_update_complete+0x90>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    776e:	481f      	ldr	r0, [pc, #124]	; (77ec <le_conn_update_complete+0x94>)
    7770:	1ad2      	subs	r2, r2, r3
    7772:	08d2      	lsrs	r2, r2, #3
    7774:	0192      	lsls	r2, r2, #6
    7776:	f042 0201 	orr.w	r2, r2, #1
    777a:	4631      	mov	r1, r6
    777c:	f019 fa2d 	bl	20bda <log_1>
}
    7780:	b002      	add	sp, #8
    7782:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    7784:	782b      	ldrb	r3, [r5, #0]
    7786:	b9bb      	cbnz	r3, 77b8 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    7788:	792a      	ldrb	r2, [r5, #4]
    778a:	78eb      	ldrb	r3, [r5, #3]
    778c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7790:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    7794:	79aa      	ldrb	r2, [r5, #6]
    7796:	796b      	ldrb	r3, [r5, #5]
    7798:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    779c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    77a0:	79eb      	ldrb	r3, [r5, #7]
    77a2:	7a2a      	ldrb	r2, [r5, #8]
    77a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    77a8:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    77ac:	f002 fc84 	bl	a0b8 <notify_le_param_updated>
	bt_conn_unref(conn);
    77b0:	4620      	mov	r0, r4
    77b2:	f01b fb81 	bl	22eb8 <bt_conn_unref>
    77b6:	e7e3      	b.n	7780 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    77b8:	2b1a      	cmp	r3, #26
    77ba:	d1f9      	bne.n	77b0 <le_conn_update_complete+0x58>
    77bc:	78c3      	ldrb	r3, [r0, #3]
    77be:	2b01      	cmp	r3, #1
    77c0:	d1f6      	bne.n	77b0 <le_conn_update_complete+0x58>
		   !atomic_test_and_set_bit(conn->flags,
    77c2:	210a      	movs	r1, #10
    77c4:	3004      	adds	r0, #4
    77c6:	f01b f907 	bl	229d8 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    77ca:	2800      	cmp	r0, #0
    77cc:	d1f0      	bne.n	77b0 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    77ce:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    77d2:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    77d4:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    77d6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    77da:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    77dc:	4620      	mov	r0, r4
    77de:	f01b fea9 	bl	23534 <bt_l2cap_update_conn_param>
    77e2:	e7e5      	b.n	77b0 <le_conn_update_complete+0x58>
    77e4:	0002662c 	.word	0x0002662c
    77e8:	00026544 	.word	0x00026544
    77ec:	00029079 	.word	0x00029079

000077f0 <hci_vendor_event>:
{
    77f0:	b510      	push	{r4, lr}
    77f2:	4a0a      	ldr	r2, [pc, #40]	; (781c <hci_vendor_event+0x2c>)
    77f4:	4c0a      	ldr	r4, [pc, #40]	; (7820 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    77f6:	8981      	ldrh	r1, [r0, #12]
    77f8:	6880      	ldr	r0, [r0, #8]
    77fa:	1aa4      	subs	r4, r4, r2
    77fc:	f7ff fcac 	bl	7158 <bt_hex_real>
    7800:	f7fd ff38 	bl	5674 <log_strdup>
    7804:	08e4      	lsrs	r4, r4, #3
    7806:	01a4      	lsls	r4, r4, #6
    7808:	f044 0402 	orr.w	r4, r4, #2
    780c:	4601      	mov	r1, r0
    780e:	4622      	mov	r2, r4
    7810:	4804      	ldr	r0, [pc, #16]	; (7824 <hci_vendor_event+0x34>)
}
    7812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    7816:	f019 b9e0 	b.w	20bda <log_1>
    781a:	bf00      	nop
    781c:	00026544 	.word	0x00026544
    7820:	0002662c 	.word	0x0002662c
    7824:	0002909d 	.word	0x0002909d

00007828 <update_sec_level>:
{
    7828:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
    782a:	7ac3      	ldrb	r3, [r0, #11]
{
    782c:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    782e:	b913      	cbnz	r3, 7836 <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_L1;
    7830:	2301      	movs	r3, #1
    7832:	7243      	strb	r3, [r0, #9]
}
    7834:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    7836:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    783a:	b1fb      	cbz	r3, 787c <update_sec_level+0x54>
    783c:	7b5a      	ldrb	r2, [r3, #13]
    783e:	07d1      	lsls	r1, r2, #31
    7840:	d51c      	bpl.n	787c <update_sec_level+0x54>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    7842:	06d2      	lsls	r2, r2, #27
    7844:	d518      	bpl.n	7878 <update_sec_level+0x50>
    7846:	7b1b      	ldrb	r3, [r3, #12]
    7848:	2b10      	cmp	r3, #16
    784a:	d115      	bne.n	7878 <update_sec_level+0x50>
			conn->sec_level = BT_SECURITY_L4;
    784c:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    784e:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    7850:	7aa2      	ldrb	r2, [r4, #10]
    7852:	7a63      	ldrb	r3, [r4, #9]
    7854:	429a      	cmp	r2, r3
    7856:	d9ed      	bls.n	7834 <update_sec_level+0xc>
    7858:	4b09      	ldr	r3, [pc, #36]	; (7880 <update_sec_level+0x58>)
    785a:	490a      	ldr	r1, [pc, #40]	; (7884 <update_sec_level+0x5c>)
		BT_ERR("Failed to set required security level");
    785c:	480a      	ldr	r0, [pc, #40]	; (7888 <update_sec_level+0x60>)
    785e:	1ac9      	subs	r1, r1, r3
    7860:	08c9      	lsrs	r1, r1, #3
    7862:	0189      	lsls	r1, r1, #6
    7864:	f041 0101 	orr.w	r1, r1, #1
    7868:	f019 f9aa 	bl	20bc0 <log_0>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    786c:	4620      	mov	r0, r4
    786e:	2105      	movs	r1, #5
}
    7870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    7874:	f003 b8d6 	b.w	aa24 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    7878:	2303      	movs	r3, #3
    787a:	e7e8      	b.n	784e <update_sec_level+0x26>
		conn->sec_level = BT_SECURITY_L2;
    787c:	2302      	movs	r3, #2
    787e:	e7e6      	b.n	784e <update_sec_level+0x26>
    7880:	00026544 	.word	0x00026544
    7884:	0002662c 	.word	0x0002662c
    7888:	000290c1 	.word	0x000290c1

0000788c <hci_encrypt_key_refresh_complete>:
{
    788c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    788e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    7890:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    7894:	4630      	mov	r0, r6
    7896:	f002 ff57 	bl	a748 <bt_conn_lookup_handle>
	if (!conn) {
    789a:	4604      	mov	r4, r0
    789c:	b960      	cbnz	r0, 78b8 <hci_encrypt_key_refresh_complete+0x2c>
    789e:	4a18      	ldr	r2, [pc, #96]	; (7900 <hci_encrypt_key_refresh_complete+0x74>)
    78a0:	4b18      	ldr	r3, [pc, #96]	; (7904 <hci_encrypt_key_refresh_complete+0x78>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    78a2:	4819      	ldr	r0, [pc, #100]	; (7908 <hci_encrypt_key_refresh_complete+0x7c>)
    78a4:	1ad2      	subs	r2, r2, r3
    78a6:	08d2      	lsrs	r2, r2, #3
    78a8:	0192      	lsls	r2, r2, #6
    78aa:	4631      	mov	r1, r6
    78ac:	f042 0201 	orr.w	r2, r2, #1
}
    78b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    78b4:	f019 b991 	b.w	20bda <log_1>
	if (evt->status) {
    78b8:	7829      	ldrb	r1, [r5, #0]
    78ba:	b189      	cbz	r1, 78e0 <hci_encrypt_key_refresh_complete+0x54>
	conn->required_sec_level = conn->sec_level;
    78bc:	7a43      	ldrb	r3, [r0, #9]
    78be:	7283      	strb	r3, [r0, #10]
		bt_l2cap_encrypt_change(conn, evt->status);
    78c0:	f01b fdd0 	bl	23464 <bt_l2cap_encrypt_change>
		bt_conn_security_changed(conn, security_err_get(evt->status));
    78c4:	782b      	ldrb	r3, [r5, #0]
	switch (hci_err) {
    78c6:	2b29      	cmp	r3, #41	; 0x29
    78c8:	bf9a      	itte	ls
    78ca:	4a10      	ldrls	r2, [pc, #64]	; (790c <hci_encrypt_key_refresh_complete+0x80>)
    78cc:	5cd1      	ldrbls	r1, [r2, r3]
		bt_conn_security_changed(conn, security_err_get(evt->status));
    78ce:	2108      	movhi	r1, #8
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    78d0:	4620      	mov	r0, r4
    78d2:	f002 fc5f 	bl	a194 <bt_conn_security_changed>
	bt_conn_unref(conn);
    78d6:	4620      	mov	r0, r4
}
    78d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    78dc:	f01b baec 	b.w	22eb8 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    78e0:	7883      	ldrb	r3, [r0, #2]
    78e2:	2b01      	cmp	r3, #1
    78e4:	d104      	bne.n	78f0 <hci_encrypt_key_refresh_complete+0x64>
		bt_smp_update_keys(conn);
    78e6:	f008 fe55 	bl	10594 <bt_smp_update_keys>
		update_sec_level(conn);
    78ea:	4620      	mov	r0, r4
    78ec:	f7ff ff9c 	bl	7828 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    78f0:	7a63      	ldrb	r3, [r4, #9]
    78f2:	72a3      	strb	r3, [r4, #10]
	bt_l2cap_encrypt_change(conn, evt->status);
    78f4:	7829      	ldrb	r1, [r5, #0]
    78f6:	4620      	mov	r0, r4
    78f8:	f01b fdb4 	bl	23464 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    78fc:	2100      	movs	r1, #0
    78fe:	e7e7      	b.n	78d0 <hci_encrypt_key_refresh_complete+0x44>
    7900:	0002662c 	.word	0x0002662c
    7904:	00026544 	.word	0x00026544
    7908:	000290e7 	.word	0x000290e7
    790c:	00029920 	.word	0x00029920

00007910 <hci_encrypt_change>:
{
    7910:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    7912:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7914:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    7918:	4630      	mov	r0, r6
    791a:	f002 ff15 	bl	a748 <bt_conn_lookup_handle>
	if (!conn) {
    791e:	4604      	mov	r4, r0
    7920:	b960      	cbnz	r0, 793c <hci_encrypt_change+0x2c>
    7922:	4a1a      	ldr	r2, [pc, #104]	; (798c <hci_encrypt_change+0x7c>)
    7924:	4b1a      	ldr	r3, [pc, #104]	; (7990 <hci_encrypt_change+0x80>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    7926:	481b      	ldr	r0, [pc, #108]	; (7994 <hci_encrypt_change+0x84>)
    7928:	1ad2      	subs	r2, r2, r3
    792a:	08d2      	lsrs	r2, r2, #3
    792c:	0192      	lsls	r2, r2, #6
    792e:	4631      	mov	r1, r6
    7930:	f042 0201 	orr.w	r2, r2, #1
}
    7934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    7938:	f019 b94f 	b.w	20bda <log_1>
	if (evt->status) {
    793c:	7829      	ldrb	r1, [r5, #0]
    793e:	b189      	cbz	r1, 7964 <hci_encrypt_change+0x54>
	conn->required_sec_level = conn->sec_level;
    7940:	7a43      	ldrb	r3, [r0, #9]
    7942:	7283      	strb	r3, [r0, #10]
		bt_l2cap_encrypt_change(conn, evt->status);
    7944:	f01b fd8e 	bl	23464 <bt_l2cap_encrypt_change>
		bt_conn_security_changed(conn, security_err_get(evt->status));
    7948:	782b      	ldrb	r3, [r5, #0]
	switch (hci_err) {
    794a:	2b29      	cmp	r3, #41	; 0x29
    794c:	bf9a      	itte	ls
    794e:	4a12      	ldrls	r2, [pc, #72]	; (7998 <hci_encrypt_change+0x88>)
    7950:	5cd1      	ldrbls	r1, [r2, r3]
		bt_conn_security_changed(conn, security_err_get(evt->status));
    7952:	2108      	movhi	r1, #8
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    7954:	4620      	mov	r0, r4
    7956:	f002 fc1d 	bl	a194 <bt_conn_security_changed>
	bt_conn_unref(conn);
    795a:	4620      	mov	r0, r4
}
    795c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    7960:	f01b baaa 	b.w	22eb8 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    7964:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    7966:	78eb      	ldrb	r3, [r5, #3]
    7968:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    796a:	2a01      	cmp	r2, #1
    796c:	d105      	bne.n	797a <hci_encrypt_change+0x6a>
		if (conn->encrypt) {
    796e:	b10b      	cbz	r3, 7974 <hci_encrypt_change+0x64>
			bt_smp_update_keys(conn);
    7970:	f008 fe10 	bl	10594 <bt_smp_update_keys>
		update_sec_level(conn);
    7974:	4620      	mov	r0, r4
    7976:	f7ff ff57 	bl	7828 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    797a:	7a63      	ldrb	r3, [r4, #9]
    797c:	72a3      	strb	r3, [r4, #10]
	bt_l2cap_encrypt_change(conn, evt->status);
    797e:	7829      	ldrb	r1, [r5, #0]
    7980:	4620      	mov	r0, r4
    7982:	f01b fd6f 	bl	23464 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    7986:	2100      	movs	r1, #0
    7988:	e7e4      	b.n	7954 <hci_encrypt_change+0x44>
    798a:	bf00      	nop
    798c:	0002662c 	.word	0x0002662c
    7990:	00026544 	.word	0x00026544
    7994:	000290e7 	.word	0x000290e7
    7998:	00029920 	.word	0x00029920

0000799c <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    799c:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    799e:	4c0c      	ldr	r4, [pc, #48]	; (79d0 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    79a0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    79a2:	2204      	movs	r2, #4
    79a4:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    79a8:	f002 ff52 	bl	a850 <bt_conn_lookup_state_le>
		if (!conn) {
    79ac:	b970      	cbnz	r0, 79cc <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    79ae:	4b09      	ldr	r3, [pc, #36]	; (79d4 <find_pending_connect.part.0+0x38>)
    79b0:	6818      	ldr	r0, [r3, #0]
    79b2:	889a      	ldrh	r2, [r3, #4]
    79b4:	9000      	str	r0, [sp, #0]
    79b6:	799b      	ldrb	r3, [r3, #6]
    79b8:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    79bc:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
						       BT_ADDR_LE_NONE,
    79c0:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    79c4:	2203      	movs	r2, #3
    79c6:	4669      	mov	r1, sp
    79c8:	f002 ff42 	bl	a850 <bt_conn_lookup_state_le>
}
    79cc:	b002      	add	sp, #8
    79ce:	bd10      	pop	{r4, pc}
    79d0:	20000000 	.word	0x20000000
    79d4:	00026744 	.word	0x00026744

000079d8 <handle_event>:
{
    79d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    79da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    79de:	4605      	mov	r5, r0
    79e0:	4608      	mov	r0, r1
		if (handler->event != event) {
    79e2:	7811      	ldrb	r1, [r2, #0]
    79e4:	42a9      	cmp	r1, r5
    79e6:	d01a      	beq.n	7a1e <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    79e8:	3208      	adds	r2, #8
    79ea:	429a      	cmp	r2, r3
    79ec:	d1f9      	bne.n	79e2 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    79ee:	8986      	ldrh	r6, [r0, #12]
    79f0:	4b16      	ldr	r3, [pc, #88]	; (7a4c <handle_event+0x74>)
    79f2:	4c17      	ldr	r4, [pc, #92]	; (7a50 <handle_event+0x78>)
    79f4:	6880      	ldr	r0, [r0, #8]
    79f6:	4631      	mov	r1, r6
    79f8:	1ae4      	subs	r4, r4, r3
    79fa:	f7ff fbad 	bl	7158 <bt_hex_real>
    79fe:	f7fd fe39 	bl	5674 <log_strdup>
    7a02:	08e4      	lsrs	r4, r4, #3
    7a04:	01a4      	lsls	r4, r4, #6
    7a06:	f044 0402 	orr.w	r4, r4, #2
    7a0a:	4603      	mov	r3, r0
    7a0c:	f8ad 4000 	strh.w	r4, [sp]
    7a10:	4810      	ldr	r0, [pc, #64]	; (7a54 <handle_event+0x7c>)
    7a12:	4632      	mov	r2, r6
    7a14:	4629      	mov	r1, r5
    7a16:	f019 f90d 	bl	20c34 <log_3>
}
    7a1a:	b002      	add	sp, #8
    7a1c:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    7a1e:	8981      	ldrh	r1, [r0, #12]
    7a20:	7853      	ldrb	r3, [r2, #1]
    7a22:	428b      	cmp	r3, r1
    7a24:	d90d      	bls.n	7a42 <handle_event+0x6a>
    7a26:	4a09      	ldr	r2, [pc, #36]	; (7a4c <handle_event+0x74>)
    7a28:	4b09      	ldr	r3, [pc, #36]	; (7a50 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7a2a:	480b      	ldr	r0, [pc, #44]	; (7a58 <handle_event+0x80>)
    7a2c:	1a9b      	subs	r3, r3, r2
    7a2e:	08db      	lsrs	r3, r3, #3
    7a30:	019b      	lsls	r3, r3, #6
    7a32:	f043 0301 	orr.w	r3, r3, #1
    7a36:	462a      	mov	r2, r5
}
    7a38:	b002      	add	sp, #8
    7a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7a3e:	f019 b8e0 	b.w	20c02 <log_2>
		handler->handler(buf);
    7a42:	6853      	ldr	r3, [r2, #4]
}
    7a44:	b002      	add	sp, #8
    7a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    7a4a:	4718      	bx	r3
    7a4c:	00026544 	.word	0x00026544
    7a50:	0002662c 	.word	0x0002662c
    7a54:	0002912f 	.word	0x0002912f
    7a58:	0002910d 	.word	0x0002910d

00007a5c <hci_le_meta_event>:
{
    7a5c:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7a5e:	2101      	movs	r1, #1
{
    7a60:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7a62:	3008      	adds	r0, #8
    7a64:	f01d fcff 	bl	25466 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7a68:	4621      	mov	r1, r4
    7a6a:	4a03      	ldr	r2, [pc, #12]	; (7a78 <hci_le_meta_event+0x1c>)
    7a6c:	7800      	ldrb	r0, [r0, #0]
}
    7a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7a72:	230b      	movs	r3, #11
    7a74:	f7ff bfb0 	b.w	79d8 <handle_event>
    7a78:	00026a4c 	.word	0x00026a4c

00007a7c <hci_cmd_done>:
{
    7a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7a80:	4607      	mov	r7, r0
    7a82:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7a84:	7990      	ldrb	r0, [r2, #6]
    7a86:	4e34      	ldr	r6, [pc, #208]	; (7b58 <hci_cmd_done+0xdc>)
{
    7a88:	4688      	mov	r8, r1
    7a8a:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7a8c:	f016 f9d8 	bl	1de40 <net_buf_pool_get>
    7a90:	4286      	cmp	r6, r0
    7a92:	d016      	beq.n	7ac2 <hci_cmd_done+0x46>
    7a94:	4b31      	ldr	r3, [pc, #196]	; (7b5c <hci_cmd_done+0xe0>)
    7a96:	4d32      	ldr	r5, [pc, #200]	; (7b60 <hci_cmd_done+0xe4>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    7a98:	79a0      	ldrb	r0, [r4, #6]
    7a9a:	9700      	str	r7, [sp, #0]
    7a9c:	1aed      	subs	r5, r5, r3
    7a9e:	08ed      	lsrs	r5, r5, #3
    7aa0:	9001      	str	r0, [sp, #4]
    7aa2:	f016 f9cd 	bl	1de40 <net_buf_pool_get>
    7aa6:	01ad      	lsls	r5, r5, #6
    7aa8:	f045 0502 	orr.w	r5, r5, #2
    7aac:	e9cd 0602 	strd	r0, r6, [sp, #8]
    7ab0:	462b      	mov	r3, r5
    7ab2:	482c      	ldr	r0, [pc, #176]	; (7b64 <hci_cmd_done+0xe8>)
    7ab4:	2204      	movs	r2, #4
    7ab6:	4669      	mov	r1, sp
    7ab8:	f019 f8d8 	bl	20c6c <log_n>
}
    7abc:	b005      	add	sp, #20
    7abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    7ac2:	4620      	mov	r0, r4
    7ac4:	f016 f9c4 	bl	1de50 <net_buf_id>
    7ac8:	4d27      	ldr	r5, [pc, #156]	; (7b68 <hci_cmd_done+0xec>)
    7aca:	f04f 090c 	mov.w	r9, #12
    7ace:	fb09 5300 	mla	r3, r9, r0, r5
    7ad2:	885b      	ldrh	r3, [r3, #2]
    7ad4:	42bb      	cmp	r3, r7
    7ad6:	d011      	beq.n	7afc <hci_cmd_done+0x80>
    7ad8:	4b20      	ldr	r3, [pc, #128]	; (7b5c <hci_cmd_done+0xe0>)
    7ada:	4e21      	ldr	r6, [pc, #132]	; (7b60 <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    7adc:	4620      	mov	r0, r4
    7ade:	1af6      	subs	r6, r6, r3
    7ae0:	f016 f9b6 	bl	1de50 <net_buf_id>
    7ae4:	08f6      	lsrs	r6, r6, #3
    7ae6:	fb09 5000 	mla	r0, r9, r0, r5
    7aea:	01b6      	lsls	r6, r6, #6
    7aec:	f046 0602 	orr.w	r6, r6, #2
    7af0:	8842      	ldrh	r2, [r0, #2]
    7af2:	481e      	ldr	r0, [pc, #120]	; (7b6c <hci_cmd_done+0xf0>)
    7af4:	4633      	mov	r3, r6
    7af6:	4639      	mov	r1, r7
    7af8:	f019 f883 	bl	20c02 <log_2>
	if (cmd(buf)->state && !status) {
    7afc:	4620      	mov	r0, r4
    7afe:	f016 f9a7 	bl	1de50 <net_buf_id>
    7b02:	260c      	movs	r6, #12
    7b04:	fb06 5000 	mla	r0, r6, r0, r5
    7b08:	6843      	ldr	r3, [r0, #4]
    7b0a:	b16b      	cbz	r3, 7b28 <hci_cmd_done+0xac>
    7b0c:	f1b8 0f00 	cmp.w	r8, #0
    7b10:	d10a      	bne.n	7b28 <hci_cmd_done+0xac>
		struct cmd_state_set *update = cmd(buf)->state;
    7b12:	4620      	mov	r0, r4
    7b14:	f016 f99c 	bl	1de50 <net_buf_id>
    7b18:	fb06 5000 	mla	r0, r6, r0, r5
    7b1c:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    7b1e:	e9d3 0100 	ldrd	r0, r1, [r3]
    7b22:	7a1a      	ldrb	r2, [r3, #8]
    7b24:	f01a ff47 	bl	229b6 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    7b28:	4620      	mov	r0, r4
    7b2a:	f016 f991 	bl	1de50 <net_buf_id>
    7b2e:	260c      	movs	r6, #12
    7b30:	fb06 5000 	mla	r0, r6, r0, r5
    7b34:	6883      	ldr	r3, [r0, #8]
    7b36:	2b00      	cmp	r3, #0
    7b38:	d0c0      	beq.n	7abc <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    7b3a:	4620      	mov	r0, r4
    7b3c:	f016 f988 	bl	1de50 <net_buf_id>
    7b40:	4370      	muls	r0, r6
    7b42:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    7b46:	4620      	mov	r0, r4
    7b48:	f016 f982 	bl	1de50 <net_buf_id>
    7b4c:	fb06 5500 	mla	r5, r6, r0, r5
    7b50:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    7b52:	f018 f883 	bl	1fc5c <z_impl_k_sem_give>
}
    7b56:	e7b1      	b.n	7abc <hci_cmd_done+0x40>
    7b58:	20000944 	.word	0x20000944
    7b5c:	00026544 	.word	0x00026544
    7b60:	0002662c 	.word	0x0002662c
    7b64:	00029151 	.word	0x00029151
    7b68:	200018dc 	.word	0x200018dc
    7b6c:	00029186 	.word	0x00029186

00007b70 <hci_tx_thread>:
{
    7b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b74:	4d51      	ldr	r5, [pc, #324]	; (7cbc <hci_tx_thread+0x14c>)
    7b76:	4b52      	ldr	r3, [pc, #328]	; (7cc0 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    7b78:	f8df 914c 	ldr.w	r9, [pc, #332]	; 7cc8 <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
    7b7c:	f8df a174 	ldr.w	sl, [pc, #372]	; 7cf4 <hci_tx_thread+0x184>
    7b80:	1aed      	subs	r5, r5, r3
    7b82:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    7b84:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7b88:	484e      	ldr	r0, [pc, #312]	; (7cc4 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
    7b8a:	f36f 3310 	bfc	r3, #12, #5
    7b8e:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7b92:	f002 fc1f 	bl	a3d4 <bt_conn_prepare_events>
    7b96:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    7b98:	484b      	ldr	r0, [pc, #300]	; (7cc8 <hci_tx_thread+0x158>)
    7b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7ba2:	4639      	mov	r1, r7
    7ba4:	f018 fba8 	bl	202f8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    7ba8:	b160      	cbz	r0, 7bc4 <hci_tx_thread+0x54>
    7baa:	4948      	ldr	r1, [pc, #288]	; (7ccc <hci_tx_thread+0x15c>)
    7bac:	4848      	ldr	r0, [pc, #288]	; (7cd0 <hci_tx_thread+0x160>)
    7bae:	f241 43ed 	movw	r3, #5357	; 0x14ed
    7bb2:	4652      	mov	r2, sl
    7bb4:	f018 fd44 	bl	20640 <printk>
    7bb8:	4040      	eors	r0, r0
    7bba:	f380 8811 	msr	BASEPRI, r0
    7bbe:	f04f 0003 	mov.w	r0, #3
    7bc2:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    7bc4:	4e43      	ldr	r6, [pc, #268]	; (7cd4 <hci_tx_thread+0x164>)
{
    7bc6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 7cc8 <hci_tx_thread+0x158>
    7bca:	f106 0bd0 	add.w	fp, r6, #208	; 0xd0
	for (; count; ev++, count--) {
    7bce:	b917      	cbnz	r7, 7bd6 <hci_tx_thread+0x66>
	z_impl_k_yield();
    7bd0:	f017 ffd0 	bl	1fb74 <z_impl_k_yield>
	while (1) {
    7bd4:	e7d6      	b.n	7b84 <hci_tx_thread+0x14>
		switch (ev->state) {
    7bd6:	f8d8 100c 	ldr.w	r1, [r8, #12]
    7bda:	f3c1 3104 	ubfx	r1, r1, #12, #5
    7bde:	2901      	cmp	r1, #1
    7be0:	d959      	bls.n	7c96 <hci_tx_thread+0x126>
    7be2:	2904      	cmp	r1, #4
    7be4:	d163      	bne.n	7cae <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    7be6:	f898 300c 	ldrb.w	r3, [r8, #12]
    7bea:	2b00      	cmp	r3, #0
    7bec:	d157      	bne.n	7c9e <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    7bee:	483a      	ldr	r0, [pc, #232]	; (7cd8 <hci_tx_thread+0x168>)
    7bf0:	2200      	movs	r2, #0
    7bf2:	2300      	movs	r3, #0
    7bf4:	f01d fb97 	bl	25326 <net_buf_get>
	BT_ASSERT(buf);
    7bf8:	4604      	mov	r4, r0
    7bfa:	b960      	cbnz	r0, 7c16 <hci_tx_thread+0xa6>
    7bfc:	4937      	ldr	r1, [pc, #220]	; (7cdc <hci_tx_thread+0x16c>)
    7bfe:	4834      	ldr	r0, [pc, #208]	; (7cd0 <hci_tx_thread+0x160>)
    7c00:	f241 438f 	movw	r3, #5263	; 0x148f
    7c04:	4652      	mov	r2, sl
    7c06:	f018 fd1b 	bl	20640 <printk>
    7c0a:	4040      	eors	r0, r0
    7c0c:	f380 8811 	msr	BASEPRI, r0
    7c10:	f04f 0003 	mov.w	r0, #3
    7c14:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    7c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7c1e:	4658      	mov	r0, fp
    7c20:	f018 f842 	bl	1fca8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    7c24:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
    7c28:	b163      	cbz	r3, 7c44 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    7c2a:	01a9      	lsls	r1, r5, #6
    7c2c:	482c      	ldr	r0, [pc, #176]	; (7ce0 <hci_tx_thread+0x170>)
    7c2e:	f041 0101 	orr.w	r1, r1, #1
    7c32:	f018 ffc5 	bl	20bc0 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    7c36:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
    7c3a:	f016 f9bd 	bl	1dfb8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7c3e:	2300      	movs	r3, #0
    7c40:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
	bt_dev.sent_cmd = net_buf_ref(buf);
    7c44:	4620      	mov	r0, r4
    7c46:	f01d fb9f 	bl	25388 <net_buf_ref>
    7c4a:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
		return bt_hci_ecc_send(buf);
    7c4e:	4620      	mov	r0, r4
    7c50:	f7ff fbc4 	bl	73dc <bt_hci_ecc_send>
	if (err) {
    7c54:	4601      	mov	r1, r0
    7c56:	b1f0      	cbz	r0, 7c96 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    7c58:	01aa      	lsls	r2, r5, #6
    7c5a:	4822      	ldr	r0, [pc, #136]	; (7ce4 <hci_tx_thread+0x174>)
    7c5c:	f042 0201 	orr.w	r2, r2, #1
    7c60:	f018 ffbb 	bl	20bda <log_1>
	z_impl_k_sem_give(sem);
    7c64:	4820      	ldr	r0, [pc, #128]	; (7ce8 <hci_tx_thread+0x178>)
    7c66:	f017 fff9 	bl	1fc5c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    7c6a:	4620      	mov	r0, r4
    7c6c:	f016 f8f0 	bl	1de50 <net_buf_id>
    7c70:	4b1e      	ldr	r3, [pc, #120]	; (7cec <hci_tx_thread+0x17c>)
    7c72:	220c      	movs	r2, #12
    7c74:	fb02 3000 	mla	r0, r2, r0, r3
    7c78:	211f      	movs	r1, #31
    7c7a:	8840      	ldrh	r0, [r0, #2]
    7c7c:	4622      	mov	r2, r4
    7c7e:	f7ff fefd 	bl	7a7c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    7c82:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
    7c86:	f016 f997 	bl	1dfb8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7c8a:	2300      	movs	r3, #0
		net_buf_unref(buf);
    7c8c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    7c8e:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
		net_buf_unref(buf);
    7c92:	f016 f991 	bl	1dfb8 <net_buf_unref>
	for (; count; ev++, count--) {
    7c96:	f108 0814 	add.w	r8, r8, #20
    7c9a:	3f01      	subs	r7, #1
    7c9c:	e797      	b.n	7bce <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    7c9e:	2b01      	cmp	r3, #1
    7ca0:	d1f9      	bne.n	7c96 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    7ca2:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    7ca6:	3834      	subs	r0, #52	; 0x34
    7ca8:	f002 fff0 	bl	ac8c <bt_conn_process_tx>
    7cac:	e7f3      	b.n	7c96 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    7cae:	01aa      	lsls	r2, r5, #6
    7cb0:	480f      	ldr	r0, [pc, #60]	; (7cf0 <hci_tx_thread+0x180>)
    7cb2:	f042 0202 	orr.w	r2, r2, #2
    7cb6:	f018 ff90 	bl	20bda <log_1>
    7cba:	e7ec      	b.n	7c96 <hci_tx_thread+0x126>
    7cbc:	0002662c 	.word	0x0002662c
    7cc0:	00026544 	.word	0x00026544
    7cc4:	20000190 	.word	0x20000190
    7cc8:	2000017c 	.word	0x2000017c
    7ccc:	000291ed 	.word	0x000291ed
    7cd0:	000291f6 	.word	0x000291f6
    7cd4:	20000000 	.word	0x20000000
    7cd8:	200000ec 	.word	0x200000ec
    7cdc:	0002a68c 	.word	0x0002a68c
    7ce0:	00029213 	.word	0x00029213
    7ce4:	0002922e 	.word	0x0002922e
    7ce8:	200000d0 	.word	0x200000d0
    7cec:	200018dc 	.word	0x200018dc
    7cf0:	00029250 	.word	0x00029250
    7cf4:	000291b9 	.word	0x000291b9

00007cf8 <hci_num_completed_packets>:
{
    7cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7cfc:	4b46      	ldr	r3, [pc, #280]	; (7e18 <hci_num_completed_packets+0x120>)
    7cfe:	4d47      	ldr	r5, [pc, #284]	; (7e1c <hci_num_completed_packets+0x124>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    7d00:	f8d0 8008 	ldr.w	r8, [r0, #8]
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
		k_queue_append(&work_q->queue, work);
    7d04:	f8df a120 	ldr.w	sl, [pc, #288]	; 7e28 <hci_num_completed_packets+0x130>
    7d08:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    7d0a:	2600      	movs	r6, #0
    7d0c:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    7d0e:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    7d10:	f898 3000 	ldrb.w	r3, [r8]
    7d14:	429e      	cmp	r6, r3
    7d16:	db02      	blt.n	7d1e <hci_num_completed_packets+0x26>
}
    7d18:	b003      	add	sp, #12
    7d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    7d1e:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    7d22:	f8b3 1001 	ldrh.w	r1, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    7d26:	f8b3 7003 	ldrh.w	r7, [r3, #3]
	__asm__ volatile(
    7d2a:	f04f 0320 	mov.w	r3, #32
    7d2e:	f3ef 8b11 	mrs	fp, BASEPRI
    7d32:	f383 8811 	msr	BASEPRI, r3
    7d36:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    7d3a:	4608      	mov	r0, r1
    7d3c:	9101      	str	r1, [sp, #4]
    7d3e:	f002 fd03 	bl	a748 <bt_conn_lookup_handle>
		if (!conn) {
    7d42:	9901      	ldr	r1, [sp, #4]
    7d44:	4604      	mov	r4, r0
    7d46:	b958      	cbnz	r0, 7d60 <hci_num_completed_packets+0x68>
	__asm__ volatile(
    7d48:	f38b 8811 	msr	BASEPRI, fp
    7d4c:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
    7d50:	01aa      	lsls	r2, r5, #6
    7d52:	4833      	ldr	r0, [pc, #204]	; (7e20 <hci_num_completed_packets+0x128>)
    7d54:	f042 0201 	orr.w	r2, r2, #1
    7d58:	f018 ff3f 	bl	20bda <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    7d5c:	3601      	adds	r6, #1
    7d5e:	e7d7      	b.n	7d10 <hci_num_completed_packets+0x18>
    7d60:	f38b 8811 	msr	BASEPRI, fp
    7d64:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7d68:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    7d6c:	b357      	cbz	r7, 7dc4 <hci_num_completed_packets+0xcc>
	__asm__ volatile(
    7d6e:	f04f 0320 	mov.w	r3, #32
    7d72:	f3ef 8211 	mrs	r2, BASEPRI
    7d76:	f383 8811 	msr	BASEPRI, r3
    7d7a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    7d7e:	69e3      	ldr	r3, [r4, #28]
    7d80:	b16b      	cbz	r3, 7d9e <hci_num_completed_packets+0xa6>
				conn->pending_no_cb--;
    7d82:	3b01      	subs	r3, #1
    7d84:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    7d86:	f382 8811 	msr	BASEPRI, r2
    7d8a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    7d8e:	4620      	mov	r0, r4
    7d90:	f002 f98e 	bl	a0b0 <bt_conn_get_pkts>
    7d94:	3f01      	subs	r7, #1
    7d96:	f017 ff61 	bl	1fc5c <z_impl_k_sem_give>
    7d9a:	b2bf      	uxth	r7, r7
    7d9c:	e7e6      	b.n	7d6c <hci_num_completed_packets+0x74>
Z_GENLIST_IS_EMPTY(slist)
    7d9e:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
    7da0:	b12b      	cbz	r3, 7dae <hci_num_completed_packets+0xb6>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7da2:	69a1      	ldr	r1, [r4, #24]
    7da4:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    7da6:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7da8:	428b      	cmp	r3, r1
	list->tail = node;
    7daa:	bf08      	it	eq
    7dac:	61a0      	streq	r0, [r4, #24]
    7dae:	f382 8811 	msr	BASEPRI, r2
    7db2:	f3bf 8f6f 	isb	sy
			if (!node) {
    7db6:	b94b      	cbnz	r3, 7dcc <hci_num_completed_packets+0xd4>
				BT_ERR("packets count mismatch");
    7db8:	01a9      	lsls	r1, r5, #6
    7dba:	481a      	ldr	r0, [pc, #104]	; (7e24 <hci_num_completed_packets+0x12c>)
    7dbc:	f041 0101 	orr.w	r1, r1, #1
    7dc0:	f018 fefe 	bl	20bc0 <log_0>
		bt_conn_unref(conn);
    7dc4:	4620      	mov	r0, r4
    7dc6:	f01b f877 	bl	22eb8 <bt_conn_unref>
    7dca:	e7c7      	b.n	7d5c <hci_num_completed_packets+0x64>
	__asm__ volatile(
    7dcc:	f04f 0220 	mov.w	r2, #32
    7dd0:	f3ef 8111 	mrs	r1, BASEPRI
    7dd4:	f382 8811 	msr	BASEPRI, r2
    7dd8:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    7ddc:	68da      	ldr	r2, [r3, #12]
    7dde:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    7de0:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    7de4:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    7de6:	f8c3 900c 	str.w	r9, [r3, #12]
    7dea:	b98a      	cbnz	r2, 7e10 <hci_num_completed_packets+0x118>
	list->head = node;
    7dec:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    7df0:	f381 8811 	msr	BASEPRI, r1
    7df4:	f3bf 8f6f 	isb	sy
    7df8:	2100      	movs	r1, #0
    7dfa:	f104 0030 	add.w	r0, r4, #48	; 0x30
    7dfe:	f01a fdeb 	bl	229d8 <atomic_test_and_set_bit>
    7e02:	2800      	cmp	r0, #0
    7e04:	d1c3      	bne.n	7d8e <hci_num_completed_packets+0x96>
		k_queue_append(&work_q->queue, work);
    7e06:	4659      	mov	r1, fp
    7e08:	4650      	mov	r0, sl
    7e0a:	f01d fea9 	bl	25b60 <k_queue_append>
    7e0e:	e7be      	b.n	7d8e <hci_num_completed_packets+0x96>
	parent->next = child;
    7e10:	6013      	str	r3, [r2, #0]
	list->tail = node;
    7e12:	6263      	str	r3, [r4, #36]	; 0x24
}
    7e14:	e7ec      	b.n	7df0 <hci_num_completed_packets+0xf8>
    7e16:	bf00      	nop
    7e18:	00026544 	.word	0x00026544
    7e1c:	0002662c 	.word	0x0002662c
    7e20:	00029271 	.word	0x00029271
    7e24:	0002928d 	.word	0x0002928d
    7e28:	20001510 	.word	0x20001510

00007e2c <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    7e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7e2e:	4b28      	ldr	r3, [pc, #160]	; (7ed0 <le_adv_start_add_conn+0xa4>)
    7e30:	b085      	sub	sp, #20
    7e32:	4605      	mov	r5, r0
    7e34:	460f      	mov	r7, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
    7e36:	7801      	ldrb	r1, [r0, #0]
    7e38:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    7e3c:	f01a fd91 	bl	22962 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    7e40:	f010 0f40 	tst.w	r0, #64	; 0x40
    7e44:	461a      	mov	r2, r3
    7e46:	d008      	beq.n	7e5a <le_adv_start_add_conn+0x2e>
    7e48:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    7e4c:	f01a fd89 	bl	22962 <atomic_get>
    7e50:	05c0      	lsls	r0, r0, #23
    7e52:	d502      	bpl.n	7e5a <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    7e54:	7e1b      	ldrb	r3, [r3, #24]
    7e56:	428b      	cmp	r3, r1
    7e58:	d131      	bne.n	7ebe <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    7e5a:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    7e5c:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    7e5e:	f816 3b0b 	ldrb.w	r3, [r6], #11
    7e62:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    7e66:	4630      	mov	r0, r6
    7e68:	2300      	movs	r3, #0
    7e6a:	9300      	str	r3, [sp, #0]
    7e6c:	f8cd 3003 	str.w	r3, [sp, #3]
    7e70:	f01a fd80 	bl	22974 <bt_addr_le_cmp>
    7e74:	4604      	mov	r4, r0
    7e76:	7828      	ldrb	r0, [r5, #0]
    7e78:	b164      	cbz	r4, 7e94 <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    7e7a:	4631      	mov	r1, r6
    7e7c:	f002 fcc2 	bl	a804 <bt_conn_exists_le>
    7e80:	4604      	mov	r4, r0
    7e82:	b9f8      	cbnz	r0, 7ec4 <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    7e84:	7828      	ldrb	r0, [r5, #0]
    7e86:	4631      	mov	r1, r6
    7e88:	f002 fb10 	bl	a4ac <bt_conn_add_le>
	if (!conn) {
    7e8c:	4605      	mov	r5, r0
    7e8e:	b1e0      	cbz	r0, 7eca <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    7e90:	2104      	movs	r1, #4
    7e92:	e00e      	b.n	7eb2 <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    7e94:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    7e98:	9302      	str	r3, [sp, #8]
    7e9a:	a902      	add	r1, sp, #8
    7e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7ea0:	f8ad 300c 	strh.w	r3, [sp, #12]
    7ea4:	f88d 300e 	strb.w	r3, [sp, #14]
    7ea8:	f002 fb00 	bl	a4ac <bt_conn_add_le>
		if (!conn) {
    7eac:	4605      	mov	r5, r0
    7eae:	b160      	cbz	r0, 7eca <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    7eb0:	2103      	movs	r1, #3
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    7eb2:	f002 fb49 	bl	a548 <bt_conn_set_state>
	*out_conn = conn;
    7eb6:	603d      	str	r5, [r7, #0]
	return 0;
}
    7eb8:	4620      	mov	r0, r4
    7eba:	b005      	add	sp, #20
    7ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    7ebe:	f06f 0422 	mvn.w	r4, #34	; 0x22
    7ec2:	e7f9      	b.n	7eb8 <le_adv_start_add_conn+0x8c>
		return -EINVAL;
    7ec4:	f06f 0415 	mvn.w	r4, #21
    7ec8:	e7f6      	b.n	7eb8 <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
    7eca:	f06f 040b 	mvn.w	r4, #11
    7ece:	e7f3      	b.n	7eb8 <le_adv_start_add_conn+0x8c>
    7ed0:	20000000 	.word	0x20000000

00007ed4 <hci_cmd_status>:
{
    7ed4:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7ed6:	2104      	movs	r1, #4
{
    7ed8:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7eda:	3008      	adds	r0, #8
    7edc:	f01d fac3 	bl	25466 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    7ee0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    7ee2:	7801      	ldrb	r1, [r0, #0]
    7ee4:	8840      	ldrh	r0, [r0, #2]
    7ee6:	4622      	mov	r2, r4
    7ee8:	f7ff fdc8 	bl	7a7c <hci_cmd_done>
	if (ncmd) {
    7eec:	b125      	cbz	r5, 7ef8 <hci_cmd_status+0x24>
    7eee:	4803      	ldr	r0, [pc, #12]	; (7efc <hci_cmd_status+0x28>)
}
    7ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7ef4:	f017 beb2 	b.w	1fc5c <z_impl_k_sem_give>
    7ef8:	bd38      	pop	{r3, r4, r5, pc}
    7efa:	bf00      	nop
    7efc:	200000d0 	.word	0x200000d0

00007f00 <hci_cmd_complete>:
{
    7f00:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7f02:	2103      	movs	r1, #3
{
    7f04:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7f06:	3008      	adds	r0, #8
    7f08:	f01d faad 	bl	25466 <net_buf_simple_pull_mem>
	status = buf->data[0];
    7f0c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    7f0e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    7f10:	7819      	ldrb	r1, [r3, #0]
    7f12:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    7f16:	4622      	mov	r2, r4
    7f18:	f7ff fdb0 	bl	7a7c <hci_cmd_done>
	if (ncmd) {
    7f1c:	b125      	cbz	r5, 7f28 <hci_cmd_complete+0x28>
    7f1e:	4803      	ldr	r0, [pc, #12]	; (7f2c <hci_cmd_complete+0x2c>)
}
    7f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7f24:	f017 be9a 	b.w	1fc5c <z_impl_k_sem_give>
    7f28:	bd38      	pop	{r3, r4, r5, pc}
    7f2a:	bf00      	nop
    7f2c:	200000d0 	.word	0x200000d0

00007f30 <bt_hci_cmd_create>:
{
    7f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
    7f3c:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7f3e:	4816      	ldr	r0, [pc, #88]	; (7f98 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    7f40:	f8df 8058 	ldr.w	r8, [pc, #88]	; 7f9c <bt_hci_cmd_create+0x6c>
{
    7f44:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7f46:	f01d f9e9 	bl	2531c <net_buf_alloc_fixed>
    7f4a:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    7f4c:	f100 0b08 	add.w	fp, r0, #8
    7f50:	2100      	movs	r1, #0
	*(uint8_t *)net_buf_user_data(buf) = type;
    7f52:	2700      	movs	r7, #0
    7f54:	4658      	mov	r0, fp
    7f56:	f01d fa06 	bl	25366 <net_buf_simple_reserve>
    7f5a:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    7f5c:	4620      	mov	r0, r4
    7f5e:	f015 ff77 	bl	1de50 <net_buf_id>
    7f62:	f04f 0a0c 	mov.w	sl, #12
    7f66:	fb0a 8000 	mla	r0, sl, r0, r8
    7f6a:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    7f6c:	4620      	mov	r0, r4
    7f6e:	f015 ff6f 	bl	1de50 <net_buf_id>
    7f72:	fb0a 8000 	mla	r0, sl, r0, r8
    7f76:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    7f78:	4620      	mov	r0, r4
    7f7a:	f015 ff69 	bl	1de50 <net_buf_id>
    7f7e:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
    7f82:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    7f84:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    7f86:	4658      	mov	r0, fp
    7f88:	f01d fa30 	bl	253ec <net_buf_simple_add>
	hdr->param_len = param_len;
    7f8c:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    7f8e:	8005      	strh	r5, [r0, #0]
}
    7f90:	4620      	mov	r0, r4
    7f92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f96:	bf00      	nop
    7f98:	20000944 	.word	0x20000944
    7f9c:	200018dc 	.word	0x200018dc

00007fa0 <bt_hci_cmd_send>:
{
    7fa0:	b538      	push	{r3, r4, r5, lr}
    7fa2:	4605      	mov	r5, r0
	if (!buf) {
    7fa4:	460c      	mov	r4, r1
    7fa6:	b919      	cbnz	r1, 7fb0 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    7fa8:	f7ff ffc2 	bl	7f30 <bt_hci_cmd_create>
		if (!buf) {
    7fac:	4604      	mov	r4, r0
    7fae:	b1f0      	cbz	r0, 7fee <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    7fb0:	f640 4335 	movw	r3, #3125	; 0xc35
    7fb4:	429d      	cmp	r5, r3
    7fb6:	d114      	bne.n	7fe2 <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    7fb8:	4620      	mov	r0, r4
    7fba:	f7ff fa0f 	bl	73dc <bt_hci_ecc_send>
		if (err) {
    7fbe:	4605      	mov	r5, r0
    7fc0:	b168      	cbz	r0, 7fde <bt_hci_cmd_send+0x3e>
    7fc2:	4b0c      	ldr	r3, [pc, #48]	; (7ff4 <bt_hci_cmd_send+0x54>)
    7fc4:	4a0c      	ldr	r2, [pc, #48]	; (7ff8 <bt_hci_cmd_send+0x58>)
    7fc6:	1ad2      	subs	r2, r2, r3
    7fc8:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    7fca:	0192      	lsls	r2, r2, #6
    7fcc:	4601      	mov	r1, r0
    7fce:	f042 0201 	orr.w	r2, r2, #1
    7fd2:	480a      	ldr	r0, [pc, #40]	; (7ffc <bt_hci_cmd_send+0x5c>)
    7fd4:	f018 fe01 	bl	20bda <log_1>
			net_buf_unref(buf);
    7fd8:	4620      	mov	r0, r4
    7fda:	f015 ffed 	bl	1dfb8 <net_buf_unref>
}
    7fde:	4628      	mov	r0, r5
    7fe0:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    7fe2:	4807      	ldr	r0, [pc, #28]	; (8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>)
    7fe4:	4621      	mov	r1, r4
    7fe6:	f01d f9c2 	bl	2536e <net_buf_put>
	return 0;
    7fea:	2500      	movs	r5, #0
    7fec:	e7f7      	b.n	7fde <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    7fee:	f06f 0536 	mvn.w	r5, #54	; 0x36
    7ff2:	e7f4      	b.n	7fde <bt_hci_cmd_send+0x3e>
    7ff4:	00026544 	.word	0x00026544
    7ff8:	0002662c 	.word	0x0002662c
    7ffc:	0002922e 	.word	0x0002922e
    8000:	200000ec 	.word	0x200000ec

00008004 <le_ltk_request>:
{
    8004:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    8006:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8008:	882e      	ldrh	r6, [r5, #0]
    800a:	b2b7      	uxth	r7, r6
{
    800c:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    800e:	4638      	mov	r0, r7
    8010:	f002 fb9a 	bl	a748 <bt_conn_lookup_handle>
	if (!conn) {
    8014:	4604      	mov	r4, r0
    8016:	b960      	cbnz	r0, 8032 <le_ltk_request+0x2e>
    8018:	4a26      	ldr	r2, [pc, #152]	; (80b4 <le_ltk_request+0xb0>)
    801a:	4b27      	ldr	r3, [pc, #156]	; (80b8 <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    801c:	4827      	ldr	r0, [pc, #156]	; (80bc <le_ltk_request+0xb8>)
    801e:	1ad2      	subs	r2, r2, r3
    8020:	08d2      	lsrs	r2, r2, #3
    8022:	0192      	lsls	r2, r2, #6
    8024:	f042 0201 	orr.w	r2, r2, #1
    8028:	4639      	mov	r1, r7
    802a:	f018 fdd6 	bl	20bda <log_1>
}
    802e:	b007      	add	sp, #28
    8030:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    8032:	af02      	add	r7, sp, #8
    8034:	f8d5 2002 	ldr.w	r2, [r5, #2]
    8038:	f8d5 3006 	ldr.w	r3, [r5, #6]
    803c:	9701      	str	r7, [sp, #4]
    803e:	8969      	ldrh	r1, [r5, #10]
    8040:	9100      	str	r1, [sp, #0]
    8042:	f01c ffec 	bl	2501e <bt_smp_request_ltk>
    8046:	b320      	cbz	r0, 8092 <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    8048:	2112      	movs	r1, #18
    804a:	f242 001a 	movw	r0, #8218	; 0x201a
    804e:	f7ff ff6f 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
    8052:	4605      	mov	r5, r0
    8054:	b968      	cbnz	r0, 8072 <le_ltk_request+0x6e>
    8056:	4917      	ldr	r1, [pc, #92]	; (80b4 <le_ltk_request+0xb0>)
    8058:	4b17      	ldr	r3, [pc, #92]	; (80b8 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
    805a:	4819      	ldr	r0, [pc, #100]	; (80c0 <le_ltk_request+0xbc>)
    805c:	1ac9      	subs	r1, r1, r3
    805e:	08c9      	lsrs	r1, r1, #3
    8060:	0189      	lsls	r1, r1, #6
    8062:	f041 0101 	orr.w	r1, r1, #1
    8066:	f018 fdab 	bl	20bc0 <log_0>
	bt_conn_unref(conn);
    806a:	4620      	mov	r0, r4
    806c:	f01a ff24 	bl	22eb8 <bt_conn_unref>
    8070:	e7dd      	b.n	802e <le_ltk_request+0x2a>
	cp = net_buf_add(buf, sizeof(*cp));
    8072:	2112      	movs	r1, #18
    8074:	3008      	adds	r0, #8
    8076:	f01d f9b9 	bl	253ec <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    807a:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    807c:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    8080:	2210      	movs	r2, #16
    8082:	f01a fb4d 	bl	22720 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    8086:	4629      	mov	r1, r5
    8088:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    808c:	f7ff ff88 	bl	7fa0 <bt_hci_cmd_send>
    8090:	e7eb      	b.n	806a <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    8092:	2102      	movs	r1, #2
    8094:	f242 001b 	movw	r0, #8219	; 0x201b
    8098:	f7ff ff4a 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
    809c:	4605      	mov	r5, r0
    809e:	2800      	cmp	r0, #0
    80a0:	d0d9      	beq.n	8056 <le_ltk_request+0x52>
	cp = net_buf_add(buf, sizeof(*cp));
    80a2:	2102      	movs	r1, #2
    80a4:	3008      	adds	r0, #8
    80a6:	f01d f9a1 	bl	253ec <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    80aa:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    80ac:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    80ae:	f242 001b 	movw	r0, #8219	; 0x201b
    80b2:	e7eb      	b.n	808c <le_ltk_request+0x88>
    80b4:	0002662c 	.word	0x0002662c
    80b8:	00026544 	.word	0x00026544
    80bc:	00029079 	.word	0x00029079
    80c0:	000292a4 	.word	0x000292a4

000080c4 <le_conn_param_neg_reply>:
{
    80c4:	b570      	push	{r4, r5, r6, lr}
    80c6:	4606      	mov	r6, r0
    80c8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    80ca:	f242 0021 	movw	r0, #8225	; 0x2021
    80ce:	2103      	movs	r1, #3
    80d0:	f7ff ff2e 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
    80d4:	4604      	mov	r4, r0
    80d6:	b958      	cbnz	r0, 80f0 <le_conn_param_neg_reply+0x2c>
    80d8:	490c      	ldr	r1, [pc, #48]	; (810c <le_conn_param_neg_reply+0x48>)
    80da:	4b0d      	ldr	r3, [pc, #52]	; (8110 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    80dc:	480d      	ldr	r0, [pc, #52]	; (8114 <le_conn_param_neg_reply+0x50>)
    80de:	1ac9      	subs	r1, r1, r3
    80e0:	08c9      	lsrs	r1, r1, #3
    80e2:	0189      	lsls	r1, r1, #6
}
    80e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    80e8:	f041 0101 	orr.w	r1, r1, #1
    80ec:	f018 bd68 	b.w	20bc0 <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    80f0:	2103      	movs	r1, #3
    80f2:	3008      	adds	r0, #8
    80f4:	f01d f97a 	bl	253ec <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    80f8:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    80fa:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    80fc:	4621      	mov	r1, r4
    80fe:	f242 0021 	movw	r0, #8225	; 0x2021
}
    8102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    8106:	f7ff bf4b 	b.w	7fa0 <bt_hci_cmd_send>
    810a:	bf00      	nop
    810c:	0002662c 	.word	0x0002662c
    8110:	00026544 	.word	0x00026544
    8114:	000292bb 	.word	0x000292bb

00008118 <le_conn_param_req>:
{
    8118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    811a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    811c:	78d9      	ldrb	r1, [r3, #3]
    811e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    8120:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    8122:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8126:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    812a:	7959      	ldrb	r1, [r3, #5]
    812c:	791a      	ldrb	r2, [r3, #4]
    812e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8132:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    8136:	799a      	ldrb	r2, [r3, #6]
    8138:	79d9      	ldrb	r1, [r3, #7]
    813a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    813e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8142:	7a1a      	ldrb	r2, [r3, #8]
    8144:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    8146:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8148:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    814c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    814e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    8152:	f002 faf9 	bl	a748 <bt_conn_lookup_handle>
	if (!conn) {
    8156:	4606      	mov	r6, r0
    8158:	b980      	cbnz	r0, 817c <le_conn_param_req+0x64>
    815a:	4b20      	ldr	r3, [pc, #128]	; (81dc <le_conn_param_req+0xc4>)
    815c:	4a20      	ldr	r2, [pc, #128]	; (81e0 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    815e:	4821      	ldr	r0, [pc, #132]	; (81e4 <le_conn_param_req+0xcc>)
    8160:	1ad2      	subs	r2, r2, r3
    8162:	08d2      	lsrs	r2, r2, #3
    8164:	0192      	lsls	r2, r2, #6
    8166:	4621      	mov	r1, r4
    8168:	f042 0201 	orr.w	r2, r2, #1
    816c:	f018 fd35 	bl	20bda <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    8170:	2102      	movs	r1, #2
    8172:	4620      	mov	r0, r4
    8174:	f7ff ffa6 	bl	80c4 <le_conn_param_neg_reply>
}
    8178:	b003      	add	sp, #12
    817a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    817c:	4669      	mov	r1, sp
    817e:	f001 ffcf 	bl	a120 <le_param_req>
    8182:	b938      	cbnz	r0, 8194 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    8184:	211e      	movs	r1, #30
    8186:	4620      	mov	r0, r4
    8188:	f7ff ff9c 	bl	80c4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    818c:	4630      	mov	r0, r6
    818e:	f01a fe93 	bl	22eb8 <bt_conn_unref>
    8192:	e7f1      	b.n	8178 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    8194:	210e      	movs	r1, #14
    8196:	f242 0020 	movw	r0, #8224	; 0x2020
    819a:	f7ff fec9 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
    819e:	4605      	mov	r5, r0
    81a0:	2800      	cmp	r0, #0
    81a2:	d0f3      	beq.n	818c <le_conn_param_req+0x74>
	cp = net_buf_add(buf, sizeof(*cp));
    81a4:	210e      	movs	r1, #14
    81a6:	3008      	adds	r0, #8
    81a8:	f01d f920 	bl	253ec <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    81ac:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    81ae:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    81b0:	2100      	movs	r1, #0
    81b2:	f01a fae0 	bl	22776 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    81b6:	f8bd 3000 	ldrh.w	r3, [sp]
    81ba:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    81bc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    81c0:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    81c2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    81c6:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    81c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    81cc:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    81ce:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    81d0:	4629      	mov	r1, r5
    81d2:	f242 0020 	movw	r0, #8224	; 0x2020
    81d6:	f7ff fee3 	bl	7fa0 <bt_hci_cmd_send>
    81da:	e7d7      	b.n	818c <le_conn_param_req+0x74>
    81dc:	00026544 	.word	0x00026544
    81e0:	0002662c 	.word	0x0002662c
    81e4:	00029079 	.word	0x00029079

000081e8 <bt_hci_cmd_send_sync>:
{
    81e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81ec:	4607      	mov	r7, r0
    81ee:	b086      	sub	sp, #24
    81f0:	4615      	mov	r5, r2
	if (!buf) {
    81f2:	460c      	mov	r4, r1
    81f4:	b921      	cbnz	r1, 8200 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    81f6:	f7ff fe9b 	bl	7f30 <bt_hci_cmd_create>
		if (!buf) {
    81fa:	4604      	mov	r4, r0
    81fc:	2800      	cmp	r0, #0
    81fe:	d055      	beq.n	82ac <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    8200:	2201      	movs	r2, #1
    8202:	2100      	movs	r1, #0
    8204:	4668      	mov	r0, sp
    8206:	f01d fe1e 	bl	25e46 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    820a:	4620      	mov	r0, r4
    820c:	f015 fe20 	bl	1de50 <net_buf_id>
    8210:	4e28      	ldr	r6, [pc, #160]	; (82b4 <bt_hci_cmd_send_sync+0xcc>)
    8212:	230c      	movs	r3, #12
    8214:	fb03 6000 	mla	r0, r3, r0, r6
    8218:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    821c:	4620      	mov	r0, r4
    821e:	f01d f8b3 	bl	25388 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    8222:	4825      	ldr	r0, [pc, #148]	; (82b8 <bt_hci_cmd_send_sync+0xd0>)
    8224:	4621      	mov	r1, r4
    8226:	f01d f8a2 	bl	2536e <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    822a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    822e:	2300      	movs	r3, #0
    8230:	4668      	mov	r0, sp
    8232:	f017 fd39 	bl	1fca8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    8236:	4680      	mov	r8, r0
    8238:	b180      	cbz	r0, 825c <bt_hci_cmd_send_sync+0x74>
    823a:	4a20      	ldr	r2, [pc, #128]	; (82bc <bt_hci_cmd_send_sync+0xd4>)
    823c:	4920      	ldr	r1, [pc, #128]	; (82c0 <bt_hci_cmd_send_sync+0xd8>)
    823e:	4821      	ldr	r0, [pc, #132]	; (82c4 <bt_hci_cmd_send_sync+0xdc>)
    8240:	f44f 73b9 	mov.w	r3, #370	; 0x172
    8244:	f018 f9fc 	bl	20640 <printk>
    8248:	481f      	ldr	r0, [pc, #124]	; (82c8 <bt_hci_cmd_send_sync+0xe0>)
    824a:	4641      	mov	r1, r8
    824c:	f018 f9f8 	bl	20640 <printk>
    8250:	4040      	eors	r0, r0
    8252:	f380 8811 	msr	BASEPRI, r0
    8256:	f04f 0003 	mov.w	r0, #3
    825a:	df02      	svc	2
	status = cmd(buf)->status;
    825c:	4620      	mov	r0, r4
    825e:	f015 fdf7 	bl	1de50 <net_buf_id>
    8262:	230c      	movs	r3, #12
    8264:	4343      	muls	r3, r0
    8266:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    8268:	b1be      	cbz	r6, 829a <bt_hci_cmd_send_sync+0xb2>
    826a:	4a18      	ldr	r2, [pc, #96]	; (82cc <bt_hci_cmd_send_sync+0xe4>)
    826c:	4b18      	ldr	r3, [pc, #96]	; (82d0 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    826e:	4819      	ldr	r0, [pc, #100]	; (82d4 <bt_hci_cmd_send_sync+0xec>)
    8270:	1a9b      	subs	r3, r3, r2
    8272:	08db      	lsrs	r3, r3, #3
    8274:	019b      	lsls	r3, r3, #6
    8276:	f043 0302 	orr.w	r3, r3, #2
    827a:	4632      	mov	r2, r6
    827c:	4639      	mov	r1, r7
    827e:	f018 fcc0 	bl	20c02 <log_2>
		net_buf_unref(buf);
    8282:	4620      	mov	r0, r4
    8284:	f015 fe98 	bl	1dfb8 <net_buf_unref>
			return -EIO;
    8288:	2e09      	cmp	r6, #9
    828a:	bf0c      	ite	eq
    828c:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    8290:	f06f 0004 	mvnne.w	r0, #4
}
    8294:	b006      	add	sp, #24
    8296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    829a:	b115      	cbz	r5, 82a2 <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
    829c:	602c      	str	r4, [r5, #0]
	return 0;
    829e:	4630      	mov	r0, r6
    82a0:	e7f8      	b.n	8294 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    82a2:	4620      	mov	r0, r4
    82a4:	f015 fe88 	bl	1dfb8 <net_buf_unref>
	return 0;
    82a8:	4628      	mov	r0, r5
    82aa:	e7f3      	b.n	8294 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    82ac:	f06f 0036 	mvn.w	r0, #54	; 0x36
    82b0:	e7f0      	b.n	8294 <bt_hci_cmd_send_sync+0xac>
    82b2:	bf00      	nop
    82b4:	200018dc 	.word	0x200018dc
    82b8:	200000ec 	.word	0x200000ec
    82bc:	000291b9 	.word	0x000291b9
    82c0:	000291ed 	.word	0x000291ed
    82c4:	000291f6 	.word	0x000291f6
    82c8:	000292d5 	.word	0x000292d5
    82cc:	00026544 	.word	0x00026544
    82d0:	0002662c 	.word	0x0002662c
    82d4:	000292f5 	.word	0x000292f5

000082d8 <hci_le_read_max_data_len>:
{
    82d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    82da:	4606      	mov	r6, r0
    82dc:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    82de:	aa01      	add	r2, sp, #4
    82e0:	2100      	movs	r1, #0
    82e2:	f242 002f 	movw	r0, #8239	; 0x202f
    82e6:	f7ff ff7f 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
    82ea:	4604      	mov	r4, r0
    82ec:	b160      	cbz	r0, 8308 <hci_le_read_max_data_len+0x30>
    82ee:	490c      	ldr	r1, [pc, #48]	; (8320 <hci_le_read_max_data_len+0x48>)
    82f0:	4b0c      	ldr	r3, [pc, #48]	; (8324 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    82f2:	480d      	ldr	r0, [pc, #52]	; (8328 <hci_le_read_max_data_len+0x50>)
    82f4:	1ac9      	subs	r1, r1, r3
    82f6:	08c9      	lsrs	r1, r1, #3
    82f8:	0189      	lsls	r1, r1, #6
    82fa:	f041 0101 	orr.w	r1, r1, #1
    82fe:	f018 fc5f 	bl	20bc0 <log_0>
}
    8302:	4620      	mov	r0, r4
    8304:	b002      	add	sp, #8
    8306:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    8308:	9801      	ldr	r0, [sp, #4]
    830a:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    830c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    8310:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    8312:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    8316:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    8318:	f015 fe4e 	bl	1dfb8 <net_buf_unref>
	return 0;
    831c:	e7f1      	b.n	8302 <hci_le_read_max_data_len+0x2a>
    831e:	bf00      	nop
    8320:	0002662c 	.word	0x0002662c
    8324:	00026544 	.word	0x00026544
    8328:	00029311 	.word	0x00029311

0000832c <set_random_address>:
{
    832c:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE ((bt_addr_le_t[]) { { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    832e:	4e15      	ldr	r6, [pc, #84]	; (8384 <set_random_address+0x58>)
    8330:	2206      	movs	r2, #6
    8332:	f106 0131 	add.w	r1, r6, #49	; 0x31
    8336:	4605      	mov	r5, r0
    8338:	f01a f9e2 	bl	22700 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    833c:	4604      	mov	r4, r0
    833e:	b1e0      	cbz	r0, 837a <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    8340:	2106      	movs	r1, #6
    8342:	f242 0005 	movw	r0, #8197	; 0x2005
    8346:	f7ff fdf3 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
    834a:	4604      	mov	r4, r0
    834c:	b1b8      	cbz	r0, 837e <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    834e:	2206      	movs	r2, #6
    8350:	4629      	mov	r1, r5
    8352:	3008      	adds	r0, #8
    8354:	f01d f850 	bl	253f8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    8358:	4621      	mov	r1, r4
    835a:	2200      	movs	r2, #0
    835c:	f242 0005 	movw	r0, #8197	; 0x2005
    8360:	f7ff ff42 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
    8364:	4604      	mov	r4, r0
    8366:	b940      	cbnz	r0, 837a <set_random_address+0x4e>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    8368:	2206      	movs	r2, #6
    836a:	4629      	mov	r1, r5
    836c:	f106 0031 	add.w	r0, r6, #49	; 0x31
    8370:	f01a f9d6 	bl	22720 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    8374:	2301      	movs	r3, #1
    8376:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    837a:	4620      	mov	r0, r4
    837c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    837e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    8382:	e7fa      	b.n	837a <set_random_address+0x4e>
    8384:	20000000 	.word	0x20000000

00008388 <le_create_conn_set_random_addr.isra.0>:
static int le_create_conn_set_random_addr(bool use_filter, uint8_t *own_addr_type)
    8388:	b538      	push	{r3, r4, r5, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    838a:	4c07      	ldr	r4, [pc, #28]	; (83a8 <le_create_conn_set_random_addr.isra.0+0x20>)
    838c:	7823      	ldrb	r3, [r4, #0]
    838e:	2b01      	cmp	r3, #1
static int le_create_conn_set_random_addr(bool use_filter, uint8_t *own_addr_type)
    8390:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    8392:	d003      	beq.n	839c <le_create_conn_set_random_addr.isra.0+0x14>
		*own_addr_type = addr->type;
    8394:	7823      	ldrb	r3, [r4, #0]
    8396:	702b      	strb	r3, [r5, #0]
	return 0;
    8398:	2000      	movs	r0, #0
}
    839a:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    839c:	1c60      	adds	r0, r4, #1
    839e:	f7ff ffc5 	bl	832c <set_random_address>
			if (err) {
    83a2:	2800      	cmp	r0, #0
    83a4:	d0f6      	beq.n	8394 <le_create_conn_set_random_addr.isra.0+0xc>
    83a6:	e7f8      	b.n	839a <le_create_conn_set_random_addr.isra.0+0x12>
    83a8:	20000000 	.word	0x20000000

000083ac <set_le_adv_enable_legacy>:
{
    83ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    83ae:	4606      	mov	r6, r0
    83b0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    83b2:	f242 000a 	movw	r0, #8202	; 0x200a
    83b6:	2101      	movs	r1, #1
    83b8:	f7ff fdba 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
    83bc:	4604      	mov	r4, r0
    83be:	b1e8      	cbz	r0, 83fc <set_le_adv_enable_legacy+0x50>
	if (enable) {
    83c0:	3008      	adds	r0, #8
    83c2:	b1cd      	cbz	r5, 83f8 <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    83c4:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    83c6:	f01d f820 	bl	2540a <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    83ca:	3614      	adds	r6, #20
	state->bit = bit;
    83cc:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    83ce:	4620      	mov	r0, r4
	state->bit = bit;
    83d0:	9302      	str	r3, [sp, #8]
	state->target = target;
    83d2:	9601      	str	r6, [sp, #4]
	state->val = val;
    83d4:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    83d8:	f015 fd3a 	bl	1de50 <net_buf_id>
    83dc:	4b09      	ldr	r3, [pc, #36]	; (8404 <set_le_adv_enable_legacy+0x58>)
    83de:	220c      	movs	r2, #12
    83e0:	fb02 3000 	mla	r0, r2, r0, r3
    83e4:	ab01      	add	r3, sp, #4
    83e6:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    83e8:	2200      	movs	r2, #0
    83ea:	4621      	mov	r1, r4
    83ec:	f242 000a 	movw	r0, #8202	; 0x200a
    83f0:	f7ff fefa 	bl	81e8 <bt_hci_cmd_send_sync>
}
    83f4:	b004      	add	sp, #16
    83f6:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    83f8:	4629      	mov	r1, r5
    83fa:	e7e4      	b.n	83c6 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    83fc:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8400:	e7f8      	b.n	83f4 <set_le_adv_enable_legacy+0x48>
    8402:	bf00      	nop
    8404:	200018dc 	.word	0x200018dc

00008408 <set_le_scan_enable_legacy>:
{
    8408:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    840a:	2102      	movs	r1, #2
{
    840c:	b085      	sub	sp, #20
    840e:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    8410:	f242 000c 	movw	r0, #8204	; 0x200c
    8414:	f7ff fd8c 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
    8418:	4605      	mov	r5, r0
    841a:	b348      	cbz	r0, 8470 <set_le_scan_enable_legacy+0x68>
	cp = net_buf_add(buf, sizeof(*cp));
    841c:	2102      	movs	r1, #2
    841e:	3008      	adds	r0, #8
    8420:	f01c ffe4 	bl	253ec <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    8424:	2c01      	cmp	r4, #1
	cp = net_buf_add(buf, sizeof(*cp));
    8426:	4603      	mov	r3, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    8428:	d11f      	bne.n	846a <set_le_scan_enable_legacy+0x62>
    842a:	4813      	ldr	r0, [pc, #76]	; (8478 <set_le_scan_enable_legacy+0x70>)
    842c:	f01a fa99 	bl	22962 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8430:	f3c0 2000 	ubfx	r0, r0, #8, #1
    8434:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    8436:	701c      	strb	r4, [r3, #0]
	state->target = target;
    8438:	4b0f      	ldr	r3, [pc, #60]	; (8478 <set_le_scan_enable_legacy+0x70>)
    843a:	9301      	str	r3, [sp, #4]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    843c:	f004 0401 	and.w	r4, r4, #1
	state->bit = bit;
    8440:	2305      	movs	r3, #5
	cmd(buf)->state = &state;
    8442:	4628      	mov	r0, r5
	state->bit = bit;
    8444:	9302      	str	r3, [sp, #8]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    8446:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    844a:	f015 fd01 	bl	1de50 <net_buf_id>
    844e:	4b0b      	ldr	r3, [pc, #44]	; (847c <set_le_scan_enable_legacy+0x74>)
    8450:	220c      	movs	r2, #12
    8452:	fb02 3000 	mla	r0, r2, r0, r3
    8456:	ab01      	add	r3, sp, #4
    8458:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    845a:	2200      	movs	r2, #0
    845c:	4629      	mov	r1, r5
    845e:	f242 000c 	movw	r0, #8204	; 0x200c
    8462:	f7ff fec1 	bl	81e8 <bt_hci_cmd_send_sync>
}
    8466:	b005      	add	sp, #20
    8468:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    846a:	2200      	movs	r2, #0
    846c:	7042      	strb	r2, [r0, #1]
    846e:	e7e2      	b.n	8436 <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    8470:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8474:	e7f7      	b.n	8466 <set_le_scan_enable_legacy+0x5e>
    8476:	bf00      	nop
    8478:	20000098 	.word	0x20000098
    847c:	200018dc 	.word	0x200018dc

00008480 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    8480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    8484:	f011 0401 	ands.w	r4, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    8488:	4680      	mov	r8, r0
    848a:	460f      	mov	r7, r1
    848c:	4691      	mov	r9, r2
    848e:	461e      	mov	r6, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    8490:	d029      	beq.n	84e6 <le_adv_set_random_addr.isra.0+0x66>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    8492:	4d2f      	ldr	r5, [pc, #188]	; (8550 <le_adv_set_random_addr.isra.0+0xd0>)
    8494:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    8498:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
    849c:	5ceb      	ldrb	r3, [r5, r3]
    849e:	2b01      	cmp	r3, #1
    84a0:	d009      	beq.n	84b6 <le_adv_set_random_addr.isra.0+0x36>
			*own_addr_type = id_addr->type;
    84a2:	ebaa 0808 	sub.w	r8, sl, r8
    84a6:	f815 3008 	ldrb.w	r3, [r5, r8]
    84aa:	7033      	strb	r3, [r6, #0]
		if (dir_adv) {
    84ac:	f1b9 0f00 	cmp.w	r9, #0
    84b0:	d10d      	bne.n	84ce <le_adv_set_random_addr.isra.0+0x4e>
	return 0;
    84b2:	2400      	movs	r4, #0
    84b4:	e008      	b.n	84c8 <le_adv_set_random_addr.isra.0+0x48>
				err = set_adv_random_address(adv, &id_addr->a);
    84b6:	2007      	movs	r0, #7
    84b8:	fb10 3008 	smlabb	r0, r0, r8, r3
		return set_random_address(addr);
    84bc:	4428      	add	r0, r5
    84be:	f7ff ff35 	bl	832c <set_random_address>
				if (err) {
    84c2:	4604      	mov	r4, r0
    84c4:	2800      	cmp	r0, #0
    84c6:	d0ec      	beq.n	84a2 <le_adv_set_random_addr.isra.0+0x22>
}
    84c8:	4620      	mov	r0, r4
    84ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    84ce:	f895 00a0 	ldrb.w	r0, [r5, #160]	; 0xa0
    84d2:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    84d6:	d038      	beq.n	854a <le_adv_set_random_addr.isra.0+0xca>
			    BT_FEAT_LE_PRIVACY(bt_dev.le.features) &&
    84d8:	f017 0420 	ands.w	r4, r7, #32
    84dc:	d0f4      	beq.n	84c8 <le_adv_set_random_addr.isra.0+0x48>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    84de:	f043 0302 	orr.w	r3, r3, #2
    84e2:	7033      	strb	r3, [r6, #0]
    84e4:	e7e5      	b.n	84b2 <le_adv_set_random_addr.isra.0+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    84e6:	f011 0704 	ands.w	r7, r1, #4
    84ea:	d013      	beq.n	8514 <le_adv_set_random_addr.isra.0+0x94>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    84ec:	4d18      	ldr	r5, [pc, #96]	; (8550 <le_adv_set_random_addr.isra.0+0xd0>)
    84ee:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    84f2:	00c7      	lsls	r7, r0, #3
    84f4:	5ceb      	ldrb	r3, [r5, r3]
    84f6:	2b01      	cmp	r3, #1
    84f8:	d106      	bne.n	8508 <le_adv_set_random_addr.isra.0+0x88>
				err = set_adv_random_address(adv, &id_addr->a);
    84fa:	2007      	movs	r0, #7
    84fc:	fb10 3008 	smlabb	r0, r0, r8, r3
		return set_random_address(addr);
    8500:	4428      	add	r0, r5
    8502:	f7ff ff13 	bl	832c <set_random_address>
    8506:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    8508:	eba7 0808 	sub.w	r8, r7, r8
    850c:	f815 3008 	ldrb.w	r3, [r5, r8]
    8510:	7033      	strb	r3, [r6, #0]
    8512:	e7d9      	b.n	84c8 <le_adv_set_random_addr.isra.0+0x48>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8514:	480f      	ldr	r0, [pc, #60]	; (8554 <le_adv_set_random_addr.isra.0+0xd4>)
    8516:	f01a fa24 	bl	22962 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    851a:	0682      	lsls	r2, r0, #26
    851c:	d40a      	bmi.n	8534 <le_adv_set_random_addr.isra.0+0xb4>
			bool scan_enabled = false;
    851e:	2500      	movs	r5, #0
			err = le_adv_set_private_addr(adv);
    8520:	f01a fa75 	bl	22a0e <le_adv_set_private_addr.isra.0>
    8524:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    8526:	2001      	movs	r0, #1
    8528:	7030      	strb	r0, [r6, #0]
			if (scan_enabled) {
    852a:	2d00      	cmp	r5, #0
    852c:	d0cc      	beq.n	84c8 <le_adv_set_random_addr.isra.0+0x48>
				set_le_scan_enable(true);
    852e:	f01a faee 	bl	22b0e <set_le_scan_enable>
		if (err) {
    8532:	e7c9      	b.n	84c8 <le_adv_set_random_addr.isra.0+0x48>
    8534:	4807      	ldr	r0, [pc, #28]	; (8554 <le_adv_set_random_addr.isra.0+0xd4>)
    8536:	f01a fa14 	bl	22962 <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    853a:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    853c:	f3c0 15c0 	ubfx	r5, r0, #7, #1
    8540:	d5ed      	bpl.n	851e <le_adv_set_random_addr.isra.0+0x9e>
				set_le_scan_enable(false);
    8542:	4638      	mov	r0, r7
    8544:	f01a fae3 	bl	22b0e <set_le_scan_enable>
    8548:	e7ea      	b.n	8520 <le_adv_set_random_addr.isra.0+0xa0>
	return 0;
    854a:	4604      	mov	r4, r0
    854c:	e7bc      	b.n	84c8 <le_adv_set_random_addr.isra.0+0x48>
    854e:	bf00      	nop
    8550:	20000000 	.word	0x20000000
    8554:	20000098 	.word	0x20000098

00008558 <hci_set_ad>:
{
    8558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    855c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    855e:	2120      	movs	r1, #32
{
    8560:	4682      	mov	sl, r0
    8562:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    8564:	f7ff fce4 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
    8568:	4606      	mov	r6, r0
    856a:	2800      	cmp	r0, #0
    856c:	d05b      	beq.n	8626 <hci_set_ad+0xce>
	set_data = net_buf_add(buf, sizeof(*set_data));
    856e:	2120      	movs	r1, #32
    8570:	3008      	adds	r0, #8
    8572:	f01c ff3b 	bl	253ec <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    8576:	2220      	movs	r2, #32
    8578:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    857a:	4681      	mov	r9, r0
	(void)memset(set_data, 0, sizeof(*set_data));
    857c:	f01a f8fb 	bl	22776 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    8580:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    8584:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    8588:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    858a:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    858c:	f8d4 8000 	ldr.w	r8, [r4]
    8590:	2300      	movs	r3, #0
    8592:	6862      	ldr	r2, [r4, #4]
    8594:	4293      	cmp	r3, r2
    8596:	d30d      	bcc.n	85b4 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    8598:	9b00      	ldr	r3, [sp, #0]
    859a:	3408      	adds	r4, #8
    859c:	429c      	cmp	r4, r3
    859e:	d1f5      	bne.n	858c <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    85a0:	2200      	movs	r2, #0
    85a2:	4631      	mov	r1, r6
    85a4:	4650      	mov	r0, sl
	*data_len = set_data_len;
    85a6:	f889 5000 	strb.w	r5, [r9]
}
    85aa:	b003      	add	sp, #12
    85ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    85b0:	f7ff be1a 	b.w	81e8 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    85b4:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    85b8:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    85bc:	1ca8      	adds	r0, r5, #2
    85be:	1881      	adds	r1, r0, r2
    85c0:	291f      	cmp	r1, #31
    85c2:	d919      	bls.n	85f8 <hci_set_ad+0xa0>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    85c4:	f1bc 0f09 	cmp.w	ip, #9
				len = set_data_len_max - (set_data_len + 2);
    85c8:	f1c5 021d 	rsb	r2, r5, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    85cc:	d100      	bne.n	85d0 <hci_set_ad+0x78>
    85ce:	b98a      	cbnz	r2, 85f4 <hci_set_ad+0x9c>
    85d0:	4b16      	ldr	r3, [pc, #88]	; (862c <hci_set_ad+0xd4>)
    85d2:	4917      	ldr	r1, [pc, #92]	; (8630 <hci_set_ad+0xd8>)
					BT_ERR("Too big advertising data");
    85d4:	4817      	ldr	r0, [pc, #92]	; (8634 <hci_set_ad+0xdc>)
    85d6:	1ac9      	subs	r1, r1, r3
    85d8:	08c9      	lsrs	r1, r1, #3
    85da:	0189      	lsls	r1, r1, #6
    85dc:	f041 0101 	orr.w	r1, r1, #1
    85e0:	f018 faee 	bl	20bc0 <log_0>
		net_buf_unref(buf);
    85e4:	4630      	mov	r0, r6
    85e6:	f015 fce7 	bl	1dfb8 <net_buf_unref>
					return -EINVAL;
    85ea:	f06f 0015 	mvn.w	r0, #21
}
    85ee:	b003      	add	sp, #12
    85f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    85f4:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    85f8:	b2d7      	uxtb	r7, r2
    85fa:	1c79      	adds	r1, r7, #1
    85fc:	f80b 1005 	strb.w	r1, [fp, r5]
    8600:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    8602:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    8604:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    8608:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    860c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    8610:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    8612:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    8614:	f01a f884 	bl	22720 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    8618:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    861a:	443d      	add	r5, r7
    861c:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    861e:	3301      	adds	r3, #1
    8620:	f108 0808 	add.w	r8, r8, #8
    8624:	e7b5      	b.n	8592 <hci_set_ad+0x3a>
		return -ENOBUFS;
    8626:	f06f 0036 	mvn.w	r0, #54	; 0x36
    862a:	e7e0      	b.n	85ee <hci_set_ad+0x96>
    862c:	00026544 	.word	0x00026544
    8630:	0002662c 	.word	0x0002662c
    8634:	00029331 	.word	0x00029331

00008638 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    8638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    863c:	b086      	sub	sp, #24
    863e:	4604      	mov	r4, r0
    8640:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
    8644:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    8648:	460f      	mov	r7, r1
    864a:	4615      	mov	r5, r2
	struct bt_ad d[2] = {};
    864c:	2100      	movs	r1, #0
    864e:	2210      	movs	r2, #16
    8650:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    8652:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
    8654:	f01a f88f 	bl	22776 <memset>
	if (use_name) {
    8658:	f1b8 0f00 	cmp.w	r8, #0
    865c:	d00e      	beq.n	867c <le_adv_update.constprop.0+0x44>
		if ((ad && ad_has_name(ad, ad_len)) ||
    865e:	bbac      	cbnz	r4, 86cc <le_adv_update.constprop.0+0x94>
    8660:	2d00      	cmp	r5, #0
    8662:	d13e      	bne.n	86e2 <le_adv_update.constprop.0+0xaa>
		data = (struct bt_data)BT_DATA(
    8664:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 871c <le_adv_update.constprop.0+0xe4>
    8668:	4650      	mov	r0, sl
    866a:	f01a f836 	bl	226da <strlen>
    866e:	2309      	movs	r3, #9
    8670:	f88d 3000 	strb.w	r3, [sp]
    8674:	f88d 0001 	strb.w	r0, [sp, #1]
    8678:	f8cd a004 	str.w	sl, [sp, #4]
	d[0].len = ad_len;
    867c:	e9cd 4702 	strd	r4, r7, [sp, #8]
	if (use_name && !scannable) {
    8680:	f1b8 0f00 	cmp.w	r8, #0
    8684:	d02f      	beq.n	86e6 <le_adv_update.constprop.0+0xae>
    8686:	f1b9 0f00 	cmp.w	r9, #0
    868a:	d12c      	bne.n	86e6 <le_adv_update.constprop.0+0xae>
		d[1].len = 1;
    868c:	2301      	movs	r3, #1
		d[1].data = &data;
    868e:	f8cd d010 	str.w	sp, [sp, #16]
		d[1].len = 1;
    8692:	9305      	str	r3, [sp, #20]
		d_len = 2;
    8694:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    8696:	a902      	add	r1, sp, #8
    8698:	f242 0008 	movw	r0, #8200	; 0x2008
    869c:	f7ff ff5c 	bl	8558 <hci_set_ad>
	if (err) {
    86a0:	4604      	mov	r4, r0
    86a2:	b930      	cbnz	r0, 86b2 <le_adv_update.constprop.0+0x7a>
	if (scannable) {
    86a4:	f1b9 0f00 	cmp.w	r9, #0
    86a8:	d11f      	bne.n	86ea <le_adv_update.constprop.0+0xb2>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    86aa:	481b      	ldr	r0, [pc, #108]	; (8718 <le_adv_update.constprop.0+0xe0>)
    86ac:	2104      	movs	r1, #4
    86ae:	f01a f973 	bl	22998 <atomic_or>
}
    86b2:	4620      	mov	r0, r4
    86b4:	b006      	add	sp, #24
    86b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    86ba:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    86be:	3a08      	subs	r2, #8
    86c0:	2a01      	cmp	r2, #1
    86c2:	d925      	bls.n	8710 <le_adv_update.constprop.0+0xd8>
	for (i = 0; i < ad_len; i++) {
    86c4:	3301      	adds	r3, #1
    86c6:	429f      	cmp	r7, r3
    86c8:	d1f7      	bne.n	86ba <le_adv_update.constprop.0+0x82>
    86ca:	e7c9      	b.n	8660 <le_adv_update.constprop.0+0x28>
    86cc:	2300      	movs	r3, #0
    86ce:	e7fa      	b.n	86c6 <le_adv_update.constprop.0+0x8e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    86d0:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    86d4:	3a08      	subs	r2, #8
    86d6:	2a01      	cmp	r2, #1
    86d8:	d91a      	bls.n	8710 <le_adv_update.constprop.0+0xd8>
	for (i = 0; i < ad_len; i++) {
    86da:	3301      	adds	r3, #1
    86dc:	429e      	cmp	r6, r3
    86de:	d1f7      	bne.n	86d0 <le_adv_update.constprop.0+0x98>
    86e0:	e7c0      	b.n	8664 <le_adv_update.constprop.0+0x2c>
    86e2:	2300      	movs	r3, #0
    86e4:	e7fa      	b.n	86dc <le_adv_update.constprop.0+0xa4>
	d_len = 1;
    86e6:	2201      	movs	r2, #1
    86e8:	e7d5      	b.n	8696 <le_adv_update.constprop.0+0x5e>
		d[0].len = sd_len;
    86ea:	e9cd 5602 	strd	r5, r6, [sp, #8]
		if (use_name) {
    86ee:	2201      	movs	r2, #1
    86f0:	f1b8 0f00 	cmp.w	r8, #0
    86f4:	d003      	beq.n	86fe <le_adv_update.constprop.0+0xc6>
			d[1].len = 1;
    86f6:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    86f8:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    86fc:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    86fe:	a902      	add	r1, sp, #8
    8700:	f242 0009 	movw	r0, #8201	; 0x2009
    8704:	f7ff ff28 	bl	8558 <hci_set_ad>
		if (err) {
    8708:	2800      	cmp	r0, #0
    870a:	d0ce      	beq.n	86aa <le_adv_update.constprop.0+0x72>
    870c:	4604      	mov	r4, r0
    870e:	e7d0      	b.n	86b2 <le_adv_update.constprop.0+0x7a>
			return -EINVAL;
    8710:	f06f 0415 	mvn.w	r4, #21
    8714:	e7cd      	b.n	86b2 <le_adv_update.constprop.0+0x7a>
    8716:	bf00      	nop
    8718:	2000002c 	.word	0x2000002c
    871c:	0002934a 	.word	0x0002934a

00008720 <start_le_scan_legacy>:
{
    8720:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8722:	4605      	mov	r5, r0
    8724:	460e      	mov	r6, r1
    8726:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    8728:	2100      	movs	r1, #0
    872a:	2207      	movs	r2, #7
    872c:	4668      	mov	r0, sp
    872e:	f01a f822 	bl	22776 <memset>
		*own_addr_type = bt_dev.id_addr[0].type;
    8732:	481f      	ldr	r0, [pc, #124]	; (87b0 <start_le_scan_legacy+0x90>)
	set_param.scan_type = scan_type;
    8734:	f88d 5000 	strb.w	r5, [sp]
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    8738:	2300      	movs	r3, #0
    873a:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    873e:	f810 3b2c 	ldrb.w	r3, [r0], #44
	set_param.interval = sys_cpu_to_le16(interval);
    8742:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    8746:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    874a:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    874e:	f01a f908 	bl	22962 <atomic_get>
		    adv && !atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    8752:	0642      	lsls	r2, r0, #25
    8754:	d406      	bmi.n	8764 <start_le_scan_legacy+0x44>
			err = le_set_private_addr(BT_ID_DEFAULT);
    8756:	f01a f95a 	bl	22a0e <le_adv_set_private_addr.isra.0>
			if (err) {
    875a:	4604      	mov	r4, r0
    875c:	bb10      	cbnz	r0, 87a4 <start_le_scan_legacy+0x84>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    875e:	2301      	movs	r3, #1
    8760:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    8764:	2107      	movs	r1, #7
    8766:	f242 000b 	movw	r0, #8203	; 0x200b
    876a:	f7ff fbe1 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
    876e:	4604      	mov	r4, r0
    8770:	b1d8      	cbz	r0, 87aa <start_le_scan_legacy+0x8a>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    8772:	2207      	movs	r2, #7
    8774:	4669      	mov	r1, sp
    8776:	3008      	adds	r0, #8
    8778:	f01c fe3e 	bl	253f8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    877c:	4621      	mov	r1, r4
    877e:	2200      	movs	r2, #0
    8780:	f242 000b 	movw	r0, #8203	; 0x200b
    8784:	f7ff fd30 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
    8788:	4604      	mov	r4, r0
    878a:	b958      	cbnz	r0, 87a4 <start_le_scan_legacy+0x84>
	return set_le_scan_enable_legacy(enable);
    878c:	2001      	movs	r0, #1
    878e:	f7ff fe3b 	bl	8408 <set_le_scan_enable_legacy>
	if (err) {
    8792:	4604      	mov	r4, r0
    8794:	b930      	cbnz	r0, 87a4 <start_le_scan_legacy+0x84>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    8796:	1e6b      	subs	r3, r5, #1
    8798:	425a      	negs	r2, r3
    879a:	4806      	ldr	r0, [pc, #24]	; (87b4 <start_le_scan_legacy+0x94>)
    879c:	415a      	adcs	r2, r3
    879e:	2107      	movs	r1, #7
    87a0:	f01a f909 	bl	229b6 <atomic_set_bit_to>
}
    87a4:	4620      	mov	r0, r4
    87a6:	b002      	add	sp, #8
    87a8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    87aa:	f06f 0436 	mvn.w	r4, #54	; 0x36
    87ae:	e7f9      	b.n	87a4 <start_le_scan_legacy+0x84>
    87b0:	20000000 	.word	0x20000000
    87b4:	20000098 	.word	0x20000098

000087b8 <bt_le_scan_random_addr_check>:
{
    87b8:	b508      	push	{r3, lr}
    87ba:	4802      	ldr	r0, [pc, #8]	; (87c4 <bt_le_scan_random_addr_check+0xc>)
    87bc:	f01a f8d1 	bl	22962 <atomic_get>
}
    87c0:	2001      	movs	r0, #1
    87c2:	bd08      	pop	{r3, pc}
    87c4:	2000002c 	.word	0x2000002c

000087c8 <bt_le_create_conn_legacy>:
{
    87c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    87cc:	4606      	mov	r6, r0
	err = le_create_conn_set_random_addr(use_filter, &own_addr_type);
    87ce:	f10d 0003 	add.w	r0, sp, #3
    87d2:	f7ff fdd9 	bl	8388 <le_create_conn_set_random_addr.isra.0>
	if (err) {
    87d6:	4605      	mov	r5, r0
    87d8:	2800      	cmp	r0, #0
    87da:	d150      	bne.n	887e <bt_le_create_conn_legacy+0xb6>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    87dc:	2119      	movs	r1, #25
    87de:	f242 000d 	movw	r0, #8205	; 0x200d
    87e2:	f7ff fba5 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
    87e6:	4607      	mov	r7, r0
    87e8:	2800      	cmp	r0, #0
    87ea:	d04f      	beq.n	888c <bt_le_create_conn_legacy+0xc4>
	cp = net_buf_add(buf, sizeof(*cp));
    87ec:	2119      	movs	r1, #25
    87ee:	3008      	adds	r0, #8
    87f0:	f01c fdfc 	bl	253ec <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    87f4:	4629      	mov	r1, r5
	cp = net_buf_add(buf, sizeof(*cp));
    87f6:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    87f8:	2219      	movs	r2, #25
    87fa:	f019 ffbc 	bl	22776 <memset>
		if (!bt_dev.le.rl_size ||
    87fe:	4d25      	ldr	r5, [pc, #148]	; (8894 <bt_le_create_conn_legacy+0xcc>)
	cp->own_addr_type = own_addr_type;
    8800:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8804:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
    8806:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    880a:	2b00      	cmp	r3, #0
    880c:	d03b      	beq.n	8886 <bt_le_create_conn_legacy+0xbe>
    880e:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    8812:	429a      	cmp	r2, r3
    8814:	d837      	bhi.n	8886 <bt_le_create_conn_legacy+0xbe>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    8816:	f106 0188 	add.w	r1, r6, #136	; 0x88
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    881a:	1d60      	adds	r0, r4, #5
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    881c:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    8820:	f01a f8a5 	bl	2296e <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    8824:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    8828:	89ab      	ldrh	r3, [r5, #12]
    882a:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    882c:	89eb      	ldrh	r3, [r5, #14]
    882e:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    8830:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
    8834:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    8838:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
    883c:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    8840:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
    8844:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    8848:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
    884c:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    8850:	4b11      	ldr	r3, [pc, #68]	; (8898 <bt_le_create_conn_legacy+0xd0>)
    8852:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    8854:	230b      	movs	r3, #11
    8856:	9302      	str	r3, [sp, #8]
	cmd(buf)->state = &state;
    8858:	4638      	mov	r0, r7
	state->val = val;
    885a:	2301      	movs	r3, #1
    885c:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    8860:	f015 faf6 	bl	1de50 <net_buf_id>
    8864:	4b0d      	ldr	r3, [pc, #52]	; (889c <bt_le_create_conn_legacy+0xd4>)
    8866:	220c      	movs	r2, #12
    8868:	fb02 3000 	mla	r0, r2, r0, r3
    886c:	ab01      	add	r3, sp, #4
    886e:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    8870:	4642      	mov	r2, r8
    8872:	4639      	mov	r1, r7
    8874:	f242 000d 	movw	r0, #8205	; 0x200d
    8878:	f7ff fcb6 	bl	81e8 <bt_hci_cmd_send_sync>
    887c:	4605      	mov	r5, r0
}
    887e:	4628      	mov	r0, r5
    8880:	b004      	add	sp, #16
    8882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
    8886:	f106 0196 	add.w	r1, r6, #150	; 0x96
    888a:	e7c6      	b.n	881a <bt_le_create_conn_legacy+0x52>
		return -ENOBUFS;
    888c:	f06f 0536 	mvn.w	r5, #54	; 0x36
    8890:	e7f5      	b.n	887e <bt_le_create_conn_legacy+0xb6>
    8892:	bf00      	nop
    8894:	20000000 	.word	0x20000000
    8898:	20000098 	.word	0x20000098
    889c:	200018dc 	.word	0x200018dc

000088a0 <bt_le_create_conn_cancel>:
{
    88a0:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    88a2:	2100      	movs	r1, #0
{
    88a4:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    88a6:	f242 000e 	movw	r0, #8206	; 0x200e
    88aa:	f7ff fb41 	bl	7f30 <bt_hci_cmd_create>
	state->target = target;
    88ae:	4b0c      	ldr	r3, [pc, #48]	; (88e0 <bt_le_create_conn_cancel+0x40>)
    88b0:	9301      	str	r3, [sp, #4]
	state->val = val;
    88b2:	2500      	movs	r5, #0
	state->bit = bit;
    88b4:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    88b6:	4604      	mov	r4, r0
	state->bit = bit;
    88b8:	9302      	str	r3, [sp, #8]
	state->val = val;
    88ba:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    88be:	f015 fac7 	bl	1de50 <net_buf_id>
    88c2:	4b08      	ldr	r3, [pc, #32]	; (88e4 <bt_le_create_conn_cancel+0x44>)
    88c4:	220c      	movs	r2, #12
    88c6:	fb02 3000 	mla	r0, r2, r0, r3
    88ca:	ab01      	add	r3, sp, #4
    88cc:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    88ce:	462a      	mov	r2, r5
    88d0:	4621      	mov	r1, r4
    88d2:	f242 000e 	movw	r0, #8206	; 0x200e
    88d6:	f7ff fc87 	bl	81e8 <bt_hci_cmd_send_sync>
}
    88da:	b005      	add	sp, #20
    88dc:	bd30      	pop	{r4, r5, pc}
    88de:	bf00      	nop
    88e0:	20000098 	.word	0x20000098
    88e4:	200018dc 	.word	0x200018dc

000088e8 <conn_auto_initiate>:
{
    88e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    88ea:	7b43      	ldrb	r3, [r0, #13]
    88ec:	2b06      	cmp	r3, #6
{
    88ee:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    88f0:	d11e      	bne.n	8930 <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    88f2:	1d05      	adds	r5, r0, #4
    88f4:	4628      	mov	r0, r5
    88f6:	f01a f834 	bl	22962 <atomic_get>
    88fa:	0483      	lsls	r3, r0, #18
    88fc:	d41a      	bmi.n	8934 <conn_auto_initiate+0x4c>
    88fe:	78e3      	ldrb	r3, [r4, #3]
    8900:	b123      	cbz	r3, 890c <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    8902:	4b35      	ldr	r3, [pc, #212]	; (89d8 <conn_auto_initiate+0xf0>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    8904:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    8908:	071e      	lsls	r6, r3, #28
    890a:	d513      	bpl.n	8934 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    890c:	2102      	movs	r1, #2
    890e:	f242 0016 	movw	r0, #8214	; 0x2016
    8912:	f7ff fb0d 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
    8916:	4606      	mov	r6, r0
    8918:	b160      	cbz	r0, 8934 <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
    891a:	2102      	movs	r1, #2
    891c:	3008      	adds	r0, #8
    891e:	f01c fd65 	bl	253ec <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    8922:	8823      	ldrh	r3, [r4, #0]
    8924:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    8926:	4631      	mov	r1, r6
    8928:	f242 0016 	movw	r0, #8214	; 0x2016
    892c:	f7ff fb38 	bl	7fa0 <bt_hci_cmd_send>
}
    8930:	b004      	add	sp, #16
    8932:	bd70      	pop	{r4, r5, r6, pc}
    8934:	4628      	mov	r0, r5
    8936:	f01a f814 	bl	22962 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    893a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    893e:	4e26      	ldr	r6, [pc, #152]	; (89d8 <conn_auto_initiate+0xf0>)
    8940:	f3c0 3100 	ubfx	r1, r0, #12, #1
    8944:	d11a      	bne.n	897c <conn_auto_initiate+0x94>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    8946:	f896 30a1 	ldrb.w	r3, [r6, #161]	; 0xa1
    894a:	07d8      	lsls	r0, r3, #31
    894c:	d516      	bpl.n	897c <conn_auto_initiate+0x94>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    894e:	2302      	movs	r3, #2
    8950:	9100      	str	r1, [sp, #0]
    8952:	461a      	mov	r2, r3
    8954:	4620      	mov	r0, r4
    8956:	f01a f91b 	bl	22b90 <bt_le_set_phy>
		if (!err) {
    895a:	4601      	mov	r1, r0
    895c:	b920      	cbnz	r0, 8968 <conn_auto_initiate+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    895e:	2180      	movs	r1, #128	; 0x80
    8960:	4628      	mov	r0, r5
    8962:	f01a f819 	bl	22998 <atomic_or>
			return;
    8966:	e7e3      	b.n	8930 <conn_auto_initiate+0x48>
    8968:	4a1c      	ldr	r2, [pc, #112]	; (89dc <conn_auto_initiate+0xf4>)
    896a:	4b1d      	ldr	r3, [pc, #116]	; (89e0 <conn_auto_initiate+0xf8>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    896c:	481d      	ldr	r0, [pc, #116]	; (89e4 <conn_auto_initiate+0xfc>)
    896e:	1ad2      	subs	r2, r2, r3
    8970:	08d2      	lsrs	r2, r2, #3
    8972:	0192      	lsls	r2, r2, #6
    8974:	f042 0201 	orr.w	r2, r2, #1
    8978:	f018 f92f 	bl	20bda <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    897c:	f896 30a0 	ldrb.w	r3, [r6, #160]	; 0xa0
    8980:	069a      	lsls	r2, r3, #26
    8982:	d518      	bpl.n	89b6 <conn_auto_initiate+0xce>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    8984:	f10d 010e 	add.w	r1, sp, #14
    8988:	a803      	add	r0, sp, #12
    898a:	f7ff fca5 	bl	82d8 <hci_le_read_max_data_len>
		if (!err) {
    898e:	b990      	cbnz	r0, 89b6 <conn_auto_initiate+0xce>
			err = bt_le_set_data_len(conn, tx_octets, tx_time);
    8990:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    8994:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8998:	4620      	mov	r0, r4
    899a:	f01a f8dc 	bl	22b56 <bt_le_set_data_len>
			if (err) {
    899e:	4601      	mov	r1, r0
    89a0:	b148      	cbz	r0, 89b6 <conn_auto_initiate+0xce>
    89a2:	4a0e      	ldr	r2, [pc, #56]	; (89dc <conn_auto_initiate+0xf4>)
    89a4:	4b0e      	ldr	r3, [pc, #56]	; (89e0 <conn_auto_initiate+0xf8>)
				BT_ERR("Failed to set data len (%d)", err);
    89a6:	4810      	ldr	r0, [pc, #64]	; (89e8 <conn_auto_initiate+0x100>)
    89a8:	1ad2      	subs	r2, r2, r3
    89aa:	08d2      	lsrs	r2, r2, #3
    89ac:	0192      	lsls	r2, r2, #6
    89ae:	f042 0201 	orr.w	r2, r2, #1
    89b2:	f018 f912 	bl	20bda <log_1>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    89b6:	78e3      	ldrb	r3, [r4, #3]
    89b8:	2b01      	cmp	r3, #1
    89ba:	d1b9      	bne.n	8930 <conn_auto_initiate+0x48>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    89bc:	4628      	mov	r0, r5
    89be:	f019 ffd0 	bl	22962 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    89c2:	05c3      	lsls	r3, r0, #23
    89c4:	d4b4      	bmi.n	8930 <conn_auto_initiate+0x48>
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    89c6:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    89ca:	2300      	movs	r3, #0
    89cc:	f104 0158 	add.w	r1, r4, #88	; 0x58
    89d0:	4806      	ldr	r0, [pc, #24]	; (89ec <conn_auto_initiate+0x104>)
    89d2:	f017 fa81 	bl	1fed8 <k_delayed_work_submit_to_queue>
    89d6:	e7ab      	b.n	8930 <conn_auto_initiate+0x48>
    89d8:	20000000 	.word	0x20000000
    89dc:	0002662c 	.word	0x0002662c
    89e0:	00026544 	.word	0x00026544
    89e4:	0002935c 	.word	0x0002935c
    89e8:	00029376 	.word	0x00029376
    89ec:	20001510 	.word	0x20001510

000089f0 <le_phy_update_complete>:
{
    89f0:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    89f2:	6883      	ldr	r3, [r0, #8]
    89f4:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    89f8:	4628      	mov	r0, r5
    89fa:	f001 fea5 	bl	a748 <bt_conn_lookup_handle>
	if (!conn) {
    89fe:	4604      	mov	r4, r0
    8a00:	b960      	cbnz	r0, 8a1c <le_phy_update_complete+0x2c>
    8a02:	4b11      	ldr	r3, [pc, #68]	; (8a48 <le_phy_update_complete+0x58>)
    8a04:	4a11      	ldr	r2, [pc, #68]	; (8a4c <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8a06:	4812      	ldr	r0, [pc, #72]	; (8a50 <le_phy_update_complete+0x60>)
    8a08:	1ad2      	subs	r2, r2, r3
    8a0a:	08d2      	lsrs	r2, r2, #3
    8a0c:	0192      	lsls	r2, r2, #6
    8a0e:	4629      	mov	r1, r5
    8a10:	f042 0201 	orr.w	r2, r2, #1
}
    8a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8a18:	f018 b8df 	b.w	20bda <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    8a1c:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8a1e:	f06f 0180 	mvn.w	r1, #128	; 0x80
    8a22:	4628      	mov	r0, r5
    8a24:	f019 ffa9 	bl	2297a <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    8a28:	0603      	lsls	r3, r0, #24
    8a2a:	d507      	bpl.n	8a3c <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    8a30:	4628      	mov	r0, r5
    8a32:	f019 ffb1 	bl	22998 <atomic_or>
		conn_auto_initiate(conn);
    8a36:	4620      	mov	r0, r4
    8a38:	f7ff ff56 	bl	88e8 <conn_auto_initiate>
	bt_conn_unref(conn);
    8a3c:	4620      	mov	r0, r4
}
    8a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    8a42:	f01a ba39 	b.w	22eb8 <bt_conn_unref>
    8a46:	bf00      	nop
    8a48:	00026544 	.word	0x00026544
    8a4c:	0002662c 	.word	0x0002662c
    8a50:	00029079 	.word	0x00029079

00008a54 <le_remote_feat_complete>:
{
    8a54:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    8a56:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8a58:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8a5c:	4630      	mov	r0, r6
    8a5e:	f001 fe73 	bl	a748 <bt_conn_lookup_handle>
	if (!conn) {
    8a62:	4604      	mov	r4, r0
    8a64:	b960      	cbnz	r0, 8a80 <le_remote_feat_complete+0x2c>
    8a66:	4a10      	ldr	r2, [pc, #64]	; (8aa8 <le_remote_feat_complete+0x54>)
    8a68:	4b10      	ldr	r3, [pc, #64]	; (8aac <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8a6a:	4811      	ldr	r0, [pc, #68]	; (8ab0 <le_remote_feat_complete+0x5c>)
    8a6c:	1ad2      	subs	r2, r2, r3
    8a6e:	08d2      	lsrs	r2, r2, #3
    8a70:	0192      	lsls	r2, r2, #6
    8a72:	4631      	mov	r1, r6
    8a74:	f042 0201 	orr.w	r2, r2, #1
}
    8a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8a7c:	f018 b8ad 	b.w	20bda <log_1>
	if (!evt->status) {
    8a80:	782b      	ldrb	r3, [r5, #0]
    8a82:	b923      	cbnz	r3, 8a8e <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    8a84:	2208      	movs	r2, #8
    8a86:	1ce9      	adds	r1, r5, #3
    8a88:	30ac      	adds	r0, #172	; 0xac
    8a8a:	f019 fe49 	bl	22720 <memcpy>
    8a8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    8a92:	1d20      	adds	r0, r4, #4
    8a94:	f019 ff80 	bl	22998 <atomic_or>
	conn_auto_initiate(conn);
    8a98:	4620      	mov	r0, r4
    8a9a:	f7ff ff25 	bl	88e8 <conn_auto_initiate>
	bt_conn_unref(conn);
    8a9e:	4620      	mov	r0, r4
}
    8aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8aa4:	f01a ba08 	b.w	22eb8 <bt_conn_unref>
    8aa8:	0002662c 	.word	0x0002662c
    8aac:	00026544 	.word	0x00026544
    8ab0:	00029079 	.word	0x00029079

00008ab4 <bt_id_add>:
{
    8ab4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    8ab8:	4f63      	ldr	r7, [pc, #396]	; (8c48 <bt_id_add+0x194>)
    8aba:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
    8abe:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
{
    8ac2:	4604      	mov	r4, r0
    8ac4:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    8ac6:	b10a      	cbz	r2, 8acc <bt_id_add+0x18>
    8ac8:	429a      	cmp	r2, r3
    8aca:	d209      	bcs.n	8ae0 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
    8acc:	3301      	adds	r3, #1
    8ace:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state |= BT_KEYS_ID_ADDED;
    8ad2:	7a23      	ldrb	r3, [r4, #8]
    8ad4:	f043 0304 	orr.w	r3, r3, #4
    8ad8:	7223      	strb	r3, [r4, #8]
}
    8ada:	b002      	add	sp, #8
    8adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    8ae0:	2100      	movs	r1, #0
    8ae2:	2205      	movs	r2, #5
    8ae4:	4608      	mov	r0, r1
    8ae6:	f001 feb3 	bl	a850 <bt_conn_lookup_state_le>
	if (conn) {
    8aea:	4606      	mov	r6, r0
    8aec:	b168      	cbz	r0, 8b0a <bt_id_add+0x56>
    8aee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    8af2:	f107 0098 	add.w	r0, r7, #152	; 0x98
    8af6:	f019 ff4f 	bl	22998 <atomic_or>
	keys->state |= flag;
    8afa:	7a23      	ldrb	r3, [r4, #8]
    8afc:	f043 0301 	orr.w	r3, r3, #1
    8b00:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    8b02:	4630      	mov	r0, r6
    8b04:	f01a f9d8 	bl	22eb8 <bt_conn_unref>
		return;
    8b08:	e7e7      	b.n	8ada <bt_id_add+0x26>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8b0a:	f107 0098 	add.w	r0, r7, #152	; 0x98
    8b0e:	f019 ff28 	bl	22962 <atomic_get>
	func(&bt_dev.adv, data);
    8b12:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8b14:	f3c0 1740 	ubfx	r7, r0, #5, #1
    8b18:	f105 0018 	add.w	r0, r5, #24
    8b1c:	f019 ff89 	bl	22a32 <adv_pause_enabled>
	if (scan_enabled) {
    8b20:	b117      	cbz	r7, 8b28 <bt_id_add+0x74>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    8b22:	4630      	mov	r0, r6
    8b24:	f019 fff3 	bl	22b0e <set_le_scan_enable>
	if (bt_dev.le.rl_entries) {
    8b28:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    8b2c:	b173      	cbz	r3, 8b4c <bt_id_add+0x98>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    8b2e:	2000      	movs	r0, #0
    8b30:	f019 ffd5 	bl	22ade <addr_res_enable>
		if (err) {
    8b34:	b150      	cbz	r0, 8b4c <bt_id_add+0x98>
    8b36:	4945      	ldr	r1, [pc, #276]	; (8c4c <bt_id_add+0x198>)
    8b38:	4b45      	ldr	r3, [pc, #276]	; (8c50 <bt_id_add+0x19c>)
			BT_WARN("Failed to disable address resolution");
    8b3a:	4846      	ldr	r0, [pc, #280]	; (8c54 <bt_id_add+0x1a0>)
    8b3c:	1ac9      	subs	r1, r1, r3
    8b3e:	08c9      	lsrs	r1, r1, #3
    8b40:	0189      	lsls	r1, r1, #6
    8b42:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    8b46:	f018 f83b 	bl	20bc0 <log_0>
	if (err) {
    8b4a:	e023      	b.n	8b94 <bt_id_add+0xe0>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    8b4c:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    8b50:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    8b54:	429a      	cmp	r2, r3
    8b56:	d129      	bne.n	8bac <bt_id_add+0xf8>
    8b58:	4b3d      	ldr	r3, [pc, #244]	; (8c50 <bt_id_add+0x19c>)
    8b5a:	4e3c      	ldr	r6, [pc, #240]	; (8c4c <bt_id_add+0x198>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    8b5c:	483e      	ldr	r0, [pc, #248]	; (8c58 <bt_id_add+0x1a4>)
    8b5e:	1af6      	subs	r6, r6, r3
    8b60:	08f6      	lsrs	r6, r6, #3
    8b62:	01b6      	lsls	r6, r6, #6
    8b64:	f046 0102 	orr.w	r1, r6, #2
    8b68:	f018 f82a 	bl	20bc0 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    8b6c:	2200      	movs	r2, #0
    8b6e:	4611      	mov	r1, r2
    8b70:	f242 0029 	movw	r0, #8233	; 0x2029
    8b74:	f7ff fb38 	bl	81e8 <bt_hci_cmd_send_sync>
		if (err) {
    8b78:	b118      	cbz	r0, 8b82 <bt_id_add+0xce>
			BT_ERR("Failed to clear resolution list");
    8b7a:	4838      	ldr	r0, [pc, #224]	; (8c5c <bt_id_add+0x1a8>)
    8b7c:	f046 0101 	orr.w	r1, r6, #1
    8b80:	e7e1      	b.n	8b46 <bt_id_add+0x92>
		bt_dev.le.rl_entries++;
    8b82:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    8b86:	3301      	adds	r3, #1
    8b88:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state |= BT_KEYS_ID_ADDED;
    8b8c:	7a23      	ldrb	r3, [r4, #8]
    8b8e:	f043 0304 	orr.w	r3, r3, #4
    8b92:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    8b94:	2001      	movs	r0, #1
    8b96:	f019 ffa2 	bl	22ade <addr_res_enable>
	if (scan_enabled) {
    8b9a:	b117      	cbz	r7, 8ba2 <bt_id_add+0xee>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    8b9c:	2001      	movs	r0, #1
    8b9e:	f019 ffb6 	bl	22b0e <set_le_scan_enable>
	func(&bt_dev.adv, data);
    8ba2:	482f      	ldr	r0, [pc, #188]	; (8c60 <bt_id_add+0x1ac>)
    8ba4:	2100      	movs	r1, #0
    8ba6:	f019 ff59 	bl	22a5c <adv_unpause_enabled>
}
    8baa:	e796      	b.n	8ada <bt_id_add+0x26>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    8bac:	f104 0801 	add.w	r8, r4, #1
    8bb0:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    8bb4:	4640      	mov	r0, r8
    8bb6:	f019 ff61 	bl	22a7c <hci_id_add.isra.0>
	if (err) {
    8bba:	4606      	mov	r6, r0
    8bbc:	b140      	cbz	r0, 8bd0 <bt_id_add+0x11c>
    8bbe:	4923      	ldr	r1, [pc, #140]	; (8c4c <bt_id_add+0x198>)
    8bc0:	4b23      	ldr	r3, [pc, #140]	; (8c50 <bt_id_add+0x19c>)
		BT_ERR("Failed to add IRK to controller");
    8bc2:	4828      	ldr	r0, [pc, #160]	; (8c64 <bt_id_add+0x1b0>)
    8bc4:	1ac9      	subs	r1, r1, r3
    8bc6:	08c9      	lsrs	r1, r1, #3
    8bc8:	0189      	lsls	r1, r1, #6
    8bca:	f041 0101 	orr.w	r1, r1, #1
    8bce:	e7ba      	b.n	8b46 <bt_id_add+0x92>
	bt_dev.le.rl_entries++;
    8bd0:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    8bd4:	3301      	adds	r3, #1
    8bd6:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
	keys->state |= BT_KEYS_ID_ADDED;
    8bda:	7a23      	ldrb	r3, [r4, #8]
    8bdc:	f043 0304 	orr.w	r3, r3, #4
    8be0:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    8be2:	f895 306f 	ldrb.w	r3, [r5, #111]	; 0x6f
    8be6:	075b      	lsls	r3, r3, #29
    8be8:	d408      	bmi.n	8bfc <bt_id_add+0x148>
    8bea:	4918      	ldr	r1, [pc, #96]	; (8c4c <bt_id_add+0x198>)
    8bec:	4b18      	ldr	r3, [pc, #96]	; (8c50 <bt_id_add+0x19c>)
		BT_WARN("Set privacy mode command is not supported");
    8bee:	481e      	ldr	r0, [pc, #120]	; (8c68 <bt_id_add+0x1b4>)
    8bf0:	1ac9      	subs	r1, r1, r3
    8bf2:	08c9      	lsrs	r1, r1, #3
    8bf4:	0189      	lsls	r1, r1, #6
    8bf6:	f041 0102 	orr.w	r1, r1, #2
    8bfa:	e7a4      	b.n	8b46 <bt_id_add+0x92>
	bt_addr_le_copy(&cp.id_addr, addr);
    8bfc:	4641      	mov	r1, r8
    8bfe:	4668      	mov	r0, sp
    8c00:	f019 feb5 	bl	2296e <bt_addr_le_copy>
	cp.mode = mode;
    8c04:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    8c06:	2108      	movs	r1, #8
    8c08:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    8c0c:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    8c10:	f7ff f98e 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
    8c14:	4604      	mov	r4, r0
    8c16:	b940      	cbnz	r0, 8c2a <bt_id_add+0x176>
    8c18:	490c      	ldr	r1, [pc, #48]	; (8c4c <bt_id_add+0x198>)
    8c1a:	4b0d      	ldr	r3, [pc, #52]	; (8c50 <bt_id_add+0x19c>)
		BT_ERR("Failed to set privacy mode");
    8c1c:	4813      	ldr	r0, [pc, #76]	; (8c6c <bt_id_add+0x1b8>)
    8c1e:	1ac9      	subs	r1, r1, r3
    8c20:	08c9      	lsrs	r1, r1, #3
    8c22:	0189      	lsls	r1, r1, #6
    8c24:	f041 0101 	orr.w	r1, r1, #1
    8c28:	e78d      	b.n	8b46 <bt_id_add+0x92>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    8c2a:	2208      	movs	r2, #8
    8c2c:	4669      	mov	r1, sp
    8c2e:	4410      	add	r0, r2
    8c30:	f01c fbe2 	bl	253f8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    8c34:	4632      	mov	r2, r6
    8c36:	4621      	mov	r1, r4
    8c38:	f242 004e 	movw	r0, #8270	; 0x204e
    8c3c:	f7ff fad4 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
    8c40:	2800      	cmp	r0, #0
    8c42:	d0a7      	beq.n	8b94 <bt_id_add+0xe0>
    8c44:	e7e8      	b.n	8c18 <bt_id_add+0x164>
    8c46:	bf00      	nop
    8c48:	20000000 	.word	0x20000000
    8c4c:	0002662c 	.word	0x0002662c
    8c50:	00026544 	.word	0x00026544
    8c54:	00029392 	.word	0x00029392
    8c58:	000293b7 	.word	0x000293b7
    8c5c:	000293e8 	.word	0x000293e8
    8c60:	20000018 	.word	0x20000018
    8c64:	00029408 	.word	0x00029408
    8c68:	00029428 	.word	0x00029428
    8c6c:	00029452 	.word	0x00029452

00008c70 <bt_id_del>:
{
    8c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    8c74:	4e4c      	ldr	r6, [pc, #304]	; (8da8 <bt_id_del+0x138>)
    8c76:	f896 20cc 	ldrb.w	r2, [r6, #204]	; 0xcc
    8c7a:	f896 30cd 	ldrb.w	r3, [r6, #205]	; 0xcd
{
    8c7e:	4604      	mov	r4, r0
    8c80:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size ||
    8c82:	b112      	cbz	r2, 8c8a <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    8c84:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    8c86:	4293      	cmp	r3, r2
    8c88:	dd08      	ble.n	8c9c <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    8c8a:	3b01      	subs	r3, #1
    8c8c:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state &= ~BT_KEYS_ID_ADDED;
    8c90:	7a23      	ldrb	r3, [r4, #8]
    8c92:	f023 0304 	bic.w	r3, r3, #4
    8c96:	7223      	strb	r3, [r4, #8]
}
    8c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    8c9c:	2100      	movs	r1, #0
    8c9e:	2205      	movs	r2, #5
    8ca0:	4608      	mov	r0, r1
    8ca2:	f001 fdd5 	bl	a850 <bt_conn_lookup_state_le>
	if (conn) {
    8ca6:	4607      	mov	r7, r0
    8ca8:	b170      	cbz	r0, 8cc8 <bt_id_del+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8caa:	f106 0098 	add.w	r0, r6, #152	; 0x98
    8cae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    8cb2:	f019 fe71 	bl	22998 <atomic_or>
	keys->state |= flag;
    8cb6:	7a23      	ldrb	r3, [r4, #8]
    8cb8:	f043 0302 	orr.w	r3, r3, #2
    8cbc:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    8cbe:	4638      	mov	r0, r7
}
    8cc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    8cc4:	f01a b8f8 	b.w	22eb8 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8cc8:	f106 0098 	add.w	r0, r6, #152	; 0x98
    8ccc:	f019 fe49 	bl	22962 <atomic_get>
	func(&bt_dev.adv, data);
    8cd0:	4639      	mov	r1, r7
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8cd2:	f3c0 1640 	ubfx	r6, r0, #5, #1
    8cd6:	f105 0018 	add.w	r0, r5, #24
    8cda:	f019 feaa 	bl	22a32 <adv_pause_enabled>
	if (scan_enabled) {
    8cde:	b116      	cbz	r6, 8ce6 <bt_id_del+0x76>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    8ce0:	4638      	mov	r0, r7
    8ce2:	f019 ff14 	bl	22b0e <set_le_scan_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    8ce6:	2000      	movs	r0, #0
    8ce8:	f019 fef9 	bl	22ade <addr_res_enable>
	if (err) {
    8cec:	4607      	mov	r7, r0
    8cee:	b1d0      	cbz	r0, 8d26 <bt_id_del+0xb6>
    8cf0:	4a2e      	ldr	r2, [pc, #184]	; (8dac <bt_id_del+0x13c>)
    8cf2:	4b2f      	ldr	r3, [pc, #188]	; (8db0 <bt_id_del+0x140>)
    8cf4:	1ad2      	subs	r2, r2, r3
    8cf6:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    8cf8:	0192      	lsls	r2, r2, #6
    8cfa:	4601      	mov	r1, r0
    8cfc:	f042 0201 	orr.w	r2, r2, #1
    8d00:	482c      	ldr	r0, [pc, #176]	; (8db4 <bt_id_del+0x144>)
    8d02:	f017 ff6a 	bl	20bda <log_1>
	if (bt_dev.le.rl_entries) {
    8d06:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    8d0a:	b113      	cbz	r3, 8d12 <bt_id_del+0xa2>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    8d0c:	2001      	movs	r0, #1
    8d0e:	f019 fee6 	bl	22ade <addr_res_enable>
	if (scan_enabled) {
    8d12:	b116      	cbz	r6, 8d1a <bt_id_del+0xaa>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    8d14:	2001      	movs	r0, #1
    8d16:	f019 fefa 	bl	22b0e <set_le_scan_enable>
}
    8d1a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	func(&bt_dev.adv, data);
    8d1e:	4826      	ldr	r0, [pc, #152]	; (8db8 <bt_id_del+0x148>)
    8d20:	2100      	movs	r1, #0
    8d22:	f019 be9b 	b.w	22a5c <adv_unpause_enabled>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    8d26:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    8d2a:	f895 20cc 	ldrb.w	r2, [r5, #204]	; 0xcc
    8d2e:	429a      	cmp	r2, r3
    8d30:	d20c      	bcs.n	8d4c <bt_id_del+0xdc>
		bt_dev.le.rl_entries--;
    8d32:	3b01      	subs	r3, #1
    8d34:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state &= ~BT_KEYS_ID_ADDED;
    8d38:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    8d3a:	4920      	ldr	r1, [pc, #128]	; (8dbc <bt_id_del+0x14c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    8d3c:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    8d40:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    8d42:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    8d44:	2002      	movs	r0, #2
    8d46:	f007 fcf3 	bl	10730 <bt_keys_foreach>
		goto done;
    8d4a:	e7dc      	b.n	8d06 <bt_id_del+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    8d4c:	2107      	movs	r1, #7
    8d4e:	f242 0028 	movw	r0, #8232	; 0x2028
    8d52:	f7ff f8ed 	bl	7f30 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    8d56:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
    8d5a:	4680      	mov	r8, r0
    8d5c:	b950      	cbnz	r0, 8d74 <bt_id_del+0x104>
    8d5e:	4b14      	ldr	r3, [pc, #80]	; (8db0 <bt_id_del+0x140>)
    8d60:	4912      	ldr	r1, [pc, #72]	; (8dac <bt_id_del+0x13c>)
		BT_ERR("Failed to remove IRK from controller");
    8d62:	4817      	ldr	r0, [pc, #92]	; (8dc0 <bt_id_del+0x150>)
    8d64:	1ac9      	subs	r1, r1, r3
    8d66:	08c9      	lsrs	r1, r1, #3
    8d68:	0189      	lsls	r1, r1, #6
    8d6a:	f041 0101 	orr.w	r1, r1, #1
    8d6e:	f017 ff27 	bl	20bc0 <log_0>
		goto done;
    8d72:	e7c8      	b.n	8d06 <bt_id_del+0x96>
	cp = net_buf_add(buf, sizeof(*cp));
    8d74:	2107      	movs	r1, #7
    8d76:	3008      	adds	r0, #8
    8d78:	f01c fb38 	bl	253ec <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    8d7c:	4649      	mov	r1, r9
    8d7e:	f019 fdf6 	bl	2296e <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    8d82:	463a      	mov	r2, r7
    8d84:	4641      	mov	r1, r8
    8d86:	f242 0028 	movw	r0, #8232	; 0x2028
    8d8a:	f7ff fa2d 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
    8d8e:	2800      	cmp	r0, #0
    8d90:	d1e5      	bne.n	8d5e <bt_id_del+0xee>
	bt_dev.le.rl_entries--;
    8d92:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    8d96:	3b01      	subs	r3, #1
    8d98:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
	keys->state &= ~BT_KEYS_ID_ADDED;
    8d9c:	7a23      	ldrb	r3, [r4, #8]
    8d9e:	f023 0304 	bic.w	r3, r3, #4
    8da2:	7223      	strb	r3, [r4, #8]
    8da4:	e7af      	b.n	8d06 <bt_id_del+0x96>
    8da6:	bf00      	nop
    8da8:	20000000 	.word	0x20000000
    8dac:	0002662c 	.word	0x0002662c
    8db0:	00026544 	.word	0x00026544
    8db4:	0002946d 	.word	0x0002946d
    8db8:	20000018 	.word	0x20000018
    8dbc:	00022acd 	.word	0x00022acd
    8dc0:	0002949a 	.word	0x0002949a

00008dc4 <bt_le_scan_update>:
{
    8dc4:	b570      	push	{r4, r5, r6, lr}
    8dc6:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8dc8:	481c      	ldr	r0, [pc, #112]	; (8e3c <bt_le_scan_update+0x78>)
    8dca:	f019 fdca 	bl	22962 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8dce:	0641      	lsls	r1, r0, #25
    8dd0:	f3c0 1380 	ubfx	r3, r0, #6, #1
    8dd4:	d501      	bpl.n	8dda <bt_le_scan_update+0x16>
			return 0;
    8dd6:	2000      	movs	r0, #0
    8dd8:	e02c      	b.n	8e34 <bt_le_scan_update+0x70>
    8dda:	4818      	ldr	r0, [pc, #96]	; (8e3c <bt_le_scan_update+0x78>)
    8ddc:	f019 fdc1 	bl	22962 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    8de0:	0682      	lsls	r2, r0, #26
    8de2:	d422      	bmi.n	8e2a <bt_le_scan_update+0x66>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    8de4:	2100      	movs	r1, #0
    8de6:	2205      	movs	r2, #5
    8de8:	4608      	mov	r0, r1
    8dea:	f001 fd31 	bl	a850 <bt_conn_lookup_state_le>
		if (conn) {
    8dee:	4604      	mov	r4, r0
    8df0:	bb08      	cbnz	r0, 8e36 <bt_le_scan_update+0x72>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    8df2:	2201      	movs	r2, #1
    8df4:	4601      	mov	r1, r0
    8df6:	f001 fd2b 	bl	a850 <bt_conn_lookup_state_le>
		if (!conn) {
    8dfa:	4605      	mov	r5, r0
    8dfc:	2800      	cmp	r0, #0
    8dfe:	d0ea      	beq.n	8dd6 <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8e00:	f44f 7180 	mov.w	r1, #256	; 0x100
    8e04:	480d      	ldr	r0, [pc, #52]	; (8e3c <bt_le_scan_update+0x78>)
    8e06:	f019 fdc7 	bl	22998 <atomic_or>
		bt_conn_unref(conn);
    8e0a:	4628      	mov	r0, r5
    8e0c:	f01a f854 	bl	22eb8 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    8e10:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    8e12:	4620      	mov	r0, r4
    8e14:	bf18      	it	ne
    8e16:	2230      	movne	r2, #48	; 0x30
}
    8e18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    8e1c:	bf0a      	itet	eq
    8e1e:	2212      	moveq	r2, #18
    8e20:	2160      	movne	r1, #96	; 0x60
    8e22:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    8e26:	f7ff bc7b 	b.w	8720 <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    8e2a:	4618      	mov	r0, r3
    8e2c:	f7ff faec 	bl	8408 <set_le_scan_enable_legacy>
		if (err) {
    8e30:	2800      	cmp	r0, #0
    8e32:	d0d7      	beq.n	8de4 <bt_le_scan_update+0x20>
}
    8e34:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    8e36:	f01a f83f 	bl	22eb8 <bt_conn_unref>
    8e3a:	e7cc      	b.n	8dd6 <bt_le_scan_update+0x12>
    8e3c:	20000098 	.word	0x20000098

00008e40 <le_adv_report>:
{
    8e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t num_reports = net_buf_pull_u8(buf);
    8e44:	f100 0708 	add.w	r7, r0, #8
{
    8e48:	b08f      	sub	sp, #60	; 0x3c
    8e4a:	4604      	mov	r4, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
    8e4c:	4638      	mov	r0, r7
    8e4e:	f01c fb12 	bl	25476 <net_buf_simple_pull_u8>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8e52:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 9034 <le_adv_report+0x1f4>
	if (scan_dev_found_cb) {
    8e56:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 9038 <le_adv_report+0x1f8>
	uint8_t num_reports = net_buf_pull_u8(buf);
    8e5a:	9002      	str	r0, [sp, #8]
	while (num_reports--) {
    8e5c:	9b02      	ldr	r3, [sp, #8]
    8e5e:	b163      	cbz	r3, 8e7a <le_adv_report+0x3a>
		if (buf->len < sizeof(*evt)) {
    8e60:	89a3      	ldrh	r3, [r4, #12]
    8e62:	2b08      	cmp	r3, #8
    8e64:	d80c      	bhi.n	8e80 <le_adv_report+0x40>
    8e66:	496e      	ldr	r1, [pc, #440]	; (9020 <le_adv_report+0x1e0>)
    8e68:	4b6e      	ldr	r3, [pc, #440]	; (9024 <le_adv_report+0x1e4>)
			BT_ERR("Unexpected end of buffer");
    8e6a:	486f      	ldr	r0, [pc, #444]	; (9028 <le_adv_report+0x1e8>)
    8e6c:	1ac9      	subs	r1, r1, r3
    8e6e:	08c9      	lsrs	r1, r1, #3
    8e70:	0189      	lsls	r1, r1, #6
    8e72:	f041 0101 	orr.w	r1, r1, #1
    8e76:	f017 fea3 	bl	20bc0 <log_0>
}
    8e7a:	b00f      	add	sp, #60	; 0x3c
    8e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    8e80:	2109      	movs	r1, #9
    8e82:	4638      	mov	r0, r7
    8e84:	f01c faef 	bl	25466 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    8e88:	7a03      	ldrb	r3, [r0, #8]
    8e8a:	9301      	str	r3, [sp, #4]
    8e8c:	18c3      	adds	r3, r0, r3
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    8e8e:	4606      	mov	r6, r0
		adv_info.rssi = evt->data[evt->length];
    8e90:	7a5b      	ldrb	r3, [r3, #9]
    8e92:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    8e96:	2301      	movs	r3, #1
    8e98:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    8e9c:	237f      	movs	r3, #127	; 0x7f
    8e9e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		adv_info.sid = BT_GAP_SID_INVALID;
    8ea2:	23ff      	movs	r3, #255	; 0xff
    8ea4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		adv_info.adv_type = evt->evt_type;
    8ea8:	7803      	ldrb	r3, [r0, #0]
    8eaa:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	switch (evt_type) {
    8eae:	2b04      	cmp	r3, #4
    8eb0:	bf96      	itet	ls
    8eb2:	4a5e      	ldrls	r2, [pc, #376]	; (902c <le_adv_report+0x1ec>)
		adv_info.adv_type = evt->evt_type;
    8eb4:	2300      	movhi	r3, #0
    8eb6:	5cd3      	ldrbls	r3, [r2, r3]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    8eb8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    8ebc:	f100 0a01 	add.w	sl, r0, #1
    8ec0:	4648      	mov	r0, r9
    8ec2:	f019 fd4e 	bl	22962 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    8ec6:	0645      	lsls	r5, r0, #25
    8ec8:	d50d      	bpl.n	8ee6 <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    8eca:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    8ece:	0758      	lsls	r0, r3, #29
    8ed0:	d509      	bpl.n	8ee6 <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    8ed2:	7a31      	ldrb	r1, [r6, #8]
    8ed4:	4638      	mov	r0, r7
    8ed6:	3101      	adds	r1, #1
    8ed8:	f01c fabd 	bl	25456 <net_buf_simple_pull>
    8edc:	9b02      	ldr	r3, [sp, #8]
    8ede:	1e58      	subs	r0, r3, #1
    8ee0:	b2c3      	uxtb	r3, r0
    8ee2:	9302      	str	r3, [sp, #8]
    8ee4:	e7ba      	b.n	8e5c <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    8ee6:	7873      	ldrb	r3, [r6, #1]
    8ee8:	1e9a      	subs	r2, r3, #2
    8eea:	2a01      	cmp	r2, #1
    8eec:	f10d 081c 	add.w	r8, sp, #28
    8ef0:	d853      	bhi.n	8f9a <le_adv_report+0x15a>
		bt_addr_le_copy(&id_addr, addr);
    8ef2:	4651      	mov	r1, sl
    8ef4:	4640      	mov	r0, r8
    8ef6:	f019 fd3a 	bl	2296e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8efa:	f89d 301c 	ldrb.w	r3, [sp, #28]
    8efe:	3b02      	subs	r3, #2
    8f00:	f88d 301c 	strb.w	r3, [sp, #28]
	if (scan_dev_found_cb) {
    8f04:	f8db 3000 	ldr.w	r3, [fp]
	info->addr = &id_addr;
    8f08:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	if (scan_dev_found_cb) {
    8f0c:	b1bb      	cbz	r3, 8f3e <le_adv_report+0xfe>
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    8f0e:	4638      	mov	r0, r7
    8f10:	f01c fac1 	bl	25496 <net_buf_simple_headroom>
	state->len = buf->len;
    8f14:	89a3      	ldrh	r3, [r4, #12]
    8f16:	9304      	str	r3, [sp, #16]
		buf->len = len;
    8f18:	9b01      	ldr	r3, [sp, #4]
	state->offset = net_buf_simple_headroom(buf);
    8f1a:	9003      	str	r0, [sp, #12]
    8f1c:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    8f1e:	4640      	mov	r0, r8
    8f20:	463b      	mov	r3, r7
    8f22:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    8f26:	f99d 1031 	ldrsb.w	r1, [sp, #49]	; 0x31
    8f2a:	f8db 5000 	ldr.w	r5, [fp]
    8f2e:	47a8      	blx	r5
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    8f30:	9b03      	ldr	r3, [sp, #12]
    8f32:	6920      	ldr	r0, [r4, #16]
    8f34:	fa10 f083 	uxtah	r0, r0, r3
	buf->len = state->len;
    8f38:	9b04      	ldr	r3, [sp, #16]
	buf->data = buf->__buf + state->offset;
    8f3a:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    8f3c:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    8f3e:	4b3c      	ldr	r3, [pc, #240]	; (9030 <le_adv_report+0x1f0>)
    8f40:	681d      	ldr	r5, [r3, #0]
    8f42:	2d00      	cmp	r5, #0
    8f44:	d13a      	bne.n	8fbc <le_adv_report+0x17c>
    8f46:	4648      	mov	r0, r9
	check_pending_conn(&id_addr, addr, info->adv_props);
    8f48:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    8f4c:	f019 fd09 	bl	22962 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8f50:	0641      	lsls	r1, r0, #25
    8f52:	f3c0 1580 	ubfx	r5, r0, #6, #1
    8f56:	d4bc      	bmi.n	8ed2 <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    8f58:	07da      	lsls	r2, r3, #31
    8f5a:	d5ba      	bpl.n	8ed2 <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    8f5c:	4641      	mov	r1, r8
    8f5e:	2201      	movs	r2, #1
    8f60:	4628      	mov	r0, r5
    8f62:	f001 fc75 	bl	a850 <bt_conn_lookup_state_le>
	if (!conn) {
    8f66:	4680      	mov	r8, r0
    8f68:	2800      	cmp	r0, #0
    8f6a:	d0b2      	beq.n	8ed2 <le_adv_report+0x92>
    8f6c:	4648      	mov	r0, r9
    8f6e:	f019 fcf8 	bl	22962 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    8f72:	0683      	lsls	r3, r0, #26
    8f74:	d440      	bmi.n	8ff8 <le_adv_report+0x1b8>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    8f76:	f108 0096 	add.w	r0, r8, #150	; 0x96
    8f7a:	4651      	mov	r1, sl
    8f7c:	f019 fcf7 	bl	2296e <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    8f80:	4640      	mov	r0, r8
    8f82:	f7ff fc21 	bl	87c8 <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    8f86:	2800      	cmp	r0, #0
    8f88:	d13b      	bne.n	9002 <le_adv_report+0x1c2>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    8f8a:	4640      	mov	r0, r8
    8f8c:	2105      	movs	r1, #5
    8f8e:	f001 fadb 	bl	a548 <bt_conn_set_state>
	bt_conn_unref(conn);
    8f92:	4640      	mov	r0, r8
    8f94:	f019 ff90 	bl	22eb8 <bt_conn_unref>
	return;
    8f98:	e79b      	b.n	8ed2 <le_adv_report+0x92>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    8f9a:	2bff      	cmp	r3, #255	; 0xff
    8f9c:	d108      	bne.n	8fb0 <le_adv_report+0x170>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    8f9e:	2300      	movs	r3, #0
    8fa0:	9309      	str	r3, [sp, #36]	; 0x24
    8fa2:	a909      	add	r1, sp, #36	; 0x24
    8fa4:	f8cd 3027 	str.w	r3, [sp, #39]	; 0x27
		bt_addr_le_copy(&id_addr,
    8fa8:	4640      	mov	r0, r8
    8faa:	f019 fce0 	bl	2296e <bt_addr_le_copy>
    8fae:	e7a9      	b.n	8f04 <le_adv_report+0xc4>
    8fb0:	4651      	mov	r1, sl
    8fb2:	2000      	movs	r0, #0
    8fb4:	f019 fdad 	bl	22b12 <bt_lookup_id_addr>
    8fb8:	4601      	mov	r1, r0
    8fba:	e7f5      	b.n	8fa8 <le_adv_report+0x168>
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    8fbc:	3d08      	subs	r5, #8
    8fbe:	2d00      	cmp	r5, #0
    8fc0:	d0c1      	beq.n	8f46 <le_adv_report+0x106>
	state->offset = net_buf_simple_headroom(buf);
    8fc2:	4638      	mov	r0, r7
    8fc4:	f01c fa67 	bl	25496 <net_buf_simple_headroom>
	state->len = buf->len;
    8fc8:	89a3      	ldrh	r3, [r4, #12]
    8fca:	9304      	str	r3, [sp, #16]
		buf->len = len;
    8fcc:	9b01      	ldr	r3, [sp, #4]
    8fce:	81a3      	strh	r3, [r4, #12]
		listener->recv(info, &buf->b);
    8fd0:	462b      	mov	r3, r5
	state->offset = net_buf_simple_headroom(buf);
    8fd2:	9003      	str	r0, [sp, #12]
    8fd4:	f853 2b08 	ldr.w	r2, [r3], #8
    8fd8:	9305      	str	r3, [sp, #20]
    8fda:	a80b      	add	r0, sp, #44	; 0x2c
    8fdc:	4639      	mov	r1, r7
    8fde:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    8fe0:	9b03      	ldr	r3, [sp, #12]
    8fe2:	6920      	ldr	r0, [r4, #16]
    8fe4:	fa10 f083 	uxtah	r0, r0, r3
	buf->len = state->len;
    8fe8:	9b04      	ldr	r3, [sp, #16]
    8fea:	81a3      	strh	r3, [r4, #12]
Z_GENLIST_PEEK_NEXT(slist, snode)
    8fec:	9b05      	ldr	r3, [sp, #20]
	buf->data = buf->__buf + state->offset;
    8fee:	60a0      	str	r0, [r4, #8]
    8ff0:	2b00      	cmp	r3, #0
    8ff2:	d0a8      	beq.n	8f46 <le_adv_report+0x106>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8ff4:	68ad      	ldr	r5, [r5, #8]
	return node->next;
    8ff6:	e7a4      	b.n	8f42 <le_adv_report+0x102>
	return set_le_scan_enable_legacy(enable);
    8ff8:	4628      	mov	r0, r5
    8ffa:	f7ff fa05 	bl	8408 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    8ffe:	2800      	cmp	r0, #0
    9000:	d0b9      	beq.n	8f76 <le_adv_report+0x136>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    9002:	231f      	movs	r3, #31
    9004:	f888 300c 	strb.w	r3, [r8, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9008:	2100      	movs	r1, #0
    900a:	4640      	mov	r0, r8
    900c:	f001 fa9c 	bl	a548 <bt_conn_set_state>
	bt_conn_unref(conn);
    9010:	4640      	mov	r0, r8
    9012:	f019 ff51 	bl	22eb8 <bt_conn_unref>
	bt_le_scan_update(false);
    9016:	2000      	movs	r0, #0
    9018:	f7ff fed4 	bl	8dc4 <bt_le_scan_update>
    901c:	e759      	b.n	8ed2 <le_adv_report+0x92>
    901e:	bf00      	nop
    9020:	0002662c 	.word	0x0002662c
    9024:	00026544 	.word	0x00026544
    9028:	000294bf 	.word	0x000294bf
    902c:	0002994a 	.word	0x0002994a
    9030:	20001900 	.word	0x20001900
    9034:	20000098 	.word	0x20000098
    9038:	20001908 	.word	0x20001908

0000903c <id_create.isra.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    903c:	b530      	push	{r4, r5, lr}
    903e:	4d13      	ldr	r5, [pc, #76]	; (908c <id_create.isra.0+0x50>)
    9040:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9044:	b085      	sub	sp, #20
    9046:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9048:	460c      	mov	r4, r1
    904a:	b171      	cbz	r1, 906a <id_create.isra.0+0x2e>
    904c:	2300      	movs	r3, #0
    904e:	4669      	mov	r1, sp
    9050:	4620      	mov	r0, r4
    9052:	9300      	str	r3, [sp, #0]
    9054:	f8cd 3003 	str.w	r3, [sp, #3]
    9058:	f019 fc8c 	bl	22974 <bt_addr_le_cmp>
    905c:	b128      	cbz	r0, 906a <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    905e:	4621      	mov	r1, r4
    9060:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9062:	f019 fc84 	bl	2296e <bt_addr_le_copy>
}
    9066:	b005      	add	sp, #20
    9068:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    906a:	a802      	add	r0, sp, #8
    906c:	f019 fde6 	bl	22c3c <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    9070:	a802      	add	r0, sp, #8
    9072:	f7fe fac9 	bl	7608 <id_find>
    9076:	2800      	cmp	r0, #0
    9078:	daf7      	bge.n	906a <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    907a:	a902      	add	r1, sp, #8
    907c:	4628      	mov	r0, r5
    907e:	f019 fc76 	bl	2296e <bt_addr_le_copy>
		if (addr) {
    9082:	2c00      	cmp	r4, #0
    9084:	d0ef      	beq.n	9066 <id_create.isra.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9086:	4629      	mov	r1, r5
    9088:	4620      	mov	r0, r4
    908a:	e7ea      	b.n	9062 <id_create.isra.0+0x26>
    908c:	20000000 	.word	0x20000000

00009090 <bt_recv>:
{
    9090:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    9092:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    9094:	2901      	cmp	r1, #1
{
    9096:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    9098:	d04b      	beq.n	9132 <bt_recv+0xa2>
    909a:	2903      	cmp	r1, #3
    909c:	d17b      	bne.n	9196 <bt_recv+0x106>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    909e:	8983      	ldrh	r3, [r0, #12]
    90a0:	2b03      	cmp	r3, #3
    90a2:	d80c      	bhi.n	90be <bt_recv+0x2e>
    90a4:	4a44      	ldr	r2, [pc, #272]	; (91b8 <bt_recv+0x128>)
    90a6:	4945      	ldr	r1, [pc, #276]	; (91bc <bt_recv+0x12c>)
    90a8:	4845      	ldr	r0, [pc, #276]	; (91c0 <bt_recv+0x130>)
    90aa:	f240 5306 	movw	r3, #1286	; 0x506
    90ae:	f017 fac7 	bl	20640 <printk>
    90b2:	4040      	eors	r0, r0
    90b4:	f380 8811 	msr	BASEPRI, r0
    90b8:	f04f 0003 	mov.w	r0, #3
    90bc:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    90be:	2104      	movs	r1, #4
    90c0:	f104 0008 	add.w	r0, r4, #8
    90c4:	f01c f9cf 	bl	25466 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    90c8:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    90ca:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    90cc:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    90ce:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    90d0:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    90d4:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    90d6:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    90d8:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    90da:	d00d      	beq.n	90f8 <bt_recv+0x68>
    90dc:	4839      	ldr	r0, [pc, #228]	; (91c4 <bt_recv+0x134>)
    90de:	4b3a      	ldr	r3, [pc, #232]	; (91c8 <bt_recv+0x138>)
    90e0:	1a1b      	subs	r3, r3, r0
    90e2:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    90e4:	019b      	lsls	r3, r3, #6
    90e6:	4839      	ldr	r0, [pc, #228]	; (91cc <bt_recv+0x13c>)
    90e8:	f043 0301 	orr.w	r3, r3, #1
    90ec:	f017 fd89 	bl	20c02 <log_2>
	net_buf_unref(buf);
    90f0:	4620      	mov	r0, r4
    90f2:	f014 ff61 	bl	1dfb8 <net_buf_unref>
    90f6:	e01a      	b.n	912e <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    90f8:	f001 fb26 	bl	a748 <bt_conn_lookup_handle>
	if (!conn) {
    90fc:	4605      	mov	r5, r0
    90fe:	b958      	cbnz	r0, 9118 <bt_recv+0x88>
    9100:	4b30      	ldr	r3, [pc, #192]	; (91c4 <bt_recv+0x134>)
    9102:	4a31      	ldr	r2, [pc, #196]	; (91c8 <bt_recv+0x138>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    9104:	8ae1      	ldrh	r1, [r4, #22]
    9106:	4832      	ldr	r0, [pc, #200]	; (91d0 <bt_recv+0x140>)
    9108:	1ad2      	subs	r2, r2, r3
    910a:	08d2      	lsrs	r2, r2, #3
    910c:	0192      	lsls	r2, r2, #6
    910e:	f042 0201 	orr.w	r2, r2, #1
    9112:	f017 fd62 	bl	20bda <log_1>
		net_buf_unref(buf);
    9116:	e7eb      	b.n	90f0 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    9118:	f001 fe3c 	bl	ad94 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    911c:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    911e:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    9120:	4621      	mov	r1, r4
    9122:	4628      	mov	r0, r5
    9124:	f001 f850 	bl	a1c8 <bt_conn_recv>
	bt_conn_unref(conn);
    9128:	4628      	mov	r0, r5
    912a:	f019 fec5 	bl	22eb8 <bt_conn_unref>
		return 0;
    912e:	2000      	movs	r0, #0
}
    9130:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9132:	8983      	ldrh	r3, [r0, #12]
    9134:	2b01      	cmp	r3, #1
    9136:	d80c      	bhi.n	9152 <bt_recv+0xc2>
    9138:	4a1f      	ldr	r2, [pc, #124]	; (91b8 <bt_recv+0x128>)
    913a:	4920      	ldr	r1, [pc, #128]	; (91bc <bt_recv+0x12c>)
    913c:	4820      	ldr	r0, [pc, #128]	; (91c0 <bt_recv+0x130>)
    913e:	f241 437c 	movw	r3, #5244	; 0x147c
    9142:	f017 fa7d 	bl	20640 <printk>
    9146:	4040      	eors	r0, r0
    9148:	f380 8811 	msr	BASEPRI, r0
    914c:	f04f 0003 	mov.w	r0, #3
    9150:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9152:	2102      	movs	r1, #2
    9154:	f104 0008 	add.w	r0, r4, #8
    9158:	f01c f985 	bl	25466 <net_buf_simple_pull_mem>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    915c:	7802      	ldrb	r2, [r0, #0]
    915e:	2a1a      	cmp	r2, #26
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9160:	4605      	mov	r5, r0
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(uint8_t evt)
{
	switch (evt) {
    9162:	d811      	bhi.n	9188 <bt_recv+0xf8>
    9164:	2301      	movs	r3, #1
    9166:	4093      	lsls	r3, r2
    9168:	4a1a      	ldr	r2, [pc, #104]	; (91d4 <bt_recv+0x144>)
    916a:	4213      	tst	r3, r2
    916c:	d00c      	beq.n	9188 <bt_recv+0xf8>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    916e:	4a12      	ldr	r2, [pc, #72]	; (91b8 <bt_recv+0x128>)
    9170:	4919      	ldr	r1, [pc, #100]	; (91d8 <bt_recv+0x148>)
    9172:	4813      	ldr	r0, [pc, #76]	; (91c0 <bt_recv+0x130>)
    9174:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    9178:	f017 fa62 	bl	20640 <printk>
    917c:	4040      	eors	r0, r0
    917e:	f380 8811 	msr	BASEPRI, r0
    9182:	f04f 0003 	mov.w	r0, #3
    9186:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    9188:	4a14      	ldr	r2, [pc, #80]	; (91dc <bt_recv+0x14c>)
    918a:	7828      	ldrb	r0, [r5, #0]
    918c:	2305      	movs	r3, #5
    918e:	4621      	mov	r1, r4
    9190:	f7fe fc22 	bl	79d8 <handle_event>
    9194:	e7ac      	b.n	90f0 <bt_recv+0x60>
    9196:	4b0b      	ldr	r3, [pc, #44]	; (91c4 <bt_recv+0x134>)
    9198:	4a0b      	ldr	r2, [pc, #44]	; (91c8 <bt_recv+0x138>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    919a:	4811      	ldr	r0, [pc, #68]	; (91e0 <bt_recv+0x150>)
    919c:	1ad2      	subs	r2, r2, r3
    919e:	08d2      	lsrs	r2, r2, #3
    91a0:	0192      	lsls	r2, r2, #6
    91a2:	f042 0201 	orr.w	r2, r2, #1
    91a6:	f017 fd18 	bl	20bda <log_1>
		net_buf_unref(buf);
    91aa:	4620      	mov	r0, r4
    91ac:	f014 ff04 	bl	1dfb8 <net_buf_unref>
		return -EINVAL;
    91b0:	f06f 0015 	mvn.w	r0, #21
    91b4:	e7bc      	b.n	9130 <bt_recv+0xa0>
    91b6:	bf00      	nop
    91b8:	000291b9 	.word	0x000291b9
    91bc:	000294d8 	.word	0x000294d8
    91c0:	000291f6 	.word	0x000291f6
    91c4:	00026544 	.word	0x00026544
    91c8:	0002662c 	.word	0x0002662c
    91cc:	000294f1 	.word	0x000294f1
    91d0:	00029515 	.word	0x00029515
    91d4:	0408c000 	.word	0x0408c000
    91d8:	00029537 	.word	0x00029537
    91dc:	00026af4 	.word	0x00026af4
    91e0:	00029555 	.word	0x00029555

000091e4 <bt_recv_prio>:
{
    91e4:	b538      	push	{r3, r4, r5, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    91e6:	7d03      	ldrb	r3, [r0, #20]
    91e8:	2b01      	cmp	r3, #1
{
    91ea:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    91ec:	d00c      	beq.n	9208 <bt_recv_prio+0x24>
    91ee:	4a21      	ldr	r2, [pc, #132]	; (9274 <bt_recv_prio+0x90>)
    91f0:	4921      	ldr	r1, [pc, #132]	; (9278 <bt_recv_prio+0x94>)
    91f2:	4822      	ldr	r0, [pc, #136]	; (927c <bt_recv_prio+0x98>)
    91f4:	f641 1301 	movw	r3, #6401	; 0x1901
    91f8:	f017 fa22 	bl	20640 <printk>
    91fc:	4040      	eors	r0, r0
    91fe:	f380 8811 	msr	BASEPRI, r0
    9202:	f04f 0003 	mov.w	r0, #3
    9206:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9208:	89a3      	ldrh	r3, [r4, #12]
    920a:	2b01      	cmp	r3, #1
    920c:	d80c      	bhi.n	9228 <bt_recv_prio+0x44>
    920e:	4a19      	ldr	r2, [pc, #100]	; (9274 <bt_recv_prio+0x90>)
    9210:	491b      	ldr	r1, [pc, #108]	; (9280 <bt_recv_prio+0x9c>)
    9212:	481a      	ldr	r0, [pc, #104]	; (927c <bt_recv_prio+0x98>)
    9214:	f641 1302 	movw	r3, #6402	; 0x1902
    9218:	f017 fa12 	bl	20640 <printk>
    921c:	4040      	eors	r0, r0
    921e:	f380 8811 	msr	BASEPRI, r0
    9222:	f04f 0003 	mov.w	r0, #3
    9226:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9228:	2102      	movs	r1, #2
    922a:	f104 0008 	add.w	r0, r4, #8
    922e:	f01c f91a 	bl	25466 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    9232:	7802      	ldrb	r2, [r0, #0]
    9234:	2a1a      	cmp	r2, #26
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9236:	4605      	mov	r5, r0
    9238:	d804      	bhi.n	9244 <bt_recv_prio+0x60>
    923a:	2301      	movs	r3, #1
    923c:	4093      	lsls	r3, r2
    923e:	4a11      	ldr	r2, [pc, #68]	; (9284 <bt_recv_prio+0xa0>)
    9240:	4213      	tst	r3, r2
    9242:	d10c      	bne.n	925e <bt_recv_prio+0x7a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    9244:	4a0b      	ldr	r2, [pc, #44]	; (9274 <bt_recv_prio+0x90>)
    9246:	4910      	ldr	r1, [pc, #64]	; (9288 <bt_recv_prio+0xa4>)
    9248:	480c      	ldr	r0, [pc, #48]	; (927c <bt_recv_prio+0x98>)
    924a:	f641 1305 	movw	r3, #6405	; 0x1905
    924e:	f017 f9f7 	bl	20640 <printk>
    9252:	4040      	eors	r0, r0
    9254:	f380 8811 	msr	BASEPRI, r0
    9258:	f04f 0003 	mov.w	r0, #3
    925c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    925e:	4a0b      	ldr	r2, [pc, #44]	; (928c <bt_recv_prio+0xa8>)
    9260:	7828      	ldrb	r0, [r5, #0]
    9262:	2304      	movs	r3, #4
    9264:	4621      	mov	r1, r4
    9266:	f7fe fbb7 	bl	79d8 <handle_event>
	net_buf_unref(buf);
    926a:	4620      	mov	r0, r4
    926c:	f014 fea4 	bl	1dfb8 <net_buf_unref>
}
    9270:	2000      	movs	r0, #0
    9272:	bd38      	pop	{r3, r4, r5, pc}
    9274:	000291b9 	.word	0x000291b9
    9278:	00029569 	.word	0x00029569
    927c:	000291f6 	.word	0x000291f6
    9280:	000294d8 	.word	0x000294d8
    9284:	0408c000 	.word	0x0408c000
    9288:	00029538 	.word	0x00029538
    928c:	00026b2c 	.word	0x00026b2c

00009290 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    9290:	4a08      	ldr	r2, [pc, #32]	; (92b4 <bt_hci_driver_register+0x24>)
{
    9292:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    9294:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
    9298:	b930      	cbnz	r0, 92a8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    929a:	68d9      	ldr	r1, [r3, #12]
    929c:	b139      	cbz	r1, 92ae <bt_hci_driver_register+0x1e>
    929e:	6919      	ldr	r1, [r3, #16]
    92a0:	b129      	cbz	r1, 92ae <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    92a2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	return 0;
    92a6:	4770      	bx	lr
		return -EALREADY;
    92a8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    92ac:	4770      	bx	lr
		return -EINVAL;
    92ae:	f06f 0015 	mvn.w	r0, #21
}
    92b2:	4770      	bx	lr
    92b4:	20000000 	.word	0x20000000

000092b8 <bt_finalize_init>:
{
    92b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    92bc:	4c2d      	ldr	r4, [pc, #180]	; (9374 <bt_finalize_init+0xbc>)
    92be:	4d2e      	ldr	r5, [pc, #184]	; (9378 <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    92c0:	4e2e      	ldr	r6, [pc, #184]	; (937c <bt_finalize_init+0xc4>)
		BT_INFO("Identity[%d]: %s",
    92c2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 9394 <bt_finalize_init+0xdc>
{
    92c6:	b087      	sub	sp, #28
    92c8:	2102      	movs	r1, #2
    92ca:	f104 0098 	add.w	r0, r4, #152	; 0x98
    92ce:	f019 fb63 	bl	22998 <atomic_or>
		bt_le_scan_update(false);
    92d2:	2000      	movs	r0, #0
    92d4:	f7ff fd76 	bl	8dc4 <bt_le_scan_update>
    92d8:	4b29      	ldr	r3, [pc, #164]	; (9380 <bt_finalize_init+0xc8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    92da:	492a      	ldr	r1, [pc, #168]	; (9384 <bt_finalize_init+0xcc>)
    92dc:	1aed      	subs	r5, r5, r3
    92de:	79e3      	ldrb	r3, [r4, #7]
    92e0:	4620      	mov	r0, r4
    92e2:	2b01      	cmp	r3, #1
    92e4:	bf88      	it	hi
    92e6:	460e      	movhi	r6, r1
    92e8:	f7fd ff58 	bl	719c <bt_addr_le_str_real>
    92ec:	f7fc f9c2 	bl	5674 <log_strdup>
    92f0:	08ed      	lsrs	r5, r5, #3
    92f2:	01ad      	lsls	r5, r5, #6
    92f4:	f045 0703 	orr.w	r7, r5, #3
    92f8:	4602      	mov	r2, r0
    92fa:	4631      	mov	r1, r6
    92fc:	4822      	ldr	r0, [pc, #136]	; (9388 <bt_finalize_init+0xd0>)
    92fe:	463b      	mov	r3, r7
    9300:	f017 fc7f 	bl	20c02 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    9304:	46a0      	mov	r8, r4
    9306:	2601      	movs	r6, #1
    9308:	79e3      	ldrb	r3, [r4, #7]
    930a:	429e      	cmp	r6, r3
    930c:	f108 0807 	add.w	r8, r8, #7
    9310:	db22      	blt.n	9358 <bt_finalize_init+0xa0>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    9312:	f894 6038 	ldrb.w	r6, [r4, #56]	; 0x38
    9316:	4630      	mov	r0, r6
    9318:	f7fe f95a 	bl	75d0 <ver_str>
    931c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    931e:	9304      	str	r3, [sp, #16]
    9320:	f045 0503 	orr.w	r5, r5, #3
    9324:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    9326:	9305      	str	r3, [sp, #20]
    9328:	e9cd 0602 	strd	r0, r6, [sp, #8]
    932c:	462b      	mov	r3, r5
    932e:	a902      	add	r1, sp, #8
    9330:	2204      	movs	r2, #4
    9332:	4816      	ldr	r0, [pc, #88]	; (938c <bt_finalize_init+0xd4>)
    9334:	f017 fc9a 	bl	20c6c <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    9338:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
    933c:	4630      	mov	r0, r6
    933e:	f7fe f947 	bl	75d0 <ver_str>
    9342:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    9344:	f8ad 5000 	strh.w	r5, [sp]
    9348:	4601      	mov	r1, r0
    934a:	4632      	mov	r2, r6
    934c:	4810      	ldr	r0, [pc, #64]	; (9390 <bt_finalize_init+0xd8>)
    934e:	f017 fc71 	bl	20c34 <log_3>
}
    9352:	b007      	add	sp, #28
    9354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    9358:	4640      	mov	r0, r8
    935a:	f7fd ff1f 	bl	719c <bt_addr_le_str_real>
    935e:	f7fc f989 	bl	5674 <log_strdup>
    9362:	4631      	mov	r1, r6
    9364:	4602      	mov	r2, r0
    9366:	463b      	mov	r3, r7
    9368:	4648      	mov	r0, r9
    936a:	f017 fc4a 	bl	20c02 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    936e:	3601      	adds	r6, #1
    9370:	e7ca      	b.n	9308 <bt_finalize_init+0x50>
    9372:	bf00      	nop
    9374:	20000000 	.word	0x20000000
    9378:	0002662c 	.word	0x0002662c
    937c:	000288f2 	.word	0x000288f2
    9380:	00026544 	.word	0x00026544
    9384:	0002958c 	.word	0x0002958c
    9388:	00029590 	.word	0x00029590
    938c:	000295b0 	.word	0x000295b0
    9390:	000295ee 	.word	0x000295ee
    9394:	0002959f 	.word	0x0002959f

00009398 <bt_get_name>:
}
    9398:	4800      	ldr	r0, [pc, #0]	; (939c <bt_get_name+0x4>)
    939a:	4770      	bx	lr
    939c:	0002934a 	.word	0x0002934a

000093a0 <bt_id_create>:
{
    93a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    93a2:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    93a4:	4605      	mov	r5, r0
    93a6:	b918      	cbnz	r0, 93b0 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    93a8:	b344      	cbz	r4, 93fc <bt_id_create+0x5c>
		return -EINVAL;
    93aa:	f06f 0415 	mvn.w	r4, #21
    93ae:	e022      	b.n	93f6 <bt_id_create+0x56>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    93b0:	2300      	movs	r3, #0
    93b2:	4669      	mov	r1, sp
    93b4:	9300      	str	r3, [sp, #0]
    93b6:	f8cd 3003 	str.w	r3, [sp, #3]
    93ba:	f019 fadb 	bl	22974 <bt_addr_le_cmp>
    93be:	2800      	cmp	r0, #0
    93c0:	d0f2      	beq.n	93a8 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    93c2:	782b      	ldrb	r3, [r5, #0]
    93c4:	2b01      	cmp	r3, #1
    93c6:	d104      	bne.n	93d2 <bt_id_create+0x32>
    93c8:	79ab      	ldrb	r3, [r5, #6]
    93ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    93ce:	2bc0      	cmp	r3, #192	; 0xc0
    93d0:	d00a      	beq.n	93e8 <bt_id_create+0x48>
    93d2:	4b11      	ldr	r3, [pc, #68]	; (9418 <bt_id_create+0x78>)
    93d4:	4911      	ldr	r1, [pc, #68]	; (941c <bt_id_create+0x7c>)
			BT_ERR("Only static random identity address supported");
    93d6:	4812      	ldr	r0, [pc, #72]	; (9420 <bt_id_create+0x80>)
    93d8:	1ac9      	subs	r1, r1, r3
    93da:	08c9      	lsrs	r1, r1, #3
    93dc:	0189      	lsls	r1, r1, #6
    93de:	f041 0101 	orr.w	r1, r1, #1
    93e2:	f017 fbed 	bl	20bc0 <log_0>
			return -EINVAL;
    93e6:	e7e0      	b.n	93aa <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    93e8:	4628      	mov	r0, r5
    93ea:	f7fe f90d 	bl	7608 <id_find>
    93ee:	2800      	cmp	r0, #0
    93f0:	dbda      	blt.n	93a8 <bt_id_create+0x8>
			return -EALREADY;
    93f2:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    93f6:	4620      	mov	r0, r4
    93f8:	b003      	add	sp, #12
    93fa:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    93fc:	4b09      	ldr	r3, [pc, #36]	; (9424 <bt_id_create+0x84>)
    93fe:	79dc      	ldrb	r4, [r3, #7]
    9400:	2c01      	cmp	r4, #1
    9402:	d006      	beq.n	9412 <bt_id_create+0x72>
	new_id = bt_dev.id_count++;
    9404:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    9406:	4629      	mov	r1, r5
    9408:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    940a:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    940c:	f7ff fe16 	bl	903c <id_create.isra.0>
	return new_id;
    9410:	e7f1      	b.n	93f6 <bt_id_create+0x56>
		return -ENOMEM;
    9412:	f06f 040b 	mvn.w	r4, #11
    9416:	e7ee      	b.n	93f6 <bt_id_create+0x56>
    9418:	00026544 	.word	0x00026544
    941c:	0002662c 	.word	0x0002662c
    9420:	00029615 	.word	0x00029615
    9424:	20000000 	.word	0x20000000

00009428 <bt_setup_public_id_addr>:
{
    9428:	b570      	push	{r4, r5, r6, lr}
    942a:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    942c:	aa01      	add	r2, sp, #4
    942e:	2100      	movs	r1, #0
    9430:	f241 0009 	movw	r0, #4105	; 0x1009
    9434:	f7fe fed8 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
    9438:	4e1f      	ldr	r6, [pc, #124]	; (94b8 <bt_setup_public_id_addr+0x90>)
    943a:	4604      	mov	r4, r0
    943c:	b168      	cbz	r0, 945a <bt_setup_public_id_addr+0x32>
    943e:	491f      	ldr	r1, [pc, #124]	; (94bc <bt_setup_public_id_addr+0x94>)
    9440:	4b1f      	ldr	r3, [pc, #124]	; (94c0 <bt_setup_public_id_addr+0x98>)
		BT_WARN("Failed to read public address");
    9442:	4820      	ldr	r0, [pc, #128]	; (94c4 <bt_setup_public_id_addr+0x9c>)
    9444:	1ac9      	subs	r1, r1, r3
    9446:	08c9      	lsrs	r1, r1, #3
    9448:	0189      	lsls	r1, r1, #6
    944a:	f041 0102 	orr.w	r1, r1, #2
    944e:	f017 fbb7 	bl	20bc0 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    9452:	2300      	movs	r3, #0
    9454:	71f3      	strb	r3, [r6, #7]
}
    9456:	b006      	add	sp, #24
    9458:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    945a:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    945c:	689d      	ldr	r5, [r3, #8]
    945e:	9004      	str	r0, [sp, #16]
    9460:	3501      	adds	r5, #1
    9462:	f8ad 0014 	strh.w	r0, [sp, #20]
	return memcmp(a, b, sizeof(*a));
    9466:	2206      	movs	r2, #6
    9468:	a904      	add	r1, sp, #16
    946a:	4628      	mov	r0, r5
    946c:	f019 f948 	bl	22700 <memcmp>
    9470:	b918      	cbnz	r0, 947a <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    9472:	9801      	ldr	r0, [sp, #4]
    9474:	f014 fda0 	bl	1dfb8 <net_buf_unref>
    9478:	e7eb      	b.n	9452 <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    947a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    947e:	2206      	movs	r2, #6
    9480:	a902      	add	r1, sp, #8
    9482:	4628      	mov	r0, r5
    9484:	9302      	str	r3, [sp, #8]
    9486:	f8ad 300c 	strh.w	r3, [sp, #12]
    948a:	f019 f939 	bl	22700 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    948e:	2800      	cmp	r0, #0
    9490:	d0ef      	beq.n	9472 <bt_setup_public_id_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
    9492:	4629      	mov	r1, r5
    9494:	2206      	movs	r2, #6
    9496:	f10d 0011 	add.w	r0, sp, #17
    949a:	f019 f941 	bl	22720 <memcpy>
	net_buf_unref(rsp);
    949e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    94a0:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    94a4:	f014 fd88 	bl	1dfb8 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    94a8:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    94aa:	a904      	add	r1, sp, #16
    94ac:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    94ae:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    94b0:	f7ff fdc4 	bl	903c <id_create.isra.0>
    94b4:	e7cf      	b.n	9456 <bt_setup_public_id_addr+0x2e>
    94b6:	bf00      	nop
    94b8:	20000000 	.word	0x20000000
    94bc:	0002662c 	.word	0x0002662c
    94c0:	00026544 	.word	0x00026544
    94c4:	00029643 	.word	0x00029643

000094c8 <bt_read_static_addr>:
{
    94c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    94cc:	4b25      	ldr	r3, [pc, #148]	; (9564 <bt_read_static_addr+0x9c>)
    94ce:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
    94d2:	f014 0401 	ands.w	r4, r4, #1
{
    94d6:	4607      	mov	r7, r0
    94d8:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    94da:	d10a      	bne.n	94f2 <bt_read_static_addr+0x2a>
    94dc:	4922      	ldr	r1, [pc, #136]	; (9568 <bt_read_static_addr+0xa0>)
    94de:	4b23      	ldr	r3, [pc, #140]	; (956c <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    94e0:	4823      	ldr	r0, [pc, #140]	; (9570 <bt_read_static_addr+0xa8>)
    94e2:	1ac9      	subs	r1, r1, r3
    94e4:	08c9      	lsrs	r1, r1, #3
    94e6:	0189      	lsls	r1, r1, #6
    94e8:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
    94ec:	f017 fb68 	bl	20bc0 <log_0>
    94f0:	e012      	b.n	9518 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    94f2:	aa01      	add	r2, sp, #4
    94f4:	2100      	movs	r1, #0
    94f6:	f64f 4009 	movw	r0, #64521	; 0xfc09
    94fa:	f7fe fe75 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
    94fe:	4605      	mov	r5, r0
    9500:	b170      	cbz	r0, 9520 <bt_read_static_addr+0x58>
    9502:	4b1a      	ldr	r3, [pc, #104]	; (956c <bt_read_static_addr+0xa4>)
    9504:	4918      	ldr	r1, [pc, #96]	; (9568 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    9506:	481b      	ldr	r0, [pc, #108]	; (9574 <bt_read_static_addr+0xac>)
    9508:	1ac9      	subs	r1, r1, r3
    950a:	08c9      	lsrs	r1, r1, #3
    950c:	0189      	lsls	r1, r1, #6
    950e:	f041 0102 	orr.w	r1, r1, #2
    9512:	f017 fb55 	bl	20bc0 <log_0>
		return 0;
    9516:	2400      	movs	r4, #0
}
    9518:	4620      	mov	r0, r4
    951a:	b002      	add	sp, #8
    951c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    9520:	9b01      	ldr	r3, [sp, #4]
    9522:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    9524:	785c      	ldrb	r4, [r3, #1]
    9526:	42b4      	cmp	r4, r6
    9528:	bf28      	it	cs
    952a:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    952c:	f04f 0816 	mov.w	r8, #22
    9530:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    9532:	42a5      	cmp	r5, r4
    9534:	db0d      	blt.n	9552 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    9536:	9801      	ldr	r0, [sp, #4]
    9538:	f014 fd3e 	bl	1dfb8 <net_buf_unref>
	if (!cnt) {
    953c:	2c00      	cmp	r4, #0
    953e:	d1eb      	bne.n	9518 <bt_read_static_addr+0x50>
    9540:	4909      	ldr	r1, [pc, #36]	; (9568 <bt_read_static_addr+0xa0>)
    9542:	4b0a      	ldr	r3, [pc, #40]	; (956c <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    9544:	480c      	ldr	r0, [pc, #48]	; (9578 <bt_read_static_addr+0xb0>)
    9546:	1ac9      	subs	r1, r1, r3
    9548:	08c9      	lsrs	r1, r1, #3
    954a:	0189      	lsls	r1, r1, #6
    954c:	f041 0102 	orr.w	r1, r1, #2
    9550:	e7cc      	b.n	94ec <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    9552:	fb08 7005 	mla	r0, r8, r5, r7
    9556:	2216      	movs	r2, #22
    9558:	4631      	mov	r1, r6
    955a:	f019 f8e1 	bl	22720 <memcpy>
	for (i = 0; i < cnt; i++) {
    955e:	3501      	adds	r5, #1
    9560:	e7e7      	b.n	9532 <bt_read_static_addr+0x6a>
    9562:	bf00      	nop
    9564:	20000000 	.word	0x20000000
    9568:	0002662c 	.word	0x0002662c
    956c:	00026544 	.word	0x00026544
    9570:	00029661 	.word	0x00029661
    9574:	0002968d 	.word	0x0002968d
    9578:	000296ad 	.word	0x000296ad

0000957c <bt_setup_random_id_addr>:
{
    957c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
    957e:	4d14      	ldr	r5, [pc, #80]	; (95d0 <bt_setup_random_id_addr+0x54>)
    9580:	79ec      	ldrb	r4, [r5, #7]
{
    9582:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    9584:	b9f4      	cbnz	r4, 95c4 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    9586:	2101      	movs	r1, #1
    9588:	a802      	add	r0, sp, #8
    958a:	f7ff ff9d 	bl	94c8 <bt_read_static_addr>
    958e:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    9590:	b1c0      	cbz	r0, 95c4 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    9592:	2716      	movs	r7, #22
    9594:	e00f      	b.n	95b6 <bt_setup_random_id_addr+0x3a>
    9596:	ab02      	add	r3, sp, #8
    9598:	fb07 3106 	mla	r1, r7, r6, r3
    959c:	2206      	movs	r2, #6
    959e:	f10d 0001 	add.w	r0, sp, #1
    95a2:	f019 f8bd 	bl	22720 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    95a6:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    95a8:	4669      	mov	r1, sp
    95aa:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    95ac:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    95b0:	f7ff fd44 	bl	903c <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    95b4:	3401      	adds	r4, #1
    95b6:	79eb      	ldrb	r3, [r5, #7]
    95b8:	b2e6      	uxtb	r6, r4
    95ba:	42b3      	cmp	r3, r6
    95bc:	d8eb      	bhi.n	9596 <bt_setup_random_id_addr+0x1a>
			return 0;
    95be:	2000      	movs	r0, #0
}
    95c0:	b009      	add	sp, #36	; 0x24
    95c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    95c4:	2100      	movs	r1, #0
    95c6:	4608      	mov	r0, r1
    95c8:	f7ff feea 	bl	93a0 <bt_id_create>
    95cc:	e7f8      	b.n	95c0 <bt_setup_random_id_addr+0x44>
    95ce:	bf00      	nop
    95d0:	20000000 	.word	0x20000000

000095d4 <bt_enable>:
{
    95d4:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    95d6:	4d33      	ldr	r5, [pc, #204]	; (96a4 <bt_enable+0xd0>)
    95d8:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
{
    95dc:	b088      	sub	sp, #32
    95de:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    95e0:	b973      	cbnz	r3, 9600 <bt_enable+0x2c>
    95e2:	4b31      	ldr	r3, [pc, #196]	; (96a8 <bt_enable+0xd4>)
    95e4:	4931      	ldr	r1, [pc, #196]	; (96ac <bt_enable+0xd8>)
		BT_ERR("No HCI driver registered");
    95e6:	4832      	ldr	r0, [pc, #200]	; (96b0 <bt_enable+0xdc>)
    95e8:	1ac9      	subs	r1, r1, r3
    95ea:	08c9      	lsrs	r1, r1, #3
    95ec:	0189      	lsls	r1, r1, #6
    95ee:	f041 0101 	orr.w	r1, r1, #1
    95f2:	f017 fae5 	bl	20bc0 <log_0>
		return -ENODEV;
    95f6:	f06f 0412 	mvn.w	r4, #18
}
    95fa:	4620      	mov	r0, r4
    95fc:	b008      	add	sp, #32
    95fe:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    9600:	2100      	movs	r1, #0
    9602:	f105 0098 	add.w	r0, r5, #152	; 0x98
    9606:	f019 f9e7 	bl	229d8 <atomic_test_and_set_bit>
    960a:	2800      	cmp	r0, #0
    960c:	d146      	bne.n	969c <bt_enable+0xc8>
	ready_cb = cb;
    960e:	4b29      	ldr	r3, [pc, #164]	; (96b4 <bt_enable+0xe0>)
    9610:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9612:	2200      	movs	r2, #0
    9614:	2300      	movs	r3, #0
    9616:	e9cd 2306 	strd	r2, r3, [sp, #24]
    961a:	f06f 0308 	mvn.w	r3, #8
    961e:	e9cd 0302 	strd	r0, r3, [sp, #8]
    9622:	e9cd 0000 	strd	r0, r0, [sp]
    9626:	9004      	str	r0, [sp, #16]
    9628:	4b23      	ldr	r3, [pc, #140]	; (96b8 <bt_enable+0xe4>)
    962a:	4924      	ldr	r1, [pc, #144]	; (96bc <bt_enable+0xe8>)
    962c:	4824      	ldr	r0, [pc, #144]	; (96c0 <bt_enable+0xec>)
    962e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9632:	f016 fba1 	bl	1fd78 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    9636:	4923      	ldr	r1, [pc, #140]	; (96c4 <bt_enable+0xf0>)
    9638:	4821      	ldr	r0, [pc, #132]	; (96c0 <bt_enable+0xec>)
    963a:	f01c fc1c 	bl	25e76 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    963e:	f7fd ff55 	bl	74ec <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    9642:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    9646:	68db      	ldr	r3, [r3, #12]
    9648:	4798      	blx	r3
	if (err) {
    964a:	4604      	mov	r4, r0
    964c:	b158      	cbz	r0, 9666 <bt_enable+0x92>
    964e:	4b16      	ldr	r3, [pc, #88]	; (96a8 <bt_enable+0xd4>)
    9650:	4a16      	ldr	r2, [pc, #88]	; (96ac <bt_enable+0xd8>)
    9652:	1ad2      	subs	r2, r2, r3
    9654:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    9656:	0192      	lsls	r2, r2, #6
    9658:	4601      	mov	r1, r0
    965a:	f042 0201 	orr.w	r2, r2, #1
    965e:	481a      	ldr	r0, [pc, #104]	; (96c8 <bt_enable+0xf4>)
    9660:	f017 fabb 	bl	20bda <log_1>
		return err;
    9664:	e7c9      	b.n	95fa <bt_enable+0x26>
	if (!cb) {
    9666:	b966      	cbnz	r6, 9682 <bt_enable+0xae>
	err = hci_init();
    9668:	f7f7 f852 	bl	710 <hci_init>
	if (err) {
    966c:	4604      	mov	r4, r0
    966e:	2800      	cmp	r0, #0
    9670:	d1c3      	bne.n	95fa <bt_enable+0x26>
		err = bt_conn_init();
    9672:	f001 fbb5 	bl	ade0 <bt_conn_init>
		if (err) {
    9676:	4604      	mov	r4, r0
    9678:	2800      	cmp	r0, #0
    967a:	d1be      	bne.n	95fa <bt_enable+0x26>
	bt_finalize_init();
    967c:	f7ff fe1c 	bl	92b8 <bt_finalize_init>
	return 0;
    9680:	e7bb      	b.n	95fa <bt_enable+0x26>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    9682:	4601      	mov	r1, r0
    9684:	f105 0094 	add.w	r0, r5, #148	; 0x94
    9688:	f019 f9a6 	bl	229d8 <atomic_test_and_set_bit>
    968c:	2800      	cmp	r0, #0
    968e:	d1b4      	bne.n	95fa <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    9690:	480e      	ldr	r0, [pc, #56]	; (96cc <bt_enable+0xf8>)
    9692:	f105 018c 	add.w	r1, r5, #140	; 0x8c
    9696:	f01c fa63 	bl	25b60 <k_queue_append>
    969a:	e7ae      	b.n	95fa <bt_enable+0x26>
		return -EALREADY;
    969c:	f06f 0444 	mvn.w	r4, #68	; 0x44
    96a0:	e7ab      	b.n	95fa <bt_enable+0x26>
    96a2:	bf00      	nop
    96a4:	20000000 	.word	0x20000000
    96a8:	00026544 	.word	0x00026544
    96ac:	0002662c 	.word	0x0002662c
    96b0:	0002980a 	.word	0x0002980a
    96b4:	200018fc 	.word	0x200018fc
    96b8:	00007b71 	.word	0x00007b71
    96bc:	20005f30 	.word	0x20005f30
    96c0:	20000b20 	.word	0x20000b20
    96c4:	00029823 	.word	0x00029823
    96c8:	00029829 	.word	0x00029829
    96cc:	20001510 	.word	0x20001510

000096d0 <init_work>:
{
    96d0:	b510      	push	{r4, lr}
	err = hci_init();
    96d2:	f7f7 f81d 	bl	710 <hci_init>
	if (err) {
    96d6:	4604      	mov	r4, r0
    96d8:	b928      	cbnz	r0, 96e6 <init_work+0x16>
		err = bt_conn_init();
    96da:	f001 fb81 	bl	ade0 <bt_conn_init>
		if (err) {
    96de:	4604      	mov	r4, r0
    96e0:	b908      	cbnz	r0, 96e6 <init_work+0x16>
	bt_finalize_init();
    96e2:	f7ff fde9 	bl	92b8 <bt_finalize_init>
	if (ready_cb) {
    96e6:	4b04      	ldr	r3, [pc, #16]	; (96f8 <init_work+0x28>)
    96e8:	681b      	ldr	r3, [r3, #0]
    96ea:	b11b      	cbz	r3, 96f4 <init_work+0x24>
		ready_cb(err);
    96ec:	4620      	mov	r0, r4
}
    96ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    96f2:	4718      	bx	r3
}
    96f4:	bd10      	pop	{r4, pc}
    96f6:	bf00      	nop
    96f8:	200018fc 	.word	0x200018fc

000096fc <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    96fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    9700:	6906      	ldr	r6, [r0, #16]
{
    9702:	b08b      	sub	sp, #44	; 0x2c
    9704:	4698      	mov	r8, r3
	struct bt_conn *conn = NULL;
    9706:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    9708:	ebb6 0b03 	subs.w	fp, r6, r3
{
    970c:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    970e:	487e      	ldr	r0, [pc, #504]	; (9908 <bt_le_adv_start_legacy+0x20c>)
	struct bt_conn *conn = NULL;
    9710:	9303      	str	r3, [sp, #12]
	bool dir_adv = (param->peer != NULL), scannable;
    9712:	bf18      	it	ne
    9714:	f04f 0b01 	movne.w	fp, #1
{
    9718:	4689      	mov	r9, r1
    971a:	4692      	mov	sl, r2
    971c:	f019 f921 	bl	22962 <atomic_get>
	int err;
	struct bt_le_ext_adv *adv;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9720:	0784      	lsls	r4, r0, #30
    9722:	f140 80e4 	bpl.w	98ee <bt_le_adv_start_legacy+0x1f2>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    9726:	4628      	mov	r0, r5
    9728:	f7fd ff86 	bl	7638 <valid_adv_param>
    972c:	4607      	mov	r7, r0
    972e:	2800      	cmp	r0, #0
    9730:	f000 80e0 	beq.w	98f4 <bt_le_adv_start_legacy+0x1f8>
    9734:	4874      	ldr	r0, [pc, #464]	; (9908 <bt_le_adv_start_legacy+0x20c>)
    9736:	f019 f914 	bl	22962 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
    973a:	0500      	lsls	r0, r0, #20
    973c:	d402      	bmi.n	9744 <bt_le_adv_start_legacy+0x48>
    973e:	4872      	ldr	r0, [pc, #456]	; (9908 <bt_le_adv_start_legacy+0x20c>)
    9740:	f019 f90f 	bl	22962 <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    9744:	2100      	movs	r1, #0
    9746:	220f      	movs	r2, #15
    9748:	a806      	add	r0, sp, #24
    974a:	f019 f814 	bl	22776 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    974e:	68ab      	ldr	r3, [r5, #8]
    9750:	f8ad 3018 	strh.w	r3, [sp, #24]
    9754:	4c6d      	ldr	r4, [pc, #436]	; (990c <bt_le_adv_start_legacy+0x210>)
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    9756:	68eb      	ldr	r3, [r5, #12]
    9758:	f8ad 301a 	strh.w	r3, [sp, #26]
	set_param.channel_map  = 0x07;
    975c:	2307      	movs	r3, #7
    975e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    9762:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	set_param.filter_policy = get_filter_policy(param->options);
    9766:	2300      	movs	r3, #0
    9768:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    976c:	f019 f8f9 	bl	22962 <atomic_get>

	adv = adv_new_legacy();
	if (!adv || atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    9770:	0641      	lsls	r1, r0, #25
    9772:	f100 80c2 	bmi.w	98fa <bt_le_adv_start_legacy+0x1fe>
		return -EALREADY;
	}

	if (adv->id != param->id) {
    9776:	7e22      	ldrb	r2, [r4, #24]
    9778:	782b      	ldrb	r3, [r5, #0]
    977a:	429a      	cmp	r2, r3
    977c:	d005      	beq.n	978a <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    977e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    9782:	f104 0098 	add.w	r0, r4, #152	; 0x98
    9786:	f019 f8f8 	bl	2297a <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
    978a:	7828      	ldrb	r0, [r5, #0]
    978c:	7620      	strb	r0, [r4, #24]
	bt_dev.adv_conn_id = adv->id;
    978e:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    9792:	6869      	ldr	r1, [r5, #4]
    9794:	f10d 031d 	add.w	r3, sp, #29
    9798:	465a      	mov	r2, fp
    979a:	f7fe fe71 	bl	8480 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    979e:	4604      	mov	r4, r0
    97a0:	2800      	cmp	r0, #0
    97a2:	d16d      	bne.n	9880 <bt_le_adv_start_legacy+0x184>
		return err;
	}

	if (dir_adv) {
    97a4:	2e00      	cmp	r6, #0
    97a6:	d049      	beq.n	983c <bt_le_adv_start_legacy+0x140>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    97a8:	6929      	ldr	r1, [r5, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    97aa:	4859      	ldr	r0, [pc, #356]	; (9910 <bt_le_adv_start_legacy+0x214>)
    97ac:	f019 f8df 	bl	2296e <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    97b0:	6868      	ldr	r0, [r5, #4]
    97b2:	07c2      	lsls	r2, r0, #31
    97b4:	d54a      	bpl.n	984c <bt_le_adv_start_legacy+0x150>
		scannable = true;

		if (dir_adv) {
    97b6:	2e00      	cmp	r6, #0
    97b8:	d045      	beq.n	9846 <bt_le_adv_start_legacy+0x14a>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    97ba:	f010 0f10 	tst.w	r0, #16
    97be:	bf14      	ite	ne
    97c0:	2304      	movne	r3, #4
    97c2:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    97c4:	6929      	ldr	r1, [r5, #16]
    97c6:	f88d 301c 	strb.w	r3, [sp, #28]
    97ca:	f10d 001e 	add.w	r0, sp, #30
    97ce:	f019 f8ce 	bl	2296e <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    97d2:	210f      	movs	r1, #15
    97d4:	f242 0006 	movw	r0, #8198	; 0x2006
    97d8:	f7fe fbaa 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
    97dc:	4604      	mov	r4, r0
    97de:	2800      	cmp	r0, #0
    97e0:	f000 808e 	beq.w	9900 <bt_le_adv_start_legacy+0x204>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    97e4:	220f      	movs	r2, #15
    97e6:	a906      	add	r1, sp, #24
    97e8:	3008      	adds	r0, #8
    97ea:	f01b fe05 	bl	253f8 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    97ee:	4621      	mov	r1, r4
    97f0:	2200      	movs	r2, #0
    97f2:	f242 0006 	movw	r0, #8198	; 0x2006
    97f6:	f7fe fcf7 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
    97fa:	4604      	mov	r4, r0
    97fc:	2800      	cmp	r0, #0
    97fe:	d13f      	bne.n	9880 <bt_le_adv_start_legacy+0x184>
		return err;
	}

	if (!dir_adv) {
    9800:	b386      	cbz	r6, 9864 <bt_le_adv_start_legacy+0x168>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    9802:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9804:	07db      	lsls	r3, r3, #31
    9806:	d43f      	bmi.n	9888 <bt_le_adv_start_legacy+0x18c>
	return set_le_adv_enable_legacy(adv, enable);
    9808:	4842      	ldr	r0, [pc, #264]	; (9914 <bt_le_adv_start_legacy+0x218>)
    980a:	2101      	movs	r1, #1
    980c:	f7fe fdce 	bl	83ac <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    9810:	4604      	mov	r4, r0
    9812:	2800      	cmp	r0, #0
    9814:	d040      	beq.n	9898 <bt_le_adv_start_legacy+0x19c>
    9816:	4b40      	ldr	r3, [pc, #256]	; (9918 <bt_le_adv_start_legacy+0x21c>)
    9818:	4940      	ldr	r1, [pc, #256]	; (991c <bt_le_adv_start_legacy+0x220>)
		BT_ERR("Failed to start advertiser");
    981a:	4841      	ldr	r0, [pc, #260]	; (9920 <bt_le_adv_start_legacy+0x224>)
    981c:	1ac9      	subs	r1, r1, r3
    981e:	08c9      	lsrs	r1, r1, #3
    9820:	0189      	lsls	r1, r1, #6
    9822:	f041 0101 	orr.w	r1, r1, #1
    9826:	f017 f9cb 	bl	20bc0 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    982a:	9803      	ldr	r0, [sp, #12]
    982c:	b340      	cbz	r0, 9880 <bt_le_adv_start_legacy+0x184>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    982e:	2100      	movs	r1, #0
    9830:	f000 fe8a 	bl	a548 <bt_conn_set_state>
			bt_conn_unref(conn);
    9834:	9803      	ldr	r0, [sp, #12]
    9836:	f019 fb3f 	bl	22eb8 <bt_conn_unref>
    983a:	e021      	b.n	9880 <bt_le_adv_start_legacy+0x184>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    983c:	9604      	str	r6, [sp, #16]
    983e:	a904      	add	r1, sp, #16
    9840:	f8cd 6013 	str.w	r6, [sp, #19]
    9844:	e7b1      	b.n	97aa <bt_le_adv_start_legacy+0xae>
			set_param.type = BT_HCI_ADV_IND;
    9846:	f88d 601c 	strb.w	r6, [sp, #28]
    984a:	e7c2      	b.n	97d2 <bt_le_adv_start_legacy+0xd6>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    984c:	f1b8 0f00 	cmp.w	r8, #0
    9850:	d106      	bne.n	9860 <bt_le_adv_start_legacy+0x164>
    9852:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    9856:	f1c7 0303 	rsb	r3, r7, #3
    985a:	f88d 301c 	strb.w	r3, [sp, #28]
    985e:	e7b8      	b.n	97d2 <bt_le_adv_start_legacy+0xd6>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    9860:	2701      	movs	r7, #1
    9862:	e7f8      	b.n	9856 <bt_le_adv_start_legacy+0x15a>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, scannable,
    9864:	686b      	ldr	r3, [r5, #4]
    9866:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    986a:	e9cd 7300 	strd	r7, r3, [sp]
    986e:	4642      	mov	r2, r8
    9870:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9872:	4651      	mov	r1, sl
    9874:	4648      	mov	r0, r9
    9876:	f7fe fedf 	bl	8638 <le_adv_update.constprop.0>
		if (err) {
    987a:	4604      	mov	r4, r0
    987c:	2800      	cmp	r0, #0
    987e:	d0c0      	beq.n	9802 <bt_le_adv_start_legacy+0x106>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    9880:	4620      	mov	r0, r4
    9882:	b00b      	add	sp, #44	; 0x2c
    9884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    9888:	4822      	ldr	r0, [pc, #136]	; (9914 <bt_le_adv_start_legacy+0x218>)
    988a:	a903      	add	r1, sp, #12
    988c:	f7fe face 	bl	7e2c <le_adv_start_add_conn>
		if (err) {
    9890:	4604      	mov	r4, r0
    9892:	2800      	cmp	r0, #0
    9894:	d0b8      	beq.n	9808 <bt_le_adv_start_legacy+0x10c>
    9896:	e7f3      	b.n	9880 <bt_le_adv_start_legacy+0x184>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    9898:	9803      	ldr	r0, [sp, #12]
    989a:	b108      	cbz	r0, 98a0 <bt_le_adv_start_legacy+0x1a4>
		bt_conn_unref(conn);
    989c:	f019 fb0c 	bl	22eb8 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    98a0:	bb1e      	cbnz	r6, 98ea <bt_le_adv_start_legacy+0x1ee>
    98a2:	686a      	ldr	r2, [r5, #4]
    98a4:	f082 0202 	eor.w	r2, r2, #2
    98a8:	f3c2 0240 	ubfx	r2, r2, #1, #1
    98ac:	481d      	ldr	r0, [pc, #116]	; (9924 <bt_le_adv_start_legacy+0x228>)
    98ae:	210b      	movs	r1, #11
    98b0:	f019 f881 	bl	229b6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    98b4:	686a      	ldr	r2, [r5, #4]
    98b6:	481b      	ldr	r0, [pc, #108]	; (9924 <bt_le_adv_start_legacy+0x228>)
    98b8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    98bc:	2107      	movs	r1, #7
    98be:	f019 f87a 	bl	229b6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    98c2:	686a      	ldr	r2, [r5, #4]
    98c4:	4817      	ldr	r0, [pc, #92]	; (9924 <bt_le_adv_start_legacy+0x228>)
    98c6:	f002 0201 	and.w	r2, r2, #1
    98ca:	2108      	movs	r1, #8
    98cc:	f019 f873 	bl	229b6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    98d0:	463a      	mov	r2, r7
    98d2:	4814      	ldr	r0, [pc, #80]	; (9924 <bt_le_adv_start_legacy+0x228>)
    98d4:	2109      	movs	r1, #9
    98d6:	f019 f86e 	bl	229b6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    98da:	686a      	ldr	r2, [r5, #4]
    98dc:	4811      	ldr	r0, [pc, #68]	; (9924 <bt_le_adv_start_legacy+0x228>)
    98de:	f3c2 0280 	ubfx	r2, r2, #2, #1
    98e2:	210a      	movs	r1, #10
    98e4:	f019 f867 	bl	229b6 <atomic_set_bit_to>
	return 0;
    98e8:	e7ca      	b.n	9880 <bt_le_adv_start_legacy+0x184>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    98ea:	2200      	movs	r2, #0
    98ec:	e7de      	b.n	98ac <bt_le_adv_start_legacy+0x1b0>
		return -EAGAIN;
    98ee:	f06f 040a 	mvn.w	r4, #10
    98f2:	e7c5      	b.n	9880 <bt_le_adv_start_legacy+0x184>
		return -EINVAL;
    98f4:	f06f 0415 	mvn.w	r4, #21
    98f8:	e7c2      	b.n	9880 <bt_le_adv_start_legacy+0x184>
		return -EALREADY;
    98fa:	f06f 0444 	mvn.w	r4, #68	; 0x44
    98fe:	e7bf      	b.n	9880 <bt_le_adv_start_legacy+0x184>
		return -ENOBUFS;
    9900:	f06f 0436 	mvn.w	r4, #54	; 0x36
    9904:	e7bc      	b.n	9880 <bt_le_adv_start_legacy+0x184>
    9906:	bf00      	nop
    9908:	20000098 	.word	0x20000098
    990c:	20000000 	.word	0x20000000
    9910:	20000023 	.word	0x20000023
    9914:	20000018 	.word	0x20000018
    9918:	00026544 	.word	0x00026544
    991c:	0002662c 	.word	0x0002662c
    9920:	00029845 	.word	0x00029845
    9924:	2000002c 	.word	0x2000002c

00009928 <bt_le_adv_stop>:

	return bt_le_adv_start_legacy(param, ad, ad_len, sd, sd_len);
}

int bt_le_adv_stop(void)
{
    9928:	b530      	push	{r4, r5, lr}
    992a:	4c29      	ldr	r4, [pc, #164]	; (99d0 <bt_le_adv_stop+0xa8>)
    992c:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    9930:	b085      	sub	sp, #20
    9932:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9936:	f019 f820 	bl	2297a <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    993a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    993e:	f019 f810 	bl	22962 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    9942:	0641      	lsls	r1, r0, #25
    9944:	d403      	bmi.n	994e <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
    9946:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    9948:	4620      	mov	r0, r4
    994a:	b005      	add	sp, #20
    994c:	bd30      	pop	{r4, r5, pc}
    994e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9952:	f019 f806 	bl	22962 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9956:	05c2      	lsls	r2, r0, #23
    9958:	d521      	bpl.n	999e <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    995a:	2300      	movs	r3, #0
    995c:	4669      	mov	r1, sp
    995e:	f104 0023 	add.w	r0, r4, #35	; 0x23
    9962:	9300      	str	r3, [sp, #0]
    9964:	f8cd 3003 	str.w	r3, [sp, #3]
    9968:	f019 f804 	bl	22974 <bt_addr_le_cmp>
    996c:	7e25      	ldrb	r5, [r4, #24]
    996e:	bb58      	cbnz	r0, 99c8 <bt_le_adv_stop+0xa0>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    9970:	4b18      	ldr	r3, [pc, #96]	; (99d4 <bt_le_adv_stop+0xac>)
    9972:	889a      	ldrh	r2, [r3, #4]
    9974:	6818      	ldr	r0, [r3, #0]
    9976:	799b      	ldrb	r3, [r3, #6]
    9978:	f8ad 200c 	strh.w	r2, [sp, #12]
    997c:	9002      	str	r0, [sp, #8]
    997e:	f88d 300e 	strb.w	r3, [sp, #14]
    9982:	2203      	movs	r2, #3
    9984:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    9986:	4628      	mov	r0, r5
    9988:	f000 ff62 	bl	a850 <bt_conn_lookup_state_le>
    998c:	4604      	mov	r4, r0
	if (conn) {
    998e:	b130      	cbz	r0, 999e <bt_le_adv_stop+0x76>
		conn->err = status;
    9990:	2100      	movs	r1, #0
    9992:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9994:	f000 fdd8 	bl	a548 <bt_conn_set_state>
		bt_conn_unref(conn);
    9998:	4620      	mov	r0, r4
    999a:	f019 fa8d 	bl	22eb8 <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
    999e:	480e      	ldr	r0, [pc, #56]	; (99d8 <bt_le_adv_stop+0xb0>)
    99a0:	2100      	movs	r1, #0
    99a2:	f7fe fd03 	bl	83ac <set_le_adv_enable_legacy>
		if (err) {
    99a6:	4604      	mov	r4, r0
    99a8:	2800      	cmp	r0, #0
    99aa:	d1cd      	bne.n	9948 <bt_le_adv_stop+0x20>
    99ac:	480b      	ldr	r0, [pc, #44]	; (99dc <bt_le_adv_stop+0xb4>)
    99ae:	f018 ffd8 	bl	22962 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    99b2:	0683      	lsls	r3, r0, #26
    99b4:	d5c7      	bpl.n	9946 <bt_le_adv_stop+0x1e>
			set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    99b6:	4620      	mov	r0, r4
    99b8:	f019 f8a9 	bl	22b0e <set_le_scan_enable>
			le_set_private_addr(BT_ID_DEFAULT);
    99bc:	f019 f827 	bl	22a0e <le_adv_set_private_addr.isra.0>
			set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    99c0:	2001      	movs	r0, #1
    99c2:	f019 f8a4 	bl	22b0e <set_le_scan_enable>
    99c6:	e7bf      	b.n	9948 <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    99c8:	2204      	movs	r2, #4
    99ca:	f104 0123 	add.w	r1, r4, #35	; 0x23
    99ce:	e7da      	b.n	9986 <bt_le_adv_stop+0x5e>
    99d0:	20000000 	.word	0x20000000
    99d4:	00026744 	.word	0x00026744
    99d8:	20000018 	.word	0x20000018
    99dc:	20000098 	.word	0x20000098

000099e0 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    99e0:	b513      	push	{r0, r1, r4, lr}
    99e2:	4811      	ldr	r0, [pc, #68]	; (9a28 <bt_le_adv_resume+0x48>)
    99e4:	f018 ffbd 	bl	22962 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    99e8:	0501      	lsls	r1, r0, #20
    99ea:	d51b      	bpl.n	9a24 <bt_le_adv_resume+0x44>
    99ec:	480e      	ldr	r0, [pc, #56]	; (9a28 <bt_le_adv_resume+0x48>)
    99ee:	f018 ffb8 	bl	22962 <atomic_get>
    99f2:	0642      	lsls	r2, r0, #25
    99f4:	d416      	bmi.n	9a24 <bt_le_adv_resume+0x44>
    99f6:	480c      	ldr	r0, [pc, #48]	; (9a28 <bt_le_adv_resume+0x48>)
    99f8:	f018 ffb3 	bl	22962 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    99fc:	05c3      	lsls	r3, r0, #23
    99fe:	d511      	bpl.n	9a24 <bt_le_adv_resume+0x44>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    9a00:	480a      	ldr	r0, [pc, #40]	; (9a2c <bt_le_adv_resume+0x4c>)
    9a02:	a901      	add	r1, sp, #4
    9a04:	f7fe fa12 	bl	7e2c <le_adv_start_add_conn>
	if (err) {
    9a08:	4604      	mov	r4, r0
    9a0a:	b958      	cbnz	r0, 9a24 <bt_le_adv_resume+0x44>
	return set_le_adv_enable_legacy(adv, enable);
    9a0c:	4807      	ldr	r0, [pc, #28]	; (9a2c <bt_le_adv_resume+0x4c>)
    9a0e:	2101      	movs	r1, #1
    9a10:	f7fe fccc 	bl	83ac <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    9a14:	b118      	cbz	r0, 9a1e <bt_le_adv_resume+0x3e>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9a16:	9801      	ldr	r0, [sp, #4]
    9a18:	4621      	mov	r1, r4
    9a1a:	f000 fd95 	bl	a548 <bt_conn_set_state>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    9a1e:	9801      	ldr	r0, [sp, #4]
    9a20:	f019 fa4a 	bl	22eb8 <bt_conn_unref>
}
    9a24:	b002      	add	sp, #8
    9a26:	bd10      	pop	{r4, pc}
    9a28:	2000002c 	.word	0x2000002c
    9a2c:	20000018 	.word	0x20000018

00009a30 <hci_disconn_complete>:
{
    9a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    9a32:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    9a34:	7835      	ldrb	r5, [r6, #0]
    9a36:	bb95      	cbnz	r5, 9a9e <hci_disconn_complete+0x6e>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9a38:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    9a3c:	4638      	mov	r0, r7
    9a3e:	f000 fe83 	bl	a748 <bt_conn_lookup_handle>
	if (!conn) {
    9a42:	4604      	mov	r4, r0
    9a44:	b970      	cbnz	r0, 9a64 <hci_disconn_complete+0x34>
    9a46:	4a16      	ldr	r2, [pc, #88]	; (9aa0 <hci_disconn_complete+0x70>)
    9a48:	4b16      	ldr	r3, [pc, #88]	; (9aa4 <hci_disconn_complete+0x74>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    9a4a:	4817      	ldr	r0, [pc, #92]	; (9aa8 <hci_disconn_complete+0x78>)
    9a4c:	1ad2      	subs	r2, r2, r3
    9a4e:	08d2      	lsrs	r2, r2, #3
    9a50:	0192      	lsls	r2, r2, #6
    9a52:	f042 0201 	orr.w	r2, r2, #1
    9a56:	4639      	mov	r1, r7
    9a58:	f017 f8bf 	bl	20bda <log_1>
}
    9a5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_le_adv_resume();
    9a60:	f7ff bfbe 	b.w	99e0 <bt_le_adv_resume>
	conn->err = evt->reason;
    9a64:	78f3      	ldrb	r3, [r6, #3]
    9a66:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9a68:	4629      	mov	r1, r5
    9a6a:	f000 fd6d 	bl	a548 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    9a6e:	78a1      	ldrb	r1, [r4, #2]
	conn->handle = 0U;
    9a70:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    9a72:	2901      	cmp	r1, #1
    9a74:	d004      	beq.n	9a80 <hci_disconn_complete+0x50>
		bt_conn_unref(conn);
    9a76:	4620      	mov	r0, r4
}
    9a78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    9a7c:	f019 ba1c 	b.w	22eb8 <bt_conn_unref>
    9a80:	1d20      	adds	r0, r4, #4
    9a82:	f018 ff6e 	bl	22962 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    9a86:	07c3      	lsls	r3, r0, #31
    9a88:	d505      	bpl.n	9a96 <hci_disconn_complete+0x66>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    9a8a:	4620      	mov	r0, r4
    9a8c:	f000 fd5c 	bl	a548 <bt_conn_set_state>
		bt_le_scan_update(false);
    9a90:	4628      	mov	r0, r5
    9a92:	f7ff f997 	bl	8dc4 <bt_le_scan_update>
	bt_conn_unref(conn);
    9a96:	4620      	mov	r0, r4
    9a98:	f019 fa0e 	bl	22eb8 <bt_conn_unref>
    9a9c:	e7de      	b.n	9a5c <hci_disconn_complete+0x2c>
}
    9a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9aa0:	0002662c 	.word	0x0002662c
    9aa4:	00026544 	.word	0x00026544
    9aa8:	000290e7 	.word	0x000290e7

00009aac <enh_conn_complete>:
{
    9aac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9ab0:	f8b0 8001 	ldrh.w	r8, [r0, #1]
{
    9ab4:	4605      	mov	r5, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9ab6:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    9aba:	488a      	ldr	r0, [pc, #552]	; (9ce4 <enh_conn_complete+0x238>)
    9abc:	f018 ff5d 	bl	2297a <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    9ac0:	0442      	lsls	r2, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9ac2:	fa1f f688 	uxth.w	r6, r8
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    9ac6:	d504      	bpl.n	9ad2 <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    9ac8:	4987      	ldr	r1, [pc, #540]	; (9ce8 <enh_conn_complete+0x23c>)
    9aca:	2200      	movs	r2, #0
    9acc:	2002      	movs	r0, #2
    9ace:	f006 fe2f 	bl	10730 <bt_keys_foreach>
	if (evt->status) {
    9ad2:	782c      	ldrb	r4, [r5, #0]
    9ad4:	2c00      	cmp	r4, #0
    9ad6:	d054      	beq.n	9b82 <enh_conn_complete+0xd6>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9ad8:	2c3c      	cmp	r4, #60	; 0x3c
    9ada:	d11e      	bne.n	9b1a <enh_conn_complete+0x6e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9adc:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9ae0:	4882      	ldr	r0, [pc, #520]	; (9cec <enh_conn_complete+0x240>)
    9ae2:	f018 ff4a 	bl	2297a <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    9ae6:	2000      	movs	r0, #0
    9ae8:	f7fd ff58 	bl	799c <find_pending_connect.part.0>
		if (!conn) {
    9aec:	4605      	mov	r5, r0
    9aee:	b960      	cbnz	r0, 9b0a <enh_conn_complete+0x5e>
    9af0:	497f      	ldr	r1, [pc, #508]	; (9cf0 <enh_conn_complete+0x244>)
    9af2:	4b80      	ldr	r3, [pc, #512]	; (9cf4 <enh_conn_complete+0x248>)
			BT_ERR("No pending slave connection");
    9af4:	4880      	ldr	r0, [pc, #512]	; (9cf8 <enh_conn_complete+0x24c>)
    9af6:	1ac9      	subs	r1, r1, r3
    9af8:	08c9      	lsrs	r1, r1, #3
    9afa:	0189      	lsls	r1, r1, #6
    9afc:	f041 0101 	orr.w	r1, r1, #1
    9b00:	f017 f85e 	bl	20bc0 <log_0>
}
    9b04:	b004      	add	sp, #16
    9b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    9b0a:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9b0c:	2100      	movs	r1, #0
    9b0e:	f000 fd1b 	bl	a548 <bt_conn_set_state>
		bt_conn_unref(conn);
    9b12:	4628      	mov	r0, r5
    9b14:	f019 f9d0 	bl	22eb8 <bt_conn_unref>
    9b18:	e7f4      	b.n	9b04 <enh_conn_complete+0x58>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9b1a:	2c02      	cmp	r4, #2
    9b1c:	d125      	bne.n	9b6a <enh_conn_complete+0xbe>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    9b1e:	2100      	movs	r1, #0
    9b20:	2205      	movs	r2, #5
    9b22:	4608      	mov	r0, r1
    9b24:	f000 fe94 	bl	a850 <bt_conn_lookup_state_le>
	if (!conn) {
    9b28:	4605      	mov	r5, r0
    9b2a:	b968      	cbnz	r0, 9b48 <enh_conn_complete+0x9c>
    9b2c:	4970      	ldr	r1, [pc, #448]	; (9cf0 <enh_conn_complete+0x244>)
    9b2e:	4b71      	ldr	r3, [pc, #452]	; (9cf4 <enh_conn_complete+0x248>)
		BT_ERR("No pending master connection");
    9b30:	4872      	ldr	r0, [pc, #456]	; (9cfc <enh_conn_complete+0x250>)
    9b32:	1ac9      	subs	r1, r1, r3
    9b34:	08c9      	lsrs	r1, r1, #3
    9b36:	0189      	lsls	r1, r1, #6
    9b38:	f041 0101 	orr.w	r1, r1, #1
    9b3c:	f017 f840 	bl	20bc0 <log_0>
			bt_le_scan_update(false);
    9b40:	2000      	movs	r0, #0
    9b42:	f7ff f93f 	bl	8dc4 <bt_le_scan_update>
			return;
    9b46:	e7dd      	b.n	9b04 <enh_conn_complete+0x58>
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    9b48:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9b4a:	2100      	movs	r1, #0
    9b4c:	f000 fcfc 	bl	a548 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9b50:	1d28      	adds	r0, r5, #4
    9b52:	f018 ff06 	bl	22962 <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    9b56:	07c3      	lsls	r3, r0, #31
    9b58:	d503      	bpl.n	9b62 <enh_conn_complete+0xb6>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    9b5a:	2101      	movs	r1, #1
    9b5c:	4628      	mov	r0, r5
    9b5e:	f000 fcf3 	bl	a548 <bt_conn_set_state>
	bt_conn_unref(conn);
    9b62:	4628      	mov	r0, r5
    9b64:	f019 f9a8 	bl	22eb8 <bt_conn_unref>
    9b68:	e7ea      	b.n	9b40 <enh_conn_complete+0x94>
    9b6a:	4b62      	ldr	r3, [pc, #392]	; (9cf4 <enh_conn_complete+0x248>)
    9b6c:	4a60      	ldr	r2, [pc, #384]	; (9cf0 <enh_conn_complete+0x244>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    9b6e:	4864      	ldr	r0, [pc, #400]	; (9d00 <enh_conn_complete+0x254>)
    9b70:	1ad2      	subs	r2, r2, r3
    9b72:	08d2      	lsrs	r2, r2, #3
    9b74:	0192      	lsls	r2, r2, #6
    9b76:	f042 0202 	orr.w	r2, r2, #2
    9b7a:	4621      	mov	r1, r4
    9b7c:	f017 f82d 	bl	20bda <log_1>
		return;
    9b80:	e7c0      	b.n	9b04 <enh_conn_complete+0x58>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    9b82:	792b      	ldrb	r3, [r5, #4]
    9b84:	3b02      	subs	r3, #2
    9b86:	2b01      	cmp	r3, #1
    9b88:	f105 0704 	add.w	r7, r5, #4
    9b8c:	d83a      	bhi.n	9c04 <enh_conn_complete+0x158>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    9b8e:	4639      	mov	r1, r7
    9b90:	a802      	add	r0, sp, #8
    9b92:	f018 feec 	bl	2296e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9b96:	f89d 3008 	ldrb.w	r3, [sp, #8]
    9b9a:	2206      	movs	r2, #6
    9b9c:	3b02      	subs	r3, #2
    9b9e:	f105 0111 	add.w	r1, r5, #17
    9ba2:	f10d 0001 	add.w	r0, sp, #1
    9ba6:	f88d 3008 	strb.w	r3, [sp, #8]
    9baa:	f018 fdb9 	bl	22720 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    9bae:	2301      	movs	r3, #1
    9bb0:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
    9bb4:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
    9bb6:	2800      	cmp	r0, #0
    9bb8:	d137      	bne.n	9c2a <enh_conn_complete+0x17e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    9bba:	2205      	movs	r2, #5
    9bbc:	a902      	add	r1, sp, #8
    9bbe:	f000 fe47 	bl	a850 <bt_conn_lookup_state_le>
    9bc2:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9bc4:	78eb      	ldrb	r3, [r5, #3]
    9bc6:	2b01      	cmp	r3, #1
    9bc8:	d104      	bne.n	9bd4 <enh_conn_complete+0x128>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9bca:	4848      	ldr	r0, [pc, #288]	; (9cec <enh_conn_complete+0x240>)
    9bcc:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9bd0:	f018 fed3 	bl	2297a <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9bd4:	78eb      	ldrb	r3, [r5, #3]
    9bd6:	b923      	cbnz	r3, 9be2 <enh_conn_complete+0x136>
    9bd8:	4842      	ldr	r0, [pc, #264]	; (9ce4 <enh_conn_complete+0x238>)
    9bda:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    9bde:	f018 fecc 	bl	2297a <atomic_and>
	if (!conn) {
    9be2:	bb54      	cbnz	r4, 9c3a <enh_conn_complete+0x18e>
    9be4:	4b43      	ldr	r3, [pc, #268]	; (9cf4 <enh_conn_complete+0x248>)
    9be6:	4a42      	ldr	r2, [pc, #264]	; (9cf0 <enh_conn_complete+0x244>)
		BT_ERR("Unable to add new conn for handle %u", handle);
    9be8:	4846      	ldr	r0, [pc, #280]	; (9d04 <enh_conn_complete+0x258>)
    9bea:	1ad2      	subs	r2, r2, r3
    9bec:	08d2      	lsrs	r2, r2, #3
    9bee:	0192      	lsls	r2, r2, #6
    9bf0:	4631      	mov	r1, r6
    9bf2:	f042 0201 	orr.w	r2, r2, #1
    9bf6:	f016 fff0 	bl	20bda <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_MEM_CAPACITY_EXCEEDED);
    9bfa:	2107      	movs	r1, #7
    9bfc:	4630      	mov	r0, r6
    9bfe:	f018 ff90 	bl	22b22 <bt_hci_disconnect>
		return;
    9c02:	e77f      	b.n	9b04 <enh_conn_complete+0x58>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    9c04:	78eb      	ldrb	r3, [r5, #3]
    9c06:	2b01      	cmp	r3, #1
    9c08:	bf04      	itt	eq
    9c0a:	4b3f      	ldreq	r3, [pc, #252]	; (9d08 <enh_conn_complete+0x25c>)
    9c0c:	f893 4037 	ldrbeq.w	r4, [r3, #55]	; 0x37
		bt_addr_le_copy(&id_addr,
    9c10:	4639      	mov	r1, r7
    9c12:	4620      	mov	r0, r4
    9c14:	f018 ff7d 	bl	22b12 <bt_lookup_id_addr>
    9c18:	4601      	mov	r1, r0
    9c1a:	a802      	add	r0, sp, #8
    9c1c:	f018 fea7 	bl	2296e <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    9c20:	4639      	mov	r1, r7
    9c22:	4668      	mov	r0, sp
    9c24:	f018 fea3 	bl	2296e <bt_addr_le_copy>
    9c28:	e7c4      	b.n	9bb4 <enh_conn_complete+0x108>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    9c2a:	2801      	cmp	r0, #1
    9c2c:	d103      	bne.n	9c36 <enh_conn_complete+0x18a>
    9c2e:	a802      	add	r0, sp, #8
    9c30:	f7fd feb4 	bl	799c <find_pending_connect.part.0>
    9c34:	e7c5      	b.n	9bc2 <enh_conn_complete+0x116>
	return NULL;
    9c36:	2400      	movs	r4, #0
    9c38:	e7c4      	b.n	9bc4 <enh_conn_complete+0x118>
	conn->handle = handle;
    9c3a:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    9c3c:	a902      	add	r1, sp, #8
	conn->handle = handle;
    9c3e:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    9c42:	f018 fe94 	bl	2296e <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    9c46:	7e2a      	ldrb	r2, [r5, #24]
    9c48:	7deb      	ldrb	r3, [r5, #23]
    9c4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9c4e:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    9c52:	7eaa      	ldrb	r2, [r5, #26]
    9c54:	7e6b      	ldrb	r3, [r5, #25]
    9c56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9c5a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    9c5e:	7eeb      	ldrb	r3, [r5, #27]
    9c60:	7f2a      	ldrb	r2, [r5, #28]
    9c62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9c66:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    9c6a:	78eb      	ldrb	r3, [r5, #3]
    9c6c:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    9c6e:	2500      	movs	r5, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9c70:	2b01      	cmp	r3, #1
	conn->err = 0U;
    9c72:	7325      	strb	r5, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9c74:	d116      	bne.n	9ca4 <enh_conn_complete+0x1f8>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    9c76:	4669      	mov	r1, sp
    9c78:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    9c7c:	f018 fe77 	bl	2296e <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
    9c80:	7a21      	ldrb	r1, [r4, #8]
    9c82:	4e21      	ldr	r6, [pc, #132]	; (9d08 <enh_conn_complete+0x25c>)
    9c84:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    9c88:	4431      	add	r1, r6
    9c8a:	f104 0096 	add.w	r0, r4, #150	; 0x96
    9c8e:	f018 fe6e 	bl	2296e <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    9c92:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
    9c96:	462a      	mov	r2, r5
    9c98:	f001 0340 	and.w	r3, r1, #64	; 0x40
    9c9c:	4313      	orrs	r3, r2
    9c9e:	d001      	beq.n	9ca4 <enh_conn_complete+0x1f8>
			bt_le_adv_resume();
    9ca0:	f7ff fe9e 	bl	99e0 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9ca4:	78e3      	ldrb	r3, [r4, #3]
    9ca6:	b96b      	cbnz	r3, 9cc4 <enh_conn_complete+0x218>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    9ca8:	4669      	mov	r1, sp
    9caa:	f104 0096 	add.w	r0, r4, #150	; 0x96
    9cae:	f018 fe5e 	bl	2296e <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    9cb2:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    9cb4:	4b14      	ldr	r3, [pc, #80]	; (9d08 <enh_conn_complete+0x25c>)
					&bt_dev.id_addr[conn->id]);
    9cb6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    9cba:	4419      	add	r1, r3
    9cbc:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    9cc0:	f018 fe55 	bl	2296e <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    9cc4:	2106      	movs	r1, #6
    9cc6:	4620      	mov	r0, r4
    9cc8:	f000 fc3e 	bl	a548 <bt_conn_set_state>
	conn_auto_initiate(conn);
    9ccc:	4620      	mov	r0, r4
    9cce:	f7fe fe0b 	bl	88e8 <conn_auto_initiate>
	bt_conn_unref(conn);
    9cd2:	4620      	mov	r0, r4
    9cd4:	f019 f8f0 	bl	22eb8 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9cd8:	78e3      	ldrb	r3, [r4, #3]
    9cda:	2b00      	cmp	r3, #0
    9cdc:	f47f af12 	bne.w	9b04 <enh_conn_complete+0x58>
    9ce0:	e72e      	b.n	9b40 <enh_conn_complete+0x94>
    9ce2:	bf00      	nop
    9ce4:	20000098 	.word	0x20000098
    9ce8:	00022c1d 	.word	0x00022c1d
    9cec:	2000002c 	.word	0x2000002c
    9cf0:	0002662c 	.word	0x0002662c
    9cf4:	00026544 	.word	0x00026544
    9cf8:	00029860 	.word	0x00029860
    9cfc:	0002987c 	.word	0x0002987c
    9d00:	00029899 	.word	0x00029899
    9d04:	000298b2 	.word	0x000298b2
    9d08:	20000000 	.word	0x20000000

00009d0c <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    9d0c:	b538      	push	{r3, r4, r5, lr}
    9d0e:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    9d10:	4805      	ldr	r0, [pc, #20]	; (9d28 <bt_buf_get_rx+0x1c>)
    9d12:	f01b fb03 	bl	2531c <net_buf_alloc_fixed>
#endif

	if (buf) {
    9d16:	4604      	mov	r4, r0
    9d18:	b120      	cbz	r0, 9d24 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    9d1a:	2100      	movs	r1, #0
    9d1c:	3008      	adds	r0, #8
    9d1e:	f01b fb22 	bl	25366 <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
    9d22:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    9d24:	4620      	mov	r0, r4
    9d26:	bd38      	pop	{r3, r4, r5, pc}
    9d28:	2000096c 	.word	0x2000096c

00009d2c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    9d2c:	b570      	push	{r4, r5, r6, lr}
    9d2e:	4602      	mov	r2, r0
    9d30:	460b      	mov	r3, r1
	__asm__ volatile(
    9d32:	f04f 0120 	mov.w	r1, #32
    9d36:	f3ef 8511 	mrs	r5, BASEPRI
    9d3a:	f381 8811 	msr	BASEPRI, r1
    9d3e:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    9d42:	480c      	ldr	r0, [pc, #48]	; (9d74 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    9d44:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    9d46:	f8d0 40e8 	ldr.w	r4, [r0, #232]	; 0xe8
	bt_dev.sent_cmd = NULL;
    9d4a:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
	__asm__ volatile(
    9d4e:	f385 8811 	msr	BASEPRI, r5
    9d52:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    9d56:	b924      	cbnz	r4, 9d62 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    9d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    9d5c:	2001      	movs	r0, #1
    9d5e:	f7ff bfd5 	b.w	9d0c <bt_buf_get_rx>
    9d62:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    9d64:	f104 0008 	add.w	r0, r4, #8
    9d68:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    9d6a:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    9d6c:	f01b fafb 	bl	25366 <net_buf_simple_reserve>
}
    9d70:	4620      	mov	r0, r4
    9d72:	bd70      	pop	{r4, r5, r6, pc}
    9d74:	20000000 	.word	0x20000000

00009d78 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable, k_timeout_t timeout)
{
    9d78:	b570      	push	{r4, r5, r6, lr}
    9d7a:	4604      	mov	r4, r0
	switch (evt) {
    9d7c:	2c0f      	cmp	r4, #15
{
    9d7e:	460d      	mov	r5, r1
    9d80:	4610      	mov	r0, r2
    9d82:	4619      	mov	r1, r3
	switch (evt) {
    9d84:	d805      	bhi.n	9d92 <bt_buf_get_evt+0x1a>
    9d86:	2c0d      	cmp	r4, #13
    9d88:	d912      	bls.n	9db0 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    9d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    9d8e:	f7ff bfcd 	b.w	9d2c <bt_buf_get_cmd_complete>
	switch (evt) {
    9d92:	2c13      	cmp	r4, #19
    9d94:	d10c      	bne.n	9db0 <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
    9d96:	480b      	ldr	r0, [pc, #44]	; (9dc4 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
    9d98:	f01b fac0 	bl	2531c <net_buf_alloc_fixed>
			if (buf) {
    9d9c:	4604      	mov	r4, r0
    9d9e:	b128      	cbz	r0, 9dac <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    9da0:	2100      	movs	r1, #0
    9da2:	3008      	adds	r0, #8
    9da4:	f01b fadf 	bl	25366 <net_buf_simple_reserve>
    9da8:	2301      	movs	r3, #1
    9daa:	7523      	strb	r3, [r4, #20]
}
    9dac:	4620      	mov	r0, r4
    9dae:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
    9db0:	4602      	mov	r2, r0
    9db2:	460b      	mov	r3, r1
		if (discardable) {
    9db4:	b10d      	cbz	r5, 9dba <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
    9db6:	4804      	ldr	r0, [pc, #16]	; (9dc8 <bt_buf_get_evt+0x50>)
    9db8:	e7ee      	b.n	9d98 <bt_buf_get_evt+0x20>
}
    9dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    9dbe:	2001      	movs	r0, #1
    9dc0:	f7ff bfa4 	b.w	9d0c <bt_buf_get_rx>
    9dc4:	20000994 	.word	0x20000994
    9dc8:	200008f4 	.word	0x200008f4

00009dcc <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    9dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    9dce:	4d21      	ldr	r5, [pc, #132]	; (9e54 <bt_pub_key_gen+0x88>)
    9dd0:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
    9dd4:	f003 0306 	and.w	r3, r3, #6
    9dd8:	2b06      	cmp	r3, #6
    9dda:	d00d      	beq.n	9df8 <bt_pub_key_gen+0x2c>
    9ddc:	4b1e      	ldr	r3, [pc, #120]	; (9e58 <bt_pub_key_gen+0x8c>)
    9dde:	491f      	ldr	r1, [pc, #124]	; (9e5c <bt_pub_key_gen+0x90>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    9de0:	481f      	ldr	r0, [pc, #124]	; (9e60 <bt_pub_key_gen+0x94>)
    9de2:	1ac9      	subs	r1, r1, r3
    9de4:	08c9      	lsrs	r1, r1, #3
    9de6:	0189      	lsls	r1, r1, #6
    9de8:	f041 0102 	orr.w	r1, r1, #2
    9dec:	f016 fee8 	bl	20bc0 <log_0>
		return -ENOTSUP;
    9df0:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    9df4:	4620      	mov	r0, r4
    9df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    9df8:	4e1a      	ldr	r6, [pc, #104]	; (9e64 <bt_pub_key_gen+0x98>)
    9dfa:	6833      	ldr	r3, [r6, #0]
    9dfc:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    9dfe:	6030      	str	r0, [r6, #0]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9e00:	2104      	movs	r1, #4
    9e02:	f105 0098 	add.w	r0, r5, #152	; 0x98
    9e06:	f018 fde7 	bl	229d8 <atomic_test_and_set_bit>
    9e0a:	4607      	mov	r7, r0
    9e0c:	bb00      	cbnz	r0, 9e50 <bt_pub_key_gen+0x84>
    9e0e:	f06f 0108 	mvn.w	r1, #8
    9e12:	f105 0098 	add.w	r0, r5, #152	; 0x98
    9e16:	f018 fdb0 	bl	2297a <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    9e1a:	463a      	mov	r2, r7
    9e1c:	4639      	mov	r1, r7
    9e1e:	f242 0025 	movw	r0, #8229	; 0x2025
    9e22:	f7fe f9e1 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
    9e26:	4604      	mov	r4, r0
    9e28:	2800      	cmp	r0, #0
    9e2a:	d0e3      	beq.n	9df4 <bt_pub_key_gen+0x28>
    9e2c:	4b0a      	ldr	r3, [pc, #40]	; (9e58 <bt_pub_key_gen+0x8c>)
    9e2e:	490b      	ldr	r1, [pc, #44]	; (9e5c <bt_pub_key_gen+0x90>)
		BT_ERR("Sending LE P256 Public Key command failed");
    9e30:	480d      	ldr	r0, [pc, #52]	; (9e68 <bt_pub_key_gen+0x9c>)
    9e32:	1ac9      	subs	r1, r1, r3
    9e34:	08c9      	lsrs	r1, r1, #3
    9e36:	0189      	lsls	r1, r1, #6
    9e38:	f041 0101 	orr.w	r1, r1, #1
    9e3c:	f016 fec0 	bl	20bc0 <log_0>
    9e40:	f06f 0110 	mvn.w	r1, #16
    9e44:	f105 0098 	add.w	r0, r5, #152	; 0x98
    9e48:	f018 fd97 	bl	2297a <atomic_and>
		pub_key_cb = NULL;
    9e4c:	6037      	str	r7, [r6, #0]
		return err;
    9e4e:	e7d1      	b.n	9df4 <bt_pub_key_gen+0x28>
		return 0;
    9e50:	2400      	movs	r4, #0
    9e52:	e7cf      	b.n	9df4 <bt_pub_key_gen+0x28>
    9e54:	20000000 	.word	0x20000000
    9e58:	00026544 	.word	0x00026544
    9e5c:	0002662c 	.word	0x0002662c
    9e60:	000298d7 	.word	0x000298d7
    9e64:	200018f8 	.word	0x200018f8
    9e68:	000298f6 	.word	0x000298f6

00009e6c <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    9e6c:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9e6e:	4804      	ldr	r0, [pc, #16]	; (9e80 <bt_pub_key_get+0x14>)
    9e70:	f018 fd77 	bl	22962 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    9e74:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
    9e78:	4802      	ldr	r0, [pc, #8]	; (9e84 <bt_pub_key_get+0x18>)
    9e7a:	bf08      	it	eq
    9e7c:	2000      	moveq	r0, #0
    9e7e:	bd08      	pop	{r3, pc}
    9e80:	20000098 	.word	0x20000098
    9e84:	20005335 	.word	0x20005335

00009e88 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    9e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9e8a:	4d1a      	ldr	r5, [pc, #104]	; (9ef4 <bt_dh_key_gen+0x6c>)
    9e8c:	682b      	ldr	r3, [r5, #0]
{
    9e8e:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9e90:	b113      	cbz	r3, 9e98 <bt_dh_key_gen+0x10>
		return -EBUSY;
    9e92:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    9e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9e98:	4817      	ldr	r0, [pc, #92]	; (9ef8 <bt_dh_key_gen+0x70>)
    9e9a:	f018 fd62 	bl	22962 <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9e9e:	06c2      	lsls	r2, r0, #27
    9ea0:	f3c0 1700 	ubfx	r7, r0, #4, #1
    9ea4:	d4f5      	bmi.n	9e92 <bt_dh_key_gen+0xa>
    9ea6:	4814      	ldr	r0, [pc, #80]	; (9ef8 <bt_dh_key_gen+0x70>)
    9ea8:	f018 fd5b 	bl	22962 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    9eac:	0703      	lsls	r3, r0, #28
    9eae:	d51d      	bpl.n	9eec <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
    9eb0:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    9eb2:	f242 0026 	movw	r0, #8230	; 0x2026
    9eb6:	2140      	movs	r1, #64	; 0x40
    9eb8:	f7fe f83a 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
    9ebc:	4604      	mov	r4, r0
    9ebe:	b918      	cbnz	r0, 9ec8 <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
    9ec0:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    9ec2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9ec6:	e7e6      	b.n	9e96 <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
    9ec8:	2140      	movs	r1, #64	; 0x40
    9eca:	3008      	adds	r0, #8
    9ecc:	f01b fa8e 	bl	253ec <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    9ed0:	2240      	movs	r2, #64	; 0x40
    9ed2:	4631      	mov	r1, r6
    9ed4:	f018 fc24 	bl	22720 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    9ed8:	463a      	mov	r2, r7
    9eda:	4621      	mov	r1, r4
    9edc:	f242 0026 	movw	r0, #8230	; 0x2026
    9ee0:	f7fe f982 	bl	81e8 <bt_hci_cmd_send_sync>
	if (err) {
    9ee4:	2800      	cmp	r0, #0
    9ee6:	d0d6      	beq.n	9e96 <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
    9ee8:	602f      	str	r7, [r5, #0]
		return err;
    9eea:	e7d4      	b.n	9e96 <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
    9eec:	f06f 0030 	mvn.w	r0, #48	; 0x30
    9ef0:	e7d1      	b.n	9e96 <bt_dh_key_gen+0xe>
    9ef2:	bf00      	nop
    9ef4:	200018f4 	.word	0x200018f4
    9ef8:	20000098 	.word	0x20000098

00009efc <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    9efc:	2300      	movs	r3, #0
	tx->user_data = NULL;
    9efe:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    9f02:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    9f04:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    9f06:	4801      	ldr	r0, [pc, #4]	; (9f0c <tx_free+0x10>)
    9f08:	f01b be2a 	b.w	25b60 <k_queue_append>
    9f0c:	20000874 	.word	0x20000874

00009f10 <notify_connected>:
{
    9f10:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    9f12:	4b09      	ldr	r3, [pc, #36]	; (9f38 <notify_connected+0x28>)
    9f14:	681d      	ldr	r5, [r3, #0]
{
    9f16:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    9f18:	7b21      	ldrb	r1, [r4, #12]
    9f1a:	b92d      	cbnz	r5, 9f28 <notify_connected+0x18>
	if (!conn->err) {
    9f1c:	b951      	cbnz	r1, 9f34 <notify_connected+0x24>
		bt_gatt_connected(conn);
    9f1e:	4620      	mov	r0, r4
}
    9f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    9f24:	f004 bde4 	b.w	eaf0 <bt_gatt_connected>
		if (cb->connected) {
    9f28:	682b      	ldr	r3, [r5, #0]
    9f2a:	b10b      	cbz	r3, 9f30 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    9f2c:	4620      	mov	r0, r4
    9f2e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9f30:	69ad      	ldr	r5, [r5, #24]
    9f32:	e7f1      	b.n	9f18 <notify_connected+0x8>
}
    9f34:	bd38      	pop	{r3, r4, r5, pc}
    9f36:	bf00      	nop
    9f38:	20001910 	.word	0x20001910

00009f3c <send_frag>:
	return 0;
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    9f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    9f40:	694d      	ldr	r5, [r1, #20]
{
    9f42:	4604      	mov	r4, r0
    9f44:	460e      	mov	r6, r1
    9f46:	4691      	mov	r9, r2
    9f48:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    9f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9f4e:	4843      	ldr	r0, [pc, #268]	; (a05c <send_frag+0x120>)
    9f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9f54:	f015 fea8 	bl	1fca8 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    9f58:	7b63      	ldrb	r3, [r4, #13]
    9f5a:	2b06      	cmp	r3, #6
    9f5c:	d14e      	bne.n	9ffc <send_frag+0xc0>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    9f5e:	2104      	movs	r1, #4
    9f60:	f106 0008 	add.w	r0, r6, #8
    9f64:	f01b fa63 	bl	2542e <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    9f68:	8822      	ldrh	r2, [r4, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    9f6a:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    9f6c:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    9f70:	3b04      	subs	r3, #4
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    9f72:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    9f74:	8043      	strh	r3, [r0, #2]
	__asm__ volatile(
    9f76:	f04f 0320 	mov.w	r3, #32
    9f7a:	f3ef 8211 	mrs	r2, BASEPRI
    9f7e:	f383 8811 	msr	BASEPRI, r3
    9f82:	f3bf 8f6f 	isb	sy

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    9f86:	2d00      	cmp	r5, #0
    9f88:	d04a      	beq.n	a020 <send_frag+0xe4>
	parent->next = child;
    9f8a:	2300      	movs	r3, #0
    9f8c:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    9f8e:	69a3      	ldr	r3, [r4, #24]
    9f90:	2b00      	cmp	r3, #0
    9f92:	d142      	bne.n	a01a <send_frag+0xde>
	list->head = node;
    9f94:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    9f98:	f382 8811 	msr	BASEPRI, r2
    9f9c:	f3bf 8f6f 	isb	sy
    9fa0:	2302      	movs	r3, #2
    9fa2:	7533      	strb	r3, [r6, #20]
	}
	irq_unlock(key);

	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	err = bt_send(buf);
    9fa4:	4630      	mov	r0, r6
    9fa6:	f018 fe57 	bl	22c58 <bt_send>
	if (err) {
    9faa:	4601      	mov	r1, r0
    9fac:	2800      	cmp	r0, #0
    9fae:	d053      	beq.n	a058 <send_frag+0x11c>
    9fb0:	4b2b      	ldr	r3, [pc, #172]	; (a060 <send_frag+0x124>)
    9fb2:	4a2c      	ldr	r2, [pc, #176]	; (a064 <send_frag+0x128>)
		BT_ERR("Unable to send to driver (err %d)", err);
    9fb4:	482c      	ldr	r0, [pc, #176]	; (a068 <send_frag+0x12c>)
    9fb6:	1ad2      	subs	r2, r2, r3
    9fb8:	08d2      	lsrs	r2, r2, #3
    9fba:	0192      	lsls	r2, r2, #6
    9fbc:	f042 0201 	orr.w	r2, r2, #1
    9fc0:	f016 fe0b 	bl	20bda <log_1>
	__asm__ volatile(
    9fc4:	f04f 0320 	mov.w	r3, #32
    9fc8:	f3ef 8111 	mrs	r1, BASEPRI
    9fcc:	f383 8811 	msr	BASEPRI, r3
    9fd0:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    9fd4:	2d00      	cmp	r5, #0
    9fd6:	d039      	beq.n	a04c <send_frag+0x110>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9fd8:	6963      	ldr	r3, [r4, #20]
    9fda:	2200      	movs	r2, #0
    9fdc:	b153      	cbz	r3, 9ff4 <send_frag+0xb8>
    9fde:	429d      	cmp	r5, r3
    9fe0:	d131      	bne.n	a046 <send_frag+0x10a>
Z_GENLIST_REMOVE(slist, snode)
    9fe2:	682b      	ldr	r3, [r5, #0]
    9fe4:	bb4a      	cbnz	r2, a03a <send_frag+0xfe>
    9fe6:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    9fe8:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    9fea:	4295      	cmp	r5, r2
    9fec:	d100      	bne.n	9ff0 <send_frag+0xb4>
	list->tail = node;
    9fee:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    9ff0:	2300      	movs	r3, #0
    9ff2:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    9ff4:	f381 8811 	msr	BASEPRI, r1
    9ff8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    9ffc:	4817      	ldr	r0, [pc, #92]	; (a05c <send_frag+0x120>)
    9ffe:	f015 fe2d 	bl	1fc5c <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    a002:	b115      	cbz	r5, a00a <send_frag+0xce>
		tx_free(tx);
    a004:	4628      	mov	r0, r5
    a006:	f7ff ff79 	bl	9efc <tx_free>
	}

	if (always_consume) {
    a00a:	b11f      	cbz	r7, a014 <send_frag+0xd8>
		net_buf_unref(buf);
    a00c:	4630      	mov	r0, r6
    a00e:	f013 ffd3 	bl	1dfb8 <net_buf_unref>
	}
	return false;
    a012:	2700      	movs	r7, #0
}
    a014:	4638      	mov	r0, r7
    a016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a01a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    a01c:	61a5      	str	r5, [r4, #24]
}
    a01e:	e7bb      	b.n	9f98 <send_frag+0x5c>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    a020:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    a022:	b133      	cbz	r3, a032 <send_frag+0xf6>
			pending_no_cb = &tail_tx->pending_no_cb;
    a024:	f103 080c 	add.w	r8, r3, #12
    a028:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    a02a:	3301      	adds	r3, #1
    a02c:	f8c8 3000 	str.w	r3, [r8]
    a030:	e7b2      	b.n	9f98 <send_frag+0x5c>
			pending_no_cb = &conn->pending_no_cb;
    a032:	69e3      	ldr	r3, [r4, #28]
    a034:	f104 081c 	add.w	r8, r4, #28
    a038:	e7f7      	b.n	a02a <send_frag+0xee>
	parent->next = child;
    a03a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    a03c:	69a3      	ldr	r3, [r4, #24]
    a03e:	429d      	cmp	r5, r3
	list->tail = node;
    a040:	bf08      	it	eq
    a042:	61a2      	streq	r2, [r4, #24]
}
    a044:	e7d4      	b.n	9ff0 <send_frag+0xb4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a046:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a048:	681b      	ldr	r3, [r3, #0]
    a04a:	e7c7      	b.n	9fdc <send_frag+0xa0>
			(*pending_no_cb)--;
    a04c:	f8d8 3000 	ldr.w	r3, [r8]
    a050:	3b01      	subs	r3, #1
    a052:	f8c8 3000 	str.w	r3, [r8]
    a056:	e7cd      	b.n	9ff4 <send_frag+0xb8>
	return true;
    a058:	2701      	movs	r7, #1
    a05a:	e7db      	b.n	a014 <send_frag+0xd8>
    a05c:	200000b4 	.word	0x200000b4
    a060:	00026544 	.word	0x00026544
    a064:	0002654c 	.word	0x0002654c
    a068:	0002922e 	.word	0x0002922e

0000a06c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    a06c:	b570      	push	{r4, r5, r6, lr}
    a06e:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    a070:	f100 0634 	add.w	r6, r0, #52	; 0x34
    a074:	2200      	movs	r2, #0
    a076:	2300      	movs	r3, #0
    a078:	4630      	mov	r0, r6
    a07a:	f01b f954 	bl	25326 <net_buf_get>
    a07e:	4605      	mov	r5, r0
    a080:	b958      	cbnz	r0, a09a <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    a082:	4620      	mov	r0, r4
    a084:	f018 fe36 	bl	22cf4 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a088:	f104 0158 	add.w	r1, r4, #88	; 0x58
    a08c:	4807      	ldr	r0, [pc, #28]	; (a0ac <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->update_work, K_NO_WAIT);
}
    a08e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a092:	2200      	movs	r2, #0
    a094:	2300      	movs	r3, #0
    a096:	f015 bf1f 	b.w	1fed8 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    a09a:	6968      	ldr	r0, [r5, #20]
    a09c:	b108      	cbz	r0, a0a2 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    a09e:	f7ff ff2d 	bl	9efc <tx_free>
		net_buf_unref(buf);
    a0a2:	4628      	mov	r0, r5
    a0a4:	f013 ff88 	bl	1dfb8 <net_buf_unref>
    a0a8:	e7e4      	b.n	a074 <conn_cleanup+0x8>
    a0aa:	bf00      	nop
    a0ac:	20001510 	.word	0x20001510

0000a0b0 <bt_conn_get_pkts>:
}
    a0b0:	4800      	ldr	r0, [pc, #0]	; (a0b4 <bt_conn_get_pkts+0x4>)
    a0b2:	4770      	bx	lr
    a0b4:	200000b4 	.word	0x200000b4

0000a0b8 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a0b8:	1d03      	adds	r3, r0, #4
{
    a0ba:	b570      	push	{r4, r5, r6, lr}
    a0bc:	4604      	mov	r4, r0
    a0be:	4618      	mov	r0, r3
    a0c0:	f018 fe12 	bl	22ce8 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a0c4:	0582      	lsls	r2, r0, #22
    a0c6:	d519      	bpl.n	a0fc <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    a0c8:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a0cc:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    a0d0:	4291      	cmp	r1, r2
    a0d2:	d813      	bhi.n	a0fc <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    a0d4:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    a0d8:	4291      	cmp	r1, r2
    a0da:	d30f      	bcc.n	a0fc <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    a0dc:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    a0e0:	4291      	cmp	r1, r2
    a0e2:	d10b      	bne.n	a0fc <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a0e4:	f3bf 8f5b 	dmb	ish
    a0e8:	e853 2f00 	ldrex	r2, [r3]
    a0ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    a0f0:	e843 2100 	strex	r1, r2, [r3]
    a0f4:	2900      	cmp	r1, #0
    a0f6:	d1f7      	bne.n	a0e8 <notify_le_param_updated+0x30>
    a0f8:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    a0fc:	4b07      	ldr	r3, [pc, #28]	; (a11c <notify_le_param_updated+0x64>)
    a0fe:	681d      	ldr	r5, [r3, #0]
    a100:	b905      	cbnz	r5, a104 <notify_le_param_updated+0x4c>
}
    a102:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    a104:	68ee      	ldr	r6, [r5, #12]
    a106:	b13e      	cbz	r6, a118 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    a108:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    a10c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    a110:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    a114:	4620      	mov	r0, r4
    a116:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    a118:	69ad      	ldr	r5, [r5, #24]
    a11a:	e7f1      	b.n	a100 <notify_le_param_updated+0x48>
    a11c:	20001910 	.word	0x20001910

0000a120 <le_param_req>:
{
    a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a122:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    a124:	4608      	mov	r0, r1
{
    a126:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    a128:	f018 fd58 	bl	22bdc <bt_le_conn_params_valid>
    a12c:	4604      	mov	r4, r0
    a12e:	b910      	cbnz	r0, a136 <le_param_req+0x16>
		return false;
    a130:	2400      	movs	r4, #0
}
    a132:	4620      	mov	r0, r4
    a134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    a136:	4b09      	ldr	r3, [pc, #36]	; (a15c <le_param_req+0x3c>)
    a138:	681e      	ldr	r6, [r3, #0]
    a13a:	2e00      	cmp	r6, #0
    a13c:	d0f9      	beq.n	a132 <le_param_req+0x12>
		if (!cb->le_param_req) {
    a13e:	68b3      	ldr	r3, [r6, #8]
    a140:	b90b      	cbnz	r3, a146 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    a142:	69b6      	ldr	r6, [r6, #24]
    a144:	e7f9      	b.n	a13a <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    a146:	4629      	mov	r1, r5
    a148:	4638      	mov	r0, r7
    a14a:	4798      	blx	r3
    a14c:	2800      	cmp	r0, #0
    a14e:	d0ef      	beq.n	a130 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    a150:	4628      	mov	r0, r5
    a152:	f018 fd43 	bl	22bdc <bt_le_conn_params_valid>
    a156:	2800      	cmp	r0, #0
    a158:	d1f3      	bne.n	a142 <le_param_req+0x22>
    a15a:	e7e9      	b.n	a130 <le_param_req+0x10>
    a15c:	20001910 	.word	0x20001910

0000a160 <bt_conn_identity_resolved>:
{
    a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    a162:	78c3      	ldrb	r3, [r0, #3]
{
    a164:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    a166:	b93b      	cbnz	r3, a178 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    a168:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    a16c:	4b08      	ldr	r3, [pc, #32]	; (a190 <bt_conn_identity_resolved+0x30>)
    a16e:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    a170:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    a174:	b91d      	cbnz	r5, a17e <bt_conn_identity_resolved+0x1e>
}
    a176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    a178:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    a17c:	e7f6      	b.n	a16c <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    a17e:	692b      	ldr	r3, [r5, #16]
    a180:	b11b      	cbz	r3, a18a <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    a182:	463a      	mov	r2, r7
    a184:	4631      	mov	r1, r6
    a186:	4620      	mov	r0, r4
    a188:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a18a:	69ad      	ldr	r5, [r5, #24]
    a18c:	e7f2      	b.n	a174 <bt_conn_identity_resolved+0x14>
    a18e:	bf00      	nop
    a190:	20001910 	.word	0x20001910

0000a194 <bt_conn_security_changed>:
	for (cb = callback_list; cb; cb = cb->_next) {
    a194:	4b07      	ldr	r3, [pc, #28]	; (a1b4 <bt_conn_security_changed+0x20>)
{
    a196:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    a198:	681c      	ldr	r4, [r3, #0]
{
    a19a:	4605      	mov	r5, r0
    a19c:	460e      	mov	r6, r1
	for (cb = callback_list; cb; cb = cb->_next) {
    a19e:	b904      	cbnz	r4, a1a2 <bt_conn_security_changed+0xe>
}
    a1a0:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    a1a2:	6963      	ldr	r3, [r4, #20]
    a1a4:	b11b      	cbz	r3, a1ae <bt_conn_security_changed+0x1a>
			cb->security_changed(conn, conn->sec_level, err);
    a1a6:	7a69      	ldrb	r1, [r5, #9]
    a1a8:	4632      	mov	r2, r6
    a1aa:	4628      	mov	r0, r5
    a1ac:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a1ae:	69a4      	ldr	r4, [r4, #24]
    a1b0:	e7f5      	b.n	a19e <bt_conn_security_changed+0xa>
    a1b2:	bf00      	nop
    a1b4:	20001910 	.word	0x20001910

0000a1b8 <bt_conn_cb_register>:
	cb->_next = callback_list;
    a1b8:	4b02      	ldr	r3, [pc, #8]	; (a1c4 <bt_conn_cb_register+0xc>)
    a1ba:	681a      	ldr	r2, [r3, #0]
    a1bc:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    a1be:	6018      	str	r0, [r3, #0]
}
    a1c0:	4770      	bx	lr
    a1c2:	bf00      	nop
    a1c4:	20001910 	.word	0x20001910

0000a1c8 <bt_conn_recv>:
{
    a1c8:	b570      	push	{r4, r5, r6, lr}
    a1ca:	4616      	mov	r6, r2
    a1cc:	4604      	mov	r4, r0
    a1ce:	460d      	mov	r5, r1
	tx_notify(conn);
    a1d0:	f018 fdb5 	bl	22d3e <tx_notify>
	switch (flags) {
    a1d4:	2e01      	cmp	r6, #1
    a1d6:	d01b      	beq.n	a210 <bt_conn_recv+0x48>
    a1d8:	2e02      	cmp	r6, #2
    a1da:	d16c      	bne.n	a2b6 <bt_conn_recv+0xee>
		len = sys_le16_to_cpu(hdr->len);
    a1dc:	68ab      	ldr	r3, [r5, #8]
    a1de:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    a1e0:	89e3      	ldrh	r3, [r4, #14]
    a1e2:	b163      	cbz	r3, a1fe <bt_conn_recv+0x36>
    a1e4:	4b3d      	ldr	r3, [pc, #244]	; (a2dc <bt_conn_recv+0x114>)
    a1e6:	493e      	ldr	r1, [pc, #248]	; (a2e0 <bt_conn_recv+0x118>)
			BT_ERR("Unexpected first L2CAP frame");
    a1e8:	483e      	ldr	r0, [pc, #248]	; (a2e4 <bt_conn_recv+0x11c>)
    a1ea:	1ac9      	subs	r1, r1, r3
    a1ec:	08c9      	lsrs	r1, r1, #3
    a1ee:	0189      	lsls	r1, r1, #6
    a1f0:	f041 0101 	orr.w	r1, r1, #1
    a1f4:	f016 fce4 	bl	20bc0 <log_0>
			bt_conn_reset_rx_state(conn);
    a1f8:	4620      	mov	r0, r4
    a1fa:	f018 fd7b 	bl	22cf4 <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    a1fe:	89ab      	ldrh	r3, [r5, #12]
    a200:	1af3      	subs	r3, r6, r3
    a202:	3304      	adds	r3, #4
    a204:	b29b      	uxth	r3, r3
    a206:	81e3      	strh	r3, [r4, #14]
		if (conn->rx_len) {
    a208:	2b00      	cmp	r3, #0
    a20a:	d043      	beq.n	a294 <bt_conn_recv+0xcc>
			conn->rx = buf;
    a20c:	6125      	str	r5, [r4, #16]
}
    a20e:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    a210:	89e3      	ldrh	r3, [r4, #14]
    a212:	b98b      	cbnz	r3, a238 <bt_conn_recv+0x70>
    a214:	4932      	ldr	r1, [pc, #200]	; (a2e0 <bt_conn_recv+0x118>)
    a216:	4b31      	ldr	r3, [pc, #196]	; (a2dc <bt_conn_recv+0x114>)
			BT_ERR("Unexpected L2CAP continuation");
    a218:	4833      	ldr	r0, [pc, #204]	; (a2e8 <bt_conn_recv+0x120>)
    a21a:	1ac9      	subs	r1, r1, r3
    a21c:	08c9      	lsrs	r1, r1, #3
    a21e:	0189      	lsls	r1, r1, #6
    a220:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("L2CAP data overflow");
    a224:	f016 fccc 	bl	20bc0 <log_0>
			bt_conn_reset_rx_state(conn);
    a228:	4620      	mov	r0, r4
    a22a:	f018 fd63 	bl	22cf4 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    a22e:	4628      	mov	r0, r5
}
    a230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    a234:	f013 bec0 	b.w	1dfb8 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    a238:	89ae      	ldrh	r6, [r5, #12]
    a23a:	42b3      	cmp	r3, r6
    a23c:	d208      	bcs.n	a250 <bt_conn_recv+0x88>
    a23e:	4928      	ldr	r1, [pc, #160]	; (a2e0 <bt_conn_recv+0x118>)
    a240:	4b26      	ldr	r3, [pc, #152]	; (a2dc <bt_conn_recv+0x114>)
			BT_ERR("L2CAP data overflow");
    a242:	482a      	ldr	r0, [pc, #168]	; (a2ec <bt_conn_recv+0x124>)
    a244:	1ac9      	subs	r1, r1, r3
    a246:	08c9      	lsrs	r1, r1, #3
    a248:	0189      	lsls	r1, r1, #6
    a24a:	f041 0101 	orr.w	r1, r1, #1
    a24e:	e7e9      	b.n	a224 <bt_conn_recv+0x5c>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    a250:	6920      	ldr	r0, [r4, #16]
    a252:	3008      	adds	r0, #8
    a254:	f01b f923 	bl	2549e <net_buf_simple_tailroom>
    a258:	4286      	cmp	r6, r0
    a25a:	d908      	bls.n	a26e <bt_conn_recv+0xa6>
    a25c:	4920      	ldr	r1, [pc, #128]	; (a2e0 <bt_conn_recv+0x118>)
    a25e:	4b1f      	ldr	r3, [pc, #124]	; (a2dc <bt_conn_recv+0x114>)
			BT_ERR("Not enough buffer space for L2CAP data");
    a260:	4823      	ldr	r0, [pc, #140]	; (a2f0 <bt_conn_recv+0x128>)
    a262:	1ac9      	subs	r1, r1, r3
    a264:	08c9      	lsrs	r1, r1, #3
    a266:	0189      	lsls	r1, r1, #6
    a268:	f041 0101 	orr.w	r1, r1, #1
    a26c:	e7da      	b.n	a224 <bt_conn_recv+0x5c>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    a26e:	6920      	ldr	r0, [r4, #16]
    a270:	89aa      	ldrh	r2, [r5, #12]
    a272:	68a9      	ldr	r1, [r5, #8]
    a274:	3008      	adds	r0, #8
    a276:	f01b f8bf 	bl	253f8 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    a27a:	89e3      	ldrh	r3, [r4, #14]
    a27c:	89aa      	ldrh	r2, [r5, #12]
    a27e:	1a9b      	subs	r3, r3, r2
    a280:	81e3      	strh	r3, [r4, #14]
		net_buf_unref(buf);
    a282:	4628      	mov	r0, r5
    a284:	f013 fe98 	bl	1dfb8 <net_buf_unref>
		if (conn->rx_len) {
    a288:	89e3      	ldrh	r3, [r4, #14]
    a28a:	2b00      	cmp	r3, #0
    a28c:	d1bf      	bne.n	a20e <bt_conn_recv+0x46>
		buf = conn->rx;
    a28e:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    a290:	81e3      	strh	r3, [r4, #14]
		conn->rx = NULL;
    a292:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    a294:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    a296:	89aa      	ldrh	r2, [r5, #12]
    a298:	8819      	ldrh	r1, [r3, #0]
    a29a:	1d0b      	adds	r3, r1, #4
    a29c:	4293      	cmp	r3, r2
    a29e:	d016      	beq.n	a2ce <bt_conn_recv+0x106>
    a2a0:	480e      	ldr	r0, [pc, #56]	; (a2dc <bt_conn_recv+0x114>)
    a2a2:	4b0f      	ldr	r3, [pc, #60]	; (a2e0 <bt_conn_recv+0x118>)
    a2a4:	1a1b      	subs	r3, r3, r0
    a2a6:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    a2a8:	019b      	lsls	r3, r3, #6
    a2aa:	4812      	ldr	r0, [pc, #72]	; (a2f4 <bt_conn_recv+0x12c>)
    a2ac:	f043 0301 	orr.w	r3, r3, #1
    a2b0:	f016 fca7 	bl	20c02 <log_2>
		net_buf_unref(buf);
    a2b4:	e7bb      	b.n	a22e <bt_conn_recv+0x66>
    a2b6:	4a09      	ldr	r2, [pc, #36]	; (a2dc <bt_conn_recv+0x114>)
    a2b8:	4b09      	ldr	r3, [pc, #36]	; (a2e0 <bt_conn_recv+0x118>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    a2ba:	480f      	ldr	r0, [pc, #60]	; (a2f8 <bt_conn_recv+0x130>)
    a2bc:	1a9b      	subs	r3, r3, r2
    a2be:	08db      	lsrs	r3, r3, #3
    a2c0:	019b      	lsls	r3, r3, #6
    a2c2:	f043 0201 	orr.w	r2, r3, #1
    a2c6:	4631      	mov	r1, r6
    a2c8:	f016 fc87 	bl	20bda <log_1>
		bt_conn_reset_rx_state(conn);
    a2cc:	e7ac      	b.n	a228 <bt_conn_recv+0x60>
	bt_l2cap_recv(conn, buf);
    a2ce:	4629      	mov	r1, r5
    a2d0:	4620      	mov	r0, r4
}
    a2d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    a2d6:	f001 ba45 	b.w	b764 <bt_l2cap_recv>
    a2da:	bf00      	nop
    a2dc:	00026544 	.word	0x00026544
    a2e0:	0002654c 	.word	0x0002654c
    a2e4:	0002994f 	.word	0x0002994f
    a2e8:	0002996c 	.word	0x0002996c
    a2ec:	0002998a 	.word	0x0002998a
    a2f0:	0002999e 	.word	0x0002999e
    a2f4:	000299e3 	.word	0x000299e3
    a2f8:	000299c5 	.word	0x000299c5

0000a2fc <bt_conn_send_cb>:
{
    a2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a300:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    a302:	7b43      	ldrb	r3, [r0, #13]
    a304:	2b06      	cmp	r3, #6
{
    a306:	4606      	mov	r6, r0
    a308:	460d      	mov	r5, r1
    a30a:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    a30c:	d00f      	beq.n	a32e <bt_conn_send_cb+0x32>
    a30e:	4b2a      	ldr	r3, [pc, #168]	; (a3b8 <bt_conn_send_cb+0xbc>)
    a310:	492a      	ldr	r1, [pc, #168]	; (a3bc <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    a312:	482b      	ldr	r0, [pc, #172]	; (a3c0 <bt_conn_send_cb+0xc4>)
    a314:	1ac9      	subs	r1, r1, r3
    a316:	08c9      	lsrs	r1, r1, #3
    a318:	0189      	lsls	r1, r1, #6
    a31a:	f041 0101 	orr.w	r1, r1, #1
    a31e:	f016 fc4f 	bl	20bc0 <log_0>
		net_buf_unref(buf);
    a322:	4628      	mov	r0, r5
    a324:	f013 fe48 	bl	1dfb8 <net_buf_unref>
			return -ENOTCONN;
    a328:	f06f 0038 	mvn.w	r0, #56	; 0x38
    a32c:	e020      	b.n	a370 <bt_conn_send_cb+0x74>
	if (cb) {
    a32e:	2a00      	cmp	r2, #0
    a330:	d040      	beq.n	a3b4 <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    a332:	f015 fc8d 	bl	1fc50 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    a336:	4b23      	ldr	r3, [pc, #140]	; (a3c4 <bt_conn_send_cb+0xc8>)
    a338:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    a33a:	4823      	ldr	r0, [pc, #140]	; (a3c8 <bt_conn_send_cb+0xcc>)
    a33c:	bf07      	ittee	eq
    a33e:	2200      	moveq	r2, #0
    a340:	2300      	moveq	r3, #0
    a342:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    a346:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    a34a:	f015 f903 	bl	1f554 <z_impl_k_queue_get>
    a34e:	4604      	mov	r4, r0
		if (!tx) {
    a350:	b980      	cbnz	r0, a374 <bt_conn_send_cb+0x78>
    a352:	4b19      	ldr	r3, [pc, #100]	; (a3b8 <bt_conn_send_cb+0xbc>)
    a354:	4919      	ldr	r1, [pc, #100]	; (a3bc <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    a356:	481d      	ldr	r0, [pc, #116]	; (a3cc <bt_conn_send_cb+0xd0>)
    a358:	1ac9      	subs	r1, r1, r3
    a35a:	08c9      	lsrs	r1, r1, #3
    a35c:	0189      	lsls	r1, r1, #6
    a35e:	f041 0101 	orr.w	r1, r1, #1
    a362:	f016 fc2d 	bl	20bc0 <log_0>
			net_buf_unref(buf);
    a366:	4628      	mov	r0, r5
    a368:	f013 fe26 	bl	1dfb8 <net_buf_unref>
			return -ENOBUFS;
    a36c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    a370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    a374:	7b73      	ldrb	r3, [r6, #13]
    a376:	2b06      	cmp	r3, #6
    a378:	d010      	beq.n	a39c <bt_conn_send_cb+0xa0>
    a37a:	4b0f      	ldr	r3, [pc, #60]	; (a3b8 <bt_conn_send_cb+0xbc>)
    a37c:	490f      	ldr	r1, [pc, #60]	; (a3bc <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    a37e:	4814      	ldr	r0, [pc, #80]	; (a3d0 <bt_conn_send_cb+0xd4>)
    a380:	1ac9      	subs	r1, r1, r3
    a382:	08c9      	lsrs	r1, r1, #3
    a384:	0189      	lsls	r1, r1, #6
    a386:	f041 0102 	orr.w	r1, r1, #2
    a38a:	f016 fc19 	bl	20bc0 <log_0>
			net_buf_unref(buf);
    a38e:	4628      	mov	r0, r5
    a390:	f013 fe12 	bl	1dfb8 <net_buf_unref>
			tx_free(tx);
    a394:	4620      	mov	r0, r4
    a396:	f7ff fdb1 	bl	9efc <tx_free>
    a39a:	e7c5      	b.n	a328 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    a39c:	2300      	movs	r3, #0
		tx->user_data = user_data;
    a39e:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    a3a2:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    a3a4:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    a3a6:	f106 0034 	add.w	r0, r6, #52	; 0x34
    a3aa:	4629      	mov	r1, r5
    a3ac:	f01a ffdf 	bl	2536e <net_buf_put>
	return 0;
    a3b0:	2000      	movs	r0, #0
    a3b2:	e7dd      	b.n	a370 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    a3b4:	614a      	str	r2, [r1, #20]
    a3b6:	e7f6      	b.n	a3a6 <bt_conn_send_cb+0xaa>
    a3b8:	00026544 	.word	0x00026544
    a3bc:	0002654c 	.word	0x0002654c
    a3c0:	000299ff 	.word	0x000299ff
    a3c4:	20001528 	.word	0x20001528
    a3c8:	20000874 	.word	0x20000874
    a3cc:	00029a0e 	.word	0x00029a0e
    a3d0:	00029a2c 	.word	0x00029a2c

0000a3d4 <bt_conn_prepare_events>:

int bt_conn_prepare_events(struct k_poll_event events[])
{
    a3d4:	b570      	push	{r4, r5, r6, lr}
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0U;
    a3d6:	4b2f      	ldr	r3, [pc, #188]	; (a494 <bt_conn_prepare_events+0xc0>)
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    a3d8:	4c2f      	ldr	r4, [pc, #188]	; (a498 <bt_conn_prepare_events+0xc4>)
	conn_change.signaled = 0U;
    a3da:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a3dc:	2101      	movs	r1, #1
{
    a3de:	4606      	mov	r6, r0
	conn_change.signaled = 0U;
    a3e0:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a3e2:	f01b ff6e 	bl	262c2 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    a3e6:	f104 0054 	add.w	r0, r4, #84	; 0x54
    a3ea:	f018 fc7d 	bl	22ce8 <atomic_get>
    a3ee:	2800      	cmp	r0, #0
    a3f0:	d03c      	beq.n	a46c <bt_conn_prepare_events+0x98>
			continue;
		}

		if (conn->state == BT_CONN_DISCONNECTED &&
    a3f2:	7b63      	ldrb	r3, [r4, #13]
    a3f4:	b343      	cbz	r3, a448 <bt_conn_prepare_events+0x74>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
			conn_cleanup(conn);
			continue;
		}

		if (conn->state != BT_CONN_CONNECTED) {
    a3f6:	7b63      	ldrb	r3, [r4, #13]
    a3f8:	2b06      	cmp	r3, #6
    a3fa:	d137      	bne.n	a46c <bt_conn_prepare_events+0x98>
			continue;
		}

		BT_DBG("Adding conn %p to poll list", conn);

		k_poll_event_init(&events[ev_count],
    a3fc:	4b27      	ldr	r3, [pc, #156]	; (a49c <bt_conn_prepare_events+0xc8>)
    a3fe:	2200      	movs	r2, #0
    a400:	2104      	movs	r1, #4
    a402:	f106 0014 	add.w	r0, r6, #20
    a406:	f01b ff5c 	bl	262c2 <k_poll_event_init>
				  K_POLL_TYPE_FIFO_DATA_AVAILABLE,
				  K_POLL_MODE_NOTIFY_ONLY,
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    a40a:	2301      	movs	r3, #1
    a40c:	f886 3020 	strb.w	r3, [r6, #32]
    a410:	2502      	movs	r5, #2
		if (!atomic_get(&conn->ref)) {
    a412:	4823      	ldr	r0, [pc, #140]	; (a4a0 <bt_conn_prepare_events+0xcc>)
    a414:	f018 fc68 	bl	22ce8 <atomic_get>
    a418:	b1a0      	cbz	r0, a444 <bt_conn_prepare_events+0x70>
		if (conn->state == BT_CONN_DISCONNECTED &&
    a41a:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
    a41e:	bb3b      	cbnz	r3, a470 <bt_conn_prepare_events+0x9c>
    a420:	f3bf 8f5b 	dmb	ish
    a424:	481f      	ldr	r0, [pc, #124]	; (a4a4 <bt_conn_prepare_events+0xd0>)
    a426:	e850 2f00 	ldrex	r2, [r0]
    a42a:	f022 0340 	bic.w	r3, r2, #64	; 0x40
    a42e:	e840 3100 	strex	r1, r3, [r0]
    a432:	2900      	cmp	r1, #0
    a434:	d1f7      	bne.n	a426 <bt_conn_prepare_events+0x52>
    a436:	f3bf 8f5b 	dmb	ish
    a43a:	0653      	lsls	r3, r2, #25
    a43c:	d518      	bpl.n	a470 <bt_conn_prepare_events+0x9c>
			conn_cleanup(conn);
    a43e:	3804      	subs	r0, #4
    a440:	f7ff fe14 	bl	a06c <conn_cleanup>
	}

	return ev_count;
}
    a444:	4628      	mov	r0, r5
    a446:	bd70      	pop	{r4, r5, r6, pc}
    a448:	1d23      	adds	r3, r4, #4
    a44a:	f3bf 8f5b 	dmb	ish
    a44e:	e853 2f00 	ldrex	r2, [r3]
    a452:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    a456:	e843 1000 	strex	r0, r1, [r3]
    a45a:	2800      	cmp	r0, #0
    a45c:	d1f7      	bne.n	a44e <bt_conn_prepare_events+0x7a>
    a45e:	f3bf 8f5b 	dmb	ish
		if (conn->state == BT_CONN_DISCONNECTED &&
    a462:	0652      	lsls	r2, r2, #25
    a464:	d5c7      	bpl.n	a3f6 <bt_conn_prepare_events+0x22>
			conn_cleanup(conn);
    a466:	4620      	mov	r0, r4
    a468:	f7ff fe00 	bl	a06c <conn_cleanup>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a46c:	2501      	movs	r5, #1
    a46e:	e7d0      	b.n	a412 <bt_conn_prepare_events+0x3e>
		if (conn->state != BT_CONN_CONNECTED) {
    a470:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
    a474:	2b06      	cmp	r3, #6
    a476:	d1e5      	bne.n	a444 <bt_conn_prepare_events+0x70>
		k_poll_event_init(&events[ev_count],
    a478:	2414      	movs	r4, #20
    a47a:	fb04 6405 	mla	r4, r4, r5, r6
    a47e:	4b0a      	ldr	r3, [pc, #40]	; (a4a8 <bt_conn_prepare_events+0xd4>)
    a480:	2200      	movs	r2, #0
    a482:	2104      	movs	r1, #4
    a484:	4620      	mov	r0, r4
    a486:	f01b ff1c 	bl	262c2 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    a48a:	2301      	movs	r3, #1
    a48c:	3501      	adds	r5, #1
    a48e:	7323      	strb	r3, [r4, #12]
	return ev_count;
    a490:	e7d8      	b.n	a444 <bt_conn_prepare_events+0x70>
    a492:	bf00      	nop
    a494:	200001cc 	.word	0x200001cc
    a498:	20000ba0 	.word	0x20000ba0
    a49c:	20000bd4 	.word	0x20000bd4
    a4a0:	20000cac 	.word	0x20000cac
    a4a4:	20000c5c 	.word	0x20000c5c
    a4a8:	20000c8c 	.word	0x20000c8c

0000a4ac <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    a4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a4b0:	4681      	mov	r9, r0
		if (!atomic_get(&conns[i].ref)) {
    a4b2:	4820      	ldr	r0, [pc, #128]	; (a534 <bt_conn_add_le+0x88>)
    a4b4:	4f20      	ldr	r7, [pc, #128]	; (a538 <bt_conn_add_le+0x8c>)
{
    a4b6:	4688      	mov	r8, r1
		if (!atomic_get(&conns[i].ref)) {
    a4b8:	f018 fc16 	bl	22ce8 <atomic_get>
    a4bc:	b128      	cbz	r0, a4ca <bt_conn_add_le+0x1e>
    a4be:	f507 7086 	add.w	r0, r7, #268	; 0x10c
    a4c2:	f018 fc11 	bl	22ce8 <atomic_get>
    a4c6:	bb90      	cbnz	r0, a52e <bt_conn_add_le+0x82>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    a4c8:	2001      	movs	r0, #1
			conn = &conns[i];
    a4ca:	22b8      	movs	r2, #184	; 0xb8
    a4cc:	fb02 f500 	mul.w	r5, r2, r0
    a4d0:	197c      	adds	r4, r7, r5
	(void)memset(conn, 0, sizeof(*conn));
    a4d2:	2100      	movs	r1, #0
    a4d4:	4620      	mov	r0, r4
    a4d6:	f018 f94e 	bl	22776 <memset>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
    a4da:	f105 0058 	add.w	r0, r5, #88	; 0x58
    a4de:	4917      	ldr	r1, [pc, #92]	; (a53c <bt_conn_add_le+0x90>)
    a4e0:	4438      	add	r0, r7
    a4e2:	f01b fd33 	bl	25f4c <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    a4e6:	4a16      	ldr	r2, [pc, #88]	; (a540 <bt_conn_add_le+0x94>)
    a4e8:	2300      	movs	r3, #0
    a4ea:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    a4ee:	62a3      	str	r3, [r4, #40]	; 0x28
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a4f0:	2601      	movs	r6, #1
    a4f2:	f104 0354 	add.w	r3, r4, #84	; 0x54
    a4f6:	f3bf 8f5b 	dmb	ish
    a4fa:	e853 2f00 	ldrex	r2, [r3]
    a4fe:	e843 6100 	strex	r1, r6, [r3]
    a502:	2900      	cmp	r1, #0
    a504:	d1f9      	bne.n	a4fa <bt_conn_add_le+0x4e>
    a506:	f3bf 8f5b 	dmb	ish
	if (!conn) {
		return NULL;
	}

	conn->id = id;
	bt_addr_le_copy(&conn->le.dst, peer);
    a50a:	f105 0088 	add.w	r0, r5, #136	; 0x88
	conn->id = id;
    a50e:	f884 9008 	strb.w	r9, [r4, #8]
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    a512:	2207      	movs	r2, #7
    a514:	4641      	mov	r1, r8
    a516:	4438      	add	r0, r7
    a518:	f018 f902 	bl	22720 <memcpy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    a51c:	4b09      	ldr	r3, [pc, #36]	; (a544 <bt_conn_add_le+0x98>)
	conn->sec_level = BT_SECURITY_L1;
    a51e:	7266      	strb	r6, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    a520:	72a6      	strb	r6, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
    a522:	70a6      	strb	r6, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    a524:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    a528:	4620      	mov	r0, r4
    a52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
    a52e:	2400      	movs	r4, #0
    a530:	e7fa      	b.n	a528 <bt_conn_add_le+0x7c>
    a532:	bf00      	nop
    a534:	20000bf4 	.word	0x20000bf4
    a538:	20000ba0 	.word	0x20000ba0
    a53c:	0000ab21 	.word	0x0000ab21
    a540:	00022d85 	.word	0x00022d85
    a544:	00280018 	.word	0x00280018

0000a548 <bt_conn_set_state>:
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    a548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    a54c:	7b45      	ldrb	r5, [r0, #13]
    a54e:	428d      	cmp	r5, r1
{
    a550:	4604      	mov	r4, r0
    a552:	460e      	mov	r6, r1
	if (conn->state == state) {
    a554:	d112      	bne.n	a57c <bt_conn_set_state+0x34>
    a556:	4b72      	ldr	r3, [pc, #456]	; (a720 <bt_conn_set_state+0x1d8>)
    a558:	4a72      	ldr	r2, [pc, #456]	; (a724 <bt_conn_set_state+0x1dc>)
		BT_WARN("no transition %s", state2str(state));
    a55a:	4873      	ldr	r0, [pc, #460]	; (a728 <bt_conn_set_state+0x1e0>)
    a55c:	2d07      	cmp	r5, #7
    a55e:	eba2 0203 	sub.w	r2, r2, r3
    a562:	bf96      	itet	ls
    a564:	4b71      	ldrls	r3, [pc, #452]	; (a72c <bt_conn_set_state+0x1e4>)
    a566:	4972      	ldrhi	r1, [pc, #456]	; (a730 <bt_conn_set_state+0x1e8>)
    a568:	f853 1025 	ldrls.w	r1, [r3, r5, lsl #2]
    a56c:	08d2      	lsrs	r2, r2, #3
    a56e:	0192      	lsls	r2, r2, #6
    a570:	f042 0202 	orr.w	r2, r2, #2
	default:
		BT_WARN("no valid (%u) state was set", state);

		break;
	}
}
    a574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
    a578:	f016 bb2f 	b.w	20bda <log_1>
	conn->state = state;
    a57c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    a57e:	b15d      	cbz	r5, a598 <bt_conn_set_state+0x50>
    a580:	2d05      	cmp	r5, #5
    a582:	d00d      	beq.n	a5a0 <bt_conn_set_state+0x58>
	switch (conn->state) {
    a584:	7b63      	ldrb	r3, [r4, #13]
    a586:	2b07      	cmp	r3, #7
    a588:	f200 80bd 	bhi.w	a706 <bt_conn_set_state+0x1be>
    a58c:	e8df f003 	tbb	[pc, r3]
    a590:	c5c5c526 	.word	0xc5c5c526
    a594:	c50f9dc5 	.word	0xc50f9dc5
#endif /* defined(CONFIG_BT_BREDR) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_inc(&conn->ref);
    a598:	3054      	adds	r0, #84	; 0x54
    a59a:	f018 fbc3 	bl	22d24 <atomic_inc>

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	return conn;
    a59e:	e7f1      	b.n	a584 <bt_conn_set_state+0x3c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a5a0:	7883      	ldrb	r3, [r0, #2]
    a5a2:	2b01      	cmp	r3, #1
    a5a4:	d1ee      	bne.n	a584 <bt_conn_set_state+0x3c>
			k_delayed_work_cancel(&conn->update_work);
    a5a6:	3058      	adds	r0, #88	; 0x58
    a5a8:	f01b fcd8 	bl	25f5c <k_delayed_work_cancel>
    a5ac:	e7ea      	b.n	a584 <bt_conn_set_state+0x3c>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a5ae:	78a3      	ldrb	r3, [r4, #2]
    a5b0:	2b04      	cmp	r3, #4
    a5b2:	f000 80b2 	beq.w	a71a <bt_conn_set_state+0x1d2>
	z_impl_k_queue_init(queue);
    a5b6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    a5ba:	f01b fac5 	bl	25b48 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    a5be:	2100      	movs	r1, #0
    a5c0:	485c      	ldr	r0, [pc, #368]	; (a734 <bt_conn_set_state+0x1ec>)
    a5c2:	f015 fef9 	bl	203b8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    a5c6:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    a5c8:	4620      	mov	r0, r4
	list->tail = NULL;
    a5ca:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    a5ce:	f000 fef1 	bl	b3b4 <bt_l2cap_connected>
		notify_connected(conn);
    a5d2:	4620      	mov	r0, r4
}
    a5d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify_connected(conn);
    a5d8:	f7ff bc9a 	b.w	9f10 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a5dc:	78a3      	ldrb	r3, [r4, #2]
    a5de:	2b04      	cmp	r3, #4
    a5e0:	d105      	bne.n	a5ee <bt_conn_set_state+0xa6>
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_dec(&conn->ref);
    a5e2:	f104 0054 	add.w	r0, r4, #84	; 0x54
}
    a5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    a5ea:	f018 bb8e 	b.w	22d0a <atomic_dec>
		switch (old_state) {
    a5ee:	3d01      	subs	r5, #1
    a5f0:	2d06      	cmp	r5, #6
    a5f2:	f200 8092 	bhi.w	a71a <bt_conn_set_state+0x1d2>
    a5f6:	a301      	add	r3, pc, #4	; (adr r3, a5fc <bt_conn_set_state+0xb4>)
    a5f8:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    a5fc:	0000a6bd 	.word	0x0000a6bd
    a600:	0000a5e3 	.word	0x0000a5e3
    a604:	0000a5e3 	.word	0x0000a5e3
    a608:	0000a6bd 	.word	0x0000a6bd
    a60c:	0000a6bd 	.word	0x0000a6bd
    a610:	0000a619 	.word	0x0000a619
    a614:	0000a619 	.word	0x0000a619
	z_impl_k_sem_give(sem);
    a618:	4d47      	ldr	r5, [pc, #284]	; (a738 <bt_conn_set_state+0x1f0>)
		tx->pending_no_cb = 0U;
    a61a:	2600      	movs	r6, #0
	__asm__ volatile(
    a61c:	f04f 0320 	mov.w	r3, #32
    a620:	f3ef 8211 	mrs	r2, BASEPRI
    a624:	f383 8811 	msr	BASEPRI, r3
    a628:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    a62c:	69e3      	ldr	r3, [r4, #28]
    a62e:	b14b      	cbz	r3, a644 <bt_conn_set_state+0xfc>
			conn->pending_no_cb--;
    a630:	3b01      	subs	r3, #1
    a632:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    a634:	f382 8811 	msr	BASEPRI, r2
    a638:	f3bf 8f6f 	isb	sy
    a63c:	4628      	mov	r0, r5
    a63e:	f015 fb0d 	bl	1fc5c <z_impl_k_sem_give>
}
    a642:	e7eb      	b.n	a61c <bt_conn_set_state+0xd4>
Z_GENLIST_IS_EMPTY(slist)
    a644:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    a646:	b128      	cbz	r0, a654 <bt_conn_set_state+0x10c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a648:	69a1      	ldr	r1, [r4, #24]
    a64a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    a64c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a64e:	4288      	cmp	r0, r1
	list->tail = node;
    a650:	bf08      	it	eq
    a652:	61a3      	streq	r3, [r4, #24]
    a654:	f382 8811 	msr	BASEPRI, r2
    a658:	f3bf 8f6f 	isb	sy
		if (!node) {
    a65c:	b188      	cbz	r0, a682 <bt_conn_set_state+0x13a>
	__asm__ volatile(
    a65e:	f04f 0220 	mov.w	r2, #32
    a662:	f3ef 8311 	mrs	r3, BASEPRI
    a666:	f382 8811 	msr	BASEPRI, r2
    a66a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    a66e:	68c2      	ldr	r2, [r0, #12]
    a670:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    a672:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    a674:	f383 8811 	msr	BASEPRI, r3
    a678:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    a67c:	f7ff fc3e 	bl	9efc <tx_free>
    a680:	e7dc      	b.n	a63c <bt_conn_set_state+0xf4>
			tx_notify(conn);
    a682:	4620      	mov	r0, r4
    a684:	f018 fb5b 	bl	22d3e <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    a688:	78a3      	ldrb	r3, [r4, #2]
    a68a:	2b01      	cmp	r3, #1
    a68c:	d103      	bne.n	a696 <bt_conn_set_state+0x14e>
				k_delayed_work_cancel(&conn->update_work);
    a68e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    a692:	f01b fc63 	bl	25f5c <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a696:	f3bf 8f5b 	dmb	ish
    a69a:	3404      	adds	r4, #4
    a69c:	e854 3f00 	ldrex	r3, [r4]
    a6a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a6a4:	e844 3200 	strex	r2, r3, [r4]
    a6a8:	2a00      	cmp	r2, #0
    a6aa:	d1f7      	bne.n	a69c <bt_conn_set_state+0x154>
    a6ac:	f3bf 8f5b 	dmb	ish
	return z_impl_k_poll_signal_raise(signal, result);
    a6b0:	4820      	ldr	r0, [pc, #128]	; (a734 <bt_conn_set_state+0x1ec>)
}
    a6b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a6b6:	2100      	movs	r1, #0
    a6b8:	f015 be7e 	b.w	203b8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    a6bc:	7b23      	ldrb	r3, [r4, #12]
    a6be:	2b00      	cmp	r3, #0
    a6c0:	d08f      	beq.n	a5e2 <bt_conn_set_state+0x9a>
				notify_connected(conn);
    a6c2:	4620      	mov	r0, r4
    a6c4:	f7ff fc24 	bl	9f10 <notify_connected>
    a6c8:	e78b      	b.n	a5e2 <bt_conn_set_state+0x9a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a6ca:	78a3      	ldrb	r3, [r4, #2]
    a6cc:	2b01      	cmp	r3, #1
    a6ce:	d124      	bne.n	a71a <bt_conn_set_state+0x1d2>
				K_MSEC(10 * bt_dev.create_param.timeout));
    a6d0:	4b1a      	ldr	r3, [pc, #104]	; (a73c <bt_conn_set_state+0x1f4>)
    a6d2:	8a9b      	ldrh	r3, [r3, #20]
    a6d4:	210a      	movs	r1, #10
    a6d6:	4359      	muls	r1, r3
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    a6d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    a6dc:	f240 36e7 	movw	r6, #999	; 0x3e7
    a6e0:	2700      	movs	r7, #0
    a6e2:	fbc0 6701 	smlal	r6, r7, r0, r1
    a6e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a6ea:	2300      	movs	r3, #0
    a6ec:	4630      	mov	r0, r6
    a6ee:	4639      	mov	r1, r7
    a6f0:	f7f5 fd06 	bl	100 <__aeabi_uldivmod>
    a6f4:	4602      	mov	r2, r0
    a6f6:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a6f8:	4811      	ldr	r0, [pc, #68]	; (a740 <bt_conn_set_state+0x1f8>)
    a6fa:	f104 0158 	add.w	r1, r4, #88	; 0x58
}
    a6fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a702:	f015 bbe9 	b.w	1fed8 <k_delayed_work_submit_to_queue>
    a706:	4a07      	ldr	r2, [pc, #28]	; (a724 <bt_conn_set_state+0x1dc>)
    a708:	4b05      	ldr	r3, [pc, #20]	; (a720 <bt_conn_set_state+0x1d8>)
		BT_WARN("no valid (%u) state was set", state);
    a70a:	480e      	ldr	r0, [pc, #56]	; (a744 <bt_conn_set_state+0x1fc>)
    a70c:	1ad2      	subs	r2, r2, r3
    a70e:	08d2      	lsrs	r2, r2, #3
    a710:	0192      	lsls	r2, r2, #6
    a712:	f042 0202 	orr.w	r2, r2, #2
    a716:	4631      	mov	r1, r6
    a718:	e72c      	b.n	a574 <bt_conn_set_state+0x2c>
}
    a71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a71e:	bf00      	nop
    a720:	00026544 	.word	0x00026544
    a724:	0002654c 	.word	0x0002654c
    a728:	00029a5c 	.word	0x00029a5c
    a72c:	00026b5c 	.word	0x00026b5c
    a730:	00029a52 	.word	0x00029a52
    a734:	200001cc 	.word	0x200001cc
    a738:	200000b4 	.word	0x200000b4
    a73c:	20000000 	.word	0x20000000
    a740:	20001510 	.word	0x20001510
    a744:	00029a6d 	.word	0x00029a6d

0000a748 <bt_conn_lookup_handle>:
		if (!atomic_get(&conns[i].ref)) {
    a748:	4b14      	ldr	r3, [pc, #80]	; (a79c <bt_conn_lookup_handle+0x54>)
{
    a74a:	b510      	push	{r4, lr}
    a74c:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    a74e:	f103 0054 	add.w	r0, r3, #84	; 0x54
    a752:	f018 fac9 	bl	22ce8 <atomic_get>
    a756:	b130      	cbz	r0, a766 <bt_conn_lookup_handle+0x1e>
		if (conns[i].state != BT_CONN_CONNECTED &&
    a758:	7b59      	ldrb	r1, [r3, #13]
    a75a:	3906      	subs	r1, #6
    a75c:	2901      	cmp	r1, #1
    a75e:	d802      	bhi.n	a766 <bt_conn_lookup_handle+0x1e>
		if (conns[i].handle == handle) {
    a760:	8819      	ldrh	r1, [r3, #0]
    a762:	4291      	cmp	r1, r2
    a764:	d014      	beq.n	a790 <bt_conn_lookup_handle+0x48>
		if (!atomic_get(&conns[i].ref)) {
    a766:	480e      	ldr	r0, [pc, #56]	; (a7a0 <bt_conn_lookup_handle+0x58>)
    a768:	f018 fabe 	bl	22ce8 <atomic_get>
    a76c:	4604      	mov	r4, r0
    a76e:	b168      	cbz	r0, a78c <bt_conn_lookup_handle+0x44>
		if (conns[i].state != BT_CONN_CONNECTED &&
    a770:	f893 10c5 	ldrb.w	r1, [r3, #197]	; 0xc5
    a774:	3906      	subs	r1, #6
    a776:	2901      	cmp	r1, #1
    a778:	d80e      	bhi.n	a798 <bt_conn_lookup_handle+0x50>
		if (conns[i].handle == handle) {
    a77a:	f8b3 10b8 	ldrh.w	r1, [r3, #184]	; 0xb8
    a77e:	4291      	cmp	r1, r2
    a780:	d10a      	bne.n	a798 <bt_conn_lookup_handle+0x50>
		if (!atomic_get(&conns[i].ref)) {
    a782:	4807      	ldr	r0, [pc, #28]	; (a7a0 <bt_conn_lookup_handle+0x58>)
    a784:	24b8      	movs	r4, #184	; 0xb8
			return bt_conn_ref(&conns[i]);
    a786:	441c      	add	r4, r3
	atomic_val_t old = atomic_inc(&conn->ref);
    a788:	f018 facc 	bl	22d24 <atomic_inc>
}
    a78c:	4620      	mov	r0, r4
    a78e:	bd10      	pop	{r4, pc}
		if (conns[i].handle == handle) {
    a790:	2400      	movs	r4, #0
		if (!atomic_get(&conns[i].ref)) {
    a792:	f103 0054 	add.w	r0, r3, #84	; 0x54
    a796:	e7f6      	b.n	a786 <bt_conn_lookup_handle+0x3e>
	return NULL;
    a798:	2400      	movs	r4, #0
    a79a:	e7f7      	b.n	a78c <bt_conn_lookup_handle+0x44>
    a79c:	20000ba0 	.word	0x20000ba0
    a7a0:	20000cac 	.word	0x20000cac

0000a7a4 <bt_conn_lookup_addr_le>:
{
    a7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    a7a6:	4c14      	ldr	r4, [pc, #80]	; (a7f8 <bt_conn_lookup_addr_le+0x54>)
{
    a7a8:	4605      	mov	r5, r0
		if (!atomic_get(&conns[i].ref)) {
    a7aa:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
    a7ae:	460e      	mov	r6, r1
		if (!atomic_get(&conns[i].ref)) {
    a7b0:	f018 fa9a 	bl	22ce8 <atomic_get>
    a7b4:	4627      	mov	r7, r4
    a7b6:	b140      	cbz	r0, a7ca <bt_conn_lookup_addr_le+0x26>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    a7b8:	78a3      	ldrb	r3, [r4, #2]
    a7ba:	2b01      	cmp	r3, #1
    a7bc:	d105      	bne.n	a7ca <bt_conn_lookup_addr_le+0x26>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    a7be:	460a      	mov	r2, r1
    a7c0:	4620      	mov	r0, r4
    a7c2:	4629      	mov	r1, r5
    a7c4:	f018 fb51 	bl	22e6a <bt_conn_is_peer_addr_le>
    a7c8:	b970      	cbnz	r0, a7e8 <bt_conn_lookup_addr_le+0x44>
		if (!atomic_get(&conns[i].ref)) {
    a7ca:	480c      	ldr	r0, [pc, #48]	; (a7fc <bt_conn_lookup_addr_le+0x58>)
    a7cc:	f018 fa8c 	bl	22ce8 <atomic_get>
    a7d0:	b180      	cbz	r0, a7f4 <bt_conn_lookup_addr_le+0x50>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    a7d2:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
    a7d6:	2b01      	cmp	r3, #1
    a7d8:	d10c      	bne.n	a7f4 <bt_conn_lookup_addr_le+0x50>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    a7da:	4809      	ldr	r0, [pc, #36]	; (a800 <bt_conn_lookup_addr_le+0x5c>)
    a7dc:	4632      	mov	r2, r6
    a7de:	4629      	mov	r1, r5
    a7e0:	f018 fb43 	bl	22e6a <bt_conn_is_peer_addr_le>
    a7e4:	b130      	cbz	r0, a7f4 <bt_conn_lookup_addr_le+0x50>
    a7e6:	4c06      	ldr	r4, [pc, #24]	; (a800 <bt_conn_lookup_addr_le+0x5c>)
		if (!atomic_get(&conns[i].ref)) {
    a7e8:	f104 0054 	add.w	r0, r4, #84	; 0x54
	atomic_val_t old = atomic_inc(&conn->ref);
    a7ec:	f018 fa9a 	bl	22d24 <atomic_inc>
}
    a7f0:	4620      	mov	r0, r4
    a7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
    a7f4:	2400      	movs	r4, #0
    a7f6:	e7fb      	b.n	a7f0 <bt_conn_lookup_addr_le+0x4c>
    a7f8:	20000ba0 	.word	0x20000ba0
    a7fc:	20000cac 	.word	0x20000cac
    a800:	20000c58 	.word	0x20000c58

0000a804 <bt_conn_exists_le>:
{
    a804:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    a806:	f7ff ffcd 	bl	a7a4 <bt_conn_lookup_addr_le>
	if (conn) {
    a80a:	4604      	mov	r4, r0
    a80c:	b1a8      	cbz	r0, a83a <bt_conn_exists_le+0x36>
    a80e:	4b0b      	ldr	r3, [pc, #44]	; (a83c <bt_conn_exists_le+0x38>)
    a810:	4a0b      	ldr	r2, [pc, #44]	; (a840 <bt_conn_exists_le+0x3c>)
    a812:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    a814:	7b43      	ldrb	r3, [r0, #13]
    a816:	480b      	ldr	r0, [pc, #44]	; (a844 <bt_conn_exists_le+0x40>)
    a818:	2b07      	cmp	r3, #7
    a81a:	bf96      	itet	ls
    a81c:	490a      	ldrls	r1, [pc, #40]	; (a848 <bt_conn_exists_le+0x44>)
    a81e:	490b      	ldrhi	r1, [pc, #44]	; (a84c <bt_conn_exists_le+0x48>)
    a820:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    a824:	08d2      	lsrs	r2, r2, #3
    a826:	0192      	lsls	r2, r2, #6
    a828:	f042 0202 	orr.w	r2, r2, #2
    a82c:	f016 f9d5 	bl	20bda <log_1>
	atomic_val_t old = atomic_dec(&conn->ref);
    a830:	f104 0054 	add.w	r0, r4, #84	; 0x54
    a834:	f018 fa69 	bl	22d0a <atomic_dec>
		return true;
    a838:	2001      	movs	r0, #1
}
    a83a:	bd10      	pop	{r4, pc}
    a83c:	00026544 	.word	0x00026544
    a840:	0002654c 	.word	0x0002654c
    a844:	00029a89 	.word	0x00029a89
    a848:	00026b5c 	.word	0x00026b5c
    a84c:	00029a52 	.word	0x00029a52

0000a850 <bt_conn_lookup_state_le>:
{
    a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    a852:	4c1e      	ldr	r4, [pc, #120]	; (a8cc <bt_conn_lookup_state_le+0x7c>)
{
    a854:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    a856:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
    a85a:	460d      	mov	r5, r1
    a85c:	4616      	mov	r6, r2
		if (!atomic_get(&conns[i].ref)) {
    a85e:	f018 fa43 	bl	22ce8 <atomic_get>
    a862:	b178      	cbz	r0, a884 <bt_conn_lookup_state_le+0x34>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    a864:	78a3      	ldrb	r3, [r4, #2]
    a866:	2b01      	cmp	r3, #1
    a868:	d10c      	bne.n	a884 <bt_conn_lookup_state_le+0x34>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    a86a:	b129      	cbz	r1, a878 <bt_conn_lookup_state_le+0x28>
    a86c:	460a      	mov	r2, r1
    a86e:	4620      	mov	r0, r4
    a870:	4639      	mov	r1, r7
    a872:	f018 fafa 	bl	22e6a <bt_conn_is_peer_addr_le>
    a876:	b128      	cbz	r0, a884 <bt_conn_lookup_state_le+0x34>
		if (conns[i].state == state && conns[i].id == id) {
    a878:	7b63      	ldrb	r3, [r4, #13]
    a87a:	42b3      	cmp	r3, r6
    a87c:	d102      	bne.n	a884 <bt_conn_lookup_state_le+0x34>
    a87e:	7a23      	ldrb	r3, [r4, #8]
    a880:	42bb      	cmp	r3, r7
    a882:	d020      	beq.n	a8c6 <bt_conn_lookup_state_le+0x76>
		if (!atomic_get(&conns[i].ref)) {
    a884:	4812      	ldr	r0, [pc, #72]	; (a8d0 <bt_conn_lookup_state_le+0x80>)
    a886:	f018 fa2f 	bl	22ce8 <atomic_get>
    a88a:	b1d0      	cbz	r0, a8c2 <bt_conn_lookup_state_le+0x72>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    a88c:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    a890:	2b01      	cmp	r3, #1
    a892:	d116      	bne.n	a8c2 <bt_conn_lookup_state_le+0x72>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    a894:	b975      	cbnz	r5, a8b4 <bt_conn_lookup_state_le+0x64>
		if (conns[i].state == state && conns[i].id == id) {
    a896:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
    a89a:	42b3      	cmp	r3, r6
    a89c:	d111      	bne.n	a8c2 <bt_conn_lookup_state_le+0x72>
    a89e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a8a2:	42bb      	cmp	r3, r7
    a8a4:	d10d      	bne.n	a8c2 <bt_conn_lookup_state_le+0x72>
		if (!atomic_get(&conns[i].ref)) {
    a8a6:	480a      	ldr	r0, [pc, #40]	; (a8d0 <bt_conn_lookup_state_le+0x80>)
    a8a8:	23b8      	movs	r3, #184	; 0xb8
			return bt_conn_ref(&conns[i]);
    a8aa:	441c      	add	r4, r3
	atomic_val_t old = atomic_inc(&conn->ref);
    a8ac:	f018 fa3a 	bl	22d24 <atomic_inc>
}
    a8b0:	4620      	mov	r0, r4
    a8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    a8b4:	4807      	ldr	r0, [pc, #28]	; (a8d4 <bt_conn_lookup_state_le+0x84>)
    a8b6:	462a      	mov	r2, r5
    a8b8:	4639      	mov	r1, r7
    a8ba:	f018 fad6 	bl	22e6a <bt_conn_is_peer_addr_le>
    a8be:	2800      	cmp	r0, #0
    a8c0:	d1e9      	bne.n	a896 <bt_conn_lookup_state_le+0x46>
	return NULL;
    a8c2:	2400      	movs	r4, #0
    a8c4:	e7f4      	b.n	a8b0 <bt_conn_lookup_state_le+0x60>
		if (!atomic_get(&conns[i].ref)) {
    a8c6:	4804      	ldr	r0, [pc, #16]	; (a8d8 <bt_conn_lookup_state_le+0x88>)
		if (conns[i].state == state && conns[i].id == id) {
    a8c8:	2300      	movs	r3, #0
    a8ca:	e7ee      	b.n	a8aa <bt_conn_lookup_state_le+0x5a>
    a8cc:	20000ba0 	.word	0x20000ba0
    a8d0:	20000cac 	.word	0x20000cac
    a8d4:	20000c58 	.word	0x20000c58
    a8d8:	20000bf4 	.word	0x20000bf4

0000a8dc <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
    a8dc:	b510      	push	{r4, lr}
	info->type = conn->type;
    a8de:	7882      	ldrb	r2, [r0, #2]
    a8e0:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
    a8e2:	78c4      	ldrb	r4, [r0, #3]
    a8e4:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
    a8e6:	7a03      	ldrb	r3, [r0, #8]
    a8e8:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
    a8ea:	2a01      	cmp	r2, #1
    a8ec:	d11c      	bne.n	a928 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
    a8ee:	f100 0288 	add.w	r2, r0, #136	; 0x88
    a8f2:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
    a8f4:	4a0e      	ldr	r2, [pc, #56]	; (a930 <bt_conn_get_info+0x54>)
    a8f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    a8fa:	4413      	add	r3, r2
    a8fc:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
    a8fe:	f100 0296 	add.w	r2, r0, #150	; 0x96
    a902:	f100 038f 	add.w	r3, r0, #143	; 0x8f
    a906:	b964      	cbnz	r4, a922 <bt_conn_get_info+0x46>
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
    a908:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
    a90c:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
    a910:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
    a912:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    a916:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
    a918:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
    a91c:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
    a91e:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
    a920:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
    a922:	e9c1 2303 	strd	r2, r3, [r1, #12]
    a926:	e7f1      	b.n	a90c <bt_conn_get_info+0x30>
	return -EINVAL;
    a928:	f06f 0015 	mvn.w	r0, #21
    a92c:	e7f8      	b.n	a920 <bt_conn_get_info+0x44>
    a92e:	bf00      	nop
    a930:	20000000 	.word	0x20000000

0000a934 <bt_le_set_auto_conn>:
}

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    a934:	b570      	push	{r4, r5, r6, lr}
    a936:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a938:	4839      	ldr	r0, [pc, #228]	; (aa20 <bt_le_set_auto_conn+0xec>)
    a93a:	460d      	mov	r5, r1
    a93c:	f018 f9d4 	bl	22ce8 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a940:	0780      	lsls	r0, r0, #30
    a942:	d566      	bpl.n	aa12 <bt_le_set_auto_conn+0xde>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
    a944:	b929      	cbnz	r1, a952 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
    a946:	f7fd ff37 	bl	87b8 <bt_le_scan_random_addr_check>
    a94a:	b940      	cbnz	r0, a95e <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
    a94c:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
    a950:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    a952:	4608      	mov	r0, r1
    a954:	f018 f942 	bl	22bdc <bt_le_conn_params_valid>
    a958:	2800      	cmp	r0, #0
    a95a:	d1f4      	bne.n	a946 <bt_le_set_auto_conn+0x12>
    a95c:	e7f6      	b.n	a94c <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    a95e:	4631      	mov	r1, r6
    a960:	2000      	movs	r0, #0
    a962:	f7ff ff1f 	bl	a7a4 <bt_conn_lookup_addr_le>
	if (!conn) {
    a966:	4604      	mov	r4, r0
    a968:	b928      	cbnz	r0, a976 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
    a96a:	4631      	mov	r1, r6
    a96c:	f7ff fd9e 	bl	a4ac <bt_conn_add_le>
		if (!conn) {
    a970:	4604      	mov	r4, r0
    a972:	2800      	cmp	r0, #0
    a974:	d050      	beq.n	aa18 <bt_le_set_auto_conn+0xe4>
	if (param) {
    a976:	1d23      	adds	r3, r4, #4
    a978:	f104 0654 	add.w	r6, r4, #84	; 0x54
    a97c:	b385      	cbz	r5, a9e0 <bt_le_set_auto_conn+0xac>
	conn->le.interval_min = param->interval_min;
    a97e:	882a      	ldrh	r2, [r5, #0]
    a980:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    a984:	886a      	ldrh	r2, [r5, #2]
    a986:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
    a98a:	88aa      	ldrh	r2, [r5, #4]
    a98c:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    a990:	88ea      	ldrh	r2, [r5, #6]
    a992:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a996:	f3bf 8f5b 	dmb	ish
    a99a:	e853 2f00 	ldrex	r2, [r3]
    a99e:	f042 0101 	orr.w	r1, r2, #1
    a9a2:	e843 1000 	strex	r0, r1, [r3]
    a9a6:	2800      	cmp	r0, #0
    a9a8:	d1f7      	bne.n	a99a <bt_le_set_auto_conn+0x66>
    a9aa:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
    a9ae:	07d1      	lsls	r1, r2, #31
    a9b0:	d402      	bmi.n	a9b8 <bt_le_set_auto_conn+0x84>
	atomic_val_t old = atomic_inc(&conn->ref);
    a9b2:	4630      	mov	r0, r6
    a9b4:	f018 f9b6 	bl	22d24 <atomic_inc>
	if (conn->state == BT_CONN_DISCONNECTED &&
    a9b8:	7b63      	ldrb	r3, [r4, #13]
    a9ba:	b963      	cbnz	r3, a9d6 <bt_le_set_auto_conn+0xa2>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a9bc:	4818      	ldr	r0, [pc, #96]	; (aa20 <bt_le_set_auto_conn+0xec>)
    a9be:	f018 f993 	bl	22ce8 <atomic_get>
    a9c2:	0783      	lsls	r3, r0, #30
    a9c4:	d507      	bpl.n	a9d6 <bt_le_set_auto_conn+0xa2>
		if (param) {
    a9c6:	b11d      	cbz	r5, a9d0 <bt_le_set_auto_conn+0x9c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    a9c8:	2101      	movs	r1, #1
    a9ca:	4620      	mov	r0, r4
    a9cc:	f7ff fdbc 	bl	a548 <bt_conn_set_state>
		bt_le_scan_update(false);
    a9d0:	2000      	movs	r0, #0
    a9d2:	f7fe f9f7 	bl	8dc4 <bt_le_scan_update>
	atomic_val_t old = atomic_dec(&conn->ref);
    a9d6:	4630      	mov	r0, r6
    a9d8:	f018 f997 	bl	22d0a <atomic_dec>
	return 0;
    a9dc:	2000      	movs	r0, #0
    a9de:	e7b7      	b.n	a950 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a9e0:	f3bf 8f5b 	dmb	ish
    a9e4:	e853 2f00 	ldrex	r2, [r3]
    a9e8:	f022 0101 	bic.w	r1, r2, #1
    a9ec:	e843 1000 	strex	r0, r1, [r3]
    a9f0:	2800      	cmp	r0, #0
    a9f2:	d1f7      	bne.n	a9e4 <bt_le_set_auto_conn+0xb0>
    a9f4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    a9f8:	07d2      	lsls	r2, r2, #31
    a9fa:	d5dd      	bpl.n	a9b8 <bt_le_set_auto_conn+0x84>
	atomic_val_t old = atomic_dec(&conn->ref);
    a9fc:	4630      	mov	r0, r6
    a9fe:	f018 f984 	bl	22d0a <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    aa02:	7b63      	ldrb	r3, [r4, #13]
    aa04:	2b01      	cmp	r3, #1
    aa06:	d1d7      	bne.n	a9b8 <bt_le_set_auto_conn+0x84>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    aa08:	4629      	mov	r1, r5
    aa0a:	4620      	mov	r0, r4
    aa0c:	f7ff fd9c 	bl	a548 <bt_conn_set_state>
    aa10:	e7d2      	b.n	a9b8 <bt_le_set_auto_conn+0x84>
		return -EAGAIN;
    aa12:	f06f 000a 	mvn.w	r0, #10
    aa16:	e79b      	b.n	a950 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    aa18:	f06f 000b 	mvn.w	r0, #11
    aa1c:	e798      	b.n	a950 <bt_le_set_auto_conn+0x1c>
    aa1e:	bf00      	nop
    aa20:	20000098 	.word	0x20000098

0000aa24 <bt_conn_disconnect>:
{
    aa24:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    aa26:	7883      	ldrb	r3, [r0, #2]
    aa28:	2b01      	cmp	r3, #1
{
    aa2a:	4604      	mov	r4, r0
    aa2c:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    aa2e:	d103      	bne.n	aa38 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    aa30:	2100      	movs	r1, #0
    aa32:	3088      	adds	r0, #136	; 0x88
    aa34:	f7ff ff7e 	bl	a934 <bt_le_set_auto_conn>
	switch (conn->state) {
    aa38:	7b63      	ldrb	r3, [r4, #13]
    aa3a:	3b01      	subs	r3, #1
    aa3c:	2b06      	cmp	r3, #6
    aa3e:	d805      	bhi.n	aa4c <bt_conn_disconnect+0x28>
    aa40:	e8df f003 	tbb	[pc, r3]
    aa44:	12040408 	.word	0x12040408
    aa48:	2d25      	.short	0x2d25
    aa4a:	10          	.byte	0x10
    aa4b:	00          	.byte	0x00
    aa4c:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    aa50:	4628      	mov	r0, r5
    aa52:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    aa54:	4620      	mov	r0, r4
		conn->err = reason;
    aa56:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    aa58:	2100      	movs	r1, #0
    aa5a:	f7ff fd75 	bl	a548 <bt_conn_set_state>
			bt_le_scan_update(false);
    aa5e:	2000      	movs	r0, #0
    aa60:	f7fe f9b0 	bl	8dc4 <bt_le_scan_update>
		return 0;
    aa64:	2500      	movs	r5, #0
    aa66:	e7f3      	b.n	aa50 <bt_conn_disconnect+0x2c>
    aa68:	4913      	ldr	r1, [pc, #76]	; (aab8 <bt_conn_disconnect+0x94>)
    aa6a:	4b14      	ldr	r3, [pc, #80]	; (aabc <bt_conn_disconnect+0x98>)
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    aa6c:	4814      	ldr	r0, [pc, #80]	; (aac0 <bt_conn_disconnect+0x9c>)
    aa6e:	1a5b      	subs	r3, r3, r1
    aa70:	08db      	lsrs	r3, r3, #3
    aa72:	019b      	lsls	r3, r3, #6
    aa74:	f043 0102 	orr.w	r1, r3, #2
    aa78:	f016 f8a2 	bl	20bc0 <log_0>
		conn->err = reason;
    aa7c:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    aa7e:	4620      	mov	r0, r4
    aa80:	2100      	movs	r1, #0
    aa82:	f7ff fd61 	bl	a548 <bt_conn_set_state>
}
    aa86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
    aa8a:	f7fe bf4d 	b.w	9928 <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->update_work);
    aa8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    aa92:	f01b fa63 	bl	25f5c <k_delayed_work_cancel>
}
    aa96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
    aa9a:	f7fd bf01 	b.w	88a0 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
    aa9e:	4629      	mov	r1, r5
    aaa0:	8820      	ldrh	r0, [r4, #0]
    aaa2:	f018 f83e 	bl	22b22 <bt_hci_disconnect>
	if (err) {
    aaa6:	4605      	mov	r5, r0
    aaa8:	2800      	cmp	r0, #0
    aaaa:	d1d1      	bne.n	aa50 <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    aaac:	2107      	movs	r1, #7
    aaae:	4620      	mov	r0, r4
    aab0:	f7ff fd4a 	bl	a548 <bt_conn_set_state>
	return 0;
    aab4:	e7cc      	b.n	aa50 <bt_conn_disconnect+0x2c>
    aab6:	bf00      	nop
    aab8:	00026544 	.word	0x00026544
    aabc:	0002654c 	.word	0x0002654c
    aac0:	00029aac 	.word	0x00029aac

0000aac4 <send_conn_le_param_update>:
{
    aac4:	b538      	push	{r3, r4, r5, lr}
    aac6:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    aac8:	4608      	mov	r0, r1
{
    aaca:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    aacc:	f018 f886 	bl	22bdc <bt_le_conn_params_valid>
    aad0:	b308      	cbz	r0, ab16 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    aad2:	4b12      	ldr	r3, [pc, #72]	; (ab1c <send_conn_le_param_update+0x58>)
    aad4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    aad8:	0799      	lsls	r1, r3, #30
    aada:	d407      	bmi.n	aaec <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    aadc:	78e3      	ldrb	r3, [r4, #3]
    aade:	b173      	cbz	r3, aafe <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    aae0:	4629      	mov	r1, r5
    aae2:	4620      	mov	r0, r4
}
    aae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    aae8:	f018 bd24 	b.w	23534 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    aaec:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    aaf0:	079a      	lsls	r2, r3, #30
    aaf2:	d5f3      	bpl.n	aadc <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    aaf4:	1d20      	adds	r0, r4, #4
    aaf6:	f018 f8f7 	bl	22ce8 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    aafa:	0543      	lsls	r3, r0, #21
    aafc:	d4ee      	bmi.n	aadc <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    aafe:	4629      	mov	r1, r5
    ab00:	4620      	mov	r0, r4
    ab02:	f018 f9de 	bl	22ec2 <bt_conn_le_conn_update>
		if (rc == 0) {
    ab06:	b928      	cbnz	r0, ab14 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
    ab08:	88ab      	ldrh	r3, [r5, #4]
    ab0a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    ab0e:	88eb      	ldrh	r3, [r5, #6]
    ab10:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    ab14:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    ab16:	f06f 0015 	mvn.w	r0, #21
    ab1a:	e7fb      	b.n	ab14 <send_conn_le_param_update+0x50>
    ab1c:	20000000 	.word	0x20000000

0000ab20 <conn_update_timeout>:
{
    ab20:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    ab22:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    ab26:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, update_work);
    ab28:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    ab2c:	b9a3      	cbnz	r3, ab58 <conn_update_timeout+0x38>
		bt_l2cap_disconnected(conn);
    ab2e:	4630      	mov	r0, r6
    ab30:	f018 fb6b 	bl	2320a <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    ab34:	4b23      	ldr	r3, [pc, #140]	; (abc4 <conn_update_timeout+0xa4>)
    ab36:	681d      	ldr	r5, [r3, #0]
    ab38:	b935      	cbnz	r5, ab48 <conn_update_timeout+0x28>
	atomic_val_t old = atomic_dec(&conn->ref);
    ab3a:	1f20      	subs	r0, r4, #4
    ab3c:	f018 f8e5 	bl	22d0a <atomic_dec>
			bt_le_adv_resume();
    ab40:	f7fe ff4e 	bl	99e0 <bt_le_adv_resume>
}
    ab44:	b002      	add	sp, #8
    ab46:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    ab48:	686b      	ldr	r3, [r5, #4]
    ab4a:	b11b      	cbz	r3, ab54 <conn_update_timeout+0x34>
			cb->disconnected(conn, conn->err);
    ab4c:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    ab50:	4630      	mov	r0, r6
    ab52:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ab54:	69ad      	ldr	r5, [r5, #24]
    ab56:	e7ef      	b.n	ab38 <conn_update_timeout+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    ab58:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    ab5c:	2b01      	cmp	r3, #1
    ab5e:	d1f1      	bne.n	ab44 <conn_update_timeout+0x24>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ab60:	f810 3c55 	ldrb.w	r3, [r0, #-85]
    ab64:	b913      	cbnz	r3, ab6c <conn_update_timeout+0x4c>
		bt_le_create_conn_cancel();
    ab66:	f7fd fe9b 	bl	88a0 <bt_le_create_conn_cancel>
		return;
    ab6a:	e7eb      	b.n	ab44 <conn_update_timeout+0x24>
		if (atomic_test_and_clear_bit(conn->flags,
    ab6c:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ab70:	f3bf 8f5b 	dmb	ish
    ab74:	e855 3f00 	ldrex	r3, [r5]
    ab78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    ab7c:	e845 2100 	strex	r1, r2, [r5]
    ab80:	2900      	cmp	r1, #0
    ab82:	d1f7      	bne.n	ab74 <conn_update_timeout+0x54>
    ab84:	f3bf 8f5b 	dmb	ish
    ab88:	059b      	lsls	r3, r3, #22
    ab8a:	d514      	bpl.n	abb6 <conn_update_timeout+0x96>
			param = BT_LE_CONN_PARAM(conn->le.interval_min,
    ab8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    ab8e:	9300      	str	r3, [sp, #0]
    ab90:	6d23      	ldr	r3, [r4, #80]	; 0x50
    ab92:	9301      	str	r3, [sp, #4]
			send_conn_le_param_update(conn, param);
    ab94:	4669      	mov	r1, sp
    ab96:	4630      	mov	r0, r6
    ab98:	f7ff ff94 	bl	aac4 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ab9c:	f3bf 8f5b 	dmb	ish
    aba0:	e855 3f00 	ldrex	r3, [r5]
    aba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    aba8:	e845 3200 	strex	r2, r3, [r5]
    abac:	2a00      	cmp	r2, #0
    abae:	d1f7      	bne.n	aba0 <conn_update_timeout+0x80>
    abb0:	f3bf 8f5b 	dmb	ish
    abb4:	e7c6      	b.n	ab44 <conn_update_timeout+0x24>
			param = BT_LE_CONN_PARAM(
    abb6:	4a04      	ldr	r2, [pc, #16]	; (abc8 <conn_update_timeout+0xa8>)
    abb8:	6810      	ldr	r0, [r2, #0]
    abba:	6851      	ldr	r1, [r2, #4]
    abbc:	466b      	mov	r3, sp
    abbe:	c303      	stmia	r3!, {r0, r1}
    abc0:	e7e8      	b.n	ab94 <conn_update_timeout+0x74>
    abc2:	bf00      	nop
    abc4:	20001910 	.word	0x20001910
    abc8:	0002675a 	.word	0x0002675a

0000abcc <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    abcc:	b538      	push	{r3, r4, r5, lr}
    abce:	460d      	mov	r5, r1
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    abd0:	490c      	ldr	r1, [pc, #48]	; (ac04 <bt_conn_create_pdu_timeout+0x38>)
    abd2:	2800      	cmp	r0, #0
    abd4:	bf08      	it	eq
    abd6:	4608      	moveq	r0, r1
    abd8:	f01a fba0 	bl	2531c <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    abdc:	4604      	mov	r4, r0
    abde:	b958      	cbnz	r0, abf8 <bt_conn_create_pdu_timeout+0x2c>
    abe0:	4909      	ldr	r1, [pc, #36]	; (ac08 <bt_conn_create_pdu_timeout+0x3c>)
    abe2:	4b0a      	ldr	r3, [pc, #40]	; (ac0c <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    abe4:	480a      	ldr	r0, [pc, #40]	; (ac10 <bt_conn_create_pdu_timeout+0x44>)
    abe6:	1ac9      	subs	r1, r1, r3
    abe8:	08c9      	lsrs	r1, r1, #3
    abea:	0189      	lsls	r1, r1, #6
    abec:	f041 0102 	orr.w	r1, r1, #2
    abf0:	f015 ffe6 	bl	20bc0 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    abf4:	4620      	mov	r0, r4
    abf6:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_reserve(buf, reserve);
    abf8:	1d29      	adds	r1, r5, #4
    abfa:	3008      	adds	r0, #8
    abfc:	f01a fbb3 	bl	25366 <net_buf_simple_reserve>
	return buf;
    ac00:	e7f8      	b.n	abf4 <bt_conn_create_pdu_timeout+0x28>
    ac02:	bf00      	nop
    ac04:	200008a4 	.word	0x200008a4
    ac08:	0002654c 	.word	0x0002654c
    ac0c:	00026544 	.word	0x00026544
    ac10:	00029ad3 	.word	0x00029ad3

0000ac14 <bt_conn_create_frag_timeout>:
{
    ac14:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    ac16:	4801      	ldr	r0, [pc, #4]	; (ac1c <bt_conn_create_frag_timeout+0x8>)
    ac18:	f7ff bfd8 	b.w	abcc <bt_conn_create_pdu_timeout>
    ac1c:	2000091c 	.word	0x2000091c

0000ac20 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    ac20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac24:	4606      	mov	r6, r0
	frag = bt_conn_create_frag(0);
    ac26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ac2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ac2e:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    ac30:	460c      	mov	r4, r1
	frag = bt_conn_create_frag(0);
    ac32:	f7ff ffef 	bl	ac14 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    ac36:	7833      	ldrb	r3, [r6, #0]
    ac38:	2b06      	cmp	r3, #6
	frag = bt_conn_create_frag(0);
    ac3a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    ac3c:	f04f 0600 	mov.w	r6, #0
    ac40:	d005      	beq.n	ac4e <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    ac42:	f013 f9b9 	bl	1dfb8 <net_buf_unref>
		return NULL;
    ac46:	4635      	mov	r5, r6
}
    ac48:	4628      	mov	r0, r5
    ac4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    ac4e:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    ac50:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    ac54:	4e0c      	ldr	r6, [pc, #48]	; (ac88 <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    ac56:	4638      	mov	r0, r7
    ac58:	f8b6 80b0 	ldrh.w	r8, [r6, #176]	; 0xb0
    ac5c:	f01a fc1f 	bl	2549e <net_buf_simple_tailroom>
    ac60:	4580      	cmp	r8, r0
    ac62:	d20c      	bcs.n	ac7e <create_frag.isra.0+0x5e>
	return bt_dev.le.mtu;
    ac64:	f8b6 60b0 	ldrh.w	r6, [r6, #176]	; 0xb0
	net_buf_add_mem(frag, buf->data, frag_len);
    ac68:	f854 1f08 	ldr.w	r1, [r4, #8]!
    ac6c:	4632      	mov	r2, r6
    ac6e:	4638      	mov	r0, r7
    ac70:	f01a fbc2 	bl	253f8 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    ac74:	4631      	mov	r1, r6
    ac76:	4620      	mov	r0, r4
    ac78:	f01a fbed 	bl	25456 <net_buf_simple_pull>
	return frag;
    ac7c:	e7e4      	b.n	ac48 <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    ac7e:	4638      	mov	r0, r7
    ac80:	f01a fc0d 	bl	2549e <net_buf_simple_tailroom>
    ac84:	b286      	uxth	r6, r0
    ac86:	e7ef      	b.n	ac68 <create_frag.isra.0+0x48>
    ac88:	20000000 	.word	0x20000000

0000ac8c <bt_conn_process_tx>:
{
    ac8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    ac8e:	7b43      	ldrb	r3, [r0, #13]
{
    ac90:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    ac92:	b993      	cbnz	r3, acba <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ac94:	f3bf 8f5b 	dmb	ish
    ac98:	1d03      	adds	r3, r0, #4
    ac9a:	e853 2f00 	ldrex	r2, [r3]
    ac9e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    aca2:	e843 1400 	strex	r4, r1, [r3]
    aca6:	2c00      	cmp	r4, #0
    aca8:	d1f7      	bne.n	ac9a <bt_conn_process_tx+0xe>
    acaa:	f3bf 8f5b 	dmb	ish
    acae:	0653      	lsls	r3, r2, #25
    acb0:	d503      	bpl.n	acba <bt_conn_process_tx+0x2e>
}
    acb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    acb6:	f7ff b9d9 	b.w	a06c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    acba:	2200      	movs	r2, #0
    acbc:	2300      	movs	r3, #0
    acbe:	f105 0034 	add.w	r0, r5, #52	; 0x34
    acc2:	f01a fb30 	bl	25326 <net_buf_get>
	BT_ASSERT(buf);
    acc6:	4604      	mov	r4, r0
    acc8:	b960      	cbnz	r0, ace4 <bt_conn_process_tx+0x58>
    acca:	4a20      	ldr	r2, [pc, #128]	; (ad4c <bt_conn_process_tx+0xc0>)
    accc:	4920      	ldr	r1, [pc, #128]	; (ad50 <bt_conn_process_tx+0xc4>)
    acce:	4821      	ldr	r0, [pc, #132]	; (ad54 <bt_conn_process_tx+0xc8>)
    acd0:	f240 6326 	movw	r3, #1574	; 0x626
    acd4:	f015 fcb4 	bl	20640 <printk>
    acd8:	4040      	eors	r0, r0
    acda:	f380 8811 	msr	BASEPRI, r0
    acde:	f04f 0003 	mov.w	r0, #3
    ace2:	df02      	svc	2
	return bt_dev.le.mtu;
    ace4:	4f1c      	ldr	r7, [pc, #112]	; (ad58 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    ace6:	89a1      	ldrh	r1, [r4, #12]
    ace8:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
    acec:	4291      	cmp	r1, r2
    acee:	d807      	bhi.n	ad00 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    acf0:	2300      	movs	r3, #0
    acf2:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    acf4:	4621      	mov	r1, r4
    acf6:	4628      	mov	r0, r5
    acf8:	f7ff f920 	bl	9f3c <send_frag>
	if (!send_buf(conn, buf)) {
    acfc:	b140      	cbz	r0, ad10 <bt_conn_process_tx+0x84>
}
    acfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    ad00:	f105 060d 	add.w	r6, r5, #13
    ad04:	4621      	mov	r1, r4
    ad06:	4630      	mov	r0, r6
    ad08:	f7ff ff8a 	bl	ac20 <create_frag.isra.0>
	if (!frag) {
    ad0c:	4601      	mov	r1, r0
    ad0e:	b920      	cbnz	r0, ad1a <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
    ad10:	4620      	mov	r0, r4
}
    ad12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    ad16:	f013 b94f 	b.w	1dfb8 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    ad1a:	2301      	movs	r3, #1
    ad1c:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    ad1e:	4628      	mov	r0, r5
    ad20:	f7ff f90c 	bl	9f3c <send_frag>
    ad24:	2800      	cmp	r0, #0
    ad26:	d0f3      	beq.n	ad10 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
    ad28:	89a2      	ldrh	r2, [r4, #12]
    ad2a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
    ad2e:	429a      	cmp	r2, r3
    ad30:	d802      	bhi.n	ad38 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    ad32:	2300      	movs	r3, #0
    ad34:	2201      	movs	r2, #1
    ad36:	e7dd      	b.n	acf4 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    ad38:	4621      	mov	r1, r4
    ad3a:	4630      	mov	r0, r6
    ad3c:	f7ff ff70 	bl	ac20 <create_frag.isra.0>
		if (!frag) {
    ad40:	4601      	mov	r1, r0
    ad42:	2800      	cmp	r0, #0
    ad44:	d0e4      	beq.n	ad10 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    ad46:	2301      	movs	r3, #1
    ad48:	461a      	mov	r2, r3
    ad4a:	e7e8      	b.n	ad1e <bt_conn_process_tx+0x92>
    ad4c:	00029afc 	.word	0x00029afc
    ad50:	0002a68c 	.word	0x0002a68c
    ad54:	000291f6 	.word	0x000291f6
    ad58:	20000000 	.word	0x20000000

0000ad5c <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    ad5c:	4b0c      	ldr	r3, [pc, #48]	; (ad90 <bt_conn_auth_cb_register+0x34>)
    ad5e:	b908      	cbnz	r0, ad64 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    ad60:	6018      	str	r0, [r3, #0]
		return 0;
    ad62:	4770      	bx	lr
	}

	if (bt_auth) {
    ad64:	681a      	ldr	r2, [r3, #0]
    ad66:	b962      	cbnz	r2, ad82 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    ad68:	6902      	ldr	r2, [r0, #16]
    ad6a:	b93a      	cbnz	r2, ad7c <bt_conn_auth_cb_register+0x20>
    ad6c:	6802      	ldr	r2, [r0, #0]
    ad6e:	b95a      	cbnz	r2, ad88 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    ad70:	6842      	ldr	r2, [r0, #4]
    ad72:	b94a      	cbnz	r2, ad88 <bt_conn_auth_cb_register+0x2c>
    ad74:	6882      	ldr	r2, [r0, #8]
    ad76:	b93a      	cbnz	r2, ad88 <bt_conn_auth_cb_register+0x2c>
    ad78:	6942      	ldr	r2, [r0, #20]
    ad7a:	b92a      	cbnz	r2, ad88 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    ad7c:	6018      	str	r0, [r3, #0]
	return 0;
    ad7e:	2000      	movs	r0, #0
    ad80:	4770      	bx	lr
		return -EALREADY;
    ad82:	f06f 0044 	mvn.w	r0, #68	; 0x44
    ad86:	4770      	bx	lr
		return -EINVAL;
    ad88:	f06f 0015 	mvn.w	r0, #21
}
    ad8c:	4770      	bx	lr
    ad8e:	bf00      	nop
    ad90:	2000190c 	.word	0x2000190c

0000ad94 <bt_conn_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

uint8_t bt_conn_index(struct bt_conn *conn)
{
	uint8_t index = conn - conns;
    ad94:	4b03      	ldr	r3, [pc, #12]	; (ada4 <bt_conn_index+0x10>)
    ad96:	1ac0      	subs	r0, r0, r3
    ad98:	4b03      	ldr	r3, [pc, #12]	; (ada8 <bt_conn_index+0x14>)
    ad9a:	10c0      	asrs	r0, r0, #3
    ad9c:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
	return index;
}
    ad9e:	b2c0      	uxtb	r0, r0
    ada0:	4770      	bx	lr
    ada2:	bf00      	nop
    ada4:	20000ba0 	.word	0x20000ba0
    ada8:	e9bd37a7 	.word	0xe9bd37a7

0000adac <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	struct bt_conn *conn;

	if (index >= ARRAY_SIZE(conns)) {
    adac:	2801      	cmp	r0, #1
{
    adae:	b510      	push	{r4, lr}
	if (index >= ARRAY_SIZE(conns)) {
    adb0:	d902      	bls.n	adb8 <bt_conn_lookup_index+0xc>
		return NULL;
    adb2:	2400      	movs	r4, #0
	if (!atomic_get(&conn->ref)) {
		return NULL;
	}

	return bt_conn_ref(conn);
}
    adb4:	4620      	mov	r0, r4
    adb6:	bd10      	pop	{r4, pc}
	conn = &conns[index];
    adb8:	23b8      	movs	r3, #184	; 0xb8
    adba:	fb10 f303 	smulbb	r3, r0, r3
	if (!atomic_get(&conn->ref)) {
    adbe:	4c07      	ldr	r4, [pc, #28]	; (addc <bt_conn_lookup_index+0x30>)
    adc0:	f103 0154 	add.w	r1, r3, #84	; 0x54
    adc4:	4421      	add	r1, r4
    adc6:	4608      	mov	r0, r1
    adc8:	f017 ff8e 	bl	22ce8 <atomic_get>
    adcc:	2800      	cmp	r0, #0
    adce:	d0f0      	beq.n	adb2 <bt_conn_lookup_index+0x6>
	atomic_val_t old = atomic_inc(&conn->ref);
    add0:	4608      	mov	r0, r1
	conn = &conns[index];
    add2:	441c      	add	r4, r3
	atomic_val_t old = atomic_inc(&conn->ref);
    add4:	f017 ffa6 	bl	22d24 <atomic_inc>
	return bt_conn_ref(conn);
    add8:	e7ec      	b.n	adb4 <bt_conn_lookup_index+0x8>
    adda:	bf00      	nop
    addc:	20000ba0 	.word	0x20000ba0

0000ade0 <bt_conn_init>:

int bt_conn_init(void)
{
    ade0:	b570      	push	{r4, r5, r6, lr}
    ade2:	4d1b      	ldr	r5, [pc, #108]	; (ae50 <bt_conn_init+0x70>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    ade4:	4e1b      	ldr	r6, [pc, #108]	; (ae54 <bt_conn_init+0x74>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    ade6:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
    ade8:	4629      	mov	r1, r5
    adea:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    adec:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    adee:	f01a feb7 	bl	25b60 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    adf2:	2c0a      	cmp	r4, #10
    adf4:	f105 0510 	add.w	r5, r5, #16
    adf8:	d1f6      	bne.n	ade8 <bt_conn_init+0x8>
	}

	bt_att_init();
    adfa:	f018 ff1d 	bl	23c38 <bt_att_init>

	err = bt_smp_init();
    adfe:	f005 fc59 	bl	106b4 <bt_smp_init>
	if (err) {
    ae02:	4605      	mov	r5, r0
    ae04:	bb08      	cbnz	r0, ae4a <bt_conn_init+0x6a>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    ae06:	4c14      	ldr	r4, [pc, #80]	; (ae58 <bt_conn_init+0x78>)
	bt_l2cap_init();
    ae08:	f018 fbb5 	bl	23576 <bt_l2cap_init>
			if (!atomic_get(&conn->ref)) {
    ae0c:	f104 0054 	add.w	r0, r4, #84	; 0x54
    ae10:	f017 ff6a 	bl	22ce8 <atomic_get>
    ae14:	b148      	cbz	r0, ae2a <bt_conn_init+0x4a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ae16:	1d20      	adds	r0, r4, #4
    ae18:	f017 ff66 	bl	22ce8 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
    ae1c:	07c2      	lsls	r2, r0, #31
    ae1e:	d504      	bpl.n	ae2a <bt_conn_init+0x4a>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    ae20:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    ae22:	2101      	movs	r1, #1
    ae24:	4620      	mov	r0, r4
    ae26:	f7ff fb8f 	bl	a548 <bt_conn_set_state>
			if (!atomic_get(&conn->ref)) {
    ae2a:	480c      	ldr	r0, [pc, #48]	; (ae5c <bt_conn_init+0x7c>)
    ae2c:	f017 ff5c 	bl	22ce8 <atomic_get>
    ae30:	b158      	cbz	r0, ae4a <bt_conn_init+0x6a>
    ae32:	480b      	ldr	r0, [pc, #44]	; (ae60 <bt_conn_init+0x80>)
    ae34:	f017 ff58 	bl	22ce8 <atomic_get>
			if (atomic_test_bit(conn->flags,
    ae38:	07c3      	lsls	r3, r0, #31
    ae3a:	d506      	bpl.n	ae4a <bt_conn_init+0x6a>
				conn->id = BT_ID_DEFAULT;
    ae3c:	2300      	movs	r3, #0
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    ae3e:	4809      	ldr	r0, [pc, #36]	; (ae64 <bt_conn_init+0x84>)
				conn->id = BT_ID_DEFAULT;
    ae40:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    ae44:	2101      	movs	r1, #1
    ae46:	f7ff fb7f 	bl	a548 <bt_conn_set_state>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
    ae4a:	4628      	mov	r0, r5
    ae4c:	bd70      	pop	{r4, r5, r6, pc}
    ae4e:	bf00      	nop
    ae50:	20001914 	.word	0x20001914
    ae54:	20000874 	.word	0x20000874
    ae58:	20000ba0 	.word	0x20000ba0
    ae5c:	20000cac 	.word	0x20000cac
    ae60:	20000c5c 	.word	0x20000c5c
    ae64:	20000c58 	.word	0x20000c58

0000ae68 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
    ae68:	4b04      	ldr	r3, [pc, #16]	; (ae7c <get_ident+0x14>)
    ae6a:	781a      	ldrb	r2, [r3, #0]
    ae6c:	3201      	adds	r2, #1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    ae6e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    ae72:	bf08      	it	eq
    ae74:	2201      	moveq	r2, #1
    ae76:	701a      	strb	r2, [r3, #0]
	}

	return ident;
}
    ae78:	7818      	ldrb	r0, [r3, #0]
    ae7a:	4770      	bx	lr
    ae7c:	20005375 	.word	0x20005375

0000ae80 <l2cap_server_lookup_psm>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(uint16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    ae80:	4a08      	ldr	r2, [pc, #32]	; (aea4 <l2cap_server_lookup_psm+0x24>)
{
    ae82:	4603      	mov	r3, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    ae84:	6810      	ldr	r0, [r2, #0]
    ae86:	b158      	cbz	r0, aea0 <l2cap_server_lookup_psm+0x20>
    ae88:	3808      	subs	r0, #8
    ae8a:	b900      	cbnz	r0, ae8e <l2cap_server_lookup_psm+0xe>
    ae8c:	4770      	bx	lr
		if (server->psm == psm) {
    ae8e:	8802      	ldrh	r2, [r0, #0]
    ae90:	429a      	cmp	r2, r3
    ae92:	d005      	beq.n	aea0 <l2cap_server_lookup_psm+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ae94:	f110 0208 	adds.w	r2, r0, #8
    ae98:	d001      	beq.n	ae9e <l2cap_server_lookup_psm+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ae9a:	6880      	ldr	r0, [r0, #8]
    ae9c:	e7f3      	b.n	ae86 <l2cap_server_lookup_psm+0x6>
			return server;
		}
	}

	return NULL;
    ae9e:	4610      	mov	r0, r2
}
    aea0:	4770      	bx	lr
    aea2:	bf00      	nop
    aea4:	200019b4 	.word	0x200019b4

0000aea8 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    aea8:	4a0f      	ldr	r2, [pc, #60]	; (aee8 <l2cap_accept+0x40>)
    aeaa:	6813      	ldr	r3, [r2, #0]
{
    aeac:	b510      	push	{r4, lr}
    aeae:	4614      	mov	r4, r2
		if (l2cap->chan.chan.conn) {
    aeb0:	b18b      	cbz	r3, aed6 <l2cap_accept+0x2e>
    aeb2:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    aeb6:	b16b      	cbz	r3, aed4 <l2cap_accept+0x2c>
    aeb8:	4b0c      	ldr	r3, [pc, #48]	; (aeec <l2cap_accept+0x44>)
    aeba:	4a0d      	ldr	r2, [pc, #52]	; (aef0 <l2cap_accept+0x48>)
    aebc:	1ad2      	subs	r2, r2, r3
    aebe:	08d2      	lsrs	r2, r2, #3
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
    aec0:	0192      	lsls	r2, r2, #6
    aec2:	4601      	mov	r1, r0
    aec4:	f042 0201 	orr.w	r2, r2, #1
    aec8:	480a      	ldr	r0, [pc, #40]	; (aef4 <l2cap_accept+0x4c>)
    aeca:	f015 fe86 	bl	20bda <log_1>

	return -ENOMEM;
    aece:	f06f 000b 	mvn.w	r0, #11
}
    aed2:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    aed4:	2301      	movs	r3, #1
		l2cap->chan.chan.ops = &ops;
    aed6:	22c0      	movs	r2, #192	; 0xc0
    aed8:	fb02 4303 	mla	r3, r2, r3, r4
    aedc:	4a06      	ldr	r2, [pc, #24]	; (aef8 <l2cap_accept+0x50>)
    aede:	605a      	str	r2, [r3, #4]
		return 0;
    aee0:	2000      	movs	r0, #0
		*chan = &l2cap->chan.chan;
    aee2:	600b      	str	r3, [r1, #0]
		return 0;
    aee4:	e7f5      	b.n	aed2 <l2cap_accept+0x2a>
    aee6:	bf00      	nop
    aee8:	20000d10 	.word	0x20000d10
    aeec:	00026544 	.word	0x00026544
    aef0:	00026644 	.word	0x00026644
    aef4:	00029b75 	.word	0x00029b75
    aef8:	00026bac 	.word	0x00026bac

0000aefc <l2cap_create_le_sig_pdu.isra.0>:
	if (code == BT_L2CAP_DISCONN_REQ) {
    aefc:	2806      	cmp	r0, #6
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    aefe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af00:	4605      	mov	r5, r0
    af02:	460f      	mov	r7, r1
	return bt_conn_create_pdu_timeout(pool,
    af04:	4811      	ldr	r0, [pc, #68]	; (af4c <l2cap_create_le_sig_pdu.isra.0+0x50>)
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    af06:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    af08:	f04f 0300 	mov.w	r3, #0
    af0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    af10:	f04f 0104 	mov.w	r1, #4
    af14:	bf18      	it	ne
    af16:	2000      	movne	r0, #0
    af18:	f7ff fe58 	bl	abcc <bt_conn_create_pdu_timeout>
	if (!buf) {
    af1c:	4604      	mov	r4, r0
    af1e:	b960      	cbnz	r0, af3a <l2cap_create_le_sig_pdu.isra.0+0x3e>
    af20:	4a0b      	ldr	r2, [pc, #44]	; (af50 <l2cap_create_le_sig_pdu.isra.0+0x54>)
    af22:	4b0c      	ldr	r3, [pc, #48]	; (af54 <l2cap_create_le_sig_pdu.isra.0+0x58>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    af24:	480c      	ldr	r0, [pc, #48]	; (af58 <l2cap_create_le_sig_pdu.isra.0+0x5c>)
    af26:	1ad2      	subs	r2, r2, r3
    af28:	08d2      	lsrs	r2, r2, #3
    af2a:	0192      	lsls	r2, r2, #6
    af2c:	f042 0201 	orr.w	r2, r2, #1
    af30:	4629      	mov	r1, r5
    af32:	f015 fe52 	bl	20bda <log_1>
}
    af36:	4620      	mov	r0, r4
    af38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    af3a:	2104      	movs	r1, #4
    af3c:	3008      	adds	r0, #8
    af3e:	f01a fa55 	bl	253ec <net_buf_simple_add>
	hdr->code = code;
    af42:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    af44:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    af46:	8046      	strh	r6, [r0, #2]
	return buf;
    af48:	e7f5      	b.n	af36 <l2cap_create_le_sig_pdu.isra.0+0x3a>
    af4a:	bf00      	nop
    af4c:	200008cc 	.word	0x200008cc
    af50:	00026644 	.word	0x00026644
    af54:	00026544 	.word	0x00026544
    af58:	00029b9c 	.word	0x00029b9c

0000af5c <l2cap_chan_tx_init>:
{
    af5c:	b538      	push	{r3, r4, r5, lr}
	(void)memset(&chan->tx, 0, sizeof(chan->tx));
    af5e:	220c      	movs	r2, #12
{
    af60:	4604      	mov	r4, r0
	(void)memset(&chan->tx, 0, sizeof(chan->tx));
    af62:	2100      	movs	r1, #0
    af64:	305c      	adds	r0, #92	; 0x5c
    af66:	f017 fc06 	bl	22776 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    af6a:	f3bf 8f5b 	dmb	ish
    af6e:	f104 0364 	add.w	r3, r4, #100	; 0x64
    af72:	2500      	movs	r5, #0
    af74:	e853 2f00 	ldrex	r2, [r3]
    af78:	e843 5100 	strex	r1, r5, [r3]
    af7c:	2900      	cmp	r1, #0
    af7e:	d1f9      	bne.n	af74 <l2cap_chan_tx_init+0x18>
    af80:	f3bf 8f5b 	dmb	ish
	z_impl_k_queue_init(queue);
    af84:	f104 0068 	add.w	r0, r4, #104	; 0x68
    af88:	f01a fdde 	bl	25b48 <z_impl_k_queue_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    af8c:	4b02      	ldr	r3, [pc, #8]	; (af98 <l2cap_chan_tx_init+0x3c>)
    af8e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    af92:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
}
    af96:	bd38      	pop	{r3, r4, r5, pc}
    af98:	000232f1 	.word	0x000232f1

0000af9c <k_work_submit_to_queue.constprop.0>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
    af9c:	4601      	mov	r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    af9e:	f100 0308 	add.w	r3, r0, #8
    afa2:	f3bf 8f5b 	dmb	ish
    afa6:	e853 2f00 	ldrex	r2, [r3]
    afaa:	f042 0001 	orr.w	r0, r2, #1
    afae:	e843 0c00 	strex	ip, r0, [r3]
    afb2:	f1bc 0f00 	cmp.w	ip, #0
    afb6:	d1f6      	bne.n	afa6 <k_work_submit_to_queue.constprop.0+0xa>
    afb8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    afbc:	07d3      	lsls	r3, r2, #31
    afbe:	d402      	bmi.n	afc6 <k_work_submit_to_queue.constprop.0+0x2a>
		k_queue_append(&work_q->queue, work);
    afc0:	4801      	ldr	r0, [pc, #4]	; (afc8 <k_work_submit_to_queue.constprop.0+0x2c>)
    afc2:	f01a bdcd 	b.w	25b60 <k_queue_append>
}
    afc6:	4770      	bx	lr
    afc8:	20001510 	.word	0x20001510

0000afcc <l2cap_rtx_timeout>:
{
    afcc:	b538      	push	{r3, r4, r5, lr}
    afce:	4a10      	ldr	r2, [pc, #64]	; (b010 <l2cap_rtx_timeout+0x44>)
    afd0:	4b10      	ldr	r3, [pc, #64]	; (b014 <l2cap_rtx_timeout+0x48>)
	struct bt_conn *conn = chan->chan.conn;
    afd2:	f850 5c10 	ldr.w	r5, [r0, #-16]
    afd6:	1ad2      	subs	r2, r2, r3
    afd8:	08d2      	lsrs	r2, r2, #3
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    afda:	f1a0 0410 	sub.w	r4, r0, #16
	BT_ERR("chan %p timeout", chan);
    afde:	0192      	lsls	r2, r2, #6
    afe0:	480d      	ldr	r0, [pc, #52]	; (b018 <l2cap_rtx_timeout+0x4c>)
    afe2:	f042 0201 	orr.w	r2, r2, #1
    afe6:	4621      	mov	r1, r4
    afe8:	f015 fdf7 	bl	20bda <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    afec:	4628      	mov	r0, r5
    afee:	4621      	mov	r1, r4
    aff0:	f018 f8d8 	bl	231a4 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    aff4:	4620      	mov	r0, r4
		bt_l2cap_chan_del(&chan->chan);
    aff6:	f018 f8ee 	bl	231d6 <bt_l2cap_chan_del>
	while ((chan = l2cap_remove_ident(conn, chan->chan.ident))) {
    affa:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    affe:	2201      	movs	r2, #1
    b000:	4628      	mov	r0, r5
    b002:	f017 ff9e 	bl	22f42 <__l2cap_lookup_ident>
    b006:	4604      	mov	r4, r0
    b008:	2800      	cmp	r0, #0
    b00a:	d1f4      	bne.n	aff6 <l2cap_rtx_timeout+0x2a>
}
    b00c:	bd38      	pop	{r3, r4, r5, pc}
    b00e:	bf00      	nop
    b010:	00026644 	.word	0x00026644
    b014:	00026544 	.word	0x00026544
    b018:	00029bc4 	.word	0x00029bc4

0000b01c <l2cap_chan_le_send>:
{
    b01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b020:	4606      	mov	r6, r0
    b022:	b085      	sub	sp, #20
    b024:	460d      	mov	r5, r1
    b026:	4617      	mov	r7, r2
	if (!test_and_dec(&ch->tx.credits)) {
    b028:	f100 0864 	add.w	r8, r0, #100	; 0x64
		old_value = atomic_get(target);
    b02c:	4640      	mov	r0, r8
    b02e:	f017 ffd0 	bl	22fd2 <atomic_get>
		if (!old_value) {
    b032:	2800      	cmp	r0, #0
    b034:	f000 80c6 	beq.w	b1c4 <l2cap_chan_le_send+0x1a8>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b038:	f3bf 8f5b 	dmb	ish
		new_value = old_value - 1;
    b03c:	1e43      	subs	r3, r0, #1
    b03e:	e858 2f00 	ldrex	r2, [r8]
    b042:	4282      	cmp	r2, r0
    b044:	d103      	bne.n	b04e <l2cap_chan_le_send+0x32>
    b046:	e848 3100 	strex	r1, r3, [r8]
    b04a:	2900      	cmp	r1, #0
    b04c:	d1f7      	bne.n	b03e <l2cap_chan_le_send+0x22>
    b04e:	f3bf 8f5b 	dmb	ish
	} while (atomic_cas(target, old_value, new_value) == 0);
    b052:	d1eb      	bne.n	b02c <l2cap_chan_le_send+0x10>
	net_buf_simple_save(&buf->b, &state);
    b054:	f105 0b08 	add.w	fp, r5, #8
	state->offset = net_buf_simple_headroom(buf);
    b058:	4658      	mov	r0, fp
    b05a:	f01a fa1c 	bl	25496 <net_buf_simple_headroom>
	state->len = buf->len;
    b05e:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    b062:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
	state->offset = net_buf_simple_headroom(buf);
    b066:	9002      	str	r0, [sp, #8]
    b068:	eb0a 0207 	add.w	r2, sl, r7
    b06c:	429a      	cmp	r2, r3
    b06e:	d81e      	bhi.n	b0ae <l2cap_chan_le_send+0x92>
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    b070:	4658      	mov	r0, fp
    b072:	f01a fa10 	bl	25496 <net_buf_simple_headroom>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    b076:	f107 0308 	add.w	r3, r7, #8
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    b07a:	b29b      	uxth	r3, r3
    b07c:	4298      	cmp	r0, r3
    b07e:	d316      	bcc.n	b0ae <l2cap_chan_le_send+0x92>
    b080:	682b      	ldr	r3, [r5, #0]
    b082:	b9a3      	cbnz	r3, b0ae <l2cap_chan_le_send+0x92>
		if (sdu_hdr_len) {
    b084:	b137      	cbz	r7, b094 <l2cap_chan_le_send+0x78>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    b086:	4628      	mov	r0, r5
    b088:	f017 ff53 	bl	22f32 <net_buf_frags_len>
    b08c:	b281      	uxth	r1, r0
    b08e:	4658      	mov	r0, fp
    b090:	f01a f9d5 	bl	2543e <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    b094:	4628      	mov	r0, r5
    b096:	f01a f977 	bl	25388 <net_buf_ref>
	if (!seg) {
    b09a:	4604      	mov	r4, r0
    b09c:	2800      	cmp	r0, #0
    b09e:	d138      	bne.n	b112 <l2cap_chan_le_send+0xf6>
	return atomic_add(target, 1);
    b0a0:	2101      	movs	r1, #1
    b0a2:	4640      	mov	r0, r8
    b0a4:	f017 ff9b 	bl	22fde <atomic_add>
		return -EAGAIN;
    b0a8:	f06f 070a 	mvn.w	r7, #10
    b0ac:	e084      	b.n	b1b8 <l2cap_chan_le_send+0x19c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b0ae:	79a8      	ldrb	r0, [r5, #6]
    b0b0:	f012 fec6 	bl	1de40 <net_buf_pool_get>
	seg = net_buf_alloc(pool, K_NO_WAIT);
    b0b4:	2200      	movs	r2, #0
    b0b6:	2300      	movs	r3, #0
    b0b8:	f01a f930 	bl	2531c <net_buf_alloc_fixed>
	if (seg) {
    b0bc:	4604      	mov	r4, r0
    b0be:	2800      	cmp	r0, #0
    b0c0:	d055      	beq.n	b16e <l2cap_chan_le_send+0x152>
		net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    b0c2:	2108      	movs	r1, #8
    b0c4:	4408      	add	r0, r1
    b0c6:	f01a f94e 	bl	25366 <net_buf_simple_reserve>
	if (sdu_hdr_len) {
    b0ca:	f104 0908 	add.w	r9, r4, #8
    b0ce:	b137      	cbz	r7, b0de <l2cap_chan_le_send+0xc2>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    b0d0:	4628      	mov	r0, r5
    b0d2:	f017 ff2e 	bl	22f32 <net_buf_frags_len>
    b0d6:	b281      	uxth	r1, r0
    b0d8:	4648      	mov	r0, r9
    b0da:	f01a f99e 	bl	2541a <net_buf_simple_add_le16>
	len = MIN(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    b0de:	4648      	mov	r0, r9
    b0e0:	f01a f9dd 	bl	2549e <net_buf_simple_tailroom>
    b0e4:	f8b6 1060 	ldrh.w	r1, [r6, #96]	; 0x60
    b0e8:	1bc9      	subs	r1, r1, r7
    b0ea:	4288      	cmp	r0, r1
    b0ec:	d248      	bcs.n	b180 <l2cap_chan_le_send+0x164>
    b0ee:	4648      	mov	r0, r9
    b0f0:	f01a f9d5 	bl	2549e <net_buf_simple_tailroom>
    b0f4:	b282      	uxth	r2, r0
	len = MIN(buf->len, len);
    b0f6:	89a9      	ldrh	r1, [r5, #12]
	net_buf_add_mem(seg, buf->data, len);
    b0f8:	428a      	cmp	r2, r1
    b0fa:	bf28      	it	cs
    b0fc:	460a      	movcs	r2, r1
    b0fe:	4648      	mov	r0, r9
    b100:	68a9      	ldr	r1, [r5, #8]
    b102:	9203      	str	r2, [sp, #12]
    b104:	f01a f978 	bl	253f8 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    b108:	9a03      	ldr	r2, [sp, #12]
    b10a:	4658      	mov	r0, fp
    b10c:	4611      	mov	r1, r2
    b10e:	f01a f9a2 	bl	25456 <net_buf_simple_pull>
	len = seg->len - sdu_hdr_len;
    b112:	89a2      	ldrh	r2, [r4, #12]
    b114:	f8b6 105c 	ldrh.w	r1, [r6, #92]	; 0x5c
	if ((buf == seg || !buf->len) && ch->chan.ops->sent) {
    b118:	42a5      	cmp	r5, r4
	len = seg->len - sdu_hdr_len;
    b11a:	eba2 0707 	sub.w	r7, r2, r7
	if ((buf == seg || !buf->len) && ch->chan.ops->sent) {
    b11e:	d001      	beq.n	b124 <l2cap_chan_le_send+0x108>
    b120:	89ab      	ldrh	r3, [r5, #12]
    b122:	bb7b      	cbnz	r3, b184 <l2cap_chan_le_send+0x168>
    b124:	6873      	ldr	r3, [r6, #4]
    b126:	695b      	ldr	r3, [r3, #20]
    b128:	b363      	cbz	r3, b184 <l2cap_chan_le_send+0x168>
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    b12a:	4b2c      	ldr	r3, [pc, #176]	; (b1dc <l2cap_chan_le_send+0x1c0>)
    b12c:	9600      	str	r6, [sp, #0]
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    b12e:	4622      	mov	r2, r4
    b130:	6830      	ldr	r0, [r6, #0]
    b132:	f018 f883 	bl	2323c <bt_l2cap_send_cb>
    b136:	4604      	mov	r4, r0
	if (err) {
    b138:	b338      	cbz	r0, b18a <l2cap_chan_le_send+0x16e>
    b13a:	4b29      	ldr	r3, [pc, #164]	; (b1e0 <l2cap_chan_le_send+0x1c4>)
    b13c:	4a29      	ldr	r2, [pc, #164]	; (b1e4 <l2cap_chan_le_send+0x1c8>)
    b13e:	1ad2      	subs	r2, r2, r3
    b140:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Unable to send seg %d", err);
    b142:	0192      	lsls	r2, r2, #6
    b144:	4601      	mov	r1, r0
    b146:	f042 0202 	orr.w	r2, r2, #2
    b14a:	4827      	ldr	r0, [pc, #156]	; (b1e8 <l2cap_chan_le_send+0x1cc>)
    b14c:	f015 fd45 	bl	20bda <log_1>
    b150:	2101      	movs	r1, #1
    b152:	4640      	mov	r0, r8
    b154:	f017 ff43 	bl	22fde <atomic_add>
		if (err == -ENOBUFS) {
    b158:	f114 0f37 	cmn.w	r4, #55	; 0x37
    b15c:	d130      	bne.n	b1c0 <l2cap_chan_le_send+0x1a4>
	buf->data = buf->__buf + state->offset;
    b15e:	6928      	ldr	r0, [r5, #16]
    b160:	9b02      	ldr	r3, [sp, #8]
	buf->len = state->len;
    b162:	f8a5 a00c 	strh.w	sl, [r5, #12]
	buf->data = buf->__buf + state->offset;
    b166:	fa10 f083 	uxtah	r0, r0, r3
    b16a:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
    b16c:	e79c      	b.n	b0a8 <l2cap_chan_le_send+0x8c>
	return bt_conn_create_pdu_timeout(pool,
    b16e:	2200      	movs	r2, #0
    b170:	2300      	movs	r3, #0
    b172:	2104      	movs	r1, #4
    b174:	f7ff fd2a 	bl	abcc <bt_conn_create_pdu_timeout>
	if (!seg) {
    b178:	4604      	mov	r4, r0
    b17a:	2800      	cmp	r0, #0
    b17c:	d1a5      	bne.n	b0ca <l2cap_chan_le_send+0xae>
    b17e:	e78f      	b.n	b0a0 <l2cap_chan_le_send+0x84>
	len = MIN(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    b180:	b28a      	uxth	r2, r1
    b182:	e7b8      	b.n	b0f6 <l2cap_chan_le_send+0xda>
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    b184:	4b19      	ldr	r3, [pc, #100]	; (b1ec <l2cap_chan_le_send+0x1d0>)
    b186:	9600      	str	r6, [sp, #0]
    b188:	e7d1      	b.n	b12e <l2cap_chan_le_send+0x112>
	if (!atomic_get(&ch->tx.credits)) {
    b18a:	4640      	mov	r0, r8
    b18c:	f017 ff21 	bl	22fd2 <atomic_get>
    b190:	b990      	cbnz	r0, b1b8 <l2cap_chan_le_send+0x19c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b192:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(ch->chan.status, BT_L2CAP_STATUS_OUT);
    b196:	f106 0140 	add.w	r1, r6, #64	; 0x40
    b19a:	e851 3f00 	ldrex	r3, [r1]
    b19e:	f023 0301 	bic.w	r3, r3, #1
    b1a2:	e841 3200 	strex	r2, r3, [r1]
    b1a6:	2a00      	cmp	r2, #0
    b1a8:	d1f7      	bne.n	b19a <l2cap_chan_le_send+0x17e>
    b1aa:	f3bf 8f5b 	dmb	ish
		if (ch->chan.ops->status) {
    b1ae:	6873      	ldr	r3, [r6, #4]
    b1b0:	699b      	ldr	r3, [r3, #24]
    b1b2:	b10b      	cbz	r3, b1b8 <l2cap_chan_le_send+0x19c>
			ch->chan.ops->status(&ch->chan, ch->chan.status);
    b1b4:	4630      	mov	r0, r6
    b1b6:	4798      	blx	r3
}
    b1b8:	4638      	mov	r0, r7
    b1ba:	b005      	add	sp, #20
    b1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1c0:	4627      	mov	r7, r4
    b1c2:	e7f9      	b.n	b1b8 <l2cap_chan_le_send+0x19c>
    b1c4:	4b06      	ldr	r3, [pc, #24]	; (b1e0 <l2cap_chan_le_send+0x1c4>)
    b1c6:	4907      	ldr	r1, [pc, #28]	; (b1e4 <l2cap_chan_le_send+0x1c8>)
		BT_WARN("No credits to transmit packet");
    b1c8:	4809      	ldr	r0, [pc, #36]	; (b1f0 <l2cap_chan_le_send+0x1d4>)
    b1ca:	1ac9      	subs	r1, r1, r3
    b1cc:	08c9      	lsrs	r1, r1, #3
    b1ce:	0189      	lsls	r1, r1, #6
    b1d0:	f041 0102 	orr.w	r1, r1, #2
    b1d4:	f015 fcf4 	bl	20bc0 <log_0>
    b1d8:	e766      	b.n	b0a8 <l2cap_chan_le_send+0x8c>
    b1da:	bf00      	nop
    b1dc:	0002318d 	.word	0x0002318d
    b1e0:	00026544 	.word	0x00026544
    b1e4:	00026644 	.word	0x00026644
    b1e8:	00029bd4 	.word	0x00029bd4
    b1ec:	00023187 	.word	0x00023187
    b1f0:	00029bea 	.word	0x00029bea

0000b1f4 <l2cap_chan_send_req>:
{
    b1f4:	b538      	push	{r3, r4, r5, lr}
    b1f6:	4604      	mov	r4, r0
    b1f8:	460d      	mov	r5, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b1fa:	f100 0110 	add.w	r1, r0, #16
    b1fe:	4804      	ldr	r0, [pc, #16]	; (b210 <l2cap_chan_send_req+0x1c>)
    b200:	f014 fe6a 	bl	1fed8 <k_delayed_work_submit_to_queue>
	bt_l2cap_send(chan->conn, BT_L2CAP_CID_LE_SIG, buf);
    b204:	6820      	ldr	r0, [r4, #0]
    b206:	4629      	mov	r1, r5
}
    b208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_send(chan->conn, BT_L2CAP_CID_LE_SIG, buf);
    b20c:	f018 b892 	b.w	23334 <bt_l2cap_send.constprop.0>
    b210:	20001510 	.word	0x20001510

0000b214 <l2cap_chan_send_credits.isra.0>:
static void l2cap_chan_send_credits(struct bt_l2cap_le_chan *chan,
    b214:	b570      	push	{r4, r5, r6, lr}
    b216:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
    b21a:	428e      	cmp	r6, r1
    b21c:	bf28      	it	cs
    b21e:	460e      	movcs	r6, r1
    b220:	4604      	mov	r4, r0
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    b222:	f7ff fe21 	bl	ae68 <get_ident>
    b226:	2204      	movs	r2, #4
    b228:	4601      	mov	r1, r0
    b22a:	2016      	movs	r0, #22
    b22c:	f7ff fe66 	bl	aefc <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    b230:	4605      	mov	r5, r0
    b232:	2800      	cmp	r0, #0
    b234:	d146      	bne.n	b2c4 <l2cap_chan_send_credits.isra.0+0xb0>
    b236:	4b2e      	ldr	r3, [pc, #184]	; (b2f0 <l2cap_chan_send_credits.isra.0+0xdc>)
    b238:	492e      	ldr	r1, [pc, #184]	; (b2f4 <l2cap_chan_send_credits.isra.0+0xe0>)
		BT_ERR("Unable to send credits update");
    b23a:	482f      	ldr	r0, [pc, #188]	; (b2f8 <l2cap_chan_send_credits.isra.0+0xe4>)
    b23c:	1ac9      	subs	r1, r1, r3
    b23e:	08c9      	lsrs	r1, r1, #3
    b240:	0189      	lsls	r1, r1, #6
    b242:	f041 0101 	orr.w	r1, r1, #1
	atomic_set_bit(chan->status, BT_L2CAP_STATUS_SHUTDOWN);
    b246:	f104 0640 	add.w	r6, r4, #64	; 0x40
		BT_ERR("Unable to send credits update");
    b24a:	f015 fcb9 	bl	20bc0 <log_0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b24e:	f3bf 8f5b 	dmb	ish
    b252:	e856 3f00 	ldrex	r3, [r6]
    b256:	f043 0302 	orr.w	r3, r3, #2
    b25a:	e846 3200 	strex	r2, r3, [r6]
    b25e:	2a00      	cmp	r2, #0
    b260:	d1f7      	bne.n	b252 <l2cap_chan_send_credits.isra.0+0x3e>
    b262:	f3bf 8f5b 	dmb	ish
	if (ch->_sdu) {
    b266:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    b26a:	b128      	cbz	r0, b278 <l2cap_chan_send_credits.isra.0+0x64>
		net_buf_unref(ch->_sdu);
    b26c:	f012 fea4 	bl	1dfb8 <net_buf_unref>
		ch->_sdu = NULL;
    b270:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		ch->_sdu_len = 0U;
    b274:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
	if (ch->tx_buf) {
    b278:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    b27c:	b120      	cbz	r0, b288 <l2cap_chan_send_credits.isra.0+0x74>
		net_buf_unref(ch->tx_buf);
    b27e:	f012 fe9b 	bl	1dfb8 <net_buf_unref>
		ch->tx_buf = NULL;
    b282:	2300      	movs	r3, #0
    b284:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    b288:	f104 0568 	add.w	r5, r4, #104	; 0x68
    b28c:	2200      	movs	r2, #0
    b28e:	2300      	movs	r3, #0
    b290:	4628      	mov	r0, r5
    b292:	f01a f848 	bl	25326 <net_buf_get>
    b296:	b978      	cbnz	r0, b2b8 <l2cap_chan_send_credits.isra.0+0xa4>
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
    b298:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
    b29c:	2200      	movs	r2, #0
    b29e:	2300      	movs	r3, #0
    b2a0:	4628      	mov	r0, r5
    b2a2:	f01a f840 	bl	25326 <net_buf_get>
    b2a6:	b950      	cbnz	r0, b2be <l2cap_chan_send_credits.isra.0+0xaa>
	if (chan->ops->status) {
    b2a8:	6863      	ldr	r3, [r4, #4]
    b2aa:	699b      	ldr	r3, [r3, #24]
    b2ac:	b1f3      	cbz	r3, b2ec <l2cap_chan_send_credits.isra.0+0xd8>
		chan->ops->status(chan, chan->status);
    b2ae:	4631      	mov	r1, r6
    b2b0:	4620      	mov	r0, r4
}
    b2b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		chan->ops->status(chan, chan->status);
    b2b6:	4718      	bx	r3
		net_buf_unref(buf);
    b2b8:	f012 fe7e 	bl	1dfb8 <net_buf_unref>
    b2bc:	e7e6      	b.n	b28c <l2cap_chan_send_credits.isra.0+0x78>
		net_buf_unref(buf);
    b2be:	f012 fe7b 	bl	1dfb8 <net_buf_unref>
    b2c2:	e7eb      	b.n	b29c <l2cap_chan_send_credits.isra.0+0x88>
	atomic_add(&chan->rx.credits, credits);
    b2c4:	4631      	mov	r1, r6
    b2c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b2ca:	f017 fe88 	bl	22fde <atomic_add>
	ev = net_buf_add(buf, sizeof(*ev));
    b2ce:	2104      	movs	r1, #4
    b2d0:	f105 0008 	add.w	r0, r5, #8
    b2d4:	f01a f88a 	bl	253ec <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    b2d8:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    b2dc:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    b2de:	8046      	strh	r6, [r0, #2]
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    b2e0:	4629      	mov	r1, r5
    b2e2:	6820      	ldr	r0, [r4, #0]
}
    b2e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    b2e8:	f018 b824 	b.w	23334 <bt_l2cap_send.constprop.0>
}
    b2ec:	bd70      	pop	{r4, r5, r6, pc}
    b2ee:	bf00      	nop
    b2f0:	00026544 	.word	0x00026544
    b2f4:	00026644 	.word	0x00026644
    b2f8:	00029c08 	.word	0x00029c08

0000b2fc <l2cap_chan_add>:
	if (ch->rx.cid > 0) {
    b2fc:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
{
    b300:	b570      	push	{r4, r5, r6, lr}
    b302:	4605      	mov	r5, r0
    b304:	460c      	mov	r4, r1
    b306:	4616      	mov	r6, r2
	if (ch->rx.cid > 0) {
    b308:	b933      	cbnz	r3, b318 <l2cap_chan_add+0x1c>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    b30a:	2140      	movs	r1, #64	; 0x40
		if (!bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    b30c:	4628      	mov	r0, r5
    b30e:	f018 f901 	bl	23514 <bt_l2cap_le_lookup_rx_cid>
    b312:	bb78      	cbnz	r0, b374 <l2cap_chan_add+0x78>
			ch->rx.cid = cid;
    b314:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    b318:	4921      	ldr	r1, [pc, #132]	; (b3a0 <l2cap_chan_add+0xa4>)
    b31a:	f104 0010 	add.w	r0, r4, #16
    b31e:	f01a fe15 	bl	25f4c <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b322:	f3bf 8f5b 	dmb	ish
    b326:	f104 0340 	add.w	r3, r4, #64	; 0x40
    b32a:	2200      	movs	r2, #0
    b32c:	e853 1f00 	ldrex	r1, [r3]
    b330:	e843 2000 	strex	r0, r2, [r3]
    b334:	2800      	cmp	r0, #0
    b336:	d1f9      	bne.n	b32c <l2cap_chan_add+0x30>
    b338:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    b33c:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    b33e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    b340:	f104 0308 	add.w	r3, r4, #8
    b344:	bb32      	cbnz	r2, b394 <l2cap_chan_add+0x98>
	list->head = node;
    b346:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    b34a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
	chan->conn = conn;
    b34e:	6025      	str	r5, [r4, #0]
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    b350:	3b40      	subs	r3, #64	; 0x40
    b352:	2b3f      	cmp	r3, #63	; 0x3f
	chan->destroy = destroy;
    b354:	60e6      	str	r6, [r4, #12]
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    b356:	d820      	bhi.n	b39a <l2cap_chan_add+0x9e>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b358:	4a12      	ldr	r2, [pc, #72]	; (b3a4 <l2cap_chan_add+0xa8>)
    b35a:	2300      	movs	r3, #0
    b35c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    b360:	e9c4 2327 	strd	r2, r3, [r4, #156]	; 0x9c
    b364:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    b368:	f01a fbee 	bl	25b48 <z_impl_k_queue_init>
	chan->state = state;
    b36c:	2001      	movs	r0, #1
    b36e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
}
    b372:	bd70      	pop	{r4, r5, r6, pc}
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    b374:	3101      	adds	r1, #1
    b376:	b289      	uxth	r1, r1
    b378:	2980      	cmp	r1, #128	; 0x80
    b37a:	d1c7      	bne.n	b30c <l2cap_chan_add+0x10>
    b37c:	4b0a      	ldr	r3, [pc, #40]	; (b3a8 <l2cap_chan_add+0xac>)
    b37e:	490b      	ldr	r1, [pc, #44]	; (b3ac <l2cap_chan_add+0xb0>)
		BT_ERR("Unable to allocate L2CAP CID");
    b380:	480b      	ldr	r0, [pc, #44]	; (b3b0 <l2cap_chan_add+0xb4>)
    b382:	1ac9      	subs	r1, r1, r3
    b384:	08c9      	lsrs	r1, r1, #3
    b386:	0189      	lsls	r1, r1, #6
    b388:	f041 0101 	orr.w	r1, r1, #1
    b38c:	f015 fc18 	bl	20bc0 <log_0>
		return false;
    b390:	2000      	movs	r0, #0
    b392:	e7ee      	b.n	b372 <l2cap_chan_add+0x76>
	parent->next = child;
    b394:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b396:	652b      	str	r3, [r5, #80]	; 0x50
}
    b398:	e7d7      	b.n	b34a <l2cap_chan_add+0x4e>
	return true;
    b39a:	2001      	movs	r0, #1
    b39c:	e7e9      	b.n	b372 <l2cap_chan_add+0x76>
    b39e:	bf00      	nop
    b3a0:	0000afcd 	.word	0x0000afcd
    b3a4:	000235cf 	.word	0x000235cf
    b3a8:	00026544 	.word	0x00026544
    b3ac:	00026644 	.word	0x00026644
    b3b0:	00029c26 	.word	0x00029c26

0000b3b4 <bt_l2cap_connected>:
{
    b3b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b3b6:	4c1a      	ldr	r4, [pc, #104]	; (b420 <bt_l2cap_connected+0x6c>)
    b3b8:	4e1a      	ldr	r6, [pc, #104]	; (b424 <bt_l2cap_connected+0x70>)
{
    b3ba:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b3bc:	42b4      	cmp	r4, r6
    b3be:	d301      	bcc.n	b3c4 <bt_l2cap_connected+0x10>
}
    b3c0:	b002      	add	sp, #8
    b3c2:	bd70      	pop	{r4, r5, r6, pc}
		if (fchan->accept(conn, &chan) < 0) {
    b3c4:	6863      	ldr	r3, [r4, #4]
    b3c6:	a901      	add	r1, sp, #4
    b3c8:	4628      	mov	r0, r5
    b3ca:	4798      	blx	r3
    b3cc:	2800      	cmp	r0, #0
    b3ce:	db25      	blt.n	b41c <bt_l2cap_connected+0x68>
		ch = BT_L2CAP_LE_CHAN(chan);
    b3d0:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    b3d2:	8823      	ldrh	r3, [r4, #0]
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    b3d4:	68a2      	ldr	r2, [r4, #8]
		ch->rx.cid = fchan->cid;
    b3d6:	f8a1 3050 	strh.w	r3, [r1, #80]	; 0x50
		ch->tx.cid = fchan->cid;
    b3da:	f8a1 305c 	strh.w	r3, [r1, #92]	; 0x5c
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    b3de:	4628      	mov	r0, r5
    b3e0:	f7ff ff8c 	bl	b2fc <l2cap_chan_add>
    b3e4:	2800      	cmp	r0, #0
    b3e6:	d0eb      	beq.n	b3c0 <bt_l2cap_connected+0xc>
		if (chan->ops->connected) {
    b3e8:	9801      	ldr	r0, [sp, #4]
    b3ea:	6843      	ldr	r3, [r0, #4]
    b3ec:	681b      	ldr	r3, [r3, #0]
    b3ee:	b103      	cbz	r3, b3f2 <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
    b3f0:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b3f2:	9b01      	ldr	r3, [sp, #4]
    b3f4:	f3bf 8f5b 	dmb	ish
    b3f8:	3340      	adds	r3, #64	; 0x40
    b3fa:	e853 2f00 	ldrex	r2, [r3]
    b3fe:	f042 0201 	orr.w	r2, r2, #1
    b402:	e843 2100 	strex	r1, r2, [r3]
    b406:	2900      	cmp	r1, #0
    b408:	d1f7      	bne.n	b3fa <bt_l2cap_connected+0x46>
    b40a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    b40e:	9801      	ldr	r0, [sp, #4]
    b410:	6843      	ldr	r3, [r0, #4]
    b412:	699b      	ldr	r3, [r3, #24]
    b414:	b113      	cbz	r3, b41c <bt_l2cap_connected+0x68>
			chan->ops->status(chan, chan->status);
    b416:	f100 0140 	add.w	r1, r0, #64	; 0x40
    b41a:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b41c:	340c      	adds	r4, #12
    b41e:	e7cd      	b.n	b3bc <bt_l2cap_connected+0x8>
    b420:	00026508 	.word	0x00026508
    b424:	0002652c 	.word	0x0002652c

0000b428 <l2cap_chan_accept>:
{
    b428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b42c:	4699      	mov	r9, r3
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    b42e:	f1a2 0340 	sub.w	r3, r2, #64	; 0x40
    b432:	2b3f      	cmp	r3, #63	; 0x3f
{
    b434:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
    b438:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b43a:	4683      	mov	fp, r0
    b43c:	460f      	mov	r7, r1
    b43e:	4690      	mov	r8, r2
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    b440:	d853      	bhi.n	b4ea <l2cap_chan_accept+0xc2>
	*chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    b442:	4611      	mov	r1, r2
    b444:	f018 f856 	bl	234f4 <bt_l2cap_le_lookup_tx_cid>
    b448:	4606      	mov	r6, r0
    b44a:	6028      	str	r0, [r5, #0]
	if (*chan) {
    b44c:	2800      	cmp	r0, #0
    b44e:	d14e      	bne.n	b4ee <l2cap_chan_accept+0xc6>
	err = server->accept(conn, chan);
    b450:	687b      	ldr	r3, [r7, #4]
    b452:	4629      	mov	r1, r5
    b454:	4658      	mov	r0, fp
    b456:	4798      	blx	r3
	if (err < 0) {
    b458:	1e04      	subs	r4, r0, #0
    b45a:	da13      	bge.n	b484 <l2cap_chan_accept+0x5c>
	switch (err) {
    b45c:	f114 0f0c 	cmn.w	r4, #12
    b460:	d049      	beq.n	b4f6 <l2cap_chan_accept+0xce>
    b462:	f114 0f0b 	cmn.w	r4, #11
    b466:	da08      	bge.n	b47a <l2cap_chan_accept+0x52>
    b468:	f114 0f23 	cmn.w	r4, #35	; 0x23
    b46c:	d041      	beq.n	b4f2 <l2cap_chan_accept+0xca>
    b46e:	340d      	adds	r4, #13
    b470:	bf14      	ite	ne
    b472:	200b      	movne	r0, #11
    b474:	2006      	moveq	r0, #6
}
    b476:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (err) {
    b47a:	3401      	adds	r4, #1
		return BT_L2CAP_LE_ERR_KEY_SIZE;
    b47c:	bf14      	ite	ne
    b47e:	200b      	movne	r0, #11
    b480:	2007      	moveq	r0, #7
    b482:	e7f8      	b.n	b476 <l2cap_chan_accept+0x4e>
	(*chan)->required_sec_level = server->sec_level;
    b484:	682b      	ldr	r3, [r5, #0]
    b486:	78ba      	ldrb	r2, [r7, #2]
    b488:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	if (!l2cap_chan_add(conn, *chan, l2cap_chan_destroy)) {
    b48c:	6829      	ldr	r1, [r5, #0]
    b48e:	4a1c      	ldr	r2, [pc, #112]	; (b500 <l2cap_chan_accept+0xd8>)
    b490:	4658      	mov	r0, fp
    b492:	f7ff ff33 	bl	b2fc <l2cap_chan_add>
    b496:	b370      	cbz	r0, b4f6 <l2cap_chan_accept+0xce>
	ch = BT_L2CAP_LE_CHAN(*chan);
    b498:	682c      	ldr	r4, [r5, #0]
	l2cap_chan_tx_init(ch);
    b49a:	4620      	mov	r0, r4
    b49c:	f7ff fd5e 	bl	af5c <l2cap_chan_tx_init>
	ch->tx.mps = mps;
    b4a0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    b4a4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	l2cap_chan_tx_give_credits(ch, credits);
    b4a8:	4651      	mov	r1, sl
    b4aa:	4620      	mov	r0, r4
	ch->tx.cid = scid;
    b4ac:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
	ch->tx.mtu = mtu;
    b4b0:	f8a4 905e 	strh.w	r9, [r4, #94]	; 0x5e
	ch->tx.init_credits = credits;
    b4b4:	f8a4 a062 	strh.w	sl, [r4, #98]	; 0x62
	l2cap_chan_tx_give_credits(ch, credits);
    b4b8:	f017 fdf8 	bl	230ac <l2cap_chan_tx_give_credits>
	l2cap_chan_rx_init(ch);
    b4bc:	4620      	mov	r0, r4
    b4be:	f017 fdca 	bl	23056 <l2cap_chan_rx_init>
	atomic_add(&chan->rx.credits, credits);
    b4c2:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
    b4c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b4ca:	f017 fd88 	bl	22fde <atomic_add>
	(*chan)->psm = server->psm;
    b4ce:	682b      	ldr	r3, [r5, #0]
    b4d0:	883a      	ldrh	r2, [r7, #0]
    b4d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	chan->state = state;
    b4d6:	2203      	movs	r2, #3
    b4d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if ((*chan)->ops->connected) {
    b4dc:	6828      	ldr	r0, [r5, #0]
    b4de:	6843      	ldr	r3, [r0, #4]
    b4e0:	681b      	ldr	r3, [r3, #0]
    b4e2:	b153      	cbz	r3, b4fa <l2cap_chan_accept+0xd2>
		(*chan)->ops->connected(*chan);
    b4e4:	4798      	blx	r3
	return BT_L2CAP_LE_SUCCESS;
    b4e6:	4630      	mov	r0, r6
    b4e8:	e7c5      	b.n	b476 <l2cap_chan_accept+0x4e>
		return BT_L2CAP_LE_ERR_INVALID_SCID;
    b4ea:	2009      	movs	r0, #9
    b4ec:	e7c3      	b.n	b476 <l2cap_chan_accept+0x4e>
		return BT_L2CAP_LE_ERR_SCID_IN_USE;
    b4ee:	200a      	movs	r0, #10
    b4f0:	e7c1      	b.n	b476 <l2cap_chan_accept+0x4e>
		return BT_L2CAP_LE_ERR_PSM_NOT_SUPP;
    b4f2:	2002      	movs	r0, #2
    b4f4:	e7bf      	b.n	b476 <l2cap_chan_accept+0x4e>
		return BT_L2CAP_LE_ERR_NO_RESOURCES;
    b4f6:	2004      	movs	r0, #4
    b4f8:	e7bd      	b.n	b476 <l2cap_chan_accept+0x4e>
	return BT_L2CAP_LE_SUCCESS;
    b4fa:	4618      	mov	r0, r3
    b4fc:	e7bb      	b.n	b476 <l2cap_chan_accept+0x4e>
    b4fe:	bf00      	nop
    b500:	00022ffb 	.word	0x00022ffb

0000b504 <l2cap_chan_le_recv_seg>:
{
    b504:	b570      	push	{r4, r5, r6, lr}
    b506:	460d      	mov	r5, r1
	len = net_buf_frags_len(chan->_sdu);
    b508:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
{
    b50c:	b086      	sub	sp, #24
	uint16_t seg = 0U;
    b50e:	2300      	movs	r3, #0
{
    b510:	4604      	mov	r4, r0
	len = net_buf_frags_len(chan->_sdu);
    b512:	4608      	mov	r0, r1
	uint16_t seg = 0U;
    b514:	f8ad 3016 	strh.w	r3, [sp, #22]
	len = net_buf_frags_len(chan->_sdu);
    b518:	f017 fd0b 	bl	22f32 <net_buf_frags_len>
	if (len) {
    b51c:	b283      	uxth	r3, r0
	len = net_buf_frags_len(chan->_sdu);
    b51e:	4606      	mov	r6, r0
	if (len) {
    b520:	b12b      	cbz	r3, b52e <l2cap_chan_le_recv_seg+0x2a>
		memcpy(&seg, net_buf_user_data(chan->_sdu), sizeof(seg));
    b522:	2202      	movs	r2, #2
    b524:	3114      	adds	r1, #20
    b526:	f10d 0016 	add.w	r0, sp, #22
    b52a:	f017 f8f9 	bl	22720 <memcpy>
	if (len + buf->len > chan->_sdu_len) {
    b52e:	89a8      	ldrh	r0, [r5, #12]
    b530:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    b534:	fa10 f686 	uxtah	r6, r0, r6
    b538:	429e      	cmp	r6, r3
    b53a:	dd0e      	ble.n	b55a <l2cap_chan_le_recv_seg+0x56>
    b53c:	4945      	ldr	r1, [pc, #276]	; (b654 <l2cap_chan_le_recv_seg+0x150>)
    b53e:	4b46      	ldr	r3, [pc, #280]	; (b658 <l2cap_chan_le_recv_seg+0x154>)
		BT_ERR("SDU length mismatch");
    b540:	4846      	ldr	r0, [pc, #280]	; (b65c <l2cap_chan_le_recv_seg+0x158>)
    b542:	1ac9      	subs	r1, r1, r3
    b544:	08c9      	lsrs	r1, r1, #3
    b546:	0189      	lsls	r1, r1, #6
    b548:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to store SDU");
    b54c:	f015 fb38 	bl	20bc0 <log_0>
		bt_l2cap_chan_disconnect(&chan->chan);
    b550:	4620      	mov	r0, r4
    b552:	f018 f811 	bl	23578 <bt_l2cap_chan_disconnect>
}
    b556:	b006      	add	sp, #24
    b558:	bd70      	pop	{r4, r5, r6, pc}
	seg++;
    b55a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 *
 * @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(const struct net_buf *buf)
{
	return (void *)buf->user_data;
    b55e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    b562:	3301      	adds	r3, #1
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    b564:	2202      	movs	r2, #2
    b566:	f10d 0116 	add.w	r1, sp, #22
    b56a:	3014      	adds	r0, #20
	seg++;
    b56c:	f8ad 3016 	strh.w	r3, [sp, #22]
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    b570:	f017 f8d6 	bl	22720 <memcpy>
	len = net_buf_append_bytes(chan->_sdu, buf->len, buf->data, K_NO_WAIT,
    b574:	4b3a      	ldr	r3, [pc, #232]	; (b660 <l2cap_chan_le_recv_seg+0x15c>)
    b576:	9302      	str	r3, [sp, #8]
    b578:	2200      	movs	r2, #0
    b57a:	2300      	movs	r3, #0
    b57c:	e9cd 2300 	strd	r2, r3, [sp]
    b580:	9403      	str	r4, [sp, #12]
    b582:	68aa      	ldr	r2, [r5, #8]
    b584:	89a9      	ldrh	r1, [r5, #12]
    b586:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    b58a:	f019 ff90 	bl	254ae <net_buf_append_bytes>
	if (len != buf->len) {
    b58e:	89ab      	ldrh	r3, [r5, #12]
    b590:	b280      	uxth	r0, r0
    b592:	4283      	cmp	r3, r0
    b594:	d008      	beq.n	b5a8 <l2cap_chan_le_recv_seg+0xa4>
    b596:	492f      	ldr	r1, [pc, #188]	; (b654 <l2cap_chan_le_recv_seg+0x150>)
    b598:	4b2f      	ldr	r3, [pc, #188]	; (b658 <l2cap_chan_le_recv_seg+0x154>)
		BT_ERR("Unable to store SDU");
    b59a:	4832      	ldr	r0, [pc, #200]	; (b664 <l2cap_chan_le_recv_seg+0x160>)
    b59c:	1ac9      	subs	r1, r1, r3
    b59e:	08c9      	lsrs	r1, r1, #3
    b5a0:	0189      	lsls	r1, r1, #6
    b5a2:	f041 0101 	orr.w	r1, r1, #1
    b5a6:	e7d1      	b.n	b54c <l2cap_chan_le_recv_seg+0x48>
	if (net_buf_frags_len(chan->_sdu) < chan->_sdu_len) {
    b5a8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    b5ac:	4630      	mov	r0, r6
    b5ae:	f017 fcc0 	bl	22f32 <net_buf_frags_len>
    b5b2:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    b5b6:	4298      	cmp	r0, r3
    b5b8:	d225      	bcs.n	b606 <l2cap_chan_le_recv_seg+0x102>
		if (!atomic_get(&chan->rx.credits) &&
    b5ba:	f104 0358 	add.w	r3, r4, #88	; 0x58
    b5be:	4618      	mov	r0, r3
    b5c0:	f017 fd07 	bl	22fd2 <atomic_get>
    b5c4:	2800      	cmp	r0, #0
    b5c6:	d1c6      	bne.n	b556 <l2cap_chan_le_recv_seg+0x52>
    b5c8:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
    b5cc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    b5d0:	4291      	cmp	r1, r2
    b5d2:	d1c0      	bne.n	b556 <l2cap_chan_le_recv_seg+0x52>
	atomic_val_t old_credits = atomic_get(&chan->rx.credits);
    b5d4:	4618      	mov	r0, r3
    b5d6:	f017 fcfc 	bl	22fd2 <atomic_get>
    b5da:	4606      	mov	r6, r0
	credits = ((chan->_sdu_len - net_buf_frags_len(buf)) +
    b5dc:	4628      	mov	r0, r5
    b5de:	f017 fca8 	bl	22f32 <net_buf_frags_len>
    b5e2:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    b5e6:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    b5ea:	440b      	add	r3, r1
    b5ec:	3b01      	subs	r3, #1
    b5ee:	1a1b      	subs	r3, r3, r0
		   (chan->rx.mps - 1)) / chan->rx.mps;
    b5f0:	fbb3 f1f1 	udiv	r1, r3, r1
	if (credits < old_credits) {
    b5f4:	b28b      	uxth	r3, r1
    b5f6:	429e      	cmp	r6, r3
    b5f8:	dcad      	bgt.n	b556 <l2cap_chan_le_recv_seg+0x52>
	credits -= old_credits;
    b5fa:	1b89      	subs	r1, r1, r6
	l2cap_chan_send_credits(chan, buf, credits);
    b5fc:	b289      	uxth	r1, r1
    b5fe:	4620      	mov	r0, r4
    b600:	f7ff fe08 	bl	b214 <l2cap_chan_send_credits.isra.0>
    b604:	e7a7      	b.n	b556 <l2cap_chan_le_recv_seg+0x52>
	chan->_sdu = NULL;
    b606:	2300      	movs	r3, #0
    b608:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	chan->_sdu_len = 0U;
    b60c:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	err = chan->chan.ops->recv(&chan->chan, buf);
    b610:	6863      	ldr	r3, [r4, #4]
	l2cap_chan_le_recv_sdu(chan, buf, seg);
    b612:	f8bd 5016 	ldrh.w	r5, [sp, #22]
	err = chan->chan.ops->recv(&chan->chan, buf);
    b616:	691b      	ldr	r3, [r3, #16]
    b618:	4631      	mov	r1, r6
    b61a:	4620      	mov	r0, r4
    b61c:	4798      	blx	r3
	if (err < 0) {
    b61e:	1e01      	subs	r1, r0, #0
    b620:	da13      	bge.n	b64a <l2cap_chan_le_recv_seg+0x146>
		if (err != -EINPROGRESS) {
    b622:	f111 0f44 	cmn.w	r1, #68	; 0x44
    b626:	d096      	beq.n	b556 <l2cap_chan_le_recv_seg+0x52>
    b628:	4b0b      	ldr	r3, [pc, #44]	; (b658 <l2cap_chan_le_recv_seg+0x154>)
    b62a:	4a0a      	ldr	r2, [pc, #40]	; (b654 <l2cap_chan_le_recv_seg+0x150>)
			BT_ERR("err %d", err);
    b62c:	480e      	ldr	r0, [pc, #56]	; (b668 <l2cap_chan_le_recv_seg+0x164>)
    b62e:	1ad2      	subs	r2, r2, r3
    b630:	08d2      	lsrs	r2, r2, #3
    b632:	0192      	lsls	r2, r2, #6
    b634:	f042 0201 	orr.w	r2, r2, #1
    b638:	f015 facf 	bl	20bda <log_1>
			bt_l2cap_chan_disconnect(&chan->chan);
    b63c:	4620      	mov	r0, r4
    b63e:	f017 ff9b 	bl	23578 <bt_l2cap_chan_disconnect>
	net_buf_unref(buf);
    b642:	4630      	mov	r0, r6
    b644:	f012 fcb8 	bl	1dfb8 <net_buf_unref>
    b648:	e785      	b.n	b556 <l2cap_chan_le_recv_seg+0x52>
	l2cap_chan_send_credits(chan, buf, seg);
    b64a:	4629      	mov	r1, r5
    b64c:	4620      	mov	r0, r4
    b64e:	f7ff fde1 	bl	b214 <l2cap_chan_send_credits.isra.0>
    b652:	e7f6      	b.n	b642 <l2cap_chan_le_recv_seg+0x13e>
    b654:	00026644 	.word	0x00026644
    b658:	00026544 	.word	0x00026544
    b65c:	00029c43 	.word	0x00029c43
    b660:	00022fbf 	.word	0x00022fbf
    b664:	00029c57 	.word	0x00029c57
    b668:	00029c6b 	.word	0x00029c6b

0000b66c <l2cap_chan_le_recv>:
{
    b66c:	b570      	push	{r4, r5, r6, lr}
	if (!test_and_dec(&chan->rx.credits)) {
    b66e:	f100 0358 	add.w	r3, r0, #88	; 0x58
{
    b672:	4604      	mov	r4, r0
    b674:	460d      	mov	r5, r1
		old_value = atomic_get(target);
    b676:	4618      	mov	r0, r3
    b678:	f017 fcab 	bl	22fd2 <atomic_get>
		if (!old_value) {
    b67c:	2800      	cmp	r0, #0
    b67e:	d05b      	beq.n	b738 <l2cap_chan_le_recv+0xcc>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b680:	f3bf 8f5b 	dmb	ish
		new_value = old_value - 1;
    b684:	1e42      	subs	r2, r0, #1
    b686:	e853 1f00 	ldrex	r1, [r3]
    b68a:	4281      	cmp	r1, r0
    b68c:	d103      	bne.n	b696 <l2cap_chan_le_recv+0x2a>
    b68e:	e843 2600 	strex	r6, r2, [r3]
    b692:	2e00      	cmp	r6, #0
    b694:	d1f7      	bne.n	b686 <l2cap_chan_le_recv+0x1a>
    b696:	f3bf 8f5b 	dmb	ish
	} while (atomic_cas(target, old_value, new_value) == 0);
    b69a:	d1ec      	bne.n	b676 <l2cap_chan_le_recv+0xa>
	if (chan->_sdu) {
    b69c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    b6a0:	bb33      	cbnz	r3, b6f0 <l2cap_chan_le_recv+0x84>
	sdu_len = net_buf_pull_le16(buf);
    b6a2:	f105 0008 	add.w	r0, r5, #8
    b6a6:	f019 feee 	bl	25486 <net_buf_simple_pull_le16>
	if (sdu_len > chan->rx.mtu) {
    b6aa:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    b6ae:	4283      	cmp	r3, r0
	sdu_len = net_buf_pull_le16(buf);
    b6b0:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    b6b2:	d20a      	bcs.n	b6ca <l2cap_chan_le_recv+0x5e>
    b6b4:	4925      	ldr	r1, [pc, #148]	; (b74c <l2cap_chan_le_recv+0xe0>)
    b6b6:	4b26      	ldr	r3, [pc, #152]	; (b750 <l2cap_chan_le_recv+0xe4>)
		BT_ERR("Invalid SDU length");
    b6b8:	4826      	ldr	r0, [pc, #152]	; (b754 <l2cap_chan_le_recv+0xe8>)
    b6ba:	1ac9      	subs	r1, r1, r3
    b6bc:	08c9      	lsrs	r1, r1, #3
    b6be:	0189      	lsls	r1, r1, #6
    b6c0:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("No credits to receive packet");
    b6c4:	f015 fa7c 	bl	20bc0 <log_0>
    b6c8:	e02b      	b.n	b722 <l2cap_chan_le_recv+0xb6>
	if (chan->chan.ops->alloc_buf) {
    b6ca:	6863      	ldr	r3, [r4, #4]
    b6cc:	68da      	ldr	r2, [r3, #12]
    b6ce:	b1aa      	cbz	r2, b6fc <l2cap_chan_le_recv+0x90>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    b6d0:	4620      	mov	r0, r4
    b6d2:	4790      	blx	r2
    b6d4:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
		if (!chan->_sdu) {
    b6d8:	b940      	cbnz	r0, b6ec <l2cap_chan_le_recv+0x80>
    b6da:	491c      	ldr	r1, [pc, #112]	; (b74c <l2cap_chan_le_recv+0xe0>)
    b6dc:	4b1c      	ldr	r3, [pc, #112]	; (b750 <l2cap_chan_le_recv+0xe4>)
			BT_ERR("Unable to allocate buffer for SDU");
    b6de:	481e      	ldr	r0, [pc, #120]	; (b758 <l2cap_chan_le_recv+0xec>)
    b6e0:	1ac9      	subs	r1, r1, r3
    b6e2:	08c9      	lsrs	r1, r1, #3
    b6e4:	0189      	lsls	r1, r1, #6
    b6e6:	f041 0101 	orr.w	r1, r1, #1
    b6ea:	e7eb      	b.n	b6c4 <l2cap_chan_le_recv+0x58>
		chan->_sdu_len = sdu_len;
    b6ec:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
		l2cap_chan_le_recv_seg(chan, buf);
    b6f0:	4629      	mov	r1, r5
    b6f2:	4620      	mov	r0, r4
}
    b6f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		l2cap_chan_le_recv_seg(chan, buf);
    b6f8:	f7ff bf04 	b.w	b504 <l2cap_chan_le_recv_seg>
	err = chan->chan.ops->recv(&chan->chan, buf);
    b6fc:	4629      	mov	r1, r5
    b6fe:	691b      	ldr	r3, [r3, #16]
    b700:	4620      	mov	r0, r4
    b702:	4798      	blx	r3
	if (err) {
    b704:	4601      	mov	r1, r0
    b706:	b188      	cbz	r0, b72c <l2cap_chan_le_recv+0xc0>
		if (err != -EINPROGRESS) {
    b708:	f110 0f44 	cmn.w	r0, #68	; 0x44
    b70c:	d01d      	beq.n	b74a <l2cap_chan_le_recv+0xde>
    b70e:	4a0f      	ldr	r2, [pc, #60]	; (b74c <l2cap_chan_le_recv+0xe0>)
    b710:	4b0f      	ldr	r3, [pc, #60]	; (b750 <l2cap_chan_le_recv+0xe4>)
			BT_ERR("err %d", err);
    b712:	4812      	ldr	r0, [pc, #72]	; (b75c <l2cap_chan_le_recv+0xf0>)
    b714:	1ad2      	subs	r2, r2, r3
    b716:	08d2      	lsrs	r2, r2, #3
    b718:	0192      	lsls	r2, r2, #6
    b71a:	f042 0201 	orr.w	r2, r2, #1
    b71e:	f015 fa5c 	bl	20bda <log_1>
		bt_l2cap_chan_disconnect(&chan->chan);
    b722:	4620      	mov	r0, r4
}
    b724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_l2cap_chan_disconnect(&chan->chan);
    b728:	f017 bf26 	b.w	23578 <bt_l2cap_chan_disconnect>
	l2cap_chan_send_credits(chan, buf, 1);
    b72c:	4620      	mov	r0, r4
    b72e:	2101      	movs	r1, #1
}
    b730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	l2cap_chan_send_credits(chan, buf, 1);
    b734:	f7ff bd6e 	b.w	b214 <l2cap_chan_send_credits.isra.0>
    b738:	4904      	ldr	r1, [pc, #16]	; (b74c <l2cap_chan_le_recv+0xe0>)
    b73a:	4b05      	ldr	r3, [pc, #20]	; (b750 <l2cap_chan_le_recv+0xe4>)
		BT_ERR("No credits to receive packet");
    b73c:	4808      	ldr	r0, [pc, #32]	; (b760 <l2cap_chan_le_recv+0xf4>)
    b73e:	1ac9      	subs	r1, r1, r3
    b740:	08c9      	lsrs	r1, r1, #3
    b742:	0189      	lsls	r1, r1, #6
    b744:	f041 0101 	orr.w	r1, r1, #1
    b748:	e7bc      	b.n	b6c4 <l2cap_chan_le_recv+0x58>
}
    b74a:	bd70      	pop	{r4, r5, r6, pc}
    b74c:	00026644 	.word	0x00026644
    b750:	00026544 	.word	0x00026544
    b754:	00029c72 	.word	0x00029c72
    b758:	00029c85 	.word	0x00029c85
    b75c:	00029c6b 	.word	0x00029c6b
    b760:	00029ca7 	.word	0x00029ca7

0000b764 <bt_l2cap_recv>:
{
    b764:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    b766:	898b      	ldrh	r3, [r1, #12]
    b768:	2b03      	cmp	r3, #3
{
    b76a:	4605      	mov	r5, r0
    b76c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    b76e:	d80a      	bhi.n	b786 <bt_l2cap_recv+0x22>
    b770:	492e      	ldr	r1, [pc, #184]	; (b82c <bt_l2cap_recv+0xc8>)
    b772:	4b2f      	ldr	r3, [pc, #188]	; (b830 <bt_l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP PDU received");
    b774:	482f      	ldr	r0, [pc, #188]	; (b834 <bt_l2cap_recv+0xd0>)
    b776:	1ac9      	subs	r1, r1, r3
    b778:	08c9      	lsrs	r1, r1, #3
    b77a:	0189      	lsls	r1, r1, #6
    b77c:	f041 0101 	orr.w	r1, r1, #1
		BT_WARN("Ignoring data received while channel has shutdown");
    b780:	f015 fa1e 	bl	20bc0 <log_0>
		net_buf_unref(buf);
    b784:	e014      	b.n	b7b0 <bt_l2cap_recv+0x4c>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b786:	2104      	movs	r1, #4
    b788:	f104 0008 	add.w	r0, r4, #8
    b78c:	f019 fe6b 	bl	25466 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    b790:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    b792:	4628      	mov	r0, r5
    b794:	f017 febe 	bl	23514 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b798:	4605      	mov	r5, r0
    b79a:	b970      	cbnz	r0, b7ba <bt_l2cap_recv+0x56>
    b79c:	4a23      	ldr	r2, [pc, #140]	; (b82c <bt_l2cap_recv+0xc8>)
    b79e:	4b24      	ldr	r3, [pc, #144]	; (b830 <bt_l2cap_recv+0xcc>)
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    b7a0:	4825      	ldr	r0, [pc, #148]	; (b838 <bt_l2cap_recv+0xd4>)
    b7a2:	1ad2      	subs	r2, r2, r3
    b7a4:	08d2      	lsrs	r2, r2, #3
    b7a6:	0192      	lsls	r2, r2, #6
    b7a8:	f042 0202 	orr.w	r2, r2, #2
    b7ac:	f015 fa15 	bl	20bda <log_1>
	net_buf_unref(buf);
    b7b0:	4620      	mov	r0, r4
}
    b7b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    b7b6:	f012 bbff 	b.w	1dfb8 <net_buf_unref>
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    b7ba:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
    b7be:	3b40      	subs	r3, #64	; 0x40
    b7c0:	2b3f      	cmp	r3, #63	; 0x3f
    b7c2:	d82e      	bhi.n	b822 <bt_l2cap_recv+0xbe>
	if (chan->chan.state == BT_L2CAP_DISCONNECT) {
    b7c4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    b7c8:	2b04      	cmp	r3, #4
    b7ca:	d108      	bne.n	b7de <bt_l2cap_recv+0x7a>
    b7cc:	4917      	ldr	r1, [pc, #92]	; (b82c <bt_l2cap_recv+0xc8>)
    b7ce:	4b18      	ldr	r3, [pc, #96]	; (b830 <bt_l2cap_recv+0xcc>)
		BT_WARN("Ignoring data received while disconnecting");
    b7d0:	481a      	ldr	r0, [pc, #104]	; (b83c <bt_l2cap_recv+0xd8>)
    b7d2:	1ac9      	subs	r1, r1, r3
    b7d4:	08c9      	lsrs	r1, r1, #3
    b7d6:	0189      	lsls	r1, r1, #6
    b7d8:	f041 0102 	orr.w	r1, r1, #2
    b7dc:	e7d0      	b.n	b780 <bt_l2cap_recv+0x1c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b7de:	3040      	adds	r0, #64	; 0x40
    b7e0:	f017 fbf7 	bl	22fd2 <atomic_get>
	if (atomic_test_bit(chan->chan.status, BT_L2CAP_STATUS_SHUTDOWN)) {
    b7e4:	0783      	lsls	r3, r0, #30
    b7e6:	d508      	bpl.n	b7fa <bt_l2cap_recv+0x96>
    b7e8:	4910      	ldr	r1, [pc, #64]	; (b82c <bt_l2cap_recv+0xc8>)
    b7ea:	4b11      	ldr	r3, [pc, #68]	; (b830 <bt_l2cap_recv+0xcc>)
		BT_WARN("Ignoring data received while channel has shutdown");
    b7ec:	4814      	ldr	r0, [pc, #80]	; (b840 <bt_l2cap_recv+0xdc>)
    b7ee:	1ac9      	subs	r1, r1, r3
    b7f0:	08c9      	lsrs	r1, r1, #3
    b7f2:	0189      	lsls	r1, r1, #6
    b7f4:	f041 0102 	orr.w	r1, r1, #2
    b7f8:	e7c2      	b.n	b780 <bt_l2cap_recv+0x1c>
	if (!L2CAP_LE_PSM_IS_DYN(chan->chan.psm)) {
    b7fa:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
    b7fe:	3b80      	subs	r3, #128	; 0x80
    b800:	2b7f      	cmp	r3, #127	; 0x7f
		l2cap_chan_le_recv(chan, buf);
    b802:	4621      	mov	r1, r4
	if (!L2CAP_LE_PSM_IS_DYN(chan->chan.psm)) {
    b804:	d903      	bls.n	b80e <bt_l2cap_recv+0xaa>
		l2cap_chan_le_recv(chan, buf);
    b806:	4628      	mov	r0, r5
    b808:	f7ff ff30 	bl	b66c <l2cap_chan_le_recv>
		net_buf_unref(buf);
    b80c:	e7d0      	b.n	b7b0 <bt_l2cap_recv+0x4c>
	net_buf_put(&chan->rx_queue, buf);
    b80e:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
    b812:	f019 fdac 	bl	2536e <net_buf_put>
	k_work_submit_to_queue(&k_sys_work_q, work);
    b816:	f105 0098 	add.w	r0, r5, #152	; 0x98
}
    b81a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b81e:	f7ff bbbd 	b.w	af9c <k_work_submit_to_queue.constprop.0>
	chan->ops->recv(chan, buf);
    b822:	6843      	ldr	r3, [r0, #4]
    b824:	4621      	mov	r1, r4
    b826:	691b      	ldr	r3, [r3, #16]
    b828:	4798      	blx	r3
    b82a:	e7c1      	b.n	b7b0 <bt_l2cap_recv+0x4c>
    b82c:	00026644 	.word	0x00026644
    b830:	00026544 	.word	0x00026544
    b834:	00029cc4 	.word	0x00029cc4
    b838:	00029ce1 	.word	0x00029ce1
    b83c:	00029d06 	.word	0x00029d06
    b840:	00029d31 	.word	0x00029d31

0000b844 <l2cap_recv>:
{
    b844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    b848:	898b      	ldrh	r3, [r1, #12]
    b84a:	2b03      	cmp	r3, #3
{
    b84c:	b091      	sub	sp, #68	; 0x44
    b84e:	4606      	mov	r6, r0
    b850:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    b852:	d80a      	bhi.n	b86a <l2cap_recv+0x26>
    b854:	49b3      	ldr	r1, [pc, #716]	; (bb24 <l2cap_recv+0x2e0>)
    b856:	4bb4      	ldr	r3, [pc, #720]	; (bb28 <l2cap_recv+0x2e4>)
		BT_ERR("Too small L2CAP signaling PDU");
    b858:	48b4      	ldr	r0, [pc, #720]	; (bb2c <l2cap_recv+0x2e8>)
    b85a:	1ac9      	subs	r1, r1, r3
    b85c:	08c9      	lsrs	r1, r1, #3
    b85e:	0189      	lsls	r1, r1, #6
    b860:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Too small ecred reconf req packet size");
    b864:	f015 f9ac 	bl	20bc0 <log_0>
		return;
    b868:	e014      	b.n	b894 <l2cap_recv+0x50>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b86a:	f101 0908 	add.w	r9, r1, #8
    b86e:	4648      	mov	r0, r9
    b870:	2104      	movs	r1, #4
    b872:	f019 fdf8 	bl	25466 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    b876:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    b878:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    b87a:	428a      	cmp	r2, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b87c:	4607      	mov	r7, r0
	if (buf->len != len) {
    b87e:	d00d      	beq.n	b89c <l2cap_recv+0x58>
    b880:	48a9      	ldr	r0, [pc, #676]	; (bb28 <l2cap_recv+0x2e4>)
    b882:	4ba8      	ldr	r3, [pc, #672]	; (bb24 <l2cap_recv+0x2e0>)
    b884:	1a1b      	subs	r3, r3, r0
    b886:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    b888:	019b      	lsls	r3, r3, #6
    b88a:	48a9      	ldr	r0, [pc, #676]	; (bb30 <l2cap_recv+0x2ec>)
    b88c:	f043 0301 	orr.w	r3, r3, #1
    b890:	f015 f9b7 	bl	20c02 <log_2>
}
    b894:	2000      	movs	r0, #0
    b896:	b011      	add	sp, #68	; 0x44
    b898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!hdr->ident) {
    b89c:	7844      	ldrb	r4, [r0, #1]
    b89e:	b944      	cbnz	r4, b8b2 <l2cap_recv+0x6e>
    b8a0:	49a0      	ldr	r1, [pc, #640]	; (bb24 <l2cap_recv+0x2e0>)
    b8a2:	4ba1      	ldr	r3, [pc, #644]	; (bb28 <l2cap_recv+0x2e4>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    b8a4:	48a3      	ldr	r0, [pc, #652]	; (bb34 <l2cap_recv+0x2f0>)
    b8a6:	1ac9      	subs	r1, r1, r3
    b8a8:	08c9      	lsrs	r1, r1, #3
    b8aa:	0189      	lsls	r1, r1, #6
    b8ac:	f041 0101 	orr.w	r1, r1, #1
    b8b0:	e7d8      	b.n	b864 <l2cap_recv+0x20>
	switch (hdr->code) {
    b8b2:	7803      	ldrb	r3, [r0, #0]
    b8b4:	1e5a      	subs	r2, r3, #1
    b8b6:	2a18      	cmp	r2, #24
    b8b8:	f200 8383 	bhi.w	bfc2 <l2cap_recv+0x77e>
    b8bc:	e8df f012 	tbh	[pc, r2, lsl #1]
    b8c0:	03810188 	.word	0x03810188
    b8c4:	03810381 	.word	0x03810381
    b8c8:	00ec0381 	.word	0x00ec0381
    b8cc:	03810127 	.word	0x03810127
    b8d0:	03810381 	.word	0x03810381
    b8d4:	03810381 	.word	0x03810381
    b8d8:	03810381 	.word	0x03810381
    b8dc:	03810381 	.word	0x03810381
    b8e0:	03310381 	.word	0x03310381
    b8e4:	00240019 	.word	0x00240019
    b8e8:	01500089 	.word	0x01500089
    b8ec:	0242018e 	.word	0x0242018e
    b8f0:	02e0      	.short	0x02e0
	if (buf->len < sizeof(*rsp)) {
    b8f2:	2901      	cmp	r1, #1
    b8f4:	d8ce      	bhi.n	b894 <l2cap_recv+0x50>
    b8f6:	498b      	ldr	r1, [pc, #556]	; (bb24 <l2cap_recv+0x2e0>)
    b8f8:	4b8b      	ldr	r3, [pc, #556]	; (bb28 <l2cap_recv+0x2e4>)
		BT_ERR("Too small LE conn param rsp");
    b8fa:	488f      	ldr	r0, [pc, #572]	; (bb38 <l2cap_recv+0x2f4>)
    b8fc:	1ac9      	subs	r1, r1, r3
    b8fe:	08c9      	lsrs	r1, r1, #3
    b900:	0189      	lsls	r1, r1, #6
    b902:	f041 0101 	orr.w	r1, r1, #1
    b906:	e7ad      	b.n	b864 <l2cap_recv+0x20>
	if (buf->len < sizeof(*req)) {
    b908:	2909      	cmp	r1, #9
    b90a:	d808      	bhi.n	b91e <l2cap_recv+0xda>
    b90c:	4985      	ldr	r1, [pc, #532]	; (bb24 <l2cap_recv+0x2e0>)
    b90e:	4b86      	ldr	r3, [pc, #536]	; (bb28 <l2cap_recv+0x2e4>)
		BT_ERR("Too small LE conn req packet size");
    b910:	488a      	ldr	r0, [pc, #552]	; (bb3c <l2cap_recv+0x2f8>)
    b912:	1ac9      	subs	r1, r1, r3
    b914:	08c9      	lsrs	r1, r1, #3
    b916:	0189      	lsls	r1, r1, #6
    b918:	f041 0101 	orr.w	r1, r1, #1
    b91c:	e7a2      	b.n	b864 <l2cap_recv+0x20>
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    b91e:	68ab      	ldr	r3, [r5, #8]
	mtu = sys_le16_to_cpu(req->mtu);
    b920:	f8b3 b004 	ldrh.w	fp, [r3, #4]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    b924:	f1bb 0f16 	cmp.w	fp, #22
    b928:	d902      	bls.n	b930 <l2cap_recv+0xec>
	mps = sys_le16_to_cpu(req->mps);
    b92a:	88df      	ldrh	r7, [r3, #6]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    b92c:	2f16      	cmp	r7, #22
    b92e:	d808      	bhi.n	b942 <l2cap_recv+0xfe>
    b930:	497c      	ldr	r1, [pc, #496]	; (bb24 <l2cap_recv+0x2e0>)
    b932:	4b7d      	ldr	r3, [pc, #500]	; (bb28 <l2cap_recv+0x2e4>)
		BT_ERR("Invalid LE-Conn Req params");
    b934:	4882      	ldr	r0, [pc, #520]	; (bb40 <l2cap_recv+0x2fc>)
    b936:	1ac9      	subs	r1, r1, r3
    b938:	08c9      	lsrs	r1, r1, #3
    b93a:	0189      	lsls	r1, r1, #6
    b93c:	f041 0101 	orr.w	r1, r1, #1
    b940:	e790      	b.n	b864 <l2cap_recv+0x20>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    b942:	220a      	movs	r2, #10
    b944:	4621      	mov	r1, r4
    b946:	2015      	movs	r0, #21
		le_conn_req(l2cap, hdr->ident, buf);
    b948:	6836      	ldr	r6, [r6, #0]
	psm = sys_le16_to_cpu(req->psm);
    b94a:	f8b3 a000 	ldrh.w	sl, [r3]
	scid = sys_le16_to_cpu(req->scid);
    b94e:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	credits = sys_le16_to_cpu(req->credits);
    b952:	f8b3 9008 	ldrh.w	r9, [r3, #8]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    b956:	f7ff fad1 	bl	aefc <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    b95a:	4605      	mov	r5, r0
    b95c:	2800      	cmp	r0, #0
    b95e:	d099      	beq.n	b894 <l2cap_recv+0x50>
	rsp = net_buf_add(buf, sizeof(*rsp));
    b960:	210a      	movs	r1, #10
    b962:	3008      	adds	r0, #8
    b964:	f019 fd42 	bl	253ec <net_buf_simple_add>
	(void)memset(rsp, 0, sizeof(*rsp));
    b968:	2100      	movs	r1, #0
    b96a:	220a      	movs	r2, #10
	rsp = net_buf_add(buf, sizeof(*rsp));
    b96c:	4604      	mov	r4, r0
	(void)memset(rsp, 0, sizeof(*rsp));
    b96e:	f016 ff02 	bl	22776 <memset>
	server = l2cap_server_lookup_psm(psm);
    b972:	4650      	mov	r0, sl
    b974:	f7ff fa84 	bl	ae80 <l2cap_server_lookup_psm>
	if (!server) {
    b978:	4601      	mov	r1, r0
    b97a:	b928      	cbnz	r0, b988 <l2cap_recv+0x144>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_PSM_NOT_SUPP);
    b97c:	2302      	movs	r3, #2
    b97e:	7223      	strb	r3, [r4, #8]
    b980:	7260      	strb	r0, [r4, #9]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    b982:	4629      	mov	r1, r5
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    b984:	4630      	mov	r0, r6
    b986:	e0bf      	b.n	bb08 <l2cap_recv+0x2c4>
	if (conn->sec_level < server->sec_level) {
    b988:	7a72      	ldrb	r2, [r6, #9]
    b98a:	7883      	ldrb	r3, [r0, #2]
    b98c:	429a      	cmp	r2, r3
    b98e:	d204      	bcs.n	b99a <l2cap_recv+0x156>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_AUTHENTICATION);
    b990:	2305      	movs	r3, #5
    b992:	7223      	strb	r3, [r4, #8]
    b994:	2300      	movs	r3, #0
    b996:	7263      	strb	r3, [r4, #9]
		goto rsp;
    b998:	e7f3      	b.n	b982 <l2cap_recv+0x13e>
	result = l2cap_chan_accept(conn, server, scid, mtu, mps, credits,
    b99a:	ab0b      	add	r3, sp, #44	; 0x2c
    b99c:	e9cd 9301 	strd	r9, r3, [sp, #4]
    b9a0:	9700      	str	r7, [sp, #0]
    b9a2:	465b      	mov	r3, fp
    b9a4:	4642      	mov	r2, r8
    b9a6:	4630      	mov	r0, r6
    b9a8:	f7ff fd3e 	bl	b428 <l2cap_chan_accept>
	if (result != BT_L2CAP_LE_SUCCESS) {
    b9ac:	b108      	cbz	r0, b9b2 <l2cap_recv+0x16e>
		rsp->result = sys_cpu_to_le16(result);
    b9ae:	8120      	strh	r0, [r4, #8]
		goto rsp;
    b9b0:	e7e7      	b.n	b982 <l2cap_recv+0x13e>
	ch = BT_L2CAP_LE_CHAN(chan);
    b9b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    b9b4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
    b9b8:	8022      	strh	r2, [r4, #0]
	rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    b9ba:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
    b9be:	80a2      	strh	r2, [r4, #4]
	rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    b9c0:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
	rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    b9c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
	rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    b9c8:	8062      	strh	r2, [r4, #2]
	rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    b9ca:	80e3      	strh	r3, [r4, #6]
	rsp->result = BT_L2CAP_LE_SUCCESS;
    b9cc:	7220      	strb	r0, [r4, #8]
    b9ce:	7260      	strb	r0, [r4, #9]
    b9d0:	e7d7      	b.n	b982 <l2cap_recv+0x13e>
	if (buf->len < sizeof(*rsp)) {
    b9d2:	2909      	cmp	r1, #9
    b9d4:	d808      	bhi.n	b9e8 <l2cap_recv+0x1a4>
    b9d6:	4953      	ldr	r1, [pc, #332]	; (bb24 <l2cap_recv+0x2e0>)
    b9d8:	4b53      	ldr	r3, [pc, #332]	; (bb28 <l2cap_recv+0x2e4>)
		BT_ERR("Too small LE conn rsp packet size");
    b9da:	485a      	ldr	r0, [pc, #360]	; (bb44 <l2cap_recv+0x300>)
    b9dc:	1ac9      	subs	r1, r1, r3
    b9de:	08c9      	lsrs	r1, r1, #3
    b9e0:	0189      	lsls	r1, r1, #6
    b9e2:	f041 0101 	orr.w	r1, r1, #1
    b9e6:	e73d      	b.n	b864 <l2cap_recv+0x20>
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    b9e8:	68ab      	ldr	r3, [r5, #8]
		le_conn_rsp(l2cap, hdr->ident, buf);
    b9ea:	6837      	ldr	r7, [r6, #0]
	result = sys_le16_to_cpu(rsp->result);
    b9ec:	891e      	ldrh	r6, [r3, #8]
	dcid = sys_le16_to_cpu(rsp->dcid);
    b9ee:	f8b3 b000 	ldrh.w	fp, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    b9f2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    b9f6:	f8b3 9004 	ldrh.w	r9, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    b9fa:	f8b3 8006 	ldrh.w	r8, [r3, #6]
	if (result == BT_L2CAP_LE_SUCCESS ||
    b9fe:	f026 0308 	bic.w	r3, r6, #8
    ba02:	b2a1      	uxth	r1, r4
    ba04:	b10b      	cbz	r3, ba0a <l2cap_recv+0x1c6>
    ba06:	2e05      	cmp	r6, #5
    ba08:	d111      	bne.n	ba2e <l2cap_recv+0x1ea>
		chan = l2cap_lookup_ident(conn, ident);
    ba0a:	2200      	movs	r2, #0
		chan = l2cap_remove_ident(conn, ident);
    ba0c:	4638      	mov	r0, r7
    ba0e:	f017 fa98 	bl	22f42 <__l2cap_lookup_ident>
    ba12:	4605      	mov	r5, r0
	if (!chan) {
    ba14:	b968      	cbnz	r0, ba32 <l2cap_recv+0x1ee>
    ba16:	4b44      	ldr	r3, [pc, #272]	; (bb28 <l2cap_recv+0x2e4>)
    ba18:	4a42      	ldr	r2, [pc, #264]	; (bb24 <l2cap_recv+0x2e0>)
		BT_ERR("Cannot find channel for ident %u", ident);
    ba1a:	484b      	ldr	r0, [pc, #300]	; (bb48 <l2cap_recv+0x304>)
    ba1c:	1ad2      	subs	r2, r2, r3
    ba1e:	08d2      	lsrs	r2, r2, #3
    ba20:	0192      	lsls	r2, r2, #6
    ba22:	f042 0201 	orr.w	r2, r2, #1
    ba26:	4621      	mov	r1, r4
    ba28:	f015 f8d7 	bl	20bda <log_1>
		return;
    ba2c:	e732      	b.n	b894 <l2cap_recv+0x50>
		chan = l2cap_remove_ident(conn, ident);
    ba2e:	2201      	movs	r2, #1
    ba30:	e7ec      	b.n	ba0c <l2cap_recv+0x1c8>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    ba32:	3010      	adds	r0, #16
    ba34:	f01a fa92 	bl	25f5c <k_delayed_work_cancel>
	chan->chan.ident = 0U;
    ba38:	2300      	movs	r3, #0
	switch (result) {
    ba3a:	2e05      	cmp	r6, #5
	chan->chan.ident = 0U;
    ba3c:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	switch (result) {
    ba40:	d01b      	beq.n	ba7a <l2cap_recv+0x236>
    ba42:	2e08      	cmp	r6, #8
    ba44:	d019      	beq.n	ba7a <l2cap_recv+0x236>
    ba46:	bb1e      	cbnz	r6, ba90 <l2cap_recv+0x24c>
	chan->state = state;
    ba48:	2303      	movs	r3, #3
    ba4a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		if (chan->chan.ops->connected) {
    ba4e:	686b      	ldr	r3, [r5, #4]
		chan->tx.cid = dcid;
    ba50:	f8a5 b05c 	strh.w	fp, [r5, #92]	; 0x5c
		if (chan->chan.ops->connected) {
    ba54:	681b      	ldr	r3, [r3, #0]
		chan->tx.mtu = mtu;
    ba56:	f8a5 a05e 	strh.w	sl, [r5, #94]	; 0x5e
		chan->tx.mps = mps;
    ba5a:	f8a5 9060 	strh.w	r9, [r5, #96]	; 0x60
		if (chan->chan.ops->connected) {
    ba5e:	b10b      	cbz	r3, ba64 <l2cap_recv+0x220>
			chan->chan.ops->connected(&chan->chan);
    ba60:	4628      	mov	r0, r5
    ba62:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    ba64:	4641      	mov	r1, r8
    ba66:	4628      	mov	r0, r5
    ba68:	f017 fb20 	bl	230ac <l2cap_chan_tx_give_credits>
	atomic_add(&chan->rx.credits, credits);
    ba6c:	f8b5 1056 	ldrh.w	r1, [r5, #86]	; 0x56
    ba70:	f105 0058 	add.w	r0, r5, #88	; 0x58
    ba74:	f017 fab3 	bl	22fde <atomic_add>
}
    ba78:	e70c      	b.n	b894 <l2cap_recv+0x50>
		if (l2cap_change_security(chan, result) == 0) {
    ba7a:	4631      	mov	r1, r6
    ba7c:	4628      	mov	r0, r5
    ba7e:	f017 fb32 	bl	230e6 <l2cap_change_security>
    ba82:	2800      	cmp	r0, #0
    ba84:	f43f af06 	beq.w	b894 <l2cap_recv+0x50>
		bt_l2cap_chan_remove(conn, &chan->chan);
    ba88:	4629      	mov	r1, r5
    ba8a:	4638      	mov	r0, r7
    ba8c:	f017 fb8a 	bl	231a4 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(&chan->chan);
    ba90:	4628      	mov	r0, r5
	bt_l2cap_chan_del(&chan->chan);
    ba92:	f017 fba0 	bl	231d6 <bt_l2cap_chan_del>
    ba96:	e6fd      	b.n	b894 <l2cap_recv+0x50>
	if (buf->len < sizeof(*req)) {
    ba98:	2903      	cmp	r1, #3
    ba9a:	f67f af37 	bls.w	b90c <l2cap_recv+0xc8>
		le_disconn_req(l2cap, hdr->ident, buf);
    ba9e:	6837      	ldr	r7, [r6, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    baa0:	68ae      	ldr	r6, [r5, #8]
	chan = l2cap_remove_rx_cid(conn, dcid);
    baa2:	4638      	mov	r0, r7
    baa4:	8831      	ldrh	r1, [r6, #0]
    baa6:	f017 fa69 	bl	22f7c <l2cap_remove_rx_cid>
	if (!chan) {
    baaa:	4605      	mov	r5, r0
    baac:	b9a0      	cbnz	r0, bad8 <l2cap_recv+0x294>
		data.scid = req->scid;
    baae:	78f2      	ldrb	r2, [r6, #3]
    bab0:	78b3      	ldrb	r3, [r6, #2]
    bab2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bab6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
		data.dcid = req->dcid;
    baba:	7872      	ldrb	r2, [r6, #1]
    babc:	7833      	ldrb	r3, [r6, #0]
    babe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bac2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    bac6:	2304      	movs	r3, #4
    bac8:	9300      	str	r3, [sp, #0]
    baca:	2202      	movs	r2, #2
    bacc:	ab0b      	add	r3, sp, #44	; 0x2c
    bace:	4621      	mov	r1, r4
    bad0:	4638      	mov	r0, r7
		l2cap_send_reject(chan->conn, hdr->ident,
    bad2:	f017 fc39 	bl	23348 <l2cap_send_reject>
		break;
    bad6:	e6dd      	b.n	b894 <l2cap_recv+0x50>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    bad8:	4621      	mov	r1, r4
    bada:	2204      	movs	r2, #4
    badc:	2007      	movs	r0, #7
    bade:	f7ff fa0d 	bl	aefc <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    bae2:	4604      	mov	r4, r0
    bae4:	2800      	cmp	r0, #0
    bae6:	f43f aed5 	beq.w	b894 <l2cap_recv+0x50>
	rsp = net_buf_add(buf, sizeof(*rsp));
    baea:	2104      	movs	r1, #4
    baec:	3008      	adds	r0, #8
    baee:	f019 fc7d 	bl	253ec <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    baf2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
    baf6:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    baf8:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
    bafc:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    bafe:	4628      	mov	r0, r5
    bb00:	f017 fb69 	bl	231d6 <bt_l2cap_chan_del>
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    bb04:	4621      	mov	r1, r4
    bb06:	4638      	mov	r0, r7
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    bb08:	f017 fc14 	bl	23334 <bt_l2cap_send.constprop.0>
    bb0c:	e6c2      	b.n	b894 <l2cap_recv+0x50>
	if (buf->len < sizeof(*rsp)) {
    bb0e:	2903      	cmp	r1, #3
    bb10:	d81e      	bhi.n	bb50 <l2cap_recv+0x30c>
    bb12:	4904      	ldr	r1, [pc, #16]	; (bb24 <l2cap_recv+0x2e0>)
    bb14:	4b04      	ldr	r3, [pc, #16]	; (bb28 <l2cap_recv+0x2e4>)
		BT_ERR("Too small LE disconn rsp packet size");
    bb16:	480d      	ldr	r0, [pc, #52]	; (bb4c <l2cap_recv+0x308>)
    bb18:	1ac9      	subs	r1, r1, r3
    bb1a:	08c9      	lsrs	r1, r1, #3
    bb1c:	0189      	lsls	r1, r1, #6
    bb1e:	f041 0101 	orr.w	r1, r1, #1
    bb22:	e69f      	b.n	b864 <l2cap_recv+0x20>
    bb24:	00026644 	.word	0x00026644
    bb28:	00026544 	.word	0x00026544
    bb2c:	00029d63 	.word	0x00029d63
    bb30:	00029d81 	.word	0x00029d81
    bb34:	00029da2 	.word	0x00029da2
    bb38:	00029dc3 	.word	0x00029dc3
    bb3c:	00029ddf 	.word	0x00029ddf
    bb40:	00029e01 	.word	0x00029e01
    bb44:	00029e1c 	.word	0x00029e1c
    bb48:	00029e3e 	.word	0x00029e3e
    bb4c:	00029e5f 	.word	0x00029e5f
	scid = sys_le16_to_cpu(rsp->scid);
    bb50:	68ab      	ldr	r3, [r5, #8]
	chan = l2cap_remove_rx_cid(conn, scid);
    bb52:	6830      	ldr	r0, [r6, #0]
    bb54:	8859      	ldrh	r1, [r3, #2]
    bb56:	f017 fa11 	bl	22f7c <l2cap_remove_rx_cid>
	if (!chan) {
    bb5a:	2800      	cmp	r0, #0
    bb5c:	d199      	bne.n	ba92 <l2cap_recv+0x24e>
    bb5e:	e699      	b.n	b894 <l2cap_recv+0x50>
	if (buf->len < sizeof(*ev)) {
    bb60:	2903      	cmp	r1, #3
    bb62:	d808      	bhi.n	bb76 <l2cap_recv+0x332>
    bb64:	49b9      	ldr	r1, [pc, #740]	; (be4c <l2cap_recv+0x608>)
    bb66:	4bba      	ldr	r3, [pc, #744]	; (be50 <l2cap_recv+0x60c>)
		BT_ERR("Too small LE Credits packet size");
    bb68:	48ba      	ldr	r0, [pc, #744]	; (be54 <l2cap_recv+0x610>)
    bb6a:	1ac9      	subs	r1, r1, r3
    bb6c:	08c9      	lsrs	r1, r1, #3
    bb6e:	0189      	lsls	r1, r1, #6
    bb70:	f041 0101 	orr.w	r1, r1, #1
    bb74:	e676      	b.n	b864 <l2cap_recv+0x20>
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    bb76:	68aa      	ldr	r2, [r5, #8]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    bb78:	6830      	ldr	r0, [r6, #0]
    bb7a:	8811      	ldrh	r1, [r2, #0]
    bb7c:	f017 fcba 	bl	234f4 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    bb80:	4604      	mov	r4, r0
    bb82:	b940      	cbnz	r0, bb96 <l2cap_recv+0x352>
    bb84:	49b1      	ldr	r1, [pc, #708]	; (be4c <l2cap_recv+0x608>)
    bb86:	4bb2      	ldr	r3, [pc, #712]	; (be50 <l2cap_recv+0x60c>)
		BT_ERR("Unable to find channel of LE Credits packet");
    bb88:	48b3      	ldr	r0, [pc, #716]	; (be58 <l2cap_recv+0x614>)
    bb8a:	1ac9      	subs	r1, r1, r3
    bb8c:	08c9      	lsrs	r1, r1, #3
    bb8e:	0189      	lsls	r1, r1, #6
    bb90:	f041 0101 	orr.w	r1, r1, #1
    bb94:	e666      	b.n	b864 <l2cap_recv+0x20>
	if (atomic_get(&ch->tx.credits) + credits > UINT16_MAX) {
    bb96:	3064      	adds	r0, #100	; 0x64
	credits = sys_le16_to_cpu(ev->credits);
    bb98:	8851      	ldrh	r1, [r2, #2]
	if (atomic_get(&ch->tx.credits) + credits > UINT16_MAX) {
    bb9a:	f017 fa1a 	bl	22fd2 <atomic_get>
    bb9e:	4408      	add	r0, r1
    bba0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    bba4:	db0d      	blt.n	bbc2 <l2cap_recv+0x37e>
    bba6:	4baa      	ldr	r3, [pc, #680]	; (be50 <l2cap_recv+0x60c>)
    bba8:	49a8      	ldr	r1, [pc, #672]	; (be4c <l2cap_recv+0x608>)
		BT_ERR("Credits overflow");
    bbaa:	48ac      	ldr	r0, [pc, #688]	; (be5c <l2cap_recv+0x618>)
    bbac:	1ac9      	subs	r1, r1, r3
    bbae:	08c9      	lsrs	r1, r1, #3
    bbb0:	0189      	lsls	r1, r1, #6
    bbb2:	f041 0101 	orr.w	r1, r1, #1
    bbb6:	f015 f803 	bl	20bc0 <log_0>
		bt_l2cap_chan_disconnect(chan);
    bbba:	4620      	mov	r0, r4
    bbbc:	f017 fcdc 	bl	23578 <bt_l2cap_chan_disconnect>
		return;
    bbc0:	e668      	b.n	b894 <l2cap_recv+0x50>
	l2cap_chan_tx_give_credits(ch, credits);
    bbc2:	4620      	mov	r0, r4
    bbc4:	f017 fa72 	bl	230ac <l2cap_chan_tx_give_credits>
	l2cap_chan_tx_resume(ch);
    bbc8:	4620      	mov	r0, r4
    bbca:	f017 faca 	bl	23162 <l2cap_chan_tx_resume>
    bbce:	e661      	b.n	b894 <l2cap_recv+0x50>
	chan = l2cap_remove_ident(conn, ident);
    bbd0:	6830      	ldr	r0, [r6, #0]
    bbd2:	2201      	movs	r2, #1
    bbd4:	4621      	mov	r1, r4
    bbd6:	f017 f9b4 	bl	22f42 <__l2cap_lookup_ident>
    bbda:	e7be      	b.n	bb5a <l2cap_recv+0x316>
	if (buf->len < sizeof(*req)) {
    bbdc:	2907      	cmp	r1, #7
		le_ecred_conn_req(l2cap, hdr->ident, buf);
    bbde:	f8d6 a000 	ldr.w	sl, [r6]
	if (buf->len < sizeof(*req)) {
    bbe2:	d811      	bhi.n	bc08 <l2cap_recv+0x3c4>
    bbe4:	4b9a      	ldr	r3, [pc, #616]	; (be50 <l2cap_recv+0x60c>)
    bbe6:	4999      	ldr	r1, [pc, #612]	; (be4c <l2cap_recv+0x608>)
		BT_ERR("Too small LE conn req packet size");
    bbe8:	489d      	ldr	r0, [pc, #628]	; (be60 <l2cap_recv+0x61c>)
    bbea:	1ac9      	subs	r1, r1, r3
    bbec:	08c9      	lsrs	r1, r1, #3
    bbee:	0189      	lsls	r1, r1, #6
    bbf0:	f041 0101 	orr.w	r1, r1, #1
    bbf4:	f014 ffe4 	bl	20bc0 <log_0>
		goto response;
    bbf8:	2600      	movs	r6, #0
		result = BT_L2CAP_LE_ERR_INVALID_PARAMS;
    bbfa:	f04f 0b0c 	mov.w	fp, #12
		i = buf->len / sizeof(scid);
    bbfe:	f8b5 800c 	ldrh.w	r8, [r5, #12]
    bc02:	ea4f 0858 	mov.w	r8, r8, lsr #1
    bc06:	e04b      	b.n	bca0 <l2cap_recv+0x45c>
	req = net_buf_pull_mem(buf, sizeof(*req));
    bc08:	2108      	movs	r1, #8
    bc0a:	4648      	mov	r0, r9
    bc0c:	f019 fc2b 	bl	25466 <net_buf_simple_pull_mem>
	mtu = sys_le16_to_cpu(req->mtu);
    bc10:	8843      	ldrh	r3, [r0, #2]
    bc12:	9304      	str	r3, [sp, #16]
	if (mtu < L2CAP_ECRED_MIN_MTU || mps < L2CAP_ECRED_MIN_MTU) {
    bc14:	2b3f      	cmp	r3, #63	; 0x3f
	req = net_buf_pull_mem(buf, sizeof(*req));
    bc16:	4606      	mov	r6, r0
	if (mtu < L2CAP_ECRED_MIN_MTU || mps < L2CAP_ECRED_MIN_MTU) {
    bc18:	d903      	bls.n	bc22 <l2cap_recv+0x3de>
	mps = sys_le16_to_cpu(req->mps);
    bc1a:	8883      	ldrh	r3, [r0, #4]
    bc1c:	9305      	str	r3, [sp, #20]
	if (mtu < L2CAP_ECRED_MIN_MTU || mps < L2CAP_ECRED_MIN_MTU) {
    bc1e:	2b3f      	cmp	r3, #63	; 0x3f
    bc20:	d80d      	bhi.n	bc3e <l2cap_recv+0x3fa>
    bc22:	4b8b      	ldr	r3, [pc, #556]	; (be50 <l2cap_recv+0x60c>)
    bc24:	4989      	ldr	r1, [pc, #548]	; (be4c <l2cap_recv+0x608>)
		BT_ERR("Invalid ecred conn req params");
    bc26:	488f      	ldr	r0, [pc, #572]	; (be64 <l2cap_recv+0x620>)
    bc28:	1ac9      	subs	r1, r1, r3
    bc2a:	08c9      	lsrs	r1, r1, #3
    bc2c:	0189      	lsls	r1, r1, #6
    bc2e:	f041 0101 	orr.w	r1, r1, #1
    bc32:	f014 ffc5 	bl	20bc0 <log_0>
		goto response;
    bc36:	2600      	movs	r6, #0
		result = BT_L2CAP_LE_ERR_UNACCEPT_PARAMS;
    bc38:	f04f 0b0b 	mov.w	fp, #11
		goto response;
    bc3c:	e7df      	b.n	bbfe <l2cap_recv+0x3ba>
	server = l2cap_server_lookup_psm(psm);
    bc3e:	8800      	ldrh	r0, [r0, #0]
    bc40:	f7ff f91e 	bl	ae80 <l2cap_server_lookup_psm>
	if (!server) {
    bc44:	4601      	mov	r1, r0
    bc46:	2800      	cmp	r0, #0
    bc48:	d068      	beq.n	bd1c <l2cap_recv+0x4d8>
	if (conn->sec_level < server->sec_level) {
    bc4a:	f89a 2009 	ldrb.w	r2, [sl, #9]
    bc4e:	7883      	ldrb	r3, [r0, #2]
    bc50:	429a      	cmp	r2, r3
    bc52:	d367      	bcc.n	bd24 <l2cap_recv+0x4e0>
	credits = sys_le16_to_cpu(req->credits);
    bc54:	88f3      	ldrh	r3, [r6, #6]
    bc56:	9306      	str	r3, [sp, #24]
    bc58:	2700      	movs	r7, #0
	uint16_t psm, mtu, mps, credits, result = BT_L2CAP_LE_ERR_INVALID_SCID;
    bc5a:	f04f 0b09 	mov.w	fp, #9
	struct bt_l2cap_le_chan *ch = NULL;
    bc5e:	463e      	mov	r6, r7
	while (buf->len >= sizeof(scid)) {
    bc60:	89aa      	ldrh	r2, [r5, #12]
    bc62:	2a01      	cmp	r2, #1
    bc64:	46b8      	mov	r8, r7
    bc66:	d919      	bls.n	bc9c <l2cap_recv+0x458>
		scid = net_buf_pull_le16(buf);
    bc68:	4648      	mov	r0, r9
    bc6a:	9107      	str	r1, [sp, #28]
    bc6c:	f019 fc0b 	bl	25486 <net_buf_simple_pull_le16>
		result = l2cap_chan_accept(conn, server, scid, mtu, mps,
    bc70:	ab0b      	add	r3, sp, #44	; 0x2c
    bc72:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    bc76:	9302      	str	r3, [sp, #8]
    bc78:	9b06      	ldr	r3, [sp, #24]
    bc7a:	9301      	str	r3, [sp, #4]
    bc7c:	9b05      	ldr	r3, [sp, #20]
    bc7e:	9907      	ldr	r1, [sp, #28]
    bc80:	9300      	str	r3, [sp, #0]
		scid = net_buf_pull_le16(buf);
    bc82:	4602      	mov	r2, r0
		result = l2cap_chan_accept(conn, server, scid, mtu, mps,
    bc84:	9b04      	ldr	r3, [sp, #16]
    bc86:	4650      	mov	r0, sl
    bc88:	f7ff fbce 	bl	b428 <l2cap_chan_accept>
		switch (result) {
    bc8c:	9907      	ldr	r1, [sp, #28]
    bc8e:	4683      	mov	fp, r0
    bc90:	b3b0      	cbz	r0, bd00 <l2cap_recv+0x4bc>
    bc92:	f1a0 0209 	sub.w	r2, r0, #9
    bc96:	b292      	uxth	r2, r2
    bc98:	2a01      	cmp	r2, #1
    bc9a:	d93b      	bls.n	bd14 <l2cap_recv+0x4d0>
	if (!i) {
    bc9c:	2f00      	cmp	r7, #0
    bc9e:	d0ae      	beq.n	bbfe <l2cap_recv+0x3ba>
				      sizeof(*rsp) + (sizeof(scid) * i));
    bca0:	f108 0204 	add.w	r2, r8, #4
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_ECRED_CONN_RSP, ident,
    bca4:	0052      	lsls	r2, r2, #1
    bca6:	b292      	uxth	r2, r2
    bca8:	4621      	mov	r1, r4
    bcaa:	2018      	movs	r0, #24
    bcac:	f7ff f926 	bl	aefc <l2cap_create_le_sig_pdu.isra.0>
	rsp = net_buf_add(buf, sizeof(*rsp));
    bcb0:	f100 0708 	add.w	r7, r0, #8
    bcb4:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_ECRED_CONN_RSP, ident,
    bcb6:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    bcb8:	4638      	mov	r0, r7
    bcba:	f019 fb97 	bl	253ec <net_buf_simple_add>
	(void)memset(rsp, 0, sizeof(*rsp));
    bcbe:	2208      	movs	r2, #8
    bcc0:	2100      	movs	r1, #0
	rsp = net_buf_add(buf, sizeof(*rsp));
    bcc2:	4604      	mov	r4, r0
	(void)memset(rsp, 0, sizeof(*rsp));
    bcc4:	f016 fd57 	bl	22776 <memset>
	if (result == BT_L2CAP_LE_ERR_UNACCEPT_PARAMS ||
    bcc8:	f1ab 0102 	sub.w	r1, fp, #2
    bccc:	b28a      	uxth	r2, r1
    bcce:	2a09      	cmp	r2, #9
    bcd0:	ea4f 0848 	mov.w	r8, r8, lsl #1
    bcd4:	d82a      	bhi.n	bd2c <l2cap_recv+0x4e8>
    bcd6:	f240 2109 	movw	r1, #521	; 0x209
    bcda:	40d1      	lsrs	r1, r2
    bcdc:	43c9      	mvns	r1, r1
    bcde:	f011 0101 	ands.w	r1, r1, #1
    bce2:	d123      	bne.n	bd2c <l2cap_recv+0x4e8>
		memset(dcid, 0, sizeof(scid) * i);
    bce4:	4642      	mov	r2, r8
    bce6:	a808      	add	r0, sp, #32
    bce8:	f016 fd45 	bl	22776 <memset>
	net_buf_add_mem(buf, dcid, sizeof(scid) * i);
    bcec:	a908      	add	r1, sp, #32
    bcee:	4642      	mov	r2, r8
    bcf0:	4638      	mov	r0, r7
    bcf2:	f019 fb81 	bl	253f8 <net_buf_simple_add_mem>
	rsp->result = sys_cpu_to_le16(result);
    bcf6:	f8a4 b006 	strh.w	fp, [r4, #6]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    bcfa:	4629      	mov	r1, r5
    bcfc:	4650      	mov	r0, sl
    bcfe:	e703      	b.n	bb08 <l2cap_recv+0x2c4>
			ch = BT_L2CAP_LE_CHAN(chan[i]);
    bd00:	ab0b      	add	r3, sp, #44	; 0x2c
    bd02:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
			dcid[i++] = sys_cpu_to_le16(ch->rx.cid);
    bd06:	f8b6 2050 	ldrh.w	r2, [r6, #80]	; 0x50
    bd0a:	ab08      	add	r3, sp, #32
			dcid[i++] = 0x0000;
    bd0c:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
			continue;
    bd10:	3701      	adds	r7, #1
    bd12:	e7a5      	b.n	bc60 <l2cap_recv+0x41c>
			dcid[i++] = 0x0000;
    bd14:	ab08      	add	r3, sp, #32
    bd16:	f04f 0200 	mov.w	r2, #0
    bd1a:	e7f7      	b.n	bd0c <l2cap_recv+0x4c8>
    bd1c:	4606      	mov	r6, r0
		result = BT_L2CAP_LE_ERR_PSM_NOT_SUPP;
    bd1e:	f04f 0b02 	mov.w	fp, #2
    bd22:	e76c      	b.n	bbfe <l2cap_recv+0x3ba>
    bd24:	2600      	movs	r6, #0
		result = BT_L2CAP_LE_ERR_AUTHENTICATION;
    bd26:	f04f 0b05 	mov.w	fp, #5
    bd2a:	e768      	b.n	bbfe <l2cap_recv+0x3ba>
	} else if (ch) {
    bd2c:	2e00      	cmp	r6, #0
    bd2e:	d0dd      	beq.n	bcec <l2cap_recv+0x4a8>
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    bd30:	f8b6 2054 	ldrh.w	r2, [r6, #84]	; 0x54
    bd34:	8062      	strh	r2, [r4, #2]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    bd36:	f8b6 2052 	ldrh.w	r2, [r6, #82]	; 0x52
    bd3a:	8022      	strh	r2, [r4, #0]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    bd3c:	f8b6 2056 	ldrh.w	r2, [r6, #86]	; 0x56
    bd40:	80a2      	strh	r2, [r4, #4]
    bd42:	e7d3      	b.n	bcec <l2cap_recv+0x4a8>
	if (buf->len < sizeof(*rsp)) {
    bd44:	2907      	cmp	r1, #7
    bd46:	d808      	bhi.n	bd5a <l2cap_recv+0x516>
    bd48:	4940      	ldr	r1, [pc, #256]	; (be4c <l2cap_recv+0x608>)
    bd4a:	4b41      	ldr	r3, [pc, #260]	; (be50 <l2cap_recv+0x60c>)
		BT_ERR("Too small ecred conn rsp packet size");
    bd4c:	4846      	ldr	r0, [pc, #280]	; (be68 <l2cap_recv+0x624>)
    bd4e:	1ac9      	subs	r1, r1, r3
    bd50:	08c9      	lsrs	r1, r1, #3
    bd52:	0189      	lsls	r1, r1, #6
    bd54:	f041 0101 	orr.w	r1, r1, #1
    bd58:	e584      	b.n	b864 <l2cap_recv+0x20>
	rsp = net_buf_pull_mem(buf, sizeof(*rsp));
    bd5a:	2108      	movs	r1, #8
    bd5c:	4648      	mov	r0, r9
		le_ecred_conn_rsp(l2cap, hdr->ident, buf);
    bd5e:	6836      	ldr	r6, [r6, #0]
	rsp = net_buf_pull_mem(buf, sizeof(*rsp));
    bd60:	f019 fb81 	bl	25466 <net_buf_simple_pull_mem>
	result = sys_le16_to_cpu(rsp->result);
    bd64:	88c7      	ldrh	r7, [r0, #6]
	switch (result) {
    bd66:	b2a4      	uxth	r4, r4
    bd68:	2f0a      	cmp	r7, #10
    bd6a:	f200 8081 	bhi.w	be70 <l2cap_recv+0x62c>
    bd6e:	e8df f007 	tbb	[pc, r7]
    bd72:	7f06      	.short	0x7f06
    bd74:	39067f7f 	.word	0x39067f7f
    bd78:	06397f7f 	.word	0x06397f7f
    bd7c:	06          	.byte	0x06
    bd7d:	00          	.byte	0x00
	mtu = sys_le16_to_cpu(rsp->mtu);
    bd7e:	8807      	ldrh	r7, [r0, #0]
	mps = sys_le16_to_cpu(rsp->mps);
    bd80:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	credits = sys_le16_to_cpu(rsp->credits);
    bd84:	f8b0 a004 	ldrh.w	sl, [r0, #4]
	chan->state = state;
    bd88:	f04f 0b03 	mov.w	fp, #3
		while ((chan = l2cap_lookup_ident(conn, ident))) {
    bd8c:	2200      	movs	r2, #0
    bd8e:	4621      	mov	r1, r4
    bd90:	4630      	mov	r0, r6
    bd92:	f017 f8d6 	bl	22f42 <__l2cap_lookup_ident>
    bd96:	4605      	mov	r5, r0
    bd98:	2800      	cmp	r0, #0
    bd9a:	f43f ad7b 	beq.w	b894 <l2cap_recv+0x50>
			k_delayed_work_cancel(&chan->chan.rtx_work);
    bd9e:	f105 0010 	add.w	r0, r5, #16
    bda2:	f01a f8db 	bl	25f5c <k_delayed_work_cancel>
			dcid = net_buf_pull_le16(buf);
    bda6:	4648      	mov	r0, r9
    bda8:	f019 fb6d 	bl	25486 <net_buf_simple_pull_le16>
			if (!dcid) {
    bdac:	4601      	mov	r1, r0
    bdae:	bb10      	cbnz	r0, bdf6 <l2cap_recv+0x5b2>
				bt_l2cap_chan_remove(conn, &chan->chan);
    bdb0:	4630      	mov	r0, r6
    bdb2:	4629      	mov	r1, r5
    bdb4:	f017 f9f6 	bl	231a4 <bt_l2cap_chan_remove>
				bt_l2cap_chan_del(&chan->chan);
    bdb8:	4628      	mov	r0, r5
    bdba:	f017 fa0c 	bl	231d6 <bt_l2cap_chan_del>
				continue;
    bdbe:	e7e5      	b.n	bd8c <l2cap_recv+0x548>
			k_delayed_work_cancel(&chan->chan.rtx_work);
    bdc0:	f105 0010 	add.w	r0, r5, #16
    bdc4:	f01a f8ca 	bl	25f5c <k_delayed_work_cancel>
			if (!l2cap_change_security(chan, result)) {
    bdc8:	4639      	mov	r1, r7
    bdca:	4628      	mov	r0, r5
    bdcc:	f017 f98b 	bl	230e6 <l2cap_change_security>
    bdd0:	2800      	cmp	r0, #0
    bdd2:	f43f ad5f 	beq.w	b894 <l2cap_recv+0x50>
			bt_l2cap_chan_remove(conn, &chan->chan);
    bdd6:	4630      	mov	r0, r6
    bdd8:	4629      	mov	r1, r5
    bdda:	f017 f9e3 	bl	231a4 <bt_l2cap_chan_remove>
			bt_l2cap_chan_del(&chan->chan);
    bdde:	4628      	mov	r0, r5
    bde0:	f017 f9f9 	bl	231d6 <bt_l2cap_chan_del>
		while ((chan = l2cap_lookup_ident(conn, ident))) {
    bde4:	2200      	movs	r2, #0
    bde6:	4621      	mov	r1, r4
    bde8:	4630      	mov	r0, r6
    bdea:	f017 f8aa 	bl	22f42 <__l2cap_lookup_ident>
    bdee:	4605      	mov	r5, r0
    bdf0:	2800      	cmp	r0, #0
    bdf2:	d1e5      	bne.n	bdc0 <l2cap_recv+0x57c>
    bdf4:	e54e      	b.n	b894 <l2cap_recv+0x50>
			c = bt_l2cap_le_lookup_tx_cid(conn, dcid);
    bdf6:	4630      	mov	r0, r6
    bdf8:	f017 fb7c 	bl	234f4 <bt_l2cap_le_lookup_tx_cid>
			if (c) {
    bdfc:	b160      	cbz	r0, be18 <l2cap_recv+0x5d4>
    bdfe:	9004      	str	r0, [sp, #16]
				bt_l2cap_chan_remove(conn, &chan->chan);
    be00:	4629      	mov	r1, r5
    be02:	4630      	mov	r0, r6
    be04:	f017 f9ce 	bl	231a4 <bt_l2cap_chan_remove>
				bt_l2cap_chan_del(&chan->chan);
    be08:	4628      	mov	r0, r5
    be0a:	f017 f9e4 	bl	231d6 <bt_l2cap_chan_del>
				bt_l2cap_chan_disconnect(c);
    be0e:	9b04      	ldr	r3, [sp, #16]
    be10:	4618      	mov	r0, r3
    be12:	f017 fbb1 	bl	23578 <bt_l2cap_chan_disconnect>
				continue;
    be16:	e7b9      	b.n	bd8c <l2cap_recv+0x548>
			if (chan->chan.ops->connected) {
    be18:	686b      	ldr	r3, [r5, #4]
			chan->chan.ident = 0U;
    be1a:	f885 0048 	strb.w	r0, [r5, #72]	; 0x48
	chan->state = state;
    be1e:	f885 b044 	strb.w	fp, [r5, #68]	; 0x44
			if (chan->chan.ops->connected) {
    be22:	681b      	ldr	r3, [r3, #0]
			chan->tx.cid = dcid;
    be24:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
			chan->tx.mtu = mtu;
    be28:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
			chan->tx.mps = mps;
    be2c:	f8a5 8060 	strh.w	r8, [r5, #96]	; 0x60
			if (chan->chan.ops->connected) {
    be30:	b10b      	cbz	r3, be36 <l2cap_recv+0x5f2>
				chan->chan.ops->connected(&chan->chan);
    be32:	4628      	mov	r0, r5
    be34:	4798      	blx	r3
			l2cap_chan_tx_give_credits(chan, credits);
    be36:	4651      	mov	r1, sl
    be38:	4628      	mov	r0, r5
    be3a:	f017 f937 	bl	230ac <l2cap_chan_tx_give_credits>
	atomic_add(&chan->rx.credits, credits);
    be3e:	f8b5 1056 	ldrh.w	r1, [r5, #86]	; 0x56
    be42:	f105 0058 	add.w	r0, r5, #88	; 0x58
    be46:	f017 f8ca 	bl	22fde <atomic_add>
}
    be4a:	e79f      	b.n	bd8c <l2cap_recv+0x548>
    be4c:	00026644 	.word	0x00026644
    be50:	00026544 	.word	0x00026544
    be54:	00029e84 	.word	0x00029e84
    be58:	00029ea5 	.word	0x00029ea5
    be5c:	00029ed1 	.word	0x00029ed1
    be60:	00029ddf 	.word	0x00029ddf
    be64:	00029ee2 	.word	0x00029ee2
    be68:	00029f00 	.word	0x00029f00
			bt_l2cap_chan_del(&chan->chan);
    be6c:	f017 f9b3 	bl	231d6 <bt_l2cap_chan_del>
		while ((chan = l2cap_remove_ident(conn, ident))) {
    be70:	2201      	movs	r2, #1
    be72:	4621      	mov	r1, r4
    be74:	4630      	mov	r0, r6
    be76:	f017 f864 	bl	22f42 <__l2cap_lookup_ident>
    be7a:	2800      	cmp	r0, #0
    be7c:	d1f6      	bne.n	be6c <l2cap_recv+0x628>
    be7e:	e509      	b.n	b894 <l2cap_recv+0x50>
	if (buf->len < sizeof(*req)) {
    be80:	2903      	cmp	r1, #3
    be82:	d808      	bhi.n	be96 <l2cap_recv+0x652>
    be84:	4957      	ldr	r1, [pc, #348]	; (bfe4 <l2cap_recv+0x7a0>)
    be86:	4b58      	ldr	r3, [pc, #352]	; (bfe8 <l2cap_recv+0x7a4>)
		BT_ERR("Too small ecred reconf req packet size");
    be88:	4858      	ldr	r0, [pc, #352]	; (bfec <l2cap_recv+0x7a8>)
    be8a:	1ac9      	subs	r1, r1, r3
    be8c:	08c9      	lsrs	r1, r1, #3
    be8e:	0189      	lsls	r1, r1, #6
    be90:	f041 0101 	orr.w	r1, r1, #1
    be94:	e4e6      	b.n	b864 <l2cap_recv+0x20>
	req = net_buf_pull_mem(buf, sizeof(*req));
    be96:	2104      	movs	r1, #4
    be98:	4648      	mov	r0, r9
		le_ecred_reconf_req(l2cap, hdr->ident, buf);
    be9a:	6836      	ldr	r6, [r6, #0]
	req = net_buf_pull_mem(buf, sizeof(*req));
    be9c:	f019 fae3 	bl	25466 <net_buf_simple_pull_mem>
	mtu = sys_le16_to_cpu(req->mtu);
    bea0:	f8b0 8000 	ldrh.w	r8, [r0]
	if (mtu < L2CAP_ECRED_MIN_MTU) {
    bea4:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
    bea8:	d904      	bls.n	beb4 <l2cap_recv+0x670>
	mps = sys_le16_to_cpu(req->mps);
    beaa:	f8b0 a002 	ldrh.w	sl, [r0, #2]
	if (mps < L2CAP_ECRED_MIN_MTU) {
    beae:	f1ba 0f3f 	cmp.w	sl, #63	; 0x3f
    beb2:	d825      	bhi.n	bf00 <l2cap_recv+0x6bc>
		result = BT_L2CAP_RECONF_INVALID_MTU;
    beb4:	2501      	movs	r5, #1
    beb6:	e027      	b.n	bf08 <l2cap_recv+0x6c4>
		scid = net_buf_pull_le16(buf);
    beb8:	4648      	mov	r0, r9
    beba:	f019 fae4 	bl	25486 <net_buf_simple_pull_le16>
		if (!scid) {
    bebe:	4601      	mov	r1, r0
    bec0:	b1f0      	cbz	r0, bf00 <l2cap_recv+0x6bc>
		chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    bec2:	4630      	mov	r0, r6
    bec4:	f017 fb16 	bl	234f4 <bt_l2cap_le_lookup_tx_cid>
		if (!chan) {
    bec8:	4607      	mov	r7, r0
    beca:	b1c8      	cbz	r0, bf00 <l2cap_recv+0x6bc>
		if (BT_L2CAP_LE_CHAN(chan)->tx.mtu > mtu) {
    becc:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    bed0:	4590      	cmp	r8, r2
    bed2:	d211      	bcs.n	bef8 <l2cap_recv+0x6b4>
    bed4:	4b44      	ldr	r3, [pc, #272]	; (bfe8 <l2cap_recv+0x7a4>)
    bed6:	4d43      	ldr	r5, [pc, #268]	; (bfe4 <l2cap_recv+0x7a0>)
    bed8:	1aed      	subs	r5, r5, r3
    beda:	08ed      	lsrs	r5, r5, #3
			BT_ERR("chan %p decreased MTU %u -> %u", chan,
    bedc:	01ad      	lsls	r5, r5, #6
    bede:	f045 0501 	orr.w	r5, r5, #1
    bee2:	4601      	mov	r1, r0
    bee4:	f8ad 5000 	strh.w	r5, [sp]
    bee8:	4841      	ldr	r0, [pc, #260]	; (bff0 <l2cap_recv+0x7ac>)
    beea:	4643      	mov	r3, r8
    beec:	f014 fea2 	bl	20c34 <log_3>
			bt_l2cap_chan_disconnect(chan);
    bef0:	4638      	mov	r0, r7
    bef2:	f017 fb41 	bl	23578 <bt_l2cap_chan_disconnect>
			goto response;
    bef6:	e7dd      	b.n	beb4 <l2cap_recv+0x670>
		BT_L2CAP_LE_CHAN(chan)->tx.mtu = mtu;
    bef8:	f8a0 805e 	strh.w	r8, [r0, #94]	; 0x5e
		BT_L2CAP_LE_CHAN(chan)->tx.mps = mps;
    befc:	f8a0 a060 	strh.w	sl, [r0, #96]	; 0x60
	while (buf->len >= sizeof(scid)) {
    bf00:	89ab      	ldrh	r3, [r5, #12]
    bf02:	2b01      	cmp	r3, #1
    bf04:	d8d8      	bhi.n	beb8 <l2cap_recv+0x674>
	result = BT_L2CAP_RECONF_SUCCESS;
    bf06:	2500      	movs	r5, #0
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_ECRED_RECONF_RSP, ident,
    bf08:	4621      	mov	r1, r4
    bf0a:	2202      	movs	r2, #2
    bf0c:	201a      	movs	r0, #26
    bf0e:	f7fe fff5 	bl	aefc <l2cap_create_le_sig_pdu.isra.0>
	rsp = net_buf_add(buf, sizeof(*rsp));
    bf12:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_ECRED_RECONF_RSP, ident,
    bf14:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    bf16:	3008      	adds	r0, #8
    bf18:	f019 fa68 	bl	253ec <net_buf_simple_add>
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    bf1c:	4621      	mov	r1, r4
	rsp->result = sys_cpu_to_le16(result);
    bf1e:	8005      	strh	r5, [r0, #0]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    bf20:	e530      	b.n	b984 <l2cap_recv+0x140>
	if (buf->len < sizeof(*req)) {
    bf22:	2907      	cmp	r1, #7
    bf24:	d808      	bhi.n	bf38 <l2cap_recv+0x6f4>
    bf26:	492f      	ldr	r1, [pc, #188]	; (bfe4 <l2cap_recv+0x7a0>)
    bf28:	4b2f      	ldr	r3, [pc, #188]	; (bfe8 <l2cap_recv+0x7a4>)
		BT_ERR("Too small LE conn update param req");
    bf2a:	4832      	ldr	r0, [pc, #200]	; (bff4 <l2cap_recv+0x7b0>)
    bf2c:	1ac9      	subs	r1, r1, r3
    bf2e:	08c9      	lsrs	r1, r1, #3
    bf30:	0189      	lsls	r1, r1, #6
    bf32:	f041 0101 	orr.w	r1, r1, #1
    bf36:	e495      	b.n	b864 <l2cap_recv+0x20>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
    bf38:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    bf3a:	78f3      	ldrb	r3, [r6, #3]
    bf3c:	b12b      	cbz	r3, bf4a <l2cap_recv+0x706>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    bf3e:	2300      	movs	r3, #0
    bf40:	9300      	str	r3, [sp, #0]
    bf42:	461a      	mov	r2, r3
    bf44:	4621      	mov	r1, r4
    bf46:	4630      	mov	r0, r6
    bf48:	e5c3      	b.n	bad2 <l2cap_recv+0x28e>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    bf4a:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    bf4c:	7859      	ldrb	r1, [r3, #1]
    bf4e:	781a      	ldrb	r2, [r3, #0]
    bf50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    bf54:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    bf58:	78d9      	ldrb	r1, [r3, #3]
    bf5a:	789a      	ldrb	r2, [r3, #2]
    bf5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    bf60:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
	param.latency = sys_le16_to_cpu(req->latency);
    bf64:	7959      	ldrb	r1, [r3, #5]
    bf66:	791a      	ldrb	r2, [r3, #4]
    bf68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    bf6c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	param.timeout = sys_le16_to_cpu(req->timeout);
    bf70:	799a      	ldrb	r2, [r3, #6]
    bf72:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    bf74:	4621      	mov	r1, r4
	param.timeout = sys_le16_to_cpu(req->timeout);
    bf76:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    bf7a:	2013      	movs	r0, #19
    bf7c:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    bf7e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    bf82:	f7fe ffbb 	bl	aefc <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    bf86:	4604      	mov	r4, r0
    bf88:	2800      	cmp	r0, #0
    bf8a:	f43f ac83 	beq.w	b894 <l2cap_recv+0x50>
	accepted = le_param_req(conn, &param);
    bf8e:	a90b      	add	r1, sp, #44	; 0x2c
    bf90:	4630      	mov	r0, r6
    bf92:	f7fe f8c5 	bl	a120 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    bf96:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    bf98:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    bf9a:	f104 0008 	add.w	r0, r4, #8
    bf9e:	f019 fa25 	bl	253ec <net_buf_simple_add>
	if (accepted) {
    bfa2:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    bfa6:	b2db      	uxtb	r3, r3
    bfa8:	8003      	strh	r3, [r0, #0]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    bfaa:	4621      	mov	r1, r4
    bfac:	4630      	mov	r0, r6
    bfae:	f017 f9c1 	bl	23334 <bt_l2cap_send.constprop.0>
	if (accepted) {
    bfb2:	2d00      	cmp	r5, #0
    bfb4:	f43f ac6e 	beq.w	b894 <l2cap_recv+0x50>
		bt_conn_le_conn_update(conn, &param);
    bfb8:	a90b      	add	r1, sp, #44	; 0x2c
    bfba:	4630      	mov	r0, r6
    bfbc:	f016 ff81 	bl	22ec2 <bt_conn_le_conn_update>
    bfc0:	e468      	b.n	b894 <l2cap_recv+0x50>
    bfc2:	4909      	ldr	r1, [pc, #36]	; (bfe8 <l2cap_recv+0x7a4>)
    bfc4:	4a07      	ldr	r2, [pc, #28]	; (bfe4 <l2cap_recv+0x7a0>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    bfc6:	480c      	ldr	r0, [pc, #48]	; (bff8 <l2cap_recv+0x7b4>)
    bfc8:	1a52      	subs	r2, r2, r1
    bfca:	08d2      	lsrs	r2, r2, #3
    bfcc:	0192      	lsls	r2, r2, #6
    bfce:	4619      	mov	r1, r3
    bfd0:	f042 0202 	orr.w	r2, r2, #2
    bfd4:	f014 fe01 	bl	20bda <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
    bfd8:	2300      	movs	r3, #0
    bfda:	7879      	ldrb	r1, [r7, #1]
    bfdc:	9300      	str	r3, [sp, #0]
    bfde:	6830      	ldr	r0, [r6, #0]
    bfe0:	461a      	mov	r2, r3
    bfe2:	e576      	b.n	bad2 <l2cap_recv+0x28e>
    bfe4:	00026644 	.word	0x00026644
    bfe8:	00026544 	.word	0x00026544
    bfec:	00029f25 	.word	0x00029f25
    bff0:	00029f4c 	.word	0x00029f4c
    bff4:	00029f6b 	.word	0x00029f6b
    bff8:	00029f8e 	.word	0x00029f8e

0000bffc <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    bffc:	4b02      	ldr	r3, [pc, #8]	; (c008 <att_cfm_sent+0xc>)
    bffe:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128

	att_sent(conn, user_data);
    c002:	f017 bb26 	b.w	23652 <att_sent>
    c006:	bf00      	nop
    c008:	000238f1 	.word	0x000238f1

0000c00c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    c00c:	4b02      	ldr	r3, [pc, #8]	; (c018 <att_rsp_sent+0xc>)
    c00e:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128

	att_sent(conn, user_data);
    c012:	f017 bb1e 	b.w	23652 <att_sent>
    c016:	bf00      	nop
    c018:	0002390d 	.word	0x0002390d

0000c01c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    c01c:	4b02      	ldr	r3, [pc, #8]	; (c028 <att_req_sent+0xc>)
    c01e:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128

	att_sent(conn, user_data);
    c022:	f017 bb16 	b.w	23652 <att_sent>
    c026:	bf00      	nop
    c028:	0000c375 	.word	0x0000c375

0000c02c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    c02c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    c02e:	3808      	subs	r0, #8
    c030:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    c032:	a901      	add	r1, sp, #4
    c034:	4802      	ldr	r0, [pc, #8]	; (c040 <bt_att_released+0x14>)
    c036:	f013 f989 	bl	1f34c <k_mem_slab_free>
}
    c03a:	b003      	add	sp, #12
    c03c:	f85d fb04 	ldr.w	pc, [sp], #4
    c040:	200007a0 	.word	0x200007a0

0000c044 <read_group_cb>:
{
    c044:	b5f0      	push	{r4, r5, r6, r7, lr}
    c046:	b085      	sub	sp, #20
	struct bt_att_chan *chan = data->chan;
    c048:	680e      	ldr	r6, [r1, #0]
{
    c04a:	4605      	mov	r5, r0
    c04c:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c04e:	2700      	movs	r7, #0
    c050:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c054:	6800      	ldr	r0, [r0, #0]
    c056:	f88d 7008 	strb.w	r7, [sp, #8]
    c05a:	a902      	add	r1, sp, #8
    c05c:	f8ad 300a 	strh.w	r3, [sp, #10]
    c060:	f016 fc2d 	bl	228be <bt_uuid_cmp>
    c064:	b1a0      	cbz	r0, c090 <read_group_cb+0x4c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c066:	f642 0301 	movw	r3, #10241	; 0x2801
    c06a:	6828      	ldr	r0, [r5, #0]
    c06c:	f88d 700c 	strb.w	r7, [sp, #12]
    c070:	a903      	add	r1, sp, #12
    c072:	f8ad 300e 	strh.w	r3, [sp, #14]
    c076:	f016 fc22 	bl	228be <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c07a:	b148      	cbz	r0, c090 <read_group_cb+0x4c>
		if (data->group &&
    c07c:	6923      	ldr	r3, [r4, #16]
    c07e:	b123      	cbz	r3, c08a <read_group_cb+0x46>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    c080:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
    c082:	8859      	ldrh	r1, [r3, #2]
    c084:	4291      	cmp	r1, r2
    c086:	d200      	bcs.n	c08a <read_group_cb+0x46>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    c088:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    c08a:	2001      	movs	r0, #1
}
    c08c:	b005      	add	sp, #20
    c08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c090:	6861      	ldr	r1, [r4, #4]
    c092:	6828      	ldr	r0, [r5, #0]
    c094:	f016 fc13 	bl	228be <bt_uuid_cmp>
    c098:	b110      	cbz	r0, c0a0 <read_group_cb+0x5c>
		data->group = NULL;
    c09a:	2300      	movs	r3, #0
    c09c:	6123      	str	r3, [r4, #16]
    c09e:	e7f4      	b.n	c08a <read_group_cb+0x46>
	if (data->rsp->len &&
    c0a0:	68e3      	ldr	r3, [r4, #12]
    c0a2:	68a0      	ldr	r0, [r4, #8]
    c0a4:	781a      	ldrb	r2, [r3, #0]
    c0a6:	b13a      	cbz	r2, c0b8 <read_group_cb+0x74>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    c0a8:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
    c0ac:	8981      	ldrh	r1, [r0, #12]
    c0ae:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    c0b0:	4293      	cmp	r3, r2
    c0b2:	da01      	bge.n	c0b8 <read_group_cb+0x74>
		return BT_GATT_ITER_STOP;
    c0b4:	2000      	movs	r0, #0
    c0b6:	e7e9      	b.n	c08c <read_group_cb+0x48>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    c0b8:	2104      	movs	r1, #4
    c0ba:	3008      	adds	r0, #8
    c0bc:	f019 f996 	bl	253ec <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    c0c0:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    c0c2:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    c0c4:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    c0c6:	8043      	strh	r3, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c0c8:	4b07      	ldr	r3, [pc, #28]	; (c0e8 <read_group_cb+0xa4>)
    c0ca:	9300      	str	r3, [sp, #0]
    c0cc:	68a2      	ldr	r2, [r4, #8]
    c0ce:	9401      	str	r4, [sp, #4]
    c0d0:	2300      	movs	r3, #0
    c0d2:	4629      	mov	r1, r5
    c0d4:	4630      	mov	r0, r6
    c0d6:	f017 fb70 	bl	237ba <att_chan_read>
	if (read < 0) {
    c0da:	2800      	cmp	r0, #0
    c0dc:	dbea      	blt.n	c0b4 <read_group_cb+0x70>
	if (!data->group) {
    c0de:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    c0e0:	3800      	subs	r0, #0
    c0e2:	bf18      	it	ne
    c0e4:	2001      	movne	r0, #1
    c0e6:	e7d1      	b.n	c08c <read_group_cb+0x48>
    c0e8:	000238d1 	.word	0x000238d1

0000c0ec <read_type_cb>:
{
    c0ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
    c0f0:	f8d1 8000 	ldr.w	r8, [r1]
{
    c0f4:	4606      	mov	r6, r0
    c0f6:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c0f8:	6800      	ldr	r0, [r0, #0]
    c0fa:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    c0fc:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c100:	f016 fbdd 	bl	228be <bt_uuid_cmp>
    c104:	4607      	mov	r7, r0
    c106:	2800      	cmp	r0, #0
    c108:	d13e      	bne.n	c188 <read_type_cb+0x9c>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    c10a:	4628      	mov	r0, r5
    c10c:	2215      	movs	r2, #21
    c10e:	4631      	mov	r1, r6
    c110:	f018 f928 	bl	24364 <bt_gatt_check_perm>
    c114:	4605      	mov	r5, r0
    c116:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    c118:	b148      	cbz	r0, c12e <read_type_cb+0x42>
		if (data->rsp->len) {
    c11a:	68e3      	ldr	r3, [r4, #12]
    c11c:	781b      	ldrb	r3, [r3, #0]
    c11e:	b923      	cbnz	r3, c12a <read_type_cb+0x3e>
		return BT_GATT_ITER_STOP;
    c120:	2500      	movs	r5, #0
}
    c122:	4628      	mov	r0, r5
    c124:	b002      	add	sp, #8
    c126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			data->err = 0x00;
    c12a:	7527      	strb	r7, [r4, #20]
    c12c:	e7f8      	b.n	c120 <read_type_cb+0x34>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c12e:	68a0      	ldr	r0, [r4, #8]
    c130:	f019 f92e 	bl	25390 <net_buf_frag_last>
    c134:	2102      	movs	r1, #2
    c136:	3008      	adds	r0, #8
    c138:	f019 f958 	bl	253ec <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    c13c:	8a33      	ldrh	r3, [r6, #16]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c13e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    c140:	8003      	strh	r3, [r0, #0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c142:	4b12      	ldr	r3, [pc, #72]	; (c18c <read_type_cb+0xa0>)
    c144:	9300      	str	r3, [sp, #0]
    c146:	68a2      	ldr	r2, [r4, #8]
    c148:	9401      	str	r4, [sp, #4]
    c14a:	462b      	mov	r3, r5
    c14c:	4631      	mov	r1, r6
    c14e:	4640      	mov	r0, r8
    c150:	f017 fb33 	bl	237ba <att_chan_read>
	if (read < 0) {
    c154:	2800      	cmp	r0, #0
    c156:	da07      	bge.n	c168 <read_type_cb+0x7c>
	if (err < 0 && err >= -0xff) {
    c158:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    c15c:	bf26      	itte	cs
    c15e:	4240      	negcs	r0, r0
    c160:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    c162:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    c164:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    c166:	e7dc      	b.n	c122 <read_type_cb+0x36>
	if (!data->item) {
    c168:	6923      	ldr	r3, [r4, #16]
    c16a:	2b00      	cmp	r3, #0
    c16c:	d0d8      	beq.n	c120 <read_type_cb+0x34>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    c16e:	68a0      	ldr	r0, [r4, #8]
    c170:	f017 fa67 	bl	23642 <net_buf_frags_len>
    c174:	f8b8 5066 	ldrh.w	r5, [r8, #102]	; 0x66
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c178:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    c17a:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c17c:	7818      	ldrb	r0, [r3, #0]
    c17e:	4285      	cmp	r5, r0
    c180:	bf94      	ite	ls
    c182:	2500      	movls	r5, #0
    c184:	2501      	movhi	r5, #1
    c186:	e7cc      	b.n	c122 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    c188:	2501      	movs	r5, #1
    c18a:	e7ca      	b.n	c122 <read_type_cb+0x36>
    c18c:	0002365f 	.word	0x0002365f

0000c190 <find_type_cb>:
{
    c190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_att_chan *chan = data->chan;
    c194:	680f      	ldr	r7, [r1, #0]
{
    c196:	b090      	sub	sp, #64	; 0x40
    c198:	4606      	mov	r6, r0
    c19a:	460d      	mov	r5, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c19c:	2400      	movs	r4, #0
    c19e:	f642 0301 	movw	r3, #10241	; 0x2801
    c1a2:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    c1a4:	f8d7 8008 	ldr.w	r8, [r7, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c1a8:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    c1ac:	a90b      	add	r1, sp, #44	; 0x2c
    c1ae:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    c1b2:	f016 fb84 	bl	228be <bt_uuid_cmp>
    c1b6:	2800      	cmp	r0, #0
    c1b8:	d06a      	beq.n	c290 <find_type_cb+0x100>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    c1ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c1be:	6830      	ldr	r0, [r6, #0]
    c1c0:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    c1c4:	a90b      	add	r1, sp, #44	; 0x2c
    c1c6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    c1ca:	f016 fb78 	bl	228be <bt_uuid_cmp>
    c1ce:	4604      	mov	r4, r0
    c1d0:	b150      	cbz	r0, c1e8 <find_type_cb+0x58>
		if (data->group &&
    c1d2:	68ab      	ldr	r3, [r5, #8]
    c1d4:	b123      	cbz	r3, c1e0 <find_type_cb+0x50>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    c1d6:	8a32      	ldrh	r2, [r6, #16]
		if (data->group &&
    c1d8:	8859      	ldrh	r1, [r3, #2]
    c1da:	4291      	cmp	r1, r2
    c1dc:	d200      	bcs.n	c1e0 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    c1de:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    c1e0:	2001      	movs	r0, #1
}
    c1e2:	b010      	add	sp, #64	; 0x40
    c1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    c1e8:	6869      	ldr	r1, [r5, #4]
    c1ea:	4608      	mov	r0, r1
    c1ec:	f017 fa29 	bl	23642 <net_buf_frags_len>
    c1f0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    c1f4:	1a1b      	subs	r3, r3, r0
    c1f6:	2b03      	cmp	r3, #3
    c1f8:	d922      	bls.n	c240 <find_type_cb+0xb0>
	frag = net_buf_frag_last(data->buf);
    c1fa:	4608      	mov	r0, r1
    c1fc:	f019 f8c8 	bl	25390 <net_buf_frag_last>
    c200:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    c202:	6868      	ldr	r0, [r5, #4]
    c204:	f017 fa1d 	bl	23642 <net_buf_frags_len>
    c208:	f8b7 9066 	ldrh.w	r9, [r7, #102]	; 0x66
    c20c:	f104 0a08 	add.w	sl, r4, #8
    c210:	eba9 0900 	sub.w	r9, r9, r0
    c214:	4650      	mov	r0, sl
    c216:	f019 f942 	bl	2549e <net_buf_simple_tailroom>
    c21a:	4581      	cmp	r9, r0
    c21c:	d212      	bcs.n	c244 <find_type_cb+0xb4>
    c21e:	6868      	ldr	r0, [r5, #4]
    c220:	f017 fa0f 	bl	23642 <net_buf_frags_len>
    c224:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    c228:	1a18      	subs	r0, r3, r0
	if (!len) {
    c22a:	b998      	cbnz	r0, c254 <find_type_cb+0xc4>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    c22c:	686b      	ldr	r3, [r5, #4]
    c22e:	7998      	ldrb	r0, [r3, #6]
    c230:	f011 fe06 	bl	1de40 <net_buf_pool_get>
    c234:	2200      	movs	r2, #0
    c236:	2300      	movs	r3, #0
    c238:	f019 f870 	bl	2531c <net_buf_alloc_fixed>
		if (!frag) {
    c23c:	4604      	mov	r4, r0
    c23e:	b928      	cbnz	r0, c24c <find_type_cb+0xbc>
		return BT_GATT_ITER_STOP;
    c240:	4620      	mov	r0, r4
    c242:	e7ce      	b.n	c1e2 <find_type_cb+0x52>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    c244:	4650      	mov	r0, sl
    c246:	f019 f92a 	bl	2549e <net_buf_simple_tailroom>
    c24a:	e7ee      	b.n	c22a <find_type_cb+0x9a>
		net_buf_frag_add(data->buf, frag);
    c24c:	4601      	mov	r1, r0
    c24e:	6868      	ldr	r0, [r5, #4]
    c250:	f019 f8af 	bl	253b2 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    c254:	2300      	movs	r3, #0
    c256:	6877      	ldr	r7, [r6, #4]
    c258:	9300      	str	r3, [sp, #0]
    c25a:	aa02      	add	r2, sp, #8
    c25c:	2310      	movs	r3, #16
    c25e:	4631      	mov	r1, r6
    c260:	4640      	mov	r0, r8
    c262:	47b8      	blx	r7
	if (read < 0) {
    c264:	1e07      	subs	r7, r0, #0
    c266:	db13      	blt.n	c290 <find_type_cb+0x100>
	if (read != data->value_len) {
    c268:	7c2a      	ldrb	r2, [r5, #16]
    c26a:	68e8      	ldr	r0, [r5, #12]
    c26c:	42ba      	cmp	r2, r7
    c26e:	d034      	beq.n	c2da <find_type_cb+0x14a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    c270:	4601      	mov	r1, r0
    c272:	a80b      	add	r0, sp, #44	; 0x2c
    c274:	f016 fb4d 	bl	22912 <bt_uuid_create>
    c278:	b968      	cbnz	r0, c296 <find_type_cb+0x106>
    c27a:	4a1a      	ldr	r2, [pc, #104]	; (c2e4 <find_type_cb+0x154>)
    c27c:	4b1a      	ldr	r3, [pc, #104]	; (c2e8 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    c27e:	7c29      	ldrb	r1, [r5, #16]
    c280:	481a      	ldr	r0, [pc, #104]	; (c2ec <find_type_cb+0x15c>)
    c282:	1ad2      	subs	r2, r2, r3
    c284:	08d2      	lsrs	r2, r2, #3
    c286:	0192      	lsls	r2, r2, #6
    c288:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    c28c:	f014 fca5 	bl	20bda <log_1>
	data->group = NULL;
    c290:	2300      	movs	r3, #0
    c292:	60ab      	str	r3, [r5, #8]
    c294:	e7a4      	b.n	c1e0 <find_type_cb+0x50>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    c296:	b2fa      	uxtb	r2, r7
    c298:	a902      	add	r1, sp, #8
    c29a:	a806      	add	r0, sp, #24
    c29c:	f016 fb39 	bl	22912 <bt_uuid_create>
    c2a0:	b948      	cbnz	r0, c2b6 <find_type_cb+0x126>
    c2a2:	4a10      	ldr	r2, [pc, #64]	; (c2e4 <find_type_cb+0x154>)
    c2a4:	4b10      	ldr	r3, [pc, #64]	; (c2e8 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    c2a6:	4812      	ldr	r0, [pc, #72]	; (c2f0 <find_type_cb+0x160>)
    c2a8:	1ad2      	subs	r2, r2, r3
    c2aa:	08d2      	lsrs	r2, r2, #3
    c2ac:	0192      	lsls	r2, r2, #6
    c2ae:	f042 0202 	orr.w	r2, r2, #2
    c2b2:	4639      	mov	r1, r7
    c2b4:	e7ea      	b.n	c28c <find_type_cb+0xfc>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    c2b6:	a906      	add	r1, sp, #24
    c2b8:	a80b      	add	r0, sp, #44	; 0x2c
    c2ba:	f016 fb00 	bl	228be <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    c2be:	2800      	cmp	r0, #0
    c2c0:	d1e6      	bne.n	c290 <find_type_cb+0x100>
	data->err = 0x00;
    c2c2:	2300      	movs	r3, #0
    c2c4:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
    c2c6:	2104      	movs	r1, #4
    c2c8:	f104 0008 	add.w	r0, r4, #8
    c2cc:	f019 f88e 	bl	253ec <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    c2d0:	8a33      	ldrh	r3, [r6, #16]
	data->group = net_buf_add(frag, sizeof(*data->group));
    c2d2:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    c2d4:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    c2d6:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    c2d8:	e782      	b.n	c1e0 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    c2da:	a902      	add	r1, sp, #8
    c2dc:	f016 fa10 	bl	22700 <memcmp>
    c2e0:	e7ed      	b.n	c2be <find_type_cb+0x12e>
    c2e2:	bf00      	nop
    c2e4:	00026544 	.word	0x00026544
    c2e8:	00026544 	.word	0x00026544
    c2ec:	00029fbc 	.word	0x00029fbc
    c2f0:	00029fdb 	.word	0x00029fdb

0000c2f4 <att_get>:
{
    c2f4:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    c2f6:	7b43      	ldrb	r3, [r0, #13]
    c2f8:	2b06      	cmp	r3, #6
    c2fa:	d00b      	beq.n	c314 <att_get+0x20>
    c2fc:	4918      	ldr	r1, [pc, #96]	; (c360 <att_get+0x6c>)
    c2fe:	4b19      	ldr	r3, [pc, #100]	; (c364 <att_get+0x70>)
		BT_WARN("Not connected");
    c300:	4819      	ldr	r0, [pc, #100]	; (c368 <att_get+0x74>)
    c302:	1ac9      	subs	r1, r1, r3
    c304:	08c9      	lsrs	r1, r1, #3
    c306:	0189      	lsls	r1, r1, #6
    c308:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
    c30c:	f014 fc58 	bl	20bc0 <log_0>
		return NULL;
    c310:	2400      	movs	r4, #0
    c312:	e00e      	b.n	c332 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    c314:	2104      	movs	r1, #4
    c316:	f017 f8fd 	bl	23514 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    c31a:	4604      	mov	r4, r0
    c31c:	b958      	cbnz	r0, c336 <att_get+0x42>
    c31e:	4910      	ldr	r1, [pc, #64]	; (c360 <att_get+0x6c>)
    c320:	4b10      	ldr	r3, [pc, #64]	; (c364 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    c322:	4812      	ldr	r0, [pc, #72]	; (c36c <att_get+0x78>)
    c324:	1ac9      	subs	r1, r1, r3
    c326:	08c9      	lsrs	r1, r1, #3
    c328:	0189      	lsls	r1, r1, #6
    c32a:	f041 0101 	orr.w	r1, r1, #1
    c32e:	f014 fc47 	bl	20bc0 <log_0>
}
    c332:	4620      	mov	r0, r4
    c334:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c336:	f3bf 8f5b 	dmb	ish
    c33a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
    c33e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    c342:	075b      	lsls	r3, r3, #29
    c344:	d508      	bpl.n	c358 <att_get+0x64>
    c346:	4906      	ldr	r1, [pc, #24]	; (c360 <att_get+0x6c>)
    c348:	4b06      	ldr	r3, [pc, #24]	; (c364 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    c34a:	4809      	ldr	r0, [pc, #36]	; (c370 <att_get+0x7c>)
    c34c:	1ac9      	subs	r1, r1, r3
    c34e:	08c9      	lsrs	r1, r1, #3
    c350:	0189      	lsls	r1, r1, #6
    c352:	f041 0102 	orr.w	r1, r1, #2
    c356:	e7d9      	b.n	c30c <att_get+0x18>
	return att_chan->att;
    c358:	f850 4c08 	ldr.w	r4, [r0, #-8]
    c35c:	e7e9      	b.n	c332 <att_get+0x3e>
    c35e:	bf00      	nop
    c360:	00026544 	.word	0x00026544
    c364:	00026544 	.word	0x00026544
    c368:	00029ffa 	.word	0x00029ffa
    c36c:	0002a008 	.word	0x0002a008
    c370:	0002a023 	.word	0x0002a023

0000c374 <chan_req_sent>:
	if (chan->req) {
    c374:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    c378:	b13b      	cbz	r3, c38a <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c37a:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
    c37e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    c382:	4802      	ldr	r0, [pc, #8]	; (c38c <chan_req_sent+0x18>)
    c384:	2300      	movs	r3, #0
    c386:	f013 bda7 	b.w	1fed8 <k_delayed_work_submit_to_queue>
}
    c38a:	4770      	bx	lr
    c38c:	20001510 	.word	0x20001510

0000c390 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    c390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c392:	2300      	movs	r3, #0
{
    c394:	4606      	mov	r6, r0
    c396:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c398:	482c      	ldr	r0, [pc, #176]	; (c44c <bt_att_accept+0xbc>)
    c39a:	2200      	movs	r2, #0
    c39c:	4669      	mov	r1, sp
    c39e:	f012 ffa3 	bl	1f2e8 <k_mem_slab_alloc>
    c3a2:	4604      	mov	r4, r0
    c3a4:	b178      	cbz	r0, c3c6 <bt_att_accept+0x36>
    c3a6:	4a2a      	ldr	r2, [pc, #168]	; (c450 <bt_att_accept+0xc0>)
    c3a8:	4b2a      	ldr	r3, [pc, #168]	; (c454 <bt_att_accept+0xc4>)
		BT_ERR("No available ATT context for conn %p", conn);
    c3aa:	482b      	ldr	r0, [pc, #172]	; (c458 <bt_att_accept+0xc8>)
    c3ac:	1ad2      	subs	r2, r2, r3
    c3ae:	08d2      	lsrs	r2, r2, #3
    c3b0:	0192      	lsls	r2, r2, #6
    c3b2:	f042 0201 	orr.w	r2, r2, #1
    c3b6:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c3b8:	f014 fc0f 	bl	20bda <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    c3bc:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    c3c0:	4620      	mov	r0, r4
    c3c2:	b003      	add	sp, #12
    c3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    c3c6:	4601      	mov	r1, r0
    c3c8:	2244      	movs	r2, #68	; 0x44
    c3ca:	9800      	ldr	r0, [sp, #0]
    c3cc:	f016 f9d3 	bl	22776 <memset>
	att->conn = conn;
    c3d0:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c3d2:	4822      	ldr	r0, [pc, #136]	; (c45c <bt_att_accept+0xcc>)
	list->tail = NULL;
    c3d4:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    c3d6:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    c3da:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    c3de:	2200      	movs	r2, #0
    c3e0:	2300      	movs	r3, #0
    c3e2:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    c3e4:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c3e6:	f012 ff7f 	bl	1f2e8 <k_mem_slab_alloc>
    c3ea:	4604      	mov	r4, r0
    c3ec:	b148      	cbz	r0, c402 <bt_att_accept+0x72>
    c3ee:	4a18      	ldr	r2, [pc, #96]	; (c450 <bt_att_accept+0xc0>)
    c3f0:	4b18      	ldr	r3, [pc, #96]	; (c454 <bt_att_accept+0xc4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c3f2:	6829      	ldr	r1, [r5, #0]
    c3f4:	481a      	ldr	r0, [pc, #104]	; (c460 <bt_att_accept+0xd0>)
    c3f6:	1ad2      	subs	r2, r2, r3
    c3f8:	08d2      	lsrs	r2, r2, #3
    c3fa:	0192      	lsls	r2, r2, #6
    c3fc:	f042 0201 	orr.w	r2, r2, #1
    c400:	e7da      	b.n	c3b8 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    c402:	4601      	mov	r1, r0
    c404:	f44f 729c 	mov.w	r2, #312	; 0x138
    c408:	9801      	ldr	r0, [sp, #4]
    c40a:	f016 f9b4 	bl	22776 <memset>
	chan->chan.chan.ops = &ops;
    c40e:	9801      	ldr	r0, [sp, #4]
    c410:	4b14      	ldr	r3, [pc, #80]	; (c464 <bt_att_accept+0xd4>)
    c412:	60c3      	str	r3, [r0, #12]
    c414:	30d0      	adds	r0, #208	; 0xd0
    c416:	f019 fb97 	bl	25b48 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    c41a:	9801      	ldr	r0, [sp, #4]
    c41c:	f500 708c 	add.w	r0, r0, #280	; 0x118
	return z_impl_k_sem_init(sem, initial_count, limit);
    c420:	220a      	movs	r2, #10
    c422:	4611      	mov	r1, r2
    c424:	f019 fd0f 	bl	25e46 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c428:	9b01      	ldr	r3, [sp, #4]
    c42a:	f3bf 8f5b 	dmb	ish
    c42e:	33c8      	adds	r3, #200	; 0xc8
    c430:	e853 2f00 	ldrex	r2, [r3]
    c434:	e843 4100 	strex	r1, r4, [r3]
    c438:	2900      	cmp	r1, #0
    c43a:	d1f9      	bne.n	c430 <bt_att_accept+0xa0>
    c43c:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    c440:	9b01      	ldr	r3, [sp, #4]
    c442:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    c446:	603b      	str	r3, [r7, #0]
	return 0;
    c448:	e7ba      	b.n	c3c0 <bt_att_accept+0x30>
    c44a:	bf00      	nop
    c44c:	20000784 	.word	0x20000784
    c450:	00026544 	.word	0x00026544
    c454:	00026544 	.word	0x00026544
    c458:	0002a047 	.word	0x0002a047
    c45c:	200007a0 	.word	0x200007a0
    c460:	0002a06c 	.word	0x0002a06c
    c464:	200001dc 	.word	0x200001dc

0000c468 <bt_att_connected>:
{
    c468:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c46a:	2104      	movs	r1, #4
{
    c46c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c46e:	6800      	ldr	r0, [r0, #0]
    c470:	f017 f840 	bl	234f4 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    c474:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    c478:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    c47a:	b93b      	cbnz	r3, c48c <bt_att_connected+0x24>
	z_impl_k_queue_init(queue);
    c47c:	f105 000c 	add.w	r0, r5, #12
    c480:	f019 fb62 	bl	25b48 <z_impl_k_queue_init>
    c484:	f105 0024 	add.w	r0, r5, #36	; 0x24
    c488:	f019 fb5e 	bl	25b48 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    c48c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
	parent->next = child;
    c48e:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
Z_GENLIST_PREPEND(slist, snode)
    c492:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    c494:	f504 7396 	add.w	r3, r4, #300	; 0x12c
	list->head = node;
    c498:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    c49a:	b902      	cbnz	r2, c49e <bt_att_connected+0x36>
	list->tail = node;
    c49c:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c49e:	f3bf 8f5b 	dmb	ish
    c4a2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    c4a6:	4908      	ldr	r1, [pc, #32]	; (c4c8 <bt_att_connected+0x60>)
    c4a8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    c4ac:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    c4ae:	bf5e      	ittt	pl
    c4b0:	2317      	movpl	r3, #23
    c4b2:	f8a4 305e 	strhpl.w	r3, [r4, #94]	; 0x5e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    c4b6:	f8a4 3052 	strhpl.w	r3, [r4, #82]	; 0x52
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    c4ba:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
}
    c4be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    c4c2:	f019 bd43 	b.w	25f4c <k_delayed_work_init>
    c4c6:	bf00      	nop
    c4c8:	0000d249 	.word	0x0000d249

0000c4cc <prep_write_cb>:
{
    c4cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c4ce:	460c      	mov	r4, r1
    c4d0:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
    c4d2:	4601      	mov	r1, r0
    c4d4:	222a      	movs	r2, #42	; 0x2a
    c4d6:	6820      	ldr	r0, [r4, #0]
    c4d8:	f017 ff44 	bl	24364 <bt_gatt_check_perm>
    c4dc:	4605      	mov	r5, r0
    c4de:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    c4e0:	2800      	cmp	r0, #0
    c4e2:	d12d      	bne.n	c540 <prep_write_cb+0x74>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    c4e4:	7cb3      	ldrb	r3, [r6, #18]
    c4e6:	065b      	lsls	r3, r3, #25
    c4e8:	d514      	bpl.n	c514 <prep_write_cb+0x48>
	write = attr->write(data->conn, attr, data->value, data->len,
    c4ea:	2301      	movs	r3, #1
    c4ec:	9301      	str	r3, [sp, #4]
    c4ee:	89e3      	ldrh	r3, [r4, #14]
    c4f0:	9300      	str	r3, [sp, #0]
    c4f2:	68b7      	ldr	r7, [r6, #8]
    c4f4:	89a3      	ldrh	r3, [r4, #12]
    c4f6:	68a2      	ldr	r2, [r4, #8]
    c4f8:	6820      	ldr	r0, [r4, #0]
    c4fa:	4631      	mov	r1, r6
    c4fc:	47b8      	blx	r7
	if (write != 0) {
    c4fe:	b148      	cbz	r0, c514 <prep_write_cb+0x48>
	if (err < 0 && err >= -0xff) {
    c500:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    c504:	bf26      	itte	cs
    c506:	4243      	negcs	r3, r0
    c508:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    c50a:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    c50c:	7423      	strb	r3, [r4, #16]
}
    c50e:	4628      	mov	r0, r5
    c510:	b003      	add	sp, #12
    c512:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    c514:	480b      	ldr	r0, [pc, #44]	; (c544 <prep_write_cb+0x78>)
    c516:	2200      	movs	r2, #0
    c518:	2300      	movs	r3, #0
    c51a:	f018 feff 	bl	2531c <net_buf_alloc_fixed>
    c51e:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    c520:	b908      	cbnz	r0, c526 <prep_write_cb+0x5a>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    c522:	2309      	movs	r3, #9
    c524:	e7f2      	b.n	c50c <prep_write_cb+0x40>
	attr_data->handle = attr->handle;
    c526:	8a33      	ldrh	r3, [r6, #16]
    c528:	8283      	strh	r3, [r0, #20]
	attr_data->offset = data->offset;
    c52a:	89e3      	ldrh	r3, [r4, #14]
    c52c:	82c3      	strh	r3, [r0, #22]
	net_buf_add_mem(data->buf, data->value, data->len);
    c52e:	89a2      	ldrh	r2, [r4, #12]
    c530:	68a1      	ldr	r1, [r4, #8]
    c532:	3008      	adds	r0, #8
    c534:	f018 ff60 	bl	253f8 <net_buf_simple_add_mem>
	data->err = 0U;
    c538:	2300      	movs	r3, #0
    c53a:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    c53c:	2501      	movs	r5, #1
    c53e:	e7e6      	b.n	c50e <prep_write_cb+0x42>
		return BT_GATT_ITER_STOP;
    c540:	2500      	movs	r5, #0
    c542:	e7e4      	b.n	c50e <prep_write_cb+0x42>
    c544:	200009bc 	.word	0x200009bc

0000c548 <chan_send>:
{
    c548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    c54a:	688b      	ldr	r3, [r1, #8]
    c54c:	781b      	ldrb	r3, [r3, #0]
    c54e:	2bd2      	cmp	r3, #210	; 0xd2
{
    c550:	4604      	mov	r4, r0
    c552:	460f      	mov	r7, r1
    c554:	4615      	mov	r5, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    c556:	d115      	bne.n	c584 <chan_send+0x3c>
		err = bt_smp_sign(chan->att->conn, buf);
    c558:	6803      	ldr	r3, [r0, #0]
    c55a:	6818      	ldr	r0, [r3, #0]
    c55c:	f018 fe09 	bl	25172 <bt_smp_sign>
		if (err) {
    c560:	4606      	mov	r6, r0
    c562:	b178      	cbz	r0, c584 <chan_send+0x3c>
    c564:	491b      	ldr	r1, [pc, #108]	; (c5d4 <chan_send+0x8c>)
    c566:	4b1c      	ldr	r3, [pc, #112]	; (c5d8 <chan_send+0x90>)
			BT_ERR("Error signing data");
    c568:	481c      	ldr	r0, [pc, #112]	; (c5dc <chan_send+0x94>)
    c56a:	1a5b      	subs	r3, r3, r1
    c56c:	08db      	lsrs	r3, r3, #3
    c56e:	019b      	lsls	r3, r3, #6
    c570:	f043 0101 	orr.w	r1, r3, #1
    c574:	f014 fb24 	bl	20bc0 <log_0>
			net_buf_unref(buf);
    c578:	4638      	mov	r0, r7
    c57a:	f011 fd1d 	bl	1dfb8 <net_buf_unref>
}
    c57e:	4630      	mov	r0, r6
    c580:	b003      	add	sp, #12
    c582:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan->sent = cb ? cb : chan_cb(buf);
    c584:	b955      	cbnz	r5, c59c <chan_send+0x54>
	switch (att_op_get_type(buf->data[0])) {
    c586:	68bb      	ldr	r3, [r7, #8]
    c588:	7818      	ldrb	r0, [r3, #0]
    c58a:	f017 f878 	bl	2367e <att_op_get_type>
    c58e:	3801      	subs	r0, #1
    c590:	b2c0      	uxtb	r0, r0
    c592:	2804      	cmp	r0, #4
    c594:	bf9c      	itt	ls
    c596:	4b12      	ldrls	r3, [pc, #72]	; (c5e0 <chan_send+0x98>)
    c598:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
	return bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT, buf,
    c59c:	6823      	ldr	r3, [r4, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    c59e:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
	return bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT, buf,
    c5a2:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    c5a4:	4b0f      	ldr	r3, [pc, #60]	; (c5e4 <chan_send+0x9c>)
    c5a6:	429d      	cmp	r5, r3
    c5a8:	d010      	beq.n	c5cc <chan_send+0x84>
	} else if (cb == chan_cfm_sent) {
    c5aa:	4b0f      	ldr	r3, [pc, #60]	; (c5e8 <chan_send+0xa0>)
    c5ac:	429d      	cmp	r5, r3
    c5ae:	d00f      	beq.n	c5d0 <chan_send+0x88>
		return att_sent;
    c5b0:	490e      	ldr	r1, [pc, #56]	; (c5ec <chan_send+0xa4>)
    c5b2:	4b0f      	ldr	r3, [pc, #60]	; (c5f0 <chan_send+0xa8>)
    c5b4:	4a0f      	ldr	r2, [pc, #60]	; (c5f4 <chan_send+0xac>)
    c5b6:	428d      	cmp	r5, r1
    c5b8:	bf18      	it	ne
    c5ba:	4613      	movne	r3, r2
				att_cb(chan->sent), &chan->chan.chan);
    c5bc:	3408      	adds	r4, #8
	return bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT, buf,
    c5be:	9400      	str	r4, [sp, #0]
    c5c0:	463a      	mov	r2, r7
    c5c2:	2104      	movs	r1, #4
    c5c4:	f016 fe3a 	bl	2323c <bt_l2cap_send_cb>
    c5c8:	4606      	mov	r6, r0
    c5ca:	e7d8      	b.n	c57e <chan_send+0x36>
		return att_rsp_sent;
    c5cc:	4b0a      	ldr	r3, [pc, #40]	; (c5f8 <chan_send+0xb0>)
    c5ce:	e7f5      	b.n	c5bc <chan_send+0x74>
		return att_cfm_sent;
    c5d0:	4b0a      	ldr	r3, [pc, #40]	; (c5fc <chan_send+0xb4>)
    c5d2:	e7f3      	b.n	c5bc <chan_send+0x74>
    c5d4:	00026544 	.word	0x00026544
    c5d8:	00026544 	.word	0x00026544
    c5dc:	0002a091 	.word	0x0002a091
    c5e0:	00026bcc 	.word	0x00026bcc
    c5e4:	0002390d 	.word	0x0002390d
    c5e8:	000238f1 	.word	0x000238f1
    c5ec:	0000c375 	.word	0x0000c375
    c5f0:	0000c01d 	.word	0x0000c01d
    c5f4:	00023653 	.word	0x00023653
    c5f8:	0000c00d 	.word	0x0000c00d
    c5fc:	0000bffd 	.word	0x0000bffd

0000c600 <bt_att_chan_create_pdu>:
{
    c600:	b538      	push	{r3, r4, r5, lr}
    c602:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    c604:	f8b0 1066 	ldrh.w	r1, [r0, #102]	; 0x66
    c608:	3201      	adds	r2, #1
    c60a:	428a      	cmp	r2, r1
    c60c:	d90c      	bls.n	c628 <bt_att_chan_create_pdu+0x28>
    c60e:	481a      	ldr	r0, [pc, #104]	; (c678 <bt_att_chan_create_pdu+0x78>)
    c610:	4b1a      	ldr	r3, [pc, #104]	; (c67c <bt_att_chan_create_pdu+0x7c>)
    c612:	1a1b      	subs	r3, r3, r0
    c614:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    c616:	019b      	lsls	r3, r3, #6
    c618:	4819      	ldr	r0, [pc, #100]	; (c680 <bt_att_chan_create_pdu+0x80>)
    c61a:	f043 0302 	orr.w	r3, r3, #2
    c61e:	f014 faf0 	bl	20c02 <log_2>
		return NULL;
    c622:	2400      	movs	r4, #0
}
    c624:	4620      	mov	r0, r4
    c626:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    c628:	4628      	mov	r0, r5
    c62a:	f017 f828 	bl	2367e <att_op_get_type>
    c62e:	2802      	cmp	r0, #2
    c630:	d001      	beq.n	c636 <bt_att_chan_create_pdu+0x36>
    c632:	2804      	cmp	r0, #4
    c634:	d114      	bne.n	c660 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    c636:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    c63a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    c63c:	2100      	movs	r1, #0
    c63e:	4608      	mov	r0, r1
    c640:	f016 fdf9 	bl	23236 <bt_l2cap_create_pdu_timeout>
    c644:	4604      	mov	r4, r0
	if (!buf) {
    c646:	b980      	cbnz	r0, c66a <bt_att_chan_create_pdu+0x6a>
    c648:	4b0b      	ldr	r3, [pc, #44]	; (c678 <bt_att_chan_create_pdu+0x78>)
    c64a:	4a0c      	ldr	r2, [pc, #48]	; (c67c <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    c64c:	480d      	ldr	r0, [pc, #52]	; (c684 <bt_att_chan_create_pdu+0x84>)
    c64e:	1ad2      	subs	r2, r2, r3
    c650:	08d2      	lsrs	r2, r2, #3
    c652:	0192      	lsls	r2, r2, #6
    c654:	f042 0201 	orr.w	r2, r2, #1
    c658:	4629      	mov	r1, r5
    c65a:	f014 fabe 	bl	20bda <log_1>
		return NULL;
    c65e:	e7e1      	b.n	c624 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    c660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c668:	e7e8      	b.n	c63c <bt_att_chan_create_pdu+0x3c>
	hdr = net_buf_add(buf, sizeof(*hdr));
    c66a:	2101      	movs	r1, #1
    c66c:	3008      	adds	r0, #8
    c66e:	f018 febd 	bl	253ec <net_buf_simple_add>
	hdr->code = op;
    c672:	7005      	strb	r5, [r0, #0]
	return buf;
    c674:	e7d6      	b.n	c624 <bt_att_chan_create_pdu+0x24>
    c676:	bf00      	nop
    c678:	00026544 	.word	0x00026544
    c67c:	00026544 	.word	0x00026544
    c680:	0002a0a4 	.word	0x0002a0a4
    c684:	00029b9c 	.word	0x00029b9c

0000c688 <att_indicate>:
{
    c688:	b570      	push	{r4, r5, r6, lr}
    c68a:	4604      	mov	r4, r0
	handle = net_buf_pull_le16(buf);
    c68c:	f101 0008 	add.w	r0, r1, #8
{
    c690:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    c692:	f018 fef8 	bl	25486 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    c696:	6826      	ldr	r6, [r4, #0]
    c698:	89ab      	ldrh	r3, [r5, #12]
    c69a:	68aa      	ldr	r2, [r5, #8]
	handle = net_buf_pull_le16(buf);
    c69c:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    c69e:	6830      	ldr	r0, [r6, #0]
    c6a0:	f017 ff6d 	bl	2457e <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    c6a4:	211e      	movs	r1, #30
    c6a6:	2200      	movs	r2, #0
    c6a8:	4620      	mov	r0, r4
    c6aa:	f7ff ffa9 	bl	c600 <bt_att_chan_create_pdu>
	if (!buf) {
    c6ae:	4601      	mov	r1, r0
    c6b0:	b118      	cbz	r0, c6ba <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    c6b2:	4a03      	ldr	r2, [pc, #12]	; (c6c0 <att_indicate+0x38>)
    c6b4:	4620      	mov	r0, r4
    c6b6:	f017 fa13 	bl	23ae0 <bt_att_chan_send_rsp>
}
    c6ba:	2000      	movs	r0, #0
    c6bc:	bd70      	pop	{r4, r5, r6, pc}
    c6be:	bf00      	nop
    c6c0:	000238f1 	.word	0x000238f1

0000c6c4 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    c6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6c8:	4688      	mov	r8, r1
    c6ca:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    c6cc:	2101      	movs	r1, #1
    c6ce:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    c6d0:	4605      	mov	r5, r0
    c6d2:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    c6d4:	f7ff ff94 	bl	c600 <bt_att_chan_create_pdu>
	if (!buf) {
    c6d8:	4604      	mov	r4, r0
    c6da:	b178      	cbz	r0, c6fc <send_err_rsp.part.0+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    c6dc:	2104      	movs	r1, #4
    c6de:	3008      	adds	r0, #8
    c6e0:	f018 fe84 	bl	253ec <net_buf_simple_add>
	rsp->request = req;
    c6e4:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    c6e8:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    c6ea:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    c6ee:	4621      	mov	r1, r4
    c6f0:	4628      	mov	r0, r5
    c6f2:	4a03      	ldr	r2, [pc, #12]	; (c700 <send_err_rsp.part.0+0x3c>)
}
    c6f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    c6f8:	f017 b9f2 	b.w	23ae0 <bt_att_chan_send_rsp>
}
    c6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c700:	0002390d 	.word	0x0002390d

0000c704 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    c704:	898b      	ldrh	r3, [r1, #12]
{
    c706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c70a:	4604      	mov	r4, r0
    c70c:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    c70e:	b963      	cbnz	r3, c72a <bt_att_recv+0x26>
    c710:	494a      	ldr	r1, [pc, #296]	; (c83c <bt_att_recv+0x138>)
    c712:	4b4b      	ldr	r3, [pc, #300]	; (c840 <bt_att_recv+0x13c>)
		BT_ERR("Too small ATT PDU received");
    c714:	484b      	ldr	r0, [pc, #300]	; (c844 <bt_att_recv+0x140>)
    c716:	1ac9      	subs	r1, r1, r3
    c718:	08c9      	lsrs	r1, r1, #3
    c71a:	0189      	lsls	r1, r1, #6
    c71c:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    c720:	f014 fa4e 	bl	20bc0 <log_0>
}
    c724:	2000      	movs	r0, #0
    c726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    c72a:	2101      	movs	r1, #1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    c72c:	f1a0 0608 	sub.w	r6, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    c730:	f108 0008 	add.w	r0, r8, #8
    c734:	f018 fe97 	bl	25466 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    c738:	4a43      	ldr	r2, [pc, #268]	; (c848 <bt_att_recv+0x144>)
    c73a:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    c73c:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    c73e:	2300      	movs	r3, #0
    c740:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    c742:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    c746:	4288      	cmp	r0, r1
    c748:	d11d      	bne.n	c786 <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
    c74a:	00d8      	lsls	r0, r3, #3
    c74c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c750:	789f      	ldrb	r7, [r3, #2]
    c752:	2f01      	cmp	r7, #1
    c754:	d132      	bne.n	c7bc <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c756:	f3bf 8f5b 	dmb	ish
    c75a:	34c0      	adds	r4, #192	; 0xc0
    c75c:	e854 3f00 	ldrex	r3, [r4]
    c760:	f043 0201 	orr.w	r2, r3, #1
    c764:	e844 2100 	strex	r1, r2, [r4]
    c768:	2900      	cmp	r1, #0
    c76a:	d1f7      	bne.n	c75c <bt_att_recv+0x58>
    c76c:	f3bf 8f5b 	dmb	ish
    c770:	07da      	lsls	r2, r3, #31
    c772:	d53d      	bpl.n	c7f0 <bt_att_recv+0xec>
    c774:	4931      	ldr	r1, [pc, #196]	; (c83c <bt_att_recv+0x138>)
    c776:	4b32      	ldr	r3, [pc, #200]	; (c840 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected request");
    c778:	4834      	ldr	r0, [pc, #208]	; (c84c <bt_att_recv+0x148>)
    c77a:	1ac9      	subs	r1, r1, r3
    c77c:	08c9      	lsrs	r1, r1, #3
    c77e:	0189      	lsls	r1, r1, #6
    c780:	f041 0102 	orr.w	r1, r1, #2
    c784:	e7cc      	b.n	c720 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    c786:	3301      	adds	r3, #1
    c788:	2b1c      	cmp	r3, #28
    c78a:	d1da      	bne.n	c742 <bt_att_recv+0x3e>
    c78c:	4b2c      	ldr	r3, [pc, #176]	; (c840 <bt_att_recv+0x13c>)
    c78e:	4a2b      	ldr	r2, [pc, #172]	; (c83c <bt_att_recv+0x138>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    c790:	482f      	ldr	r0, [pc, #188]	; (c850 <bt_att_recv+0x14c>)
    c792:	1ad2      	subs	r2, r2, r3
    c794:	08d2      	lsrs	r2, r2, #3
    c796:	0192      	lsls	r2, r2, #6
    c798:	f042 0202 	orr.w	r2, r2, #2
    c79c:	f014 fa1d 	bl	20bda <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    c7a0:	7829      	ldrb	r1, [r5, #0]
    c7a2:	4608      	mov	r0, r1
    c7a4:	f016 ff6b 	bl	2367e <att_op_get_type>
    c7a8:	2800      	cmp	r0, #0
    c7aa:	d0bb      	beq.n	c724 <bt_att_recv+0x20>
	if (!req) {
    c7ac:	2900      	cmp	r1, #0
    c7ae:	d0b9      	beq.n	c724 <bt_att_recv+0x20>
    c7b0:	2306      	movs	r3, #6
    c7b2:	2200      	movs	r2, #0
    c7b4:	4630      	mov	r0, r6
    c7b6:	f7ff ff85 	bl	c6c4 <send_err_rsp.part.0>
    c7ba:	e7b3      	b.n	c724 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    c7bc:	2f05      	cmp	r7, #5
    c7be:	d117      	bne.n	c7f0 <bt_att_recv+0xec>
    c7c0:	f3bf 8f5b 	dmb	ish
    c7c4:	34c0      	adds	r4, #192	; 0xc0
    c7c6:	e854 3f00 	ldrex	r3, [r4]
    c7ca:	f043 0202 	orr.w	r2, r3, #2
    c7ce:	e844 2100 	strex	r1, r2, [r4]
    c7d2:	2900      	cmp	r1, #0
    c7d4:	d1f7      	bne.n	c7c6 <bt_att_recv+0xc2>
    c7d6:	f3bf 8f5b 	dmb	ish
    c7da:	079b      	lsls	r3, r3, #30
    c7dc:	d508      	bpl.n	c7f0 <bt_att_recv+0xec>
    c7de:	4917      	ldr	r1, [pc, #92]	; (c83c <bt_att_recv+0x138>)
    c7e0:	4b17      	ldr	r3, [pc, #92]	; (c840 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected indication");
    c7e2:	481c      	ldr	r0, [pc, #112]	; (c854 <bt_att_recv+0x150>)
    c7e4:	1ac9      	subs	r1, r1, r3
    c7e6:	08c9      	lsrs	r1, r1, #3
    c7e8:	0189      	lsls	r1, r1, #6
    c7ea:	f041 0102 	orr.w	r1, r1, #2
    c7ee:	e797      	b.n	c720 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    c7f0:	eb0c 0300 	add.w	r3, ip, r0
    c7f4:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    c7f8:	785a      	ldrb	r2, [r3, #1]
    c7fa:	428a      	cmp	r2, r1
    c7fc:	d90e      	bls.n	c81c <bt_att_recv+0x118>
    c7fe:	4a10      	ldr	r2, [pc, #64]	; (c840 <bt_att_recv+0x13c>)
    c800:	4b0e      	ldr	r3, [pc, #56]	; (c83c <bt_att_recv+0x138>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    c802:	4815      	ldr	r0, [pc, #84]	; (c858 <bt_att_recv+0x154>)
    c804:	1a9b      	subs	r3, r3, r2
    c806:	08db      	lsrs	r3, r3, #3
    c808:	019b      	lsls	r3, r3, #6
    c80a:	782a      	ldrb	r2, [r5, #0]
    c80c:	f043 0301 	orr.w	r3, r3, #1
    c810:	f014 f9f7 	bl	20c02 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    c814:	2f01      	cmp	r7, #1
    c816:	d185      	bne.n	c724 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    c818:	2304      	movs	r3, #4
    c81a:	e00a      	b.n	c832 <bt_att_recv+0x12e>
		err = handler->func(att_chan, buf);
    c81c:	685b      	ldr	r3, [r3, #4]
    c81e:	4641      	mov	r1, r8
    c820:	4630      	mov	r0, r6
    c822:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    c824:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    c826:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    c828:	f47f af7c 	bne.w	c724 <bt_att_recv+0x20>
    c82c:	2800      	cmp	r0, #0
    c82e:	f43f af79 	beq.w	c724 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    c832:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    c834:	2900      	cmp	r1, #0
    c836:	f43f af75 	beq.w	c724 <bt_att_recv+0x20>
    c83a:	e7ba      	b.n	c7b2 <bt_att_recv+0xae>
    c83c:	00026544 	.word	0x00026544
    c840:	00026544 	.word	0x00026544
    c844:	0002a0c9 	.word	0x0002a0c9
    c848:	00026be0 	.word	0x00026be0
    c84c:	0002a0e4 	.word	0x0002a0e4
    c850:	0002a13e 	.word	0x0002a13e
    c854:	0002a100 	.word	0x0002a100
    c858:	0002a11f 	.word	0x0002a11f

0000c85c <att_write_rsp>:
{
    c85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c860:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c862:	6803      	ldr	r3, [r0, #0]
    c864:	460e      	mov	r6, r1
    c866:	3900      	subs	r1, #0
{
    c868:	b086      	sub	sp, #24
    c86a:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c86c:	bf18      	it	ne
    c86e:	2101      	movne	r1, #1
    c870:	6818      	ldr	r0, [r3, #0]
{
    c872:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c874:	f017 feaf 	bl	245d6 <bt_gatt_change_aware>
    c878:	2800      	cmp	r0, #0
    c87a:	d04e      	beq.n	c91a <att_write_rsp+0xbe>
	if (!handle) {
    c87c:	2f00      	cmp	r7, #0
    c87e:	d04e      	beq.n	c91e <att_write_rsp+0xc2>
	(void)memset(&data, 0, sizeof(data));
    c880:	2218      	movs	r2, #24
    c882:	2100      	movs	r1, #0
    c884:	4668      	mov	r0, sp
    c886:	f015 ff76 	bl	22776 <memset>
	if (rsp) {
    c88a:	f1b8 0f00 	cmp.w	r8, #0
    c88e:	d126      	bne.n	c8de <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    c890:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c892:	4a24      	ldr	r2, [pc, #144]	; (c924 <att_write_rsp+0xc8>)
	data.conn = chan->att->conn;
    c894:	681b      	ldr	r3, [r3, #0]
    c896:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    c898:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    c89c:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    c8a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c8a2:	9303      	str	r3, [sp, #12]
	data.len = len;
    c8a4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    c8a8:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c8ac:	2301      	movs	r3, #1
    c8ae:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c8b2:	4639      	mov	r1, r7
    c8b4:	466b      	mov	r3, sp
    c8b6:	4638      	mov	r0, r7
	data.req = req;
    c8b8:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c8bc:	f016 ff25 	bl	2370a <bt_gatt_foreach_attr>
	if (data.err) {
    c8c0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c8c4:	b30c      	cbz	r4, c90a <att_write_rsp+0xae>
		if (rsp) {
    c8c6:	f1b8 0f00 	cmp.w	r8, #0
    c8ca:	d019      	beq.n	c900 <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    c8cc:	9801      	ldr	r0, [sp, #4]
    c8ce:	f011 fb73 	bl	1dfb8 <net_buf_unref>
	if (!req) {
    c8d2:	b976      	cbnz	r6, c8f2 <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    c8d4:	2400      	movs	r4, #0
}
    c8d6:	4620      	mov	r0, r4
    c8d8:	b006      	add	sp, #24
    c8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    c8de:	2200      	movs	r2, #0
    c8e0:	4641      	mov	r1, r8
    c8e2:	4628      	mov	r0, r5
    c8e4:	f7ff fe8c 	bl	c600 <bt_att_chan_create_pdu>
    c8e8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    c8ea:	2800      	cmp	r0, #0
    c8ec:	d1d0      	bne.n	c890 <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    c8ee:	240e      	movs	r4, #14
    c8f0:	e7f1      	b.n	c8d6 <att_write_rsp+0x7a>
    c8f2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c8f6:	463a      	mov	r2, r7
    c8f8:	4631      	mov	r1, r6
    c8fa:	4628      	mov	r0, r5
    c8fc:	f7ff fee2 	bl	c6c4 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    c900:	2e18      	cmp	r6, #24
    c902:	d1e7      	bne.n	c8d4 <att_write_rsp+0x78>
    c904:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c908:	e7e5      	b.n	c8d6 <att_write_rsp+0x7a>
	if (data.buf) {
    c90a:	9901      	ldr	r1, [sp, #4]
    c90c:	2900      	cmp	r1, #0
    c90e:	d0e1      	beq.n	c8d4 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c910:	4a05      	ldr	r2, [pc, #20]	; (c928 <att_write_rsp+0xcc>)
    c912:	4628      	mov	r0, r5
    c914:	f017 f8e4 	bl	23ae0 <bt_att_chan_send_rsp>
    c918:	e7dd      	b.n	c8d6 <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c91a:	2412      	movs	r4, #18
    c91c:	e7db      	b.n	c8d6 <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    c91e:	2401      	movs	r4, #1
    c920:	e7d9      	b.n	c8d6 <att_write_rsp+0x7a>
    c922:	bf00      	nop
    c924:	00023929 	.word	0x00023929
    c928:	0002390d 	.word	0x0002390d

0000c92c <bt_att_create_pdu>:
{
    c92c:	b570      	push	{r4, r5, r6, lr}
    c92e:	460e      	mov	r6, r1
    c930:	4615      	mov	r5, r2
	att = att_get(conn);
    c932:	f7ff fcdf 	bl	c2f4 <att_get>
	if (!att) {
    c936:	b1c0      	cbz	r0, c96a <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c938:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	return list->head;
    c93a:	1c69      	adds	r1, r5, #1
    c93c:	b15b      	cbz	r3, c956 <bt_att_create_pdu+0x2a>
    c93e:	f5b3 709a 	subs.w	r0, r3, #308	; 0x134
    c942:	d008      	beq.n	c956 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c944:	681b      	ldr	r3, [r3, #0]
    c946:	b10b      	cbz	r3, c94c <bt_att_create_pdu+0x20>
    c948:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    c94c:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    c950:	4291      	cmp	r1, r2
    c952:	d90c      	bls.n	c96e <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c954:	b98b      	cbnz	r3, c97a <bt_att_create_pdu+0x4e>
    c956:	4a0e      	ldr	r2, [pc, #56]	; (c990 <bt_att_create_pdu+0x64>)
    c958:	4b0e      	ldr	r3, [pc, #56]	; (c994 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    c95a:	480f      	ldr	r0, [pc, #60]	; (c998 <bt_att_create_pdu+0x6c>)
    c95c:	1ad2      	subs	r2, r2, r3
    c95e:	08d2      	lsrs	r2, r2, #3
    c960:	0192      	lsls	r2, r2, #6
    c962:	f042 0202 	orr.w	r2, r2, #2
    c966:	f014 f938 	bl	20bda <log_1>
}
    c96a:	2000      	movs	r0, #0
    c96c:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    c96e:	462a      	mov	r2, r5
    c970:	4631      	mov	r1, r6
}
    c972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    c976:	f7ff be43 	b.w	c600 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    c97a:	f513 749a 	adds.w	r4, r3, #308	; 0x134
    c97e:	d004      	beq.n	c98a <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c980:	f8d3 4134 	ldr.w	r4, [r3, #308]	; 0x134
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c984:	b10c      	cbz	r4, c98a <bt_att_create_pdu+0x5e>
    c986:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
{
    c98a:	4618      	mov	r0, r3
    c98c:	4623      	mov	r3, r4
    c98e:	e7dd      	b.n	c94c <bt_att_create_pdu+0x20>
    c990:	00026544 	.word	0x00026544
    c994:	00026544 	.word	0x00026544
    c998:	0002a158 	.word	0x0002a158

0000c99c <att_exec_write_req>:
{
    c99c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
    c9a0:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
    c9a2:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
    c9a4:	f893 8000 	ldrb.w	r8, [r3]
{
    c9a8:	4606      	mov	r6, r0
	uint8_t err = 0U;
    c9aa:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
    c9ac:	6830      	ldr	r0, [r6, #0]
    c9ae:	2200      	movs	r2, #0
    c9b0:	2300      	movs	r3, #0
    c9b2:	3024      	adds	r0, #36	; 0x24
    c9b4:	f018 fcb7 	bl	25326 <net_buf_get>
    c9b8:	4605      	mov	r5, r0
    c9ba:	b978      	cbnz	r0, c9dc <att_exec_write_req+0x40>
	if (err) {
    c9bc:	bb54      	cbnz	r4, ca14 <att_exec_write_req+0x78>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    c9be:	2119      	movs	r1, #25
    c9c0:	4622      	mov	r2, r4
    c9c2:	4638      	mov	r0, r7
    c9c4:	f7ff ffb2 	bl	c92c <bt_att_create_pdu>
	if (!buf) {
    c9c8:	4601      	mov	r1, r0
    c9ca:	b328      	cbz	r0, ca18 <att_exec_write_req+0x7c>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    c9cc:	4a13      	ldr	r2, [pc, #76]	; (ca1c <att_exec_write_req+0x80>)
    c9ce:	4630      	mov	r0, r6
    c9d0:	f017 f886 	bl	23ae0 <bt_att_chan_send_rsp>
}
    c9d4:	4620      	mov	r0, r4
    c9d6:	b004      	add	sp, #16
    c9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    c9dc:	b9b4      	cbnz	r4, ca0c <att_exec_write_req+0x70>
    c9de:	f1b8 0f01 	cmp.w	r8, #1
    c9e2:	d113      	bne.n	ca0c <att_exec_write_req+0x70>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    c9e4:	89aa      	ldrh	r2, [r5, #12]
    c9e6:	8aab      	ldrh	r3, [r5, #20]
    c9e8:	9202      	str	r2, [sp, #8]
    c9ea:	68aa      	ldr	r2, [r5, #8]
    c9ec:	9201      	str	r2, [sp, #4]
    c9ee:	8aea      	ldrh	r2, [r5, #22]
    c9f0:	9200      	str	r2, [sp, #0]
    c9f2:	2118      	movs	r1, #24
    c9f4:	4622      	mov	r2, r4
    c9f6:	4630      	mov	r0, r6
    c9f8:	f7ff ff30 	bl	c85c <att_write_rsp>
			if (err) {
    c9fc:	4604      	mov	r4, r0
    c9fe:	b128      	cbz	r0, ca0c <att_exec_write_req+0x70>
	if (!req) {
    ca00:	4603      	mov	r3, r0
    ca02:	8aaa      	ldrh	r2, [r5, #20]
    ca04:	2118      	movs	r1, #24
    ca06:	4630      	mov	r0, r6
    ca08:	f7ff fe5c 	bl	c6c4 <send_err_rsp.part.0>
		net_buf_unref(buf);
    ca0c:	4628      	mov	r0, r5
    ca0e:	f011 fad3 	bl	1dfb8 <net_buf_unref>
    ca12:	e7cb      	b.n	c9ac <att_exec_write_req+0x10>
		return 0;
    ca14:	4604      	mov	r4, r0
    ca16:	e7dd      	b.n	c9d4 <att_exec_write_req+0x38>
		return BT_ATT_ERR_UNLIKELY;
    ca18:	240e      	movs	r4, #14
    ca1a:	e7db      	b.n	c9d4 <att_exec_write_req+0x38>
    ca1c:	0002390d 	.word	0x0002390d

0000ca20 <att_prepare_write_req>:
{
    ca20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca24:	460c      	mov	r4, r1
    ca26:	b087      	sub	sp, #28
    ca28:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    ca2a:	2104      	movs	r1, #4
    ca2c:	f104 0008 	add.w	r0, r4, #8
    ca30:	f018 fd19 	bl	25466 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    ca34:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    ca38:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    ca3c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    ca40:	f8d4 8008 	ldr.w	r8, [r4, #8]
    ca44:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    ca46:	2101      	movs	r1, #1
    ca48:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    ca4a:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    ca4e:	f017 fdc2 	bl	245d6 <bt_gatt_change_aware>
    ca52:	2800      	cmp	r0, #0
    ca54:	d04b      	beq.n	caee <att_prepare_write_req+0xce>
	if (!handle) {
    ca56:	2e00      	cmp	r6, #0
    ca58:	d04b      	beq.n	caf2 <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    ca5a:	2214      	movs	r2, #20
    ca5c:	2100      	movs	r1, #0
    ca5e:	a801      	add	r0, sp, #4
    ca60:	f015 fe89 	bl	22776 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    ca64:	2301      	movs	r3, #1
    ca66:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    ca6a:	4a24      	ldr	r2, [pc, #144]	; (cafc <att_prepare_write_req+0xdc>)
	data.conn = conn;
    ca6c:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    ca70:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    ca72:	ab01      	add	r3, sp, #4
    ca74:	4631      	mov	r1, r6
    ca76:	4630      	mov	r0, r6
	data.offset = offset;
    ca78:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    ca7c:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    ca80:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    ca84:	f016 fe41 	bl	2370a <bt_gatt_foreach_attr>
	if (data.err) {
    ca88:	f89d 4014 	ldrb.w	r4, [sp, #20]
    ca8c:	b154      	cbz	r4, caa4 <att_prepare_write_req+0x84>
	if (!req) {
    ca8e:	4623      	mov	r3, r4
    ca90:	4632      	mov	r2, r6
    ca92:	2116      	movs	r1, #22
    ca94:	4628      	mov	r0, r5
    ca96:	f7ff fe15 	bl	c6c4 <send_err_rsp.part.0>
		return 0;
    ca9a:	2400      	movs	r4, #0
}
    ca9c:	4620      	mov	r0, r4
    ca9e:	b007      	add	sp, #28
    caa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    caa4:	6828      	ldr	r0, [r5, #0]
    caa6:	9902      	ldr	r1, [sp, #8]
    caa8:	3024      	adds	r0, #36	; 0x24
    caaa:	f018 fc60 	bl	2536e <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    caae:	4622      	mov	r2, r4
    cab0:	2117      	movs	r1, #23
    cab2:	4658      	mov	r0, fp
    cab4:	f7ff ff3a 	bl	c92c <bt_att_create_pdu>
    cab8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    caba:	b1e0      	cbz	r0, caf6 <att_prepare_write_req+0xd6>
	rsp = net_buf_add(data.buf, sizeof(*rsp));
    cabc:	2104      	movs	r1, #4
    cabe:	3008      	adds	r0, #8
    cac0:	f018 fc94 	bl	253ec <net_buf_simple_add>
    cac4:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    cac6:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    caca:	f8a0 9002 	strh.w	r9, [r0, #2]
	net_buf_add(data.buf, len);
    cace:	9802      	ldr	r0, [sp, #8]
    cad0:	4639      	mov	r1, r7
    cad2:	3008      	adds	r0, #8
    cad4:	f018 fc8a 	bl	253ec <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    cad8:	463a      	mov	r2, r7
    cada:	4641      	mov	r1, r8
    cadc:	1d30      	adds	r0, r6, #4
    cade:	f015 fe1f 	bl	22720 <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cae2:	4a07      	ldr	r2, [pc, #28]	; (cb00 <att_prepare_write_req+0xe0>)
    cae4:	9902      	ldr	r1, [sp, #8]
    cae6:	4628      	mov	r0, r5
    cae8:	f016 fffa 	bl	23ae0 <bt_att_chan_send_rsp>
	return 0;
    caec:	e7d6      	b.n	ca9c <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    caee:	2412      	movs	r4, #18
    caf0:	e7d4      	b.n	ca9c <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    caf2:	2401      	movs	r4, #1
    caf4:	e7d2      	b.n	ca9c <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    caf6:	240e      	movs	r4, #14
    caf8:	e7d0      	b.n	ca9c <att_prepare_write_req+0x7c>
    cafa:	bf00      	nop
    cafc:	0000c4cd 	.word	0x0000c4cd
    cb00:	0002390d 	.word	0x0002390d

0000cb04 <att_read_group_req>:
{
    cb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    cb08:	7b0c      	ldrb	r4, [r1, #12]
    cb0a:	3c04      	subs	r4, #4
    cb0c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    cb0e:	2c02      	cmp	r4, #2
{
    cb10:	4605      	mov	r5, r0
    cb12:	b08c      	sub	sp, #48	; 0x30
    cb14:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    cb16:	d001      	beq.n	cb1c <att_read_group_req+0x18>
    cb18:	2c10      	cmp	r4, #16
    cb1a:	d16f      	bne.n	cbfc <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
    cb1c:	2104      	movs	r1, #4
    cb1e:	3008      	adds	r0, #8
    cb20:	f018 fca1 	bl	25466 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cb24:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    cb28:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    cb2a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cb2c:	1d01      	adds	r1, r0, #4
    cb2e:	4622      	mov	r2, r4
    cb30:	4640      	mov	r0, r8
    cb32:	f015 feee 	bl	22912 <bt_uuid_create>
    cb36:	2800      	cmp	r0, #0
    cb38:	d062      	beq.n	cc00 <att_read_group_req+0xfc>
	if (!start || !end) {
    cb3a:	2e00      	cmp	r6, #0
    cb3c:	d03a      	beq.n	cbb4 <att_read_group_req+0xb0>
    cb3e:	2400      	movs	r4, #0
    cb40:	2f00      	cmp	r7, #0
    cb42:	d036      	beq.n	cbb2 <att_read_group_req+0xae>
	if (start > end) {
    cb44:	42be      	cmp	r6, r7
    cb46:	d835      	bhi.n	cbb4 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    cb48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    cb4c:	a901      	add	r1, sp, #4
    cb4e:	4640      	mov	r0, r8
    cb50:	f88d 4004 	strb.w	r4, [sp, #4]
    cb54:	f8ad 3006 	strh.w	r3, [sp, #6]
    cb58:	f015 feb1 	bl	228be <bt_uuid_cmp>
    cb5c:	2800      	cmp	r0, #0
    cb5e:	d134      	bne.n	cbca <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    cb60:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    cb62:	2214      	movs	r2, #20
    cb64:	2100      	movs	r1, #0
    cb66:	a807      	add	r0, sp, #28
    cb68:	f015 fe05 	bl	22776 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    cb6c:	2201      	movs	r2, #1
    cb6e:	2111      	movs	r1, #17
    cb70:	4620      	mov	r0, r4
    cb72:	f7ff fedb 	bl	c92c <bt_att_create_pdu>
    cb76:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    cb78:	2800      	cmp	r0, #0
    cb7a:	d041      	beq.n	cc00 <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cb7c:	2101      	movs	r1, #1
    cb7e:	3008      	adds	r0, #8
	data.uuid = uuid;
    cb80:	e9cd 5807 	strd	r5, r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cb84:	f018 fc32 	bl	253ec <net_buf_simple_add>
	data.rsp->len = 0U;
    cb88:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cb8c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    cb8e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    cb90:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    cb94:	4a1b      	ldr	r2, [pc, #108]	; (cc04 <att_read_group_req+0x100>)
	data.group = NULL;
    cb96:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    cb9a:	4639      	mov	r1, r7
    cb9c:	4630      	mov	r0, r6
    cb9e:	f016 fdb4 	bl	2370a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    cba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cba4:	781c      	ldrb	r4, [r3, #0]
    cba6:	bb1c      	cbnz	r4, cbf0 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    cba8:	9809      	ldr	r0, [sp, #36]	; 0x24
    cbaa:	f011 fa05 	bl	1dfb8 <net_buf_unref>
	if (!req) {
    cbae:	230a      	movs	r3, #10
    cbb0:	e018      	b.n	cbe4 <att_read_group_req+0xe0>
			*err = 0U;
    cbb2:	463e      	mov	r6, r7
	if (!req) {
    cbb4:	2301      	movs	r3, #1
    cbb6:	4632      	mov	r2, r6
    cbb8:	2110      	movs	r1, #16
    cbba:	4628      	mov	r0, r5
    cbbc:	f7ff fd82 	bl	c6c4 <send_err_rsp.part.0>
		return 0;
    cbc0:	2400      	movs	r4, #0
}
    cbc2:	4620      	mov	r0, r4
    cbc4:	b00c      	add	sp, #48	; 0x30
    cbc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    cbca:	f642 0301 	movw	r3, #10241	; 0x2801
    cbce:	a907      	add	r1, sp, #28
    cbd0:	4640      	mov	r0, r8
    cbd2:	f88d 401c 	strb.w	r4, [sp, #28]
    cbd6:	f8ad 301e 	strh.w	r3, [sp, #30]
    cbda:	f015 fe70 	bl	228be <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    cbde:	2800      	cmp	r0, #0
    cbe0:	d0be      	beq.n	cb60 <att_read_group_req+0x5c>
	if (!req) {
    cbe2:	2310      	movs	r3, #16
    cbe4:	4632      	mov	r2, r6
    cbe6:	2110      	movs	r1, #16
    cbe8:	4628      	mov	r0, r5
    cbea:	f7ff fd6b 	bl	c6c4 <send_err_rsp.part.0>
		return 0;
    cbee:	e7e8      	b.n	cbc2 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cbf0:	4a05      	ldr	r2, [pc, #20]	; (cc08 <att_read_group_req+0x104>)
    cbf2:	9909      	ldr	r1, [sp, #36]	; 0x24
    cbf4:	4628      	mov	r0, r5
    cbf6:	f016 ff73 	bl	23ae0 <bt_att_chan_send_rsp>
	return 0;
    cbfa:	e7e1      	b.n	cbc0 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    cbfc:	2404      	movs	r4, #4
    cbfe:	e7e0      	b.n	cbc2 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    cc00:	240e      	movs	r4, #14
    cc02:	e7de      	b.n	cbc2 <att_read_group_req+0xbe>
    cc04:	0000c045 	.word	0x0000c045
    cc08:	0002390d 	.word	0x0002390d

0000cc0c <att_read_mult_req>:
{
    cc0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    cc10:	6886      	ldr	r6, [r0, #8]
{
    cc12:	b087      	sub	sp, #28
	(void)memset(&data, 0, sizeof(data));
    cc14:	2214      	movs	r2, #20
{
    cc16:	4604      	mov	r4, r0
    cc18:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    cc1a:	a801      	add	r0, sp, #4
    cc1c:	2100      	movs	r1, #0
    cc1e:	f015 fdaa 	bl	22776 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    cc22:	2200      	movs	r2, #0
    cc24:	210f      	movs	r1, #15
    cc26:	4630      	mov	r0, r6
    cc28:	f7ff fe80 	bl	c92c <bt_att_create_pdu>
    cc2c:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    cc2e:	b360      	cbz	r0, cc8a <att_read_mult_req+0x7e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cc30:	f8df 9060 	ldr.w	r9, [pc, #96]	; cc94 <att_read_mult_req+0x88>
	data.chan = chan;
    cc34:	9401      	str	r4, [sp, #4]
		handle = net_buf_pull_le16(buf);
    cc36:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    cc3a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    cc3e:	89ab      	ldrh	r3, [r5, #12]
    cc40:	2b01      	cmp	r3, #1
    cc42:	d805      	bhi.n	cc50 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cc44:	4a12      	ldr	r2, [pc, #72]	; (cc90 <att_read_mult_req+0x84>)
    cc46:	9903      	ldr	r1, [sp, #12]
    cc48:	4620      	mov	r0, r4
    cc4a:	f016 ff49 	bl	23ae0 <bt_att_chan_send_rsp>
    cc4e:	e018      	b.n	cc82 <att_read_mult_req+0x76>
		handle = net_buf_pull_le16(buf);
    cc50:	4638      	mov	r0, r7
    cc52:	f018 fc18 	bl	25486 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cc56:	ab01      	add	r3, sp, #4
    cc58:	464a      	mov	r2, r9
    cc5a:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    cc5c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    cc5e:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cc62:	f016 fd52 	bl	2370a <bt_gatt_foreach_attr>
		if (data.err) {
    cc66:	f89d 3014 	ldrb.w	r3, [sp, #20]
    cc6a:	2b00      	cmp	r3, #0
    cc6c:	d0e7      	beq.n	cc3e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    cc6e:	9803      	ldr	r0, [sp, #12]
    cc70:	f011 f9a2 	bl	1dfb8 <net_buf_unref>
	if (!req) {
    cc74:	f89d 3014 	ldrb.w	r3, [sp, #20]
    cc78:	4632      	mov	r2, r6
    cc7a:	210e      	movs	r1, #14
    cc7c:	4620      	mov	r0, r4
    cc7e:	f7ff fd21 	bl	c6c4 <send_err_rsp.part.0>
	return 0;
    cc82:	2000      	movs	r0, #0
}
    cc84:	b007      	add	sp, #28
    cc86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    cc8a:	200e      	movs	r0, #14
    cc8c:	e7fa      	b.n	cc84 <att_read_mult_req+0x78>
    cc8e:	bf00      	nop
    cc90:	0002390d 	.word	0x0002390d
    cc94:	00023985 	.word	0x00023985

0000cc98 <att_read_rsp>:
{
    cc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    cc9c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    cca0:	b086      	sub	sp, #24
    cca2:	4605      	mov	r5, r0
    cca4:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    cca6:	4640      	mov	r0, r8
    cca8:	2101      	movs	r1, #1
{
    ccaa:	4614      	mov	r4, r2
    ccac:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    ccae:	f017 fc92 	bl	245d6 <bt_gatt_change_aware>
    ccb2:	b390      	cbz	r0, cd1a <att_read_rsp+0x82>
	if (!handle) {
    ccb4:	b39e      	cbz	r6, cd1e <att_read_rsp+0x86>
	(void)memset(&data, 0, sizeof(data));
    ccb6:	2214      	movs	r2, #20
    ccb8:	2100      	movs	r1, #0
    ccba:	a801      	add	r0, sp, #4
    ccbc:	f015 fd5b 	bl	22776 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    ccc0:	2200      	movs	r2, #0
    ccc2:	4621      	mov	r1, r4
    ccc4:	4640      	mov	r0, r8
    ccc6:	f7ff fe31 	bl	c92c <bt_att_create_pdu>
    ccca:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    cccc:	b348      	cbz	r0, cd22 <att_read_rsp+0x8a>
	data.offset = offset;
    ccce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    ccd2:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    ccd6:	2301      	movs	r3, #1
    ccd8:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    ccdc:	4a12      	ldr	r2, [pc, #72]	; (cd28 <att_read_rsp+0x90>)
	data.chan = chan;
    ccde:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cce0:	ab01      	add	r3, sp, #4
    cce2:	4631      	mov	r1, r6
    cce4:	4630      	mov	r0, r6
    cce6:	f016 fd10 	bl	2370a <bt_gatt_foreach_attr>
	if (data.err) {
    ccea:	f89d 4014 	ldrb.w	r4, [sp, #20]
    ccee:	b174      	cbz	r4, cd0e <att_read_rsp+0x76>
		net_buf_unref(data.buf);
    ccf0:	9803      	ldr	r0, [sp, #12]
    ccf2:	f011 f961 	bl	1dfb8 <net_buf_unref>
	if (!req) {
    ccf6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ccfa:	4632      	mov	r2, r6
    ccfc:	4639      	mov	r1, r7
    ccfe:	4628      	mov	r0, r5
    cd00:	f7ff fce0 	bl	c6c4 <send_err_rsp.part.0>
		return 0;
    cd04:	2400      	movs	r4, #0
}
    cd06:	4620      	mov	r0, r4
    cd08:	b006      	add	sp, #24
    cd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cd0e:	4a07      	ldr	r2, [pc, #28]	; (cd2c <att_read_rsp+0x94>)
    cd10:	9903      	ldr	r1, [sp, #12]
    cd12:	4628      	mov	r0, r5
    cd14:	f016 fee4 	bl	23ae0 <bt_att_chan_send_rsp>
	return 0;
    cd18:	e7f5      	b.n	cd06 <att_read_rsp+0x6e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    cd1a:	2412      	movs	r4, #18
    cd1c:	e7f3      	b.n	cd06 <att_read_rsp+0x6e>
		return BT_ATT_ERR_INVALID_HANDLE;
    cd1e:	2401      	movs	r4, #1
    cd20:	e7f1      	b.n	cd06 <att_read_rsp+0x6e>
		return BT_ATT_ERR_UNLIKELY;
    cd22:	240e      	movs	r4, #14
    cd24:	e7ef      	b.n	cd06 <att_read_rsp+0x6e>
    cd26:	bf00      	nop
    cd28:	00023985 	.word	0x00023985
    cd2c:	0002390d 	.word	0x0002390d

0000cd30 <att_read_type_req>:
{
    cd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    cd34:	7b0c      	ldrb	r4, [r1, #12]
    cd36:	3c04      	subs	r4, #4
    cd38:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    cd3a:	2c02      	cmp	r4, #2
{
    cd3c:	4605      	mov	r5, r0
    cd3e:	b08c      	sub	sp, #48	; 0x30
    cd40:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    cd42:	d001      	beq.n	cd48 <att_read_type_req+0x18>
    cd44:	2c10      	cmp	r4, #16
    cd46:	d150      	bne.n	cdea <att_read_type_req+0xba>
	req = net_buf_pull_mem(buf, sizeof(*req));
    cd48:	2104      	movs	r1, #4
    cd4a:	3008      	adds	r0, #8
    cd4c:	f018 fb8b 	bl	25466 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cd50:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    cd54:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    cd56:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cd58:	1d01      	adds	r1, r0, #4
    cd5a:	4622      	mov	r2, r4
    cd5c:	4640      	mov	r0, r8
    cd5e:	f015 fdd8 	bl	22912 <bt_uuid_create>
    cd62:	b188      	cbz	r0, cd88 <att_read_type_req+0x58>
	if (!start || !end) {
    cd64:	b19e      	cbz	r6, cd8e <att_read_type_req+0x5e>
    cd66:	b18f      	cbz	r7, cd8c <att_read_type_req+0x5c>
	if (start > end) {
    cd68:	42b7      	cmp	r7, r6
    cd6a:	d310      	bcc.n	cd8e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    cd6c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    cd6e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    cd70:	2100      	movs	r1, #0
    cd72:	eb0d 0002 	add.w	r0, sp, r2
    cd76:	f015 fcfe 	bl	22776 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    cd7a:	2201      	movs	r2, #1
    cd7c:	2109      	movs	r1, #9
    cd7e:	4620      	mov	r0, r4
    cd80:	f7ff fdd4 	bl	c92c <bt_att_create_pdu>
    cd84:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    cd86:	b968      	cbnz	r0, cda4 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    cd88:	240e      	movs	r4, #14
    cd8a:	e007      	b.n	cd9c <att_read_type_req+0x6c>
			*err = 0U;
    cd8c:	463e      	mov	r6, r7
	if (!req) {
    cd8e:	2301      	movs	r3, #1
    cd90:	4632      	mov	r2, r6
    cd92:	2108      	movs	r1, #8
    cd94:	4628      	mov	r0, r5
    cd96:	f7ff fc95 	bl	c6c4 <send_err_rsp.part.0>
		return 0;
    cd9a:	2400      	movs	r4, #0
}
    cd9c:	4620      	mov	r0, r4
    cd9e:	b00c      	add	sp, #48	; 0x30
    cda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cda4:	2101      	movs	r1, #1
    cda6:	3008      	adds	r0, #8
	data.uuid = uuid;
    cda8:	e9cd 5806 	strd	r5, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cdac:	f018 fb1e 	bl	253ec <net_buf_simple_add>
	data.rsp->len = 0U;
    cdb0:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    cdb4:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cdb6:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cdb8:	4a0d      	ldr	r2, [pc, #52]	; (cdf0 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    cdba:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cdbe:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    cdc0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cdc4:	4630      	mov	r0, r6
    cdc6:	ab06      	add	r3, sp, #24
    cdc8:	f016 fc9f 	bl	2370a <bt_gatt_foreach_attr>
	if (data.err) {
    cdcc:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    cdd0:	b12c      	cbz	r4, cdde <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    cdd2:	9808      	ldr	r0, [sp, #32]
    cdd4:	f011 f8f0 	bl	1dfb8 <net_buf_unref>
	if (!req) {
    cdd8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    cddc:	e7d8      	b.n	cd90 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cdde:	4a05      	ldr	r2, [pc, #20]	; (cdf4 <att_read_type_req+0xc4>)
    cde0:	9908      	ldr	r1, [sp, #32]
    cde2:	4628      	mov	r0, r5
    cde4:	f016 fe7c 	bl	23ae0 <bt_att_chan_send_rsp>
	return 0;
    cde8:	e7d8      	b.n	cd9c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    cdea:	2404      	movs	r4, #4
    cdec:	e7d6      	b.n	cd9c <att_read_type_req+0x6c>
    cdee:	bf00      	nop
    cdf0:	0000c0ed 	.word	0x0000c0ed
    cdf4:	0002390d 	.word	0x0002390d

0000cdf8 <att_find_type_req>:
{
    cdf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cdfc:	4688      	mov	r8, r1
    cdfe:	b086      	sub	sp, #24
    ce00:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    ce02:	2106      	movs	r1, #6
    ce04:	f108 0008 	add.w	r0, r8, #8
    ce08:	f018 fb2d 	bl	25466 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    ce0c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    ce0e:	b317      	cbz	r7, ce56 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    ce10:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    ce14:	f1b9 0f00 	cmp.w	r9, #0
    ce18:	d01c      	beq.n	ce54 <att_find_type_req+0x5c>
	if (start > end) {
    ce1a:	454f      	cmp	r7, r9
    ce1c:	d81b      	bhi.n	ce56 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    ce1e:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    ce20:	f8ad 3002 	strh.w	r3, [sp, #2]
    ce24:	2400      	movs	r4, #0
    ce26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    ce2a:	a901      	add	r1, sp, #4
    ce2c:	4668      	mov	r0, sp
	value = buf->data;
    ce2e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    ce32:	f88d 4000 	strb.w	r4, [sp]
    ce36:	f88d 4004 	strb.w	r4, [sp, #4]
    ce3a:	f8ad 3006 	strh.w	r3, [sp, #6]
    ce3e:	f015 fd3e 	bl	228be <bt_uuid_cmp>
    ce42:	4606      	mov	r6, r0
    ce44:	b190      	cbz	r0, ce6c <att_find_type_req+0x74>
	if (!req) {
    ce46:	230a      	movs	r3, #10
    ce48:	463a      	mov	r2, r7
    ce4a:	2106      	movs	r1, #6
    ce4c:	4628      	mov	r0, r5
    ce4e:	f7ff fc39 	bl	c6c4 <send_err_rsp.part.0>
		return 0;
    ce52:	e007      	b.n	ce64 <att_find_type_req+0x6c>
			*err = 0U;
    ce54:	464f      	mov	r7, r9
	if (!req) {
    ce56:	2301      	movs	r3, #1
    ce58:	463a      	mov	r2, r7
    ce5a:	2106      	movs	r1, #6
    ce5c:	4628      	mov	r0, r5
    ce5e:	f7ff fc31 	bl	c6c4 <send_err_rsp.part.0>
		return 0;
    ce62:	2400      	movs	r4, #0
}
    ce64:	4620      	mov	r0, r4
    ce66:	b006      	add	sp, #24
    ce68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    ce6c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    ce70:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    ce74:	4601      	mov	r1, r0
    ce76:	2214      	movs	r2, #20
    ce78:	a801      	add	r0, sp, #4
    ce7a:	f015 fc7c 	bl	22776 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    ce7e:	4632      	mov	r2, r6
    ce80:	2107      	movs	r1, #7
    ce82:	4640      	mov	r0, r8
    ce84:	f7ff fd52 	bl	c92c <bt_att_create_pdu>
    ce88:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    ce8a:	b1e0      	cbz	r0, cec6 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    ce8c:	230a      	movs	r3, #10
    ce8e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ce92:	4a0e      	ldr	r2, [pc, #56]	; (cecc <att_find_type_req+0xd4>)
	data.value_len = value_len;
    ce94:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ce98:	ab01      	add	r3, sp, #4
    ce9a:	4649      	mov	r1, r9
    ce9c:	4638      	mov	r0, r7
	data.value = value;
    ce9e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    cea2:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    cea4:	f016 fc31 	bl	2370a <bt_gatt_foreach_attr>
	if (data.err) {
    cea8:	f89d 4015 	ldrb.w	r4, [sp, #21]
    ceac:	b12c      	cbz	r4, ceba <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    ceae:	9802      	ldr	r0, [sp, #8]
    ceb0:	f011 f882 	bl	1dfb8 <net_buf_unref>
	if (!req) {
    ceb4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ceb8:	e7ce      	b.n	ce58 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    ceba:	4a05      	ldr	r2, [pc, #20]	; (ced0 <att_find_type_req+0xd8>)
    cebc:	9902      	ldr	r1, [sp, #8]
    cebe:	4628      	mov	r0, r5
    cec0:	f016 fe0e 	bl	23ae0 <bt_att_chan_send_rsp>
	return 0;
    cec4:	e7ce      	b.n	ce64 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    cec6:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    cec8:	e7cc      	b.n	ce64 <att_find_type_req+0x6c>
    ceca:	bf00      	nop
    cecc:	0000c191 	.word	0x0000c191
    ced0:	0002390d 	.word	0x0002390d

0000ced4 <att_find_info_req>:
{
    ced4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    ced6:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    ced8:	881e      	ldrh	r6, [r3, #0]
{
    ceda:	b085      	sub	sp, #20
    cedc:	4605      	mov	r5, r0
	if (!start || !end) {
    cede:	b19e      	cbz	r6, cf08 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    cee0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    cee2:	b184      	cbz	r4, cf06 <att_find_info_req+0x32>
	if (start > end) {
    cee4:	42b4      	cmp	r4, r6
    cee6:	d30f      	bcc.n	cf08 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    cee8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    ceea:	2210      	movs	r2, #16
    ceec:	2100      	movs	r1, #0
    ceee:	4668      	mov	r0, sp
    cef0:	f015 fc41 	bl	22776 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    cef4:	2200      	movs	r2, #0
    cef6:	2105      	movs	r1, #5
    cef8:	4638      	mov	r0, r7
    cefa:	f7ff fd17 	bl	c92c <bt_att_create_pdu>
    cefe:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    cf00:	b958      	cbnz	r0, cf1a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    cf02:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    cf04:	e007      	b.n	cf16 <att_find_info_req+0x42>
			*err = 0U;
    cf06:	4626      	mov	r6, r4
	if (!req) {
    cf08:	2301      	movs	r3, #1
    cf0a:	4632      	mov	r2, r6
    cf0c:	2104      	movs	r1, #4
    cf0e:	4628      	mov	r0, r5
    cf10:	f7ff fbd8 	bl	c6c4 <send_err_rsp.part.0>
	return 0;
    cf14:	2000      	movs	r0, #0
}
    cf16:	b005      	add	sp, #20
    cf18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    cf1a:	4621      	mov	r1, r4
    cf1c:	4a09      	ldr	r2, [pc, #36]	; (cf44 <att_find_info_req+0x70>)
	data.chan = chan;
    cf1e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    cf20:	466b      	mov	r3, sp
    cf22:	4630      	mov	r0, r6
    cf24:	f016 fbf1 	bl	2370a <bt_gatt_foreach_attr>
	if (!data.rsp) {
    cf28:	9c02      	ldr	r4, [sp, #8]
    cf2a:	b924      	cbnz	r4, cf36 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    cf2c:	9801      	ldr	r0, [sp, #4]
    cf2e:	f011 f843 	bl	1dfb8 <net_buf_unref>
	if (!req) {
    cf32:	230a      	movs	r3, #10
    cf34:	e7e9      	b.n	cf0a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cf36:	4a04      	ldr	r2, [pc, #16]	; (cf48 <att_find_info_req+0x74>)
    cf38:	9901      	ldr	r1, [sp, #4]
    cf3a:	4628      	mov	r0, r5
    cf3c:	f016 fdd0 	bl	23ae0 <bt_att_chan_send_rsp>
    cf40:	e7e8      	b.n	cf14 <att_find_info_req+0x40>
    cf42:	bf00      	nop
    cf44:	00023721 	.word	0x00023721
    cf48:	0002390d 	.word	0x0002390d

0000cf4c <att_mtu_req>:
{
    cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    cf4e:	6803      	ldr	r3, [r0, #0]
{
    cf50:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
    cf52:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cf54:	f3bf 8f5b 	dmb	ish
    cf58:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    cf5c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    cf60:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    cf64:	071b      	lsls	r3, r3, #28
    cf66:	d41f      	bmi.n	cfa8 <att_mtu_req+0x5c>
	mtu_client = sys_le16_to_cpu(req->mtu);
    cf68:	688b      	ldr	r3, [r1, #8]
    cf6a:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    cf6c:	2e16      	cmp	r6, #22
    cf6e:	d91d      	bls.n	cfac <att_mtu_req+0x60>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    cf70:	2202      	movs	r2, #2
    cf72:	2103      	movs	r1, #3
    cf74:	f7ff fcda 	bl	c92c <bt_att_create_pdu>
	if (!pdu) {
    cf78:	4607      	mov	r7, r0
    cf7a:	b1c8      	cbz	r0, cfb0 <att_mtu_req+0x64>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    cf7c:	2102      	movs	r1, #2
    cf7e:	3008      	adds	r0, #8
    cf80:	f018 fa34 	bl	253ec <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    cf84:	f06f 0308 	mvn.w	r3, #8
    cf88:	7003      	strb	r3, [r0, #0]
    cf8a:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    cf8c:	4a09      	ldr	r2, [pc, #36]	; (cfb4 <att_mtu_req+0x68>)
    cf8e:	4628      	mov	r0, r5
    cf90:	4639      	mov	r1, r7
    cf92:	f016 fda5 	bl	23ae0 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    cf96:	2ef7      	cmp	r6, #247	; 0xf7
    cf98:	bf28      	it	cs
    cf9a:	26f7      	movcs	r6, #247	; 0xf7
    cf9c:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    cfa0:	f8a5 6066 	strh.w	r6, [r5, #102]	; 0x66
	return 0;
    cfa4:	4620      	mov	r0, r4
}
    cfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    cfa8:	2006      	movs	r0, #6
    cfaa:	e7fc      	b.n	cfa6 <att_mtu_req+0x5a>
		return BT_ATT_ERR_INVALID_PDU;
    cfac:	2004      	movs	r0, #4
    cfae:	e7fa      	b.n	cfa6 <att_mtu_req+0x5a>
		return BT_ATT_ERR_UNLIKELY;
    cfb0:	200e      	movs	r0, #14
    cfb2:	e7f8      	b.n	cfa6 <att_mtu_req+0x5a>
    cfb4:	0002390d 	.word	0x0002390d

0000cfb8 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    cfb8:	b513      	push	{r0, r1, r4, lr}
    cfba:	4602      	mov	r2, r0
    cfbc:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    cfbe:	4808      	ldr	r0, [pc, #32]	; (cfe0 <bt_att_req_alloc+0x28>)
    cfc0:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    cfc2:	2400      	movs	r4, #0
    cfc4:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    cfc6:	f012 f98f 	bl	1f2e8 <k_mem_slab_alloc>
    cfca:	4601      	mov	r1, r0
    cfcc:	b930      	cbnz	r0, cfdc <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    cfce:	9801      	ldr	r0, [sp, #4]
    cfd0:	221c      	movs	r2, #28
    cfd2:	f015 fbd0 	bl	22776 <memset>

	return req;
    cfd6:	9801      	ldr	r0, [sp, #4]
}
    cfd8:	b002      	add	sp, #8
    cfda:	bd10      	pop	{r4, pc}
		return NULL;
    cfdc:	4620      	mov	r0, r4
    cfde:	e7fb      	b.n	cfd8 <bt_att_req_alloc+0x20>
    cfe0:	200007bc 	.word	0x200007bc

0000cfe4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    cfe4:	b507      	push	{r0, r1, r2, lr}
    cfe6:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    cfe8:	a901      	add	r1, sp, #4
    cfea:	4803      	ldr	r0, [pc, #12]	; (cff8 <bt_att_req_free+0x14>)
    cfec:	f012 f9ae 	bl	1f34c <k_mem_slab_free>
}
    cff0:	b003      	add	sp, #12
    cff2:	f85d fb04 	ldr.w	pc, [sp], #4
    cff6:	bf00      	nop
    cff8:	200007bc 	.word	0x200007bc

0000cffc <att_handle_rsp>:
{
    cffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d000:	4605      	mov	r5, r0
    d002:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    d004:	30e8      	adds	r0, #232	; 0xe8
{
    d006:	4689      	mov	r9, r1
    d008:	4692      	mov	sl, r2
    d00a:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    d00c:	f018 ffa6 	bl	25f5c <k_delayed_work_cancel>
	if (!chan->req) {
    d010:	f8d5 40cc 	ldr.w	r4, [r5, #204]	; 0xcc
    d014:	bb64      	cbnz	r4, d070 <att_handle_rsp+0x74>
    d016:	4932      	ldr	r1, [pc, #200]	; (d0e0 <att_handle_rsp+0xe4>)
    d018:	4b32      	ldr	r3, [pc, #200]	; (d0e4 <att_handle_rsp+0xe8>)
		BT_WARN("No pending ATT request");
    d01a:	4833      	ldr	r0, [pc, #204]	; (d0e8 <att_handle_rsp+0xec>)
    d01c:	1ac9      	subs	r1, r1, r3
    d01e:	08c9      	lsrs	r1, r1, #3
    d020:	0189      	lsls	r1, r1, #6
    d022:	f041 0102 	orr.w	r1, r1, #2
    d026:	f013 fdcb 	bl	20bc0 <log_0>
	att_process(chan->att);
    d02a:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
    d02e:	f10b 0004 	add.w	r0, fp, #4
    d032:	f016 fae1 	bl	235f8 <sys_slist_get>
	if (!node) {
    d036:	4607      	mov	r7, r0
    d038:	2800      	cmp	r0, #0
    d03a:	d039      	beq.n	d0b0 <att_handle_rsp+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d03c:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
    d040:	b15a      	cbz	r2, d05a <att_handle_rsp+0x5e>
    d042:	f5b2 709a 	subs.w	r0, r2, #308	; 0x134
    d046:	d008      	beq.n	d05a <att_handle_rsp+0x5e>
    d048:	6816      	ldr	r6, [r2, #0]
    d04a:	b10e      	cbz	r6, d050 <att_handle_rsp+0x54>
    d04c:	f5a6 769a 	sub.w	r6, r6, #308	; 0x134
		if (!chan->req) {
    d050:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
    d054:	b33a      	cbz	r2, d0a6 <att_handle_rsp+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d056:	2e00      	cmp	r6, #0
    d058:	d137      	bne.n	d0ca <att_handle_rsp+0xce>
Z_GENLIST_PREPEND(slist, snode)
    d05a:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
    d05e:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
    d060:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    d064:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    d068:	bb12      	cbnz	r2, d0b0 <att_handle_rsp+0xb4>
	list->tail = node;
    d06a:	f8cb 7008 	str.w	r7, [fp, #8]
}
    d06e:	e01f      	b.n	d0b0 <att_handle_rsp+0xb4>
	if (chan->req == &cancel) {
    d070:	4b1e      	ldr	r3, [pc, #120]	; (d0ec <att_handle_rsp+0xf0>)
    d072:	429c      	cmp	r4, r3
    d074:	d103      	bne.n	d07e <att_handle_rsp+0x82>
		chan->req = NULL;
    d076:	2400      	movs	r4, #0
    d078:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
		goto process;
    d07c:	e7d5      	b.n	d02a <att_handle_rsp+0x2e>
	if (chan->req->buf) {
    d07e:	6920      	ldr	r0, [r4, #16]
    d080:	b128      	cbz	r0, d08e <att_handle_rsp+0x92>
		net_buf_unref(chan->req->buf);
    d082:	f010 ff99 	bl	1dfb8 <net_buf_unref>
		chan->req->buf = NULL;
    d086:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    d08a:	2200      	movs	r2, #0
    d08c:	611a      	str	r2, [r3, #16]
	func = chan->req->func;
    d08e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
	chan->req->func = NULL;
    d092:	2600      	movs	r6, #0
	func = chan->req->func;
    d094:	6844      	ldr	r4, [r0, #4]
	params = chan->req->user_data;
    d096:	6983      	ldr	r3, [r0, #24]
	chan->req->func = NULL;
    d098:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    d09a:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
    d09c:	f016 fdef 	bl	23c7e <att_req_destroy>
	chan->req = NULL;
    d0a0:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
    d0a4:	e7c1      	b.n	d02a <att_handle_rsp+0x2e>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    d0a6:	4639      	mov	r1, r7
    d0a8:	f016 fcc6 	bl	23a38 <bt_att_chan_req_send>
    d0ac:	2800      	cmp	r0, #0
    d0ae:	dbd2      	blt.n	d056 <att_handle_rsp+0x5a>
	if (func) {
    d0b0:	b13c      	cbz	r4, d0c2 <att_handle_rsp+0xc6>
		func(chan->att->conn, err, pdu, len, params);
    d0b2:	9b03      	ldr	r3, [sp, #12]
    d0b4:	6828      	ldr	r0, [r5, #0]
    d0b6:	9300      	str	r3, [sp, #0]
    d0b8:	6800      	ldr	r0, [r0, #0]
    d0ba:	4653      	mov	r3, sl
    d0bc:	464a      	mov	r2, r9
    d0be:	4641      	mov	r1, r8
    d0c0:	47a0      	blx	r4
}
    d0c2:	2000      	movs	r0, #0
    d0c4:	b005      	add	sp, #20
    d0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    d0ca:	f516 729a 	adds.w	r2, r6, #308	; 0x134
    d0ce:	d004      	beq.n	d0da <att_handle_rsp+0xde>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d0d0:	f8d6 2134 	ldr.w	r2, [r6, #308]	; 0x134
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d0d4:	b10a      	cbz	r2, d0da <att_handle_rsp+0xde>
    d0d6:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
	bt_att_func_t func = NULL;
    d0da:	4630      	mov	r0, r6
    d0dc:	4616      	mov	r6, r2
    d0de:	e7b7      	b.n	d050 <att_handle_rsp+0x54>
    d0e0:	00026544 	.word	0x00026544
    d0e4:	00026544 	.word	0x00026544
    d0e8:	0002a173 	.word	0x0002a173
    d0ec:	200019bc 	.word	0x200019bc

0000d0f0 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
    d0f0:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
{
    d0f4:	b570      	push	{r4, r5, r6, lr}
    d0f6:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
    d0f8:	b352      	cbz	r2, d150 <att_error_rsp+0x60>
    d0fa:	4b1a      	ldr	r3, [pc, #104]	; (d164 <att_error_rsp+0x74>)
    d0fc:	429a      	cmp	r2, r3
    d0fe:	d027      	beq.n	d150 <att_error_rsp+0x60>
	if (chan->req->buf) {
    d100:	6913      	ldr	r3, [r2, #16]
	rsp = (void *)buf->data;
    d102:	6888      	ldr	r0, [r1, #8]
	if (chan->req->buf) {
    d104:	b12b      	cbz	r3, d112 <att_error_rsp+0x22>
	buf->data = buf->__buf + state->offset;
    d106:	8995      	ldrh	r5, [r2, #12]
    d108:	6919      	ldr	r1, [r3, #16]
    d10a:	4429      	add	r1, r5
    d10c:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    d10e:	89d1      	ldrh	r1, [r2, #14]
    d110:	8199      	strh	r1, [r3, #12]
	if (chan->req->retrying) {
    d112:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    d114:	78c5      	ldrb	r5, [r0, #3]
	if (chan->req->retrying) {
    d116:	b9e3      	cbnz	r3, d152 <att_error_rsp+0x62>
	switch (err) {
    d118:	2d05      	cmp	r5, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
    d11a:	68a0      	ldr	r0, [r4, #8]
	switch (err) {
    d11c:	d006      	beq.n	d12c <att_error_rsp+0x3c>
    d11e:	2d0f      	cmp	r5, #15
    d120:	d117      	bne.n	d152 <att_error_rsp+0x62>
		if (conn->sec_level >= BT_SECURITY_L2)
    d122:	7a43      	ldrb	r3, [r0, #9]
    d124:	2b01      	cmp	r3, #1
    d126:	d814      	bhi.n	d152 <att_error_rsp+0x62>
		sec = BT_SECURITY_L2;
    d128:	2102      	movs	r1, #2
    d12a:	e007      	b.n	d13c <att_error_rsp+0x4c>
		if (conn->sec_level < BT_SECURITY_L2) {
    d12c:	7a43      	ldrb	r3, [r0, #9]
    d12e:	2b01      	cmp	r3, #1
    d130:	d9fa      	bls.n	d128 <att_error_rsp+0x38>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    d132:	2b02      	cmp	r3, #2
    d134:	d00a      	beq.n	d14c <att_error_rsp+0x5c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    d136:	2b03      	cmp	r3, #3
    d138:	d10b      	bne.n	d152 <att_error_rsp+0x62>
			sec = BT_SECURITY_L4;
    d13a:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
    d13c:	f015 fe60 	bl	22e00 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
    d140:	b938      	cbnz	r0, d152 <att_error_rsp+0x62>
		chan->req->retrying = true;
    d142:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    d146:	2201      	movs	r2, #1
    d148:	751a      	strb	r2, [r3, #20]
}
    d14a:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
    d14c:	2103      	movs	r1, #3
    d14e:	e7f5      	b.n	d13c <att_error_rsp+0x4c>
		err = BT_ATT_ERR_UNLIKELY;
    d150:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
    d152:	2200      	movs	r2, #0
    d154:	462b      	mov	r3, r5
    d156:	4620      	mov	r0, r4
    d158:	4611      	mov	r1, r2
}
    d15a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
    d15e:	f7ff bf4d 	b.w	cffc <att_handle_rsp>
    d162:	bf00      	nop
    d164:	200019bc 	.word	0x200019bc

0000d168 <bt_att_encrypt_change>:
{
    d168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d16c:	4605      	mov	r5, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    d16e:	f1a0 0608 	sub.w	r6, r0, #8
	if (hci_status) {
    d172:	460c      	mov	r4, r1
    d174:	b139      	cbz	r1, d186 <bt_att_encrypt_change+0x1e>
		att_handle_rsp(att_chan, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    d176:	2200      	movs	r2, #0
    d178:	4630      	mov	r0, r6
    d17a:	2305      	movs	r3, #5
}
    d17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		att_handle_rsp(att_chan, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    d180:	4611      	mov	r1, r2
    d182:	f7ff bf3b 	b.w	cffc <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    d186:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
    d188:	4638      	mov	r0, r7
    d18a:	f001 fcf1 	bl	eb70 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
    d18e:	7a7b      	ldrb	r3, [r7, #9]
    d190:	2b01      	cmp	r3, #1
    d192:	d018      	beq.n	d1c6 <bt_att_encrypt_change+0x5e>
	if (!att_chan->req || !att_chan->req->retrying) {
    d194:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    d198:	b1ab      	cbz	r3, d1c6 <bt_att_encrypt_change+0x5e>
    d19a:	7d1a      	ldrb	r2, [r3, #20]
    d19c:	b19a      	cbz	r2, d1c6 <bt_att_encrypt_change+0x5e>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    d19e:	6919      	ldr	r1, [r3, #16]
	switch (att_op_get_type(buf->data[0])) {
    d1a0:	688b      	ldr	r3, [r1, #8]
    d1a2:	7818      	ldrb	r0, [r3, #0]
    d1a4:	f016 fa6b 	bl	2367e <att_op_get_type>
    d1a8:	1e43      	subs	r3, r0, #1
    d1aa:	b2db      	uxtb	r3, r3
    d1ac:	2b04      	cmp	r3, #4
    d1ae:	bf96      	itet	ls
    d1b0:	4a06      	ldrls	r2, [pc, #24]	; (d1cc <bt_att_encrypt_change+0x64>)
    d1b2:	4622      	movhi	r2, r4
    d1b4:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    d1b8:	4630      	mov	r0, r6
    d1ba:	f016 fc91 	bl	23ae0 <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
    d1be:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    d1c2:	2200      	movs	r2, #0
    d1c4:	611a      	str	r2, [r3, #16]
}
    d1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d1ca:	bf00      	nop
    d1cc:	00026bcc 	.word	0x00026bcc

0000d1d0 <att_reset>:
{
    d1d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    d1d2:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    d1d4:	9803      	ldr	r0, [sp, #12]
    d1d6:	2200      	movs	r2, #0
    d1d8:	2300      	movs	r3, #0
    d1da:	3024      	adds	r0, #36	; 0x24
    d1dc:	f018 f8a3 	bl	25326 <net_buf_get>
    d1e0:	b980      	cbnz	r0, d204 <att_reset+0x34>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    d1e2:	9803      	ldr	r0, [sp, #12]
    d1e4:	2200      	movs	r2, #0
    d1e6:	2300      	movs	r3, #0
    d1e8:	300c      	adds	r0, #12
    d1ea:	f018 f89c 	bl	25326 <net_buf_get>
    d1ee:	b960      	cbnz	r0, d20a <att_reset+0x3a>
	att->conn = NULL;
    d1f0:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    d1f2:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
    d1f4:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    d1f6:	b95d      	cbnz	r5, d210 <att_reset+0x40>
	k_mem_slab_free(&att_slab, (void **)&att);
    d1f8:	4812      	ldr	r0, [pc, #72]	; (d244 <att_reset+0x74>)
    d1fa:	a903      	add	r1, sp, #12
    d1fc:	f012 f8a6 	bl	1f34c <k_mem_slab_free>
}
    d200:	b004      	add	sp, #16
    d202:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    d204:	f010 fed8 	bl	1dfb8 <net_buf_unref>
    d208:	e7e4      	b.n	d1d4 <att_reset+0x4>
		net_buf_unref(buf);
    d20a:	f010 fed5 	bl	1dfb8 <net_buf_unref>
    d20e:	e7e8      	b.n	d1e2 <att_reset+0x12>
	return node->next;
    d210:	682c      	ldr	r4, [r5, #0]
    d212:	2c00      	cmp	r4, #0
    d214:	bf38      	it	cc
    d216:	2400      	movcc	r4, #0
		if (req->func) {
    d218:	686e      	ldr	r6, [r5, #4]
    d21a:	b136      	cbz	r6, d22a <att_reset+0x5a>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    d21c:	69ab      	ldr	r3, [r5, #24]
    d21e:	9300      	str	r3, [sp, #0]
    d220:	2300      	movs	r3, #0
    d222:	461a      	mov	r2, r3
    d224:	210e      	movs	r1, #14
    d226:	4618      	mov	r0, r3
    d228:	47b0      	blx	r6
		att_req_destroy(req);
    d22a:	4628      	mov	r0, r5
    d22c:	f016 fd27 	bl	23c7e <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    d230:	2c00      	cmp	r4, #0
    d232:	d0e1      	beq.n	d1f8 <att_reset+0x28>
    d234:	6823      	ldr	r3, [r4, #0]
    d236:	2b00      	cmp	r3, #0
    d238:	bf38      	it	cc
    d23a:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d23c:	4625      	mov	r5, r4
    d23e:	461c      	mov	r4, r3
    d240:	e7ea      	b.n	d218 <att_reset+0x48>
    d242:	bf00      	nop
    d244:	20000784 	.word	0x20000784

0000d248 <att_timeout>:
    d248:	4b0e      	ldr	r3, [pc, #56]	; (d284 <att_timeout+0x3c>)
    d24a:	490f      	ldr	r1, [pc, #60]	; (d288 <att_timeout+0x40>)
{
    d24c:	b570      	push	{r4, r5, r6, lr}
    d24e:	1ac9      	subs	r1, r1, r3
	struct bt_att *att = chan->att;
    d250:	4605      	mov	r5, r0
    d252:	08c9      	lsrs	r1, r1, #3
    d254:	f855 6de8 	ldr.w	r6, [r5, #-232]!
	BT_ERR("ATT Timeout");
    d258:	0189      	lsls	r1, r1, #6
    d25a:	f041 0101 	orr.w	r1, r1, #1
{
    d25e:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    d260:	480a      	ldr	r0, [pc, #40]	; (d28c <att_timeout+0x44>)
    d262:	f013 fcad 	bl	20bc0 <log_0>
	att_chan_detach(chan);
    d266:	4628      	mov	r0, r5
    d268:	f016 fd47 	bl	23cfa <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
    d26c:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
    d26e:	b945      	cbnz	r5, d282 <att_timeout+0x3a>
	att_reset(att);
    d270:	4630      	mov	r0, r6
    d272:	f7ff ffad 	bl	d1d0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    d276:	f854 0ce0 	ldr.w	r0, [r4, #-224]
    d27a:	f001 fcaf 	bl	ebdc <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    d27e:	f844 5ce0 	str.w	r5, [r4, #-224]
}
    d282:	bd70      	pop	{r4, r5, r6, pc}
    d284:	00026544 	.word	0x00026544
    d288:	00026544 	.word	0x00026544
    d28c:	0002a18a 	.word	0x0002a18a

0000d290 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    d290:	b510      	push	{r4, lr}
    d292:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    d294:	b348      	cbz	r0, d2ea <bt_att_req_cancel+0x5a>
    d296:	b341      	cbz	r1, d2ea <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
    d298:	f7ff f82c 	bl	c2f4 <att_get>
	if (!att) {
    d29c:	b328      	cbz	r0, d2ea <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d29e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    d2a0:	b15b      	cbz	r3, d2ba <bt_att_req_cancel+0x2a>
    d2a2:	f5b3 719a 	subs.w	r1, r3, #308	; 0x134
    d2a6:	d008      	beq.n	d2ba <bt_att_req_cancel+0x2a>
    d2a8:	681b      	ldr	r3, [r3, #0]
    d2aa:	b10b      	cbz	r3, d2b0 <bt_att_req_cancel+0x20>
    d2ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
	if (chan->req != req) {
    d2b0:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
    d2b4:	4294      	cmp	r4, r2
    d2b6:	d005      	beq.n	d2c4 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d2b8:	b963      	cbnz	r3, d2d4 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    d2ba:	4621      	mov	r1, r4
    d2bc:	3004      	adds	r0, #4
    d2be:	f016 f9a5 	bl	2360c <sys_slist_find_and_remove>
    d2c2:	e002      	b.n	d2ca <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
    d2c4:	4b09      	ldr	r3, [pc, #36]	; (d2ec <bt_att_req_cancel+0x5c>)
    d2c6:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc

	att_req_destroy(req);
    d2ca:	4620      	mov	r0, r4
}
    d2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    d2d0:	f016 bcd5 	b.w	23c7e <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d2d4:	f513 729a 	adds.w	r2, r3, #308	; 0x134
    d2d8:	d004      	beq.n	d2e4 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d2da:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d2de:	b10a      	cbz	r2, d2e4 <bt_att_req_cancel+0x54>
    d2e0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
{
    d2e4:	4619      	mov	r1, r3
    d2e6:	4613      	mov	r3, r2
    d2e8:	e7e2      	b.n	d2b0 <bt_att_req_cancel+0x20>
}
    d2ea:	bd10      	pop	{r4, pc}
    d2ec:	200019bc 	.word	0x200019bc

0000d2f0 <find_static_attr>:

	return BT_GATT_ITER_CONTINUE;
}

static uint16_t find_static_attr(const struct bt_gatt_attr *attr)
{
    d2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2f2:	490f      	ldr	r1, [pc, #60]	; (d330 <find_static_attr+0x40>)
	uint16_t handle = 1;

	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d2f4:	4f0f      	ldr	r7, [pc, #60]	; (d334 <find_static_attr+0x44>)
{
    d2f6:	4604      	mov	r4, r0
	uint16_t handle = 1;
    d2f8:	2501      	movs	r5, #1
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
			if (attr == &static_svc->attrs[i]) {
    d2fa:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d2fe:	f1a1 0308 	sub.w	r3, r1, #8
    d302:	42bb      	cmp	r3, r7
    d304:	d211      	bcs.n	d32a <find_static_attr+0x3a>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    d306:	f851 6c04 	ldr.w	r6, [r1, #-4]
    d30a:	2200      	movs	r2, #0
    d30c:	e006      	b.n	d31c <find_static_attr+0x2c>
			if (attr == &static_svc->attrs[i]) {
    d30e:	f851 3c08 	ldr.w	r3, [r1, #-8]
    d312:	fb0c 3302 	mla	r3, ip, r2, r3
    d316:	429c      	cmp	r4, r3
    d318:	d008      	beq.n	d32c <find_static_attr+0x3c>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    d31a:	3201      	adds	r2, #1
    d31c:	18ab      	adds	r3, r5, r2
    d31e:	4296      	cmp	r6, r2
    d320:	b298      	uxth	r0, r3
    d322:	d1f4      	bne.n	d30e <find_static_attr+0x1e>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d324:	3108      	adds	r1, #8
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    d326:	4605      	mov	r5, r0
    d328:	e7e9      	b.n	d2fe <find_static_attr+0xe>
				return handle;
			}
		}
	}

	return 0;
    d32a:	2000      	movs	r0, #0
}
    d32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d32e:	bf00      	nop
    d330:	00026534 	.word	0x00026534
    d334:	00026544 	.word	0x00026544

0000d338 <notify_mult_process>:

	return ret;
}

static void notify_mult_process(struct k_work *work)
{
    d338:	b538      	push	{r3, r4, r5, lr}

	/* Send to any connection with an allocated buffer */
	for (i = 0; i < ARRAY_SIZE(nfy_mult); i++) {
		struct net_buf **buf = &nfy_mult[i];

		if (*buf) {
    d33a:	4c0e      	ldr	r4, [pc, #56]	; (d374 <notify_mult_process+0x3c>)
    d33c:	6823      	ldr	r3, [r4, #0]
    d33e:	b14b      	cbz	r3, d354 <notify_mult_process+0x1c>
			struct bt_conn *conn = bt_conn_lookup_index(i);
    d340:	2000      	movs	r0, #0
    d342:	f7fd fd33 	bl	adac <bt_conn_lookup_index>

			gatt_notify_mult_send(conn, buf);
    d346:	4621      	mov	r1, r4
			struct bt_conn *conn = bt_conn_lookup_index(i);
    d348:	4605      	mov	r5, r0
			gatt_notify_mult_send(conn, buf);
    d34a:	f016 fe06 	bl	23f5a <gatt_notify_mult_send>
			bt_conn_unref(conn);
    d34e:	4628      	mov	r0, r5
    d350:	f015 fdb2 	bl	22eb8 <bt_conn_unref>
		if (*buf) {
    d354:	6863      	ldr	r3, [r4, #4]
    d356:	b15b      	cbz	r3, d370 <notify_mult_process+0x38>
			struct bt_conn *conn = bt_conn_lookup_index(i);
    d358:	2001      	movs	r0, #1
    d35a:	f7fd fd27 	bl	adac <bt_conn_lookup_index>
			gatt_notify_mult_send(conn, buf);
    d35e:	4906      	ldr	r1, [pc, #24]	; (d378 <notify_mult_process+0x40>)
			struct bt_conn *conn = bt_conn_lookup_index(i);
    d360:	4604      	mov	r4, r0
			gatt_notify_mult_send(conn, buf);
    d362:	f016 fdfa 	bl	23f5a <gatt_notify_mult_send>
			bt_conn_unref(conn);
    d366:	4620      	mov	r0, r4
		}
	}
}
    d368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			bt_conn_unref(conn);
    d36c:	f015 bda4 	b.w	22eb8 <bt_conn_unref>
}
    d370:	bd38      	pop	{r3, r4, r5, pc}
    d372:	bf00      	nop
    d374:	20001a0c 	.word	0x20001a0c
    d378:	20001a10 	.word	0x20001a10

0000d37c <gatt_send.constprop.0>:
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
}

static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    d37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d380:	4606      	mov	r6, r0
    d382:	4688      	mov	r8, r1
    d384:	4617      	mov	r7, r2
		     bt_att_func_t func, void *params,
		     bt_att_destroy_t destroy)
{
	int err;

	if (params) {
    d386:	461c      	mov	r4, r3
    d388:	b34b      	cbz	r3, d3de <gatt_send.constprop.0+0x62>
		struct bt_att_req *req;

		/* Allocate new request */
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    d38a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    d38e:	2100      	movs	r1, #0
    d390:	f7ff fe12 	bl	cfb8 <bt_att_req_alloc>
		if (!req) {
    d394:	4605      	mov	r5, r0
    d396:	b920      	cbnz	r0, d3a2 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
    d398:	f06f 040b 	mvn.w	r4, #11
	if (err) {
		BT_ERR("Error sending ATT PDU: %d", err);
	}

	return err;
}
    d39c:	4620      	mov	r0, r4
    d39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
    d3a2:	2300      	movs	r3, #0
		req->user_data = params;
    d3a4:	6184      	str	r4, [r0, #24]
		req->buf = buf;
    d3a6:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    d3aa:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    d3ac:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    d3ae:	4601      	mov	r1, r0
    d3b0:	4630      	mov	r0, r6
    d3b2:	f016 fd24 	bl	23dfe <bt_att_req_send>
		if (err) {
    d3b6:	4604      	mov	r4, r0
    d3b8:	2800      	cmp	r0, #0
    d3ba:	d0ef      	beq.n	d39c <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
    d3bc:	4628      	mov	r0, r5
    d3be:	f7ff fe11 	bl	cfe4 <bt_att_req_free>
	if (err) {
    d3c2:	2c00      	cmp	r4, #0
    d3c4:	d0ea      	beq.n	d39c <gatt_send.constprop.0+0x20>
    d3c6:	4b08      	ldr	r3, [pc, #32]	; (d3e8 <gatt_send.constprop.0+0x6c>)
    d3c8:	4a08      	ldr	r2, [pc, #32]	; (d3ec <gatt_send.constprop.0+0x70>)
		BT_ERR("Error sending ATT PDU: %d", err);
    d3ca:	4809      	ldr	r0, [pc, #36]	; (d3f0 <gatt_send.constprop.0+0x74>)
    d3cc:	1ad2      	subs	r2, r2, r3
    d3ce:	08d2      	lsrs	r2, r2, #3
    d3d0:	0192      	lsls	r2, r2, #6
    d3d2:	f042 0201 	orr.w	r2, r2, #1
    d3d6:	4621      	mov	r1, r4
    d3d8:	f013 fbff 	bl	20bda <log_1>
    d3dc:	e7de      	b.n	d39c <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
    d3de:	461a      	mov	r2, r3
    d3e0:	f016 fcc3 	bl	23d6a <bt_att_send>
    d3e4:	4604      	mov	r4, r0
    d3e6:	e7ec      	b.n	d3c2 <gatt_send.constprop.0+0x46>
    d3e8:	00026544 	.word	0x00026544
    d3ec:	00026614 	.word	0x00026614
    d3f0:	0002a19d 	.word	0x0002a19d

0000d3f4 <gatt_indicate>:

static int gatt_indicate(struct bt_conn *conn, uint16_t handle,
			 struct bt_gatt_indicate_params *params)
{
    d3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d3f8:	4614      	mov	r4, r2
		return -EAGAIN;
	}
#endif

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    d3fa:	8a12      	ldrh	r2, [r2, #16]
{
    d3fc:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    d3fe:	3202      	adds	r2, #2
    d400:	211d      	movs	r1, #29
{
    d402:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    d404:	f7ff fa92 	bl	c92c <bt_att_create_pdu>
	if (!buf) {
    d408:	4605      	mov	r5, r0
    d40a:	b1e8      	cbz	r0, d448 <gatt_indicate+0x54>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	ind = net_buf_add(buf, sizeof(*ind));
    d40c:	f100 0808 	add.w	r8, r0, #8
    d410:	2102      	movs	r1, #2
    d412:	4640      	mov	r0, r8
    d414:	f017 ffea 	bl	253ec <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    d418:	4606      	mov	r6, r0

	net_buf_add(buf, params->len);
    d41a:	8a21      	ldrh	r1, [r4, #16]
	ind->handle = sys_cpu_to_le16(handle);
    d41c:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    d420:	4640      	mov	r0, r8
    d422:	f017 ffe3 	bl	253ec <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    d426:	8a22      	ldrh	r2, [r4, #16]
    d428:	68e1      	ldr	r1, [r4, #12]
    d42a:	4630      	mov	r0, r6
    d42c:	f015 f978 	bl	22720 <memcpy>

	if (!params->func) {
    d430:	68a3      	ldr	r3, [r4, #8]
    d432:	b933      	cbnz	r3, d442 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    d434:	461a      	mov	r2, r3
	}

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    d436:	4629      	mov	r1, r5
    d438:	4638      	mov	r0, r7
}
    d43a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    d43e:	f7ff bf9d 	b.w	d37c <gatt_send.constprop.0>
    d442:	4a08      	ldr	r2, [pc, #32]	; (d464 <gatt_indicate+0x70>)
    d444:	4623      	mov	r3, r4
    d446:	e7f6      	b.n	d436 <gatt_indicate+0x42>
    d448:	4b07      	ldr	r3, [pc, #28]	; (d468 <gatt_indicate+0x74>)
    d44a:	4908      	ldr	r1, [pc, #32]	; (d46c <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
    d44c:	4808      	ldr	r0, [pc, #32]	; (d470 <gatt_indicate+0x7c>)
    d44e:	1ac9      	subs	r1, r1, r3
    d450:	08c9      	lsrs	r1, r1, #3
    d452:	0189      	lsls	r1, r1, #6
    d454:	f041 0102 	orr.w	r1, r1, #2
    d458:	f013 fbb2 	bl	20bc0 <log_0>
}
    d45c:	f06f 000b 	mvn.w	r0, #11
    d460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d464:	00023e8f 	.word	0x00023e8f
    d468:	00026544 	.word	0x00026544
    d46c:	00026614 	.word	0x00026614
    d470:	0002a1b7 	.word	0x0002a1b7

0000d474 <gatt_sub_find_free>:
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find_free(struct bt_conn *conn,
					   struct gatt_sub **free_sub)
{
    d474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    d478:	4680      	mov	r8, r0
	int i;

	if (free_sub) {
    d47a:	460c      	mov	r4, r1
    d47c:	b109      	cbz	r1, d482 <gatt_sub_find_free+0xe>
		*free_sub = NULL;
    d47e:	2300      	movs	r3, #0
    d480:	600b      	str	r3, [r1, #0]
    d482:	4d10      	ldr	r5, [pc, #64]	; (d4c4 <gatt_sub_find_free+0x50>)
{
    d484:	2700      	movs	r7, #0
	}

	for (i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];
    d486:	462e      	mov	r6, r5

		if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    d488:	4640      	mov	r0, r8
    d48a:	f816 1b01 	ldrb.w	r1, [r6], #1
    d48e:	4632      	mov	r2, r6
		struct gatt_sub *sub = &subscriptions[i];
    d490:	46a9      	mov	r9, r5
		if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    d492:	f015 fcea 	bl	22e6a <bt_conn_is_peer_addr_le>
    d496:	b988      	cbnz	r0, d4bc <gatt_sub_find_free+0x48>
			return sub;
		} else if (free_sub &&
    d498:	b14c      	cbz	r4, d4ae <gatt_sub_find_free+0x3a>
			   !bt_addr_le_cmp(BT_ADDR_LE_ANY, &sub->peer)) {
    d49a:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
    d49c:	2207      	movs	r2, #7
    d49e:	f8cd 0003 	str.w	r0, [sp, #3]
    d4a2:	4631      	mov	r1, r6
    d4a4:	4668      	mov	r0, sp
    d4a6:	f015 f92b 	bl	22700 <memcmp>
		} else if (free_sub &&
    d4aa:	b900      	cbnz	r0, d4ae <gatt_sub_find_free+0x3a>
			*free_sub = sub;
    d4ac:	6025      	str	r5, [r4, #0]
	for (i = 0; i < ARRAY_SIZE(subscriptions); i++) {
    d4ae:	3701      	adds	r7, #1
    d4b0:	2f03      	cmp	r7, #3
    d4b2:	f105 0510 	add.w	r5, r5, #16
    d4b6:	d1e6      	bne.n	d486 <gatt_sub_find_free+0x12>
		}
	}

	return NULL;
    d4b8:	f04f 0900 	mov.w	r9, #0
}
    d4bc:	4648      	mov	r0, r9
    d4be:	b003      	add	sp, #12
    d4c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d4c4:	20001a3c 	.word	0x20001a3c

0000d4c8 <gatt_write_ccc.constprop.0>:
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}
}

static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    d4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d4cc:	4688      	mov	r8, r1
    d4ce:	4617      	mov	r7, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    d4d0:	2112      	movs	r1, #18
    d4d2:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    d4d4:	4606      	mov	r6, r0
    d4d6:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    d4d8:	f7ff fa28 	bl	c92c <bt_att_create_pdu>
				sizeof(*req) + sizeof(uint16_t));
	if (!buf) {
    d4dc:	4604      	mov	r4, r0
    d4de:	b308      	cbz	r0, d524 <gatt_write_ccc.constprop.0+0x5c>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    d4e0:	f100 0908 	add.w	r9, r0, #8
    d4e4:	2102      	movs	r1, #2
    d4e6:	4648      	mov	r0, r9
    d4e8:	f017 ff80 	bl	253ec <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    d4ec:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
    d4ee:	f8a0 8000 	strh.w	r8, [r0]
	net_buf_add_le16(buf, value);
    d4f2:	4648      	mov	r0, r9
    d4f4:	f017 ff91 	bl	2541a <net_buf_simple_add_le16>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d4f8:	f3bf 8f5b 	dmb	ish
    d4fc:	f105 030c 	add.w	r3, r5, #12
    d500:	e853 2f00 	ldrex	r2, [r3]
    d504:	f042 0204 	orr.w	r2, r2, #4
    d508:	e843 2100 	strex	r1, r2, [r3]
    d50c:	2900      	cmp	r1, #0
    d50e:	d1f7      	bne.n	d500 <gatt_write_ccc.constprop.0+0x38>
    d510:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);

	return gatt_send(conn, buf, func, params, NULL);
    d514:	462b      	mov	r3, r5
    d516:	4621      	mov	r1, r4
    d518:	4630      	mov	r0, r6
    d51a:	4a04      	ldr	r2, [pc, #16]	; (d52c <gatt_write_ccc.constprop.0+0x64>)
}
    d51c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    d520:	f7ff bf2c 	b.w	d37c <gatt_send.constprop.0>
}
    d524:	f06f 000b 	mvn.w	r0, #11
    d528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d52c:	0002420f 	.word	0x0002420f

0000d530 <find_sc_cfg>:
{
    d530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d534:	4c0e      	ldr	r4, [pc, #56]	; (d570 <find_sc_cfg+0x40>)
    d536:	4607      	mov	r7, r0
    d538:	4688      	mov	r8, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d53a:	2600      	movs	r6, #0
    d53c:	4625      	mov	r5, r4
    d53e:	f04f 090c 	mov.w	r9, #12
		if (id == sc_cfg[i].id &&
    d542:	7823      	ldrb	r3, [r4, #0]
    d544:	42bb      	cmp	r3, r7
    d546:	d10b      	bne.n	d560 <find_sc_cfg+0x30>
    d548:	2207      	movs	r2, #7
    d54a:	4641      	mov	r1, r8
    d54c:	1c60      	adds	r0, r4, #1
    d54e:	fb09 fa06 	mul.w	sl, r9, r6
    d552:	f015 f8d5 	bl	22700 <memcmp>
    d556:	b918      	cbnz	r0, d560 <find_sc_cfg+0x30>
			return &sc_cfg[i];
    d558:	eb05 000a 	add.w	r0, r5, sl
}
    d55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d560:	3601      	adds	r6, #1
    d562:	2e03      	cmp	r6, #3
    d564:	f104 040c 	add.w	r4, r4, #12
    d568:	d1eb      	bne.n	d542 <find_sc_cfg+0x12>
	return NULL;
    d56a:	2000      	movs	r0, #0
    d56c:	e7f6      	b.n	d55c <find_sc_cfg+0x2c>
    d56e:	bf00      	nop
    d570:	20004cc2 	.word	0x20004cc2

0000d574 <sc_save>:
{
    d574:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d578:	4680      	mov	r8, r0
    d57a:	460f      	mov	r7, r1
    d57c:	4616      	mov	r6, r2
    d57e:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    d580:	f7ff ffd6 	bl	d530 <find_sc_cfg>
	if (!cfg) {
    d584:	4604      	mov	r4, r0
    d586:	b9c8      	cbnz	r0, d5bc <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    d588:	4669      	mov	r1, sp
    d58a:	9000      	str	r0, [sp, #0]
    d58c:	f8cd 0003 	str.w	r0, [sp, #3]
    d590:	f7ff ffce 	bl	d530 <find_sc_cfg>
		if (!cfg) {
    d594:	4604      	mov	r4, r0
    d596:	b960      	cbnz	r0, d5b2 <sc_save+0x3e>
    d598:	490f      	ldr	r1, [pc, #60]	; (d5d8 <sc_save+0x64>)
    d59a:	4b10      	ldr	r3, [pc, #64]	; (d5dc <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
    d59c:	4810      	ldr	r0, [pc, #64]	; (d5e0 <sc_save+0x6c>)
    d59e:	1ac9      	subs	r1, r1, r3
    d5a0:	08c9      	lsrs	r1, r1, #3
    d5a2:	0189      	lsls	r1, r1, #6
    d5a4:	f041 0101 	orr.w	r1, r1, #1
    d5a8:	f013 fb0a 	bl	20bc0 <log_0>
}
    d5ac:	b002      	add	sp, #8
    d5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    d5b2:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    d5b6:	4639      	mov	r1, r7
    d5b8:	f016 fccc 	bl	23f54 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    d5bc:	8922      	ldrh	r2, [r4, #8]
    d5be:	8963      	ldrh	r3, [r4, #10]
    d5c0:	b91a      	cbnz	r2, d5ca <sc_save+0x56>
    d5c2:	b923      	cbnz	r3, d5ce <sc_save+0x5a>
		cfg->data.start = start;
    d5c4:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    d5c6:	8165      	strh	r5, [r4, #10]
    d5c8:	e7f0      	b.n	d5ac <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    d5ca:	4296      	cmp	r6, r2
    d5cc:	d302      	bcc.n	d5d4 <sc_save+0x60>
    d5ce:	429d      	cmp	r5, r3
    d5d0:	d9ec      	bls.n	d5ac <sc_save+0x38>
    d5d2:	e7f8      	b.n	d5c6 <sc_save+0x52>
		*start = new_start;
    d5d4:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    d5d6:	e7fa      	b.n	d5ce <sc_save+0x5a>
    d5d8:	00026614 	.word	0x00026614
    d5dc:	00026544 	.word	0x00026544
    d5e0:	0002a1de 	.word	0x0002a1de

0000d5e4 <find_cf_cfg>:
{
    d5e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d5e6:	4d0f      	ldr	r5, [pc, #60]	; (d624 <find_cf_cfg+0x40>)
    d5e8:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    d5ea:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    d5ec:	462f      	mov	r7, r5
		if (!conn) {
    d5ee:	1c68      	adds	r0, r5, #1
    d5f0:	b954      	cbnz	r4, d608 <find_cf_cfg+0x24>
    d5f2:	2207      	movs	r2, #7
    d5f4:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    d5f6:	9400      	str	r4, [sp, #0]
    d5f8:	f8cd 4003 	str.w	r4, [sp, #3]
    d5fc:	f015 f880 	bl	22700 <memcmp>
    d600:	b948      	cbnz	r0, d616 <find_cf_cfg+0x32>
}
    d602:	4638      	mov	r0, r7
    d604:	b003      	add	sp, #12
    d606:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d608:	4602      	mov	r2, r0
    d60a:	7829      	ldrb	r1, [r5, #0]
    d60c:	4620      	mov	r0, r4
    d60e:	f015 fc2c 	bl	22e6a <bt_conn_is_peer_addr_le>
    d612:	2800      	cmp	r0, #0
    d614:	d1f5      	bne.n	d602 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    d616:	3601      	adds	r6, #1
    d618:	2e03      	cmp	r6, #3
    d61a:	f105 0510 	add.w	r5, r5, #16
    d61e:	d1e5      	bne.n	d5ec <find_cf_cfg+0x8>
	return NULL;
    d620:	2700      	movs	r7, #0
    d622:	e7ee      	b.n	d602 <find_cf_cfg+0x1e>
    d624:	200019d8 	.word	0x200019d8

0000d628 <gatt_notify>:
{
    d628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d62c:	4680      	mov	r8, r0
    d62e:	4689      	mov	r9, r1
    d630:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
    d632:	f7ff ffd7 	bl	d5e4 <find_cf_cfg>
	if (!cfg) {
    d636:	2800      	cmp	r0, #0
    d638:	d06f      	beq.n	d71a <gatt_notify+0xf2>
	if (gatt_cf_notify_multi(conn)) {
    d63a:	7a03      	ldrb	r3, [r0, #8]
    d63c:	075b      	lsls	r3, r3, #29
    d63e:	d56c      	bpl.n	d71a <gatt_notify+0xf2>
	struct net_buf **buf = &nfy_mult[bt_conn_index(conn)];
    d640:	4640      	mov	r0, r8
    d642:	f7fd fba7 	bl	ad94 <bt_conn_index>
	if (*buf && ((net_buf_tailroom(*buf) < sizeof(*nfy) + params->len) ||
    d646:	4e47      	ldr	r6, [pc, #284]	; (d764 <gatt_notify+0x13c>)
	struct net_buf **buf = &nfy_mult[bt_conn_index(conn)];
    d648:	4607      	mov	r7, r0
	if (*buf && ((net_buf_tailroom(*buf) < sizeof(*nfy) + params->len) ||
    d64a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    d64e:	b9b0      	cbnz	r0, d67e <gatt_notify+0x56>
					 sizeof(*nfy) + params->len);
    d650:	89a2      	ldrh	r2, [r4, #12]
		*buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY_MULT,
    d652:	2123      	movs	r1, #35	; 0x23
    d654:	3204      	adds	r2, #4
    d656:	4640      	mov	r0, r8
    d658:	f7ff f968 	bl	c92c <bt_att_create_pdu>
    d65c:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
		if (!*buf) {
    d660:	2800      	cmp	r0, #0
    d662:	d155      	bne.n	d710 <gatt_notify+0xe8>
    d664:	4b40      	ldr	r3, [pc, #256]	; (d768 <gatt_notify+0x140>)
    d666:	4941      	ldr	r1, [pc, #260]	; (d76c <gatt_notify+0x144>)
		BT_WARN("No buffer available to send notification");
    d668:	4841      	ldr	r0, [pc, #260]	; (d770 <gatt_notify+0x148>)
    d66a:	1ac9      	subs	r1, r1, r3
    d66c:	08c9      	lsrs	r1, r1, #3
    d66e:	0189      	lsls	r1, r1, #6
    d670:	f041 0102 	orr.w	r1, r1, #2
    d674:	f013 faa4 	bl	20bc0 <log_0>
		return -ENOMEM;
    d678:	f06f 050b 	mvn.w	r5, #11
    d67c:	e045      	b.n	d70a <gatt_notify+0xe2>
	if (*buf && ((net_buf_tailroom(*buf) < sizeof(*nfy) + params->len) ||
    d67e:	3008      	adds	r0, #8
    d680:	f017 ff0d 	bl	2549e <net_buf_simple_tailroom>
    d684:	89a3      	ldrh	r3, [r4, #12]
    d686:	3304      	adds	r3, #4
    d688:	4298      	cmp	r0, r3
    d68a:	d309      	bcc.n	d6a0 <gatt_notify+0x78>
	    !nfy_mult_data_match(*buf, params->func, params->user_data))) {
    d68c:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
	if (*buf && ((net_buf_tailroom(*buf) < sizeof(*nfy) + params->len) ||
    d690:	6922      	ldr	r2, [r4, #16]
    d692:	6959      	ldr	r1, [r3, #20]
    d694:	4291      	cmp	r1, r2
    d696:	d103      	bne.n	d6a0 <gatt_notify+0x78>
	    !nfy_mult_data_match(*buf, params->func, params->user_data))) {
    d698:	699a      	ldr	r2, [r3, #24]
    d69a:	6963      	ldr	r3, [r4, #20]
    d69c:	429a      	cmp	r2, r3
    d69e:	d00b      	beq.n	d6b8 <gatt_notify+0x90>
	struct net_buf **buf = &nfy_mult[bt_conn_index(conn)];
    d6a0:	b239      	sxth	r1, r7
		ret = gatt_notify_mult_send(conn, buf);
    d6a2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    d6a6:	4640      	mov	r0, r8
    d6a8:	f016 fc57 	bl	23f5a <gatt_notify_mult_send>
		if (ret < 0) {
    d6ac:	1e05      	subs	r5, r0, #0
    d6ae:	db2c      	blt.n	d70a <gatt_notify+0xe2>
	if (!*buf) {
    d6b0:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
    d6b4:	2b00      	cmp	r3, #0
    d6b6:	d0cb      	beq.n	d650 <gatt_notify+0x28>
	nfy = net_buf_add(*buf, sizeof(*nfy));
    d6b8:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
    d6bc:	2104      	movs	r1, #4
    d6be:	3008      	adds	r0, #8
    d6c0:	f017 fe94 	bl	253ec <net_buf_simple_add>
	nfy->len = sys_cpu_to_le16(params->len);
    d6c4:	89a1      	ldrh	r1, [r4, #12]
    d6c6:	8041      	strh	r1, [r0, #2]
	nfy = net_buf_add(*buf, sizeof(*nfy));
    d6c8:	4605      	mov	r5, r0
	nfy->handle = sys_cpu_to_le16(handle);
    d6ca:	f8a0 9000 	strh.w	r9, [r0]
	net_buf_add(*buf, params->len);
    d6ce:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
    d6d2:	3008      	adds	r0, #8
    d6d4:	f017 fe8a 	bl	253ec <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    d6d8:	68a1      	ldr	r1, [r4, #8]
    d6da:	89a2      	ldrh	r2, [r4, #12]
    d6dc:	1d28      	adds	r0, r5, #4
    d6de:	f015 f81f 	bl	22720 <memcpy>
    d6e2:	f3bf 8f5b 	dmb	ish
    d6e6:	4923      	ldr	r1, [pc, #140]	; (d774 <gatt_notify+0x14c>)
    d6e8:	e851 5f00 	ldrex	r5, [r1]
    d6ec:	f045 0301 	orr.w	r3, r5, #1
    d6f0:	e841 3200 	strex	r2, r3, [r1]
    d6f4:	2a00      	cmp	r2, #0
    d6f6:	d1f7      	bne.n	d6e8 <gatt_notify+0xc0>
    d6f8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    d6fc:	f015 0501 	ands.w	r5, r5, #1
    d700:	d12e      	bne.n	d760 <gatt_notify+0x138>
		k_queue_append(&work_q->queue, work);
    d702:	481d      	ldr	r0, [pc, #116]	; (d778 <gatt_notify+0x150>)
    d704:	3908      	subs	r1, #8
    d706:	f018 fa2b 	bl	25b60 <k_queue_append>
}
    d70a:	4628      	mov	r0, r5
    d70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nfy_mult_user_data(*buf)->func = params->func;
    d710:	6923      	ldr	r3, [r4, #16]
    d712:	6143      	str	r3, [r0, #20]
		nfy_mult_user_data(*buf)->user_data = params->user_data;
    d714:	6963      	ldr	r3, [r4, #20]
    d716:	6183      	str	r3, [r0, #24]
    d718:	e7ce      	b.n	d6b8 <gatt_notify+0x90>
				sizeof(*nfy) + params->len);
    d71a:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    d71c:	211b      	movs	r1, #27
    d71e:	3202      	adds	r2, #2
    d720:	4640      	mov	r0, r8
    d722:	f7ff f903 	bl	c92c <bt_att_create_pdu>
	if (!buf) {
    d726:	4605      	mov	r5, r0
    d728:	2800      	cmp	r0, #0
    d72a:	d09b      	beq.n	d664 <gatt_notify+0x3c>
	nfy = net_buf_add(buf, sizeof(*nfy));
    d72c:	f100 0708 	add.w	r7, r0, #8
    d730:	2102      	movs	r1, #2
    d732:	4638      	mov	r0, r7
    d734:	f017 fe5a 	bl	253ec <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    d738:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    d73a:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
    d73c:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    d740:	4638      	mov	r0, r7
    d742:	f017 fe53 	bl	253ec <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    d746:	89a2      	ldrh	r2, [r4, #12]
    d748:	68a1      	ldr	r1, [r4, #8]
    d74a:	4630      	mov	r0, r6
    d74c:	f014 ffe8 	bl	22720 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    d750:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    d754:	4629      	mov	r1, r5
    d756:	4640      	mov	r0, r8
}
    d758:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    d75c:	f016 bb05 	b.w	23d6a <bt_att_send>
	return 0;
    d760:	2500      	movs	r5, #0
    d762:	e7d2      	b.n	d70a <gatt_notify+0xe2>
    d764:	20001a0c 	.word	0x20001a0c
    d768:	00026544 	.word	0x00026544
    d76c:	00026614 	.word	0x00026614
    d770:	0002a1fd 	.word	0x0002a1fd
    d774:	20000234 	.word	0x20000234
    d778:	20001510 	.word	0x20001510

0000d77c <notify_cb>:
{
    d77c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d780:	4b38      	ldr	r3, [pc, #224]	; (d864 <notify_cb+0xe8>)
    d782:	6882      	ldr	r2, [r0, #8]
    d784:	429a      	cmp	r2, r3
{
    d786:	4607      	mov	r7, r0
    d788:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    d78a:	d003      	beq.n	d794 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
    d78c:	2001      	movs	r0, #1
}
    d78e:	b003      	add	sp, #12
    d790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    d794:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    d798:	4b33      	ldr	r3, [pc, #204]	; (d868 <notify_cb+0xec>)
    d79a:	4599      	cmp	r9, r3
    d79c:	d01a      	beq.n	d7d4 <notify_cb+0x58>
    d79e:	f109 0601 	add.w	r6, r9, #1
    d7a2:	f109 0a1f 	add.w	sl, r9, #31
    d7a6:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
    d7aa:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    d7ae:	88ab      	ldrh	r3, [r5, #4]
    d7b0:	429a      	cmp	r2, r3
    d7b2:	d10b      	bne.n	d7cc <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d7b4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
    d7b8:	4631      	mov	r1, r6
    d7ba:	f7fc fff3 	bl	a7a4 <bt_conn_lookup_addr_le>
		if (!conn) {
    d7be:	4604      	mov	r4, r0
    d7c0:	b120      	cbz	r0, d7cc <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
    d7c2:	7b43      	ldrb	r3, [r0, #13]
    d7c4:	2b06      	cmp	r3, #6
    d7c6:	d02b      	beq.n	d820 <notify_cb+0xa4>
			bt_conn_unref(conn);
    d7c8:	f015 fb76 	bl	22eb8 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    d7cc:	360a      	adds	r6, #10
    d7ce:	45b2      	cmp	sl, r6
    d7d0:	d1eb      	bne.n	d7aa <notify_cb+0x2e>
    d7d2:	e7db      	b.n	d78c <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d7d4:	2600      	movs	r6, #0
    d7d6:	4c25      	ldr	r4, [pc, #148]	; (d86c <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    d7d8:	46b0      	mov	r8, r6
    d7da:	2207      	movs	r2, #7
    d7dc:	4669      	mov	r1, sp
    d7de:	4620      	mov	r0, r4
    d7e0:	f8cd 8000 	str.w	r8, [sp]
    d7e4:	f8cd 8003 	str.w	r8, [sp, #3]
    d7e8:	f014 ff8a 	bl	22700 <memcmp>
    d7ec:	b178      	cbz	r0, d80e <notify_cb+0x92>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    d7ee:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    d7f2:	2206      	movs	r2, #6
    d7f4:	4621      	mov	r1, r4
    d7f6:	f7fd f82b 	bl	a850 <bt_conn_lookup_state_le>
			if (!conn) {
    d7fa:	b970      	cbnz	r0, d81a <notify_cb+0x9e>
				sc = (struct sc_data *)data->ind_params->data;
    d7fc:	68ab      	ldr	r3, [r5, #8]
				sc_save(cfg->id, &cfg->peer,
    d7fe:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    d802:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
    d804:	4621      	mov	r1, r4
    d806:	8853      	ldrh	r3, [r2, #2]
    d808:	8812      	ldrh	r2, [r2, #0]
    d80a:	f7ff feb3 	bl	d574 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d80e:	3601      	adds	r6, #1
    d810:	2e03      	cmp	r6, #3
    d812:	f104 040c 	add.w	r4, r4, #12
    d816:	d1e0      	bne.n	d7da <notify_cb+0x5e>
    d818:	e7c1      	b.n	d79e <notify_cb+0x22>
			bt_conn_unref(conn);
    d81a:	f015 fb4d 	bl	22eb8 <bt_conn_unref>
    d81e:	e7f6      	b.n	d80e <notify_cb+0x92>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    d820:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    d824:	b123      	cbz	r3, d830 <notify_cb+0xb4>
    d826:	4639      	mov	r1, r7
    d828:	4798      	blx	r3
    d82a:	b908      	cbnz	r0, d830 <notify_cb+0xb4>
			bt_conn_unref(conn);
    d82c:	4620      	mov	r0, r4
    d82e:	e7cb      	b.n	d7c8 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    d830:	8a39      	ldrh	r1, [r7, #16]
    d832:	88ab      	ldrh	r3, [r5, #4]
    d834:	68aa      	ldr	r2, [r5, #8]
    d836:	3901      	subs	r1, #1
    d838:	2b02      	cmp	r3, #2
    d83a:	b289      	uxth	r1, r1
			err = gatt_indicate(conn, attr->handle - 1,
    d83c:	4620      	mov	r0, r4
		if (data->type == BT_GATT_CCC_INDICATE) {
    d83e:	d10b      	bne.n	d858 <notify_cb+0xdc>
			err = gatt_indicate(conn, attr->handle - 1,
    d840:	f7ff fdd8 	bl	d3f4 <gatt_indicate>
			err = gatt_notify(conn, attr->handle - 1,
    d844:	4680      	mov	r8, r0
		bt_conn_unref(conn);
    d846:	4620      	mov	r0, r4
    d848:	f015 fb36 	bl	22eb8 <bt_conn_unref>
		if (err < 0) {
    d84c:	f1b8 0f00 	cmp.w	r8, #0
    d850:	db05      	blt.n	d85e <notify_cb+0xe2>
		data->err = 0;
    d852:	f8c5 b000 	str.w	fp, [r5]
    d856:	e7b9      	b.n	d7cc <notify_cb+0x50>
			err = gatt_notify(conn, attr->handle - 1,
    d858:	f7ff fee6 	bl	d628 <gatt_notify>
    d85c:	e7f2      	b.n	d844 <notify_cb+0xc8>
			return BT_GATT_ITER_STOP;
    d85e:	2000      	movs	r0, #0
    d860:	e795      	b.n	d78e <notify_cb+0x12>
    d862:	bf00      	nop
    d864:	0000d931 	.word	0x0000d931
    d868:	20000238 	.word	0x20000238
    d86c:	20004cc3 	.word	0x20004cc3

0000d870 <cf_write>:
{
    d870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d874:	461f      	mov	r7, r3
    d876:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    d87a:	2b01      	cmp	r3, #1
{
    d87c:	4680      	mov	r8, r0
    d87e:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    d880:	d847      	bhi.n	d912 <cf_write+0xa2>
	if (offset + len > sizeof(cfg->data)) {
    d882:	443b      	add	r3, r7
    d884:	2b01      	cmp	r3, #1
    d886:	463d      	mov	r5, r7
    d888:	dc46      	bgt.n	d918 <cf_write+0xa8>
	cfg = find_cf_cfg(conn);
    d88a:	f7ff feab 	bl	d5e4 <find_cf_cfg>
	if (!cfg) {
    d88e:	4604      	mov	r4, r0
    d890:	b990      	cbnz	r0, d8b8 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
    d892:	f7ff fea7 	bl	d5e4 <find_cf_cfg>
	if (!cfg) {
    d896:	4604      	mov	r4, r0
    d898:	b970      	cbnz	r0, d8b8 <cf_write+0x48>
    d89a:	4b22      	ldr	r3, [pc, #136]	; (d924 <cf_write+0xb4>)
    d89c:	4922      	ldr	r1, [pc, #136]	; (d928 <cf_write+0xb8>)
		BT_WARN("No space to store Client Supported Features");
    d89e:	4823      	ldr	r0, [pc, #140]	; (d92c <cf_write+0xbc>)
    d8a0:	1ac9      	subs	r1, r1, r3
    d8a2:	08c9      	lsrs	r1, r1, #3
    d8a4:	0189      	lsls	r1, r1, #6
    d8a6:	f041 0102 	orr.w	r1, r1, #2
    d8aa:	f013 f989 	bl	20bc0 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    d8ae:	f06f 0510 	mvn.w	r5, #16
}
    d8b2:	4628      	mov	r0, r5
    d8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
    d8b8:	4632      	mov	r2, r6
    d8ba:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    d8be:	4562      	cmp	r2, ip
    d8c0:	d114      	bne.n	d8ec <cf_write+0x7c>
	for (i = 0U; i < len && i < last_byte; i++) {
    d8c2:	b12f      	cbz	r7, d8d0 <cf_write+0x60>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    d8c4:	7833      	ldrb	r3, [r6, #0]
    d8c6:	7a22      	ldrb	r2, [r4, #8]
    d8c8:	f003 0307 	and.w	r3, r3, #7
    d8cc:	4313      	orrs	r3, r2
    d8ce:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d8d0:	f108 0188 	add.w	r1, r8, #136	; 0x88
    d8d4:	1c60      	adds	r0, r4, #1
    d8d6:	f016 fb3d 	bl	23f54 <bt_addr_le_copy>
	cfg->id = conn->id;
    d8da:	4620      	mov	r0, r4
    d8dc:	f898 3008 	ldrb.w	r3, [r8, #8]
    d8e0:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    d8e4:	2100      	movs	r1, #0
    d8e6:	f016 fb8f 	bl	24008 <atomic_set_bit>
	return len;
    d8ea:	e7e2      	b.n	d8b2 <cf_write+0x42>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    d8ec:	f812 1b01 	ldrb.w	r1, [r2], #1
    d8f0:	7a20      	ldrb	r0, [r4, #8]
    d8f2:	2300      	movs	r3, #0
    d8f4:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
    d8f6:	fa21 fe03 	lsr.w	lr, r1, r3
    d8fa:	f01e 0f01 	tst.w	lr, #1
    d8fe:	d004      	beq.n	d90a <cf_write+0x9a>
    d900:	fa20 fe03 	lsr.w	lr, r0, r3
    d904:	f01e 0f01 	tst.w	lr, #1
    d908:	d109      	bne.n	d91e <cf_write+0xae>
		for (bit = 0U; bit <= last_bit; bit++) {
    d90a:	3301      	adds	r3, #1
    d90c:	2b03      	cmp	r3, #3
    d90e:	d1f2      	bne.n	d8f6 <cf_write+0x86>
    d910:	e7d5      	b.n	d8be <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d912:	f06f 0506 	mvn.w	r5, #6
    d916:	e7cc      	b.n	d8b2 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    d918:	f06f 050c 	mvn.w	r5, #12
    d91c:	e7c9      	b.n	d8b2 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    d91e:	f06f 0512 	mvn.w	r5, #18
    d922:	e7c6      	b.n	d8b2 <cf_write+0x42>
    d924:	00026544 	.word	0x00026544
    d928:	00026614 	.word	0x00026614
    d92c:	0002a226 	.word	0x0002a226

0000d930 <bt_gatt_attr_write_ccc>:
{
    d930:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    d934:	461f      	mov	r7, r3
    d936:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    d93a:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    d93e:	4606      	mov	r6, r0
    d940:	4688      	mov	r8, r1
	if (offset) {
    d942:	2b00      	cmp	r3, #0
    d944:	d151      	bne.n	d9ea <bt_gatt_attr_write_ccc+0xba>
	if (!len || len > sizeof(uint16_t)) {
    d946:	1e7b      	subs	r3, r7, #1
    d948:	2b01      	cmp	r3, #1
    d94a:	d851      	bhi.n	d9f0 <bt_gatt_attr_write_ccc+0xc0>
	if (len < sizeof(uint16_t)) {
    d94c:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
    d94e:	7815      	ldrb	r5, [r2, #0]
	return ((uint16_t)src[1] << 8) | src[0];
    d950:	bf18      	it	ne
    d952:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    d954:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    d956:	bf0c      	ite	eq
    d958:	b2ad      	uxtheq	r5, r5
    d95a:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    d95e:	f016 fb6f 	bl	24040 <find_ccc_cfg>
	if (!cfg) {
    d962:	4604      	mov	r4, r0
    d964:	b9e8      	cbnz	r0, d9a2 <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
    d966:	b91d      	cbnz	r5, d970 <bt_gatt_attr_write_ccc+0x40>
			return len;
    d968:	4638      	mov	r0, r7
}
    d96a:	b003      	add	sp, #12
    d96c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    d970:	4649      	mov	r1, r9
    d972:	f016 fb65 	bl	24040 <find_ccc_cfg>
		if (!cfg) {
    d976:	4604      	mov	r4, r0
    d978:	b960      	cbnz	r0, d994 <bt_gatt_attr_write_ccc+0x64>
    d97a:	4b1f      	ldr	r3, [pc, #124]	; (d9f8 <bt_gatt_attr_write_ccc+0xc8>)
    d97c:	491f      	ldr	r1, [pc, #124]	; (d9fc <bt_gatt_attr_write_ccc+0xcc>)
			BT_WARN("No space to store CCC cfg");
    d97e:	4820      	ldr	r0, [pc, #128]	; (da00 <bt_gatt_attr_write_ccc+0xd0>)
    d980:	1ac9      	subs	r1, r1, r3
    d982:	08c9      	lsrs	r1, r1, #3
    d984:	0189      	lsls	r1, r1, #6
    d986:	f041 0102 	orr.w	r1, r1, #2
    d98a:	f013 f919 	bl	20bc0 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    d98e:	f06f 0010 	mvn.w	r0, #16
    d992:	e7ea      	b.n	d96a <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d994:	f106 0188 	add.w	r1, r6, #136	; 0x88
    d998:	3001      	adds	r0, #1
    d99a:	f016 fadb 	bl	23f54 <bt_addr_le_copy>
		cfg->id = conn->id;
    d99e:	7a33      	ldrb	r3, [r6, #8]
    d9a0:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    d9a2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    d9a6:	b9a3      	cbnz	r3, d9d2 <bt_gatt_attr_write_ccc+0xa2>
	if (cfg->value != ccc->value) {
    d9a8:	f8b9 301e 	ldrh.w	r3, [r9, #30]
	cfg->value = value;
    d9ac:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    d9ae:	42ab      	cmp	r3, r5
    d9b0:	d003      	beq.n	d9ba <bt_gatt_attr_write_ccc+0x8a>
		gatt_ccc_changed(attr, ccc);
    d9b2:	4649      	mov	r1, r9
    d9b4:	4640      	mov	r0, r8
    d9b6:	f016 fa58 	bl	23e6a <gatt_ccc_changed>
	if (!value) {
    d9ba:	2d00      	cmp	r5, #0
    d9bc:	d1d4      	bne.n	d968 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    d9be:	4669      	mov	r1, sp
    d9c0:	1c60      	adds	r0, r4, #1
    d9c2:	9500      	str	r5, [sp, #0]
    d9c4:	f8cd 5003 	str.w	r5, [sp, #3]
    d9c8:	f016 fac4 	bl	23f54 <bt_addr_le_copy>
	cfg->id = 0U;
    d9cc:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    d9ce:	8125      	strh	r5, [r4, #8]
}
    d9d0:	e7ca      	b.n	d968 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    d9d2:	462a      	mov	r2, r5
    d9d4:	4641      	mov	r1, r8
    d9d6:	4630      	mov	r0, r6
    d9d8:	4798      	blx	r3
		if (write < 0) {
    d9da:	2800      	cmp	r0, #0
    d9dc:	dbc5      	blt.n	d96a <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    d9de:	3801      	subs	r0, #1
    d9e0:	2801      	cmp	r0, #1
    d9e2:	d9e1      	bls.n	d9a8 <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    d9e4:	f06f 000d 	mvn.w	r0, #13
    d9e8:	e7bf      	b.n	d96a <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d9ea:	f06f 0006 	mvn.w	r0, #6
    d9ee:	e7bc      	b.n	d96a <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    d9f0:	f06f 000c 	mvn.w	r0, #12
    d9f4:	e7b9      	b.n	d96a <bt_gatt_attr_write_ccc+0x3a>
    d9f6:	bf00      	nop
    d9f8:	00026544 	.word	0x00026544
    d9fc:	00026614 	.word	0x00026614
    da00:	0002a252 	.word	0x0002a252

0000da04 <sc_indicate_rsp>:
{
    da04:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    da06:	4915      	ldr	r1, [pc, #84]	; (da5c <sc_indicate_rsp+0x58>)
    da08:	f3bf 8f5b 	dmb	ish
    da0c:	4604      	mov	r4, r0
    da0e:	f101 0348 	add.w	r3, r1, #72	; 0x48
    da12:	e853 2f00 	ldrex	r2, [r3]
    da16:	f022 0202 	bic.w	r2, r2, #2
    da1a:	e843 2000 	strex	r0, r2, [r3]
    da1e:	2800      	cmp	r0, #0
    da20:	d1f7      	bne.n	da12 <sc_indicate_rsp+0xe>
    da22:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    da26:	f3bf 8f5b 	dmb	ish
    da2a:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    da2c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    da30:	07da      	lsls	r2, r3, #31
    da32:	d505      	bpl.n	da40 <sc_indicate_rsp+0x3c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    da34:	480a      	ldr	r0, [pc, #40]	; (da60 <sc_indicate_rsp+0x5c>)
    da36:	2200      	movs	r2, #0
    da38:	2300      	movs	r3, #0
    da3a:	3118      	adds	r1, #24
    da3c:	f012 fa4c 	bl	1fed8 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    da40:	4620      	mov	r0, r4
    da42:	f7ff fdcf 	bl	d5e4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    da46:	b140      	cbz	r0, da5a <sc_indicate_rsp+0x56>
    da48:	7a03      	ldrb	r3, [r0, #8]
    da4a:	07db      	lsls	r3, r3, #31
    da4c:	d505      	bpl.n	da5a <sc_indicate_rsp+0x56>
}
    da4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    da52:	2100      	movs	r1, #0
    da54:	300c      	adds	r0, #12
    da56:	f016 bad7 	b.w	24008 <atomic_set_bit>
}
    da5a:	bd10      	pop	{r4, pc}
    da5c:	20000ec0 	.word	0x20000ec0
    da60:	20001510 	.word	0x20001510

0000da64 <read_ppcp>:
{
    da64:	b513      	push	{r0, r1, r4, lr}
    da66:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    da6a:	4c0b      	ldr	r4, [pc, #44]	; (da98 <read_ppcp+0x34>)
{
    da6c:	4610      	mov	r0, r2
	if (offset > value_len) {
    da6e:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    da70:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    da74:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    da78:	d80b      	bhi.n	da92 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    da7a:	f1c1 0408 	rsb	r4, r1, #8
    da7e:	429c      	cmp	r4, r3
    da80:	bfa8      	it	ge
    da82:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
    da84:	4622      	mov	r2, r4
    da86:	4469      	add	r1, sp
    da88:	f014 fe4a 	bl	22720 <memcpy>
}
    da8c:	4620      	mov	r0, r4
    da8e:	b002      	add	sp, #8
    da90:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    da92:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    da96:	e7f9      	b.n	da8c <read_ppcp+0x28>
    da98:	00280018 	.word	0x00280018

0000da9c <disconnected_cb>:
{
    da9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    daa0:	4b2b      	ldr	r3, [pc, #172]	; (db50 <disconnected_cb+0xb4>)
    daa2:	6882      	ldr	r2, [r0, #8]
    daa4:	429a      	cmp	r2, r3
{
    daa6:	4607      	mov	r7, r0
    daa8:	460e      	mov	r6, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    daaa:	d12f      	bne.n	db0c <disconnected_cb+0x70>
	ccc = attr->user_data;
    daac:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    daae:	8beb      	ldrh	r3, [r5, #30]
    dab0:	b363      	cbz	r3, db0c <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
    dab2:	f8df b0a0 	ldr.w	fp, [pc, #160]	; db54 <disconnected_cb+0xb8>
    dab6:	1c6c      	adds	r4, r5, #1
    dab8:	f105 0a1f 	add.w	sl, r5, #31
	value_used = false;
    dabc:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    dac0:	f101 0988 	add.w	r9, r1, #136	; 0x88
		if (!cfg->value) {
    dac4:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    dac8:	b19b      	cbz	r3, daf2 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    daca:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    dace:	4622      	mov	r2, r4
    dad0:	4630      	mov	r0, r6
    dad2:	f015 f9ca 	bl	22e6a <bt_conn_is_peer_addr_le>
    dad6:	b9e8      	cbnz	r0, db14 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    dad8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    dadc:	4621      	mov	r1, r4
    dade:	f7fc fe61 	bl	a7a4 <bt_conn_lookup_addr_le>
			if (tmp) {
    dae2:	b130      	cbz	r0, daf2 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    dae4:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    dae6:	2b06      	cmp	r3, #6
    dae8:	bf08      	it	eq
    daea:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    daee:	f015 f9e3 	bl	22eb8 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    daf2:	340a      	adds	r4, #10
    daf4:	4554      	cmp	r4, sl
    daf6:	d1e5      	bne.n	dac4 <disconnected_cb+0x28>
	if (!value_used) {
    daf8:	f1b8 0f00 	cmp.w	r8, #0
    dafc:	d106      	bne.n	db0c <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
    dafe:	6a2b      	ldr	r3, [r5, #32]
		ccc->value = 0U;
    db00:	f8a5 801e 	strh.w	r8, [r5, #30]
		if (ccc->cfg_changed) {
    db04:	b113      	cbz	r3, db0c <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    db06:	4641      	mov	r1, r8
    db08:	4638      	mov	r0, r7
    db0a:	4798      	blx	r3
}
    db0c:	2001      	movs	r0, #1
    db0e:	b003      	add	sp, #12
    db10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    db14:	7a30      	ldrb	r0, [r6, #8]
    db16:	4649      	mov	r1, r9
    db18:	f015 f8a0 	bl	22c5c <bt_addr_le_is_bonded>
    db1c:	b990      	cbnz	r0, db44 <disconnected_cb+0xa8>
				if (ccc == &sc_ccc) {
    db1e:	455d      	cmp	r5, fp
    db20:	d102      	bne.n	db28 <disconnected_cb+0x8c>
					sc_clear(conn);
    db22:	4630      	mov	r0, r6
    db24:	f016 fba6 	bl	24274 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    db28:	2300      	movs	r3, #0
    db2a:	4669      	mov	r1, sp
    db2c:	4620      	mov	r0, r4
    db2e:	9300      	str	r3, [sp, #0]
    db30:	f8cd 3003 	str.w	r3, [sp, #3]
    db34:	f016 fa0e 	bl	23f54 <bt_addr_le_copy>
	cfg->id = 0U;
    db38:	2300      	movs	r3, #0
    db3a:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
    db3e:	f8a4 3007 	strh.w	r3, [r4, #7]
}
    db42:	e7d6      	b.n	daf2 <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    db44:	4649      	mov	r1, r9
    db46:	4620      	mov	r0, r4
    db48:	f016 fa04 	bl	23f54 <bt_addr_le_copy>
    db4c:	e7d1      	b.n	daf2 <disconnected_cb+0x56>
    db4e:	bf00      	nop
    db50:	0000d931 	.word	0x0000d931
    db54:	20000238 	.word	0x20000238

0000db58 <bt_gatt_init>:
{
    db58:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    db5a:	4b18      	ldr	r3, [pc, #96]	; (dbbc <bt_gatt_init+0x64>)
    db5c:	f3bf 8f5b 	dmb	ish
    db60:	2201      	movs	r2, #1
    db62:	e853 1f00 	ldrex	r1, [r3]
    db66:	2900      	cmp	r1, #0
    db68:	d103      	bne.n	db72 <bt_gatt_init+0x1a>
    db6a:	e843 2000 	strex	r0, r2, [r3]
    db6e:	2800      	cmp	r0, #0
    db70:	d1f7      	bne.n	db62 <bt_gatt_init+0xa>
    db72:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    db76:	d11f      	bne.n	dbb8 <bt_gatt_init+0x60>
    db78:	4a11      	ldr	r2, [pc, #68]	; (dbc0 <bt_gatt_init+0x68>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    db7a:	4912      	ldr	r1, [pc, #72]	; (dbc4 <bt_gatt_init+0x6c>)
    db7c:	8813      	ldrh	r3, [r2, #0]
    db7e:	4c12      	ldr	r4, [pc, #72]	; (dbc8 <bt_gatt_init+0x70>)
	if (!atomic_cas(&init, 0, 1)) {
    db80:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    db82:	42a1      	cmp	r1, r4
    db84:	d312      	bcc.n	dbac <bt_gatt_init+0x54>
    db86:	b100      	cbz	r0, db8a <bt_gatt_init+0x32>
    db88:	8013      	strh	r3, [r2, #0]
	k_delayed_work_init(&db_hash_work, db_hash_process);
    db8a:	4910      	ldr	r1, [pc, #64]	; (dbcc <bt_gatt_init+0x74>)
    db8c:	4810      	ldr	r0, [pc, #64]	; (dbd0 <bt_gatt_init+0x78>)
    db8e:	f018 f9dd 	bl	25f4c <k_delayed_work_init>
    db92:	490f      	ldr	r1, [pc, #60]	; (dbd0 <bt_gatt_init+0x78>)
    db94:	480f      	ldr	r0, [pc, #60]	; (dbd4 <bt_gatt_init+0x7c>)
    db96:	f44f 72a4 	mov.w	r2, #328	; 0x148
    db9a:	2300      	movs	r3, #0
    db9c:	f012 f99c 	bl	1fed8 <k_delayed_work_submit_to_queue>
}
    dba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_init(&gatt_sc.work, sc_process);
    dba4:	490c      	ldr	r1, [pc, #48]	; (dbd8 <bt_gatt_init+0x80>)
    dba6:	480d      	ldr	r0, [pc, #52]	; (dbdc <bt_gatt_init+0x84>)
    dba8:	f018 b9d0 	b.w	25f4c <k_delayed_work_init>
		last_static_handle += svc->attr_count;
    dbac:	6848      	ldr	r0, [r1, #4]
    dbae:	4403      	add	r3, r0
    dbb0:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    dbb2:	3108      	adds	r1, #8
    dbb4:	2001      	movs	r0, #1
    dbb6:	e7e4      	b.n	db82 <bt_gatt_init+0x2a>
}
    dbb8:	bd10      	pop	{r4, pc}
    dbba:	bf00      	nop
    dbbc:	20001a08 	.word	0x20001a08
    dbc0:	20004cc0 	.word	0x20004cc0
    dbc4:	0002652c 	.word	0x0002652c
    dbc8:	00026544 	.word	0x00026544
    dbcc:	00024361 	.word	0x00024361
    dbd0:	20000e90 	.word	0x20000e90
    dbd4:	20001510 	.word	0x20001510
    dbd8:	0000de59 	.word	0x0000de59
    dbdc:	20000ed8 	.word	0x20000ed8

0000dbe0 <bt_gatt_attr_value_handle>:
{
    dbe0:	b508      	push	{r3, lr}
	if ((attr != NULL)
    dbe2:	b180      	cbz	r0, dc06 <bt_gatt_attr_value_handle+0x26>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    dbe4:	6841      	ldr	r1, [r0, #4]
    dbe6:	4b09      	ldr	r3, [pc, #36]	; (dc0c <bt_gatt_attr_value_handle+0x2c>)
    dbe8:	4299      	cmp	r1, r3
    dbea:	d10c      	bne.n	dc06 <bt_gatt_attr_value_handle+0x26>
		handle = chrc->value_handle;
    dbec:	68c3      	ldr	r3, [r0, #12]
    dbee:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    dbf0:	b91b      	cbnz	r3, dbfa <bt_gatt_attr_value_handle+0x1a>
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    dbf2:	8a03      	ldrh	r3, [r0, #16]
    dbf4:	b11b      	cbz	r3, dbfe <bt_gatt_attr_value_handle+0x1e>
    dbf6:	3301      	adds	r3, #1
    dbf8:	b29b      	uxth	r3, r3
}
    dbfa:	4618      	mov	r0, r3
    dbfc:	bd08      	pop	{r3, pc}
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    dbfe:	f7ff fb77 	bl	d2f0 <find_static_attr>
    dc02:	1c43      	adds	r3, r0, #1
    dc04:	e7f8      	b.n	dbf8 <bt_gatt_attr_value_handle+0x18>
	uint16_t handle = 0;
    dc06:	2300      	movs	r3, #0
    dc08:	e7f7      	b.n	dbfa <bt_gatt_attr_value_handle+0x1a>
    dc0a:	bf00      	nop
    dc0c:	000242e9 	.word	0x000242e9

0000dc10 <bt_gatt_foreach_attr_type>:
{
    dc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc14:	b089      	sub	sp, #36	; 0x24
    dc16:	4698      	mov	r8, r3
    dc18:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
    dc1c:	9101      	str	r1, [sp, #4]
		num_matches = UINT16_MAX;
    dc1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dc22:	2d00      	cmp	r5, #0
    dc24:	bf08      	it	eq
    dc26:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    dc28:	4b26      	ldr	r3, [pc, #152]	; (dcc4 <bt_gatt_foreach_attr_type+0xb4>)
    dc2a:	881b      	ldrh	r3, [r3, #0]
    dc2c:	4283      	cmp	r3, r0
{
    dc2e:	4606      	mov	r6, r0
    dc30:	4617      	mov	r7, r2
	if (start_handle <= last_static_handle) {
    dc32:	d33c      	bcc.n	dcae <bt_gatt_foreach_attr_type+0x9e>
    dc34:	f8df a094 	ldr.w	sl, [pc, #148]	; dccc <bt_gatt_foreach_attr_type+0xbc>
		uint16_t handle = 1;
    dc38:	2401      	movs	r4, #1
				memcpy(&attr, &static_svc->attrs[i],
    dc3a:	f04f 0b14 	mov.w	fp, #20
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    dc3e:	4b22      	ldr	r3, [pc, #136]	; (dcc8 <bt_gatt_foreach_attr_type+0xb8>)
    dc40:	f1aa 0208 	sub.w	r2, sl, #8
    dc44:	429a      	cmp	r2, r3
    dc46:	d232      	bcs.n	dcae <bt_gatt_foreach_attr_type+0x9e>
			if (handle + static_svc->attr_count < start_handle) {
    dc48:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    dc4c:	4422      	add	r2, r4
    dc4e:	42b2      	cmp	r2, r6
    dc50:	d234      	bcs.n	dcbc <bt_gatt_foreach_attr_type+0xac>
				handle += static_svc->attr_count;
    dc52:	b294      	uxth	r4, r2
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    dc54:	f10a 0a08 	add.w	sl, sl, #8
    dc58:	e7f1      	b.n	dc3e <bt_gatt_foreach_attr_type+0x2e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    dc5a:	9903      	ldr	r1, [sp, #12]
    dc5c:	4638      	mov	r0, r7
    dc5e:	f014 fe2e 	bl	228be <bt_uuid_cmp>
    dc62:	b1c0      	cbz	r0, dc96 <bt_gatt_foreach_attr_type+0x86>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    dc64:	3401      	adds	r4, #1
    dc66:	f109 0901 	add.w	r9, r9, #1
    dc6a:	b2a4      	uxth	r4, r4
    dc6c:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    dc70:	454a      	cmp	r2, r9
    dc72:	d9ef      	bls.n	dc54 <bt_gatt_foreach_attr_type+0x44>
				memcpy(&attr, &static_svc->attrs[i],
    dc74:	f85a 1c08 	ldr.w	r1, [sl, #-8]
    dc78:	2214      	movs	r2, #20
    dc7a:	fb0b 1109 	mla	r1, fp, r9, r1
    dc7e:	a803      	add	r0, sp, #12
    dc80:	f014 fd4e 	bl	22720 <memcpy>
	if (attr->handle > end_handle) {
    dc84:	9b01      	ldr	r3, [sp, #4]
				attr.handle = handle;
    dc86:	f8ad 401c 	strh.w	r4, [sp, #28]
	if (attr->handle > end_handle) {
    dc8a:	429c      	cmp	r4, r3
    dc8c:	d80f      	bhi.n	dcae <bt_gatt_foreach_attr_type+0x9e>
	if (attr->handle < start_handle) {
    dc8e:	42b4      	cmp	r4, r6
    dc90:	d3e8      	bcc.n	dc64 <bt_gatt_foreach_attr_type+0x54>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    dc92:	2f00      	cmp	r7, #0
    dc94:	d1e1      	bne.n	dc5a <bt_gatt_foreach_attr_type+0x4a>
	if (attr_data && attr_data != attr->user_data) {
    dc96:	f1b8 0f00 	cmp.w	r8, #0
    dc9a:	d10b      	bne.n	dcb4 <bt_gatt_foreach_attr_type+0xa4>
	*num_matches -= 1;
    dc9c:	3d01      	subs	r5, #1
    dc9e:	b2ad      	uxth	r5, r5
	result = func(attr, user_data);
    dca0:	9914      	ldr	r1, [sp, #80]	; 0x50
    dca2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    dca4:	a803      	add	r0, sp, #12
    dca6:	4798      	blx	r3
	if (!*num_matches) {
    dca8:	b10d      	cbz	r5, dcae <bt_gatt_foreach_attr_type+0x9e>
				if (gatt_foreach_iter(&attr, start_handle,
    dcaa:	2800      	cmp	r0, #0
    dcac:	d1da      	bne.n	dc64 <bt_gatt_foreach_attr_type+0x54>
}
    dcae:	b009      	add	sp, #36	; 0x24
    dcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    dcb4:	9a06      	ldr	r2, [sp, #24]
    dcb6:	4590      	cmp	r8, r2
    dcb8:	d1d4      	bne.n	dc64 <bt_gatt_foreach_attr_type+0x54>
    dcba:	e7ef      	b.n	dc9c <bt_gatt_foreach_attr_type+0x8c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    dcbc:	f04f 0900 	mov.w	r9, #0
    dcc0:	e7d4      	b.n	dc6c <bt_gatt_foreach_attr_type+0x5c>
    dcc2:	bf00      	nop
    dcc4:	20004cc0 	.word	0x20004cc0
    dcc8:	00026544 	.word	0x00026544
    dccc:	00026534 	.word	0x00026534

0000dcd0 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
    dcd0:	b510      	push	{r4, lr}
    dcd2:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    dcd4:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    dcd6:	aa1c      	add	r2, sp, #112	; 0x70
    dcd8:	4669      	mov	r1, sp
    dcda:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    dcdc:	e9cd 3300 	strd	r3, r3, [sp]
    dce0:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    dce4:	f014 fc01 	bl	224ea <tc_cmac_setup>
    dce8:	b958      	cbnz	r0, dd02 <db_hash_gen.isra.0+0x32>
    dcea:	4917      	ldr	r1, [pc, #92]	; (dd48 <db_hash_gen.isra.0+0x78>)
    dcec:	4b17      	ldr	r3, [pc, #92]	; (dd4c <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to setup AES CMAC");
    dcee:	4818      	ldr	r0, [pc, #96]	; (dd50 <db_hash_gen.isra.0+0x80>)
    dcf0:	1ac9      	subs	r1, r1, r3
    dcf2:	08c9      	lsrs	r1, r1, #3
    dcf4:	0189      	lsls	r1, r1, #6
    dcf6:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    dcfa:	f012 ff61 	bl	20bc0 <log_0>
}
    dcfe:	b048      	add	sp, #288	; 0x120
    dd00:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    dd02:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dd06:	2001      	movs	r0, #1
    dd08:	4a12      	ldr	r2, [pc, #72]	; (dd54 <db_hash_gen.isra.0+0x84>)
    dd0a:	ab04      	add	r3, sp, #16
    dd0c:	f016 fb1d 	bl	2434a <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    dd10:	4811      	ldr	r0, [pc, #68]	; (dd58 <db_hash_gen.isra.0+0x88>)
    dd12:	a904      	add	r1, sp, #16
    dd14:	f014 fc80 	bl	22618 <tc_cmac_final>
    dd18:	b940      	cbnz	r0, dd2c <db_hash_gen.isra.0+0x5c>
    dd1a:	490b      	ldr	r1, [pc, #44]	; (dd48 <db_hash_gen.isra.0+0x78>)
    dd1c:	4b0b      	ldr	r3, [pc, #44]	; (dd4c <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to calculate hash");
    dd1e:	480f      	ldr	r0, [pc, #60]	; (dd5c <db_hash_gen.isra.0+0x8c>)
    dd20:	1ac9      	subs	r1, r1, r3
    dd22:	08c9      	lsrs	r1, r1, #3
    dd24:	0189      	lsls	r1, r1, #6
    dd26:	f041 0101 	orr.w	r1, r1, #1
    dd2a:	e7e6      	b.n	dcfa <db_hash_gen.isra.0+0x2a>
    dd2c:	4b0a      	ldr	r3, [pc, #40]	; (dd58 <db_hash_gen.isra.0+0x88>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    dd2e:	2208      	movs	r2, #8
    dd30:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    dd34:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    dd36:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    dd3a:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    dd3e:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    dd40:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    dd42:	d1f7      	bne.n	dd34 <db_hash_gen.isra.0+0x64>
    dd44:	e7db      	b.n	dcfe <db_hash_gen.isra.0+0x2e>
    dd46:	bf00      	nop
    dd48:	00026614 	.word	0x00026614
    dd4c:	00026544 	.word	0x00026544
    dd50:	0002a26c 	.word	0x0002a26c
    dd54:	00023ea5 	.word	0x00023ea5
    dd58:	20005376 	.word	0x20005376
    dd5c:	0002a285 	.word	0x0002a285

0000dd60 <bt_gatt_indicate>:
{
    dd60:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dd62:	4b3a      	ldr	r3, [pc, #232]	; (de4c <bt_gatt_indicate+0xec>)
    dd64:	f3bf 8f5b 	dmb	ish
    dd68:	681b      	ldr	r3, [r3, #0]
    dd6a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    dd6e:	079a      	lsls	r2, r3, #30
{
    dd70:	b08b      	sub	sp, #44	; 0x2c
    dd72:	4605      	mov	r5, r0
    dd74:	460e      	mov	r6, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    dd76:	d563      	bpl.n	de40 <bt_gatt_indicate+0xe0>
	attr = params->attr;
    dd78:	6848      	ldr	r0, [r1, #4]
    dd7a:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    dd7c:	b115      	cbz	r5, dd84 <bt_gatt_indicate+0x24>
    dd7e:	7b6b      	ldrb	r3, [r5, #13]
    dd80:	2b06      	cmp	r3, #6
    dd82:	d160      	bne.n	de46 <bt_gatt_indicate+0xe6>
	handle = attr->handle ? : find_static_attr(attr);
    dd84:	8a04      	ldrh	r4, [r0, #16]
    dd86:	b93c      	cbnz	r4, dd98 <bt_gatt_indicate+0x38>
    dd88:	f7ff fab2 	bl	d2f0 <find_static_attr>
	if (!handle) {
    dd8c:	4604      	mov	r4, r0
    dd8e:	b918      	cbnz	r0, dd98 <bt_gatt_indicate+0x38>
		return -ENOENT;
    dd90:	f06f 0001 	mvn.w	r0, #1
}
    dd94:	b00b      	add	sp, #44	; 0x2c
    dd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid) {
    dd98:	6832      	ldr	r2, [r6, #0]
    dd9a:	b1b2      	cbz	r2, ddca <bt_gatt_indicate+0x6a>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    dd9c:	a905      	add	r1, sp, #20
    dd9e:	9102      	str	r1, [sp, #8]
    dda0:	492b      	ldr	r1, [pc, #172]	; (de50 <bt_gatt_indicate+0xf0>)
    dda2:	9101      	str	r1, [sp, #4]
    dda4:	2101      	movs	r1, #1
		attr = NULL;
    dda6:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    dda8:	9100      	str	r1, [sp, #0]
    ddaa:	4620      	mov	r0, r4
    ddac:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    ddb0:	9305      	str	r3, [sp, #20]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    ddb2:	f7ff ff2d 	bl	dc10 <bt_gatt_foreach_attr_type>
		if (!attr) {
    ddb6:	9805      	ldr	r0, [sp, #20]
    ddb8:	2800      	cmp	r0, #0
    ddba:	d0e9      	beq.n	dd90 <bt_gatt_indicate+0x30>
		handle = attr->handle ? : find_static_attr(attr);
    ddbc:	8a04      	ldrh	r4, [r0, #16]
    ddbe:	b924      	cbnz	r4, ddca <bt_gatt_indicate+0x6a>
    ddc0:	f7ff fa96 	bl	d2f0 <find_static_attr>
		if (!handle) {
    ddc4:	4604      	mov	r4, r0
    ddc6:	2800      	cmp	r0, #0
    ddc8:	d0e2      	beq.n	dd90 <bt_gatt_indicate+0x30>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    ddca:	9b05      	ldr	r3, [sp, #20]
    ddcc:	af07      	add	r7, sp, #28
    ddce:	6818      	ldr	r0, [r3, #0]
    ddd0:	2300      	movs	r3, #0
    ddd2:	f88d 301c 	strb.w	r3, [sp, #28]
    ddd6:	4639      	mov	r1, r7
    ddd8:	f642 0303 	movw	r3, #10243	; 0x2803
    dddc:	f8ad 301e 	strh.w	r3, [sp, #30]
    dde0:	f014 fd6d 	bl	228be <bt_uuid_cmp>
    dde4:	b950      	cbnz	r0, ddfc <bt_gatt_indicate+0x9c>
		struct bt_gatt_chrc *chrc = attr->user_data;
    dde6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    dde8:	68c3      	ldr	r3, [r0, #12]
    ddea:	799b      	ldrb	r3, [r3, #6]
    ddec:	069b      	lsls	r3, r3, #26
    ddee:	d402      	bmi.n	ddf6 <bt_gatt_indicate+0x96>
			return -EINVAL;
    ddf0:	f06f 0015 	mvn.w	r0, #21
    ddf4:	e7ce      	b.n	dd94 <bt_gatt_indicate+0x34>
		handle = bt_gatt_attr_value_handle(attr);
    ddf6:	f7ff fef3 	bl	dbe0 <bt_gatt_attr_value_handle>
    ddfa:	4604      	mov	r4, r0
	if (conn) {
    ddfc:	b12d      	cbz	r5, de0a <bt_gatt_indicate+0xaa>
		return gatt_indicate(conn, handle, params);
    ddfe:	4632      	mov	r2, r6
    de00:	4621      	mov	r1, r4
    de02:	4628      	mov	r0, r5
    de04:	f7ff faf6 	bl	d3f4 <gatt_indicate>
    de08:	e7c4      	b.n	dd94 <bt_gatt_indicate+0x34>
	data.err = -ENOTCONN;
    de0a:	f06f 0338 	mvn.w	r3, #56	; 0x38
    de0e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    de10:	2302      	movs	r3, #2
    de12:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    de16:	f642 1302 	movw	r3, #10498	; 0x2902
    de1a:	f8ad 301a 	strh.w	r3, [sp, #26]
    de1e:	4b0d      	ldr	r3, [pc, #52]	; (de54 <bt_gatt_indicate+0xf4>)
    de20:	9301      	str	r3, [sp, #4]
    de22:	2301      	movs	r3, #1
    de24:	9300      	str	r3, [sp, #0]
    de26:	4620      	mov	r0, r4
    de28:	9702      	str	r7, [sp, #8]
    de2a:	462b      	mov	r3, r5
    de2c:	aa06      	add	r2, sp, #24
    de2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    de32:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    de34:	f88d 5018 	strb.w	r5, [sp, #24]
    de38:	f7ff feea 	bl	dc10 <bt_gatt_foreach_attr_type>
	return data.err;
    de3c:	9807      	ldr	r0, [sp, #28]
    de3e:	e7a9      	b.n	dd94 <bt_gatt_indicate+0x34>
		return -EAGAIN;
    de40:	f06f 000a 	mvn.w	r0, #10
    de44:	e7a6      	b.n	dd94 <bt_gatt_indicate+0x34>
		return -ENOTCONN;
    de46:	f06f 0038 	mvn.w	r0, #56	; 0x38
    de4a:	e7a3      	b.n	dd94 <bt_gatt_indicate+0x34>
    de4c:	20000098 	.word	0x20000098
    de50:	00024003 	.word	0x00024003
    de54:	0000d77d 	.word	0x0000d77d

0000de58 <sc_process>:
{
    de58:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    de5a:	f850 2c04 	ldr.w	r2, [r0, #-4]
    de5e:	9201      	str	r2, [sp, #4]
{
    de60:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    de62:	f1a0 0118 	sub.w	r1, r0, #24
    de66:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    de6a:	f3bf 8f5b 	dmb	ish
    de6e:	e854 2f00 	ldrex	r2, [r4]
    de72:	f022 0201 	bic.w	r2, r2, #1
    de76:	e844 2000 	strex	r0, r2, [r4]
    de7a:	2800      	cmp	r0, #0
    de7c:	d1f7      	bne.n	de6e <sc_process+0x16>
    de7e:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    de82:	4a0d      	ldr	r2, [pc, #52]	; (deb8 <sc_process+0x60>)
    de84:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    de88:	4a0c      	ldr	r2, [pc, #48]	; (debc <sc_process+0x64>)
    de8a:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    de8e:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    de90:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    de92:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    de96:	2204      	movs	r2, #4
	sc->start = 0U;
    de98:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0U;
    de9c:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.len = sizeof(sc_range);
    dea0:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    dea4:	f7ff ff5c 	bl	dd60 <bt_gatt_indicate>
    dea8:	b918      	cbnz	r0, deb2 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    deaa:	2101      	movs	r1, #1
    deac:	4620      	mov	r0, r4
    deae:	f016 f8ab 	bl	24008 <atomic_set_bit>
}
    deb2:	b002      	add	sp, #8
    deb4:	bd10      	pop	{r4, pc}
    deb6:	bf00      	nop
    deb8:	00026cf8 	.word	0x00026cf8
    debc:	0000da05 	.word	0x0000da05

0000dec0 <update_ccc>:
{
    dec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    dec4:	4a41      	ldr	r2, [pc, #260]	; (dfcc <update_ccc+0x10c>)
{
    dec6:	460f      	mov	r7, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    dec8:	6881      	ldr	r1, [r0, #8]
    deca:	4291      	cmp	r1, r2
{
    decc:	b085      	sub	sp, #20
    dece:	4682      	mov	sl, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    ded0:	d178      	bne.n	dfc4 <update_ccc+0x104>
    ded2:	4c3f      	ldr	r4, [pc, #252]	; (dfd0 <update_ccc+0x110>)
    ded4:	493f      	ldr	r1, [pc, #252]	; (dfd4 <update_ccc+0x114>)
	ccc = attr->user_data;
    ded6:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
    deda:	683d      	ldr	r5, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
    dedc:	f8df b10c 	ldr.w	fp, [pc, #268]	; dfec <update_ccc+0x12c>
    dee0:	1a64      	subs	r4, r4, r1
    dee2:	08e4      	lsrs	r4, r4, #3
    dee4:	f108 031f 	add.w	r3, r8, #31
    dee8:	ea4f 1984 	mov.w	r9, r4, lsl #6
    deec:	f108 0601 	add.w	r6, r8, #1
    def0:	9300      	str	r3, [sp, #0]
    def2:	f049 0902 	orr.w	r9, r9, #2
		if (!cfg->value ||
    def6:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    defa:	b19a      	cbz	r2, df24 <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    defc:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    df00:	4632      	mov	r2, r6
    df02:	4628      	mov	r0, r5
    df04:	f014 ffb1 	bl	22e6a <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    df08:	b160      	cbz	r0, df24 <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    df0a:	222a      	movs	r2, #42	; 0x2a
    df0c:	4651      	mov	r1, sl
    df0e:	4628      	mov	r0, r5
    df10:	f016 fa28 	bl	24364 <bt_gatt_check_perm>
		if (err) {
    df14:	b1d8      	cbz	r0, df4e <update_ccc+0x8e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    df16:	2803      	cmp	r0, #3
    df18:	d109      	bne.n	df2e <update_ccc+0x6e>
				BT_WARN("CCC %p not writable", attr);
    df1a:	464a      	mov	r2, r9
    df1c:	4651      	mov	r1, sl
    df1e:	4658      	mov	r0, fp
    df20:	f012 fe5b 	bl	20bda <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    df24:	9b00      	ldr	r3, [sp, #0]
    df26:	360a      	adds	r6, #10
    df28:	429e      	cmp	r6, r3
    df2a:	d1e4      	bne.n	def6 <update_ccc+0x36>
    df2c:	e04a      	b.n	dfc4 <update_ccc+0x104>
				sec = BT_SECURITY_L3;
    df2e:	2805      	cmp	r0, #5
    df30:	bf14      	ite	ne
    df32:	2202      	movne	r2, #2
    df34:	2203      	moveq	r2, #3
			    bt_conn_get_security(conn) < sec) {
    df36:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    df38:	9201      	str	r2, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
    df3a:	f014 ff94 	bl	22e66 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    df3e:	9a01      	ldr	r2, [sp, #4]
    df40:	4282      	cmp	r2, r0
    df42:	d904      	bls.n	df4e <update_ccc+0x8e>
				if (data->sec < sec) {
    df44:	7939      	ldrb	r1, [r7, #4]
    df46:	4291      	cmp	r1, r2
    df48:	d2ec      	bcs.n	df24 <update_ccc+0x64>
					data->sec = sec;
    df4a:	713a      	strb	r2, [r7, #4]
    df4c:	e7ea      	b.n	df24 <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
    df4e:	4641      	mov	r1, r8
    df50:	4650      	mov	r0, sl
    df52:	f015 ff8a 	bl	23e6a <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    df56:	4b20      	ldr	r3, [pc, #128]	; (dfd8 <update_ccc+0x118>)
    df58:	4598      	cmp	r8, r3
    df5a:	d133      	bne.n	dfc4 <update_ccc+0x104>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    df5c:	7a28      	ldrb	r0, [r5, #8]
    df5e:	f105 0188 	add.w	r1, r5, #136	; 0x88
    df62:	f7ff fae5 	bl	d530 <find_sc_cfg>
	if (!cfg) {
    df66:	4606      	mov	r6, r0
    df68:	b360      	cbz	r0, dfc4 <update_ccc+0x104>
	if (!(cfg->data.start || cfg->data.end)) {
    df6a:	8902      	ldrh	r2, [r0, #8]
    df6c:	8943      	ldrh	r3, [r0, #10]
    df6e:	ea52 0103 	orrs.w	r1, r2, r3
    df72:	d027      	beq.n	dfc4 <update_ccc+0x104>
	index = bt_conn_index(conn);
    df74:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    df76:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    df7a:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
    df7e:	f7fc ff09 	bl	ad94 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    df82:	4916      	ldr	r1, [pc, #88]	; (dfdc <update_ccc+0x11c>)
    df84:	4a16      	ldr	r2, [pc, #88]	; (dfe0 <update_ccc+0x120>)
    df86:	2314      	movs	r3, #20
    df88:	fb03 1300 	mla	r3, r3, r0, r1
    df8c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    df8e:	4a15      	ldr	r2, [pc, #84]	; (dfe4 <update_ccc+0x124>)
    df90:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    df92:	aa03      	add	r2, sp, #12
    df94:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
    df96:	2204      	movs	r2, #4
    df98:	821a      	strh	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    df9a:	b203      	sxth	r3, r0
    df9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    dfa0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    dfa4:	4628      	mov	r0, r5
    dfa6:	f7ff fedb 	bl	dd60 <bt_gatt_indicate>
    dfaa:	b128      	cbz	r0, dfb8 <update_ccc+0xf8>
		BT_ERR("SC restore indication failed");
    dfac:	01a1      	lsls	r1, r4, #6
    dfae:	480e      	ldr	r0, [pc, #56]	; (dfe8 <update_ccc+0x128>)
    dfb0:	f041 0101 	orr.w	r1, r1, #1
    dfb4:	f012 fe04 	bl	20bc0 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    dfb8:	2204      	movs	r2, #4
    dfba:	2100      	movs	r1, #0
    dfbc:	f106 0008 	add.w	r0, r6, #8
    dfc0:	f014 fbd9 	bl	22776 <memset>
}
    dfc4:	2001      	movs	r0, #1
    dfc6:	b005      	add	sp, #20
    dfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfcc:	0000d931 	.word	0x0000d931
    dfd0:	00026614 	.word	0x00026614
    dfd4:	00026544 	.word	0x00026544
    dfd8:	20000238 	.word	0x20000238
    dfdc:	20001a14 	.word	0x20001a14
    dfe0:	00026cf8 	.word	0x00026cf8
    dfe4:	00024025 	.word	0x00024025
    dfe8:	0002a2b2 	.word	0x0002a2b2
    dfec:	0002a29e 	.word	0x0002a29e

0000dff0 <bt_gatt_exchange_mtu>:
{
    dff0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    dff2:	7b43      	ldrb	r3, [r0, #13]
    dff4:	2b06      	cmp	r3, #6
{
    dff6:	4605      	mov	r5, r0
    dff8:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
    dffa:	d116      	bne.n	e02a <bt_gatt_exchange_mtu+0x3a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_MTU_REQ, sizeof(*req));
    dffc:	2202      	movs	r2, #2
    dffe:	4611      	mov	r1, r2
    e000:	f7fe fc94 	bl	c92c <bt_att_create_pdu>
	if (!buf) {
    e004:	4604      	mov	r4, r0
    e006:	b198      	cbz	r0, e030 <bt_gatt_exchange_mtu+0x40>
	req = net_buf_add(buf, sizeof(*req));
    e008:	2102      	movs	r1, #2
    e00a:	3008      	adds	r0, #8
    e00c:	f017 f9ee 	bl	253ec <net_buf_simple_add>
	req->mtu = sys_cpu_to_le16(mtu);
    e010:	f06f 0308 	mvn.w	r3, #8
    e014:	7003      	strb	r3, [r0, #0]
    e016:	2300      	movs	r3, #0
    e018:	7043      	strb	r3, [r0, #1]
	return gatt_send(conn, buf, gatt_mtu_rsp, params, NULL);
    e01a:	4621      	mov	r1, r4
    e01c:	4633      	mov	r3, r6
    e01e:	4628      	mov	r0, r5
    e020:	4a05      	ldr	r2, [pc, #20]	; (e038 <bt_gatt_exchange_mtu+0x48>)
}
    e022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return gatt_send(conn, buf, gatt_mtu_rsp, params, NULL);
    e026:	f7ff b9a9 	b.w	d37c <gatt_send.constprop.0>
		return -ENOTCONN;
    e02a:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    e02e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    e030:	f06f 000b 	mvn.w	r0, #11
    e034:	e7fb      	b.n	e02e <bt_gatt_exchange_mtu+0x3e>
    e036:	bf00      	nop
    e038:	00023e9f 	.word	0x00023e9f

0000e03c <bt_gatt_discover>:
{
    e03c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    e03e:	7b43      	ldrb	r3, [r0, #13]
    e040:	2b06      	cmp	r3, #6
{
    e042:	b085      	sub	sp, #20
    e044:	4605      	mov	r5, r0
    e046:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    e048:	f040 80dc 	bne.w	e204 <bt_gatt_discover+0x1c8>
	switch (params->type) {
    e04c:	7c09      	ldrb	r1, [r1, #16]
    e04e:	2905      	cmp	r1, #5
    e050:	f200 80cd 	bhi.w	e1ee <bt_gatt_discover+0x1b2>
    e054:	e8df f001 	tbb	[pc, r1]
    e058:	66660303 	.word	0x66660303
    e05c:	b784      	.short	0xb784
		if (params->uuid) {
    e05e:	6823      	ldr	r3, [r4, #0]
    e060:	2b00      	cmp	r3, #0
    e062:	d041      	beq.n	e0e8 <bt_gatt_discover+0xac>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
    e064:	2206      	movs	r2, #6
    e066:	4611      	mov	r1, r2
    e068:	f7fe fc60 	bl	c92c <bt_att_create_pdu>
	if (!buf) {
    e06c:	4606      	mov	r6, r0
    e06e:	b918      	cbnz	r0, e078 <bt_gatt_discover+0x3c>
		return -ENOMEM;
    e070:	f06f 000b 	mvn.w	r0, #11
}
    e074:	b005      	add	sp, #20
    e076:	bdf0      	pop	{r4, r5, r6, r7, pc}
	req = net_buf_add(buf, sizeof(*req));
    e078:	f100 0708 	add.w	r7, r0, #8
    e07c:	2106      	movs	r1, #6
    e07e:	4638      	mov	r0, r7
    e080:	f017 f9b4 	bl	253ec <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    e084:	8923      	ldrh	r3, [r4, #8]
    e086:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    e088:	89e3      	ldrh	r3, [r4, #14]
    e08a:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    e08c:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
    e08e:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
    e090:	f642 0301 	movw	r3, #10241	; 0x2801
    e094:	bf08      	it	eq
    e096:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    e09a:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
    e09c:	6823      	ldr	r3, [r4, #0]
    e09e:	7819      	ldrb	r1, [r3, #0]
    e0a0:	b189      	cbz	r1, e0c6 <bt_gatt_discover+0x8a>
    e0a2:	2902      	cmp	r1, #2
    e0a4:	d01a      	beq.n	e0dc <bt_gatt_discover+0xa0>
    e0a6:	4b59      	ldr	r3, [pc, #356]	; (e20c <bt_gatt_discover+0x1d0>)
    e0a8:	4a59      	ldr	r2, [pc, #356]	; (e210 <bt_gatt_discover+0x1d4>)
		BT_ERR("Unknown UUID type %u", params->uuid->type);
    e0aa:	485a      	ldr	r0, [pc, #360]	; (e214 <bt_gatt_discover+0x1d8>)
    e0ac:	1ad2      	subs	r2, r2, r3
    e0ae:	08d2      	lsrs	r2, r2, #3
    e0b0:	0192      	lsls	r2, r2, #6
    e0b2:	f042 0201 	orr.w	r2, r2, #1
    e0b6:	f012 fd90 	bl	20bda <log_1>
		net_buf_unref(buf);
    e0ba:	4630      	mov	r0, r6
    e0bc:	f00f ff7c 	bl	1dfb8 <net_buf_unref>
	return -EINVAL;
    e0c0:	f06f 0015 	mvn.w	r0, #21
    e0c4:	e7d6      	b.n	e074 <bt_gatt_discover+0x38>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
    e0c6:	8859      	ldrh	r1, [r3, #2]
    e0c8:	4638      	mov	r0, r7
    e0ca:	f017 f9a6 	bl	2541a <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
    e0ce:	4a52      	ldr	r2, [pc, #328]	; (e218 <bt_gatt_discover+0x1dc>)
    e0d0:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    e0d2:	4631      	mov	r1, r6
    e0d4:	4628      	mov	r0, r5
    e0d6:	f7ff f951 	bl	d37c <gatt_send.constprop.0>
    e0da:	e7cb      	b.n	e074 <bt_gatt_discover+0x38>
		net_buf_add_mem(buf, BT_UUID_128(params->uuid)->val, 16);
    e0dc:	2210      	movs	r2, #16
    e0de:	1c59      	adds	r1, r3, #1
    e0e0:	4638      	mov	r0, r7
    e0e2:	f017 f989 	bl	253f8 <net_buf_simple_add_mem>
		break;
    e0e6:	e7f2      	b.n	e0ce <bt_gatt_discover+0x92>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
    e0e8:	2204      	movs	r2, #4
    e0ea:	2110      	movs	r1, #16
    e0ec:	f7fe fc1e 	bl	c92c <bt_att_create_pdu>
	if (!buf) {
    e0f0:	4606      	mov	r6, r0
    e0f2:	2800      	cmp	r0, #0
    e0f4:	d0bc      	beq.n	e070 <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    e0f6:	f100 0708 	add.w	r7, r0, #8
    e0fa:	2104      	movs	r1, #4
    e0fc:	4638      	mov	r0, r7
    e0fe:	f017 f975 	bl	253ec <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    e102:	8923      	ldrh	r3, [r4, #8]
    e104:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    e106:	89e3      	ldrh	r3, [r4, #14]
    e108:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    e10a:	7c23      	ldrb	r3, [r4, #16]
    e10c:	b93b      	cbnz	r3, e11e <bt_gatt_discover+0xe2>
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_PRIMARY)->val);
    e10e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_SECONDARY)->val);
    e112:	4638      	mov	r0, r7
    e114:	f017 f981 	bl	2541a <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
    e118:	4a40      	ldr	r2, [pc, #256]	; (e21c <bt_gatt_discover+0x1e0>)
    e11a:	4623      	mov	r3, r4
    e11c:	e7d9      	b.n	e0d2 <bt_gatt_discover+0x96>
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_SECONDARY)->val);
    e11e:	f642 0101 	movw	r1, #10241	; 0x2801
    e122:	e7f6      	b.n	e112 <bt_gatt_discover+0xd6>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    e124:	2204      	movs	r2, #4
    e126:	2108      	movs	r1, #8
    e128:	f7fe fc00 	bl	c92c <bt_att_create_pdu>
	if (!buf) {
    e12c:	4606      	mov	r6, r0
    e12e:	2800      	cmp	r0, #0
    e130:	d09e      	beq.n	e070 <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    e132:	f100 0708 	add.w	r7, r0, #8
    e136:	2104      	movs	r1, #4
    e138:	4638      	mov	r0, r7
    e13a:	f017 f957 	bl	253ec <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    e13e:	8923      	ldrh	r3, [r4, #8]
    e140:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    e142:	89e3      	ldrh	r3, [r4, #14]
    e144:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    e146:	7c23      	ldrb	r3, [r4, #16]
    e148:	2b02      	cmp	r3, #2
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_INCLUDE)->val);
    e14a:	bf0c      	ite	eq
    e14c:	f642 0102 	movweq	r1, #10242	; 0x2802
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_CHRC)->val);
    e150:	f642 0103 	movwne	r1, #10243	; 0x2803
    e154:	4638      	mov	r0, r7
    e156:	f017 f960 	bl	2541a <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
    e15a:	4a31      	ldr	r2, [pc, #196]	; (e220 <bt_gatt_discover+0x1e4>)
    e15c:	4623      	mov	r3, r4
    e15e:	e7b8      	b.n	e0d2 <bt_gatt_discover+0x96>
		if (params->uuid &&
    e160:	6820      	ldr	r0, [r4, #0]
    e162:	b380      	cbz	r0, e1c6 <bt_gatt_discover+0x18a>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    e164:	2600      	movs	r6, #0
    e166:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e16a:	4669      	mov	r1, sp
    e16c:	f88d 6000 	strb.w	r6, [sp]
    e170:	f8ad 3002 	strh.w	r3, [sp, #2]
    e174:	f014 fba3 	bl	228be <bt_uuid_cmp>
		if (params->uuid &&
    e178:	2800      	cmp	r0, #0
    e17a:	d0a1      	beq.n	e0c0 <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    e17c:	f642 0301 	movw	r3, #10241	; 0x2801
    e180:	6820      	ldr	r0, [r4, #0]
    e182:	f88d 6004 	strb.w	r6, [sp, #4]
    e186:	a901      	add	r1, sp, #4
    e188:	f8ad 3006 	strh.w	r3, [sp, #6]
    e18c:	f014 fb97 	bl	228be <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    e190:	2800      	cmp	r0, #0
    e192:	d095      	beq.n	e0c0 <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    e194:	f642 0302 	movw	r3, #10242	; 0x2802
    e198:	6820      	ldr	r0, [r4, #0]
    e19a:	f88d 6008 	strb.w	r6, [sp, #8]
    e19e:	a902      	add	r1, sp, #8
    e1a0:	f8ad 300a 	strh.w	r3, [sp, #10]
    e1a4:	f014 fb8b 	bl	228be <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    e1a8:	2800      	cmp	r0, #0
    e1aa:	d089      	beq.n	e0c0 <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    e1ac:	f642 0303 	movw	r3, #10243	; 0x2803
    e1b0:	6820      	ldr	r0, [r4, #0]
    e1b2:	f88d 600c 	strb.w	r6, [sp, #12]
    e1b6:	a903      	add	r1, sp, #12
    e1b8:	f8ad 300e 	strh.w	r3, [sp, #14]
    e1bc:	f014 fb7f 	bl	228be <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    e1c0:	2800      	cmp	r0, #0
    e1c2:	f43f af7d 	beq.w	e0c0 <bt_gatt_discover+0x84>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
    e1c6:	2204      	movs	r2, #4
    e1c8:	4611      	mov	r1, r2
    e1ca:	4628      	mov	r0, r5
    e1cc:	f7fe fbae 	bl	c92c <bt_att_create_pdu>
	if (!buf) {
    e1d0:	4606      	mov	r6, r0
    e1d2:	2800      	cmp	r0, #0
    e1d4:	f43f af4c 	beq.w	e070 <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    e1d8:	2104      	movs	r1, #4
    e1da:	3008      	adds	r0, #8
    e1dc:	f017 f906 	bl	253ec <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    e1e0:	8923      	ldrh	r3, [r4, #8]
    e1e2:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    e1e4:	89e3      	ldrh	r3, [r4, #14]
    e1e6:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    e1e8:	4a0e      	ldr	r2, [pc, #56]	; (e224 <bt_gatt_discover+0x1e8>)
    e1ea:	4623      	mov	r3, r4
    e1ec:	e771      	b.n	e0d2 <bt_gatt_discover+0x96>
    e1ee:	4b07      	ldr	r3, [pc, #28]	; (e20c <bt_gatt_discover+0x1d0>)
    e1f0:	4a07      	ldr	r2, [pc, #28]	; (e210 <bt_gatt_discover+0x1d4>)
		BT_ERR("Invalid discovery type: %u", params->type);
    e1f2:	480d      	ldr	r0, [pc, #52]	; (e228 <bt_gatt_discover+0x1ec>)
    e1f4:	1ad2      	subs	r2, r2, r3
    e1f6:	08d2      	lsrs	r2, r2, #3
    e1f8:	0192      	lsls	r2, r2, #6
    e1fa:	f042 0201 	orr.w	r2, r2, #1
    e1fe:	f012 fcec 	bl	20bda <log_1>
    e202:	e75d      	b.n	e0c0 <bt_gatt_discover+0x84>
		return -ENOTCONN;
    e204:	f06f 0038 	mvn.w	r0, #56	; 0x38
    e208:	e734      	b.n	e074 <bt_gatt_discover+0x38>
    e20a:	bf00      	nop
    e20c:	00026544 	.word	0x00026544
    e210:	00026614 	.word	0x00026614
    e214:	0002a2cf 	.word	0x0002a2cf
    e218:	000243f5 	.word	0x000243f5
    e21c:	0000e22d 	.word	0x0000e22d
    e220:	0000e33d 	.word	0x0000e33d
    e224:	0000e625 	.word	0x0000e625
    e228:	0002a2e4 	.word	0x0002a2e4

0000e22c <gatt_read_group_rsp>:
{
    e22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e230:	b08f      	sub	sp, #60	; 0x3c
    e232:	4617      	mov	r7, r2
    e234:	9d18      	ldr	r5, [sp, #96]	; 0x60
    e236:	4681      	mov	r9, r0
	if (err) {
    e238:	460a      	mov	r2, r1
    e23a:	b131      	cbz	r1, e24a <gatt_read_group_rsp+0x1e>
		params->func(conn, NULL, params);
    e23c:	686b      	ldr	r3, [r5, #4]
    e23e:	462a      	mov	r2, r5
    e240:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    e242:	4798      	blx	r3
}
    e244:	b00f      	add	sp, #60	; 0x3c
    e246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
    e24a:	7839      	ldrb	r1, [r7, #0]
    e24c:	2906      	cmp	r1, #6
    e24e:	d011      	beq.n	e274 <gatt_read_group_rsp+0x48>
    e250:	2914      	cmp	r1, #20
    e252:	d00e      	beq.n	e272 <gatt_read_group_rsp+0x46>
    e254:	4a36      	ldr	r2, [pc, #216]	; (e330 <gatt_read_group_rsp+0x104>)
    e256:	4b37      	ldr	r3, [pc, #220]	; (e334 <gatt_read_group_rsp+0x108>)
		BT_ERR("Invalid data len %u", rsp->len);
    e258:	4837      	ldr	r0, [pc, #220]	; (e338 <gatt_read_group_rsp+0x10c>)
    e25a:	1ad2      	subs	r2, r2, r3
    e25c:	08d2      	lsrs	r2, r2, #3
    e25e:	0192      	lsls	r2, r2, #6
    e260:	f042 0201 	orr.w	r2, r2, #1
    e264:	f012 fcb9 	bl	20bda <log_1>
	params->func(conn, NULL, params);
    e268:	686b      	ldr	r3, [r5, #4]
    e26a:	462a      	mov	r2, r5
    e26c:	2100      	movs	r1, #0
    e26e:	4648      	mov	r0, r9
    e270:	e7e7      	b.n	e242 <gatt_read_group_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    e272:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    e274:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_128;
    e276:	f88d 2010 	strb.w	r2, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
    e27a:	b29c      	uxth	r4, r3
    e27c:	f107 0801 	add.w	r8, r7, #1
	uint16_t start_handle, end_handle = 0U;
    e280:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    e282:	783b      	ldrb	r3, [r7, #0]
    e284:	42a3      	cmp	r3, r4
    e286:	d909      	bls.n	e29c <gatt_read_group_rsp+0x70>
	if (length == 0U && end_handle) {
    e288:	2c00      	cmp	r4, #0
    e28a:	d1ed      	bne.n	e268 <gatt_read_group_rsp+0x3c>
    e28c:	2e00      	cmp	r6, #0
    e28e:	d0eb      	beq.n	e268 <gatt_read_group_rsp+0x3c>
	gatt_discover_next(conn, handle, params);
    e290:	462a      	mov	r2, r5
    e292:	4631      	mov	r1, r6
    e294:	4648      	mov	r0, r9
    e296:	f016 f890 	bl	243ba <gatt_discover_next>
    e29a:	e7d3      	b.n	e244 <gatt_read_group_rsp+0x18>
		struct bt_gatt_attr attr = {};
    e29c:	2214      	movs	r2, #20
    e29e:	2100      	movs	r1, #0
    e2a0:	a809      	add	r0, sp, #36	; 0x24
    e2a2:	f014 fa68 	bl	22776 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
    e2a6:	f8b8 a000 	ldrh.w	sl, [r8]
    e2aa:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
    e2ae:	2b00      	cmp	r3, #0
    e2b0:	d0da      	beq.n	e268 <gatt_read_group_rsp+0x3c>
		end_handle = sys_le16_to_cpu(data->end_handle);
    e2b2:	f8b8 b002 	ldrh.w	fp, [r8, #2]
    e2b6:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
    e2ba:	2e00      	cmp	r6, #0
    e2bc:	d0d4      	beq.n	e268 <gatt_read_group_rsp+0x3c>
    e2be:	42b3      	cmp	r3, r6
    e2c0:	d8d2      	bhi.n	e268 <gatt_read_group_rsp+0x3c>
		switch (u.uuid.type) {
    e2c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    e2c6:	b323      	cbz	r3, e312 <gatt_read_group_rsp+0xe6>
    e2c8:	2b02      	cmp	r3, #2
    e2ca:	d02a      	beq.n	e322 <gatt_read_group_rsp+0xf6>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
    e2cc:	f04f 0300 	mov.w	r3, #0
    e2d0:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    e2d4:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
    e2d6:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
    e2da:	2b00      	cmp	r3, #0
    e2dc:	f642 0301 	movw	r3, #10241	; 0x2801
    e2e0:	bf08      	it	eq
    e2e2:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    e2e6:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
    e2ea:	ab04      	add	r3, sp, #16
    e2ec:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
    e2ee:	ab01      	add	r3, sp, #4
    e2f0:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
    e2f2:	ab02      	add	r3, sp, #8
    e2f4:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
    e2f6:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    e2fa:	686b      	ldr	r3, [r5, #4]
    e2fc:	462a      	mov	r2, r5
    e2fe:	a909      	add	r1, sp, #36	; 0x24
    e300:	4648      	mov	r0, r9
    e302:	4798      	blx	r3
    e304:	2800      	cmp	r0, #0
    e306:	d09d      	beq.n	e244 <gatt_read_group_rsp+0x18>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    e308:	783a      	ldrb	r2, [r7, #0]
    e30a:	1aa4      	subs	r4, r4, r2
    e30c:	b2a4      	uxth	r4, r4
    e30e:	4490      	add	r8, r2
    e310:	e7b7      	b.n	e282 <gatt_read_group_rsp+0x56>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
    e312:	2202      	movs	r2, #2
    e314:	f108 0104 	add.w	r1, r8, #4
    e318:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    e31c:	f014 fa00 	bl	22720 <memcpy>
			break;
    e320:	e7d4      	b.n	e2cc <gatt_read_group_rsp+0xa0>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    e322:	2210      	movs	r2, #16
    e324:	f108 0104 	add.w	r1, r8, #4
    e328:	f10d 0011 	add.w	r0, sp, #17
    e32c:	e7f6      	b.n	e31c <gatt_read_group_rsp+0xf0>
    e32e:	bf00      	nop
    e330:	00026614 	.word	0x00026614
    e334:	00026544 	.word	0x00026544
    e338:	0002a2ff 	.word	0x0002a2ff

0000e33c <gatt_read_type_rsp>:
{
    e33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e340:	b091      	sub	sp, #68	; 0x44
    e342:	461c      	mov	r4, r3
    e344:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    e348:	4606      	mov	r6, r0
    e34a:	4617      	mov	r7, r2
	if (err) {
    e34c:	460b      	mov	r3, r1
    e34e:	b129      	cbz	r1, e35c <gatt_read_type_rsp+0x20>
		params->func(conn, NULL, params);
    e350:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e354:	4642      	mov	r2, r8
    e356:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    e358:	4798      	blx	r3
	if (!handle) {
    e35a:	e06f      	b.n	e43c <gatt_read_type_rsp+0x100>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    e35c:	7811      	ldrb	r1, [r2, #0]
    e35e:	f898 2010 	ldrb.w	r2, [r8, #16]
    e362:	2a02      	cmp	r2, #2
    e364:	f040 808b 	bne.w	e47e <gatt_read_type_rsp+0x142>
	switch (rsp->len) {
    e368:	2906      	cmp	r1, #6
    e36a:	d019      	beq.n	e3a0 <gatt_read_type_rsp+0x64>
    e36c:	2908      	cmp	r1, #8
    e36e:	f040 808a 	bne.w	e486 <gatt_read_type_rsp+0x14a>
		u.uuid.type = BT_UUID_TYPE_16;
    e372:	f88d 3018 	strb.w	r3, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    e376:	3c01      	subs	r4, #1
    e378:	b2a4      	uxth	r4, r4
    e37a:	1c7d      	adds	r5, r7, #1
	uint16_t handle = 0U;
    e37c:	f04f 0900 	mov.w	r9, #0
			value.uuid = &u.uuid;
    e380:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
    e384:	783b      	ldrb	r3, [r7, #0]
    e386:	42a3      	cmp	r3, r4
    e388:	d90d      	bls.n	e3a6 <gatt_read_type_rsp+0x6a>
	if (length == 0U && handle) {
    e38a:	b91c      	cbnz	r4, e394 <gatt_read_type_rsp+0x58>
    e38c:	f1b9 0f00 	cmp.w	r9, #0
    e390:	f040 80e0 	bne.w	e554 <gatt_read_type_rsp+0x218>
	params->func(conn, NULL, params);
    e394:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e398:	4642      	mov	r2, r8
    e39a:	2100      	movs	r1, #0
    e39c:	4630      	mov	r0, r6
    e39e:	e7db      	b.n	e358 <gatt_read_type_rsp+0x1c>
		u.uuid.type = BT_UUID_TYPE_128;
    e3a0:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
    e3a4:	e7e7      	b.n	e376 <gatt_read_type_rsp+0x3a>
		handle = sys_le16_to_cpu(data->handle);
    e3a6:	f8b5 b000 	ldrh.w	fp, [r5]
    e3aa:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
    e3ae:	f1b9 0f00 	cmp.w	r9, #0
    e3b2:	d0ef      	beq.n	e394 <gatt_read_type_rsp+0x58>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    e3b4:	886b      	ldrh	r3, [r5, #2]
    e3b6:	f8ad 3014 	strh.w	r3, [sp, #20]
    e3ba:	b298      	uxth	r0, r3
		switch (u.uuid.type) {
    e3bc:	f89d 2018 	ldrb.w	r2, [sp, #24]
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    e3c0:	88ab      	ldrh	r3, [r5, #4]
    e3c2:	f8ad 3016 	strh.w	r3, [sp, #22]
    e3c6:	b299      	uxth	r1, r3
		switch (u.uuid.type) {
    e3c8:	b172      	cbz	r2, e3e8 <gatt_read_type_rsp+0xac>
    e3ca:	2a02      	cmp	r2, #2
    e3cc:	d015      	beq.n	e3fa <gatt_read_type_rsp+0xbe>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    e3ce:	f8d8 1000 	ldr.w	r1, [r8]
    e3d2:	2900      	cmp	r1, #0
    e3d4:	d038      	beq.n	e448 <gatt_read_type_rsp+0x10c>
    e3d6:	4650      	mov	r0, sl
    e3d8:	f014 fa71 	bl	228be <bt_uuid_cmp>
    e3dc:	b3a0      	cbz	r0, e448 <gatt_read_type_rsp+0x10c>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    e3de:	783a      	ldrb	r2, [r7, #0]
    e3e0:	1aa4      	subs	r4, r4, r2
    e3e2:	b2a4      	uxth	r4, r4
    e3e4:	4415      	add	r5, r2
    e3e6:	e7cd      	b.n	e384 <gatt_read_type_rsp+0x48>
			value.uuid = &u.uuid;
    e3e8:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    e3ec:	79ab      	ldrb	r3, [r5, #6]
    e3ee:	79ea      	ldrb	r2, [r5, #7]
    e3f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e3f4:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
    e3f8:	e7e9      	b.n	e3ce <gatt_read_type_rsp+0x92>
			params->_included.start_handle = value.start_handle;
    e3fa:	f8a8 000a 	strh.w	r0, [r8, #10]
			params->_included.end_handle = value.end_handle;
    e3fe:	f8a8 100c 	strh.w	r1, [r8, #12]
			params->_included.attr_handle = handle;
    e402:	f8a8 9008 	strh.w	r9, [r8, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    e406:	210a      	movs	r1, #10
    e408:	4630      	mov	r0, r6
    e40a:	9201      	str	r2, [sp, #4]
    e40c:	f7fe fa8e 	bl	c92c <bt_att_create_pdu>
	if (!buf) {
    e410:	4604      	mov	r4, r0
    e412:	b1b0      	cbz	r0, e442 <gatt_read_type_rsp+0x106>
	req = net_buf_add(buf, sizeof(*req));
    e414:	9a01      	ldr	r2, [sp, #4]
    e416:	3008      	adds	r0, #8
    e418:	4611      	mov	r1, r2
    e41a:	f016 ffe7 	bl	253ec <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    e41e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    e422:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    e424:	4a4e      	ldr	r2, [pc, #312]	; (e560 <gatt_read_type_rsp+0x224>)
    e426:	4643      	mov	r3, r8
    e428:	4621      	mov	r1, r4
    e42a:	4630      	mov	r0, r6
    e42c:	f7fe ffa6 	bl	d37c <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
    e430:	fa1f f980 	uxth.w	r9, r0
	if (!handle) {
    e434:	f1b9 0f00 	cmp.w	r9, #0
    e438:	f040 808c 	bne.w	e554 <gatt_read_type_rsp+0x218>
}
    e43c:	b011      	add	sp, #68	; 0x44
    e43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    e442:	f06f 000b 	mvn.w	r0, #11
    e446:	e7f3      	b.n	e430 <gatt_read_type_rsp+0xf4>
		attr = (&(struct bt_gatt_attr) {
    e448:	2210      	movs	r2, #16
    e44a:	2100      	movs	r1, #0
    e44c:	a80c      	add	r0, sp, #48	; 0x30
    e44e:	f014 f992 	bl	22776 <memset>
			.uuid = BT_UUID_GATT_INCLUDE,
    e452:	2300      	movs	r3, #0
    e454:	f88d 300c 	strb.w	r3, [sp, #12]
    e458:	f642 0302 	movw	r3, #10242	; 0x2802
    e45c:	f8ad 300e 	strh.w	r3, [sp, #14]
		attr = (&(struct bt_gatt_attr) {
    e460:	ab03      	add	r3, sp, #12
    e462:	930b      	str	r3, [sp, #44]	; 0x2c
    e464:	ab04      	add	r3, sp, #16
    e466:	930e      	str	r3, [sp, #56]	; 0x38
		attr->handle = handle;
    e468:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    e46c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e470:	4642      	mov	r2, r8
    e472:	a90b      	add	r1, sp, #44	; 0x2c
    e474:	4630      	mov	r0, r6
    e476:	4798      	blx	r3
    e478:	2800      	cmp	r0, #0
    e47a:	d1b0      	bne.n	e3de <gatt_read_type_rsp+0xa2>
    e47c:	e7de      	b.n	e43c <gatt_read_type_rsp+0x100>
	switch (rsp->len) {
    e47e:	2907      	cmp	r1, #7
    e480:	d00d      	beq.n	e49e <gatt_read_type_rsp+0x162>
    e482:	2915      	cmp	r1, #21
    e484:	d00a      	beq.n	e49c <gatt_read_type_rsp+0x160>
    e486:	4b37      	ldr	r3, [pc, #220]	; (e564 <gatt_read_type_rsp+0x228>)
    e488:	4a37      	ldr	r2, [pc, #220]	; (e568 <gatt_read_type_rsp+0x22c>)
		BT_ERR("Invalid data len %u", rsp->len);
    e48a:	4838      	ldr	r0, [pc, #224]	; (e56c <gatt_read_type_rsp+0x230>)
    e48c:	1ad2      	subs	r2, r2, r3
    e48e:	08d2      	lsrs	r2, r2, #3
    e490:	0192      	lsls	r2, r2, #6
    e492:	f042 0201 	orr.w	r2, r2, #1
    e496:	f012 fba0 	bl	20bda <log_1>
		goto done;
    e49a:	e77b      	b.n	e394 <gatt_read_type_rsp+0x58>
		u.uuid.type = BT_UUID_TYPE_128;
    e49c:	2302      	movs	r3, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    e49e:	3c01      	subs	r4, #1
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    e4a0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; e570 <gatt_read_type_rsp+0x234>
		u.uuid.type = BT_UUID_TYPE_128;
    e4a4:	f88d 3018 	strb.w	r3, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    e4a8:	b2a4      	uxth	r4, r4
    e4aa:	1c7d      	adds	r5, r7, #1
	uint16_t handle = 0U;
    e4ac:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    e4b0:	783b      	ldrb	r3, [r7, #0]
    e4b2:	42a3      	cmp	r3, r4
    e4b4:	f63f af69 	bhi.w	e38a <gatt_read_type_rsp+0x4e>
		handle = sys_le16_to_cpu(data->handle);
    e4b8:	f8b5 b000 	ldrh.w	fp, [r5]
    e4bc:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
    e4c0:	f1b9 0f00 	cmp.w	r9, #0
    e4c4:	f43f af66 	beq.w	e394 <gatt_read_type_rsp+0x58>
		switch (u.uuid.type) {
    e4c8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e4cc:	b17b      	cbz	r3, e4ee <gatt_read_type_rsp+0x1b2>
    e4ce:	2b02      	cmp	r3, #2
    e4d0:	d014      	beq.n	e4fc <gatt_read_type_rsp+0x1c0>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    e4d2:	f8d8 1000 	ldr.w	r1, [r8]
    e4d6:	ab06      	add	r3, sp, #24
    e4d8:	b1b9      	cbz	r1, e50a <gatt_read_type_rsp+0x1ce>
    e4da:	4618      	mov	r0, r3
    e4dc:	f014 f9ef 	bl	228be <bt_uuid_cmp>
    e4e0:	ab06      	add	r3, sp, #24
    e4e2:	b190      	cbz	r0, e50a <gatt_read_type_rsp+0x1ce>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    e4e4:	783a      	ldrb	r2, [r7, #0]
    e4e6:	1aa4      	subs	r4, r4, r2
    e4e8:	b2a4      	uxth	r4, r4
    e4ea:	4415      	add	r5, r2
    e4ec:	e7e0      	b.n	e4b0 <gatt_read_type_rsp+0x174>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    e4ee:	796b      	ldrb	r3, [r5, #5]
    e4f0:	79aa      	ldrb	r2, [r5, #6]
    e4f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e4f6:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
    e4fa:	e7ea      	b.n	e4d2 <gatt_read_type_rsp+0x196>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    e4fc:	2210      	movs	r2, #16
    e4fe:	1d69      	adds	r1, r5, #5
    e500:	f10d 0019 	add.w	r0, sp, #25
    e504:	f014 f90c 	bl	22720 <memcpy>
			break;
    e508:	e7e3      	b.n	e4d2 <gatt_read_type_rsp+0x196>
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    e50a:	f642 0103 	movw	r1, #10243	; 0x2803
    e50e:	f8ad 100e 	strh.w	r1, [sp, #14]
    e512:	a903      	add	r1, sp, #12
    e514:	e9cd 1a0b 	strd	r1, sl, [sp, #44]	; 0x2c
    e518:	2200      	movs	r2, #0
    e51a:	9304      	str	r3, [sp, #16]
    e51c:	f88d 200c 	strb.w	r2, [sp, #12]
    e520:	920d      	str	r2, [sp, #52]	; 0x34
    e522:	792a      	ldrb	r2, [r5, #4]
    e524:	78eb      	ldrb	r3, [r5, #3]
		attr->handle = handle;
    e526:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    e52a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e52e:	f8ad 3014 	strh.w	r3, [sp, #20]
    e532:	78ab      	ldrb	r3, [r5, #2]
    e534:	f88d 3016 	strb.w	r3, [sp, #22]
    e538:	ab04      	add	r3, sp, #16
    e53a:	930e      	str	r3, [sp, #56]	; 0x38
    e53c:	2301      	movs	r3, #1
    e53e:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    e542:	4642      	mov	r2, r8
    e544:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e548:	a90b      	add	r1, sp, #44	; 0x2c
    e54a:	4630      	mov	r0, r6
    e54c:	4798      	blx	r3
    e54e:	2800      	cmp	r0, #0
    e550:	d1c8      	bne.n	e4e4 <gatt_read_type_rsp+0x1a8>
    e552:	e773      	b.n	e43c <gatt_read_type_rsp+0x100>
	gatt_discover_next(conn, handle, params);
    e554:	4642      	mov	r2, r8
    e556:	4649      	mov	r1, r9
    e558:	4630      	mov	r0, r6
    e55a:	f015 ff2e 	bl	243ba <gatt_discover_next>
    e55e:	e76d      	b.n	e43c <gatt_read_type_rsp+0x100>
    e560:	0000e575 	.word	0x0000e575
    e564:	00026544 	.word	0x00026544
    e568:	00026614 	.word	0x00026614
    e56c:	0002a2ff 	.word	0x0002a2ff
    e570:	000242e9 	.word	0x000242e9

0000e574 <read_included_uuid_cb>:
{
    e574:	b570      	push	{r4, r5, r6, lr}
    e576:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
    e578:	2b10      	cmp	r3, #16
{
    e57a:	9c12      	ldr	r4, [sp, #72]	; 0x48
    e57c:	4605      	mov	r5, r0
    e57e:	4611      	mov	r1, r2
	if (length != 16U) {
    e580:	d011      	beq.n	e5a6 <read_included_uuid_cb+0x32>
    e582:	4925      	ldr	r1, [pc, #148]	; (e618 <read_included_uuid_cb+0xa4>)
    e584:	4a25      	ldr	r2, [pc, #148]	; (e61c <read_included_uuid_cb+0xa8>)
		BT_ERR("Invalid data len %u", length);
    e586:	4826      	ldr	r0, [pc, #152]	; (e620 <read_included_uuid_cb+0xac>)
    e588:	1a52      	subs	r2, r2, r1
    e58a:	08d2      	lsrs	r2, r2, #3
    e58c:	0192      	lsls	r2, r2, #6
    e58e:	4619      	mov	r1, r3
    e590:	f042 0201 	orr.w	r2, r2, #1
    e594:	f012 fb21 	bl	20bda <log_1>
		params->func(conn, NULL, params);
    e598:	6863      	ldr	r3, [r4, #4]
    e59a:	4622      	mov	r2, r4
    e59c:	2100      	movs	r1, #0
    e59e:	4628      	mov	r0, r5
    e5a0:	4798      	blx	r3
}
    e5a2:	b00e      	add	sp, #56	; 0x38
    e5a4:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
    e5a6:	8962      	ldrh	r2, [r4, #10]
    e5a8:	f8ad 200c 	strh.w	r2, [sp, #12]
	value.end_handle = params->_included.end_handle;
    e5ac:	89a2      	ldrh	r2, [r4, #12]
    e5ae:	f8ad 200e 	strh.w	r2, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
    e5b2:	2202      	movs	r2, #2
    e5b4:	f88d 2010 	strb.w	r2, [sp, #16]
	value.uuid = &u.uuid;
    e5b8:	ae04      	add	r6, sp, #16
	memcpy(u.u128.val, pdu, length);
    e5ba:	461a      	mov	r2, r3
    e5bc:	f10d 0011 	add.w	r0, sp, #17
	value.uuid = &u.uuid;
    e5c0:	9602      	str	r6, [sp, #8]
	memcpy(u.u128.val, pdu, length);
    e5c2:	f014 f8ad 	bl	22720 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    e5c6:	6821      	ldr	r1, [r4, #0]
    e5c8:	b9f9      	cbnz	r1, e60a <read_included_uuid_cb+0x96>
	attr = (&(struct bt_gatt_attr) {
    e5ca:	2210      	movs	r2, #16
    e5cc:	2100      	movs	r1, #0
    e5ce:	a80a      	add	r0, sp, #40	; 0x28
    e5d0:	f014 f8d1 	bl	22776 <memset>
		.uuid = BT_UUID_GATT_INCLUDE,
    e5d4:	2300      	movs	r3, #0
    e5d6:	f88d 3004 	strb.w	r3, [sp, #4]
    e5da:	f642 0302 	movw	r3, #10242	; 0x2802
    e5de:	f8ad 3006 	strh.w	r3, [sp, #6]
	attr = (&(struct bt_gatt_attr) {
    e5e2:	ab01      	add	r3, sp, #4
    e5e4:	9309      	str	r3, [sp, #36]	; 0x24
    e5e6:	ab02      	add	r3, sp, #8
    e5e8:	930c      	str	r3, [sp, #48]	; 0x30
	attr->handle = params->_included.attr_handle;
    e5ea:	8923      	ldrh	r3, [r4, #8]
    e5ec:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    e5f0:	4622      	mov	r2, r4
    e5f2:	6863      	ldr	r3, [r4, #4]
    e5f4:	a909      	add	r1, sp, #36	; 0x24
    e5f6:	4628      	mov	r0, r5
    e5f8:	4798      	blx	r3
    e5fa:	2800      	cmp	r0, #0
    e5fc:	d0d1      	beq.n	e5a2 <read_included_uuid_cb+0x2e>
	gatt_discover_next(conn, params->start_handle, params);
    e5fe:	8921      	ldrh	r1, [r4, #8]
    e600:	4622      	mov	r2, r4
    e602:	4628      	mov	r0, r5
    e604:	f015 fed9 	bl	243ba <gatt_discover_next>
	return;
    e608:	e7cb      	b.n	e5a2 <read_included_uuid_cb+0x2e>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    e60a:	4630      	mov	r0, r6
    e60c:	f014 f957 	bl	228be <bt_uuid_cmp>
    e610:	2800      	cmp	r0, #0
    e612:	d0da      	beq.n	e5ca <read_included_uuid_cb+0x56>
    e614:	e7f3      	b.n	e5fe <read_included_uuid_cb+0x8a>
    e616:	bf00      	nop
    e618:	00026544 	.word	0x00026544
    e61c:	00026614 	.word	0x00026614
    e620:	0002a2ff 	.word	0x0002a2ff

0000e624 <gatt_find_info_rsp>:
{
    e624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e628:	b08f      	sub	sp, #60	; 0x3c
    e62a:	4680      	mov	r8, r0
    e62c:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
    e62e:	4608      	mov	r0, r1
    e630:	b971      	cbnz	r1, e650 <gatt_find_info_rsp+0x2c>
	switch (rsp->format) {
    e632:	7811      	ldrb	r1, [r2, #0]
    e634:	2901      	cmp	r1, #1
    e636:	d011      	beq.n	e65c <gatt_find_info_rsp+0x38>
    e638:	2902      	cmp	r1, #2
    e63a:	d028      	beq.n	e68e <gatt_find_info_rsp+0x6a>
    e63c:	4a4f      	ldr	r2, [pc, #316]	; (e77c <gatt_find_info_rsp+0x158>)
    e63e:	4b50      	ldr	r3, [pc, #320]	; (e780 <gatt_find_info_rsp+0x15c>)
		BT_ERR("Invalid format %u", rsp->format);
    e640:	4850      	ldr	r0, [pc, #320]	; (e784 <gatt_find_info_rsp+0x160>)
    e642:	1ad2      	subs	r2, r2, r3
    e644:	08d2      	lsrs	r2, r2, #3
    e646:	0192      	lsls	r2, r2, #6
    e648:	f042 0201 	orr.w	r2, r2, #1
    e64c:	f012 fac5 	bl	20bda <log_1>
	params->func(conn, NULL, params);
    e650:	6873      	ldr	r3, [r6, #4]
    e652:	4632      	mov	r2, r6
    e654:	2100      	movs	r1, #0
    e656:	4640      	mov	r0, r8
    e658:	4798      	blx	r3
    e65a:	e08b      	b.n	e774 <gatt_find_info_rsp+0x150>
		u.uuid.type = BT_UUID_TYPE_16;
    e65c:	f88d 0010 	strb.w	r0, [sp, #16]
		len = sizeof(*info.i16);
    e660:	f04f 0a04 	mov.w	sl, #4
	length--;
    e664:	3b01      	subs	r3, #1
    e666:	b29b      	uxth	r3, r3
	if (length < len) {
    e668:	4553      	cmp	r3, sl
    e66a:	d3f1      	bcc.n	e650 <gatt_find_info_rsp+0x2c>
	for (i = length / len, pdu = rsp->info; i != 0;
    e66c:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
    e670:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
    e674:	9300      	str	r3, [sp, #0]
    e676:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
    e678:	46cb      	mov	fp, r9
			skip = false;
    e67a:	464d      	mov	r5, r9
    e67c:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
    e67e:	9b00      	ldr	r3, [sp, #0]
    e680:	b953      	cbnz	r3, e698 <gatt_find_info_rsp+0x74>
	gatt_discover_next(conn, handle, params);
    e682:	4632      	mov	r2, r6
    e684:	4659      	mov	r1, fp
    e686:	4640      	mov	r0, r8
    e688:	f015 fe97 	bl	243ba <gatt_discover_next>
	return;
    e68c:	e072      	b.n	e774 <gatt_find_info_rsp+0x150>
		u.uuid.type = BT_UUID_TYPE_128;
    e68e:	f88d 1010 	strb.w	r1, [sp, #16]
		len = sizeof(*info.i128);
    e692:	f04f 0a12 	mov.w	sl, #18
		break;
    e696:	e7e5      	b.n	e664 <gatt_find_info_rsp+0x40>
		handle = sys_le16_to_cpu(info.i16->handle);
    e698:	8823      	ldrh	r3, [r4, #0]
    e69a:	f8ad 3004 	strh.w	r3, [sp, #4]
    e69e:	fa1f fb83 	uxth.w	fp, r3
		if (skip) {
    e6a2:	f1b9 0f00 	cmp.w	r9, #0
    e6a6:	d151      	bne.n	e74c <gatt_find_info_rsp+0x128>
		switch (u.uuid.type) {
    e6a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    e6ac:	2b00      	cmp	r3, #0
    e6ae:	d03a      	beq.n	e726 <gatt_find_info_rsp+0x102>
    e6b0:	2b02      	cmp	r3, #2
    e6b2:	d03f      	beq.n	e734 <gatt_find_info_rsp+0x110>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    e6b4:	6831      	ldr	r1, [r6, #0]
    e6b6:	2900      	cmp	r1, #0
    e6b8:	d143      	bne.n	e742 <gatt_find_info_rsp+0x11e>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
    e6ba:	7c33      	ldrb	r3, [r6, #16]
    e6bc:	2b04      	cmp	r3, #4
    e6be:	d148      	bne.n	e752 <gatt_find_info_rsp+0x12e>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    e6c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e6c4:	a902      	add	r1, sp, #8
    e6c6:	4638      	mov	r0, r7
    e6c8:	f88d 5008 	strb.w	r5, [sp, #8]
    e6cc:	f8ad 300a 	strh.w	r3, [sp, #10]
    e6d0:	f014 f8f5 	bl	228be <bt_uuid_cmp>
    e6d4:	b310      	cbz	r0, e71c <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    e6d6:	f642 0301 	movw	r3, #10241	; 0x2801
    e6da:	a903      	add	r1, sp, #12
    e6dc:	4638      	mov	r0, r7
    e6de:	f88d 500c 	strb.w	r5, [sp, #12]
    e6e2:	f8ad 300e 	strh.w	r3, [sp, #14]
    e6e6:	f014 f8ea 	bl	228be <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    e6ea:	b1b8      	cbz	r0, e71c <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
    e6ec:	f642 0302 	movw	r3, #10242	; 0x2802
    e6f0:	a909      	add	r1, sp, #36	; 0x24
    e6f2:	4638      	mov	r0, r7
    e6f4:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    e6f8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    e6fc:	f014 f8df 	bl	228be <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    e700:	b160      	cbz	r0, e71c <gatt_find_info_rsp+0xf8>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
    e702:	f642 0303 	movw	r3, #10243	; 0x2803
    e706:	a909      	add	r1, sp, #36	; 0x24
    e708:	4638      	mov	r0, r7
    e70a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    e70e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    e712:	f014 f8d4 	bl	228be <bt_uuid_cmp>
    e716:	b9e0      	cbnz	r0, e752 <gatt_find_info_rsp+0x12e>
				skip = true;
    e718:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
    e71c:	9b00      	ldr	r3, [sp, #0]
    e71e:	3b01      	subs	r3, #1
    e720:	9300      	str	r3, [sp, #0]
    e722:	4454      	add	r4, sl
    e724:	e7ab      	b.n	e67e <gatt_find_info_rsp+0x5a>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
    e726:	78a3      	ldrb	r3, [r4, #2]
    e728:	78e2      	ldrb	r2, [r4, #3]
    e72a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e72e:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
    e732:	e7bf      	b.n	e6b4 <gatt_find_info_rsp+0x90>
			memcpy(u.u128.val, info.i128->uuid, 16);
    e734:	2210      	movs	r2, #16
    e736:	1ca1      	adds	r1, r4, #2
    e738:	f10d 0011 	add.w	r0, sp, #17
    e73c:	f013 fff0 	bl	22720 <memcpy>
			break;
    e740:	e7b8      	b.n	e6b4 <gatt_find_info_rsp+0x90>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    e742:	4638      	mov	r0, r7
    e744:	f014 f8bb 	bl	228be <bt_uuid_cmp>
    e748:	2800      	cmp	r0, #0
    e74a:	d0b6      	beq.n	e6ba <gatt_find_info_rsp+0x96>
			skip = false;
    e74c:	f04f 0900 	mov.w	r9, #0
    e750:	e7e4      	b.n	e71c <gatt_find_info_rsp+0xf8>
		attr->handle = handle;
    e752:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e756:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			BT_GATT_DESCRIPTOR(&u.uuid, 0, NULL, NULL, NULL));
    e75a:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    e75e:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    e762:	6873      	ldr	r3, [r6, #4]
			BT_GATT_DESCRIPTOR(&u.uuid, 0, NULL, NULL, NULL));
    e764:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    e768:	4632      	mov	r2, r6
    e76a:	a909      	add	r1, sp, #36	; 0x24
    e76c:	4640      	mov	r0, r8
    e76e:	4798      	blx	r3
    e770:	2800      	cmp	r0, #0
    e772:	d1d3      	bne.n	e71c <gatt_find_info_rsp+0xf8>
}
    e774:	b00f      	add	sp, #60	; 0x3c
    e776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e77a:	bf00      	nop
    e77c:	00026614 	.word	0x00026614
    e780:	00026544 	.word	0x00026544
    e784:	0002a313 	.word	0x0002a313

0000e788 <bt_gatt_read>:
{
    e788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    e78c:	7b43      	ldrb	r3, [r0, #13]
    e78e:	2b06      	cmp	r3, #6
{
    e790:	4605      	mov	r5, r0
    e792:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    e794:	d166      	bne.n	e864 <bt_gatt_read+0xdc>
	if (params->handle_count == 0) {
    e796:	684a      	ldr	r2, [r1, #4]
    e798:	bb1a      	cbnz	r2, e7e2 <bt_gatt_read+0x5a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    e79a:	2204      	movs	r2, #4
    e79c:	2108      	movs	r1, #8
    e79e:	f7fe f8c5 	bl	c92c <bt_att_create_pdu>
	if (!buf) {
    e7a2:	4606      	mov	r6, r0
    e7a4:	b918      	cbnz	r0, e7ae <bt_gatt_read+0x26>
		return -ENOMEM;
    e7a6:	f06f 000b 	mvn.w	r0, #11
}
    e7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	req = net_buf_add(buf, sizeof(*req));
    e7ae:	f100 0708 	add.w	r7, r0, #8
    e7b2:	2104      	movs	r1, #4
    e7b4:	4638      	mov	r0, r7
    e7b6:	f016 fe19 	bl	253ec <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
    e7ba:	8923      	ldrh	r3, [r4, #8]
    e7bc:	8003      	strh	r3, [r0, #0]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
    e7be:	68e1      	ldr	r1, [r4, #12]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
    e7c0:	8963      	ldrh	r3, [r4, #10]
    e7c2:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
    e7c4:	780b      	ldrb	r3, [r1, #0]
    e7c6:	b933      	cbnz	r3, e7d6 <bt_gatt_read+0x4e>
		net_buf_add_le16(buf, BT_UUID_16(params->by_uuid.uuid)->val);
    e7c8:	8849      	ldrh	r1, [r1, #2]
    e7ca:	4638      	mov	r0, r7
    e7cc:	f016 fe25 	bl	2541a <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    e7d0:	4a26      	ldr	r2, [pc, #152]	; (e86c <bt_gatt_read+0xe4>)
    e7d2:	4623      	mov	r3, r4
    e7d4:	e019      	b.n	e80a <bt_gatt_read+0x82>
		net_buf_add_mem(buf, BT_UUID_128(params->by_uuid.uuid)->val, 16);
    e7d6:	2210      	movs	r2, #16
    e7d8:	3101      	adds	r1, #1
    e7da:	4638      	mov	r0, r7
    e7dc:	f016 fe0c 	bl	253f8 <net_buf_simple_add_mem>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    e7e0:	e7f6      	b.n	e7d0 <bt_gatt_read+0x48>
	if (params->handle_count > 1) {
    e7e2:	2a01      	cmp	r2, #1
    e7e4:	d91e      	bls.n	e824 <bt_gatt_read+0x9c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_REQ,
    e7e6:	0052      	lsls	r2, r2, #1
    e7e8:	210e      	movs	r1, #14
    e7ea:	f7fe f89f 	bl	c92c <bt_att_create_pdu>
	if (!buf) {
    e7ee:	4606      	mov	r6, r0
    e7f0:	2800      	cmp	r0, #0
    e7f2:	d0d8      	beq.n	e7a6 <bt_gatt_read+0x1e>
    e7f4:	2700      	movs	r7, #0
		net_buf_add_le16(buf, params->handles[i]);
    e7f6:	f100 0808 	add.w	r8, r0, #8
	for (i = 0U; i < params->handle_count; i++) {
    e7fa:	6862      	ldr	r2, [r4, #4]
    e7fc:	b2fb      	uxtb	r3, r7
    e7fe:	4293      	cmp	r3, r2
    e800:	f107 0701 	add.w	r7, r7, #1
    e804:	d307      	bcc.n	e816 <bt_gatt_read+0x8e>
	return gatt_send(conn, buf, gatt_read_mult_rsp, params, NULL);
    e806:	4a1a      	ldr	r2, [pc, #104]	; (e870 <bt_gatt_read+0xe8>)
    e808:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    e80a:	4631      	mov	r1, r6
    e80c:	4628      	mov	r0, r5
}
    e80e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    e812:	f7fe bdb3 	b.w	d37c <gatt_send.constprop.0>
		net_buf_add_le16(buf, params->handles[i]);
    e816:	68a2      	ldr	r2, [r4, #8]
    e818:	4640      	mov	r0, r8
    e81a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    e81e:	f016 fdfc 	bl	2541a <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
    e822:	e7ea      	b.n	e7fa <bt_gatt_read+0x72>
	if (params->single.offset) {
    e824:	894b      	ldrh	r3, [r1, #10]
    e826:	b17b      	cbz	r3, e848 <bt_gatt_read+0xc0>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_BLOB_REQ, sizeof(*req));
    e828:	2204      	movs	r2, #4
    e82a:	210c      	movs	r1, #12
    e82c:	f7fe f87e 	bl	c92c <bt_att_create_pdu>
	if (!buf) {
    e830:	4606      	mov	r6, r0
    e832:	2800      	cmp	r0, #0
    e834:	d0b7      	beq.n	e7a6 <bt_gatt_read+0x1e>
	req = net_buf_add(buf, sizeof(*req));
    e836:	2104      	movs	r1, #4
    e838:	3008      	adds	r0, #8
    e83a:	f016 fdd7 	bl	253ec <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
    e83e:	8923      	ldrh	r3, [r4, #8]
    e840:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
    e842:	8963      	ldrh	r3, [r4, #10]
    e844:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    e846:	e7c3      	b.n	e7d0 <bt_gatt_read+0x48>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    e848:	2202      	movs	r2, #2
    e84a:	210a      	movs	r1, #10
    e84c:	f7fe f86e 	bl	c92c <bt_att_create_pdu>
	if (!buf) {
    e850:	4606      	mov	r6, r0
    e852:	2800      	cmp	r0, #0
    e854:	d0a7      	beq.n	e7a6 <bt_gatt_read+0x1e>
	req = net_buf_add(buf, sizeof(*req));
    e856:	2102      	movs	r1, #2
    e858:	3008      	adds	r0, #8
    e85a:	f016 fdc7 	bl	253ec <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
    e85e:	8923      	ldrh	r3, [r4, #8]
    e860:	8003      	strh	r3, [r0, #0]
    e862:	e7b5      	b.n	e7d0 <bt_gatt_read+0x48>
		return -ENOTCONN;
    e864:	f06f 0038 	mvn.w	r0, #56	; 0x38
    e868:	e79f      	b.n	e7aa <bt_gatt_read+0x22>
    e86a:	bf00      	nop
    e86c:	0000e875 	.word	0x0000e875
    e870:	00023f7b 	.word	0x00023f7b

0000e874 <gatt_read_rsp>:
{
    e874:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e878:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e87a:	4606      	mov	r6, r0
    e87c:	4690      	mov	r8, r2
    e87e:	4699      	mov	r9, r3
	if (err || !length) {
    e880:	460f      	mov	r7, r1
    e882:	b901      	cbnz	r1, e886 <gatt_read_rsp+0x12>
    e884:	b953      	cbnz	r3, e89c <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
    e886:	2300      	movs	r3, #0
    e888:	930a      	str	r3, [sp, #40]	; 0x28
    e88a:	6825      	ldr	r5, [r4, #0]
    e88c:	4622      	mov	r2, r4
    e88e:	4639      	mov	r1, r7
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    e890:	4630      	mov	r0, r6
    e892:	46ac      	mov	ip, r5
}
    e894:	b003      	add	sp, #12
    e896:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    e89a:	4760      	bx	ip
	if (!params->handle_count) {
    e89c:	6863      	ldr	r3, [r4, #4]
    e89e:	2b00      	cmp	r3, #0
    e8a0:	d148      	bne.n	e934 <gatt_read_rsp+0xc0>
	for (length--, pdu = rsp->data; length;
    e8a2:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
    e8a6:	b2ad      	uxth	r5, r5
    e8a8:	f102 0901 	add.w	r9, r2, #1
    e8ac:	b335      	cbz	r5, e8fc <gatt_read_rsp+0x88>
		handle = sys_le16_to_cpu(data->handle);
    e8ae:	f8b9 2000 	ldrh.w	r2, [r9]
    e8b2:	b293      	uxth	r3, r2
		if (!handle) {
    e8b4:	b963      	cbnz	r3, e8d0 <gatt_read_rsp+0x5c>
    e8b6:	4b30      	ldr	r3, [pc, #192]	; (e978 <gatt_read_rsp+0x104>)
    e8b8:	4930      	ldr	r1, [pc, #192]	; (e97c <gatt_read_rsp+0x108>)
			BT_ERR("Invalid handle");
    e8ba:	4831      	ldr	r0, [pc, #196]	; (e980 <gatt_read_rsp+0x10c>)
    e8bc:	1ac9      	subs	r1, r1, r3
    e8be:	08c9      	lsrs	r1, r1, #3
    e8c0:	0189      	lsls	r1, r1, #6
    e8c2:	f041 0101 	orr.w	r1, r1, #1
}
    e8c6:	b003      	add	sp, #12
    e8c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("Invalid handle");
    e8cc:	f012 b978 	b.w	20bc0 <log_0>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
    e8d0:	f898 3000 	ldrb.w	r3, [r8]
		params->by_uuid.start_handle = handle;
    e8d4:	8122      	strh	r2, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
    e8d6:	42ab      	cmp	r3, r5
    e8d8:	bf8c      	ite	hi
    e8da:	1eab      	subhi	r3, r5, #2
    e8dc:	3b02      	subls	r3, #2
    e8de:	b29b      	uxth	r3, r3
		if (params->func(conn, 0, params, data->value, len) ==
    e8e0:	9300      	str	r3, [sp, #0]
    e8e2:	6827      	ldr	r7, [r4, #0]
    e8e4:	f109 0302 	add.w	r3, r9, #2
    e8e8:	4622      	mov	r2, r4
    e8ea:	2100      	movs	r1, #0
    e8ec:	4630      	mov	r0, r6
    e8ee:	47b8      	blx	r7
    e8f0:	2800      	cmp	r0, #0
    e8f2:	d03e      	beq.n	e972 <gatt_read_rsp+0xfe>
		if (rsp->len > length) {
    e8f4:	f898 1000 	ldrb.w	r1, [r8]
    e8f8:	428d      	cmp	r5, r1
    e8fa:	d20b      	bcs.n	e914 <gatt_read_rsp+0xa0>
	if (bt_gatt_read(conn, params) < 0) {
    e8fc:	4621      	mov	r1, r4
    e8fe:	4630      	mov	r0, r6
    e900:	f7ff ff42 	bl	e788 <bt_gatt_read>
    e904:	2800      	cmp	r0, #0
    e906:	da34      	bge.n	e972 <gatt_read_rsp+0xfe>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    e908:	2300      	movs	r3, #0
    e90a:	930a      	str	r3, [sp, #40]	; 0x28
    e90c:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    e90e:	4622      	mov	r2, r4
    e910:	210e      	movs	r1, #14
    e912:	e7bd      	b.n	e890 <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
    e914:	8922      	ldrh	r2, [r4, #8]
    e916:	8960      	ldrh	r0, [r4, #10]
    e918:	4290      	cmp	r0, r2
    e91a:	d105      	bne.n	e928 <gatt_read_rsp+0xb4>
			params->func(conn, 0, params, NULL, 0);
    e91c:	2300      	movs	r3, #0
    e91e:	930a      	str	r3, [sp, #40]	; 0x28
    e920:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
    e922:	4622      	mov	r2, r4
    e924:	4619      	mov	r1, r3
    e926:	e7b3      	b.n	e890 <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
    e928:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    e92a:	1a6d      	subs	r5, r5, r1
		params->by_uuid.start_handle++;
    e92c:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    e92e:	b2ad      	uxth	r5, r5
    e930:	4489      	add	r9, r1
    e932:	e7bb      	b.n	e8ac <gatt_read_rsp+0x38>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
    e934:	f8cd 9000 	str.w	r9, [sp]
    e938:	4613      	mov	r3, r2
    e93a:	6825      	ldr	r5, [r4, #0]
    e93c:	4622      	mov	r2, r4
    e93e:	47a8      	blx	r5
    e940:	b1b8      	cbz	r0, e972 <gatt_read_rsp+0xfe>
	if (length < (bt_att_get_mtu(conn) - 1)) {
    e942:	4630      	mov	r0, r6
    e944:	f015 f97a 	bl	23c3c <bt_att_get_mtu>
    e948:	3801      	subs	r0, #1
    e94a:	4581      	cmp	r9, r0
    e94c:	da03      	bge.n	e956 <gatt_read_rsp+0xe2>
		params->func(conn, 0, params, NULL, 0);
    e94e:	970a      	str	r7, [sp, #40]	; 0x28
    e950:	6825      	ldr	r5, [r4, #0]
    e952:	463b      	mov	r3, r7
    e954:	e7e5      	b.n	e922 <gatt_read_rsp+0xae>
	params->single.offset += length;
    e956:	8963      	ldrh	r3, [r4, #10]
    e958:	eb09 0503 	add.w	r5, r9, r3
    e95c:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
    e95e:	4621      	mov	r1, r4
    e960:	4630      	mov	r0, r6
    e962:	f7ff ff11 	bl	e788 <bt_gatt_read>
    e966:	2800      	cmp	r0, #0
    e968:	da03      	bge.n	e972 <gatt_read_rsp+0xfe>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    e96a:	970a      	str	r7, [sp, #40]	; 0x28
    e96c:	6825      	ldr	r5, [r4, #0]
    e96e:	463b      	mov	r3, r7
    e970:	e7cd      	b.n	e90e <gatt_read_rsp+0x9a>
}
    e972:	b003      	add	sp, #12
    e974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e978:	00026544 	.word	0x00026544
    e97c:	00026614 	.word	0x00026614
    e980:	0002a325 	.word	0x0002a325

0000e984 <bt_gatt_write_without_response_cb>:
{
    e984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e988:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    e98a:	7b42      	ldrb	r2, [r0, #13]
    e98c:	2a06      	cmp	r2, #6
{
    e98e:	461d      	mov	r5, r3
    e990:	e9dd 890d 	ldrd	r8, r9, [sp, #52]	; 0x34
    e994:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    e998:	4606      	mov	r6, r0
    e99a:	468a      	mov	sl, r1
	if (conn->state != BT_CONN_CONNECTED) {
    e99c:	d13c      	bne.n	ea18 <bt_gatt_write_without_response_cb+0x94>
	if (conn->encrypt) {
    e99e:	7ac2      	ldrb	r2, [r0, #11]
    e9a0:	bb6a      	cbnz	r2, e9fe <bt_gatt_write_without_response_cb+0x7a>
	if (sign) {
    e9a2:	b363      	cbz	r3, e9fe <bt_gatt_write_without_response_cb+0x7a>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_SIGNED_WRITE_CMD,
    e9a4:	f105 020e 	add.w	r2, r5, #14
    e9a8:	21d2      	movs	r1, #210	; 0xd2
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
    e9aa:	f7fd ffbf 	bl	c92c <bt_att_create_pdu>
    e9ae:	4604      	mov	r4, r0
	if (!buf) {
    e9b0:	b310      	cbz	r0, e9f8 <bt_gatt_write_without_response_cb+0x74>
	cmd = net_buf_add(buf, sizeof(*cmd));
    e9b2:	2102      	movs	r1, #2
    e9b4:	3008      	adds	r0, #8
    e9b6:	f016 fd19 	bl	253ec <net_buf_simple_add>
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
    e9ba:	2300      	movs	r3, #0
	cmd->handle = sys_cpu_to_le16(handle);
    e9bc:	f8a0 a000 	strh.w	sl, [r0]
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
    e9c0:	2200      	movs	r2, #0
    e9c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
    e9c6:	2300      	movs	r3, #0
    e9c8:	e9cd 2300 	strd	r2, r3, [sp]
    e9cc:	4629      	mov	r1, r5
    e9ce:	463a      	mov	r2, r7
    e9d0:	4620      	mov	r0, r4
    e9d2:	f016 fd6c 	bl	254ae <net_buf_append_bytes>
	if (write != length) {
    e9d6:	4285      	cmp	r5, r0
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
    e9d8:	4602      	mov	r2, r0
	if (write != length) {
    e9da:	d014      	beq.n	ea06 <bt_gatt_write_without_response_cb+0x82>
    e9dc:	4911      	ldr	r1, [pc, #68]	; (ea24 <bt_gatt_write_without_response_cb+0xa0>)
    e9de:	4b12      	ldr	r3, [pc, #72]	; (ea28 <bt_gatt_write_without_response_cb+0xa4>)
		BT_WARN("Unable to allocate length %u: only %zu written",
    e9e0:	4812      	ldr	r0, [pc, #72]	; (ea2c <bt_gatt_write_without_response_cb+0xa8>)
    e9e2:	1a5b      	subs	r3, r3, r1
    e9e4:	08db      	lsrs	r3, r3, #3
    e9e6:	019b      	lsls	r3, r3, #6
    e9e8:	f043 0302 	orr.w	r3, r3, #2
    e9ec:	4629      	mov	r1, r5
    e9ee:	f012 f908 	bl	20c02 <log_2>
		net_buf_unref(buf);
    e9f2:	4620      	mov	r0, r4
    e9f4:	f00f fae0 	bl	1dfb8 <net_buf_unref>
		return -ENOMEM;
    e9f8:	f06f 000b 	mvn.w	r0, #11
    e9fc:	e00e      	b.n	ea1c <bt_gatt_write_without_response_cb+0x98>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
    e9fe:	1caa      	adds	r2, r5, #2
    ea00:	2152      	movs	r1, #82	; 0x52
    ea02:	4630      	mov	r0, r6
    ea04:	e7d1      	b.n	e9aa <bt_gatt_write_without_response_cb+0x26>
	return bt_att_send(conn, buf, func, user_data);
    ea06:	464b      	mov	r3, r9
    ea08:	4642      	mov	r2, r8
    ea0a:	4621      	mov	r1, r4
    ea0c:	4630      	mov	r0, r6
}
    ea0e:	b004      	add	sp, #16
    ea10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, func, user_data);
    ea14:	f015 b9a9 	b.w	23d6a <bt_att_send>
		return -ENOTCONN;
    ea18:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    ea1c:	b004      	add	sp, #16
    ea1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ea22:	bf00      	nop
    ea24:	00026544 	.word	0x00026544
    ea28:	00026614 	.word	0x00026614
    ea2c:	0002a334 	.word	0x0002a334

0000ea30 <bt_gatt_mult_notification>:
{
    ea30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea34:	460c      	mov	r4, r1
    ea36:	b087      	sub	sp, #28
	sub = gatt_sub_find(conn);
    ea38:	2100      	movs	r1, #0
{
    ea3a:	4682      	mov	sl, r0
    ea3c:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
    ea3e:	f7fe fd19 	bl	d474 <gatt_sub_find_free>
	if (!sub) {
    ea42:	4607      	mov	r7, r0
    ea44:	b1f8      	cbz	r0, ea86 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x26>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
    ea46:	4632      	mov	r2, r6
    ea48:	4621      	mov	r1, r4
    ea4a:	a803      	add	r0, sp, #12
    ea4c:	f016 fc85 	bl	2535a <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
    ea50:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    ea54:	2b04      	cmp	r3, #4
    ea56:	d916      	bls.n	ea86 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x26>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    ea58:	2104      	movs	r1, #4
    ea5a:	a803      	add	r0, sp, #12
    ea5c:	f016 fd03 	bl	25466 <net_buf_simple_pull_mem>
		if (len > buf.len) {
    ea60:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
    ea64:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
    ea68:	4543      	cmp	r3, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    ea6a:	4605      	mov	r5, r0
		if (len > buf.len) {
    ea6c:	d20e      	bcs.n	ea8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c>
    ea6e:	4a1d      	ldr	r2, [pc, #116]	; (eae4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>)
    ea70:	4b1d      	ldr	r3, [pc, #116]	; (eae8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x88>)
			BT_ERR("Invalid data len %u > %u", len, length);
    ea72:	481e      	ldr	r0, [pc, #120]	; (eaec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8c>)
    ea74:	1a9b      	subs	r3, r3, r2
    ea76:	08db      	lsrs	r3, r3, #3
    ea78:	019b      	lsls	r3, r3, #6
    ea7a:	f043 0301 	orr.w	r3, r3, #1
    ea7e:	4632      	mov	r2, r6
    ea80:	4641      	mov	r1, r8
    ea82:	f012 f8be 	bl	20c02 <log_2>
}
    ea86:	b007      	add	sp, #28
    ea88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    ea8c:	68bb      	ldr	r3, [r7, #8]
    ea8e:	b31b      	cbz	r3, ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>
    ea90:	f1b3 0910 	subs.w	r9, r3, #16
    ea94:	d020      	beq.n	ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>
    ea96:	681c      	ldr	r4, [r3, #0]
    ea98:	b104      	cbz	r4, ea9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c>
    ea9a:	3c10      	subs	r4, #16
		handle = sys_cpu_to_le16(nfy->handle);
    ea9c:	462b      	mov	r3, r5
    ea9e:	f833 bb04 	ldrh.w	fp, [r3], #4
    eaa2:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
    eaa4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    eaa8:	455b      	cmp	r3, fp
    eaaa:	d10b      	bne.n	eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>
			if (params->notify(conn, params, nfy->value, len) ==
    eaac:	9a01      	ldr	r2, [sp, #4]
    eaae:	f8d9 5000 	ldr.w	r5, [r9]
    eab2:	4643      	mov	r3, r8
    eab4:	4649      	mov	r1, r9
    eab6:	4650      	mov	r0, sl
    eab8:	47a8      	blx	r5
    eaba:	b918      	cbnz	r0, eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>
				bt_gatt_unsubscribe(conn, params);
    eabc:	4649      	mov	r1, r9
    eabe:	4650      	mov	r0, sl
    eac0:	f015 fce3 	bl	2448a <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    eac4:	b144      	cbz	r4, ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>
Z_GENLIST_PEEK_NEXT(slist, snode)
    eac6:	f114 0310 	adds.w	r3, r4, #16
    eaca:	d002      	beq.n	ead2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x72>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    eacc:	6923      	ldr	r3, [r4, #16]
    eace:	b103      	cbz	r3, ead2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x72>
    ead0:	3b10      	subs	r3, #16
{
    ead2:	46a1      	mov	r9, r4
    ead4:	461c      	mov	r4, r3
    ead6:	e7e5      	b.n	eaa4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x44>
		net_buf_simple_pull_mem(&buf, len);
    ead8:	4641      	mov	r1, r8
    eada:	a803      	add	r0, sp, #12
    eadc:	f016 fcc3 	bl	25466 <net_buf_simple_pull_mem>
    eae0:	e7b6      	b.n	ea50 <bt_gatt_mult_notification+0x20>
    eae2:	bf00      	nop
    eae4:	00026544 	.word	0x00026544
    eae8:	00026614 	.word	0x00026614
    eaec:	0002a363 	.word	0x0002a363

0000eaf0 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    eaf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    eaf2:	4a1e      	ldr	r2, [pc, #120]	; (eb6c <bt_gatt_connected+0x7c>)
	data.conn = conn;
    eaf4:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    eaf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    eafa:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    eafc:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    eafe:	2001      	movs	r0, #1
    eb00:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    eb04:	f015 fc21 	bl	2434a <bt_gatt_foreach_attr>
	 * client prior to sending an indication or notification. If the client
	 * does not have an LTK indicating that the client has lost the bond,
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    bt_conn_get_security(conn) < data.sec) {
    eb08:	4628      	mov	r0, r5
    eb0a:	f014 f9ac 	bl	22e66 <bt_conn_get_security>
    eb0e:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    eb12:	4288      	cmp	r0, r1
    eb14:	d202      	bcs.n	eb1c <bt_gatt_connected+0x2c>
		bt_conn_set_security(conn, data.sec);
    eb16:	4628      	mov	r0, r5
    eb18:	f014 f972 	bl	22e00 <bt_conn_set_security>
	sub = gatt_sub_find(conn);
    eb1c:	2100      	movs	r1, #0
    eb1e:	4628      	mov	r0, r5
    eb20:	f7fe fca8 	bl	d474 <gatt_sub_find_free>
	if (!sub) {
    eb24:	b128      	cbz	r0, eb32 <bt_gatt_connected+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    eb26:	6884      	ldr	r4, [r0, #8]
    eb28:	b11c      	cbz	r4, eb32 <bt_gatt_connected+0x42>
    eb2a:	3c10      	subs	r4, #16
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    eb2c:	f105 0688 	add.w	r6, r5, #136	; 0x88
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    eb30:	b90c      	cbnz	r4, eb36 <bt_gatt_connected+0x46>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    eb32:	b002      	add	sp, #8
    eb34:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    eb36:	7a28      	ldrb	r0, [r5, #8]
    eb38:	4631      	mov	r1, r6
    eb3a:	f014 f88f 	bl	22c5c <bt_addr_le_is_bonded>
    eb3e:	b160      	cbz	r0, eb5a <bt_gatt_connected+0x6a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    eb40:	f3bf 8f5b 	dmb	ish
    eb44:	68e3      	ldr	r3, [r4, #12]
    eb46:	f3bf 8f5b 	dmb	ish
    eb4a:	079b      	lsls	r3, r3, #30
    eb4c:	d405      	bmi.n	eb5a <bt_gatt_connected+0x6a>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    eb4e:	8922      	ldrh	r2, [r4, #8]
    eb50:	88e1      	ldrh	r1, [r4, #6]
    eb52:	4623      	mov	r3, r4
    eb54:	4628      	mov	r0, r5
    eb56:	f7fe fcb7 	bl	d4c8 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    eb5a:	f114 0f10 	cmn.w	r4, #16
    eb5e:	d0e8      	beq.n	eb32 <bt_gatt_connected+0x42>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    eb60:	6924      	ldr	r4, [r4, #16]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    eb62:	2c00      	cmp	r4, #0
    eb64:	d0e5      	beq.n	eb32 <bt_gatt_connected+0x42>
    eb66:	3c10      	subs	r4, #16
    eb68:	e7e2      	b.n	eb30 <bt_gatt_connected+0x40>
    eb6a:	bf00      	nop
    eb6c:	0000dec1 	.word	0x0000dec1

0000eb70 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    eb70:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    eb72:	4a06      	ldr	r2, [pc, #24]	; (eb8c <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    eb74:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    eb76:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    eb78:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    eb7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    eb7e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    eb82:	f015 fbe2 	bl	2434a <bt_gatt_foreach_attr>
}
    eb86:	b003      	add	sp, #12
    eb88:	f85d fb04 	ldr.w	pc, [sp], #4
    eb8c:	0000dec1 	.word	0x0000dec1

0000eb90 <db_hash_read>:
{
    eb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb92:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    eb94:	480f      	ldr	r0, [pc, #60]	; (ebd4 <db_hash_read+0x44>)
{
    eb96:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    eb9a:	4615      	mov	r5, r2
    eb9c:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
    eb9e:	f017 f9dd 	bl	25f5c <k_delayed_work_cancel>
	if (!err) {
    eba2:	b908      	cbnz	r0, eba8 <db_hash_read+0x18>
		db_hash_gen(true);
    eba4:	f7ff f894 	bl	dcd0 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
    eba8:	2101      	movs	r1, #1
    ebaa:	4620      	mov	r0, r4
    ebac:	f015 fd13 	bl	245d6 <bt_gatt_change_aware>
	if (offset > value_len) {
    ebb0:	2e10      	cmp	r6, #16
    ebb2:	d80c      	bhi.n	ebce <db_hash_read+0x3e>
	len = MIN(buf_len, value_len - offset);
    ebb4:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    ebb8:	4907      	ldr	r1, [pc, #28]	; (ebd8 <db_hash_read+0x48>)
	len = MIN(buf_len, value_len - offset);
    ebba:	42bc      	cmp	r4, r7
    ebbc:	bfa8      	it	ge
    ebbe:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    ebc0:	4622      	mov	r2, r4
    ebc2:	4431      	add	r1, r6
    ebc4:	4628      	mov	r0, r5
    ebc6:	f013 fdab 	bl	22720 <memcpy>
}
    ebca:	4620      	mov	r0, r4
    ebcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    ebce:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    ebd2:	e7fa      	b.n	ebca <db_hash_read+0x3a>
    ebd4:	20000e90 	.word	0x20000e90
    ebd8:	20005376 	.word	0x20005376

0000ebdc <bt_gatt_disconnected>:
	return 0;

}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    ebdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    ebe0:	4a33      	ldr	r2, [pc, #204]	; (ecb0 <bt_gatt_disconnected+0xd4>)
    ebe2:	4603      	mov	r3, r0
{
    ebe4:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    ebe6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ebea:	2001      	movs	r0, #1
    ebec:	f015 fbad 	bl	2434a <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    ebf0:	2100      	movs	r1, #0
    ebf2:	4620      	mov	r0, r4
    ebf4:	f7fe fc3e 	bl	d474 <gatt_sub_find_free>
	if (!sub) {
    ebf8:	4606      	mov	r6, r0
    ebfa:	b3a8      	cbz	r0, ec68 <bt_gatt_disconnected+0x8c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    ebfc:	6883      	ldr	r3, [r0, #8]
    ebfe:	b39b      	cbz	r3, ec68 <bt_gatt_disconnected+0x8c>
    ec00:	f1b3 0710 	subs.w	r7, r3, #16
    ec04:	d030      	beq.n	ec68 <bt_gatt_disconnected+0x8c>
    ec06:	681d      	ldr	r5, [r3, #0]
    ec08:	b105      	cbz	r5, ec0c <bt_gatt_disconnected+0x30>
    ec0a:	3d10      	subs	r5, #16
{
    ec0c:	f04f 0b00 	mov.w	fp, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    ec10:	f104 0888 	add.w	r8, r4, #136	; 0x88
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    ec14:	f106 0901 	add.w	r9, r6, #1
			params->value = 0U;
    ec18:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    ec1a:	7a20      	ldrb	r0, [r4, #8]
    ec1c:	4641      	mov	r1, r8
    ec1e:	f014 f81d 	bl	22c5c <bt_addr_le_is_bonded>
    ec22:	b988      	cbnz	r0, ec48 <bt_gatt_disconnected+0x6c>
			params->value = 0U;
    ec24:	f8a7 a008 	strh.w	sl, [r7, #8]
			gatt_sub_remove(conn, sub, prev, params);
    ec28:	463b      	mov	r3, r7
    ec2a:	465a      	mov	r2, fp
    ec2c:	4631      	mov	r1, r6
    ec2e:	4620      	mov	r0, r4
    ec30:	f015 facd 	bl	241ce <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    ec34:	b1c5      	cbz	r5, ec68 <bt_gatt_disconnected+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ec36:	f115 0110 	adds.w	r1, r5, #16
    ec3a:	d002      	beq.n	ec42 <bt_gatt_disconnected+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ec3c:	6929      	ldr	r1, [r5, #16]
    ec3e:	b101      	cbz	r1, ec42 <bt_gatt_disconnected+0x66>
    ec40:	3910      	subs	r1, #16
{
    ec42:	462f      	mov	r7, r5
    ec44:	460d      	mov	r5, r1
    ec46:	e7e8      	b.n	ec1a <bt_gatt_disconnected+0x3e>
    ec48:	f3bf 8f5b 	dmb	ish
    ec4c:	68fb      	ldr	r3, [r7, #12]
    ec4e:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    ec52:	07db      	lsls	r3, r3, #31
    ec54:	d4e6      	bmi.n	ec24 <bt_gatt_disconnected+0x48>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    ec56:	7873      	ldrb	r3, [r6, #1]
    ec58:	b11b      	cbz	r3, ec62 <bt_gatt_disconnected+0x86>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    ec5a:	4641      	mov	r1, r8
    ec5c:	4648      	mov	r0, r9
    ec5e:	f015 f979 	bl	23f54 <bt_addr_le_copy>
			prev = &params->node;
    ec62:	f107 0b10 	add.w	fp, r7, #16
    ec66:	e7e5      	b.n	ec34 <bt_gatt_disconnected+0x58>
	cfg = find_cf_cfg(conn);
    ec68:	4620      	mov	r0, r4
    ec6a:	f7fe fcbb 	bl	d5e4 <find_cf_cfg>
	if (!cfg) {
    ec6e:	4605      	mov	r5, r0
    ec70:	b1e0      	cbz	r0, ecac <bt_gatt_disconnected+0xd0>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    ec72:	f104 0688 	add.w	r6, r4, #136	; 0x88
    ec76:	7a20      	ldrb	r0, [r4, #8]
    ec78:	4631      	mov	r1, r6
    ec7a:	f013 ffef 	bl	22c5c <bt_addr_le_is_bonded>
    ec7e:	b920      	cbnz	r0, ec8a <bt_gatt_disconnected+0xae>
		clear_cf_cfg(cfg);
    ec80:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    ec82:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
    ec86:	f015 b99f 	b.w	23fc8 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    ec8a:	1c68      	adds	r0, r5, #1
    ec8c:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ec8e:	350c      	adds	r5, #12
    ec90:	f015 f960 	bl	23f54 <bt_addr_le_copy>
    ec94:	f3bf 8f5b 	dmb	ish
    ec98:	e855 3f00 	ldrex	r3, [r5]
    ec9c:	f023 0302 	bic.w	r3, r3, #2
    eca0:	e845 3200 	strex	r2, r3, [r5]
    eca4:	2a00      	cmp	r2, #0
    eca6:	d1f7      	bne.n	ec98 <bt_gatt_disconnected+0xbc>
    eca8:	f3bf 8f5b 	dmb	ish
}
    ecac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecb0:	0000da9d 	.word	0x0000da9d

0000ecb4 <get_io_capa>:
static const uint8_t *sc_public_key;
static K_SEM_DEFINE(sc_local_pkey_ready, 0, 1);

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    ecb4:	4b10      	ldr	r3, [pc, #64]	; (ecf8 <get_io_capa+0x44>)
    ecb6:	681b      	ldr	r3, [r3, #0]
    ecb8:	b1bb      	cbz	r3, ecea <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    ecba:	681a      	ldr	r2, [r3, #0]
    ecbc:	b142      	cbz	r2, ecd0 <get_io_capa+0x1c>
    ecbe:	6859      	ldr	r1, [r3, #4]
    ecc0:	b131      	cbz	r1, ecd0 <get_io_capa+0x1c>
    ecc2:	6899      	ldr	r1, [r3, #8]
    ecc4:	b911      	cbnz	r1, eccc <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    ecc6:	490d      	ldr	r1, [pc, #52]	; (ecfc <get_io_capa+0x48>)
    ecc8:	7809      	ldrb	r1, [r1, #0]
    ecca:	b939      	cbnz	r1, ecdc <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    eccc:	2004      	movs	r0, #4
    ecce:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    ecd0:	490a      	ldr	r1, [pc, #40]	; (ecfc <get_io_capa+0x48>)
    ecd2:	7809      	ldrb	r1, [r1, #0]
    ecd4:	b111      	cbz	r1, ecdc <get_io_capa+0x28>
    ecd6:	b10a      	cbz	r2, ecdc <get_io_capa+0x28>
    ecd8:	6899      	ldr	r1, [r3, #8]
    ecda:	b941      	cbnz	r1, ecee <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    ecdc:	685b      	ldr	r3, [r3, #4]
    ecde:	b943      	cbnz	r3, ecf2 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    ece0:	2a00      	cmp	r2, #0
    ece2:	bf0c      	ite	eq
    ece4:	2003      	moveq	r0, #3
    ece6:	2000      	movne	r0, #0
    ece8:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    ecea:	2003      	movs	r0, #3
    ecec:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    ecee:	2001      	movs	r0, #1
    ecf0:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    ecf2:	2002      	movs	r0, #2
	}
}
    ecf4:	4770      	bx	lr
    ecf6:	bf00      	nop
    ecf8:	2000190c 	.word	0x2000190c
    ecfc:	20005387 	.word	0x20005387

0000ed00 <smp_g2>:
	return 0;
}

static int smp_g2(const uint8_t u[32], const uint8_t v[32],
		  const uint8_t x[16], const uint8_t y[16], uint32_t *passkey)
{
    ed00:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed02:	b099      	sub	sp, #100	; 0x64
    ed04:	4614      	mov	r4, r2
    ed06:	460f      	mov	r7, r1
	BT_DBG("u %s", bt_hex(u, 32));
	BT_DBG("v %s", bt_hex(v, 32));
	BT_DBG("x %s", bt_hex(x, 16));
	BT_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
    ed08:	2220      	movs	r2, #32
    ed0a:	4601      	mov	r1, r0
    ed0c:	a804      	add	r0, sp, #16
{
    ed0e:	461e      	mov	r6, r3
    ed10:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
    ed12:	f015 fc92 	bl	2463a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    ed16:	2220      	movs	r2, #32
    ed18:	4639      	mov	r1, r7
    ed1a:	a80c      	add	r0, sp, #48	; 0x30
    ed1c:	f015 fc8d 	bl	2463a <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    ed20:	2210      	movs	r2, #16
    ed22:	4631      	mov	r1, r6
    ed24:	a814      	add	r0, sp, #80	; 0x50
    ed26:	f015 fc88 	bl	2463a <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
    ed2a:	4621      	mov	r1, r4
    ed2c:	2210      	movs	r2, #16
    ed2e:	4668      	mov	r0, sp
    ed30:	f015 fc83 	bl	2463a <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    ed34:	466b      	mov	r3, sp
    ed36:	2250      	movs	r2, #80	; 0x50
    ed38:	a904      	add	r1, sp, #16
    ed3a:	4618      	mov	r0, r3
    ed3c:	f015 fcaf 	bl	2469e <bt_smp_aes_cmac>
	if (err) {
    ed40:	4604      	mov	r4, r0
    ed42:	b960      	cbnz	r0, ed5e <smp_g2+0x5e>
		return err;
	}
	BT_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
    ed44:	2204      	movs	r2, #4
    ed46:	a903      	add	r1, sp, #12
    ed48:	4628      	mov	r0, r5
    ed4a:	f013 fce9 	bl	22720 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    ed4e:	682b      	ldr	r3, [r5, #0]
    ed50:	4904      	ldr	r1, [pc, #16]	; (ed64 <smp_g2+0x64>)
    ed52:	ba1b      	rev	r3, r3
    ed54:	fbb3 f2f1 	udiv	r2, r3, r1
    ed58:	fb01 3312 	mls	r3, r1, r2, r3
    ed5c:	602b      	str	r3, [r5, #0]

	BT_DBG("passkey %u", *passkey);

	return 0;
}
    ed5e:	4620      	mov	r0, r4
    ed60:	b019      	add	sp, #100	; 0x64
    ed62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed64:	000f4240 	.word	0x000f4240

0000ed68 <display_passkey>:
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
	return 0;
}

static uint8_t display_passkey(struct bt_smp *smp)
{
    ed68:	b570      	push	{r4, r5, r6, lr}
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		smp->passkey = fixed_passkey;
	} else {
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    ed6a:	2104      	movs	r1, #4
{
    ed6c:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    ed6e:	f500 70cc 	add.w	r0, r0, #408	; 0x198
    ed72:	f004 ff8d 	bl	13c90 <bt_rand>
    ed76:	4605      	mov	r5, r0
    ed78:	b9e0      	cbnz	r0, edb4 <display_passkey+0x4c>
		smp->passkey %= 1000000;
	}

	smp->passkey_round = 0U;

	if (bt_auth && bt_auth->passkey_display) {
    ed7a:	4e0f      	ldr	r6, [pc, #60]	; (edb8 <display_passkey+0x50>)
		smp->passkey %= 1000000;
    ed7c:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
    ed80:	4a0e      	ldr	r2, [pc, #56]	; (edbc <display_passkey+0x54>)
	smp->passkey_round = 0U;
    ed82:	f884 019c 	strb.w	r0, [r4, #412]	; 0x19c
	if (bt_auth && bt_auth->passkey_display) {
    ed86:	6830      	ldr	r0, [r6, #0]
		smp->passkey %= 1000000;
    ed88:	fbb1 f3f2 	udiv	r3, r1, r2
    ed8c:	fb02 1313 	mls	r3, r2, r3, r1
    ed90:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
	if (bt_auth && bt_auth->passkey_display) {
    ed94:	b168      	cbz	r0, edb2 <display_passkey+0x4a>
    ed96:	6800      	ldr	r0, [r0, #0]
    ed98:	b158      	cbz	r0, edb2 <display_passkey+0x4a>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    ed9a:	210a      	movs	r1, #10
    ed9c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    eda0:	f015 fc57 	bl	24652 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    eda4:	6833      	ldr	r3, [r6, #0]
    eda6:	6820      	ldr	r0, [r4, #0]
    eda8:	681b      	ldr	r3, [r3, #0]
    edaa:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
    edae:	4798      	blx	r3
	}

	smp->passkey = sys_cpu_to_le32(smp->passkey);

	return 0;
    edb0:	4628      	mov	r0, r5
}
    edb2:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    edb4:	2008      	movs	r0, #8
    edb6:	e7fc      	b.n	edb2 <display_passkey+0x4a>
    edb8:	2000190c 	.word	0x2000190c
    edbc:	000f4240 	.word	0x000f4240

0000edc0 <smp_ident_info>:
{
    edc0:	b570      	push	{r4, r5, r6, lr}
    edc2:	460b      	mov	r3, r1
    edc4:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    edc6:	210c      	movs	r1, #12
    edc8:	30c4      	adds	r0, #196	; 0xc4
    edca:	f015 fc50 	bl	2466e <atomic_test_bit>
    edce:	b308      	cbz	r0, ee14 <smp_ident_info+0x54>
		struct bt_smp_ident_info *req = (void *)buf->data;
    edd0:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    edd2:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    edd4:	f103 0588 	add.w	r5, r3, #136	; 0x88
    edd8:	7a19      	ldrb	r1, [r3, #8]
    edda:	462a      	mov	r2, r5
    eddc:	2002      	movs	r0, #2
    edde:	f016 fa7a 	bl	252d6 <bt_keys_get_type>
		if (!keys) {
    ede2:	b990      	cbnz	r0, ee0a <smp_ident_info+0x4a>
    ede4:	4a0f      	ldr	r2, [pc, #60]	; (ee24 <smp_ident_info+0x64>)
    ede6:	4c10      	ldr	r4, [pc, #64]	; (ee28 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    ede8:	4628      	mov	r0, r5
    edea:	1aa4      	subs	r4, r4, r2
    edec:	f7f8 f9d6 	bl	719c <bt_addr_le_str_real>
    edf0:	f7f6 fc40 	bl	5674 <log_strdup>
    edf4:	08e4      	lsrs	r4, r4, #3
    edf6:	01a4      	lsls	r4, r4, #6
    edf8:	f044 0401 	orr.w	r4, r4, #1
    edfc:	4601      	mov	r1, r0
    edfe:	4622      	mov	r2, r4
    ee00:	480a      	ldr	r0, [pc, #40]	; (ee2c <smp_ident_info+0x6c>)
    ee02:	f011 feea 	bl	20bda <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    ee06:	2008      	movs	r0, #8
}
    ee08:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    ee0a:	2210      	movs	r2, #16
    ee0c:	4631      	mov	r1, r6
    ee0e:	302a      	adds	r0, #42	; 0x2a
    ee10:	f013 fc86 	bl	22720 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    ee14:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    ee18:	2109      	movs	r1, #9
    ee1a:	f015 fc1a 	bl	24652 <atomic_set_bit>
	return 0;
    ee1e:	2000      	movs	r0, #0
    ee20:	e7f2      	b.n	ee08 <smp_ident_info+0x48>
    ee22:	bf00      	nop
    ee24:	00026544 	.word	0x00026544
    ee28:	00026654 	.word	0x00026654
    ee2c:	0002a38b 	.word	0x0002a38b

0000ee30 <smp_encrypt_info>:
{
    ee30:	b570      	push	{r4, r5, r6, lr}
    ee32:	460b      	mov	r3, r1
    ee34:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ee36:	210c      	movs	r1, #12
    ee38:	30c4      	adds	r0, #196	; 0xc4
    ee3a:	f015 fc18 	bl	2466e <atomic_test_bit>
    ee3e:	b308      	cbz	r0, ee84 <smp_encrypt_info+0x54>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    ee40:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    ee42:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    ee44:	f103 0588 	add.w	r5, r3, #136	; 0x88
    ee48:	7a19      	ldrb	r1, [r3, #8]
    ee4a:	462a      	mov	r2, r5
    ee4c:	2004      	movs	r0, #4
    ee4e:	f016 fa42 	bl	252d6 <bt_keys_get_type>
		if (!keys) {
    ee52:	b990      	cbnz	r0, ee7a <smp_encrypt_info+0x4a>
    ee54:	4a0f      	ldr	r2, [pc, #60]	; (ee94 <smp_encrypt_info+0x64>)
    ee56:	4c10      	ldr	r4, [pc, #64]	; (ee98 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    ee58:	4628      	mov	r0, r5
    ee5a:	1aa4      	subs	r4, r4, r2
    ee5c:	f7f8 f99e 	bl	719c <bt_addr_le_str_real>
    ee60:	f7f6 fc08 	bl	5674 <log_strdup>
    ee64:	08e4      	lsrs	r4, r4, #3
    ee66:	01a4      	lsls	r4, r4, #6
    ee68:	f044 0401 	orr.w	r4, r4, #1
    ee6c:	4601      	mov	r1, r0
    ee6e:	4622      	mov	r2, r4
    ee70:	480a      	ldr	r0, [pc, #40]	; (ee9c <smp_encrypt_info+0x6c>)
    ee72:	f011 feb2 	bl	20bda <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    ee76:	2008      	movs	r0, #8
}
    ee78:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    ee7a:	2210      	movs	r2, #16
    ee7c:	4631      	mov	r1, r6
    ee7e:	301a      	adds	r0, #26
    ee80:	f013 fc4e 	bl	22720 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    ee84:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    ee88:	2107      	movs	r1, #7
    ee8a:	f015 fbe2 	bl	24652 <atomic_set_bit>
	return 0;
    ee8e:	2000      	movs	r0, #0
    ee90:	e7f2      	b.n	ee78 <smp_encrypt_info+0x48>
    ee92:	bf00      	nop
    ee94:	00026544 	.word	0x00026544
    ee98:	00026654 	.word	0x00026654
    ee9c:	0002a38b 	.word	0x0002a38b

0000eea0 <legacy_request_tk>:
{
    eea0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    eea2:	6804      	ldr	r4, [r0, #0]
{
    eea4:	4605      	mov	r5, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    eea6:	f104 0188 	add.w	r1, r4, #136	; 0x88
    eeaa:	7a20      	ldrb	r0, [r4, #8]
    eeac:	f001 fc9e 	bl	107ec <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    eeb0:	f895 10c8 	ldrb.w	r1, [r5, #200]	; 0xc8
    eeb4:	b178      	cbz	r0, eed6 <legacy_request_tk+0x36>
    eeb6:	7b43      	ldrb	r3, [r0, #13]
    eeb8:	07db      	lsls	r3, r3, #31
    eeba:	d50c      	bpl.n	eed6 <legacy_request_tk+0x36>
    eebc:	b959      	cbnz	r1, eed6 <legacy_request_tk+0x36>
    eebe:	4937      	ldr	r1, [pc, #220]	; (ef9c <legacy_request_tk+0xfc>)
    eec0:	4b37      	ldr	r3, [pc, #220]	; (efa0 <legacy_request_tk+0x100>)
		BT_ERR("JustWorks failed, authenticated keys present");
    eec2:	4838      	ldr	r0, [pc, #224]	; (efa4 <legacy_request_tk+0x104>)
    eec4:	1ac9      	subs	r1, r1, r3
    eec6:	08c9      	lsrs	r1, r1, #3
    eec8:	0189      	lsls	r1, r1, #6
    eeca:	f041 0101 	orr.w	r1, r1, #1
    eece:	f011 fe77 	bl	20bc0 <log_0>
				return BT_SMP_ERR_UNSPECIFIED;
    eed2:	2008      	movs	r0, #8
    eed4:	e01d      	b.n	ef12 <legacy_request_tk+0x72>
	switch (smp->method) {
    eed6:	4608      	mov	r0, r1
    eed8:	2906      	cmp	r1, #6
    eeda:	d852      	bhi.n	ef82 <legacy_request_tk+0xe2>
    eedc:	e8df f001 	tbb	[pc, r1]
    eee0:	511b4619 	.word	0x511b4619
    eee4:	5151      	.short	0x5151
    eee6:	04          	.byte	0x04
    eee7:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    eee8:	4e2f      	ldr	r6, [pc, #188]	; (efa8 <legacy_request_tk+0x108>)
    eeea:	6833      	ldr	r3, [r6, #0]
    eeec:	2b00      	cmp	r3, #0
    eeee:	d053      	beq.n	ef98 <legacy_request_tk+0xf8>
    eef0:	68db      	ldr	r3, [r3, #12]
    eef2:	2b00      	cmp	r3, #0
    eef4:	d050      	beq.n	ef98 <legacy_request_tk+0xf8>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    eef6:	2109      	movs	r1, #9
    eef8:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
			struct bt_conn_oob_info info = {
    eefc:	2400      	movs	r4, #0
    eefe:	f8ad 4004 	strh.w	r4, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ef02:	f015 fba6 	bl	24652 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    ef06:	6833      	ldr	r3, [r6, #0]
    ef08:	6828      	ldr	r0, [r5, #0]
    ef0a:	68db      	ldr	r3, [r3, #12]
    ef0c:	a901      	add	r1, sp, #4
    ef0e:	4798      	blx	r3
	return 0;
    ef10:	2000      	movs	r0, #0
}
    ef12:	b002      	add	sp, #8
    ef14:	bd70      	pop	{r4, r5, r6, pc}
			if (bt_rand(&passkey, sizeof(passkey))) {
    ef16:	2104      	movs	r1, #4
    ef18:	eb0d 0001 	add.w	r0, sp, r1
    ef1c:	f004 feb8 	bl	13c90 <bt_rand>
    ef20:	2800      	cmp	r0, #0
    ef22:	d1d6      	bne.n	eed2 <legacy_request_tk+0x32>
			passkey %= 1000000;
    ef24:	9901      	ldr	r1, [sp, #4]
    ef26:	4a21      	ldr	r2, [pc, #132]	; (efac <legacy_request_tk+0x10c>)
		if (bt_auth && bt_auth->passkey_display) {
    ef28:	4e1f      	ldr	r6, [pc, #124]	; (efa8 <legacy_request_tk+0x108>)
			passkey %= 1000000;
    ef2a:	fbb1 f3f2 	udiv	r3, r1, r2
    ef2e:	fb02 1313 	mls	r3, r2, r3, r1
    ef32:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    ef34:	6833      	ldr	r3, [r6, #0]
    ef36:	b15b      	cbz	r3, ef50 <legacy_request_tk+0xb0>
    ef38:	681b      	ldr	r3, [r3, #0]
    ef3a:	b14b      	cbz	r3, ef50 <legacy_request_tk+0xb0>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    ef3c:	210a      	movs	r1, #10
    ef3e:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    ef42:	f015 fb86 	bl	24652 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    ef46:	6833      	ldr	r3, [r6, #0]
    ef48:	9901      	ldr	r1, [sp, #4]
    ef4a:	681b      	ldr	r3, [r3, #0]
    ef4c:	4620      	mov	r0, r4
    ef4e:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    ef50:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    ef52:	f885 3107 	strb.w	r3, [r5, #263]	; 0x107
	dst[1] = val >> 8;
    ef56:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    ef5a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ef5c:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	dst[1] = val >> 8;
    ef60:	0a1b      	lsrs	r3, r3, #8
    ef62:	f885 2108 	strb.w	r2, [r5, #264]	; 0x108
    ef66:	f885 310a 	strb.w	r3, [r5, #266]	; 0x10a
    ef6a:	e7d1      	b.n	ef10 <legacy_request_tk+0x70>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ef6c:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    ef70:	2109      	movs	r1, #9
    ef72:	f015 fb6e 	bl	24652 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    ef76:	4b0c      	ldr	r3, [pc, #48]	; (efa8 <legacy_request_tk+0x108>)
    ef78:	681b      	ldr	r3, [r3, #0]
    ef7a:	4620      	mov	r0, r4
    ef7c:	685b      	ldr	r3, [r3, #4]
    ef7e:	4798      	blx	r3
    ef80:	e7c6      	b.n	ef10 <legacy_request_tk+0x70>
    ef82:	4b07      	ldr	r3, [pc, #28]	; (efa0 <legacy_request_tk+0x100>)
    ef84:	4a05      	ldr	r2, [pc, #20]	; (ef9c <legacy_request_tk+0xfc>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ef86:	480a      	ldr	r0, [pc, #40]	; (efb0 <legacy_request_tk+0x110>)
    ef88:	1ad2      	subs	r2, r2, r3
    ef8a:	08d2      	lsrs	r2, r2, #3
    ef8c:	0192      	lsls	r2, r2, #6
    ef8e:	f042 0201 	orr.w	r2, r2, #1
    ef92:	f011 fe22 	bl	20bda <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    ef96:	e79c      	b.n	eed2 <legacy_request_tk+0x32>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    ef98:	2002      	movs	r0, #2
    ef9a:	e7ba      	b.n	ef12 <legacy_request_tk+0x72>
    ef9c:	00026654 	.word	0x00026654
    efa0:	00026544 	.word	0x00026544
    efa4:	0002a3a5 	.word	0x0002a3a5
    efa8:	2000190c 	.word	0x2000190c
    efac:	000f4240 	.word	0x000f4240
    efb0:	0002a3d2 	.word	0x0002a3d2

0000efb4 <get_auth.isra.0>:
	if (sc_supported) {
    efb4:	4b0c      	ldr	r3, [pc, #48]	; (efe8 <get_auth.isra.0+0x34>)
    efb6:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    efb8:	b510      	push	{r4, lr}
	if (sc_supported) {
    efba:	b17b      	cbz	r3, efdc <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    efbc:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    efc0:	f7ff fe78 	bl	ecb4 <get_io_capa>
	if (bondable) {
    efc4:	4b09      	ldr	r3, [pc, #36]	; (efec <get_auth.isra.0+0x38>)
    efc6:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    efc8:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    efca:	bf0c      	ite	eq
    efcc:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    efd0:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    efd4:	b12b      	cbz	r3, efe2 <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    efd6:	f044 0001 	orr.w	r0, r4, #1
}
    efda:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    efdc:	f000 0407 	and.w	r4, r0, #7
    efe0:	e7ee      	b.n	efc0 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    efe2:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    efe6:	e7f8      	b.n	efda <get_auth.isra.0+0x26>
    efe8:	20005387 	.word	0x20005387
    efec:	20000710 	.word	0x20000710

0000eff0 <sec_level_reachable.isra.0>:
	switch (conn->required_sec_level) {
    eff0:	2803      	cmp	r0, #3
static bool sec_level_reachable(struct bt_conn *conn)
    eff2:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    eff4:	d00a      	beq.n	f00c <sec_level_reachable.isra.0+0x1c>
    eff6:	d805      	bhi.n	f004 <sec_level_reachable.isra.0+0x14>
    eff8:	3801      	subs	r0, #1
    effa:	2801      	cmp	r0, #1
    effc:	bf8c      	ite	hi
    effe:	2000      	movhi	r0, #0
    f000:	2001      	movls	r0, #1
}
    f002:	bd08      	pop	{r3, pc}
	switch (conn->required_sec_level) {
    f004:	2804      	cmp	r0, #4
    f006:	d010      	beq.n	f02a <sec_level_reachable.isra.0+0x3a>
    f008:	2000      	movs	r0, #0
    f00a:	e7fa      	b.n	f002 <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f00c:	f7ff fe52 	bl	ecb4 <get_io_capa>
    f010:	2803      	cmp	r0, #3
    f012:	d108      	bne.n	f026 <sec_level_reachable.isra.0+0x36>
		       (bt_auth && bt_auth->oob_data_request);
    f014:	4b0c      	ldr	r3, [pc, #48]	; (f048 <sec_level_reachable.isra.0+0x58>)
    f016:	6818      	ldr	r0, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f018:	2800      	cmp	r0, #0
    f01a:	d0f2      	beq.n	f002 <sec_level_reachable.isra.0+0x12>
		       (bt_auth && bt_auth->oob_data_request);
    f01c:	68c0      	ldr	r0, [r0, #12]
    f01e:	3800      	subs	r0, #0
    f020:	bf18      	it	ne
    f022:	2001      	movne	r0, #1
    f024:	e7ed      	b.n	f002 <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f026:	2001      	movs	r0, #1
    f028:	e7eb      	b.n	f002 <sec_level_reachable.isra.0+0x12>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f02a:	f7ff fe43 	bl	ecb4 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f02e:	2803      	cmp	r0, #3
    f030:	d104      	bne.n	f03c <sec_level_reachable.isra.0+0x4c>
    f032:	4b05      	ldr	r3, [pc, #20]	; (f048 <sec_level_reachable.isra.0+0x58>)
    f034:	6818      	ldr	r0, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f036:	b118      	cbz	r0, f040 <sec_level_reachable.isra.0+0x50>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f038:	68c0      	ldr	r0, [r0, #12]
    f03a:	b108      	cbz	r0, f040 <sec_level_reachable.isra.0+0x50>
    f03c:	4b03      	ldr	r3, [pc, #12]	; (f04c <sec_level_reachable.isra.0+0x5c>)
    f03e:	7818      	ldrb	r0, [r3, #0]
    f040:	f000 0001 	and.w	r0, r0, #1
    f044:	e7dd      	b.n	f002 <sec_level_reachable.isra.0+0x12>
    f046:	bf00      	nop
    f048:	2000190c 	.word	0x2000190c
    f04c:	20005387 	.word	0x20005387

0000f050 <smp_chan_get>:
{
    f050:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    f052:	2106      	movs	r1, #6
    f054:	f014 fa5e 	bl	23514 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    f058:	4604      	mov	r4, r0
    f05a:	b948      	cbnz	r0, f070 <smp_chan_get+0x20>
    f05c:	4905      	ldr	r1, [pc, #20]	; (f074 <smp_chan_get+0x24>)
    f05e:	4b06      	ldr	r3, [pc, #24]	; (f078 <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    f060:	4806      	ldr	r0, [pc, #24]	; (f07c <smp_chan_get+0x2c>)
    f062:	1ac9      	subs	r1, r1, r3
    f064:	08c9      	lsrs	r1, r1, #3
    f066:	0189      	lsls	r1, r1, #6
    f068:	f041 0101 	orr.w	r1, r1, #1
    f06c:	f011 fda8 	bl	20bc0 <log_0>
}
    f070:	4620      	mov	r0, r4
    f072:	bd10      	pop	{r4, pc}
    f074:	00026654 	.word	0x00026654
    f078:	00026544 	.word	0x00026544
    f07c:	0002a3ee 	.word	0x0002a3ee

0000f080 <get_pair_method>:
{
    f080:	b538      	push	{r3, r4, r5, lr}
    f082:	4605      	mov	r5, r0
    f084:	460c      	mov	r4, r1
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f086:	30c4      	adds	r0, #196	; 0xc4
    f088:	2105      	movs	r1, #5
    f08a:	f015 faf0 	bl	2466e <atomic_test_bit>
    f08e:	bb00      	cbnz	r0, f0d2 <get_pair_method+0x52>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    f090:	2c04      	cmp	r4, #4
    f092:	d81d      	bhi.n	f0d0 <get_pair_method+0x50>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    f094:	f895 30cb 	ldrb.w	r3, [r5, #203]	; 0xcb
    f098:	f895 20d2 	ldrb.w	r2, [r5, #210]	; 0xd2
    f09c:	4013      	ands	r3, r2
    f09e:	07d8      	lsls	r0, r3, #31
    f0a0:	d434      	bmi.n	f10c <get_pair_method+0x8c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    f0a2:	f895 00d3 	ldrb.w	r0, [r5, #211]	; 0xd3
    f0a6:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    f0aa:	4303      	orrs	r3, r0
    f0ac:	f013 0004 	ands.w	r0, r3, #4
    f0b0:	d00e      	beq.n	f0d0 <get_pair_method+0x50>
	method = gen_method_legacy[remote_io][get_io_capa()];
    f0b2:	f7ff fdff 	bl	ecb4 <get_io_capa>
    f0b6:	4b18      	ldr	r3, [pc, #96]	; (f118 <get_pair_method+0x98>)
    f0b8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    f0bc:	441c      	add	r4, r3
    f0be:	5c20      	ldrb	r0, [r4, r0]
	if (method == PASSKEY_ROLE) {
    f0c0:	2804      	cmp	r0, #4
    f0c2:	d105      	bne.n	f0d0 <get_pair_method+0x50>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f0c4:	682b      	ldr	r3, [r5, #0]
    f0c6:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
    f0c8:	2b00      	cmp	r3, #0
    f0ca:	bf0c      	ite	eq
    f0cc:	2002      	moveq	r0, #2
    f0ce:	2001      	movne	r0, #1
}
    f0d0:	bd38      	pop	{r3, r4, r5, pc}
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    f0d2:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    f0d6:	f895 00d3 	ldrb.w	r0, [r5, #211]	; 0xd3
    f0da:	ea03 0200 	and.w	r2, r3, r0
    f0de:	0711      	lsls	r1, r2, #28
    f0e0:	d506      	bpl.n	f0f0 <get_pair_method+0x70>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    f0e2:	f895 20cb 	ldrb.w	r2, [r5, #203]	; 0xcb
    f0e6:	f895 10d2 	ldrb.w	r1, [r5, #210]	; 0xd2
    f0ea:	430a      	orrs	r2, r1
    f0ec:	07d2      	lsls	r2, r2, #31
    f0ee:	d40f      	bmi.n	f110 <get_pair_method+0x90>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    f0f0:	2c04      	cmp	r4, #4
    f0f2:	d80f      	bhi.n	f114 <get_pair_method+0x94>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    f0f4:	4318      	orrs	r0, r3
    f0f6:	f010 0004 	ands.w	r0, r0, #4
    f0fa:	d0e9      	beq.n	f0d0 <get_pair_method+0x50>
	return gen_method_sc[remote_io][get_io_capa()];
    f0fc:	f7ff fdda 	bl	ecb4 <get_io_capa>
    f100:	4906      	ldr	r1, [pc, #24]	; (f11c <get_pair_method+0x9c>)
    f102:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    f106:	440c      	add	r4, r1
    f108:	5c20      	ldrb	r0, [r4, r0]
    f10a:	e7e1      	b.n	f0d0 <get_pair_method+0x50>
		return LEGACY_OOB;
    f10c:	2006      	movs	r0, #6
    f10e:	e7df      	b.n	f0d0 <get_pair_method+0x50>
			return LE_SC_OOB;
    f110:	2005      	movs	r0, #5
    f112:	e7dd      	b.n	f0d0 <get_pair_method+0x50>
		return JUST_WORKS;
    f114:	2000      	movs	r0, #0
    f116:	e7db      	b.n	f0d0 <get_pair_method+0x50>
    f118:	0002a5fe 	.word	0x0002a5fe
    f11c:	0002a617 	.word	0x0002a617

0000f120 <smp_init>:
{
    f120:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    f122:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
{
    f126:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    f128:	22f0      	movs	r2, #240	; 0xf0
    f12a:	2100      	movs	r1, #0
    f12c:	4628      	mov	r0, r5
    f12e:	f013 fb22 	bl	22776 <memset>
	if (bt_rand(smp->prnd, 16)) {
    f132:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    f136:	2110      	movs	r1, #16
    f138:	f004 fdaa 	bl	13c90 <bt_rand>
    f13c:	4604      	mov	r4, r0
    f13e:	b948      	cbnz	r0, f154 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    f140:	2105      	movs	r1, #5
    f142:	4628      	mov	r0, r5
    f144:	f015 fa85 	bl	24652 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    f148:	f7fa fe90 	bl	9e6c <bt_pub_key_get>
    f14c:	4b02      	ldr	r3, [pc, #8]	; (f158 <smp_init+0x38>)
    f14e:	6018      	str	r0, [r3, #0]
}
    f150:	4620      	mov	r0, r4
    f152:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    f154:	2408      	movs	r4, #8
    f156:	e7fb      	b.n	f150 <smp_init+0x30>
    f158:	20001a6c 	.word	0x20001a6c

0000f15c <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    f15c:	4a0f      	ldr	r2, [pc, #60]	; (f19c <bt_smp_accept+0x40>)
    f15e:	6813      	ldr	r3, [r2, #0]
{
    f160:	b510      	push	{r4, lr}
    f162:	4614      	mov	r4, r2
		if (smp->chan.chan.conn) {
    f164:	b18b      	cbz	r3, f18a <bt_smp_accept+0x2e>
    f166:	f8d2 31e0 	ldr.w	r3, [r2, #480]	; 0x1e0
    f16a:	b16b      	cbz	r3, f188 <bt_smp_accept+0x2c>
    f16c:	4b0c      	ldr	r3, [pc, #48]	; (f1a0 <bt_smp_accept+0x44>)
    f16e:	4a0d      	ldr	r2, [pc, #52]	; (f1a4 <bt_smp_accept+0x48>)
    f170:	1ad2      	subs	r2, r2, r3
    f172:	08d2      	lsrs	r2, r2, #3
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
    f174:	0192      	lsls	r2, r2, #6
    f176:	4601      	mov	r1, r0
    f178:	f042 0201 	orr.w	r2, r2, #1
    f17c:	480a      	ldr	r0, [pc, #40]	; (f1a8 <bt_smp_accept+0x4c>)
    f17e:	f011 fd2c 	bl	20bda <log_1>

	return -ENOMEM;
    f182:	f06f 000b 	mvn.w	r0, #11
}
    f186:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    f188:	2301      	movs	r3, #1
		smp->chan.chan.ops = &ops;
    f18a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    f18e:	fb02 4303 	mla	r3, r2, r3, r4
    f192:	4a06      	ldr	r2, [pc, #24]	; (f1ac <bt_smp_accept+0x50>)
    f194:	605a      	str	r2, [r3, #4]
		return 0;
    f196:	2000      	movs	r0, #0
		*chan = &smp->chan.chan;
    f198:	600b      	str	r3, [r1, #0]
		return 0;
    f19a:	e7f4      	b.n	f186 <bt_smp_accept+0x2a>
    f19c:	20000f10 	.word	0x20000f10
    f1a0:	00026544 	.word	0x00026544
    f1a4:	00026654 	.word	0x00026654
    f1a8:	0002a409 	.word	0x0002a409
    f1ac:	00026e6c 	.word	0x00026e6c

0000f1b0 <smp_f5>:
{
    f1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f1b4:	b09a      	sub	sp, #104	; 0x68
    f1b6:	461d      	mov	r5, r3
    f1b8:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	uint8_t m[53] = { 0x00, /* counter */
    f1bc:	4b2e      	ldr	r3, [pc, #184]	; (f278 <smp_f5+0xc8>)
{
    f1be:	4616      	mov	r6, r2
	uint8_t m[53] = { 0x00, /* counter */
    f1c0:	aa0c      	add	r2, sp, #48	; 0x30
{
    f1c2:	4684      	mov	ip, r0
    f1c4:	468a      	mov	sl, r1
	uint8_t m[53] = { 0x00, /* counter */
    f1c6:	f103 0e30 	add.w	lr, r3, #48	; 0x30
    f1ca:	4690      	mov	r8, r2
    f1cc:	6818      	ldr	r0, [r3, #0]
    f1ce:	6859      	ldr	r1, [r3, #4]
    f1d0:	4614      	mov	r4, r2
    f1d2:	c403      	stmia	r4!, {r0, r1}
    f1d4:	3308      	adds	r3, #8
    f1d6:	4573      	cmp	r3, lr
    f1d8:	4622      	mov	r2, r4
    f1da:	d1f7      	bne.n	f1cc <smp_f5+0x1c>
    f1dc:	6818      	ldr	r0, [r3, #0]
    f1de:	791b      	ldrb	r3, [r3, #4]
    f1e0:	6020      	str	r0, [r4, #0]
    f1e2:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
    f1e4:	4661      	mov	r1, ip
    f1e6:	2220      	movs	r2, #32
    f1e8:	a804      	add	r0, sp, #16
    f1ea:	f015 fa26 	bl	2463a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    f1ee:	4823      	ldr	r0, [pc, #140]	; (f27c <smp_f5+0xcc>)
    f1f0:	466b      	mov	r3, sp
    f1f2:	2220      	movs	r2, #32
    f1f4:	a904      	add	r1, sp, #16
    f1f6:	f015 fa52 	bl	2469e <bt_smp_aes_cmac>
	if (err) {
    f1fa:	4604      	mov	r4, r0
    f1fc:	bbc0      	cbnz	r0, f270 <smp_f5+0xc0>
	sys_memcpy_swap(m + 5, n1, 16);
    f1fe:	2210      	movs	r2, #16
    f200:	4651      	mov	r1, sl
    f202:	f10d 0035 	add.w	r0, sp, #53	; 0x35
    f206:	f015 fa18 	bl	2463a <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    f20a:	2210      	movs	r2, #16
    f20c:	4631      	mov	r1, r6
    f20e:	f10d 0045 	add.w	r0, sp, #69	; 0x45
    f212:	f015 fa12 	bl	2463a <sys_memcpy_swap>
	m[37] = a1->type;
    f216:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    f218:	2206      	movs	r2, #6
	m[37] = a1->type;
    f21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    f21e:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    f222:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    f226:	f015 fa08 	bl	2463a <sys_memcpy_swap>
	m[44] = a2->type;
    f22a:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    f22c:	2206      	movs	r2, #6
	m[44] = a2->type;
    f22e:	f811 3b01 	ldrb.w	r3, [r1], #1
    f232:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    f236:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
    f23a:	f015 f9fe 	bl	2463a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    f23e:	464b      	mov	r3, r9
    f240:	2235      	movs	r2, #53	; 0x35
    f242:	4641      	mov	r1, r8
    f244:	4668      	mov	r0, sp
    f246:	f015 fa2a 	bl	2469e <bt_smp_aes_cmac>
	if (err) {
    f24a:	4604      	mov	r4, r0
    f24c:	b980      	cbnz	r0, f270 <smp_f5+0xc0>
	sys_mem_swap(mackey, 16);
    f24e:	4648      	mov	r0, r9
    f250:	f015 faf4 	bl	2483c <sys_mem_swap.constprop.0>
	m[0] = 0x01;
    f254:	2301      	movs	r3, #1
    f256:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    f25a:	2235      	movs	r2, #53	; 0x35
    f25c:	463b      	mov	r3, r7
    f25e:	4641      	mov	r1, r8
    f260:	4668      	mov	r0, sp
    f262:	f015 fa1c 	bl	2469e <bt_smp_aes_cmac>
	if (err) {
    f266:	4604      	mov	r4, r0
    f268:	b910      	cbnz	r0, f270 <smp_f5+0xc0>
	sys_mem_swap(ltk, 16);
    f26a:	4638      	mov	r0, r7
    f26c:	f015 fae6 	bl	2483c <sys_mem_swap.constprop.0>
}
    f270:	4620      	mov	r0, r4
    f272:	b01a      	add	sp, #104	; 0x68
    f274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f278:	00026773 	.word	0x00026773
    f27c:	0002a630 	.word	0x0002a630

0000f280 <sc_smp_check_confirm>:
{
    f280:	b530      	push	{r4, r5, lr}
    f282:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
    f286:	b087      	sub	sp, #28
    f288:	4604      	mov	r4, r0
    f28a:	2b05      	cmp	r3, #5
    f28c:	d829      	bhi.n	f2e2 <sc_smp_check_confirm+0x62>
    f28e:	e8df f003 	tbb	[pc, r3]
    f292:	0324      	.short	0x0324
    f294:	26282403 	.word	0x26282403
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f298:	f890 219c 	ldrb.w	r2, [r0, #412]	; 0x19c
    f29c:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
    f2a0:	40d3      	lsrs	r3, r2
    f2a2:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    f2a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f2aa:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    f2ac:	490e      	ldr	r1, [pc, #56]	; (f2e8 <sc_smp_check_confirm+0x68>)
    f2ae:	ad02      	add	r5, sp, #8
    f2b0:	9500      	str	r5, [sp, #0]
    f2b2:	6809      	ldr	r1, [r1, #0]
    f2b4:	f104 02f7 	add.w	r2, r4, #247	; 0xf7
    f2b8:	f204 1017 	addw	r0, r4, #279	; 0x117
    f2bc:	f015 fb18 	bl	248f0 <smp_f4>
    f2c0:	b978      	cbnz	r0, f2e2 <sc_smp_check_confirm+0x62>
	if (memcmp(smp->pcnf, cfm, 16)) {
    f2c2:	2210      	movs	r2, #16
    f2c4:	4629      	mov	r1, r5
    f2c6:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    f2ca:	f013 fa19 	bl	22700 <memcmp>
    f2ce:	2800      	cmp	r0, #0
		return BT_SMP_ERR_CONFIRM_FAILED;
    f2d0:	bf0c      	ite	eq
    f2d2:	2000      	moveq	r0, #0
    f2d4:	2004      	movne	r0, #4
}
    f2d6:	b007      	add	sp, #28
    f2d8:	bd30      	pop	{r4, r5, pc}
	switch (smp->method) {
    f2da:	2300      	movs	r3, #0
    f2dc:	e7e6      	b.n	f2ac <sc_smp_check_confirm+0x2c>
		return 0;
    f2de:	2000      	movs	r0, #0
    f2e0:	e7f9      	b.n	f2d6 <sc_smp_check_confirm+0x56>
		return BT_SMP_ERR_UNSPECIFIED;
    f2e2:	2008      	movs	r0, #8
    f2e4:	e7f7      	b.n	f2d6 <sc_smp_check_confirm+0x56>
    f2e6:	bf00      	nop
    f2e8:	20001a6c 	.word	0x20001a6c

0000f2ec <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    f2ec:	b513      	push	{r0, r1, r4, lr}
    f2ee:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    f2f0:	2200      	movs	r2, #0
    f2f2:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    f2f4:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    f2f6:	460a      	mov	r2, r1
    f2f8:	6800      	ldr	r0, [r0, #0]
    f2fa:	2106      	movs	r1, #6
    f2fc:	f013 ff9e 	bl	2323c <bt_l2cap_send_cb>
    f300:	4805      	ldr	r0, [pc, #20]	; (f318 <smp_send.isra.0+0x2c>)
    f302:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    f306:	2300      	movs	r3, #0
    f308:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
}
    f30c:	b002      	add	sp, #8
    f30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f312:	f010 bde1 	b.w	1fed8 <k_delayed_work_submit_to_queue>
    f316:	bf00      	nop
    f318:	20001510 	.word	0x20001510

0000f31c <sc_send_public_key>:
{
    f31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    f31e:	210c      	movs	r1, #12
{
    f320:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    f322:	f015 fa6b 	bl	247fc <smp_create_pdu.isra.0>
	if (!req_buf) {
    f326:	4604      	mov	r4, r0
    f328:	b1b0      	cbz	r0, f358 <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
    f32a:	2140      	movs	r1, #64	; 0x40
    f32c:	3008      	adds	r0, #8
    f32e:	f016 f85d 	bl	253ec <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    f332:	4f0a      	ldr	r7, [pc, #40]	; (f35c <sc_send_public_key+0x40>)
    f334:	2220      	movs	r2, #32
    f336:	6839      	ldr	r1, [r7, #0]
	req = net_buf_add(req_buf, sizeof(*req));
    f338:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    f33a:	f013 f9f1 	bl	22720 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    f33e:	6839      	ldr	r1, [r7, #0]
    f340:	2220      	movs	r2, #32
    f342:	4411      	add	r1, r2
    f344:	18b0      	adds	r0, r6, r2
    f346:	f013 f9eb 	bl	22720 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    f34a:	4628      	mov	r0, r5
    f34c:	2200      	movs	r2, #0
    f34e:	4621      	mov	r1, r4
    f350:	f7ff ffcc 	bl	f2ec <smp_send.isra.0>
	return 0;
    f354:	2000      	movs	r0, #0
}
    f356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    f358:	2008      	movs	r0, #8
    f35a:	e7fc      	b.n	f356 <sc_send_public_key+0x3a>
    f35c:	20001a6c 	.word	0x20001a6c

0000f360 <smp_pairing_req>:
{
    f360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    f364:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    f366:	78fb      	ldrb	r3, [r7, #3]
    f368:	3b07      	subs	r3, #7
    f36a:	2b09      	cmp	r3, #9
{
    f36c:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    f36e:	d903      	bls.n	f378 <smp_pairing_req+0x18>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    f370:	2506      	movs	r5, #6
}
    f372:	4628      	mov	r0, r5
    f374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    f378:	f8d0 8000 	ldr.w	r8, [r0]
	if (!conn->le.keys) {
    f37c:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    f380:	b163      	cbz	r3, f39c <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    f382:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
    f386:	210e      	movs	r1, #14
    f388:	4630      	mov	r0, r6
    f38a:	f015 f970 	bl	2466e <atomic_test_bit>
    f38e:	b988      	cbnz	r0, f3b4 <smp_pairing_req+0x54>
		int ret = smp_init(smp);
    f390:	4620      	mov	r0, r4
    f392:	f7ff fec5 	bl	f120 <smp_init>
		if (ret) {
    f396:	b168      	cbz	r0, f3b4 <smp_pairing_req+0x54>
			return ret;
    f398:	b2c5      	uxtb	r5, r0
    f39a:	e7ea      	b.n	f372 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f39c:	f898 0008 	ldrb.w	r0, [r8, #8]
    f3a0:	f108 0188 	add.w	r1, r8, #136	; 0x88
    f3a4:	f001 f99c 	bl	106e0 <bt_keys_get_addr>
    f3a8:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
    f3ac:	2800      	cmp	r0, #0
    f3ae:	d1e8      	bne.n	f382 <smp_pairing_req+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
    f3b0:	2508      	movs	r5, #8
    f3b2:	e7de      	b.n	f372 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    f3b4:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    f3b6:	2206      	movs	r2, #6
    f3b8:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    f3ba:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
	memcpy(smp->preq + 1, req, sizeof(*req));
    f3be:	f104 00ca 	add.w	r0, r4, #202	; 0xca
    f3c2:	f013 f9ad 	bl	22720 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    f3c6:	2302      	movs	r3, #2
    f3c8:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	rsp->auth_req = get_auth(conn, req->auth_req);
    f3cc:	78b8      	ldrb	r0, [r7, #2]
    f3ce:	f7ff fdf1 	bl	efb4 <get_auth.isra.0>
    f3d2:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
    f3d6:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
    f3d8:	f7ff fc6c 	bl	ecb4 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    f3dc:	4b54      	ldr	r3, [pc, #336]	; (f530 <smp_pairing_req+0x1d0>)
	rsp->io_capability = get_io_capa();
    f3de:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    f3e2:	781b      	ldrb	r3, [r3, #0]
    f3e4:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    f3e8:	2310      	movs	r3, #16
    f3ea:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    f3ee:	793b      	ldrb	r3, [r7, #4]
    f3f0:	f003 0303 	and.w	r3, r3, #3
    f3f4:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    f3f8:	797b      	ldrb	r3, [r7, #5]
    f3fa:	f003 0301 	and.w	r3, r3, #1
    f3fe:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    f402:	072b      	lsls	r3, r5, #28
    f404:	d50f      	bpl.n	f426 <smp_pairing_req+0xc6>
    f406:	78bb      	ldrb	r3, [r7, #2]
    f408:	071d      	lsls	r5, r3, #28
    f40a:	d50c      	bpl.n	f426 <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    f40c:	2105      	movs	r1, #5
    f40e:	4630      	mov	r0, r6
    f410:	f015 f91f 	bl	24652 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    f414:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
    f418:	f003 0302 	and.w	r3, r3, #2
    f41c:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
		rsp->resp_key_dist &= SEND_KEYS_SC;
    f420:	2300      	movs	r3, #0
    f422:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    f426:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
    f42a:	0698      	lsls	r0, r3, #26
    f42c:	d506      	bpl.n	f43c <smp_pairing_req+0xdc>
    f42e:	78bb      	ldrb	r3, [r7, #2]
    f430:	0699      	lsls	r1, r3, #26
    f432:	d503      	bpl.n	f43c <smp_pairing_req+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    f434:	2113      	movs	r1, #19
    f436:	4630      	mov	r0, r6
    f438:	f015 f90b 	bl	24652 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    f43c:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
    f440:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	smp->remote_dist = rsp->init_key_dist;
    f444:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
    f448:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    f44c:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
    f450:	07da      	lsls	r2, r3, #31
    f452:	d506      	bpl.n	f462 <smp_pairing_req+0x102>
    f454:	78bb      	ldrb	r3, [r7, #2]
    f456:	07db      	lsls	r3, r3, #31
    f458:	d503      	bpl.n	f462 <smp_pairing_req+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    f45a:	210c      	movs	r1, #12
    f45c:	4630      	mov	r0, r6
    f45e:	f015 f8f8 	bl	24652 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    f462:	2103      	movs	r1, #3
    f464:	4630      	mov	r0, r6
    f466:	f015 f8f4 	bl	24652 <atomic_set_bit>
	smp->method = get_pair_method(smp, req->io_capability);
    f46a:	7839      	ldrb	r1, [r7, #0]
    f46c:	4620      	mov	r0, r4
    f46e:	f7ff fe07 	bl	f080 <get_pair_method>
    f472:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
	if (!update_keys_check(smp)) {
    f476:	4620      	mov	r0, r4
    f478:	f015 f947 	bl	2470a <update_keys_check>
    f47c:	b908      	cbnz	r0, f482 <smp_pairing_req+0x122>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    f47e:	2503      	movs	r5, #3
    f480:	e777      	b.n	f372 <smp_pairing_req+0x12>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f482:	2105      	movs	r1, #5
    f484:	4630      	mov	r0, r6
    f486:	f015 f8f2 	bl	2466e <atomic_test_bit>
    f48a:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f48e:	461d      	mov	r5, r3
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f490:	bb20      	cbnz	r0, f4dc <smp_pairing_req+0x17c>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f492:	b993      	cbnz	r3, f4ba <smp_pairing_req+0x15a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f494:	210e      	movs	r1, #14
    f496:	4630      	mov	r0, r6
    f498:	f015 f8e9 	bl	2466e <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f49c:	b968      	cbnz	r0, f4ba <smp_pairing_req+0x15a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f49e:	4f25      	ldr	r7, [pc, #148]	; (f534 <smp_pairing_req+0x1d4>)
    f4a0:	683b      	ldr	r3, [r7, #0]
    f4a2:	b153      	cbz	r3, f4ba <smp_pairing_req+0x15a>
	    bt_auth && bt_auth->pairing_confirm) {
    f4a4:	695b      	ldr	r3, [r3, #20]
    f4a6:	b143      	cbz	r3, f4ba <smp_pairing_req+0x15a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f4a8:	4630      	mov	r0, r6
    f4aa:	2109      	movs	r1, #9
    f4ac:	f015 f8d1 	bl	24652 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    f4b0:	683b      	ldr	r3, [r7, #0]
    f4b2:	6820      	ldr	r0, [r4, #0]
    f4b4:	695b      	ldr	r3, [r3, #20]
    f4b6:	4798      	blx	r3
		return 0;
    f4b8:	e75b      	b.n	f372 <smp_pairing_req+0x12>
	ret = send_pairing_rsp(smp);
    f4ba:	4620      	mov	r0, r4
    f4bc:	f015 fbd7 	bl	24c6e <send_pairing_rsp>
	if (ret) {
    f4c0:	4605      	mov	r5, r0
    f4c2:	2800      	cmp	r0, #0
    f4c4:	f47f af55 	bne.w	f372 <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    f4c8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f4cc:	2103      	movs	r1, #3
    f4ce:	f015 f8c0 	bl	24652 <atomic_set_bit>
	return legacy_request_tk(smp);
    f4d2:	4620      	mov	r0, r4
}
    f4d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return legacy_request_tk(smp);
    f4d8:	f7ff bce2 	b.w	eea0 <legacy_request_tk>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    f4dc:	f898 200a 	ldrb.w	r2, [r8, #10]
    f4e0:	2a04      	cmp	r2, #4
    f4e2:	d115      	bne.n	f510 <smp_pairing_req+0x1b0>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    f4e4:	2b00      	cmp	r3, #0
    f4e6:	d0ca      	beq.n	f47e <smp_pairing_req+0x11e>
	return MIN(req->max_key_size, rsp->max_key_size);
    f4e8:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    f4ec:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
	     conn->required_sec_level == BT_SECURITY_L4) &&
    f4f0:	4293      	cmp	r3, r2
    f4f2:	bf28      	it	cs
    f4f4:	4613      	movcs	r3, r2
    f4f6:	2b10      	cmp	r3, #16
    f4f8:	f47f af3a 	bne.w	f370 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    f4fc:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f500:	210c      	movs	r1, #12
    f502:	f015 f8a6 	bl	24652 <atomic_set_bit>
	return send_pairing_rsp(smp);
    f506:	4620      	mov	r0, r4
}
    f508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
    f50c:	f015 bbaf 	b.w	24c6e <send_pairing_rsp>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f510:	2b00      	cmp	r3, #0
    f512:	d1f3      	bne.n	f4fc <smp_pairing_req+0x19c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f514:	210e      	movs	r1, #14
    f516:	4630      	mov	r0, r6
    f518:	f015 f8a9 	bl	2466e <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f51c:	2800      	cmp	r0, #0
    f51e:	d1ed      	bne.n	f4fc <smp_pairing_req+0x19c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f520:	4f04      	ldr	r7, [pc, #16]	; (f534 <smp_pairing_req+0x1d4>)
    f522:	683b      	ldr	r3, [r7, #0]
    f524:	2b00      	cmp	r3, #0
    f526:	d0e9      	beq.n	f4fc <smp_pairing_req+0x19c>
	    bt_auth && bt_auth->pairing_confirm) {
    f528:	695b      	ldr	r3, [r3, #20]
    f52a:	2b00      	cmp	r3, #0
    f52c:	d0e6      	beq.n	f4fc <smp_pairing_req+0x19c>
    f52e:	e7bb      	b.n	f4a8 <smp_pairing_req+0x148>
    f530:	20005386 	.word	0x20005386
    f534:	2000190c 	.word	0x2000190c

0000f538 <smp_send_pairing_confirm>:
{
    f538:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    f53a:	f890 40c8 	ldrb.w	r4, [r0, #200]	; 0xc8
    f53e:	2c02      	cmp	r4, #2
{
    f540:	4605      	mov	r5, r0
	switch (smp->method) {
    f542:	d824      	bhi.n	f58e <smp_send_pairing_confirm+0x56>
    f544:	b14c      	cbz	r4, f55a <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f546:	f890 319c 	ldrb.w	r3, [r0, #412]	; 0x19c
    f54a:	f8d0 4198 	ldr.w	r4, [r0, #408]	; 0x198
    f54e:	40dc      	lsrs	r4, r3
    f550:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    f554:	f064 047f 	orn	r4, r4, #127	; 0x7f
    f558:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    f55a:	2103      	movs	r1, #3
    f55c:	4628      	mov	r0, r5
    f55e:	f015 f94d 	bl	247fc <smp_create_pdu.isra.0>
	if (!buf) {
    f562:	4606      	mov	r6, r0
    f564:	b1a8      	cbz	r0, f592 <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
    f566:	2110      	movs	r1, #16
    f568:	3008      	adds	r0, #8
    f56a:	f015 ff3f 	bl	253ec <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    f56e:	9000      	str	r0, [sp, #0]
    f570:	4810      	ldr	r0, [pc, #64]	; (f5b4 <smp_send_pairing_confirm+0x7c>)
    f572:	4623      	mov	r3, r4
    f574:	6800      	ldr	r0, [r0, #0]
    f576:	f105 02e7 	add.w	r2, r5, #231	; 0xe7
    f57a:	f205 1117 	addw	r1, r5, #279	; 0x117
    f57e:	f015 f9b7 	bl	248f0 <smp_f4>
    f582:	4604      	mov	r4, r0
    f584:	b148      	cbz	r0, f59a <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
    f586:	4630      	mov	r0, r6
    f588:	f00e fd16 	bl	1dfb8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    f58c:	e001      	b.n	f592 <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
    f58e:	2c03      	cmp	r4, #3
    f590:	d001      	beq.n	f596 <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    f592:	2008      	movs	r0, #8
    f594:	e00c      	b.n	f5b0 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
    f596:	2400      	movs	r4, #0
    f598:	e7df      	b.n	f55a <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    f59a:	4602      	mov	r2, r0
    f59c:	4631      	mov	r1, r6
    f59e:	4628      	mov	r0, r5
    f5a0:	f7ff fea4 	bl	f2ec <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    f5a4:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    f5a8:	4621      	mov	r1, r4
    f5aa:	f015 f869 	bl	24680 <atomic_clear_bit>
	return 0;
    f5ae:	4620      	mov	r0, r4
}
    f5b0:	b002      	add	sp, #8
    f5b2:	bd70      	pop	{r4, r5, r6, pc}
    f5b4:	20001a6c 	.word	0x20001a6c

0000f5b8 <smp_send_pairing_req>:
{
    f5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f5bc:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    f5be:	f7ff fd47 	bl	f050 <smp_chan_get>
	if (!smp) {
    f5c2:	4604      	mov	r4, r0
    f5c4:	2800      	cmp	r0, #0
    f5c6:	d06f      	beq.n	f6a8 <smp_send_pairing_req+0xf0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f5c8:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
    f5cc:	2104      	movs	r1, #4
    f5ce:	4640      	mov	r0, r8
    f5d0:	f015 f84d 	bl	2466e <atomic_test_bit>
    f5d4:	2800      	cmp	r0, #0
    f5d6:	d16a      	bne.n	f6ae <smp_send_pairing_req+0xf6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f5d8:	2103      	movs	r1, #3
    f5da:	4640      	mov	r0, r8
    f5dc:	f015 f847 	bl	2466e <atomic_test_bit>
    f5e0:	b120      	cbz	r0, f5ec <smp_send_pairing_req+0x34>
		return -EBUSY;
    f5e2:	f06f 050f 	mvn.w	r5, #15
}
    f5e6:	4628      	mov	r0, r5
    f5e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    f5ec:	2101      	movs	r1, #1
    f5ee:	4640      	mov	r0, r8
    f5f0:	f015 f83d 	bl	2466e <atomic_test_bit>
    f5f4:	2800      	cmp	r0, #0
    f5f6:	d1f4      	bne.n	f5e2 <smp_send_pairing_req+0x2a>
	if (!sec_level_reachable(conn)) {
    f5f8:	7aa8      	ldrb	r0, [r5, #10]
    f5fa:	f7ff fcf9 	bl	eff0 <sec_level_reachable.isra.0>
    f5fe:	2800      	cmp	r0, #0
    f600:	d058      	beq.n	f6b4 <smp_send_pairing_req+0xfc>
	if (!conn->le.keys) {
    f602:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f606:	b13b      	cbz	r3, f618 <smp_send_pairing_req+0x60>
	if (smp_init(smp)) {
    f608:	4620      	mov	r0, r4
    f60a:	f7ff fd89 	bl	f120 <smp_init>
    f60e:	4605      	mov	r5, r0
    f610:	b170      	cbz	r0, f630 <smp_send_pairing_req+0x78>
		return -ENOBUFS;
    f612:	f06f 0536 	mvn.w	r5, #54	; 0x36
    f616:	e7e6      	b.n	f5e6 <smp_send_pairing_req+0x2e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f618:	7a28      	ldrb	r0, [r5, #8]
    f61a:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f61e:	f001 f85f 	bl	106e0 <bt_keys_get_addr>
    f622:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    f626:	2800      	cmp	r0, #0
    f628:	d1ee      	bne.n	f608 <smp_send_pairing_req+0x50>
			return -ENOMEM;
    f62a:	f06f 050b 	mvn.w	r5, #11
    f62e:	e7da      	b.n	f5e6 <smp_send_pairing_req+0x2e>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    f630:	2101      	movs	r1, #1
    f632:	4620      	mov	r0, r4
    f634:	f015 f8e2 	bl	247fc <smp_create_pdu.isra.0>
	if (!req_buf) {
    f638:	4607      	mov	r7, r0
    f63a:	2800      	cmp	r0, #0
    f63c:	d0e9      	beq.n	f612 <smp_send_pairing_req+0x5a>
	req = net_buf_add(req_buf, sizeof(*req));
    f63e:	2106      	movs	r1, #6
    f640:	3008      	adds	r0, #8
    f642:	f015 fed3 	bl	253ec <net_buf_simple_add>
    f646:	4606      	mov	r6, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    f648:	2009      	movs	r0, #9
    f64a:	f7ff fcb3 	bl	efb4 <get_auth.isra.0>
    f64e:	70b0      	strb	r0, [r6, #2]
	req->io_capability = get_io_capa();
    f650:	f7ff fb30 	bl	ecb4 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    f654:	4b19      	ldr	r3, [pc, #100]	; (f6bc <smp_send_pairing_req+0x104>)
	req->io_capability = get_io_capa();
    f656:	7030      	strb	r0, [r6, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    f658:	781b      	ldrb	r3, [r3, #0]
    f65a:	7073      	strb	r3, [r6, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    f65c:	2310      	movs	r3, #16
    f65e:	70f3      	strb	r3, [r6, #3]
	req->resp_key_dist = RECV_KEYS;
    f660:	f04f 0903 	mov.w	r9, #3
	req->init_key_dist = SEND_KEYS;
    f664:	2301      	movs	r3, #1
	smp->local_dist = SEND_KEYS;
    f666:	f240 3201 	movw	r2, #769	; 0x301
	req->init_key_dist = SEND_KEYS;
    f66a:	7133      	strb	r3, [r6, #4]
	req->resp_key_dist = RECV_KEYS;
    f66c:	f886 9005 	strb.w	r9, [r6, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
    f670:	4631      	mov	r1, r6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    f672:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
	smp->local_dist = SEND_KEYS;
    f676:	f8a4 21a8 	strh.w	r2, [r4, #424]	; 0x1a8
	memcpy(smp->preq + 1, req, sizeof(*req));
    f67a:	f104 00ca 	add.w	r0, r4, #202	; 0xca
    f67e:	2206      	movs	r2, #6
    f680:	f013 f84e 	bl	22720 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    f684:	462a      	mov	r2, r5
    f686:	4639      	mov	r1, r7
    f688:	4620      	mov	r0, r4
    f68a:	f7ff fe2f 	bl	f2ec <smp_send.isra.0>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    f68e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f692:	2102      	movs	r1, #2
    f694:	f014 ffdd 	bl	24652 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    f698:	210b      	movs	r1, #11
    f69a:	f014 ffda 	bl	24652 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    f69e:	4649      	mov	r1, r9
    f6a0:	4640      	mov	r0, r8
    f6a2:	f014 ffd6 	bl	24652 <atomic_set_bit>
	return 0;
    f6a6:	e79e      	b.n	f5e6 <smp_send_pairing_req+0x2e>
		return -ENOTCONN;
    f6a8:	f06f 0538 	mvn.w	r5, #56	; 0x38
    f6ac:	e79b      	b.n	f5e6 <smp_send_pairing_req+0x2e>
		return -EIO;
    f6ae:	f06f 0504 	mvn.w	r5, #4
    f6b2:	e798      	b.n	f5e6 <smp_send_pairing_req+0x2e>
		return -EINVAL;
    f6b4:	f06f 0515 	mvn.w	r5, #21
    f6b8:	e795      	b.n	f5e6 <smp_send_pairing_req+0x2e>
    f6ba:	bf00      	nop
    f6bc:	20005386 	.word	0x20005386

0000f6c0 <smp_security_request>:
{
    f6c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    f6c2:	4606      	mov	r6, r0
	struct bt_smp_security_request *req = (void *)buf->data;
    f6c4:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    f6c6:	f856 4bc4 	ldr.w	r4, [r6], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f6ca:	2103      	movs	r1, #3
    f6cc:	4630      	mov	r0, r6
    f6ce:	f014 ffce 	bl	2466e <atomic_test_bit>
    f6d2:	b108      	cbz	r0, f6d8 <smp_security_request+0x18>
	return 0;
    f6d4:	2000      	movs	r0, #0
    f6d6:	e064      	b.n	f7a2 <smp_security_request+0xe2>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    f6d8:	2101      	movs	r1, #1
    f6da:	4630      	mov	r0, r6
    f6dc:	f014 ffc7 	bl	2466e <atomic_test_bit>
    f6e0:	2800      	cmp	r0, #0
    f6e2:	d1f7      	bne.n	f6d4 <smp_security_request+0x14>
	if (sc_supported) {
    f6e4:	781d      	ldrb	r5, [r3, #0]
    f6e6:	4b32      	ldr	r3, [pc, #200]	; (f7b0 <smp_security_request+0xf0>)
    f6e8:	781b      	ldrb	r3, [r3, #0]
    f6ea:	b17b      	cbz	r3, f70c <smp_security_request+0x4c>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    f6ec:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
    f6f0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    f6f4:	b16b      	cbz	r3, f712 <smp_security_request+0x52>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    f6f6:	89db      	ldrh	r3, [r3, #14]
    f6f8:	f003 0324 	and.w	r3, r3, #36	; 0x24
    f6fc:	b9d3      	cbnz	r3, f734 <smp_security_request+0x74>
	if (smp_send_pairing_req(conn) < 0) {
    f6fe:	4620      	mov	r0, r4
    f700:	f7ff ff5a 	bl	f5b8 <smp_send_pairing_req>
    f704:	2800      	cmp	r0, #0
    f706:	db4b      	blt.n	f7a0 <smp_security_request+0xe0>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    f708:	210e      	movs	r1, #14
    f70a:	e04d      	b.n	f7a8 <smp_security_request+0xe8>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    f70c:	f005 0507 	and.w	r5, r5, #7
    f710:	e7ee      	b.n	f6f0 <smp_security_request+0x30>
					     &conn->le.dst);
    f712:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
    f716:	7a21      	ldrb	r1, [r4, #8]
    f718:	463a      	mov	r2, r7
    f71a:	2020      	movs	r0, #32
    f71c:	f001 f816 	bl	1074c <bt_keys_find>
    f720:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
    f724:	b930      	cbnz	r0, f734 <smp_security_request+0x74>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
    f726:	7a21      	ldrb	r1, [r4, #8]
    f728:	463a      	mov	r2, r7
    f72a:	2004      	movs	r0, #4
    f72c:	f001 f80e 	bl	1074c <bt_keys_find>
    f730:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    f734:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    f738:	2900      	cmp	r1, #0
    f73a:	d0e0      	beq.n	f6fe <smp_security_request+0x3e>
	if ((auth & BT_SMP_AUTH_MITM) &&
    f73c:	076f      	lsls	r7, r5, #29
    f73e:	d518      	bpl.n	f772 <smp_security_request+0xb2>
    f740:	7b4b      	ldrb	r3, [r1, #13]
    f742:	07d8      	lsls	r0, r3, #31
    f744:	d415      	bmi.n	f772 <smp_security_request+0xb2>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    f746:	f7ff fab5 	bl	ecb4 <get_io_capa>
    f74a:	4a1a      	ldr	r2, [pc, #104]	; (f7b4 <smp_security_request+0xf4>)
    f74c:	4b1a      	ldr	r3, [pc, #104]	; (f7b8 <smp_security_request+0xf8>)
    f74e:	1ad2      	subs	r2, r2, r3
    f750:	08d2      	lsrs	r2, r2, #3
    f752:	2803      	cmp	r0, #3
    f754:	ea4f 1282 	mov.w	r2, r2, lsl #6
    f758:	d004      	beq.n	f764 <smp_security_request+0xa4>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    f75a:	4818      	ldr	r0, [pc, #96]	; (f7bc <smp_security_request+0xfc>)
    f75c:	f042 0203 	orr.w	r2, r2, #3
    f760:	4629      	mov	r1, r5
    f762:	e003      	b.n	f76c <smp_security_request+0xac>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
    f764:	4816      	ldr	r0, [pc, #88]	; (f7c0 <smp_security_request+0x100>)
    f766:	f042 0202 	orr.w	r2, r2, #2
    f76a:	4629      	mov	r1, r5
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    f76c:	f011 fa35 	bl	20bda <log_1>
		goto pair;
    f770:	e7c5      	b.n	f6fe <smp_security_request+0x3e>
	if ((auth & BT_SMP_AUTH_SC) &&
    f772:	072a      	lsls	r2, r5, #28
    f774:	d508      	bpl.n	f788 <smp_security_request+0xc8>
    f776:	89cb      	ldrh	r3, [r1, #14]
    f778:	069b      	lsls	r3, r3, #26
    f77a:	d405      	bmi.n	f788 <smp_security_request+0xc8>
    f77c:	4a0d      	ldr	r2, [pc, #52]	; (f7b4 <smp_security_request+0xf4>)
    f77e:	4b0e      	ldr	r3, [pc, #56]	; (f7b8 <smp_security_request+0xf8>)
    f780:	1ad2      	subs	r2, r2, r3
    f782:	08d2      	lsrs	r2, r2, #3
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    f784:	0192      	lsls	r2, r2, #6
    f786:	e7e8      	b.n	f75a <smp_security_request+0x9a>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    f788:	7b0b      	ldrb	r3, [r1, #12]
    f78a:	9300      	str	r3, [sp, #0]
    f78c:	f101 0218 	add.w	r2, r1, #24
    f790:	f101 031a 	add.w	r3, r1, #26
    f794:	4620      	mov	r0, r4
    f796:	3110      	adds	r1, #16
    f798:	f013 faf7 	bl	22d8a <bt_conn_le_start_encryption>
    f79c:	2800      	cmp	r0, #0
    f79e:	da02      	bge.n	f7a6 <smp_security_request+0xe6>
		return BT_SMP_ERR_UNSPECIFIED;
    f7a0:	2008      	movs	r0, #8
}
    f7a2:	b003      	add	sp, #12
    f7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f7a6:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    f7a8:	4630      	mov	r0, r6
    f7aa:	f014 ff52 	bl	24652 <atomic_set_bit>
    f7ae:	e791      	b.n	f6d4 <smp_security_request+0x14>
    f7b0:	20005387 	.word	0x20005387
    f7b4:	00026654 	.word	0x00026654
    f7b8:	00026544 	.word	0x00026544
    f7bc:	0002a42e 	.word	0x0002a42e
    f7c0:	0002a455 	.word	0x0002a455

0000f7c4 <bt_smp_distribute_keys>:
{
    f7c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f7c8:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    f7ca:	6800      	ldr	r0, [r0, #0]
	if (!keys) {
    f7cc:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
{
    f7d0:	b089      	sub	sp, #36	; 0x24
	if (!keys) {
    f7d2:	b9a3      	cbnz	r3, f7fe <bt_smp_distribute_keys+0x3a>
    f7d4:	4a48      	ldr	r2, [pc, #288]	; (f8f8 <bt_smp_distribute_keys+0x134>)
    f7d6:	4c49      	ldr	r4, [pc, #292]	; (f8fc <bt_smp_distribute_keys+0x138>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    f7d8:	3088      	adds	r0, #136	; 0x88
    f7da:	1aa4      	subs	r4, r4, r2
    f7dc:	f7f7 fcde 	bl	719c <bt_addr_le_str_real>
    f7e0:	f7f5 ff48 	bl	5674 <log_strdup>
    f7e4:	08e4      	lsrs	r4, r4, #3
    f7e6:	01a4      	lsls	r4, r4, #6
    f7e8:	f044 0401 	orr.w	r4, r4, #1
    f7ec:	4601      	mov	r1, r0
    f7ee:	4622      	mov	r2, r4
    f7f0:	4843      	ldr	r0, [pc, #268]	; (f900 <bt_smp_distribute_keys+0x13c>)
    f7f2:	f011 f9f2 	bl	20bda <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    f7f6:	2008      	movs	r0, #8
}
    f7f8:	b009      	add	sp, #36	; 0x24
    f7fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f7fe:	f104 07c4 	add.w	r7, r4, #196	; 0xc4
    f802:	2105      	movs	r1, #5
    f804:	4638      	mov	r0, r7
    f806:	f014 ff32 	bl	2466e <atomic_test_bit>
    f80a:	4680      	mov	r8, r0
    f80c:	b9d8      	cbnz	r0, f846 <bt_smp_distribute_keys+0x82>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    f80e:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    f812:	f013 0001 	ands.w	r0, r3, #1
    f816:	d0ef      	beq.n	f7f8 <bt_smp_distribute_keys+0x34>
	struct bt_keys *keys = conn->le.keys;
    f818:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
    f81a:	211a      	movs	r1, #26
    f81c:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    f81e:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
		bt_rand((void *)&rand, sizeof(rand));
    f822:	f004 fa35 	bl	13c90 <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    f826:	2106      	movs	r1, #6
    f828:	4620      	mov	r0, r4
    f82a:	f014 ffe7 	bl	247fc <smp_create_pdu.isra.0>
		if (!buf) {
    f82e:	4606      	mov	r6, r0
    f830:	b958      	cbnz	r0, f84a <bt_smp_distribute_keys+0x86>
    f832:	4932      	ldr	r1, [pc, #200]	; (f8fc <bt_smp_distribute_keys+0x138>)
    f834:	4b30      	ldr	r3, [pc, #192]	; (f8f8 <bt_smp_distribute_keys+0x134>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    f836:	4833      	ldr	r0, [pc, #204]	; (f904 <bt_smp_distribute_keys+0x140>)
    f838:	1ac9      	subs	r1, r1, r3
    f83a:	08c9      	lsrs	r1, r1, #3
    f83c:	0189      	lsls	r1, r1, #6
    f83e:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Master Ident buffer");
    f842:	f011 f9bd 	bl	20bc0 <log_0>
	return 0;
    f846:	2000      	movs	r0, #0
    f848:	e7d6      	b.n	f7f8 <bt_smp_distribute_keys+0x34>
		info = net_buf_add(buf, sizeof(*info));
    f84a:	2110      	movs	r1, #16
    f84c:	3008      	adds	r0, #8
    f84e:	f015 fdcd 	bl	253ec <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    f852:	7b2a      	ldrb	r2, [r5, #12]
    f854:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
    f856:	4681      	mov	r9, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
    f858:	f012 ff62 	bl	22720 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    f85c:	7b28      	ldrb	r0, [r5, #12]
    f85e:	280f      	cmp	r0, #15
    f860:	d805      	bhi.n	f86e <bt_smp_distribute_keys+0xaa>
			(void)memset(info->ltk + keys->enc_size, 0,
    f862:	f1c0 0210 	rsb	r2, r0, #16
    f866:	4641      	mov	r1, r8
    f868:	4448      	add	r0, r9
    f86a:	f012 ff84 	bl	22776 <memset>
		smp_send(smp, buf, NULL, NULL);
    f86e:	4631      	mov	r1, r6
    f870:	2200      	movs	r2, #0
    f872:	4620      	mov	r0, r4
    f874:	f7ff fd3a 	bl	f2ec <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    f878:	2107      	movs	r1, #7
    f87a:	4620      	mov	r0, r4
    f87c:	f014 ffbe 	bl	247fc <smp_create_pdu.isra.0>
		if (!buf) {
    f880:	4606      	mov	r6, r0
    f882:	b940      	cbnz	r0, f896 <bt_smp_distribute_keys+0xd2>
    f884:	491d      	ldr	r1, [pc, #116]	; (f8fc <bt_smp_distribute_keys+0x138>)
    f886:	4b1c      	ldr	r3, [pc, #112]	; (f8f8 <bt_smp_distribute_keys+0x134>)
			BT_ERR("Unable to allocate Master Ident buffer");
    f888:	481f      	ldr	r0, [pc, #124]	; (f908 <bt_smp_distribute_keys+0x144>)
    f88a:	1ac9      	subs	r1, r1, r3
    f88c:	08c9      	lsrs	r1, r1, #3
    f88e:	0189      	lsls	r1, r1, #6
    f890:	f041 0101 	orr.w	r1, r1, #1
    f894:	e7d5      	b.n	f842 <bt_smp_distribute_keys+0x7e>
		ident = net_buf_add(buf, sizeof(*ident));
    f896:	210a      	movs	r1, #10
    f898:	3008      	adds	r0, #8
    f89a:	f015 fda7 	bl	253ec <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    f89e:	2208      	movs	r2, #8
		ident = net_buf_add(buf, sizeof(*ident));
    f8a0:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    f8a2:	a905      	add	r1, sp, #20
    f8a4:	3002      	adds	r0, #2
    f8a6:	f012 ff3b 	bl	22720 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    f8aa:	2202      	movs	r2, #2
    f8ac:	a907      	add	r1, sp, #28
    f8ae:	4640      	mov	r0, r8
    f8b0:	f012 ff36 	bl	22720 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    f8b4:	4631      	mov	r1, r6
    f8b6:	4620      	mov	r0, r4
    f8b8:	4a14      	ldr	r2, [pc, #80]	; (f90c <bt_smp_distribute_keys+0x148>)
    f8ba:	f7ff fd17 	bl	f2ec <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f8be:	210c      	movs	r1, #12
    f8c0:	4638      	mov	r0, r7
    f8c2:	f014 fed4 	bl	2466e <atomic_test_bit>
    f8c6:	2800      	cmp	r0, #0
    f8c8:	d0bd      	beq.n	f846 <bt_smp_distribute_keys+0x82>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    f8ca:	4628      	mov	r0, r5
    f8cc:	2101      	movs	r1, #1
    f8ce:	f015 fd12 	bl	252f6 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    f8d2:	a901      	add	r1, sp, #4
    f8d4:	2210      	movs	r2, #16
    f8d6:	f105 004a 	add.w	r0, r5, #74	; 0x4a
    f8da:	f012 ff21 	bl	22720 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    f8de:	a905      	add	r1, sp, #20
    f8e0:	2208      	movs	r2, #8
    f8e2:	f105 0040 	add.w	r0, r5, #64	; 0x40
    f8e6:	f012 ff1b 	bl	22720 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    f8ea:	2202      	movs	r2, #2
    f8ec:	a907      	add	r1, sp, #28
    f8ee:	f105 0048 	add.w	r0, r5, #72	; 0x48
    f8f2:	f012 ff15 	bl	22720 <memcpy>
    f8f6:	e7a6      	b.n	f846 <bt_smp_distribute_keys+0x82>
    f8f8:	00026544 	.word	0x00026544
    f8fc:	00026654 	.word	0x00026654
    f900:	0002a484 	.word	0x0002a484
    f904:	0002a499 	.word	0x0002a499
    f908:	0002a4c0 	.word	0x0002a4c0
    f90c:	00024d6b 	.word	0x00024d6b

0000f910 <smp_pairing_complete>:
{
    f910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f912:	4f22      	ldr	r7, [pc, #136]	; (f99c <smp_pairing_complete+0x8c>)
    f914:	4604      	mov	r4, r0
    f916:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
	if (!status) {
    f91a:	b979      	cbnz	r1, f93c <smp_pairing_complete+0x2c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    f91c:	210c      	movs	r1, #12
    f91e:	4630      	mov	r0, r6
    f920:	f014 fea5 	bl	2466e <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    f924:	683b      	ldr	r3, [r7, #0]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    f926:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
    f928:	b11b      	cbz	r3, f932 <smp_pairing_complete+0x22>
    f92a:	699b      	ldr	r3, [r3, #24]
    f92c:	b10b      	cbz	r3, f932 <smp_pairing_complete+0x22>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    f92e:	6820      	ldr	r0, [r4, #0]
    f930:	4798      	blx	r3
	smp_reset(smp);
    f932:	4620      	mov	r0, r4
}
    f934:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	smp_reset(smp);
    f938:	f015 b9ca 	b.w	24cd0 <smp_reset>
	switch (smp_err) {
    f93c:	3901      	subs	r1, #1
    f93e:	b2c9      	uxtb	r1, r1
    f940:	290d      	cmp	r1, #13
    f942:	bf9c      	itt	ls
    f944:	4b16      	ldrls	r3, [pc, #88]	; (f9a0 <smp_pairing_complete+0x90>)
    f946:	5c5d      	ldrbls	r5, [r3, r1]
		if (smp->chan.chan.conn->le.keys &&
    f948:	6803      	ldr	r3, [r0, #0]
    f94a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	if (!status) {
    f94e:	bf88      	it	hi
    f950:	2508      	movhi	r5, #8
		if (smp->chan.chan.conn->le.keys &&
    f952:	b153      	cbz	r3, f96a <smp_pairing_complete+0x5a>
    f954:	7b1b      	ldrb	r3, [r3, #12]
    f956:	b9cb      	cbnz	r3, f98c <smp_pairing_complete+0x7c>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
    f958:	6823      	ldr	r3, [r4, #0]
    f95a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    f95e:	f015 fcce 	bl	252fe <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
    f962:	6823      	ldr	r3, [r4, #0]
    f964:	2200      	movs	r2, #0
    f966:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f96a:	2102      	movs	r1, #2
    f96c:	4630      	mov	r0, r6
    f96e:	f014 fe7e 	bl	2466e <atomic_test_bit>
    f972:	b918      	cbnz	r0, f97c <smp_pairing_complete+0x6c>
			bt_conn_security_changed(smp->chan.chan.conn, auth_err);
    f974:	6820      	ldr	r0, [r4, #0]
    f976:	4629      	mov	r1, r5
    f978:	f7fa fc0c 	bl	a194 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    f97c:	683b      	ldr	r3, [r7, #0]
    f97e:	2b00      	cmp	r3, #0
    f980:	d0d7      	beq.n	f932 <smp_pairing_complete+0x22>
    f982:	69db      	ldr	r3, [r3, #28]
    f984:	2b00      	cmp	r3, #0
    f986:	d0d4      	beq.n	f932 <smp_pairing_complete+0x22>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    f988:	4629      	mov	r1, r5
    f98a:	e7d0      	b.n	f92e <smp_pairing_complete+0x1e>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    f98c:	2102      	movs	r1, #2
    f98e:	4630      	mov	r0, r6
    f990:	f014 fe6d 	bl	2466e <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
    f994:	2800      	cmp	r0, #0
    f996:	d1df      	bne.n	f958 <smp_pairing_complete+0x48>
    f998:	e7e7      	b.n	f96a <smp_pairing_complete+0x5a>
    f99a:	bf00      	nop
    f99c:	2000190c 	.word	0x2000190c
    f9a0:	0002a5f0 	.word	0x0002a5f0

0000f9a4 <bt_smp_dhkey_ready>:
{
    f9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    f9a6:	2107      	movs	r1, #7
{
    f9a8:	4607      	mov	r7, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    f9aa:	4823      	ldr	r0, [pc, #140]	; (fa38 <bt_smp_dhkey_ready+0x94>)
    f9ac:	4e23      	ldr	r6, [pc, #140]	; (fa3c <bt_smp_dhkey_ready+0x98>)
    f9ae:	f015 f977 	bl	24ca0 <atomic_test_and_clear_bit>
    f9b2:	b938      	cbnz	r0, f9c4 <bt_smp_dhkey_ready+0x20>
    f9b4:	2107      	movs	r1, #7
    f9b6:	f506 7029 	add.w	r0, r6, #676	; 0x2a4
    f9ba:	f015 f971 	bl	24ca0 <atomic_test_and_clear_bit>
    f9be:	b3b0      	cbz	r0, fa2e <bt_smp_dhkey_ready+0x8a>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    f9c0:	2301      	movs	r3, #1
    f9c2:	e000      	b.n	f9c6 <bt_smp_dhkey_ready+0x22>
    f9c4:	2300      	movs	r3, #0
			smp = &bt_smp_pool[i];
    f9c6:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
    f9ca:	435c      	muls	r4, r3
    f9cc:	1935      	adds	r5, r6, r4
	if (!dhkey) {
    f9ce:	b92f      	cbnz	r7, f9dc <bt_smp_dhkey_ready+0x38>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    f9d0:	210b      	movs	r1, #11
			smp_error(smp, err);
    f9d2:	4628      	mov	r0, r5
}
    f9d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			smp_error(smp, err);
    f9d8:	f015 b9a9 	b.w	24d2e <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    f9dc:	f204 1057 	addw	r0, r4, #343	; 0x157
    f9e0:	4639      	mov	r1, r7
    f9e2:	2220      	movs	r2, #32
    f9e4:	4430      	add	r0, r6
    f9e6:	f012 fe9b 	bl	22720 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    f9ea:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
    f9ee:	4433      	add	r3, r6
    f9f0:	2109      	movs	r1, #9
    f9f2:	4618      	mov	r0, r3
    f9f4:	f014 fe3b 	bl	2466e <atomic_test_bit>
    f9f8:	b128      	cbz	r0, fa06 <bt_smp_dhkey_ready+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f9fa:	2108      	movs	r1, #8
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f9fc:	4618      	mov	r0, r3
}
    f9fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    fa02:	f014 be26 	b.w	24652 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    fa06:	210f      	movs	r1, #15
    fa08:	4618      	mov	r0, r3
    fa0a:	f014 fe30 	bl	2466e <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    fa0e:	2108      	movs	r1, #8
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    fa10:	2800      	cmp	r0, #0
    fa12:	d1f3      	bne.n	f9fc <bt_smp_dhkey_ready+0x58>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    fa14:	4618      	mov	r0, r3
    fa16:	f014 fe2a 	bl	2466e <atomic_test_bit>
    fa1a:	b140      	cbz	r0, fa2e <bt_smp_dhkey_ready+0x8a>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    fa1c:	5933      	ldr	r3, [r6, r4]
    fa1e:	78db      	ldrb	r3, [r3, #3]
			err = compute_and_send_master_dhcheck(smp);
    fa20:	4628      	mov	r0, r5
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    fa22:	b92b      	cbnz	r3, fa30 <bt_smp_dhkey_ready+0x8c>
			err = compute_and_send_master_dhcheck(smp);
    fa24:	f014 ffa2 	bl	2496c <compute_and_send_master_dhcheck>
		if (err) {
    fa28:	4601      	mov	r1, r0
    fa2a:	2800      	cmp	r0, #0
    fa2c:	d1d1      	bne.n	f9d2 <bt_smp_dhkey_ready+0x2e>
}
    fa2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    fa30:	f014 fff1 	bl	24a16 <compute_and_check_and_send_slave_dhcheck>
    fa34:	e7f8      	b.n	fa28 <bt_smp_dhkey_ready+0x84>
    fa36:	bf00      	nop
    fa38:	20000fd4 	.word	0x20000fd4
    fa3c:	20000f10 	.word	0x20000f10

0000fa40 <bt_smp_recv>:
{
    fa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    fa42:	898b      	ldrh	r3, [r1, #12]
{
    fa44:	4604      	mov	r4, r0
    fa46:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    fa48:	b95b      	cbnz	r3, fa62 <bt_smp_recv+0x22>
    fa4a:	4935      	ldr	r1, [pc, #212]	; (fb20 <bt_smp_recv+0xe0>)
    fa4c:	4b35      	ldr	r3, [pc, #212]	; (fb24 <bt_smp_recv+0xe4>)
		BT_ERR("Too small SMP PDU received");
    fa4e:	4836      	ldr	r0, [pc, #216]	; (fb28 <bt_smp_recv+0xe8>)
    fa50:	1ac9      	subs	r1, r1, r3
    fa52:	08c9      	lsrs	r1, r1, #3
    fa54:	0189      	lsls	r1, r1, #6
    fa56:	f041 0101 	orr.w	r1, r1, #1
    fa5a:	f011 f8b1 	bl	20bc0 <log_0>
}
    fa5e:	2000      	movs	r0, #0
    fa60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    fa62:	2101      	movs	r1, #1
    fa64:	f105 0008 	add.w	r0, r5, #8
    fa68:	f015 fcfd 	bl	25466 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    fa6c:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    fa6e:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    fa70:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    fa74:	f014 fdfb 	bl	2466e <atomic_test_bit>
    fa78:	7831      	ldrb	r1, [r6, #0]
    fa7a:	b150      	cbz	r0, fa92 <bt_smp_recv+0x52>
    fa7c:	4b29      	ldr	r3, [pc, #164]	; (fb24 <bt_smp_recv+0xe4>)
    fa7e:	4a28      	ldr	r2, [pc, #160]	; (fb20 <bt_smp_recv+0xe0>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    fa80:	482a      	ldr	r0, [pc, #168]	; (fb2c <bt_smp_recv+0xec>)
    fa82:	1ad2      	subs	r2, r2, r3
    fa84:	08d2      	lsrs	r2, r2, #3
    fa86:	0192      	lsls	r2, r2, #6
    fa88:	f042 0202 	orr.w	r2, r2, #2
    fa8c:	f011 f8a5 	bl	20bda <log_1>
		return 0;
    fa90:	e7e5      	b.n	fa5e <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    fa92:	290d      	cmp	r1, #13
    fa94:	d803      	bhi.n	fa9e <bt_smp_recv+0x5e>
    fa96:	4f26      	ldr	r7, [pc, #152]	; (fb30 <bt_smp_recv+0xf0>)
    fa98:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    fa9c:	b973      	cbnz	r3, fabc <bt_smp_recv+0x7c>
    fa9e:	4b21      	ldr	r3, [pc, #132]	; (fb24 <bt_smp_recv+0xe4>)
    faa0:	4a1f      	ldr	r2, [pc, #124]	; (fb20 <bt_smp_recv+0xe0>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    faa2:	4824      	ldr	r0, [pc, #144]	; (fb34 <bt_smp_recv+0xf4>)
    faa4:	1ad2      	subs	r2, r2, r3
    faa6:	08d2      	lsrs	r2, r2, #3
    faa8:	0192      	lsls	r2, r2, #6
    faaa:	f042 0202 	orr.w	r2, r2, #2
    faae:	f011 f894 	bl	20bda <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    fab2:	2107      	movs	r1, #7
		smp_error(smp, err);
    fab4:	4620      	mov	r0, r4
    fab6:	f015 f93a 	bl	24d2e <smp_error>
    faba:	e7d0      	b.n	fa5e <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    fabc:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    fac0:	f015 f8ee 	bl	24ca0 <atomic_test_and_clear_bit>
    fac4:	7831      	ldrb	r1, [r6, #0]
    fac6:	b970      	cbnz	r0, fae6 <bt_smp_recv+0xa6>
    fac8:	4b16      	ldr	r3, [pc, #88]	; (fb24 <bt_smp_recv+0xe4>)
    faca:	4a15      	ldr	r2, [pc, #84]	; (fb20 <bt_smp_recv+0xe0>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    facc:	481a      	ldr	r0, [pc, #104]	; (fb38 <bt_smp_recv+0xf8>)
    face:	1ad2      	subs	r2, r2, r3
    fad0:	08d2      	lsrs	r2, r2, #3
    fad2:	0192      	lsls	r2, r2, #6
    fad4:	f042 0202 	orr.w	r2, r2, #2
    fad8:	f011 f87f 	bl	20bda <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    fadc:	7833      	ldrb	r3, [r6, #0]
    fade:	2b05      	cmp	r3, #5
    fae0:	d0bd      	beq.n	fa5e <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    fae2:	2108      	movs	r1, #8
    fae4:	e7e6      	b.n	fab4 <bt_smp_recv+0x74>
	if (buf->len != handlers[hdr->code].expect_len) {
    fae6:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    faea:	89a8      	ldrh	r0, [r5, #12]
    faec:	791b      	ldrb	r3, [r3, #4]
    faee:	4283      	cmp	r3, r0
    faf0:	d00d      	beq.n	fb0e <bt_smp_recv+0xce>
    faf2:	4a0c      	ldr	r2, [pc, #48]	; (fb24 <bt_smp_recv+0xe4>)
    faf4:	4b0a      	ldr	r3, [pc, #40]	; (fb20 <bt_smp_recv+0xe0>)
    faf6:	1a9b      	subs	r3, r3, r2
    faf8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    fafa:	019b      	lsls	r3, r3, #6
    fafc:	460a      	mov	r2, r1
    fafe:	f043 0301 	orr.w	r3, r3, #1
    fb02:	4601      	mov	r1, r0
    fb04:	480d      	ldr	r0, [pc, #52]	; (fb3c <bt_smp_recv+0xfc>)
    fb06:	f011 f87c 	bl	20c02 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    fb0a:	210a      	movs	r1, #10
    fb0c:	e7d2      	b.n	fab4 <bt_smp_recv+0x74>
	err = handlers[hdr->code].func(smp, buf);
    fb0e:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    fb12:	4620      	mov	r0, r4
    fb14:	4629      	mov	r1, r5
    fb16:	4798      	blx	r3
	if (err) {
    fb18:	4601      	mov	r1, r0
    fb1a:	2800      	cmp	r0, #0
    fb1c:	d09f      	beq.n	fa5e <bt_smp_recv+0x1e>
    fb1e:	e7c9      	b.n	fab4 <bt_smp_recv+0x74>
    fb20:	00026654 	.word	0x00026654
    fb24:	00026544 	.word	0x00026544
    fb28:	0002a4e7 	.word	0x0002a4e7
    fb2c:	0002a502 	.word	0x0002a502
    fb30:	00026dfc 	.word	0x00026dfc
    fb34:	0002a533 	.word	0x0002a533
    fb38:	0002a54d 	.word	0x0002a54d
    fb3c:	0002a11f 	.word	0x0002a11f

0000fb40 <smp_timeout>:
    fb40:	4b0b      	ldr	r3, [pc, #44]	; (fb70 <smp_timeout+0x30>)
    fb42:	490c      	ldr	r1, [pc, #48]	; (fb74 <smp_timeout+0x34>)
{
    fb44:	b510      	push	{r4, lr}
    fb46:	1ac9      	subs	r1, r1, r3
    fb48:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
    fb4a:	0189      	lsls	r1, r1, #6
{
    fb4c:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    fb4e:	f041 0101 	orr.w	r1, r1, #1
    fb52:	4809      	ldr	r0, [pc, #36]	; (fb78 <smp_timeout+0x38>)
    fb54:	f011 f834 	bl	20bc0 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    fb58:	f5a4 70d8 	sub.w	r0, r4, #432	; 0x1b0
    fb5c:	2108      	movs	r1, #8
    fb5e:	f7ff fed7 	bl	f910 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    fb62:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
    fb66:	2104      	movs	r1, #4
}
    fb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    fb6c:	f014 bd71 	b.w	24652 <atomic_set_bit>
    fb70:	00026544 	.word	0x00026544
    fb74:	00026654 	.word	0x00026654
    fb78:	0002a568 	.word	0x0002a568

0000fb7c <smp_pairing_failed>:
{
    fb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb7e:	4a15      	ldr	r2, [pc, #84]	; (fbd4 <smp_pairing_failed+0x58>)
    fb80:	4b15      	ldr	r3, [pc, #84]	; (fbd8 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    fb82:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    fb84:	4605      	mov	r5, r0
    fb86:	1ad2      	subs	r2, r2, r3
    fb88:	08d2      	lsrs	r2, r2, #3
    fb8a:	f855 7bc4 	ldr.w	r7, [r5], #196
	BT_ERR("reason 0x%x", req->reason);
    fb8e:	7831      	ldrb	r1, [r6, #0]
    fb90:	0192      	lsls	r2, r2, #6
{
    fb92:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    fb94:	f042 0201 	orr.w	r2, r2, #1
    fb98:	4810      	ldr	r0, [pc, #64]	; (fbdc <smp_pairing_failed+0x60>)
    fb9a:	f011 f81e 	bl	20bda <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    fb9e:	2109      	movs	r1, #9
    fba0:	4628      	mov	r0, r5
    fba2:	f015 f87d 	bl	24ca0 <atomic_test_and_clear_bit>
    fba6:	b140      	cbz	r0, fbba <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    fba8:	4b0d      	ldr	r3, [pc, #52]	; (fbe0 <smp_pairing_failed+0x64>)
    fbaa:	681b      	ldr	r3, [r3, #0]
    fbac:	b963      	cbnz	r3, fbc8 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    fbae:	4620      	mov	r0, r4
    fbb0:	7831      	ldrb	r1, [r6, #0]
    fbb2:	f7ff fead 	bl	f910 <smp_pairing_complete>
}
    fbb6:	2000      	movs	r0, #0
    fbb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    fbba:	210a      	movs	r1, #10
    fbbc:	4628      	mov	r0, r5
    fbbe:	f015 f86f 	bl	24ca0 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    fbc2:	2800      	cmp	r0, #0
    fbc4:	d1f0      	bne.n	fba8 <smp_pairing_failed+0x2c>
    fbc6:	e7f2      	b.n	fbae <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    fbc8:	691b      	ldr	r3, [r3, #16]
    fbca:	2b00      	cmp	r3, #0
    fbcc:	d0ef      	beq.n	fbae <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    fbce:	4638      	mov	r0, r7
    fbd0:	4798      	blx	r3
    fbd2:	e7ec      	b.n	fbae <smp_pairing_failed+0x32>
    fbd4:	00026654 	.word	0x00026654
    fbd8:	00026544 	.word	0x00026544
    fbdc:	0002a574 	.word	0x0002a574
    fbe0:	2000190c 	.word	0x2000190c

0000fbe4 <smp_master_ident>:
{
    fbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fbe8:	460b      	mov	r3, r1
    fbea:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fbec:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
    fbee:	f850 6bc4 	ldr.w	r6, [r0], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fbf2:	f014 fd3c 	bl	2466e <atomic_test_bit>
    fbf6:	b380      	cbz	r0, fc5a <smp_master_ident+0x76>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    fbf8:	f106 0788 	add.w	r7, r6, #136	; 0x88
    fbfc:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    fbfe:	f8d3 8008 	ldr.w	r8, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    fc02:	463a      	mov	r2, r7
    fc04:	2004      	movs	r0, #4
    fc06:	f015 fb66 	bl	252d6 <bt_keys_get_type>
		if (!keys) {
    fc0a:	4605      	mov	r5, r0
    fc0c:	b998      	cbnz	r0, fc36 <smp_master_ident+0x52>
    fc0e:	4a25      	ldr	r2, [pc, #148]	; (fca4 <smp_master_ident+0xc0>)
    fc10:	4c25      	ldr	r4, [pc, #148]	; (fca8 <smp_master_ident+0xc4>)
			BT_ERR("Unable to get keys for %s",
    fc12:	4638      	mov	r0, r7
    fc14:	1aa4      	subs	r4, r4, r2
    fc16:	f7f7 fac1 	bl	719c <bt_addr_le_str_real>
    fc1a:	f7f5 fd2b 	bl	5674 <log_strdup>
    fc1e:	08e4      	lsrs	r4, r4, #3
    fc20:	01a4      	lsls	r4, r4, #6
    fc22:	f044 0401 	orr.w	r4, r4, #1
    fc26:	4601      	mov	r1, r0
    fc28:	4622      	mov	r2, r4
    fc2a:	4820      	ldr	r0, [pc, #128]	; (fcac <smp_master_ident+0xc8>)
    fc2c:	f010 ffd5 	bl	20bda <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    fc30:	2008      	movs	r0, #8
}
    fc32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    fc36:	2202      	movs	r2, #2
    fc38:	4641      	mov	r1, r8
    fc3a:	3018      	adds	r0, #24
    fc3c:	f012 fd70 	bl	22720 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    fc40:	2208      	movs	r2, #8
    fc42:	f108 0102 	add.w	r1, r8, #2
    fc46:	f105 0010 	add.w	r0, r5, #16
    fc4a:	f012 fd69 	bl	22720 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    fc4e:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    fc52:	f023 0301 	bic.w	r3, r3, #1
    fc56:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    fc5a:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    fc5e:	079a      	lsls	r2, r3, #30
    fc60:	d50b      	bpl.n	fc7a <smp_master_ident+0x96>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    fc62:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fc64:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    fc68:	f014 fcf3 	bl	24652 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fc6c:	78f3      	ldrb	r3, [r6, #3]
    fc6e:	b143      	cbz	r3, fc82 <smp_master_ident+0x9e>
	if (!smp->local_dist && !smp->remote_dist) {
    fc70:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
    fc74:	b17d      	cbz	r5, fc96 <smp_master_ident+0xb2>
	return 0;
    fc76:	2000      	movs	r0, #0
    fc78:	e7db      	b.n	fc32 <smp_master_ident+0x4e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fc7a:	075b      	lsls	r3, r3, #29
    fc7c:	d5f6      	bpl.n	fc6c <smp_master_ident+0x88>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fc7e:	210a      	movs	r1, #10
    fc80:	e7f0      	b.n	fc64 <smp_master_ident+0x80>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    fc82:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    fc86:	2b00      	cmp	r3, #0
    fc88:	d1f2      	bne.n	fc70 <smp_master_ident+0x8c>
		err = bt_smp_distribute_keys(smp);
    fc8a:	4620      	mov	r0, r4
    fc8c:	f7ff fd9a 	bl	f7c4 <bt_smp_distribute_keys>
		if (err) {
    fc90:	2800      	cmp	r0, #0
    fc92:	d0ed      	beq.n	fc70 <smp_master_ident+0x8c>
    fc94:	e7cd      	b.n	fc32 <smp_master_ident+0x4e>
		smp_pairing_complete(smp, 0);
    fc96:	4620      	mov	r0, r4
    fc98:	4629      	mov	r1, r5
    fc9a:	f7ff fe39 	bl	f910 <smp_pairing_complete>
	return 0;
    fc9e:	4628      	mov	r0, r5
    fca0:	e7c7      	b.n	fc32 <smp_master_ident+0x4e>
    fca2:	bf00      	nop
    fca4:	00026544 	.word	0x00026544
    fca8:	00026654 	.word	0x00026654
    fcac:	0002a38b 	.word	0x0002a38b

0000fcb0 <bt_smp_connected>:
{
    fcb0:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    fcb2:	4905      	ldr	r1, [pc, #20]	; (fcc8 <bt_smp_connected+0x18>)
{
    fcb4:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    fcb6:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
    fcba:	f016 f947 	bl	25f4c <k_delayed_work_init>
	smp_reset(smp);
    fcbe:	4620      	mov	r0, r4
}
    fcc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    fcc4:	f015 b804 	b.w	24cd0 <smp_reset>
    fcc8:	0000fb41 	.word	0x0000fb41

0000fccc <smp_pairing_rsp>:
{
    fccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    fcce:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    fcd0:	78eb      	ldrb	r3, [r5, #3]
    fcd2:	3b07      	subs	r3, #7
    fcd4:	2b09      	cmp	r3, #9
{
    fcd6:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    fcd8:	d902      	bls.n	fce0 <smp_pairing_rsp+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    fcda:	2506      	movs	r5, #6
}
    fcdc:	4628      	mov	r0, r5
    fcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	smp->local_dist &= rsp->init_key_dist;
    fce0:	792a      	ldrb	r2, [r5, #4]
    fce2:	f890 31a8 	ldrb.w	r3, [r0, #424]	; 0x1a8
	struct bt_conn *conn = smp->chan.chan.conn;
    fce6:	6807      	ldr	r7, [r0, #0]
	smp->local_dist &= rsp->init_key_dist;
    fce8:	4013      	ands	r3, r2
    fcea:	f880 31a8 	strb.w	r3, [r0, #424]	; 0x1a8
	smp->remote_dist &= rsp->resp_key_dist;
    fcee:	796a      	ldrb	r2, [r5, #5]
    fcf0:	f890 31a9 	ldrb.w	r3, [r0, #425]	; 0x1a9
    fcf4:	4013      	ands	r3, r2
    fcf6:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    fcfa:	2302      	movs	r3, #2
    fcfc:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    fd00:	2206      	movs	r2, #6
    fd02:	4629      	mov	r1, r5
    fd04:	30d1      	adds	r0, #209	; 0xd1
    fd06:	f012 fd0b 	bl	22720 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    fd0a:	78ab      	ldrb	r3, [r5, #2]
    fd0c:	071b      	lsls	r3, r3, #28
    fd0e:	d508      	bpl.n	fd22 <smp_pairing_rsp+0x56>
    fd10:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    fd14:	071e      	lsls	r6, r3, #28
    fd16:	d504      	bpl.n	fd22 <smp_pairing_rsp+0x56>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    fd18:	2105      	movs	r1, #5
    fd1a:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    fd1e:	f014 fc98 	bl	24652 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    fd22:	78ab      	ldrb	r3, [r5, #2]
    fd24:	0698      	lsls	r0, r3, #26
    fd26:	d508      	bpl.n	fd3a <smp_pairing_rsp+0x6e>
    fd28:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    fd2c:	0699      	lsls	r1, r3, #26
    fd2e:	d504      	bpl.n	fd3a <smp_pairing_rsp+0x6e>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    fd30:	2113      	movs	r1, #19
    fd32:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    fd36:	f014 fc8c 	bl	24652 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    fd3a:	78ab      	ldrb	r3, [r5, #2]
    fd3c:	07da      	lsls	r2, r3, #31
    fd3e:	d508      	bpl.n	fd52 <smp_pairing_rsp+0x86>
    fd40:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    fd44:	07db      	lsls	r3, r3, #31
    fd46:	d504      	bpl.n	fd52 <smp_pairing_rsp+0x86>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    fd48:	210c      	movs	r1, #12
    fd4a:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    fd4e:	f014 fc80 	bl	24652 <atomic_set_bit>
	smp->method = get_pair_method(smp, rsp->io_capability);
    fd52:	7829      	ldrb	r1, [r5, #0]
    fd54:	4620      	mov	r0, r4
    fd56:	f7ff f993 	bl	f080 <get_pair_method>
    fd5a:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
	if (!update_keys_check(smp)) {
    fd5e:	4620      	mov	r0, r4
    fd60:	f014 fcd3 	bl	2470a <update_keys_check>
    fd64:	b908      	cbnz	r0, fd6a <smp_pairing_rsp+0x9e>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    fd66:	2503      	movs	r5, #3
    fd68:	e7b8      	b.n	fcdc <smp_pairing_rsp+0x10>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    fd6a:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
    fd6e:	2105      	movs	r1, #5
    fd70:	4630      	mov	r0, r6
    fd72:	f014 fc7c 	bl	2466e <atomic_test_bit>
    fd76:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    fd7a:	461d      	mov	r5, r3
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    fd7c:	bb68      	cbnz	r0, fdda <smp_pairing_rsp+0x10e>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    fd7e:	b993      	cbnz	r3, fda6 <smp_pairing_rsp+0xda>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    fd80:	210e      	movs	r1, #14
    fd82:	4630      	mov	r0, r6
    fd84:	f014 fc73 	bl	2466e <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    fd88:	b168      	cbz	r0, fda6 <smp_pairing_rsp+0xda>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    fd8a:	4f2f      	ldr	r7, [pc, #188]	; (fe48 <smp_pairing_rsp+0x17c>)
    fd8c:	683b      	ldr	r3, [r7, #0]
    fd8e:	b153      	cbz	r3, fda6 <smp_pairing_rsp+0xda>
	    bt_auth && bt_auth->pairing_confirm) {
    fd90:	695b      	ldr	r3, [r3, #20]
    fd92:	b143      	cbz	r3, fda6 <smp_pairing_rsp+0xda>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    fd94:	4630      	mov	r0, r6
    fd96:	2109      	movs	r1, #9
    fd98:	f014 fc5b 	bl	24652 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    fd9c:	683b      	ldr	r3, [r7, #0]
    fd9e:	6820      	ldr	r0, [r4, #0]
    fda0:	695b      	ldr	r3, [r3, #20]
    fda2:	4798      	blx	r3
		return 0;
    fda4:	e79a      	b.n	fcdc <smp_pairing_rsp+0x10>
	ret = legacy_request_tk(smp);
    fda6:	4620      	mov	r0, r4
    fda8:	f7ff f87a 	bl	eea0 <legacy_request_tk>
	if (ret) {
    fdac:	4605      	mov	r5, r0
    fdae:	2800      	cmp	r0, #0
    fdb0:	d194      	bne.n	fcdc <smp_pairing_rsp+0x10>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    fdb2:	2109      	movs	r1, #9
    fdb4:	4630      	mov	r0, r6
    fdb6:	f014 fc5a 	bl	2466e <atomic_test_bit>
    fdba:	b948      	cbnz	r0, fdd0 <smp_pairing_rsp+0x104>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    fdbc:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    fdc0:	2103      	movs	r1, #3
    fdc2:	f014 fc46 	bl	24652 <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
    fdc6:	4620      	mov	r0, r4
}
    fdc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return legacy_send_pairing_confirm(smp);
    fdcc:	f015 b895 	b.w	24efa <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    fdd0:	4629      	mov	r1, r5
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    fdd2:	4630      	mov	r0, r6
    fdd4:	f014 fc3d 	bl	24652 <atomic_set_bit>
		return 0;
    fdd8:	e780      	b.n	fcdc <smp_pairing_rsp+0x10>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    fdda:	7aba      	ldrb	r2, [r7, #10]
    fddc:	2a04      	cmp	r2, #4
    fdde:	d10b      	bne.n	fdf8 <smp_pairing_rsp+0x12c>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    fde0:	2b00      	cmp	r3, #0
    fde2:	d0c0      	beq.n	fd66 <smp_pairing_rsp+0x9a>
	return MIN(req->max_key_size, rsp->max_key_size);
    fde4:	f894 20cd 	ldrb.w	r2, [r4, #205]	; 0xcd
    fde8:	f894 10d4 	ldrb.w	r1, [r4, #212]	; 0xd4
	     conn->required_sec_level == BT_SECURITY_L4) &&
    fdec:	428a      	cmp	r2, r1
    fdee:	bf28      	it	cs
    fdf0:	460a      	movcs	r2, r1
    fdf2:	2a10      	cmp	r2, #16
    fdf4:	f47f af71 	bne.w	fcda <smp_pairing_rsp+0xe>
	smp->local_dist &= SEND_KEYS_SC;
    fdf8:	2200      	movs	r2, #0
    fdfa:	f884 21a8 	strb.w	r2, [r4, #424]	; 0x1a8
	smp->remote_dist &= RECV_KEYS_SC;
    fdfe:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
    fe02:	f002 0202 	and.w	r2, r2, #2
    fe06:	f884 21a9 	strb.w	r2, [r4, #425]	; 0x1a9
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    fe0a:	b953      	cbnz	r3, fe22 <smp_pairing_rsp+0x156>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    fe0c:	210e      	movs	r1, #14
    fe0e:	4630      	mov	r0, r6
    fe10:	f014 fc2d 	bl	2466e <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    fe14:	b128      	cbz	r0, fe22 <smp_pairing_rsp+0x156>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    fe16:	4f0c      	ldr	r7, [pc, #48]	; (fe48 <smp_pairing_rsp+0x17c>)
    fe18:	683b      	ldr	r3, [r7, #0]
    fe1a:	b113      	cbz	r3, fe22 <smp_pairing_rsp+0x156>
	    bt_auth && bt_auth->pairing_confirm) {
    fe1c:	695b      	ldr	r3, [r3, #20]
    fe1e:	2b00      	cmp	r3, #0
    fe20:	d1b8      	bne.n	fd94 <smp_pairing_rsp+0xc8>
	if (!sc_public_key) {
    fe22:	4b0a      	ldr	r3, [pc, #40]	; (fe4c <smp_pairing_rsp+0x180>)
    fe24:	681d      	ldr	r5, [r3, #0]
    fe26:	b90d      	cbnz	r5, fe2c <smp_pairing_rsp+0x160>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    fe28:	2106      	movs	r1, #6
    fe2a:	e7d2      	b.n	fdd2 <smp_pairing_rsp+0x106>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    fe2c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    fe30:	210c      	movs	r1, #12
    fe32:	f014 fc0e 	bl	24652 <atomic_set_bit>
	atomic_clear_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    fe36:	210b      	movs	r1, #11
    fe38:	f014 fc22 	bl	24680 <atomic_clear_bit>
	return sc_send_public_key(smp);
    fe3c:	4620      	mov	r0, r4
}
    fe3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return sc_send_public_key(smp);
    fe42:	f7ff ba6b 	b.w	f31c <sc_send_public_key>
    fe46:	bf00      	nop
    fe48:	2000190c 	.word	0x2000190c
    fe4c:	20001a6c 	.word	0x20001a6c

0000fe50 <smp_public_key_slave.part.0>:
static uint8_t smp_public_key_slave(struct bt_smp *smp)
    fe50:	b538      	push	{r3, r4, r5, lr}
    fe52:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
    fe56:	4605      	mov	r5, r0
    fe58:	2b05      	cmp	r3, #5
    fe5a:	d835      	bhi.n	fec8 <smp_public_key_slave.part.0+0x78>
    fe5c:	e8df f003 	tbb	[pc, r3]
    fe60:	030c1603 	.word	0x030c1603
    fe64:	3234      	.short	0x3234
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    fe66:	30c0      	adds	r0, #192	; 0xc0
    fe68:	2104      	movs	r1, #4
    fe6a:	f014 fbf2 	bl	24652 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    fe6e:	4628      	mov	r0, r5
    fe70:	f7ff fb62 	bl	f538 <smp_send_pairing_confirm>
		if (err) {
    fe74:	b1c0      	cbz	r0, fea8 <smp_public_key_slave.part.0+0x58>
}
    fe76:	bd38      	pop	{r3, r4, r5, pc}
		err = display_passkey(smp);
    fe78:	f7fe ff76 	bl	ed68 <display_passkey>
		if (err) {
    fe7c:	2800      	cmp	r0, #0
    fe7e:	d1fa      	bne.n	fe76 <smp_public_key_slave.part.0+0x26>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    fe80:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    fe82:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
    fe86:	f014 fbe4 	bl	24652 <atomic_set_bit>
		break;
    fe8a:	e00d      	b.n	fea8 <smp_public_key_slave.part.0+0x58>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    fe8c:	2103      	movs	r1, #3
    fe8e:	30c0      	adds	r0, #192	; 0xc0
    fe90:	f014 fbdf 	bl	24652 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    fe94:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    fe98:	2109      	movs	r1, #9
    fe9a:	f014 fbda 	bl	24652 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    fe9e:	4b0b      	ldr	r3, [pc, #44]	; (fecc <smp_public_key_slave.part.0+0x7c>)
    fea0:	6828      	ldr	r0, [r5, #0]
    fea2:	681b      	ldr	r3, [r3, #0]
    fea4:	685b      	ldr	r3, [r3, #4]
    fea6:	4798      	blx	r3
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    fea8:	4909      	ldr	r1, [pc, #36]	; (fed0 <smp_public_key_slave.part.0+0x80>)
    feaa:	f205 1017 	addw	r0, r5, #279	; 0x117
    feae:	f7f9 ffeb 	bl	9e88 <bt_dh_key_gen>
    feb2:	4604      	mov	r4, r0
    feb4:	b940      	cbnz	r0, fec8 <smp_public_key_slave.part.0+0x78>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    feb6:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    feba:	2107      	movs	r1, #7
    febc:	f014 fbc9 	bl	24652 <atomic_set_bit>
	return 0;
    fec0:	4620      	mov	r0, r4
    fec2:	e7d8      	b.n	fe76 <smp_public_key_slave.part.0+0x26>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    fec4:	2104      	movs	r1, #4
    fec6:	e7dc      	b.n	fe82 <smp_public_key_slave.part.0+0x32>
		return BT_SMP_ERR_UNSPECIFIED;
    fec8:	2008      	movs	r0, #8
    feca:	e7d4      	b.n	fe76 <smp_public_key_slave.part.0+0x26>
    fecc:	2000190c 	.word	0x2000190c
    fed0:	0000f9a5 	.word	0x0000f9a5

0000fed4 <smp_public_key>:
{
    fed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    fed6:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    fed8:	f200 1417 	addw	r4, r0, #279	; 0x117
{
    fedc:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    fede:	2220      	movs	r2, #32
    fee0:	4631      	mov	r1, r6
    fee2:	4620      	mov	r0, r4
    fee4:	f012 fc1c 	bl	22720 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    fee8:	2220      	movs	r2, #32
    feea:	18b1      	adds	r1, r6, r2
    feec:	f205 1037 	addw	r0, r5, #311	; 0x137
    fef0:	f012 fc16 	bl	22720 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    fef4:	494e      	ldr	r1, [pc, #312]	; (10030 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x31>)
    fef6:	2240      	movs	r2, #64	; 0x40
    fef8:	4620      	mov	r0, r4
    fefa:	f012 fc01 	bl	22700 <memcmp>
    fefe:	b148      	cbz	r0, ff14 <smp_public_key+0x40>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    ff00:	682b      	ldr	r3, [r5, #0]
    ff02:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ff04:	b373      	cbz	r3, ff64 <smp_public_key+0x90>
	if (!sc_public_key) {
    ff06:	4b4b      	ldr	r3, [pc, #300]	; (10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>)
    ff08:	681c      	ldr	r4, [r3, #0]
    ff0a:	2c00      	cmp	r4, #0
    ff0c:	f040 8084 	bne.w	10018 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    ff10:	2106      	movs	r1, #6
    ff12:	e03c      	b.n	ff8e <smp_public_key+0xba>
    ff14:	4b48      	ldr	r3, [pc, #288]	; (10038 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x39>)
    ff16:	4949      	ldr	r1, [pc, #292]	; (1003c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3d>)
		BT_INFO("Remote is using Debug Public key");
    ff18:	4849      	ldr	r0, [pc, #292]	; (10040 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41>)
    ff1a:	1ac9      	subs	r1, r1, r3
    ff1c:	08c9      	lsrs	r1, r1, #3
    ff1e:	0189      	lsls	r1, r1, #6
    ff20:	f041 0103 	orr.w	r1, r1, #3
    ff24:	f010 fe4c 	bl	20bc0 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    ff28:	210d      	movs	r1, #13
    ff2a:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    ff2e:	f014 fb90 	bl	24652 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    ff32:	682e      	ldr	r6, [r5, #0]
	if (!conn->le.keys) {
    ff34:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    ff38:	b933      	cbnz	r3, ff48 <smp_public_key+0x74>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    ff3a:	7a30      	ldrb	r0, [r6, #8]
    ff3c:	f106 0188 	add.w	r1, r6, #136	; 0x88
    ff40:	f000 fbce 	bl	106e0 <bt_keys_get_addr>
    ff44:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
	if (!conn->le.keys ||
    ff48:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    ff4c:	2b00      	cmp	r3, #0
    ff4e:	d0d7      	beq.n	ff00 <smp_public_key+0x2c>
    ff50:	89da      	ldrh	r2, [r3, #14]
    ff52:	f002 0224 	and.w	r2, r2, #36	; 0x24
    ff56:	2a00      	cmp	r2, #0
    ff58:	d0d2      	beq.n	ff00 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    ff5a:	7b5b      	ldrb	r3, [r3, #13]
    ff5c:	079b      	lsls	r3, r3, #30
    ff5e:	d5cf      	bpl.n	ff00 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    ff60:	2003      	movs	r0, #3
    ff62:	e028      	b.n	ffb6 <smp_public_key+0xe2>
		switch (smp->method) {
    ff64:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
    ff68:	2b05      	cmp	r3, #5
    ff6a:	d838      	bhi.n	ffde <smp_public_key+0x10a>
    ff6c:	e8df f003 	tbb	[pc, r3]
    ff70:	03152503 	.word	0x03152503
    ff74:	3037      	.short	0x3037
			atomic_set_bit(&smp->allowed_cmds,
    ff76:	2103      	movs	r1, #3
    ff78:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
    ff7c:	f014 fb69 	bl	24652 <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    ff80:	4620      	mov	r0, r4
    ff82:	4930      	ldr	r1, [pc, #192]	; (10044 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x45>)
    ff84:	f7f9 ff80 	bl	9e88 <bt_dh_key_gen>
    ff88:	4604      	mov	r4, r0
    ff8a:	bb40      	cbnz	r0, ffde <smp_public_key+0x10a>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    ff8c:	2107      	movs	r1, #7
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    ff8e:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    ff92:	f014 fb5e 	bl	24652 <atomic_set_bit>
		return 0;
    ff96:	4620      	mov	r0, r4
    ff98:	e00d      	b.n	ffb6 <smp_public_key+0xe2>
			err = display_passkey(smp);
    ff9a:	4628      	mov	r0, r5
    ff9c:	f7fe fee4 	bl	ed68 <display_passkey>
			if (err) {
    ffa0:	b948      	cbnz	r0, ffb6 <smp_public_key+0xe2>
			atomic_set_bit(&smp->allowed_cmds,
    ffa2:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
    ffa6:	2103      	movs	r1, #3
    ffa8:	f014 fb53 	bl	24652 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    ffac:	4628      	mov	r0, r5
    ffae:	f7ff fac3 	bl	f538 <smp_send_pairing_confirm>
			if (err) {
    ffb2:	2800      	cmp	r0, #0
    ffb4:	d0e4      	beq.n	ff80 <smp_public_key+0xac>
}
    ffb6:	b003      	add	sp, #12
    ffb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ffba:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    ffbe:	2109      	movs	r1, #9
    ffc0:	f014 fb47 	bl	24652 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    ffc4:	4b20      	ldr	r3, [pc, #128]	; (10048 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x49>)
    ffc6:	6828      	ldr	r0, [r5, #0]
    ffc8:	681b      	ldr	r3, [r3, #0]
    ffca:	685b      	ldr	r3, [r3, #4]
    ffcc:	4798      	blx	r3
			break;
    ffce:	e7d7      	b.n	ff80 <smp_public_key+0xac>
			if (bt_rand(smp->prnd, 16)) {
    ffd0:	2110      	movs	r1, #16
    ffd2:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
    ffd6:	f003 fe5b 	bl	13c90 <bt_rand>
    ffda:	4606      	mov	r6, r0
    ffdc:	b108      	cbz	r0, ffe2 <smp_public_key+0x10e>
		switch (smp->method) {
    ffde:	2008      	movs	r0, #8
    ffe0:	e7e9      	b.n	ffb6 <smp_public_key+0xe2>
			if (bt_auth && bt_auth->oob_data_request) {
    ffe2:	4f19      	ldr	r7, [pc, #100]	; (10048 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x49>)
    ffe4:	683b      	ldr	r3, [r7, #0]
    ffe6:	b303      	cbz	r3, 1002a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2b>
    ffe8:	68db      	ldr	r3, [r3, #12]
    ffea:	b1f3      	cbz	r3, 1002a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2b>
				struct bt_conn_oob_info info = {
    ffec:	4b17      	ldr	r3, [pc, #92]	; (1004c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4d>)
				le_sc_oob_config_set(smp, &info);
    ffee:	f10d 0105 	add.w	r1, sp, #5
				struct bt_conn_oob_info info = {
    fff2:	881b      	ldrh	r3, [r3, #0]
    fff4:	f8ad 3004 	strh.w	r3, [sp, #4]
				le_sc_oob_config_set(smp, &info);
    fff8:	4628      	mov	r0, r5
    fffa:	f014 fbb8 	bl	2476e <le_sc_oob_config_set.isra.0>
				atomic_set_bit(smp->flags,
    fffe:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
				smp->oobd_remote = NULL;
   10002:	e9c5 6668 	strd	r6, r6, [r5, #416]	; 0x1a0
				atomic_set_bit(smp->flags,
   10006:	210b      	movs	r1, #11
   10008:	f014 fb23 	bl	24652 <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
   1000c:	683b      	ldr	r3, [r7, #0]
   1000e:	6828      	ldr	r0, [r5, #0]
   10010:	68db      	ldr	r3, [r3, #12]
   10012:	a901      	add	r1, sp, #4
   10014:	4798      	blx	r3
			break;
   10016:	e7b3      	b.n	ff80 <smp_public_key+0xac>
	err = sc_send_public_key(smp);
   10018:	4628      	mov	r0, r5
   1001a:	f7ff f97f 	bl	f31c <sc_send_public_key>
	if (err) {
   1001e:	2800      	cmp	r0, #0
   10020:	d1c9      	bne.n	ffb6 <smp_public_key+0xe2>
   10022:	4628      	mov	r0, r5
   10024:	f7ff ff14 	bl	fe50 <smp_public_key_slave.part.0>
   10028:	e7c5      	b.n	ffb6 <smp_public_key+0xe2>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   1002a:	2002      	movs	r0, #2
   1002c:	e7c3      	b.n	ffb6 <smp_public_key+0xe2>
   1002e:	bf00      	nop
   10030:	0002a640 	.word	0x0002a640
   10034:	20001a6c 	.word	0x20001a6c
   10038:	00026544 	.word	0x00026544
   1003c:	00026654 	.word	0x00026654
   10040:	0002a580 	.word	0x0002a580
   10044:	0000f9a5 	.word	0x0000f9a5
   10048:	2000190c 	.word	0x2000190c
   1004c:	000267a8 	.word	0x000267a8

00010050 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   10050:	4b2f      	ldr	r3, [pc, #188]	; (10110 <bt_smp_pkey_ready+0xc0>)
{
   10052:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   10054:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   10056:	b958      	cbnz	r0, 10070 <bt_smp_pkey_ready+0x20>
   10058:	492e      	ldr	r1, [pc, #184]	; (10114 <bt_smp_pkey_ready+0xc4>)
   1005a:	4b2f      	ldr	r3, [pc, #188]	; (10118 <bt_smp_pkey_ready+0xc8>)
		BT_WARN("Public key not available");
   1005c:	482f      	ldr	r0, [pc, #188]	; (1011c <bt_smp_pkey_ready+0xcc>)
   1005e:	1ac9      	subs	r1, r1, r3
   10060:	08c9      	lsrs	r1, r1, #3
   10062:	0189      	lsls	r1, r1, #6
}
   10064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
   10068:	f041 0102 	orr.w	r1, r1, #2
   1006c:	f010 bda8 	b.w	20bc0 <log_0>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   10070:	4c2b      	ldr	r4, [pc, #172]	; (10120 <bt_smp_pkey_ready+0xd0>)
	z_impl_k_sem_give(sem);
   10072:	482c      	ldr	r0, [pc, #176]	; (10124 <bt_smp_pkey_ready+0xd4>)
   10074:	f00f fdf2 	bl	1fc5c <z_impl_k_sem_give>
   10078:	2106      	movs	r1, #6
   1007a:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1007e:	f014 faf6 	bl	2466e <atomic_test_bit>
   10082:	b150      	cbz	r0, 1009a <bt_smp_pkey_ready+0x4a>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   10084:	6823      	ldr	r3, [r4, #0]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10086:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
   10088:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1008a:	b323      	cbz	r3, 100d6 <bt_smp_pkey_ready+0x86>
	err = sc_send_public_key(smp);
   1008c:	f7ff f946 	bl	f31c <sc_send_public_key>
	if (err) {
   10090:	4601      	mov	r1, r0
   10092:	b1c8      	cbz	r0, 100c8 <bt_smp_pkey_ready+0x78>
			smp_error(smp, err);
   10094:	4822      	ldr	r0, [pc, #136]	; (10120 <bt_smp_pkey_ready+0xd0>)
   10096:	f014 fe4a 	bl	24d2e <smp_error>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1009a:	4823      	ldr	r0, [pc, #140]	; (10128 <bt_smp_pkey_ready+0xd8>)
   1009c:	2106      	movs	r1, #6
   1009e:	f014 fae6 	bl	2466e <atomic_test_bit>
   100a2:	b398      	cbz	r0, 1010c <bt_smp_pkey_ready+0xbc>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   100a4:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
			err = sc_send_public_key(smp);
   100a8:	4820      	ldr	r0, [pc, #128]	; (1012c <bt_smp_pkey_ready+0xdc>)
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   100aa:	78db      	ldrb	r3, [r3, #3]
   100ac:	bb03      	cbnz	r3, 100f0 <bt_smp_pkey_ready+0xa0>
			err = sc_send_public_key(smp);
   100ae:	f7ff f935 	bl	f31c <sc_send_public_key>
			if (err) {
   100b2:	4601      	mov	r1, r0
   100b4:	b110      	cbz	r0, 100bc <bt_smp_pkey_ready+0x6c>
				smp_error(smp, err);
   100b6:	481d      	ldr	r0, [pc, #116]	; (1012c <bt_smp_pkey_ready+0xdc>)
   100b8:	f014 fe39 	bl	24d2e <smp_error>
}
   100bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(&smp->allowed_cmds,
   100c0:	481b      	ldr	r0, [pc, #108]	; (10130 <bt_smp_pkey_ready+0xe0>)
   100c2:	210c      	movs	r1, #12
   100c4:	f014 bac5 	b.w	24652 <atomic_set_bit>
   100c8:	4620      	mov	r0, r4
   100ca:	f7ff fec1 	bl	fe50 <smp_public_key_slave.part.0>
		if (err) {
   100ce:	4601      	mov	r1, r0
   100d0:	2800      	cmp	r0, #0
   100d2:	d0e2      	beq.n	1009a <bt_smp_pkey_ready+0x4a>
   100d4:	e7de      	b.n	10094 <bt_smp_pkey_ready+0x44>
			err = sc_send_public_key(smp);
   100d6:	f7ff f921 	bl	f31c <sc_send_public_key>
			if (err) {
   100da:	4601      	mov	r1, r0
   100dc:	b920      	cbnz	r0, 100e8 <bt_smp_pkey_ready+0x98>
			atomic_set_bit(&smp->allowed_cmds,
   100de:	4815      	ldr	r0, [pc, #84]	; (10134 <bt_smp_pkey_ready+0xe4>)
   100e0:	210c      	movs	r1, #12
   100e2:	f014 fab6 	bl	24652 <atomic_set_bit>
			continue;
   100e6:	e7d8      	b.n	1009a <bt_smp_pkey_ready+0x4a>
				smp_error(smp, err);
   100e8:	4620      	mov	r0, r4
   100ea:	f014 fe20 	bl	24d2e <smp_error>
   100ee:	e7f6      	b.n	100de <bt_smp_pkey_ready+0x8e>
	err = sc_send_public_key(smp);
   100f0:	f7ff f914 	bl	f31c <sc_send_public_key>
	if (err) {
   100f4:	4601      	mov	r1, r0
   100f6:	b920      	cbnz	r0, 10102 <bt_smp_pkey_ready+0xb2>
   100f8:	480c      	ldr	r0, [pc, #48]	; (1012c <bt_smp_pkey_ready+0xdc>)
   100fa:	f7ff fea9 	bl	fe50 <smp_public_key_slave.part.0>
		if (err) {
   100fe:	4601      	mov	r1, r0
   10100:	b120      	cbz	r0, 1010c <bt_smp_pkey_ready+0xbc>
}
   10102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   10106:	4809      	ldr	r0, [pc, #36]	; (1012c <bt_smp_pkey_ready+0xdc>)
   10108:	f014 be11 	b.w	24d2e <smp_error>
}
   1010c:	bd10      	pop	{r4, pc}
   1010e:	bf00      	nop
   10110:	20001a6c 	.word	0x20001a6c
   10114:	00026654 	.word	0x00026654
   10118:	00026544 	.word	0x00026544
   1011c:	0002a5a1 	.word	0x0002a5a1
   10120:	20000f10 	.word	0x20000f10
   10124:	20000844 	.word	0x20000844
   10128:	200011b4 	.word	0x200011b4
   1012c:	200010f0 	.word	0x200010f0
   10130:	200011b0 	.word	0x200011b0
   10134:	20000fd0 	.word	0x20000fd0

00010138 <smp_ident_addr_info>:
{
   10138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1013c:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1013e:	6804      	ldr	r4, [r0, #0]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   10140:	7833      	ldrb	r3, [r6, #0]
{
   10142:	4605      	mov	r5, r0
   10144:	b31b      	cbz	r3, 1018e <smp_ident_addr_info+0x56>
	if (!bt_addr_le_is_identity(&req->addr)) {
   10146:	79b3      	ldrb	r3, [r6, #6]
   10148:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1014c:	2bc0      	cmp	r3, #192	; 0xc0
   1014e:	d01e      	beq.n	1018e <smp_ident_addr_info+0x56>
   10150:	4b4a      	ldr	r3, [pc, #296]	; (1027c <smp_ident_addr_info+0x144>)
   10152:	4d4b      	ldr	r5, [pc, #300]	; (10280 <smp_ident_addr_info+0x148>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   10154:	4630      	mov	r0, r6
   10156:	1aed      	subs	r5, r5, r3
   10158:	f7f7 f820 	bl	719c <bt_addr_le_str_real>
   1015c:	f7f5 fa8a 	bl	5674 <log_strdup>
   10160:	08ed      	lsrs	r5, r5, #3
   10162:	01ad      	lsls	r5, r5, #6
   10164:	f045 0501 	orr.w	r5, r5, #1
   10168:	4601      	mov	r1, r0
   1016a:	462a      	mov	r2, r5
   1016c:	4845      	ldr	r0, [pc, #276]	; (10284 <smp_ident_addr_info+0x14c>)
   1016e:	f010 fd34 	bl	20bda <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   10172:	f104 0088 	add.w	r0, r4, #136	; 0x88
   10176:	f7f7 f811 	bl	719c <bt_addr_le_str_real>
   1017a:	f7f5 fa7b 	bl	5674 <log_strdup>
   1017e:	462a      	mov	r2, r5
   10180:	4601      	mov	r1, r0
   10182:	4841      	ldr	r0, [pc, #260]	; (10288 <smp_ident_addr_info+0x150>)
   10184:	f010 fd29 	bl	20bda <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
   10188:	200a      	movs	r0, #10
}
   1018a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1018e:	210c      	movs	r1, #12
   10190:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   10194:	f014 fa6b 	bl	2466e <atomic_test_bit>
   10198:	2800      	cmp	r0, #0
   1019a:	d048      	beq.n	1022e <smp_ident_addr_info+0xf6>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1019c:	f104 0788 	add.w	r7, r4, #136	; 0x88
   101a0:	7a21      	ldrb	r1, [r4, #8]
   101a2:	463a      	mov	r2, r7
   101a4:	2002      	movs	r0, #2
   101a6:	f015 f896 	bl	252d6 <bt_keys_get_type>
		if (!keys) {
   101aa:	4680      	mov	r8, r0
   101ac:	b990      	cbnz	r0, 101d4 <smp_ident_addr_info+0x9c>
   101ae:	4a33      	ldr	r2, [pc, #204]	; (1027c <smp_ident_addr_info+0x144>)
   101b0:	4c33      	ldr	r4, [pc, #204]	; (10280 <smp_ident_addr_info+0x148>)
			BT_ERR("Unable to get keys for %s",
   101b2:	4638      	mov	r0, r7
   101b4:	1aa4      	subs	r4, r4, r2
   101b6:	f7f6 fff1 	bl	719c <bt_addr_le_str_real>
   101ba:	f7f5 fa5b 	bl	5674 <log_strdup>
   101be:	08e4      	lsrs	r4, r4, #3
   101c0:	01a4      	lsls	r4, r4, #6
   101c2:	f044 0401 	orr.w	r4, r4, #1
   101c6:	4601      	mov	r1, r0
   101c8:	4622      	mov	r2, r4
   101ca:	4830      	ldr	r0, [pc, #192]	; (1028c <smp_ident_addr_info+0x154>)
   101cc:	f010 fd05 	bl	20bda <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   101d0:	2008      	movs	r0, #8
   101d2:	e7da      	b.n	1018a <smp_ident_addr_info+0x52>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   101d4:	78e3      	ldrb	r3, [r4, #3]
   101d6:	2b00      	cmp	r3, #0
   101d8:	d13d      	bne.n	10256 <smp_ident_addr_info+0x11e>
			dst = &conn->le.resp_addr;
   101da:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   101de:	780b      	ldrb	r3, [r1, #0]
   101e0:	2b01      	cmp	r3, #1
   101e2:	d121      	bne.n	10228 <smp_ident_addr_info+0xf0>
		if (bt_addr_le_is_rpa(dst)) {
   101e4:	798b      	ldrb	r3, [r1, #6]
   101e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   101ea:	2b40      	cmp	r3, #64	; 0x40
   101ec:	d11c      	bne.n	10228 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
   101ee:	2206      	movs	r2, #6
   101f0:	3101      	adds	r1, #1
   101f2:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   101f6:	f012 fa93 	bl	22720 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   101fa:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   101fe:	b19b      	cbz	r3, 10228 <smp_ident_addr_info+0xf0>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   10200:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   10204:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10208:	2bc0      	cmp	r3, #192	; 0xc0
   1020a:	d00d      	beq.n	10228 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
   1020c:	2207      	movs	r2, #7
   1020e:	4631      	mov	r1, r6
   10210:	f108 0001 	add.w	r0, r8, #1
   10214:	f012 fa84 	bl	22720 <memcpy>
   10218:	2207      	movs	r2, #7
   1021a:	4631      	mov	r1, r6
   1021c:	4638      	mov	r0, r7
   1021e:	f012 fa7f 	bl	22720 <memcpy>
				bt_conn_identity_resolved(conn);
   10222:	4620      	mov	r0, r4
   10224:	f7f9 ff9c 	bl	a160 <bt_conn_identity_resolved>
		bt_id_add(keys);
   10228:	4640      	mov	r0, r8
   1022a:	f7f8 fc43 	bl	8ab4 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1022e:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   10232:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   10236:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   10238:	f885 21a9 	strb.w	r2, [r5, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1023c:	d504      	bpl.n	10248 <smp_ident_addr_info+0x110>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1023e:	210a      	movs	r1, #10
   10240:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   10244:	f014 fa05 	bl	24652 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10248:	78e3      	ldrb	r3, [r4, #3]
   1024a:	b13b      	cbz	r3, 1025c <smp_ident_addr_info+0x124>
	if (!smp->local_dist && !smp->remote_dist) {
   1024c:	f8b5 41a8 	ldrh.w	r4, [r5, #424]	; 0x1a8
   10250:	b174      	cbz	r4, 10270 <smp_ident_addr_info+0x138>
	return 0;
   10252:	2000      	movs	r0, #0
   10254:	e799      	b.n	1018a <smp_ident_addr_info+0x52>
			dst = &conn->le.init_addr;
   10256:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1025a:	e7c0      	b.n	101de <smp_ident_addr_info+0xa6>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
   1025c:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   10260:	2b00      	cmp	r3, #0
   10262:	d1f3      	bne.n	1024c <smp_ident_addr_info+0x114>
		err = bt_smp_distribute_keys(smp);
   10264:	4628      	mov	r0, r5
   10266:	f7ff faad 	bl	f7c4 <bt_smp_distribute_keys>
		if (err) {
   1026a:	2800      	cmp	r0, #0
   1026c:	d0ee      	beq.n	1024c <smp_ident_addr_info+0x114>
   1026e:	e78c      	b.n	1018a <smp_ident_addr_info+0x52>
		smp_pairing_complete(smp, 0);
   10270:	4628      	mov	r0, r5
   10272:	4621      	mov	r1, r4
   10274:	f7ff fb4c 	bl	f910 <smp_pairing_complete>
	return 0;
   10278:	4620      	mov	r0, r4
   1027a:	e786      	b.n	1018a <smp_ident_addr_info+0x52>
   1027c:	00026544 	.word	0x00026544
   10280:	00026654 	.word	0x00026654
   10284:	0002a5ba 	.word	0x0002a5ba
   10288:	0002a491 	.word	0x0002a491
   1028c:	0002a38b 	.word	0x0002a38b

00010290 <smp_pairing_random>:
{
   10290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10294:	4606      	mov	r6, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   10296:	f100 08f7 	add.w	r8, r0, #247	; 0xf7
   1029a:	6889      	ldr	r1, [r1, #8]
{
   1029c:	b08d      	sub	sp, #52	; 0x34
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1029e:	2210      	movs	r2, #16
   102a0:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   102a2:	f106 07c4 	add.w	r7, r6, #196	; 0xc4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   102a6:	f012 fa3b 	bl	22720 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   102aa:	2105      	movs	r1, #5
   102ac:	4638      	mov	r0, r7
   102ae:	f014 f9de 	bl	2466e <atomic_test_bit>
   102b2:	f8d6 9000 	ldr.w	r9, [r6]
   102b6:	2800      	cmp	r0, #0
   102b8:	d17e      	bne.n	103b8 <smp_pairing_random+0x128>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   102ba:	f109 0396 	add.w	r3, r9, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   102be:	f206 1a07 	addw	sl, r6, #263	; 0x107
   102c2:	ad08      	add	r5, sp, #32
   102c4:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   102c6:	f109 038f 	add.w	r3, r9, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   102ca:	9300      	str	r3, [sp, #0]
   102cc:	9502      	str	r5, [sp, #8]
   102ce:	f106 03d0 	add.w	r3, r6, #208	; 0xd0
   102d2:	f106 02c9 	add.w	r2, r6, #201	; 0xc9
   102d6:	4641      	mov	r1, r8
   102d8:	4650      	mov	r0, sl
   102da:	f014 fdb3 	bl	24e44 <smp_c1>
	if (err) {
   102de:	b108      	cbz	r0, 102e4 <smp_pairing_random+0x54>
				return BT_SMP_ERR_UNSPECIFIED;
   102e0:	2408      	movs	r4, #8
   102e2:	e065      	b.n	103b0 <smp_pairing_random+0x120>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   102e4:	2210      	movs	r2, #16
   102e6:	4629      	mov	r1, r5
   102e8:	f106 00d7 	add.w	r0, r6, #215	; 0xd7
   102ec:	f012 fa08 	bl	22700 <memcmp>
   102f0:	2800      	cmp	r0, #0
   102f2:	d15c      	bne.n	103ae <smp_pairing_random+0x11e>
	    conn->role == BT_HCI_ROLE_MASTER) {
   102f4:	f899 4003 	ldrb.w	r4, [r9, #3]
   102f8:	f106 0be7 	add.w	fp, r6, #231	; 0xe7
	memcpy(out, r2, 8);
   102fc:	2208      	movs	r2, #8
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   102fe:	2c00      	cmp	r4, #0
   10300:	d138      	bne.n	10374 <smp_pairing_random+0xe4>
	memcpy(out, r2, 8);
   10302:	4659      	mov	r1, fp
   10304:	4628      	mov	r0, r5
   10306:	f012 fa0b 	bl	22720 <memcpy>
	memcpy(out + 8, r1, 8);
   1030a:	2208      	movs	r2, #8
   1030c:	4641      	mov	r1, r8
   1030e:	a80a      	add	r0, sp, #40	; 0x28
   10310:	f012 fa06 	bl	22720 <memcpy>
	return bt_encrypt_le(k, out, out);
   10314:	462a      	mov	r2, r5
   10316:	4629      	mov	r1, r5
   10318:	4650      	mov	r0, sl
   1031a:	f003 fcbb 	bl	13c94 <bt_encrypt_le>
		if (err) {
   1031e:	2800      	cmp	r0, #0
   10320:	d1de      	bne.n	102e0 <smp_pairing_random+0x50>
		(void)memset(ediv, 0, sizeof(ediv));
   10322:	2202      	movs	r2, #2
   10324:	4621      	mov	r1, r4
   10326:	a805      	add	r0, sp, #20
   10328:	f012 fa25 	bl	22776 <memset>
		(void)memset(rand, 0, sizeof(rand));
   1032c:	2208      	movs	r2, #8
   1032e:	4621      	mov	r1, r4
   10330:	a806      	add	r0, sp, #24
   10332:	f012 fa20 	bl	22776 <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
   10336:	f896 20d4 	ldrb.w	r2, [r6, #212]	; 0xd4
   1033a:	f896 30cd 	ldrb.w	r3, [r6, #205]	; 0xcd
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   1033e:	429a      	cmp	r2, r3
   10340:	bf94      	ite	ls
   10342:	9200      	strls	r2, [sp, #0]
   10344:	9300      	strhi	r3, [sp, #0]
   10346:	a906      	add	r1, sp, #24
   10348:	462b      	mov	r3, r5
   1034a:	aa05      	add	r2, sp, #20
   1034c:	4648      	mov	r0, r9
   1034e:	f012 fd1c 	bl	22d8a <bt_conn_le_start_encryption>
   10352:	b150      	cbz	r0, 1036a <smp_pairing_random+0xda>
   10354:	4b89      	ldr	r3, [pc, #548]	; (1057c <smp_pairing_random+0x2ec>)
   10356:	498a      	ldr	r1, [pc, #552]	; (10580 <smp_pairing_random+0x2f0>)
			BT_ERR("Failed to start encryption");
   10358:	488a      	ldr	r0, [pc, #552]	; (10584 <smp_pairing_random+0x2f4>)
   1035a:	1ac9      	subs	r1, r1, r3
   1035c:	08c9      	lsrs	r1, r1, #3
   1035e:	0189      	lsls	r1, r1, #6
   10360:	f041 0101 	orr.w	r1, r1, #1
   10364:	f010 fc2c 	bl	20bc0 <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
   10368:	e7ba      	b.n	102e0 <smp_pairing_random+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1036a:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1036c:	4638      	mov	r0, r7
   1036e:	f014 f970 	bl	24652 <atomic_set_bit>
			return 0;
   10372:	e01d      	b.n	103b0 <smp_pairing_random+0x120>
	memcpy(out, r2, 8);
   10374:	4641      	mov	r1, r8
   10376:	4628      	mov	r0, r5
   10378:	f012 f9d2 	bl	22720 <memcpy>
	memcpy(out + 8, r1, 8);
   1037c:	2208      	movs	r2, #8
   1037e:	4659      	mov	r1, fp
   10380:	a80a      	add	r0, sp, #40	; 0x28
   10382:	f012 f9cd 	bl	22720 <memcpy>
	return bt_encrypt_le(k, out, out);
   10386:	462a      	mov	r2, r5
   10388:	4629      	mov	r1, r5
   1038a:	4650      	mov	r0, sl
   1038c:	f003 fc82 	bl	13c94 <bt_encrypt_le>
		if (err) {
   10390:	2800      	cmp	r0, #0
   10392:	d1a5      	bne.n	102e0 <smp_pairing_random+0x50>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   10394:	4629      	mov	r1, r5
   10396:	2210      	movs	r2, #16
   10398:	4650      	mov	r0, sl
   1039a:	f012 f9c1 	bl	22720 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1039e:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   103a0:	4638      	mov	r0, r7
   103a2:	f014 f956 	bl	24652 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   103a6:	4630      	mov	r0, r6
   103a8:	f014 fc48 	bl	24c3c <smp_send_pairing_random>
   103ac:	e056      	b.n	1045c <smp_pairing_random+0x1cc>
		return BT_SMP_ERR_CONFIRM_FAILED;
   103ae:	2404      	movs	r4, #4
}
   103b0:	4620      	mov	r0, r4
   103b2:	b00d      	add	sp, #52	; 0x34
   103b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   103b8:	f899 3003 	ldrb.w	r3, [r9, #3]
   103bc:	2b00      	cmp	r3, #0
   103be:	d15a      	bne.n	10476 <smp_pairing_random+0x1e6>
		err = sc_smp_check_confirm(smp);
   103c0:	4630      	mov	r0, r6
   103c2:	f7fe ff5d 	bl	f280 <sc_smp_check_confirm>
		if (err) {
   103c6:	4604      	mov	r4, r0
   103c8:	2800      	cmp	r0, #0
   103ca:	d1f1      	bne.n	103b0 <smp_pairing_random+0x120>
		switch (smp->method) {
   103cc:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
   103d0:	2b05      	cmp	r3, #5
   103d2:	d885      	bhi.n	102e0 <smp_pairing_random+0x50>
   103d4:	a201      	add	r2, pc, #4	; (adr r2, 103dc <smp_pairing_random+0x14c>)
   103d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   103da:	bf00      	nop
   103dc:	00010461 	.word	0x00010461
   103e0:	0001042d 	.word	0x0001042d
   103e4:	0001042d 	.word	0x0001042d
   103e8:	000103f5 	.word	0x000103f5
   103ec:	000102e1 	.word	0x000102e1
   103f0:	00010461 	.word	0x00010461
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
   103f4:	ab08      	add	r3, sp, #32
   103f6:	4864      	ldr	r0, [pc, #400]	; (10588 <smp_pairing_random+0x2f8>)
   103f8:	9300      	str	r3, [sp, #0]
   103fa:	6800      	ldr	r0, [r0, #0]
   103fc:	4643      	mov	r3, r8
   103fe:	f106 02e7 	add.w	r2, r6, #231	; 0xe7
   10402:	f206 1117 	addw	r1, r6, #279	; 0x117
   10406:	f7fe fc7b 	bl	ed00 <smp_g2>
   1040a:	2800      	cmp	r0, #0
   1040c:	f47f af68 	bne.w	102e0 <smp_pairing_random+0x50>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   10410:	2109      	movs	r1, #9
   10412:	4638      	mov	r0, r7
   10414:	f014 f91d 	bl	24652 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   10418:	2108      	movs	r1, #8
   1041a:	f014 f91a 	bl	24652 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1041e:	4b5b      	ldr	r3, [pc, #364]	; (1058c <smp_pairing_random+0x2fc>)
   10420:	9908      	ldr	r1, [sp, #32]
   10422:	681b      	ldr	r3, [r3, #0]
   10424:	689b      	ldr	r3, [r3, #8]
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   10426:	6830      	ldr	r0, [r6, #0]
   10428:	4798      	blx	r3
			return 0;
   1042a:	e7c1      	b.n	103b0 <smp_pairing_random+0x120>
			smp->passkey_round++;
   1042c:	f896 319c 	ldrb.w	r3, [r6, #412]	; 0x19c
   10430:	3301      	adds	r3, #1
   10432:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   10434:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   10436:	f886 319c 	strb.w	r3, [r6, #412]	; 0x19c
			if (smp->passkey_round == 20U) {
   1043a:	d011      	beq.n	10460 <smp_pairing_random+0x1d0>
			if (bt_rand(smp->prnd, 16)) {
   1043c:	2110      	movs	r1, #16
   1043e:	f106 00e7 	add.w	r0, r6, #231	; 0xe7
   10442:	f003 fc25 	bl	13c90 <bt_rand>
   10446:	2800      	cmp	r0, #0
   10448:	f47f af4a 	bne.w	102e0 <smp_pairing_random+0x50>
			atomic_set_bit(&smp->allowed_cmds,
   1044c:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   10450:	2103      	movs	r1, #3
   10452:	f014 f8fe 	bl	24652 <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
   10456:	4630      	mov	r0, r6
   10458:	f7ff f86e 	bl	f538 <smp_send_pairing_confirm>
   1045c:	4604      	mov	r4, r0
   1045e:	e7a7      	b.n	103b0 <smp_pairing_random+0x120>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   10460:	2107      	movs	r1, #7
   10462:	4638      	mov	r0, r7
   10464:	f014 f903 	bl	2466e <atomic_test_bit>
   10468:	b108      	cbz	r0, 1046e <smp_pairing_random+0x1de>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1046a:	2108      	movs	r1, #8
   1046c:	e77e      	b.n	1036c <smp_pairing_random+0xdc>
		return compute_and_send_master_dhcheck(smp);
   1046e:	4630      	mov	r0, r6
   10470:	f014 fa7c 	bl	2496c <compute_and_send_master_dhcheck>
   10474:	e7f2      	b.n	1045c <smp_pairing_random+0x1cc>
	switch (smp->method) {
   10476:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
   1047a:	2b05      	cmp	r3, #5
   1047c:	f63f af30 	bhi.w	102e0 <smp_pairing_random+0x50>
   10480:	a201      	add	r2, pc, #4	; (adr r2, 10488 <smp_pairing_random+0x1f8>)
   10482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10486:	bf00      	nop
   10488:	000104d1 	.word	0x000104d1
   1048c:	000104df 	.word	0x000104df
   10490:	000104df 	.word	0x000104df
   10494:	000104a1 	.word	0x000104a1
   10498:	000102e1 	.word	0x000102e1
   1049c:	00010535 	.word	0x00010535
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   104a0:	ab08      	add	r3, sp, #32
   104a2:	4939      	ldr	r1, [pc, #228]	; (10588 <smp_pairing_random+0x2f8>)
   104a4:	9300      	str	r3, [sp, #0]
   104a6:	6809      	ldr	r1, [r1, #0]
   104a8:	f106 03e7 	add.w	r3, r6, #231	; 0xe7
   104ac:	4642      	mov	r2, r8
   104ae:	f206 1017 	addw	r0, r6, #279	; 0x117
   104b2:	f7fe fc25 	bl	ed00 <smp_g2>
   104b6:	2800      	cmp	r0, #0
   104b8:	f47f af12 	bne.w	102e0 <smp_pairing_random+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   104bc:	2109      	movs	r1, #9
   104be:	4638      	mov	r0, r7
   104c0:	f014 f8c7 	bl	24652 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   104c4:	4b31      	ldr	r3, [pc, #196]	; (1058c <smp_pairing_random+0x2fc>)
   104c6:	9908      	ldr	r1, [sp, #32]
   104c8:	681b      	ldr	r3, [r3, #0]
   104ca:	6830      	ldr	r0, [r6, #0]
   104cc:	689b      	ldr	r3, [r3, #8]
   104ce:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   104d0:	210d      	movs	r1, #13
   104d2:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   104d6:	f014 f8bc 	bl	24652 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   104da:	210f      	movs	r1, #15
   104dc:	e760      	b.n	103a0 <smp_pairing_random+0x110>
		err = sc_smp_check_confirm(smp);
   104de:	4630      	mov	r0, r6
   104e0:	f7fe fece 	bl	f280 <sc_smp_check_confirm>
		if (err) {
   104e4:	4604      	mov	r4, r0
   104e6:	2800      	cmp	r0, #0
   104e8:	f47f af62 	bne.w	103b0 <smp_pairing_random+0x120>
		atomic_set_bit(&smp->allowed_cmds,
   104ec:	f106 05c0 	add.w	r5, r6, #192	; 0xc0
   104f0:	2103      	movs	r1, #3
   104f2:	4628      	mov	r0, r5
   104f4:	f014 f8ad 	bl	24652 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   104f8:	4630      	mov	r0, r6
   104fa:	f014 fb9f 	bl	24c3c <smp_send_pairing_random>
		if (err) {
   104fe:	4604      	mov	r4, r0
   10500:	2800      	cmp	r0, #0
   10502:	f47f af55 	bne.w	103b0 <smp_pairing_random+0x120>
		smp->passkey_round++;
   10506:	f896 319c 	ldrb.w	r3, [r6, #412]	; 0x19c
   1050a:	3301      	adds	r3, #1
   1050c:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1050e:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   10510:	f886 319c 	strb.w	r3, [r6, #412]	; 0x19c
		if (smp->passkey_round == 20U) {
   10514:	d105      	bne.n	10522 <smp_pairing_random+0x292>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   10516:	210d      	movs	r1, #13
   10518:	4628      	mov	r0, r5
   1051a:	f014 f89a 	bl	24652 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1051e:	210f      	movs	r1, #15
   10520:	e724      	b.n	1036c <smp_pairing_random+0xdc>
		if (bt_rand(smp->prnd, 16)) {
   10522:	2110      	movs	r1, #16
   10524:	f106 00e7 	add.w	r0, r6, #231	; 0xe7
   10528:	f003 fbb2 	bl	13c90 <bt_rand>
   1052c:	2800      	cmp	r0, #0
   1052e:	f43f af3f 	beq.w	103b0 <smp_pairing_random+0x120>
   10532:	e6d5      	b.n	102e0 <smp_pairing_random+0x50>
		if (bt_rand(smp->prnd, 16)) {
   10534:	2110      	movs	r1, #16
   10536:	f106 00e7 	add.w	r0, r6, #231	; 0xe7
   1053a:	f003 fba9 	bl	13c90 <bt_rand>
   1053e:	4604      	mov	r4, r0
   10540:	2800      	cmp	r0, #0
   10542:	f47f aecd 	bne.w	102e0 <smp_pairing_random+0x50>
		if (bt_auth && bt_auth->oob_data_request) {
   10546:	4d11      	ldr	r5, [pc, #68]	; (1058c <smp_pairing_random+0x2fc>)
   10548:	682b      	ldr	r3, [r5, #0]
   1054a:	b1a3      	cbz	r3, 10576 <smp_pairing_random+0x2e6>
   1054c:	68db      	ldr	r3, [r3, #12]
   1054e:	b193      	cbz	r3, 10576 <smp_pairing_random+0x2e6>
			struct bt_conn_oob_info info = {
   10550:	4b0f      	ldr	r3, [pc, #60]	; (10590 <smp_pairing_random+0x300>)
			le_sc_oob_config_set(smp, &info);
   10552:	f10d 0121 	add.w	r1, sp, #33	; 0x21
			struct bt_conn_oob_info info = {
   10556:	881b      	ldrh	r3, [r3, #0]
   10558:	f8ad 3020 	strh.w	r3, [sp, #32]
			le_sc_oob_config_set(smp, &info);
   1055c:	4630      	mov	r0, r6
   1055e:	f014 f906 	bl	2476e <le_sc_oob_config_set.isra.0>
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   10562:	210b      	movs	r1, #11
			smp->oobd_remote = NULL;
   10564:	e9c6 4468 	strd	r4, r4, [r6, #416]	; 0x1a0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   10568:	4638      	mov	r0, r7
   1056a:	f014 f872 	bl	24652 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1056e:	682b      	ldr	r3, [r5, #0]
   10570:	a908      	add	r1, sp, #32
   10572:	68db      	ldr	r3, [r3, #12]
   10574:	e757      	b.n	10426 <smp_pairing_random+0x196>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   10576:	2402      	movs	r4, #2
   10578:	e71a      	b.n	103b0 <smp_pairing_random+0x120>
   1057a:	bf00      	nop
   1057c:	00026544 	.word	0x00026544
   10580:	00026654 	.word	0x00026654
   10584:	0002a5ce 	.word	0x0002a5ce
   10588:	20001a6c 	.word	0x20001a6c
   1058c:	2000190c 	.word	0x2000190c
   10590:	000267a8 	.word	0x000267a8

00010594 <bt_smp_update_keys>:
{
   10594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10596:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   10598:	f7fe fd5a 	bl	f050 <smp_chan_get>
	if (!smp) {
   1059c:	4605      	mov	r5, r0
   1059e:	2800      	cmp	r0, #0
   105a0:	f000 8081 	beq.w	106a6 <bt_smp_update_keys+0x112>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   105a4:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
   105a8:	2103      	movs	r1, #3
   105aa:	4630      	mov	r0, r6
   105ac:	f014 f85f 	bl	2466e <atomic_test_bit>
   105b0:	2800      	cmp	r0, #0
   105b2:	d078      	beq.n	106a6 <bt_smp_update_keys+0x112>
	if (conn->le.keys) {
   105b4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   105b8:	b108      	cbz	r0, 105be <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
   105ba:	f014 fea0 	bl	252fe <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   105be:	f104 0788 	add.w	r7, r4, #136	; 0x88
   105c2:	7a20      	ldrb	r0, [r4, #8]
   105c4:	4639      	mov	r1, r7
   105c6:	f000 f88b 	bl	106e0 <bt_keys_get_addr>
   105ca:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   105ce:	b9b0      	cbnz	r0, 105fe <bt_smp_update_keys+0x6a>
   105d0:	4a35      	ldr	r2, [pc, #212]	; (106a8 <bt_smp_update_keys+0x114>)
   105d2:	4c36      	ldr	r4, [pc, #216]	; (106ac <bt_smp_update_keys+0x118>)
		BT_ERR("Unable to get keys for %s",
   105d4:	4638      	mov	r0, r7
   105d6:	1aa4      	subs	r4, r4, r2
   105d8:	f7f6 fde0 	bl	719c <bt_addr_le_str_real>
   105dc:	f7f5 f84a 	bl	5674 <log_strdup>
   105e0:	08e4      	lsrs	r4, r4, #3
   105e2:	01a4      	lsls	r4, r4, #6
   105e4:	f044 0401 	orr.w	r4, r4, #1
   105e8:	4601      	mov	r1, r0
   105ea:	4622      	mov	r2, r4
   105ec:	4830      	ldr	r0, [pc, #192]	; (106b0 <bt_smp_update_keys+0x11c>)
   105ee:	f010 faf4 	bl	20bda <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   105f2:	4628      	mov	r0, r5
   105f4:	2108      	movs	r1, #8
}
   105f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   105fa:	f014 bb98 	b.w	24d2e <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   105fe:	210d      	movs	r1, #13
   10600:	4630      	mov	r0, r6
   10602:	f014 f834 	bl	2466e <atomic_test_bit>
   10606:	b128      	cbz	r0, 10614 <bt_smp_update_keys+0x80>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   10608:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1060c:	7b53      	ldrb	r3, [r2, #13]
   1060e:	f043 0302 	orr.w	r3, r3, #2
   10612:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   10614:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   10618:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1061c:	2a03      	cmp	r2, #3
   1061e:	7b4b      	ldrb	r3, [r1, #13]
   10620:	d838      	bhi.n	10694 <bt_smp_update_keys+0x100>
   10622:	b3d2      	cbz	r2, 1069a <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   10624:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   10628:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1062a:	f895 30d4 	ldrb.w	r3, [r5, #212]	; 0xd4
   1062e:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
   10632:	4293      	cmp	r3, r2
   10634:	bf28      	it	cs
   10636:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   10638:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1063a:	4630      	mov	r0, r6
   1063c:	2105      	movs	r1, #5
   1063e:	f014 f816 	bl	2466e <atomic_test_bit>
   10642:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   10646:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   10648:	b350      	cbz	r0, 106a0 <bt_smp_update_keys+0x10c>
		conn->le.keys->flags |= BT_KEYS_SC;
   1064a:	f042 0210 	orr.w	r2, r2, #16
   1064e:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   10650:	210c      	movs	r1, #12
   10652:	4630      	mov	r0, r6
   10654:	f014 f80b 	bl	2466e <atomic_test_bit>
   10658:	b328      	cbz	r0, 106a6 <bt_smp_update_keys+0x112>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1065a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1065e:	2120      	movs	r1, #32
   10660:	f014 fe49 	bl	252f6 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   10664:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   10668:	f205 1107 	addw	r1, r5, #263	; 0x107
   1066c:	2210      	movs	r2, #16
   1066e:	301a      	adds	r0, #26
   10670:	f012 f856 	bl	22720 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   10674:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   10678:	2208      	movs	r2, #8
   1067a:	2100      	movs	r1, #0
   1067c:	3010      	adds	r0, #16
   1067e:	f012 f87a 	bl	22776 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   10682:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   10686:	2202      	movs	r2, #2
}
   10688:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1068c:	2100      	movs	r1, #0
   1068e:	3018      	adds	r0, #24
   10690:	f012 b871 	b.w	22776 <memset>
	switch (smp->method) {
   10694:	3a05      	subs	r2, #5
   10696:	2a01      	cmp	r2, #1
   10698:	d9c4      	bls.n	10624 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1069a:	f023 0301 	bic.w	r3, r3, #1
   1069e:	e7c3      	b.n	10628 <bt_smp_update_keys+0x94>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   106a0:	f022 0210 	bic.w	r2, r2, #16
   106a4:	735a      	strb	r2, [r3, #13]
}
   106a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   106a8:	00026544 	.word	0x00026544
   106ac:	00026654 	.word	0x00026654
   106b0:	0002a38b 	.word	0x0002a38b

000106b4 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   106b4:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   106b6:	4b07      	ldr	r3, [pc, #28]	; (106d4 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   106b8:	4807      	ldr	r0, [pc, #28]	; (106d8 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   106ba:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   106be:	f003 0306 	and.w	r3, r3, #6
   106c2:	1f9a      	subs	r2, r3, #6
   106c4:	4253      	negs	r3, r2
   106c6:	4153      	adcs	r3, r2
   106c8:	4a04      	ldr	r2, [pc, #16]	; (106dc <bt_smp_init+0x28>)
   106ca:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   106cc:	f7f9 fb7e 	bl	9dcc <bt_pub_key_gen>
	}

	return smp_self_test();
}
   106d0:	2000      	movs	r0, #0
   106d2:	bd08      	pop	{r3, pc}
   106d4:	20000000 	.word	0x20000000
   106d8:	20000264 	.word	0x20000264
   106dc:	20005387 	.word	0x20005387

000106e0 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   106e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   106e2:	4c11      	ldr	r4, [pc, #68]	; (10728 <bt_keys_get_addr+0x48>)
   106e4:	7823      	ldrb	r3, [r4, #0]
   106e6:	4283      	cmp	r3, r0
{
   106e8:	4605      	mov	r5, r0
   106ea:	460e      	mov	r6, r1
   106ec:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   106ee:	d00b      	beq.n	10708 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   106f0:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   106f2:	480e      	ldr	r0, [pc, #56]	; (1072c <bt_keys_get_addr+0x4c>)
   106f4:	9400      	str	r4, [sp, #0]
   106f6:	2207      	movs	r2, #7
   106f8:	4669      	mov	r1, sp
   106fa:	f8cd 4003 	str.w	r4, [sp, #3]
   106fe:	f011 ffff 	bl	22700 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   10702:	b140      	cbz	r0, 10716 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   10704:	4620      	mov	r0, r4
   10706:	e00d      	b.n	10724 <bt_keys_get_addr+0x44>
   10708:	2207      	movs	r2, #7
   1070a:	1c60      	adds	r0, r4, #1
   1070c:	f011 fff8 	bl	22700 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10710:	2800      	cmp	r0, #0
   10712:	d1ed      	bne.n	106f0 <bt_keys_get_addr+0x10>
   10714:	e7f6      	b.n	10704 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
   10716:	4805      	ldr	r0, [pc, #20]	; (1072c <bt_keys_get_addr+0x4c>)
		keys->id = id;
   10718:	703d      	strb	r5, [r7, #0]
   1071a:	2207      	movs	r2, #7
   1071c:	4631      	mov	r1, r6
   1071e:	f011 ffff 	bl	22720 <memcpy>
		return keys;
   10722:	4801      	ldr	r0, [pc, #4]	; (10728 <bt_keys_get_addr+0x48>)
}
   10724:	b003      	add	sp, #12
   10726:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10728:	20001a70 	.word	0x20001a70
   1072c:	20001a71 	.word	0x20001a71

00010730 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   10730:	460b      	mov	r3, r1
   10732:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   10734:	4a04      	ldr	r2, [pc, #16]	; (10748 <bt_keys_foreach+0x18>)
{
   10736:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   10738:	89d4      	ldrh	r4, [r2, #14]
   1073a:	4204      	tst	r4, r0
   1073c:	d002      	beq.n	10744 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1073e:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   10740:	4610      	mov	r0, r2
   10742:	4718      	bx	r3
}
   10744:	bc10      	pop	{r4}
   10746:	4770      	bx	lr
   10748:	20001a70 	.word	0x20001a70

0001074c <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
   1074c:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1074e:	4c09      	ldr	r4, [pc, #36]	; (10774 <bt_keys_find+0x28>)
{
   10750:	460b      	mov	r3, r1
   10752:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   10754:	89e2      	ldrh	r2, [r4, #14]
   10756:	4202      	tst	r2, r0
   10758:	d007      	beq.n	1076a <bt_keys_find+0x1e>
   1075a:	7822      	ldrb	r2, [r4, #0]
   1075c:	429a      	cmp	r2, r3
   1075e:	d104      	bne.n	1076a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   10760:	2207      	movs	r2, #7
   10762:	1c60      	adds	r0, r4, #1
   10764:	f011 ffcc 	bl	22700 <memcmp>
   10768:	b108      	cbz	r0, 1076e <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   1076a:	2000      	movs	r0, #0
}
   1076c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1076e:	4620      	mov	r0, r4
   10770:	e7fc      	b.n	1076c <bt_keys_find+0x20>
   10772:	bf00      	nop
   10774:	20001a70 	.word	0x20001a70

00010778 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   10778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1077a:	780b      	ldrb	r3, [r1, #0]
   1077c:	2b01      	cmp	r3, #1
   1077e:	4607      	mov	r7, r0
   10780:	460c      	mov	r4, r1
   10782:	d001      	beq.n	10788 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   10784:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   10786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   10788:	798b      	ldrb	r3, [r1, #6]
   1078a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1078e:	2b40      	cmp	r3, #64	; 0x40
   10790:	d1f8      	bne.n	10784 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   10792:	4d13      	ldr	r5, [pc, #76]	; (107e0 <bt_keys_find_irk+0x68>)
   10794:	89eb      	ldrh	r3, [r5, #14]
   10796:	f013 0f02 	tst.w	r3, #2
   1079a:	462e      	mov	r6, r5
   1079c:	d0f2      	beq.n	10784 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1079e:	7833      	ldrb	r3, [r6, #0]
   107a0:	42bb      	cmp	r3, r7
   107a2:	d10b      	bne.n	107bc <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   107a4:	2206      	movs	r2, #6
   107a6:	f106 013a 	add.w	r1, r6, #58	; 0x3a
   107aa:	1c60      	adds	r0, r4, #1
   107ac:	f011 ffa8 	bl	22700 <memcmp>
   107b0:	b908      	cbnz	r0, 107b6 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
   107b2:	4628      	mov	r0, r5
   107b4:	e7e7      	b.n	10786 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   107b6:	89f3      	ldrh	r3, [r6, #14]
   107b8:	079b      	lsls	r3, r3, #30
   107ba:	d5e3      	bpl.n	10784 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   107bc:	7833      	ldrb	r3, [r6, #0]
   107be:	42bb      	cmp	r3, r7
   107c0:	d1e0      	bne.n	10784 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   107c2:	3401      	adds	r4, #1
   107c4:	4807      	ldr	r0, [pc, #28]	; (107e4 <bt_keys_find_irk+0x6c>)
   107c6:	4621      	mov	r1, r4
   107c8:	f012 f81a 	bl	22800 <bt_rpa_irk_matches>
   107cc:	2800      	cmp	r0, #0
   107ce:	d0d9      	beq.n	10784 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   107d0:	4805      	ldr	r0, [pc, #20]	; (107e8 <bt_keys_find_irk+0x70>)
   107d2:	2206      	movs	r2, #6
   107d4:	4621      	mov	r1, r4
   107d6:	f011 ffa3 	bl	22720 <memcpy>
			return &key_pool[i];
   107da:	4801      	ldr	r0, [pc, #4]	; (107e0 <bt_keys_find_irk+0x68>)
}
   107dc:	e7d3      	b.n	10786 <bt_keys_find_irk+0xe>
   107de:	bf00      	nop
   107e0:	20001a70 	.word	0x20001a70
   107e4:	20001a9a 	.word	0x20001a9a
   107e8:	20001aaa 	.word	0x20001aaa

000107ec <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   107ec:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   107ee:	4c06      	ldr	r4, [pc, #24]	; (10808 <bt_keys_find_addr+0x1c>)
   107f0:	7823      	ldrb	r3, [r4, #0]
   107f2:	4283      	cmp	r3, r0
   107f4:	d104      	bne.n	10800 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   107f6:	2207      	movs	r2, #7
   107f8:	1c60      	adds	r0, r4, #1
   107fa:	f011 ff81 	bl	22700 <memcmp>
   107fe:	b108      	cbz	r0, 10804 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   10800:	2000      	movs	r0, #0
}
   10802:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   10804:	4620      	mov	r0, r4
   10806:	e7fc      	b.n	10802 <bt_keys_find_addr+0x16>
   10808:	20001a70 	.word	0x20001a70

0001080c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   1080c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10810:	4614      	mov	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   10812:	1dc2      	adds	r2, r0, #7
   10814:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   10818:	1e67      	subs	r7, r4, #1
   1081a:	b2bf      	uxth	r7, r7
	*mem_head = mem_pool;
   1081c:	6018      	str	r0, [r3, #0]
{
   1081e:	b082      	sub	sp, #8
   10820:	4605      	mov	r5, r0
   10822:	460e      	mov	r6, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   10824:	fb01 0007 	mla	r0, r1, r7, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   10828:	8014      	strh	r4, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1082a:	2100      	movs	r1, #0
   1082c:	2204      	movs	r2, #4
   1082e:	f011 ffa2 	bl	22776 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   10832:	b1b7      	cbz	r7, 10862 <mem_init+0x56>
   10834:	3c02      	subs	r4, #2
   10836:	b2a4      	uxth	r4, r4
   10838:	fb04 6306 	mla	r3, r4, r6, r6
   1083c:	fb04 f706 	mul.w	r7, r4, r6
   10840:	441d      	add	r5, r3
   10842:	1aff      	subs	r7, r7, r3
   10844:	f64f 78ff 	movw	r8, #65535	; 0xffff
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   10848:	2204      	movs	r2, #4
	while (mem_count--) {
   1084a:	3c01      	subs	r4, #1
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   1084c:	19e8      	adds	r0, r5, r7
   1084e:	eb0d 0102 	add.w	r1, sp, r2
	while (mem_count--) {
   10852:	b2a4      	uxth	r4, r4
		next = (uint32_t)((uint8_t *) mem_pool +
   10854:	9501      	str	r5, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   10856:	f011 ff63 	bl	22720 <memcpy>
	while (mem_count--) {
   1085a:	4544      	cmp	r4, r8
   1085c:	eba5 0506 	sub.w	r5, r5, r6
   10860:	d1f2      	bne.n	10848 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   10862:	b002      	add	sp, #8
   10864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010868 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   10868:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   1086a:	6805      	ldr	r5, [r0, #0]
{
   1086c:	b082      	sub	sp, #8
	if (*mem_head) {
   1086e:	b195      	cbz	r5, 10896 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   10870:	1deb      	adds	r3, r5, #7
   10872:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   10876:	2204      	movs	r2, #4
   10878:	4604      	mov	r4, r0
   1087a:	4629      	mov	r1, r5
   1087c:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   10880:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   10882:	f011 ff4d 	bl	22720 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   10886:	9b01      	ldr	r3, [sp, #4]
   10888:	b123      	cbz	r3, 10894 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1088a:	1dda      	adds	r2, r3, #7
   1088c:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   10890:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   10892:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   10894:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   10896:	4628      	mov	r0, r5
   10898:	b002      	add	sp, #8
   1089a:	bd70      	pop	{r4, r5, r6, pc}

0001089c <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   1089c:	680b      	ldr	r3, [r1, #0]
{
   1089e:	b570      	push	{r4, r5, r6, lr}
   108a0:	460c      	mov	r4, r1
   108a2:	4605      	mov	r5, r0
	if (*mem_head) {
   108a4:	b183      	cbz	r3, 108c8 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   108a6:	3307      	adds	r3, #7
   108a8:	f023 0303 	bic.w	r3, r3, #3
   108ac:	881e      	ldrh	r6, [r3, #0]
   108ae:	3601      	adds	r6, #1
   108b0:	b2b6      	uxth	r6, r6
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   108b2:	2204      	movs	r2, #4
   108b4:	4621      	mov	r1, r4
   108b6:	4628      	mov	r0, r5
   108b8:	f011 ff32 	bl	22720 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   108bc:	1deb      	adds	r3, r5, #7
   108be:	f023 0303 	bic.w	r3, r3, #3
   108c2:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   108c4:	6025      	str	r5, [r4, #0]
}
   108c6:	bd70      	pop	{r4, r5, r6, pc}
   108c8:	2601      	movs	r6, #1
   108ca:	e7f2      	b.n	108b2 <mem_release+0x16>

000108cc <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   108cc:	fb02 0001 	mla	r0, r2, r1, r0
   108d0:	4770      	bx	lr
   108d2:	bf00      	nop

000108d4 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   108d4:	1a40      	subs	r0, r0, r1
   108d6:	b280      	uxth	r0, r0
}
   108d8:	fbb0 f0f2 	udiv	r0, r0, r2
   108dc:	4770      	bx	lr
   108de:	bf00      	nop

000108e0 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   108e0:	1e53      	subs	r3, r2, #1
	src += len;
   108e2:	4411      	add	r1, r2
	while (len--) {
   108e4:	b29b      	uxth	r3, r3
   108e6:	b142      	cbz	r2, 108fa <mem_rcopy+0x1a>
   108e8:	43db      	mvns	r3, r3
   108ea:	18ca      	adds	r2, r1, r3
   108ec:	3801      	subs	r0, #1
		*dst++ = *--src;
   108ee:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   108f2:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   108f6:	4291      	cmp	r1, r2
   108f8:	d1f9      	bne.n	108ee <mem_rcopy+0xe>
	}
}
   108fa:	4770      	bx	lr

000108fc <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   108fc:	4401      	add	r1, r0
   108fe:	e002      	b.n	10906 <mem_nz+0xa>
		if (*src++) {
   10900:	f810 3b01 	ldrb.w	r3, [r0], #1
   10904:	b91b      	cbnz	r3, 1090e <mem_nz+0x12>
	while (len--) {
   10906:	4288      	cmp	r0, r1
   10908:	d1fa      	bne.n	10900 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   1090a:	2000      	movs	r0, #0
   1090c:	4770      	bx	lr
			return 1;
   1090e:	2001      	movs	r0, #1
}
   10910:	4770      	bx	lr
   10912:	bf00      	nop

00010914 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   10914:	6010      	str	r0, [r2, #0]
   10916:	6008      	str	r0, [r1, #0]

	return link;
}
   10918:	4770      	bx	lr
   1091a:	bf00      	nop

0001091c <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   1091c:	680a      	ldr	r2, [r1, #0]
{
   1091e:	4603      	mov	r3, r0
	if (*head != *tail) {
   10920:	6800      	ldr	r0, [r0, #0]
   10922:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   10924:	bf05      	ittet	eq
   10926:	2200      	moveq	r2, #0
   10928:	600a      	streq	r2, [r1, #0]
		return NULL;
   1092a:	2000      	movne	r0, #0
	*head = *tail = NULL;
   1092c:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   1092e:	4770      	bx	lr

00010930 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   10930:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   10932:	6814      	ldr	r4, [r2, #0]
   10934:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   10936:	6814      	ldr	r4, [r2, #0]
   10938:	6061      	str	r1, [r4, #4]
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;

	return link;
}
   1093a:	bc10      	pop	{r4}
	*tail = link;
   1093c:	6010      	str	r0, [r2, #0]
}
   1093e:	4770      	bx	lr

00010940 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   10940:	4288      	cmp	r0, r1
   10942:	d003      	beq.n	1094c <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   10944:	b11a      	cbz	r2, 1094e <memq_peek+0xe>
		*mem = head->mem;
   10946:	6843      	ldr	r3, [r0, #4]
   10948:	6013      	str	r3, [r2, #0]
   1094a:	4770      	bx	lr
		return NULL;
   1094c:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   1094e:	4770      	bx	lr

00010950 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   10950:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   10952:	4283      	cmp	r3, r0
   10954:	d009      	beq.n	1096a <memq_dequeue+0x1a>
	if (mem) {
   10956:	b12a      	cbz	r2, 10964 <memq_dequeue+0x14>
		*mem = head->mem;
   10958:	6858      	ldr	r0, [r3, #4]
   1095a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   1095c:	681a      	ldr	r2, [r3, #0]
   1095e:	600a      	str	r2, [r1, #0]

	return old_head;
}
   10960:	4618      	mov	r0, r3
   10962:	4770      	bx	lr
	if (old_head == NULL) {
   10964:	2b00      	cmp	r3, #0
   10966:	d1f9      	bne.n	1095c <memq_dequeue+0xc>
   10968:	e7fa      	b.n	10960 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   1096a:	2300      	movs	r3, #0
   1096c:	e7f8      	b.n	10960 <memq_dequeue+0x10>
   1096e:	bf00      	nop

00010970 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   10970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10974:	f8df 8034 	ldr.w	r8, [pc, #52]	; 109ac <mayfly_init+0x3c>
   10978:	4e0b      	ldr	r6, [pc, #44]	; (109a8 <mayfly_init+0x38>)
   1097a:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   1097c:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   10980:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   10982:	1d22      	adds	r2, r4, #4
   10984:	4621      	mov	r1, r4
   10986:	4628      	mov	r0, r5
   10988:	3c0c      	subs	r4, #12
   1098a:	f7ff ffc3 	bl	10914 <memq_init>
		while (caller_id--) {
   1098e:	42b4      	cmp	r4, r6
   10990:	f1a5 0508 	sub.w	r5, r5, #8
   10994:	d1f5      	bne.n	10982 <mayfly_init+0x12>
	while (callee_id--) {
   10996:	3f04      	subs	r7, #4
   10998:	1d3b      	adds	r3, r7, #4
   1099a:	f1a8 0820 	sub.w	r8, r8, #32
   1099e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   109a2:	d1eb      	bne.n	1097c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   109a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   109a8:	20001bd4 	.word	0x20001bd4
   109ac:	20001b44 	.word	0x20001b44

000109b0 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   109b0:	b430      	push	{r4, r5}
   109b2:	4603      	mov	r3, r0
   109b4:	460c      	mov	r4, r1
	if (enable) {
   109b6:	b19a      	cbz	r2, 109e0 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   109b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   109bc:	0108      	lsls	r0, r1, #4
   109be:	4d14      	ldr	r5, [pc, #80]	; (10a10 <mayfly_enable+0x60>)
   109c0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   109c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   109c8:	4429      	add	r1, r5
   109ca:	7a48      	ldrb	r0, [r1, #9]
   109cc:	7a0d      	ldrb	r5, [r1, #8]
   109ce:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   109d0:	bf04      	itt	eq
   109d2:	3001      	addeq	r0, #1
   109d4:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   109d6:	4621      	mov	r1, r4
   109d8:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   109da:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
   109dc:	f00d b84a 	b.w	1da74 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   109e0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   109e4:	4d0a      	ldr	r5, [pc, #40]	; (10a10 <mayfly_enable+0x60>)
   109e6:	0112      	lsls	r2, r2, #4
   109e8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   109ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   109f0:	442b      	add	r3, r5
   109f2:	7a9d      	ldrb	r5, [r3, #10]
   109f4:	7ada      	ldrb	r2, [r3, #11]
   109f6:	42aa      	cmp	r2, r5
   109f8:	d001      	beq.n	109fe <mayfly_enable+0x4e>
}
   109fa:	bc30      	pop	{r4, r5}
   109fc:	4770      	bx	lr
			mfp[callee_id] = 1U;
   109fe:	4d05      	ldr	r5, [pc, #20]	; (10a14 <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
   10a00:	3201      	adds	r2, #1
   10a02:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   10a04:	2301      	movs	r3, #1
   10a06:	546b      	strb	r3, [r5, r1]
}
   10a08:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
   10a0a:	f00d b891 	b.w	1db30 <mayfly_pend>
   10a0e:	bf00      	nop
   10a10:	20001b50 	.word	0x20001b50
   10a14:	20001b4c 	.word	0x20001b4c

00010a18 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   10a18:	b570      	push	{r4, r5, r6, lr}
   10a1a:	461c      	mov	r4, r3
   10a1c:	4606      	mov	r6, r0
   10a1e:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   10a20:	b322      	cbz	r2, 10a6c <mayfly_enqueue+0x54>
   10a22:	7863      	ldrb	r3, [r4, #1]

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   10a24:	7822      	ldrb	r2, [r4, #0]
   10a26:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   10a28:	f012 0203 	ands.w	r2, r2, #3
   10a2c:	d005      	beq.n	10a3a <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
   10a2e:	2a01      	cmp	r2, #1
   10a30:	d040      	beq.n	10ab4 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
   10a32:	3301      	adds	r3, #1
   10a34:	b2db      	uxtb	r3, r3
   10a36:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   10a38:	e00f      	b.n	10a5a <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   10a3a:	2230      	movs	r2, #48	; 0x30
   10a3c:	2104      	movs	r1, #4
   10a3e:	fb12 1105 	smlabb	r1, r2, r5, r1
   10a42:	220c      	movs	r2, #12
   10a44:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
   10a48:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   10a4a:	491b      	ldr	r1, [pc, #108]	; (10ab8 <mayfly_enqueue+0xa0>)
   10a4c:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
   10a4e:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   10a50:	440a      	add	r2, r1
	m->_req = ack + 1;
   10a52:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   10a54:	4621      	mov	r1, r4
   10a56:	f7ff ff6b 	bl	10930 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   10a5a:	4b18      	ldr	r3, [pc, #96]	; (10abc <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   10a5c:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   10a5e:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
   10a60:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
   10a62:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   10a64:	f00d f864 	bl	1db30 <mayfly_pend>

	return 0;
   10a68:	2000      	movs	r0, #0
}
   10a6a:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   10a6c:	f00d f842 	bl	1daf4 <mayfly_prio_is_equal>
   10a70:	2800      	cmp	r0, #0
   10a72:	d0d6      	beq.n	10a22 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   10a74:	4629      	mov	r1, r5
   10a76:	4630      	mov	r0, r6
   10a78:	f00d f81c 	bl	1dab4 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   10a7c:	2800      	cmp	r0, #0
   10a7e:	d0d0      	beq.n	10a22 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   10a80:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   10a84:	0111      	lsls	r1, r2, #4
   10a86:	480c      	ldr	r0, [pc, #48]	; (10ab8 <mayfly_enqueue+0xa0>)
   10a88:	7863      	ldrb	r3, [r4, #1]
   10a8a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   10a8e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   10a92:	4402      	add	r2, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
   10a94:	7a91      	ldrb	r1, [r2, #10]
   10a96:	7ad2      	ldrb	r2, [r2, #11]
   10a98:	4291      	cmp	r1, r2
   10a9a:	d1c3      	bne.n	10a24 <mayfly_enqueue+0xc>
	state = (m->_req - ack) & 0x03;
   10a9c:	7822      	ldrb	r2, [r4, #0]
   10a9e:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   10aa0:	0792      	lsls	r2, r2, #30
   10aa2:	d002      	beq.n	10aaa <mayfly_enqueue+0x92>
		m->_req = ack + 2;
   10aa4:	3302      	adds	r3, #2
   10aa6:	b2db      	uxtb	r3, r3
   10aa8:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   10aaa:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   10aae:	4798      	blx	r3
		return 0;
   10ab0:	2000      	movs	r0, #0
}
   10ab2:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   10ab4:	4610      	mov	r0, r2
}
   10ab6:	bd70      	pop	{r4, r5, r6, pc}
   10ab8:	20001b50 	.word	0x20001b50
   10abc:	20001b4c 	.word	0x20001b4c

00010ac0 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   10ac0:	494e      	ldr	r1, [pc, #312]	; (10bfc <mayfly_run+0x13c>)
   10ac2:	5c0b      	ldrb	r3, [r1, r0]
   10ac4:	2b00      	cmp	r3, #0
   10ac6:	f000 8098 	beq.w	10bfa <mayfly_run+0x13a>
{
   10aca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10ace:	4b4c      	ldr	r3, [pc, #304]	; (10c00 <mayfly_run+0x140>)
   10ad0:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
   10ad4:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
   10ad6:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10ad8:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
   10adc:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   10ade:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10ae2:	f10b 0104 	add.w	r1, fp, #4
	uint8_t enable = 0U;
   10ae6:	9203      	str	r2, [sp, #12]
   10ae8:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	uint8_t disable = 0U;
   10aec:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
   10aee:	f04f 0903 	mov.w	r9, #3
   10af2:	4688      	mov	r8, r1
   10af4:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
   10af6:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   10af8:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   10afc:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   10afe:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   10b00:	f7ff ff1e 	bl	10940 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   10b04:	f107 0624 	add.w	r6, r7, #36	; 0x24
   10b08:	4683      	mov	fp, r0
   10b0a:	2800      	cmp	r0, #0
   10b0c:	d034      	beq.n	10b78 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   10b0e:	9c05      	ldr	r4, [sp, #20]
   10b10:	7825      	ldrb	r5, [r4, #0]
   10b12:	7863      	ldrb	r3, [r4, #1]
   10b14:	1aed      	subs	r5, r5, r3
   10b16:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   10b1a:	2d01      	cmp	r5, #1
   10b1c:	d106      	bne.n	10b2c <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   10b1e:	3b01      	subs	r3, #1
   10b20:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   10b22:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   10b26:	4798      	blx	r3
   10b28:	9c05      	ldr	r4, [sp, #20]
   10b2a:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   10b2c:	f894 c000 	ldrb.w	ip, [r4]
   10b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
   10b32:	ebac 0303 	sub.w	r3, ip, r3
   10b36:	f003 0303 	and.w	r3, r3, #3
   10b3a:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   10b3c:	f04f 0200 	mov.w	r2, #0
   10b40:	4631      	mov	r1, r6
	req = m->_req;
   10b42:	fa5f fa8c 	uxtb.w	sl, ip
	if (((req - m->_ack) & 0x03) != 1U) {
   10b46:	d00d      	beq.n	10b64 <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
   10b48:	f7ff ff02 	bl	10950 <memq_dequeue>
		ack = m->_ack;
   10b4c:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   10b4e:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   10b50:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   10b54:	1a9b      	subs	r3, r3, r2
   10b56:	f003 0303 	and.w	r3, r3, #3
   10b5a:	2b01      	cmp	r3, #1
		m->_ack = req;
   10b5c:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   10b60:	d044      	beq.n	10bec <mayfly_run+0x12c>
   10b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   10b64:	4601      	mov	r1, r0
   10b66:	aa05      	add	r2, sp, #20
   10b68:	6a78      	ldr	r0, [r7, #36]	; 0x24
   10b6a:	f7ff fee9 	bl	10940 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   10b6e:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   10b70:	4683      	mov	fp, r0
			if (state == 1U) {
   10b72:	d029      	beq.n	10bc8 <mayfly_run+0x108>
		while (link) {
   10b74:	2800      	cmp	r0, #0
   10b76:	d1ca      	bne.n	10b0e <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   10b78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   10b7c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   10b80:	429a      	cmp	r2, r3
   10b82:	d003      	beq.n	10b8c <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   10b84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   10b88:	2301      	movs	r3, #1
   10b8a:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   10b8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   10b90:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   10b94:	429a      	cmp	r2, r3
   10b96:	d003      	beq.n	10ba0 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   10b98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   10b9c:	2301      	movs	r3, #1
   10b9e:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   10ba0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   10ba4:	fa5f f989 	uxtb.w	r9, r9
   10ba8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   10bac:	f1a7 070c 	sub.w	r7, r7, #12
   10bb0:	d1a1      	bne.n	10af6 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   10bb2:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   10bb6:	b1b3      	cbz	r3, 10be6 <mayfly_run+0x126>
   10bb8:	9b03      	ldr	r3, [sp, #12]
   10bba:	b9a3      	cbnz	r3, 10be6 <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
   10bbc:	461a      	mov	r2, r3
   10bbe:	4651      	mov	r1, sl
   10bc0:	4650      	mov	r0, sl
   10bc2:	f00c ff57 	bl	1da74 <mayfly_enable_cb>
   10bc6:	e00e      	b.n	10be6 <mayfly_run+0x126>
				if (caller_id || link) {
   10bc8:	f1b9 0f00 	cmp.w	r9, #0
   10bcc:	d101      	bne.n	10bd2 <mayfly_run+0x112>
   10bce:	2800      	cmp	r0, #0
   10bd0:	d0d2      	beq.n	10b78 <mayfly_run+0xb8>
   10bd2:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
   10bd6:	4a09      	ldr	r2, [pc, #36]	; (10bfc <mayfly_run+0x13c>)
   10bd8:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
   10bda:	4651      	mov	r1, sl
   10bdc:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
   10bde:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   10be2:	f00c ffa5 	bl	1db30 <mayfly_pend>
	}
}
   10be6:	b007      	add	sp, #28
   10be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
   10bec:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10bee:	4621      	mov	r1, r4
   10bf0:	4658      	mov	r0, fp
   10bf2:	4642      	mov	r2, r8
   10bf4:	f7ff fe9c 	bl	10930 <memq_enqueue>
   10bf8:	e7b3      	b.n	10b62 <mayfly_run+0xa2>
   10bfa:	4770      	bx	lr
   10bfc:	20001b4c 	.word	0x20001b4c
   10c00:	20001b50 	.word	0x20001b50

00010c04 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   10c04:	b1a1      	cbz	r1, 10c30 <util_ones_count_get+0x2c>
   10c06:	1e4b      	subs	r3, r1, #1
   10c08:	b2db      	uxtb	r3, r3
{
   10c0a:	b410      	push	{r4}
   10c0c:	1e41      	subs	r1, r0, #1
   10c0e:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
   10c10:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   10c12:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   10c16:	b13b      	cbz	r3, 10c28 <util_ones_count_get+0x24>
			bite &= (bite - 1);
   10c18:	b25b      	sxtb	r3, r3
   10c1a:	1e5a      	subs	r2, r3, #1
   10c1c:	4013      	ands	r3, r2
			one_count++;
   10c1e:	3001      	adds	r0, #1
		while (bite) {
   10c20:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
   10c24:	b2c0      	uxtb	r0, r0
		while (bite) {
   10c26:	d1f7      	bne.n	10c18 <util_ones_count_get+0x14>
	while (octets_len--) {
   10c28:	42a1      	cmp	r1, r4
   10c2a:	d1f2      	bne.n	10c12 <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
   10c2c:	bc10      	pop	{r4}
   10c2e:	4770      	bx	lr
	uint8_t one_count = 0U;
   10c30:	4608      	mov	r0, r1
}
   10c32:	4770      	bx	lr

00010c34 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
   10c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   10c38:	4dad      	ldr	r5, [pc, #692]	; (10ef0 <util_aa_le32+0x2bc>)
{
   10c3a:	b083      	sub	sp, #12
   10c3c:	4604      	mov	r4, r0
   10c3e:	2703      	movs	r7, #3
	consecutive_cnt = 1U;
   10c40:	2601      	movs	r6, #1
	lll_csrand_get(dst, sizeof(uint32_t));
   10c42:	2104      	movs	r1, #4
   10c44:	4620      	mov	r0, r4
   10c46:	f00a f9e7 	bl	1b018 <lll_csrand_get>
	return ((uint16_t)src[1] << 8) | src[0];
   10c4a:	7863      	ldrb	r3, [r4, #1]
   10c4c:	78e2      	ldrb	r2, [r4, #3]
   10c4e:	f894 c002 	ldrb.w	ip, [r4, #2]
   10c52:	7820      	ldrb	r0, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   10c54:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   10c58:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	transitions = 0U;
   10c5c:	f04f 0800 	mov.w	r8, #0
   10c60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
	ones_count_lsb8 = 0U;
   10c64:	46c3      	mov	fp, r8
	consecutive_bit = (aa >> bit_idx) & 0x01;
   10c66:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
	transitions_lsb16 = 0U;
   10c6a:	46c1      	mov	r9, r8
	consecutive_bit = (aa >> bit_idx) & 0x01;
   10c6c:	231e      	movs	r3, #30
	consecutive_cnt = 1U;
   10c6e:	f04f 0a01 	mov.w	sl, #1
   10c72:	e01a      	b.n	10caa <util_aa_le32+0x76>
			transitions++;
   10c74:	f108 0101 	add.w	r1, r8, #1
			if (bit_idx < 15) {
   10c78:	2b0e      	cmp	r3, #14
			transitions++;
   10c7a:	b2c9      	uxtb	r1, r1
			if (bit_idx < 15) {
   10c7c:	fa5f fc83 	uxtb.w	ip, r3
   10c80:	f240 808a 	bls.w	10d98 <util_aa_le32+0x164>
		if ((consecutive_cnt > 6) ||
   10c84:	b3ca      	cbz	r2, 10cfa <util_aa_le32+0xc6>
   10c86:	4694      	mov	ip, r2
   10c88:	46ce      	mov	lr, r9
		    ((consecutive_cnt < 6) &&
   10c8a:	2b1c      	cmp	r3, #28
   10c8c:	f240 811d 	bls.w	10eca <util_aa_le32+0x296>
		     (((bit_idx < 29) && (transitions < 1)) ||
   10c90:	2b1b      	cmp	r3, #27
   10c92:	f240 80f0 	bls.w	10e76 <util_aa_le32+0x242>
		if ((transitions > 24) ||
   10c96:	2919      	cmp	r1, #25
   10c98:	d039      	beq.n	10d0e <util_aa_le32+0xda>
					   (ones_count_lsb8 < 3)))) ||
   10c9a:	4688      	mov	r8, r1
   10c9c:	4692      	mov	sl, r2
		    (transitions_lsb16 > 11) ||
   10c9e:	f1be 0f0c 	cmp.w	lr, #12
					   (ones_count_lsb8 < 3)))) ||
   10ca2:	46f1      	mov	r9, lr
		    (transitions_lsb16 > 11) ||
   10ca4:	d033      	beq.n	10d0e <util_aa_le32+0xda>
	while (bit_idx--) {
   10ca6:	3b01      	subs	r3, #1
   10ca8:	d339      	bcc.n	10d1e <util_aa_le32+0xea>
		bit = (aa >> bit_idx) & 0x01;
   10caa:	fa20 f203 	lsr.w	r2, r0, r3
   10cae:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   10cb2:	4562      	cmp	r2, ip
   10cb4:	d1de      	bne.n	10c74 <util_aa_le32+0x40>
			consecutive_cnt++;
   10cb6:	f10a 0201 	add.w	r2, sl, #1
		if ((bit_idx < 8) && consecutive_bit) {
   10cba:	2b07      	cmp	r3, #7
			consecutive_cnt++;
   10cbc:	b2d2      	uxtb	r2, r2
		if ((bit_idx < 8) && consecutive_bit) {
   10cbe:	f240 80c4 	bls.w	10e4a <util_aa_le32+0x216>
		if ((consecutive_cnt > 6) ||
   10cc2:	2a06      	cmp	r2, #6
   10cc4:	d977      	bls.n	10db6 <util_aa_le32+0x182>
			if (consecutive_bit) {
   10cc6:	fa06 f203 	lsl.w	r2, r6, r3
   10cca:	f1bc 0f00 	cmp.w	ip, #0
   10cce:	d051      	beq.n	10d74 <util_aa_le32+0x140>
				aa &= ~BIT(bit_idx);
   10cd0:	ea20 0002 	bic.w	r0, r0, r2
   10cd4:	46ce      	mov	lr, r9
				consecutive_bit = 0U;
   10cd6:	f04f 0c00 	mov.w	ip, #0
				transitions++;
   10cda:	f108 0101 	add.w	r1, r8, #1
			if (bit_idx < 15) {
   10cde:	2b0e      	cmp	r3, #14
				transitions++;
   10ce0:	b2c9      	uxtb	r1, r1
				consecutive_cnt = 1U;
   10ce2:	bf88      	it	hi
   10ce4:	2201      	movhi	r2, #1
			if (bit_idx < 15) {
   10ce6:	d8d6      	bhi.n	10c96 <util_aa_le32+0x62>
				if (transitions_lsb16 !=
   10ce8:	45f1      	cmp	r9, lr
   10cea:	f000 80a1 	beq.w	10e30 <util_aa_le32+0x1fc>
		if ((transitions > 24) ||
   10cee:	2919      	cmp	r1, #25
   10cf0:	d00d      	beq.n	10d0e <util_aa_le32+0xda>
   10cf2:	4688      	mov	r8, r1
				consecutive_cnt = 1U;
   10cf4:	f04f 0a01 	mov.w	sl, #1
   10cf8:	e7d5      	b.n	10ca6 <util_aa_le32+0x72>
		if ((consecutive_cnt > 6) ||
   10cfa:	46ce      	mov	lr, r9
			consecutive_cnt = 1U;
   10cfc:	2201      	movs	r2, #1
		    (!consecutive_bit && (((bit_idx < 6) &&
   10cfe:	2b05      	cmp	r3, #5
   10d00:	d975      	bls.n	10dee <util_aa_le32+0x1ba>
					   (ones_count_lsb8 < 3)))) ||
   10d02:	2a06      	cmp	r2, #6
   10d04:	d154      	bne.n	10db0 <util_aa_le32+0x17c>
		if ((transitions > 24) ||
   10d06:	2919      	cmp	r1, #25
					   (ones_count_lsb8 < 3)))) ||
   10d08:	f04f 0c00 	mov.w	ip, #0
		if ((transitions > 24) ||
   10d0c:	d1c5      	bne.n	10c9a <util_aa_le32+0x66>
			if (consecutive_bit) {
   10d0e:	3301      	adds	r3, #1
   10d10:	fa06 f303 	lsl.w	r3, r6, r3
   10d14:	f1bc 0f00 	cmp.w	ip, #0
   10d18:	d053      	beq.n	10dc2 <util_aa_le32+0x18e>
				aa &= ~(BIT(bit_idx + 1) - 1);
   10d1a:	425b      	negs	r3, r3
   10d1c:	4018      	ands	r0, r3
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   10d1e:	ea80 0305 	eor.w	r3, r0, r5
   10d22:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
   10d24:	f10d 0c04 	add.w	ip, sp, #4
   10d28:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
   10d2c:	2200      	movs	r2, #0
		bite = *octets;
   10d2e:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
   10d32:	b13b      	cbz	r3, 10d44 <util_aa_le32+0x110>
			bite &= (bite - 1);
   10d34:	b25b      	sxtb	r3, r3
   10d36:	1e59      	subs	r1, r3, #1
   10d38:	400b      	ands	r3, r1
			one_count++;
   10d3a:	3201      	adds	r2, #1
		while (bite) {
   10d3c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
   10d40:	b2d2      	uxtb	r2, r2
		while (bite) {
   10d42:	d1f7      	bne.n	10d34 <util_aa_le32+0x100>
	while (octets_len--) {
   10d44:	45f4      	cmp	ip, lr
   10d46:	d1f2      	bne.n	10d2e <util_aa_le32+0xfa>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
   10d48:	2a01      	cmp	r2, #1
   10d4a:	d909      	bls.n	10d60 <util_aa_le32+0x12c>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   10d4c:	b283      	uxth	r3, r0
   10d4e:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   10d52:	ea4f 4210 	mov.w	r2, r0, lsr #16
   10d56:	d137      	bne.n	10dc8 <util_aa_le32+0x194>
	    !((aa & 0xFF) ^ (aa >> 24))) {
   10d58:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   10d5a:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   10d5e:	d133      	bne.n	10dc8 <util_aa_le32+0x194>
	if (!retry) {
   10d60:	3f01      	subs	r7, #1
   10d62:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   10d66:	f47f af6c 	bne.w	10c42 <util_aa_le32+0xe>
		return -EFAULT;
   10d6a:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
   10d6e:	b003      	add	sp, #12
   10d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				aa |= BIT(bit_idx);
   10d74:	4310      	orrs	r0, r2
   10d76:	4641      	mov	r1, r8
   10d78:	46ce      	mov	lr, r9
				consecutive_bit = 1U;
   10d7a:	f04f 0c01 	mov.w	ip, #1
			if (transitions != transitions_prev) {
   10d7e:	4588      	cmp	r8, r1
   10d80:	d0ab      	beq.n	10cda <util_aa_le32+0xa6>
			if (bit_idx < 15) {
   10d82:	2b0e      	cmp	r3, #14
   10d84:	d88b      	bhi.n	10c9e <util_aa_le32+0x6a>
				if (transitions_lsb16 !=
   10d86:	45ce      	cmp	lr, r9
   10d88:	d18d      	bne.n	10ca6 <util_aa_le32+0x72>
   10d8a:	4641      	mov	r1, r8
					transitions_lsb16++;
   10d8c:	f10e 0e01 	add.w	lr, lr, #1
   10d90:	fa5f fe8e 	uxtb.w	lr, lr
   10d94:	4652      	mov	r2, sl
   10d96:	e77e      	b.n	10c96 <util_aa_le32+0x62>
				transitions_lsb16++;
   10d98:	f109 0e01 	add.w	lr, r9, #1
		if ((bit_idx < 8) && consecutive_bit) {
   10d9c:	f1bc 0f07 	cmp.w	ip, #7
				transitions_lsb16++;
   10da0:	fa5f fe8e 	uxtb.w	lr, lr
		if ((bit_idx < 8) && consecutive_bit) {
   10da4:	f240 8094 	bls.w	10ed0 <util_aa_le32+0x29c>
		if ((consecutive_cnt > 6) ||
   10da8:	2a00      	cmp	r2, #0
   10daa:	f040 809a 	bne.w	10ee2 <util_aa_le32+0x2ae>
			consecutive_cnt = 1U;
   10dae:	2201      	movs	r2, #1
   10db0:	f04f 0c00 	mov.w	ip, #0
   10db4:	e769      	b.n	10c8a <util_aa_le32+0x56>
		if ((consecutive_cnt > 6) ||
   10db6:	f1bc 0f00 	cmp.w	ip, #0
   10dba:	d110      	bne.n	10dde <util_aa_le32+0x1aa>
   10dbc:	4641      	mov	r1, r8
   10dbe:	46ce      	mov	lr, r9
   10dc0:	e79f      	b.n	10d02 <util_aa_le32+0xce>
				aa |= (BIT(bit_idx + 1) - 1);
   10dc2:	3b01      	subs	r3, #1
   10dc4:	4318      	orrs	r0, r3
   10dc6:	e7aa      	b.n	10d1e <util_aa_le32+0xea>
	dst[1] = val >> 8;
   10dc8:	f3c0 2107 	ubfx	r1, r0, #8, #8
   10dcc:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
   10dce:	7020      	strb	r0, [r4, #0]
	return 0;
   10dd0:	2000      	movs	r0, #0
	dst[1] = val >> 8;
   10dd2:	7061      	strb	r1, [r4, #1]
	dst[0] = val;
   10dd4:	70a2      	strb	r2, [r4, #2]
	dst[1] = val >> 8;
   10dd6:	70e3      	strb	r3, [r4, #3]
}
   10dd8:	b003      	add	sp, #12
   10dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					   (ones_count_lsb8 < 3)))) ||
   10dde:	2a06      	cmp	r2, #6
   10de0:	d102      	bne.n	10de8 <util_aa_le32+0x1b4>
   10de2:	4641      	mov	r1, r8
   10de4:	46ce      	mov	lr, r9
   10de6:	e758      	b.n	10c9a <util_aa_le32+0x66>
   10de8:	4641      	mov	r1, r8
   10dea:	46ce      	mov	lr, r9
   10dec:	e74d      	b.n	10c8a <util_aa_le32+0x56>
		    (!consecutive_bit && (((bit_idx < 6) &&
   10dee:	f1bb 0f00 	cmp.w	fp, #0
   10df2:	d00c      	beq.n	10e0e <util_aa_le32+0x1da>
					   (ones_count_lsb8 < 1)) ||
   10df4:	f1bc 0f04 	cmp.w	ip, #4
   10df8:	d883      	bhi.n	10d02 <util_aa_le32+0xce>
					  ((bit_idx < 5) &&
   10dfa:	f1bb 0f01 	cmp.w	fp, #1
   10dfe:	d906      	bls.n	10e0e <util_aa_le32+0x1da>
					   (ones_count_lsb8 < 2)) ||
   10e00:	f1bc 0f03 	cmp.w	ip, #3
   10e04:	f63f af7d 	bhi.w	10d02 <util_aa_le32+0xce>
					  ((bit_idx < 4) &&
   10e08:	f1bb 0f02 	cmp.w	fp, #2
   10e0c:	d809      	bhi.n	10e22 <util_aa_le32+0x1ee>
				aa |= BIT(bit_idx);
   10e0e:	fa06 f203 	lsl.w	r2, r6, r3
   10e12:	4310      	orrs	r0, r2
					ones_count_lsb8++;
   10e14:	f10b 0b01 	add.w	fp, fp, #1
   10e18:	fa5f fb8b 	uxtb.w	fp, fp
				consecutive_bit = 1U;
   10e1c:	f04f 0c01 	mov.w	ip, #1
   10e20:	e7ad      	b.n	10d7e <util_aa_le32+0x14a>
					   (ones_count_lsb8 < 3)))) ||
   10e22:	2a06      	cmp	r2, #6
   10e24:	f43f af6f 	beq.w	10d06 <util_aa_le32+0xd2>
		     (((bit_idx < 29) && (transitions < 1)) ||
   10e28:	b129      	cbz	r1, 10e36 <util_aa_le32+0x202>
   10e2a:	f04f 0c00 	mov.w	ip, #0
   10e2e:	e72f      	b.n	10c90 <util_aa_le32+0x5c>
				consecutive_cnt = 1U;
   10e30:	f04f 0a01 	mov.w	sl, #1
   10e34:	e7aa      	b.n	10d8c <util_aa_le32+0x158>
			if (consecutive_bit) {
   10e36:	fa06 f203 	lsl.w	r2, r6, r3
				if (bit_idx < 8) {
   10e3a:	2b07      	cmp	r3, #7
				aa |= BIT(bit_idx);
   10e3c:	ea40 0002 	orr.w	r0, r0, r2
				consecutive_bit = 1U;
   10e40:	bf88      	it	hi
   10e42:	f04f 0c01 	movhi.w	ip, #1
				if (bit_idx < 8) {
   10e46:	d89a      	bhi.n	10d7e <util_aa_le32+0x14a>
   10e48:	e7e4      	b.n	10e14 <util_aa_le32+0x1e0>
		if ((bit_idx < 8) && consecutive_bit) {
   10e4a:	f1bc 0f00 	cmp.w	ip, #0
   10e4e:	d02a      	beq.n	10ea6 <util_aa_le32+0x272>
			ones_count_lsb8++;
   10e50:	f10b 0b01 	add.w	fp, fp, #1
		if ((consecutive_cnt > 6) ||
   10e54:	2a06      	cmp	r2, #6
			ones_count_lsb8++;
   10e56:	fa5f fb8b 	uxtb.w	fp, fp
		if ((consecutive_cnt > 6) ||
   10e5a:	d91d      	bls.n	10e98 <util_aa_le32+0x264>
				aa &= ~BIT(bit_idx);
   10e5c:	fa06 f203 	lsl.w	r2, r6, r3
   10e60:	ea20 0002 	bic.w	r0, r0, r2
   10e64:	4641      	mov	r1, r8
   10e66:	46ce      	mov	lr, r9
					ones_count_lsb8--;
   10e68:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   10e6c:	fa5f fb8b 	uxtb.w	fp, fp
				consecutive_bit = 0U;
   10e70:	f04f 0c00 	mov.w	ip, #0
   10e74:	e783      	b.n	10d7e <util_aa_le32+0x14a>
		      ((bit_idx < 28) && (transitions < 2))))) {
   10e76:	2901      	cmp	r1, #1
   10e78:	f63f af0d 	bhi.w	10c96 <util_aa_le32+0x62>
			if (consecutive_bit) {
   10e7c:	fa06 f203 	lsl.w	r2, r6, r3
   10e80:	f1bc 0f00 	cmp.w	ip, #0
   10e84:	d0d9      	beq.n	10e3a <util_aa_le32+0x206>
				if (bit_idx < 8) {
   10e86:	2b07      	cmp	r3, #7
				aa &= ~BIT(bit_idx);
   10e88:	ea20 0002 	bic.w	r0, r0, r2
				consecutive_bit = 0U;
   10e8c:	bf88      	it	hi
   10e8e:	f04f 0c00 	movhi.w	ip, #0
				if (bit_idx < 8) {
   10e92:	f63f af74 	bhi.w	10d7e <util_aa_le32+0x14a>
   10e96:	e7e7      	b.n	10e68 <util_aa_le32+0x234>
					   (ones_count_lsb8 < 3)))) ||
   10e98:	d0a3      	beq.n	10de2 <util_aa_le32+0x1ae>
		     (((bit_idx < 29) && (transitions < 1)) ||
   10e9a:	f1b8 0f00 	cmp.w	r8, #0
   10e9e:	d00a      	beq.n	10eb6 <util_aa_le32+0x282>
   10ea0:	4641      	mov	r1, r8
   10ea2:	46ce      	mov	lr, r9
   10ea4:	e6f4      	b.n	10c90 <util_aa_le32+0x5c>
		if ((consecutive_cnt > 6) ||
   10ea6:	2a06      	cmp	r2, #6
   10ea8:	d90a      	bls.n	10ec0 <util_aa_le32+0x28c>
				aa |= BIT(bit_idx);
   10eaa:	fa06 f203 	lsl.w	r2, r6, r3
   10eae:	4310      	orrs	r0, r2
   10eb0:	4641      	mov	r1, r8
   10eb2:	46ce      	mov	lr, r9
   10eb4:	e7ae      	b.n	10e14 <util_aa_le32+0x1e0>
			if (consecutive_bit) {
   10eb6:	fa06 f203 	lsl.w	r2, r6, r3
		     (((bit_idx < 29) && (transitions < 1)) ||
   10eba:	4641      	mov	r1, r8
   10ebc:	46ce      	mov	lr, r9
   10ebe:	e7e2      	b.n	10e86 <util_aa_le32+0x252>
		if ((consecutive_cnt > 6) ||
   10ec0:	4641      	mov	r1, r8
   10ec2:	46ce      	mov	lr, r9
   10ec4:	fa5f fc83 	uxtb.w	ip, r3
   10ec8:	e719      	b.n	10cfe <util_aa_le32+0xca>
		     (((bit_idx < 29) && (transitions < 1)) ||
   10eca:	2900      	cmp	r1, #0
   10ecc:	d0d6      	beq.n	10e7c <util_aa_le32+0x248>
   10ece:	e6df      	b.n	10c90 <util_aa_le32+0x5c>
		if ((bit_idx < 8) && consecutive_bit) {
   10ed0:	2a00      	cmp	r2, #0
   10ed2:	f43f af13 	beq.w	10cfc <util_aa_le32+0xc8>
			ones_count_lsb8++;
   10ed6:	f10b 0b01 	add.w	fp, fp, #1
   10eda:	fa5f fb8b 	uxtb.w	fp, fp
   10ede:	4694      	mov	ip, r2
   10ee0:	e6d6      	b.n	10c90 <util_aa_le32+0x5c>
		      ((bit_idx < 28) && (transitions < 2))))) {
   10ee2:	2901      	cmp	r1, #1
   10ee4:	d001      	beq.n	10eea <util_aa_le32+0x2b6>
   10ee6:	4694      	mov	ip, r2
   10ee8:	e6d5      	b.n	10c96 <util_aa_le32+0x62>
			if (consecutive_bit) {
   10eea:	fa01 f203 	lsl.w	r2, r1, r3
   10eee:	e7ca      	b.n	10e86 <util_aa_le32+0x252>
   10ef0:	8e89bed6 	.word	0x8e89bed6

00010ef4 <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
   10ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ef8:	b08d      	sub	sp, #52	; 0x34
   10efa:	4602      	mov	r2, r0
   10efc:	9002      	str	r0, [sp, #8]
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
   10efe:	7f80      	ldrb	r0, [r0, #30]
   10f00:	9008      	str	r0, [sp, #32]
	instance->worker_trigger = 1U;
   10f02:	2301      	movs	r3, #1
   10f04:	77d3      	strb	r3, [r2, #31]
	if (instance->job_guard) {
   10f06:	2800      	cmp	r0, #0
   10f08:	f040 80a2 	bne.w	11050 <ticker_worker+0x15c>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
   10f0c:	7f53      	ldrb	r3, [r2, #29]
   10f0e:	2bff      	cmp	r3, #255	; 0xff
   10f10:	f000 809d 	beq.w	1104e <ticker_worker+0x15a>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   10f14:	f00b ffee 	bl	1cef4 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10f18:	9902      	ldr	r1, [sp, #8]
   10f1a:	694a      	ldr	r2, [r1, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   10f1c:	7f0b      	ldrb	r3, [r1, #28]
	ticker_id_head = instance->ticker_id_head;
   10f1e:	f891 b01d 	ldrb.w	fp, [r1, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10f22:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   10f24:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10f26:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   10f2a:	f000 8120 	beq.w	1116e <ticker_worker+0x27a>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   10f2e:	698b      	ldr	r3, [r1, #24]
	uint8_t slot_reserved = 0;
   10f30:	42bb      	cmp	r3, r7
   10f32:	bf94      	ite	ls
   10f34:	2300      	movls	r3, #0
   10f36:	2301      	movhi	r3, #1
   10f38:	9304      	str	r3, [sp, #16]
	node = &instance->nodes[0];
   10f3a:	9b02      	ldr	r3, [sp, #8]
	while (ticker_id_head != TICKER_NULL) {
   10f3c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
   10f40:	f8d3 8000 	ldr.w	r8, [r3]
	ticks_expired = 0U;
   10f44:	f04f 0300 	mov.w	r3, #0
	while (ticker_id_head != TICKER_NULL) {
   10f48:	f000 8114 	beq.w	11174 <ticker_worker+0x280>
			must_expire_skip = 1U;
   10f4c:	469a      	mov	sl, r3
		ticker = &node[ticker_id_head];
   10f4e:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
   10f52:	eb08 140b 	add.w	r4, r8, fp, lsl #4
   10f56:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   10f5a:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10f5c:	42bb      	cmp	r3, r7
   10f5e:	d853      	bhi.n	11008 <ticker_worker+0x114>
		if (ticker->ticks_slot != 0U &&
   10f60:	f8d4 c018 	ldr.w	ip, [r4, #24]
		ticker_id_head = ticker->next;
   10f64:	f818 b00b 	ldrb.w	fp, [r8, fp]
		ticks_elapsed -= ticks_to_expire;
   10f68:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   10f6a:	449a      	add	sl, r3
		if (ticker->ticks_slot != 0U &&
   10f6c:	f1bc 0f00 	cmp.w	ip, #0
   10f70:	d076      	beq.n	11060 <ticker_worker+0x16c>
   10f72:	9b04      	ldr	r3, [sp, #16]
   10f74:	2b00      	cmp	r3, #0
   10f76:	d079      	beq.n	1106c <ticker_worker+0x178>
   10f78:	8be3      	ldrh	r3, [r4, #30]
   10f7a:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
   10f7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   10f7e:	b153      	cbz	r3, 10f96 <ticker_worker+0xa2>
   10f80:	681a      	ldr	r2, [r3, #0]
   10f82:	b132      	cbz	r2, 10f92 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
   10f84:	7a1a      	ldrb	r2, [r3, #8]
   10f86:	b922      	cbnz	r2, 10f92 <ticker_worker+0x9e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   10f88:	8ba2      	ldrh	r2, [r4, #28]
   10f8a:	9903      	ldr	r1, [sp, #12]
   10f8c:	428a      	cmp	r2, r1
   10f8e:	f240 80ea 	bls.w	11166 <ticker_worker+0x272>
				ext_data->reschedule_state =
   10f92:	2200      	movs	r2, #0
   10f94:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   10f96:	9a03      	ldr	r2, [sp, #12]
			if ((ticker->must_expire == 0U) ||
   10f98:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   10f9c:	3201      	adds	r2, #1
   10f9e:	b292      	uxth	r2, r2
   10fa0:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   10fa2:	2900      	cmp	r1, #0
   10fa4:	d02d      	beq.n	11002 <ticker_worker+0x10e>
   10fa6:	8ba1      	ldrh	r1, [r4, #28]
   10fa8:	4291      	cmp	r1, r2
   10faa:	d22a      	bcs.n	11002 <ticker_worker+0x10e>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   10fac:	2b00      	cmp	r3, #0
   10fae:	f000 80d8 	beq.w	11162 <ticker_worker+0x26e>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   10fb2:	7a1a      	ldrb	r2, [r3, #8]
   10fb4:	2a01      	cmp	r2, #1
   10fb6:	d024      	beq.n	11002 <ticker_worker+0x10e>
			must_expire_skip = 1U;
   10fb8:	2501      	movs	r5, #1
			ticker->ext_data->ticks_drift = 0U;
   10fba:	2200      	movs	r2, #0
   10fbc:	605a      	str	r2, [r3, #4]
			ticker->ext_data->reschedule_state =
   10fbe:	721a      	strb	r2, [r3, #8]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   10fc0:	78a2      	ldrb	r2, [r4, #2]
   10fc2:	7863      	ldrb	r3, [r4, #1]
   10fc4:	1a9b      	subs	r3, r3, r2
   10fc6:	b2db      	uxtb	r3, r3
   10fc8:	2b01      	cmp	r3, #1
   10fca:	d11a      	bne.n	11002 <ticker_worker+0x10e>
		if (ticker->timeout_func) {
   10fcc:	68e6      	ldr	r6, [r4, #12]
		ticker->ack--;
   10fce:	3a01      	subs	r2, #1
   10fd0:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   10fd2:	b1b6      	cbz	r6, 11002 <ticker_worker+0x10e>
					   ticks_expired -
   10fd4:	9b02      	ldr	r3, [sp, #8]
   10fd6:	6962      	ldr	r2, [r4, #20]
   10fd8:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   10fda:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10fdc:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
   10fde:	ebaa 0202 	sub.w	r2, sl, r2
   10fe2:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
   10fe4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   10fe8:	2d00      	cmp	r5, #0
   10fea:	f040 80ad 	bne.w	11148 <ticker_worker+0x254>
   10fee:	8be2      	ldrh	r2, [r4, #30]
   10ff0:	47b0      	blx	r6
				if (ticker->ticks_slot != 0U) {
   10ff2:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   10ff4:	83e5      	strh	r5, [r4, #30]
					slot_reserved = 1U;
   10ff6:	2b00      	cmp	r3, #0
   10ff8:	9b04      	ldr	r3, [sp, #16]
				ticker->force = 0U;
   10ffa:	70e5      	strb	r5, [r4, #3]
					slot_reserved = 1U;
   10ffc:	bf18      	it	ne
   10ffe:	2301      	movne	r3, #1
   11000:	9304      	str	r3, [sp, #16]
	while (ticker_id_head != TICKER_NULL) {
   11002:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   11006:	d1a2      	bne.n	10f4e <ticker_worker+0x5a>
   11008:	4650      	mov	r0, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1100a:	9a02      	ldr	r2, [sp, #8]
   1100c:	7ad3      	ldrb	r3, [r2, #11]
   1100e:	7a92      	ldrb	r2, [r2, #10]
   11010:	429a      	cmp	r2, r3
   11012:	d10c      	bne.n	1102e <ticker_worker+0x13a>
	uint8_t idx = *ticks_elapsed_index + 1;
   11014:	3201      	adds	r2, #1
   11016:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   11018:	2a02      	cmp	r2, #2
   1101a:	bf18      	it	ne
   1101c:	4613      	movne	r3, r2
	*ticks_elapsed_index = idx;
   1101e:	9a02      	ldr	r2, [sp, #8]
   11020:	bf18      	it	ne
   11022:	9308      	strne	r3, [sp, #32]
   11024:	4611      	mov	r1, r2
   11026:	9a08      	ldr	r2, [sp, #32]
   11028:	72ca      	strb	r2, [r1, #11]
   1102a:	bf08      	it	eq
   1102c:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1102e:	9902      	ldr	r1, [sp, #8]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   11030:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   11032:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	instance->worker_trigger = 0U;
   11036:	2200      	movs	r2, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   11038:	60d8      	str	r0, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1103a:	46a4      	mov	ip, r4
	instance->worker_trigger = 0U;
   1103c:	77ca      	strb	r2, [r1, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1103e:	460b      	mov	r3, r1
   11040:	2201      	movs	r2, #1
   11042:	2104      	movs	r1, #4
   11044:	2003      	movs	r0, #3
}
   11046:	b00d      	add	sp, #52	; 0x34
   11048:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1104c:	4760      	bx	ip
		instance->worker_trigger = 0U;
   1104e:	77d0      	strb	r0, [r2, #31]
}
   11050:	b00d      	add	sp, #52	; 0x34
   11052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11056:	e9dd 7a09 	ldrd	r7, sl, [sp, #36]	; 0x24
   1105a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   1105e:	464c      	mov	r4, r9
		if (ticker->ext_data) {
   11060:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11062:	b10b      	cbz	r3, 11068 <ticker_worker+0x174>
   11064:	2500      	movs	r5, #0
   11066:	e7a8      	b.n	10fba <ticker_worker+0xc6>
   11068:	461d      	mov	r5, r3
   1106a:	e7a9      	b.n	10fc0 <ticker_worker+0xcc>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   1106c:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   11070:	9305      	str	r3, [sp, #20]
   11072:	3380      	adds	r3, #128	; 0x80
   11074:	d0f4      	beq.n	11060 <ticker_worker+0x16c>
   11076:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   1107a:	d0f1      	beq.n	11060 <ticker_worker+0x16c>
		int32_t lazy_current = ticker->lazy_current;
   1107c:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   1107e:	8ba2      	ldrh	r2, [r4, #28]
		int32_t lazy_current = ticker->lazy_current;
   11080:	9303      	str	r3, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
   11082:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
   11084:	bf28      	it	cs
   11086:	1a9b      	subcs	r3, r3, r2
				(lazy_current - ticker->priority);
   11088:	9905      	ldr	r1, [sp, #20]
		uint32_t current_age = ticker->ticks_periodic +
   1108a:	6862      	ldr	r2, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
   1108c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
				(lazy_current - ticker->priority);
   11090:	1a59      	subs	r1, r3, r1
		uint32_t current_age = ticker->ticks_periodic +
   11092:	fb03 2302 	mla	r3, r3, r2, r2
   11096:	9306      	str	r3, [sp, #24]
		uint32_t acc_ticks_to_expire = 0U;
   11098:	e9cd 7a09 	strd	r7, sl, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
   1109c:	9107      	str	r1, [sp, #28]
		uint32_t current_age = ticker->ticks_periodic +
   1109e:	465b      	mov	r3, fp
		uint32_t acc_ticks_to_expire = 0U;
   110a0:	2000      	movs	r0, #0
   110a2:	46a1      	mov	r9, r4
   110a4:	9201      	str	r2, [sp, #4]
   110a6:	e02b      	b.n	11100 <ticker_worker+0x20c>
				(ticker->ticks_periodic == 0U) ||
   110a8:	9c01      	ldr	r4, [sp, #4]
					  0U :
   110aa:	ebaa 0e0e 	sub.w	lr, sl, lr
				(ticker->ticks_periodic == 0U) ||
   110ae:	2c00      	cmp	r4, #0
   110b0:	d045      	beq.n	1113e <ticker_worker+0x24a>
   110b2:	9c06      	ldr	r4, [sp, #24]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   110b4:	fb0a ee06 	mla	lr, sl, r6, lr
				(ticker->ticks_periodic == 0U) ||
   110b8:	4574      	cmp	r4, lr
   110ba:	bf8c      	ite	hi
   110bc:	f04f 0e01 	movhi.w	lr, #1
   110c0:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   110c4:	bf34      	ite	cc
   110c6:	f04f 0a01 	movcc.w	sl, #1
   110ca:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
   110ce:	42a9      	cmp	r1, r5
			uint8_t next_force = (ticker_next->force > ticker->force);
   110d0:	f892 b003 	ldrb.w	fp, [r2, #3]
   110d4:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
   110d8:	d30e      	bcc.n	110f8 <ticker_worker+0x204>
   110da:	4593      	cmp	fp, r2
   110dc:	d83b      	bhi.n	11156 <ticker_worker+0x262>
			    (next_force ||
   110de:	f117 0f80 	cmn.w	r7, #128	; 0x80
   110e2:	d038      	beq.n	11156 <ticker_worker+0x262>
			     next_is_critical ||
   110e4:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
   110e6:	1bf6      	subs	r6, r6, r7
			     next_is_critical ||
   110e8:	4296      	cmp	r6, r2
   110ea:	dd02      	ble.n	110f2 <ticker_worker+0x1fe>
			     (next_has_priority && !current_is_older) ||
   110ec:	f1be 0f00 	cmp.w	lr, #0
   110f0:	d031      	beq.n	11156 <ticker_worker+0x262>
   110f2:	9a05      	ldr	r2, [sp, #20]
   110f4:	42ba      	cmp	r2, r7
   110f6:	d02b      	beq.n	11150 <ticker_worker+0x25c>
			id_head = ticker_next->next;
   110f8:	f818 3003 	ldrb.w	r3, [r8, r3]
		while (id_head != TICKER_NULL) {
   110fc:	2bff      	cmp	r3, #255	; 0xff
   110fe:	d0aa      	beq.n	11056 <ticker_worker+0x162>
			struct ticker_node *ticker_next = &nodes[id_head];
   11100:	b21b      	sxth	r3, r3
   11102:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11106:	eb08 1203 	add.w	r2, r8, r3, lsl #4
   1110a:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1110c:	f8d2 e008 	ldr.w	lr, [r2, #8]
   11110:	4470      	add	r0, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   11112:	4584      	cmp	ip, r0
   11114:	d39f      	bcc.n	11056 <ticker_worker+0x162>
			if (ticker_next->ticks_slot == 0U) {
   11116:	6991      	ldr	r1, [r2, #24]
   11118:	2900      	cmp	r1, #0
   1111a:	d0ed      	beq.n	110f8 <ticker_worker+0x204>
			int32_t lazy_next = ticker_next->lazy_current;
   1111c:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   1111e:	8b95      	ldrh	r5, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   11120:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
   11124:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   11128:	42a9      	cmp	r1, r5
			int32_t lazy_next = ticker_next->lazy_current;
   1112a:	460e      	mov	r6, r1
				lazy_next -= ticker_next->lazy_periodic;
   1112c:	bf28      	it	cs
   1112e:	1b4e      	subcs	r6, r1, r5
					  0U :
   11130:	f1ba 0f00 	cmp.w	sl, #0
   11134:	d1b8      	bne.n	110a8 <ticker_worker+0x1b4>
				(ticker->ticks_periodic == 0U) ||
   11136:	9c01      	ldr	r4, [sp, #4]
					  0U :
   11138:	46d6      	mov	lr, sl
				(ticker->ticks_periodic == 0U) ||
   1113a:	2c00      	cmp	r4, #0
   1113c:	d1b9      	bne.n	110b2 <ticker_worker+0x1be>
					(ticker->ticks_periodic != 0U) &&
   1113e:	f8dd a004 	ldr.w	sl, [sp, #4]
				(ticker->ticks_periodic == 0U) ||
   11142:	f04f 0e01 	mov.w	lr, #1
   11146:	e7c2      	b.n	110ce <ticker_worker+0x1da>
			ticker->timeout_func(ticks_at_expire,
   11148:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1114c:	47b0      	blx	r6
			if (must_expire_skip == 0U) {
   1114e:	e758      	b.n	11002 <ticker_worker+0x10e>
			     (equal_priority && next_is_older))) {
   11150:	f1ba 0f00 	cmp.w	sl, #0
   11154:	d0d0      	beq.n	110f8 <ticker_worker+0x204>
   11156:	e9dd 7a09 	ldrd	r7, sl, [sp, #36]	; 0x24
   1115a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   1115e:	464c      	mov	r4, r9
   11160:	e70c      	b.n	10f7c <ticker_worker+0x88>
			must_expire_skip = 1U;
   11162:	2501      	movs	r5, #1
   11164:	e72c      	b.n	10fc0 <ticker_worker+0xcc>
				ext_data->reschedule_state =
   11166:	f04f 0201 	mov.w	r2, #1
   1116a:	721a      	strb	r2, [r3, #8]
   1116c:	e713      	b.n	10f96 <ticker_worker+0xa2>
	uint8_t slot_reserved = 0;
   1116e:	9b08      	ldr	r3, [sp, #32]
   11170:	9304      	str	r3, [sp, #16]
   11172:	e6e2      	b.n	10f3a <ticker_worker+0x46>
	ticks_expired = 0U;
   11174:	4618      	mov	r0, r3
   11176:	e748      	b.n	1100a <ticker_worker+0x116>

00011178 <ticker_job>:
	if (instance->worker_trigger) {
   11178:	7fc2      	ldrb	r2, [r0, #31]
   1117a:	2a00      	cmp	r2, #0
   1117c:	f040 862f 	bne.w	11dde <ticker_job+0xc66>
{
   11180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   11184:	7a83      	ldrb	r3, [r0, #10]
   11186:	7ac1      	ldrb	r1, [r0, #11]
{
   11188:	b08f      	sub	sp, #60	; 0x3c
   1118a:	4683      	mov	fp, r0
	ticks_previous = instance->ticks_current;
   1118c:	6940      	ldr	r0, [r0, #20]
   1118e:	9005      	str	r0, [sp, #20]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   11190:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
   11192:	f04f 0001 	mov.w	r0, #1
   11196:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1119a:	f000 8096 	beq.w	112ca <ticker_job+0x152>
	uint8_t idx = *ticks_elapsed_index + 1;
   1119e:	4403      	add	r3, r0
   111a0:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   111a2:	2b02      	cmp	r3, #2
		idx = 0U;
   111a4:	bf08      	it	eq
   111a6:	4613      	moveq	r3, r2
		ticks_elapsed =
   111a8:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   111ac:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
   111b0:	68d3      	ldr	r3, [r2, #12]
		instance->ticks_current += ticks_elapsed;
   111b2:	9a05      	ldr	r2, [sp, #20]
		ticks_elapsed =
   111b4:	9302      	str	r3, [sp, #8]
		instance->ticks_current += ticks_elapsed;
   111b6:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   111b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   111bc:	f8cb 3014 	str.w	r3, [fp, #20]
		flag_elapsed = 1U;
   111c0:	2301      	movs	r3, #1
   111c2:	930d      	str	r3, [sp, #52]	; 0x34
	count_user = instance->count_user;
   111c4:	f89b 3009 	ldrb.w	r3, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   111c8:	f89b 201d 	ldrb.w	r2, [fp, #29]
   111cc:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
   111ce:	f8db 2000 	ldr.w	r2, [fp]
	users = &instance->users[0];
   111d2:	f8db 1004 	ldr.w	r1, [fp, #4]
	count_user = instance->count_user;
   111d6:	9307      	str	r3, [sp, #28]
	node = &instance->nodes[0];
   111d8:	9204      	str	r2, [sp, #16]
	while (count_user--) {
   111da:	461a      	mov	r2, r3
   111dc:	3b01      	subs	r3, #1
	users = &instance->users[0];
   111de:	910c      	str	r1, [sp, #48]	; 0x30
	while (count_user--) {
   111e0:	b2db      	uxtb	r3, r3
   111e2:	2a00      	cmp	r2, #0
   111e4:	f000 8321 	beq.w	1182a <ticker_job+0x6b2>
   111e8:	eb01 06c3 	add.w	r6, r1, r3, lsl #3
	pending = 0U;
   111ec:	2300      	movs	r3, #0
   111ee:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   111f0:	23ff      	movs	r3, #255	; 0xff
   111f2:	9301      	str	r3, [sp, #4]
   111f4:	4637      	mov	r7, r6
   111f6:	46d9      	mov	r9, fp
		user_ops = &user->user_op[0];
   111f8:	687b      	ldr	r3, [r7, #4]
   111fa:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
   111fc:	f897 c003 	ldrb.w	ip, [r7, #3]
   11200:	78bb      	ldrb	r3, [r7, #2]
   11202:	46ba      	mov	sl, r7
   11204:	9907      	ldr	r1, [sp, #28]
					ticks_used = 0;
   11206:	4698      	mov	r8, r3
			user_op = &user_ops[user->middle];
   11208:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1120c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
   11210:	1c58      	adds	r0, r3, #1
		while (user->middle != user->last) {
   11212:	4563      	cmp	r3, ip
			user_op = &user_ops[user->middle];
   11214:	eb01 0582 	add.w	r5, r1, r2, lsl #2
			middle = user->middle + 1;
   11218:	b2c3      	uxtb	r3, r0
		while (user->middle != user->last) {
   1121a:	f000 8182 	beq.w	11522 <ticker_job+0x3aa>
			if (middle == user->count_user_op) {
   1121e:	f89a 0000 	ldrb.w	r0, [sl]
				middle = 0U;
   11222:	4298      	cmp	r0, r3
   11224:	bf08      	it	eq
   11226:	2300      	moveq	r3, #0
			user->middle = middle;
   11228:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   1122c:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
   11230:	2a04      	cmp	r2, #4
   11232:	f240 8174 	bls.w	1151e <ticker_job+0x3a6>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   11236:	2a07      	cmp	r2, #7
   11238:	f200 8086 	bhi.w	11348 <ticker_job+0x1d0>
			ticker = &node[user_op->id];
   1123c:	7869      	ldrb	r1, [r5, #1]
   1123e:	9c04      	ldr	r4, [sp, #16]
   11240:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   11244:	eb04 1400 	add.w	r4, r4, r0, lsl #4
   11248:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
   1124a:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
   1124c:	900a      	str	r0, [sp, #40]	; 0x28
			state = (ticker->req - ticker->ack) & 0xff;
   1124e:	7860      	ldrb	r0, [r4, #1]
   11250:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   11252:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   11256:	d077      	beq.n	11348 <ticker_job+0x1d0>
			    (state == 0U) ||
   11258:	2a05      	cmp	r2, #5
   1125a:	d065      	beq.n	11328 <ticker_job+0x1b0>
			if (state == 1U) {
   1125c:	2801      	cmp	r0, #1
   1125e:	d137      	bne.n	112d0 <ticker_job+0x158>
	previous = instance->ticker_id_head;
   11260:	f899 c01d 	ldrb.w	ip, [r9, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   11264:	f8d9 6000 	ldr.w	r6, [r9]
	while (current != TICKER_NULL) {
   11268:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1126c:	d017      	beq.n	1129e <ticker_job+0x126>
		ticker_current = &node[current];
   1126e:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		if (current == id) {
   11272:	4561      	cmp	r1, ip
		ticker_current = &node[current];
   11274:	eb06 1000 	add.w	r0, r6, r0, lsl #4
		if (current == id) {
   11278:	f000 8090 	beq.w	1139c <ticker_job+0x224>
	total = 0U;
   1127c:	2300      	movs	r3, #0
   1127e:	e001      	b.n	11284 <ticker_job+0x10c>
		if (current == id) {
   11280:	4561      	cmp	r1, ip
   11282:	d070      	beq.n	11366 <ticker_job+0x1ee>
		total += ticker_current->ticks_to_expire;
   11284:	46e6      	mov	lr, ip
		current = ticker_current->next;
   11286:	f890 c000 	ldrb.w	ip, [r0]
		total += ticker_current->ticks_to_expire;
   1128a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	while (current != TICKER_NULL) {
   1128e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
		ticker_current = &node[current];
   11292:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		total += ticker_current->ticks_to_expire;
   11296:	4443      	add	r3, r8
		ticker_current = &node[current];
   11298:	eb06 1000 	add.w	r0, r6, r0, lsl #4
	while (current != TICKER_NULL) {
   1129c:	d1f0      	bne.n	11280 <ticker_job+0x108>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   1129e:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   112a0:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   112a2:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   112a4:	f000 8126 	beq.w	114f4 <ticker_job+0x37c>
		ticker->req = ticker->ack;
   112a8:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   112aa:	f899 301c 	ldrb.w	r3, [r9, #28]
   112ae:	428b      	cmp	r3, r1
   112b0:	d022      	beq.n	112f8 <ticker_job+0x180>
	if (user_op->fp_op_func) {
   112b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   112b4:	2000      	movs	r0, #0
   112b6:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
   112b8:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   112ba:	b10b      	cbz	r3, 112c0 <ticker_job+0x148>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   112bc:	6b29      	ldr	r1, [r5, #48]	; 0x30
   112be:	4798      	blx	r3
   112c0:	f89a c003 	ldrb.w	ip, [sl, #3]
   112c4:	f89a 3002 	ldrb.w	r3, [sl, #2]
   112c8:	e79c      	b.n	11204 <ticker_job+0x8c>
		flag_elapsed = 0U;
   112ca:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
   112cc:	9202      	str	r2, [sp, #8]
   112ce:	e779      	b.n	111c4 <ticker_job+0x4c>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   112d0:	2104      	movs	r1, #4
   112d2:	464b      	mov	r3, r9
   112d4:	2201      	movs	r2, #1
   112d6:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
   112da:	4608      	mov	r0, r1
   112dc:	47a0      	blx	r4
	while (count_user--) {
   112de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				user->middle = prev;
   112e0:	f88a 8002 	strb.w	r8, [sl, #2]
   112e4:	4657      	mov	r7, sl
				pending = 1U;
   112e6:	2301      	movs	r3, #1
	while (count_user--) {
   112e8:	42ba      	cmp	r2, r7
				pending = 1U;
   112ea:	9308      	str	r3, [sp, #32]
   112ec:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
   112f0:	f000 811e 	beq.w	11530 <ticker_job+0x3b8>
   112f4:	461f      	mov	r7, r3
   112f6:	e77f      	b.n	111f8 <ticker_job+0x80>
			instance->ticker_id_slot_previous = TICKER_NULL;
   112f8:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   112fa:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   112fc:	f889 301c 	strb.w	r3, [r9, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   11300:	f040 81dd 	bne.w	116be <ticker_job+0x546>
				ticks_at_stop =
   11304:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
   11306:	f8d9 3014 	ldr.w	r3, [r9, #20]
			if (!((ticks_at_stop - ticks_current) &
   1130a:	1ac2      	subs	r2, r0, r3
   1130c:	0214      	lsls	r4, r2, #8
   1130e:	f100 81cd 	bmi.w	116ac <ticker_job+0x534>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11312:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   11316:	9a02      	ldr	r2, [sp, #8]
   11318:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   1131a:	f8d9 2018 	ldr.w	r2, [r9, #24]
   1131e:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   11320:	bf88      	it	hi
   11322:	f8c9 3018 	strhi.w	r3, [r9, #24]
   11326:	e7c4      	b.n	112b2 <ticker_job+0x13a>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   11328:	686e      	ldr	r6, [r5, #4]
   1132a:	2e00      	cmp	r6, #0
   1132c:	d196      	bne.n	1125c <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   1132e:	68ae      	ldr	r6, [r5, #8]
   11330:	2e00      	cmp	r6, #0
   11332:	d193      	bne.n	1125c <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   11334:	68ee      	ldr	r6, [r5, #12]
   11336:	2e00      	cmp	r6, #0
   11338:	d190      	bne.n	1125c <ticker_job+0xe4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   1133a:	692e      	ldr	r6, [r5, #16]
   1133c:	2e00      	cmp	r6, #0
   1133e:	d18d      	bne.n	1125c <ticker_job+0xe4>
			     (user_op->params.update.lazy == 0U) &&
   11340:	696e      	ldr	r6, [r5, #20]
   11342:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
   11346:	d189      	bne.n	1125c <ticker_job+0xe4>
	if (user_op->fp_op_func) {
   11348:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1134a:	2100      	movs	r1, #0
	user_op->status = status;
   1134c:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1134e:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
   11350:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   11352:	2a00      	cmp	r2, #0
   11354:	f43f af56 	beq.w	11204 <ticker_job+0x8c>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11358:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1135a:	4790      	blx	r2
   1135c:	f89a c003 	ldrb.w	ip, [sl, #3]
   11360:	f89a 3002 	ldrb.w	r3, [sl, #2]
   11364:	e74e      	b.n	11204 <ticker_job+0x8c>
	if (previous == current) {
   11366:	eb0e 074e 	add.w	r7, lr, lr, lsl #1
   1136a:	4571      	cmp	r1, lr
   1136c:	eb06 1707 	add.w	r7, r6, r7, lsl #4
   11370:	d016      	beq.n	113a0 <ticker_job+0x228>
	node[previous].next = ticker_current->next;
   11372:	7801      	ldrb	r1, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
   11374:	f8d0 c008 	ldr.w	ip, [r0, #8]
	node[previous].next = ticker_current->next;
   11378:	7039      	strb	r1, [r7, #0]
	if (ticker_current->next != TICKER_NULL) {
   1137a:	29ff      	cmp	r1, #255	; 0xff
   1137c:	d006      	beq.n	1138c <ticker_job+0x214>
		node[ticker_current->next].ticks_to_expire += timeout;
   1137e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   11382:	eb06 1101 	add.w	r1, r6, r1, lsl #4
   11386:	6888      	ldr	r0, [r1, #8]
   11388:	4460      	add	r0, ip
   1138a:	6088      	str	r0, [r1, #8]
	return (total + timeout);
   1138c:	eb0c 0603 	add.w	r6, ip, r3
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   11390:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   11392:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   11394:	d009      	beq.n	113aa <ticker_job+0x232>
   11396:	78a7      	ldrb	r7, [r4, #2]
   11398:	7869      	ldrb	r1, [r5, #1]
   1139a:	e785      	b.n	112a8 <ticker_job+0x130>
		if (current == id) {
   1139c:	4607      	mov	r7, r0
	total = 0U;
   1139e:	2300      	movs	r3, #0
		instance->ticker_id_head = ticker_current->next;
   113a0:	7802      	ldrb	r2, [r0, #0]
   113a2:	f889 201d 	strb.w	r2, [r9, #29]
   113a6:	782a      	ldrb	r2, [r5, #0]
   113a8:	e7e3      	b.n	11372 <ticker_job+0x1fa>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   113aa:	f8d9 7014 	ldr.w	r7, [r9, #20]
   113ae:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
   113b0:	f00b fda0 	bl	1cef4 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   113b4:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   113b6:	eba0 0c07 	sub.w	ip, r0, r7
   113ba:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   113be:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
   113c0:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
   113c2:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
   113c4:	f240 80a2 	bls.w	1150c <ticker_job+0x394>
		ticks_to_expire -= ticks_elapsed;
   113c8:	6962      	ldr	r2, [r4, #20]
   113ca:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
   113cc:	6866      	ldr	r6, [r4, #4]
   113ce:	2e00      	cmp	r6, #0
   113d0:	d053      	beq.n	1147a <ticker_job+0x302>
	    (user_op->params.update.lazy != 0U)) {
   113d2:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
   113d4:	2800      	cmp	r0, #0
   113d6:	d050      	beq.n	1147a <ticker_job+0x302>
		user_op->params.update.lazy--;
   113d8:	3801      	subs	r0, #1
   113da:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   113dc:	429e      	cmp	r6, r3
   113de:	8be1      	ldrh	r1, [r4, #30]
		user_op->params.update.lazy--;
   113e0:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   113e2:	d225      	bcs.n	11430 <ticker_job+0x2b8>
   113e4:	f106 0b01 	add.w	fp, r6, #1
   113e8:	920b      	str	r2, [sp, #44]	; 0x2c
   113ea:	e011      	b.n	11410 <ticker_job+0x298>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   113ec:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
   113f0:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
   113f4:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
   113f8:	46de      	mov	lr, fp
	ticker->remainder_current -= ticker->remainder_periodic;
   113fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
			ticker->lazy_current--;
   113fc:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
   113fe:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
   11402:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
   11404:	1a80      	subs	r0, r0, r2
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11406:	429e      	cmp	r6, r3
			ticker->lazy_current--;
   11408:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
   1140a:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1140c:	d20e      	bcs.n	1142c <ticker_job+0x2b4>
   1140e:	8aa8      	ldrh	r0, [r5, #20]
   11410:	4288      	cmp	r0, r1
   11412:	f080 81b2 	bcs.w	1177a <ticker_job+0x602>
					   ticker_remainder_dec(ticker);
   11416:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
   1141a:	f8df e2d0 	ldr.w	lr, [pc, #720]	; 116ec <ticker_job+0x574>
					   ticker_remainder_dec(ticker);
   1141e:	9209      	str	r2, [sp, #36]	; 0x24
	if ((ticker->remainder_current >= BIT(31)) ||
   11420:	4ab1      	ldr	r2, [pc, #708]	; (116e8 <ticker_job+0x570>)
   11422:	4486      	add	lr, r0
   11424:	4596      	cmp	lr, r2
   11426:	d8e1      	bhi.n	113ec <ticker_job+0x274>
   11428:	46b6      	mov	lr, r6
   1142a:	e7e6      	b.n	113fa <ticker_job+0x282>
   1142c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1142e:	8aa8      	ldrh	r0, [r5, #20]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11430:	4288      	cmp	r0, r1
   11432:	d921      	bls.n	11478 <ticker_job+0x300>
					   ticker_remainder_inc(ticker);
   11434:	6a20      	ldr	r0, [r4, #32]
   11436:	9009      	str	r0, [sp, #36]	; 0x24
   11438:	f106 0e01 	add.w	lr, r6, #1
   1143c:	920b      	str	r2, [sp, #44]	; 0x2c
   1143e:	e007      	b.n	11450 <ticker_job+0x2d8>
	ticker->remainder_current += ticker->remainder_periodic;
   11440:	6260      	str	r0, [r4, #36]	; 0x24
   11442:	46b3      	mov	fp, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11444:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
   11446:	3101      	adds	r1, #1
   11448:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1144a:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
   1144c:	445b      	add	r3, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1144e:	d211      	bcs.n	11474 <ticker_job+0x2fc>
	ticker->remainder_current += ticker->remainder_periodic;
   11450:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11452:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
   11454:	f8df b294 	ldr.w	fp, [pc, #660]	; 116ec <ticker_job+0x574>
	ticker->remainder_current += ticker->remainder_periodic;
   11458:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
   1145a:	4aa3      	ldr	r2, [pc, #652]	; (116e8 <ticker_job+0x570>)
   1145c:	4483      	add	fp, r0
   1145e:	4593      	cmp	fp, r2
   11460:	d8ee      	bhi.n	11440 <ticker_job+0x2c8>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11462:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
   11466:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
   1146a:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
   1146e:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
   11470:	46f3      	mov	fp, lr
   11472:	e7e7      	b.n	11444 <ticker_job+0x2cc>
   11474:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11476:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   11478:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
   1147a:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
   1147e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   11480:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
   11482:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
   11484:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
   11486:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   11488:	b136      	cbz	r6, 11498 <ticker_job+0x320>
   1148a:	6831      	ldr	r1, [r6, #0]
   1148c:	b121      	cbz	r1, 11498 <ticker_job+0x320>
			user_op->params.update.ticks_drift_plus -
   1148e:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
   11492:	6070      	str	r0, [r6, #4]
   11494:	68a3      	ldr	r3, [r4, #8]
   11496:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   11498:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
   1149c:	d121      	bne.n	114e2 <ticker_job+0x36a>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1149e:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   114a0:	4293      	cmp	r3, r2
   114a2:	d91b      	bls.n	114dc <ticker_job+0x364>
		ticks_to_expire -= ticks_to_expire_minus;
   114a4:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
   114a6:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
   114a8:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   114aa:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   114ac:	68e9      	ldr	r1, [r5, #12]
   114ae:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   114b0:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   114b2:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   114b4:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   114b6:	bf88      	it	hi
   114b8:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
   114ba:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
   114bc:	bf98      	it	ls
   114be:	2300      	movls	r3, #0
   114c0:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   114c2:	b102      	cbz	r2, 114c6 <ticker_job+0x34e>
		ticker->force = user_op->params.update.force;
   114c4:	70e2      	strb	r2, [r4, #3]
	ticker->next = *insert_head;
   114c6:	9b04      	ldr	r3, [sp, #16]
   114c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   114ca:	4619      	mov	r1, r3
   114cc:	9b01      	ldr	r3, [sp, #4]
   114ce:	548b      	strb	r3, [r1, r2]
		ticker->req++;
   114d0:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   114d2:	786a      	ldrb	r2, [r5, #1]
   114d4:	9201      	str	r2, [sp, #4]
		ticker->req++;
   114d6:	3301      	adds	r3, #1
   114d8:	7063      	strb	r3, [r4, #1]
   114da:	e6ea      	b.n	112b2 <ticker_job+0x13a>
   114dc:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
   114de:	2300      	movs	r3, #0
   114e0:	e7e2      	b.n	114a8 <ticker_job+0x330>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   114e2:	9903      	ldr	r1, [sp, #12]
   114e4:	eba1 0708 	sub.w	r7, r1, r8
   114e8:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   114ec:	429f      	cmp	r7, r3
   114ee:	d213      	bcs.n	11518 <ticker_job+0x3a0>
			ticks_to_expire -= delta_current_start;
   114f0:	1bdb      	subs	r3, r3, r7
   114f2:	e7d5      	b.n	114a0 <ticker_job+0x328>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   114f4:	f8d9 7014 	ldr.w	r7, [r9, #20]
   114f8:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
   114fa:	f00b fcfb 	bl	1cef4 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   114fe:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11500:	eba0 0c07 	sub.w	ip, r0, r7
   11504:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
   11508:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1150a:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1150c:	6961      	ldr	r1, [r4, #20]
   1150e:	440b      	add	r3, r1
   11510:	1b9a      	subs	r2, r3, r6
   11512:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
   11514:	2300      	movs	r3, #0
   11516:	e759      	b.n	113cc <ticker_job+0x254>
			ticks_to_expire_minus +=
   11518:	443a      	add	r2, r7
   1151a:	1ad2      	subs	r2, r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   1151c:	e7df      	b.n	114de <ticker_job+0x366>
   1151e:	4698      	mov	r8, r3
   11520:	e672      	b.n	11208 <ticker_job+0x90>
	while (count_user--) {
   11522:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11524:	4657      	mov	r7, sl
   11526:	42ba      	cmp	r2, r7
   11528:	f1a7 0308 	sub.w	r3, r7, #8
   1152c:	f47f aee2 	bne.w	112f4 <ticker_job+0x17c>
   11530:	f899 701d 	ldrb.w	r7, [r9, #29]
   11534:	9b06      	ldr	r3, [sp, #24]
   11536:	1bdb      	subs	r3, r3, r7
   11538:	bf18      	it	ne
   1153a:	2301      	movne	r3, #1
   1153c:	9307      	str	r3, [sp, #28]
	if (flag_elapsed) {
   1153e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11540:	46cb      	mov	fp, r9
   11542:	2b00      	cmp	r3, #0
   11544:	f040 8179 	bne.w	1183a <ticker_job+0x6c2>
	count_user = instance->count_user;
   11548:	f899 2009 	ldrb.w	r2, [r9, #9]
	node = &instance->nodes[0];
   1154c:	f8d9 3000 	ldr.w	r3, [r9]
	users = &instance->users[0];
   11550:	f8d9 1004 	ldr.w	r1, [r9, #4]
	node = &instance->nodes[0];
   11554:	9304      	str	r3, [sp, #16]
	while (count_user--) {
   11556:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
   11558:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
   1155a:	b2db      	uxtb	r3, r3
   1155c:	2a00      	cmp	r2, #0
   1155e:	f000 8110 	beq.w	11782 <ticker_job+0x60a>
   11562:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   11566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11568:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   1156a:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
   1156e:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
   11572:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
   11574:	9b01      	ldr	r3, [sp, #4]
   11576:	2bff      	cmp	r3, #255	; 0xff
   11578:	d05e      	beq.n	11638 <ticker_job+0x4c0>
				ticker = &node[id_insert];
   1157a:	f8dd a004 	ldr.w	sl, [sp, #4]
   1157e:	9b04      	ldr	r3, [sp, #16]
   11580:	fa0f f48a 	sxth.w	r4, sl
   11584:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   11588:	ea4f 1c04 	mov.w	ip, r4, lsl #4
   1158c:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
   11590:	f813 300c 	ldrb.w	r3, [r3, ip]
   11594:	9301      	str	r3, [sp, #4]
				user_op = NULL;
   11596:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   11598:	22ff      	movs	r2, #255	; 0xff
   1159a:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
   1159c:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
   115a0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
   115a4:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   115a8:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
   115aa:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
   115ac:	bf18      	it	ne
   115ae:	9202      	strne	r2, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   115b0:	d111      	bne.n	115d6 <ticker_job+0x45e>
   115b2:	e093      	b.n	116dc <ticker_job+0x564>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   115b4:	ebb1 010c 	subs.w	r1, r1, ip
   115b8:	d106      	bne.n	115c8 <ticker_job+0x450>
   115ba:	f8be e01e 	ldrh.w	lr, [lr, #30]
   115be:	f8b0 901e 	ldrh.w	r9, [r0, #30]
   115c2:	45f1      	cmp	r9, lr
   115c4:	f200 80d6 	bhi.w	11774 <ticker_job+0x5fc>
		current = ticker_current->next;
   115c8:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   115cc:	9302      	str	r3, [sp, #8]
   115ce:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   115d2:	d077      	beq.n	116c4 <ticker_job+0x54c>
   115d4:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
   115d6:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   115da:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
   115de:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
   115e2:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   115e6:	458c      	cmp	ip, r1
   115e8:	d9e4      	bls.n	115b4 <ticker_job+0x43c>
   115ea:	9a02      	ldr	r2, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
   115ec:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
   115ee:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
   115f0:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
   115f2:	d16c      	bne.n	116ce <ticker_job+0x556>
		instance->ticker_id_head = id;
   115f4:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   115f8:	2bff      	cmp	r3, #255	; 0xff
   115fa:	d006      	beq.n	1160a <ticker_job+0x492>
		node[current].ticks_to_expire -= ticks_to_expire;
   115fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11600:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   11604:	68bb      	ldr	r3, [r7, #8]
   11606:	1a59      	subs	r1, r3, r1
   11608:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
   1160a:	78a3      	ldrb	r3, [r4, #2]
   1160c:	3301      	adds	r3, #1
   1160e:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   11610:	2d00      	cmp	r5, #0
   11612:	d0af      	beq.n	11574 <ticker_job+0x3fc>
	if (user_op->fp_op_func) {
   11614:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   11616:	9a03      	ldr	r2, [sp, #12]
   11618:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   1161a:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   1161c:	b113      	cbz	r3, 11624 <ticker_job+0x4ac>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1161e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   11620:	2000      	movs	r0, #0
   11622:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   11624:	6863      	ldr	r3, [r4, #4]
   11626:	2b00      	cmp	r3, #0
   11628:	d1a4      	bne.n	11574 <ticker_job+0x3fc>
					ticker->op_context =
   1162a:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
   1162e:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   11632:	9b01      	ldr	r3, [sp, #4]
   11634:	2bff      	cmp	r3, #255	; 0xff
   11636:	d1a0      	bne.n	1157a <ticker_job+0x402>
   11638:	f898 3002 	ldrb.w	r3, [r8, #2]
   1163c:	42b3      	cmp	r3, r6
   1163e:	d02e      	beq.n	1169e <ticker_job+0x526>
   11640:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
   11642:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
   11646:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   1164a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
   1164e:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   11650:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
   11654:	b2f6      	uxtb	r6, r6
					first = 0U;
   11656:	42b0      	cmp	r0, r6
   11658:	bf08      	it	eq
   1165a:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1165c:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
   1165e:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   11662:	d11a      	bne.n	1169a <ticker_job+0x522>
				id_insert = user_op->id;
   11664:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   11668:	9b04      	ldr	r3, [sp, #16]
   1166a:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
   1166e:	eb03 140c 	add.w	r4, r3, ip, lsl #4
   11672:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
   11676:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   11678:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
   1167a:	1ac9      	subs	r1, r1, r3
   1167c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   11680:	d036      	beq.n	116f0 <ticker_job+0x578>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   11682:	9b03      	ldr	r3, [sp, #12]
   11684:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
   11688:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   1168a:	2201      	movs	r2, #1
   1168c:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1168e:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
   11690:	b10b      	cbz	r3, 11696 <ticker_job+0x51e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11692:	6b29      	ldr	r1, [r5, #48]	; 0x30
   11694:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   11696:	f898 3002 	ldrb.w	r3, [r8, #2]
   1169a:	42b3      	cmp	r3, r6
   1169c:	d1d1      	bne.n	11642 <ticker_job+0x4ca>
	while (count_user--) {
   1169e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   116a0:	4542      	cmp	r2, r8
   116a2:	f1a8 0308 	sub.w	r3, r8, #8
   116a6:	d06a      	beq.n	1177e <ticker_job+0x606>
   116a8:	4698      	mov	r8, r3
   116aa:	e75e      	b.n	1156a <ticker_job+0x3f2>
				if (ticks_elapsed > ticks_used) {
   116ac:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   116ae:	1a1b      	subs	r3, r3, r0
   116b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   116b4:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
   116b6:	bf8c      	ite	hi
   116b8:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
   116ba:	2300      	movls	r3, #0
   116bc:	e62d      	b.n	1131a <ticker_job+0x1a2>
				ticks_at_stop = cntr_cnt_get();
   116be:	f00b fc19 	bl	1cef4 <cntr_cnt_get>
   116c2:	e620      	b.n	11306 <ticker_job+0x18e>
	ticker_new->next = current;
   116c4:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   116c6:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
   116c8:	f880 c000 	strb.w	ip, [r0]
   116cc:	4663      	mov	r3, ip
		node[previous].next = id;
   116ce:	b212      	sxth	r2, r2
   116d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   116d4:	0112      	lsls	r2, r2, #4
   116d6:	f807 a002 	strb.w	sl, [r7, r2]
   116da:	e78d      	b.n	115f8 <ticker_job+0x480>
	ticker_new->next = current;
   116dc:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
   116e0:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   116e4:	e791      	b.n	1160a <ticker_job+0x492>
   116e6:	bf00      	nop
   116e8:	7f172b59 	.word	0x7f172b59
   116ec:	ff172b5a 	.word	0xff172b5a
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   116f0:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   116f2:	f8db e014 	ldr.w	lr, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   116f6:	6a68      	ldr	r0, [r5, #36]	; 0x24
   116f8:	f64f 79ff 	movw	r9, #65535	; 0xffff
   116fc:	454f      	cmp	r7, r9
   116fe:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   11702:	d02e      	beq.n	11762 <ticker_job+0x5ea>
   11704:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   11708:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1170a:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1170c:	6223      	str	r3, [r4, #32]
	ticker->timeout_func = start->fp_timeout_func;
   1170e:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   11712:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
   11714:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
   11716:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   11718:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1171a:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
   1171e:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   11722:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
   11724:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   11726:	d40c      	bmi.n	11742 <ticker_job+0x5ca>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11728:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1172c:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   1172e:	b18b      	cbz	r3, 11754 <ticker_job+0x5dc>
	ticker->ticks_to_expire = ticks_to_expire;
   11730:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   11732:	9b03      	ldr	r3, [sp, #12]
   11734:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   11736:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   11738:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1173c:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
   1173e:	70e3      	strb	r3, [r4, #3]
}
   11740:	e72a      	b.n	11598 <ticker_job+0x420>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11742:	ebae 0200 	sub.w	r2, lr, r0
   11746:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1174a:	4293      	cmp	r3, r2
   1174c:	d905      	bls.n	1175a <ticker_job+0x5e2>
			ticks_to_expire -= delta_current_start;
   1174e:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   11750:	2b00      	cmp	r3, #0
   11752:	d1ed      	bne.n	11730 <ticker_job+0x5b8>
		ticks_to_expire_minus -= ticks_to_expire;
   11754:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   11756:	2300      	movs	r3, #0
   11758:	e7ea      	b.n	11730 <ticker_job+0x5b8>
			    (delta_current_start - ticks_to_expire);
   1175a:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
   1175c:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   1175e:	2300      	movs	r3, #0
   11760:	e7e6      	b.n	11730 <ticker_job+0x5b8>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   11762:	f04f 0701 	mov.w	r7, #1
   11766:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   1176a:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1176c:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1176e:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   11770:	460f      	mov	r7, r1
   11772:	e7cc      	b.n	1170e <ticker_job+0x596>
   11774:	9a02      	ldr	r2, [sp, #8]
   11776:	4661      	mov	r1, ip
   11778:	e738      	b.n	115ec <ticker_job+0x474>
   1177a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1177c:	e658      	b.n	11430 <ticker_job+0x2b8>
   1177e:	f89b 701d 	ldrb.w	r7, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
   11782:	9b06      	ldr	r3, [sp, #24]
   11784:	42bb      	cmp	r3, r7
   11786:	f000 8334 	beq.w	11df2 <ticker_job+0xc7a>
	if (!pending) {
   1178a:	9b08      	ldr	r3, [sp, #32]
   1178c:	2b00      	cmp	r3, #0
   1178e:	f000 8356 	beq.w	11e3e <ticker_job+0xcc6>
	instance->job_guard = 0U;
   11792:	2300      	movs	r3, #0
   11794:	f89b 701d 	ldrb.w	r7, [fp, #29]
   11798:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
   1179c:	2fff      	cmp	r7, #255	; 0xff
   1179e:	f000 83dc 	beq.w	11f5a <ticker_job+0xde2>
	if (ticker_id_old_head == TICKER_NULL) {
   117a2:	9b06      	ldr	r3, [sp, #24]
   117a4:	2bff      	cmp	r3, #255	; 0xff
   117a6:	f000 83f6 	beq.w	11f96 <ticker_job+0xe1e>
	ticks_to_expire = ticker->ticks_to_expire;
   117aa:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   117ae:	f8df 9300 	ldr.w	r9, [pc, #768]	; 11ab0 <ticker_job+0x938>
   117b2:	f8df 8300 	ldr.w	r8, [pc, #768]	; 11ab4 <ticker_job+0x93c>
   117b6:	4ebd      	ldr	r6, [pc, #756]	; (11aac <ticker_job+0x934>)
	ticker = &instance->nodes[instance->ticker_id_head];
   117b8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   117bc:	eb03 1307 	add.w	r3, r3, r7, lsl #4
	i = 10U;
   117c0:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   117c2:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
   117c4:	f00b fb96 	bl	1cef4 <cntr_cnt_get>
		cc = instance->ticks_current;
   117c8:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
   117cc:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   117d0:	1ac4      	subs	r4, r0, r3
   117d2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   117d6:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   117d8:	42bc      	cmp	r4, r7
   117da:	bf2c      	ite	cs
   117dc:	191b      	addcs	r3, r3, r4
   117de:	19db      	addcc	r3, r3, r7
		cc &= HAL_TICKER_CNTR_MASK;
   117e0:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   117e4:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   117e6:	4620      	mov	r0, r4
   117e8:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
   117ea:	f00b fb83 	bl	1cef4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   117ee:	eba0 000a 	sub.w	r0, r0, sl
   117f2:	eba4 040a 	sub.w	r4, r4, sl
   117f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   117fa:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   117fe:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
   11800:	42a0      	cmp	r0, r4
		i--;
   11802:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   11806:	f240 82ff 	bls.w	11e08 <ticker_job+0xc90>
		LL_ASSERT(i);
   1180a:	2d00      	cmp	r5, #0
   1180c:	d1da      	bne.n	117c4 <ticker_job+0x64c>
   1180e:	f640 0391 	movw	r3, #2193	; 0x891
   11812:	464a      	mov	r2, r9
   11814:	4641      	mov	r1, r8
   11816:	4630      	mov	r0, r6
   11818:	f00e ff12 	bl	20640 <printk>
   1181c:	4040      	eors	r0, r0
   1181e:	f380 8811 	msr	BASEPRI, r0
   11822:	f04f 0003 	mov.w	r0, #3
   11826:	df02      	svc	2
   11828:	e7cc      	b.n	117c4 <ticker_job+0x64c>
	if (flag_elapsed) {
   1182a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1182c:	2b00      	cmp	r3, #0
   1182e:	f000 82f9 	beq.w	11e24 <ticker_job+0xcac>
	pending = 0U;
   11832:	9b07      	ldr	r3, [sp, #28]
   11834:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   11836:	23ff      	movs	r3, #255	; 0xff
   11838:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   1183a:	f00b fb5b 	bl	1cef4 <cntr_cnt_get>
	node = &instance->nodes[0];
   1183e:	f8db 3000 	ldr.w	r3, [fp]
	while (instance->ticker_id_head != TICKER_NULL) {
   11842:	f89b 501d 	ldrb.w	r5, [fp, #29]
	node = &instance->nodes[0];
   11846:	9303      	str	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11848:	9b05      	ldr	r3, [sp, #20]
	while (instance->ticker_id_head != TICKER_NULL) {
   1184a:	2dff      	cmp	r5, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1184c:	eba0 0003 	sub.w	r0, r0, r3
   11850:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   11854:	d054      	beq.n	11900 <ticker_job+0x788>
   11856:	f8dd a008 	ldr.w	sl, [sp, #8]
	ticks_expired = 0U;
   1185a:	f04f 0900 	mov.w	r9, #0
			instance->ticker_id_slot_previous = TICKER_NULL;
   1185e:	464b      	mov	r3, r9
   11860:	46d1      	mov	r9, sl
   11862:	46c2      	mov	sl, r8
   11864:	4698      	mov	r8, r3
		ticker = &node[id_expired];
   11866:	9b03      	ldr	r3, [sp, #12]
   11868:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   1186c:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   11870:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   11872:	454b      	cmp	r3, r9
   11874:	f200 82dc 	bhi.w	11e30 <ticker_job+0xcb8>
		is_must_expire_skip = (ticker->must_expire &&
   11878:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
		ticks_elapsed -= ticks_to_expire;
   1187c:	eba9 0903 	sub.w	r9, r9, r3
		ticks_expired += ticks_to_expire;
   11880:	4498      	add	r8, r3
		ticks_latency -= ticks_to_expire;
   11882:	ebaa 0a03 	sub.w	sl, sl, r3
		is_must_expire_skip = (ticker->must_expire &&
   11886:	2900      	cmp	r1, #0
   11888:	f000 8138 	beq.w	11afc <ticker_job+0x984>
   1188c:	8be6      	ldrh	r6, [r4, #30]
   1188e:	3e00      	subs	r6, #0
   11890:	bf18      	it	ne
   11892:	2601      	movne	r6, #1
		if (instance->ticks_slot_previous > ticks_to_expire) {
   11894:	f8db 2018 	ldr.w	r2, [fp, #24]
   11898:	4293      	cmp	r3, r2
			instance->ticker_id_slot_previous = TICKER_NULL;
   1189a:	bf25      	ittet	cs
   1189c:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   118a0:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   118a4:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   118a6:	2300      	movcs	r3, #0
		if ((ticker->ticks_slot != 0U) &&
   118a8:	69a7      	ldr	r7, [r4, #24]
			instance->ticks_slot_previous = 0U;
   118aa:	f8cb 3018 	str.w	r3, [fp, #24]
   118ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   118b0:	6860      	ldr	r0, [r4, #4]
   118b2:	f894 c000 	ldrb.w	ip, [r4]
		if ((ticker->ticks_slot != 0U) &&
   118b6:	b147      	cbz	r7, 118ca <ticker_job+0x752>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
   118b8:	7863      	ldrb	r3, [r4, #1]
   118ba:	f894 e002 	ldrb.w	lr, [r4, #2]
   118be:	eba3 030e 	sub.w	r3, r3, lr
   118c2:	b2db      	uxtb	r3, r3
		if ((ticker->ticks_slot != 0U) &&
   118c4:	2b02      	cmp	r3, #2
   118c6:	f000 8147 	beq.w	11b58 <ticker_job+0x9e0>
		ticker->ticks_to_expire = 0U;
   118ca:	2300      	movs	r3, #0
   118cc:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
   118ce:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   118d2:	2800      	cmp	r0, #0
   118d4:	f040 80d6 	bne.w	11a84 <ticker_job+0x90c>
   118d8:	b11a      	cbz	r2, 118e2 <ticker_job+0x76a>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   118da:	7a13      	ldrb	r3, [r2, #8]
   118dc:	2b01      	cmp	r3, #1
   118de:	f000 8115 	beq.w	11b0c <ticker_job+0x994>
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
   118e2:	78a2      	ldrb	r2, [r4, #2]
   118e4:	7860      	ldrb	r0, [r4, #1]
   118e6:	1a80      	subs	r0, r0, r2
   118e8:	b2c0      	uxtb	r0, r0
   118ea:	2801      	cmp	r0, #1
   118ec:	f000 80c2 	beq.w	11a74 <ticker_job+0x8fc>
			ticker->req = ticker->ack;
   118f0:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   118f2:	f89b 501d 	ldrb.w	r5, [fp, #29]
   118f6:	2dff      	cmp	r5, #255	; 0xff
   118f8:	d1b5      	bne.n	11866 <ticker_job+0x6ee>
   118fa:	f8db 3000 	ldr.w	r3, [fp]
   118fe:	9303      	str	r3, [sp, #12]
			flag_compare_update = 1U;
   11900:	e9dd 4006 	ldrd	r4, r0, [sp, #24]
	count_user = instance->count_user;
   11904:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
   11908:	f8db 1004 	ldr.w	r1, [fp, #4]
   1190c:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
   1190e:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
   11910:	42ac      	cmp	r4, r5
   11912:	bf18      	it	ne
   11914:	2001      	movne	r0, #1
   11916:	9007      	str	r0, [sp, #28]
	while (count_user--) {
   11918:	b2db      	uxtb	r3, r3
   1191a:	2a00      	cmp	r2, #0
   1191c:	f000 818a 	beq.w	11c34 <ticker_job+0xabc>
   11920:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
   11924:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
   11928:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
   1192c:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
   1192e:	9b01      	ldr	r3, [sp, #4]
   11930:	2bff      	cmp	r3, #255	; 0xff
   11932:	d062      	beq.n	119fa <ticker_job+0x882>
				ticker = &node[id_insert];
   11934:	f8dd a004 	ldr.w	sl, [sp, #4]
   11938:	9b03      	ldr	r3, [sp, #12]
   1193a:	fa0f f48a 	sxth.w	r4, sl
   1193e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   11942:	ea4f 1c04 	mov.w	ip, r4, lsl #4
   11946:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
   1194a:	f813 300c 	ldrb.w	r3, [r3, ip]
   1194e:	9301      	str	r3, [sp, #4]
				user_op = NULL;
   11950:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   11952:	22ff      	movs	r2, #255	; 0xff
   11954:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
   11956:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
   1195a:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
   1195e:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   11962:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
   11964:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
   11966:	bf18      	it	ne
   11968:	9204      	strne	r2, [sp, #16]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1196a:	d112      	bne.n	11992 <ticker_job+0x81a>
   1196c:	e15a      	b.n	11c24 <ticker_job+0xaac>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   1196e:	ebb1 010c 	subs.w	r1, r1, ip
   11972:	d106      	bne.n	11982 <ticker_job+0x80a>
   11974:	f8be e01e 	ldrh.w	lr, [lr, #30]
   11978:	f8b0 901e 	ldrh.w	r9, [r0, #30]
   1197c:	45f1      	cmp	r9, lr
   1197e:	f200 810c 	bhi.w	11b9a <ticker_job+0xa22>
		current = ticker_current->next;
   11982:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   11986:	9304      	str	r3, [sp, #16]
   11988:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1198c:	f000 80f9 	beq.w	11b82 <ticker_job+0xa0a>
   11990:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
   11992:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   11996:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
   1199a:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
   1199e:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   119a2:	458c      	cmp	ip, r1
   119a4:	d9e3      	bls.n	1196e <ticker_job+0x7f6>
   119a6:	9a04      	ldr	r2, [sp, #16]
	ticker_new->ticks_to_expire = ticks_to_expire;
   119a8:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
   119aa:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
   119ac:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
   119ae:	f040 80ed 	bne.w	11b8c <ticker_job+0xa14>
		instance->ticker_id_head = id;
   119b2:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   119b6:	2bff      	cmp	r3, #255	; 0xff
   119b8:	d006      	beq.n	119c8 <ticker_job+0x850>
		node[current].ticks_to_expire -= ticks_to_expire;
   119ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   119be:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   119c2:	68bb      	ldr	r3, [r7, #8]
   119c4:	1a59      	subs	r1, r3, r1
   119c6:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
   119c8:	78a3      	ldrb	r3, [r4, #2]
   119ca:	3301      	adds	r3, #1
   119cc:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   119ce:	2d00      	cmp	r5, #0
   119d0:	d0ad      	beq.n	1192e <ticker_job+0x7b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   119d2:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   119d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   119d8:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   119da:	2200      	movs	r2, #0
   119dc:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   119de:	b113      	cbz	r3, 119e6 <ticker_job+0x86e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   119e0:	6b29      	ldr	r1, [r5, #48]	; 0x30
   119e2:	4610      	mov	r0, r2
   119e4:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   119e6:	6863      	ldr	r3, [r4, #4]
   119e8:	2b00      	cmp	r3, #0
   119ea:	d1a0      	bne.n	1192e <ticker_job+0x7b6>
					ticker->op_context =
   119ec:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
   119f0:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   119f4:	9b01      	ldr	r3, [sp, #4]
   119f6:	2bff      	cmp	r3, #255	; 0xff
   119f8:	d19c      	bne.n	11934 <ticker_job+0x7bc>
   119fa:	f898 3002 	ldrb.w	r3, [r8, #2]
   119fe:	42b3      	cmp	r3, r6
   11a00:	d030      	beq.n	11a64 <ticker_job+0x8ec>
   11a02:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
   11a04:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
   11a08:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   11a0c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
   11a10:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   11a12:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
   11a16:	b2f6      	uxtb	r6, r6
					first = 0U;
   11a18:	42b0      	cmp	r0, r6
   11a1a:	bf08      	it	eq
   11a1c:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   11a1e:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
   11a20:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   11a24:	d11c      	bne.n	11a60 <ticker_job+0x8e8>
				id_insert = user_op->id;
   11a26:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   11a2a:	9b03      	ldr	r3, [sp, #12]
   11a2c:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
   11a30:	eb03 140c 	add.w	r4, r3, ip, lsl #4
   11a34:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
   11a38:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   11a3a:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
   11a3c:	1ac9      	subs	r1, r1, r3
   11a3e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   11a42:	f000 80ad 	beq.w	11ba0 <ticker_job+0xa28>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   11a46:	f04f 0300 	mov.w	r3, #0
   11a4a:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
   11a4e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   11a50:	2201      	movs	r2, #1
   11a52:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11a54:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
   11a56:	b10b      	cbz	r3, 11a5c <ticker_job+0x8e4>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11a58:	6b29      	ldr	r1, [r5, #48]	; 0x30
   11a5a:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   11a5c:	f898 3002 	ldrb.w	r3, [r8, #2]
   11a60:	42b3      	cmp	r3, r6
   11a62:	d1cf      	bne.n	11a04 <ticker_job+0x88c>
	while (count_user--) {
   11a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11a66:	4542      	cmp	r2, r8
   11a68:	f1a8 0308 	sub.w	r3, r8, #8
   11a6c:	f000 80df 	beq.w	11c2e <ticker_job+0xab6>
   11a70:	4698      	mov	r8, r3
   11a72:	e757      	b.n	11924 <ticker_job+0x7ac>
			    ticker->fp_op_func) {
   11a74:	6a23      	ldr	r3, [r4, #32]
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
   11a76:	2b00      	cmp	r3, #0
   11a78:	f43f af3a 	beq.w	118f0 <ticker_job+0x778>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   11a7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11a7e:	4798      	blx	r3
   11a80:	78a2      	ldrb	r2, [r4, #2]
   11a82:	e735      	b.n	118f0 <ticker_job+0x778>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   11a84:	b112      	cbz	r2, 11a8c <ticker_job+0x914>
   11a86:	7a13      	ldrb	r3, [r2, #8]
   11a88:	2b01      	cmp	r3, #1
   11a8a:	d03f      	beq.n	11b0c <ticker_job+0x994>
				if (!ticker->lazy_current) {
   11a8c:	8be3      	ldrh	r3, [r4, #30]
   11a8e:	930a      	str	r3, [sp, #40]	; 0x28
   11a90:	2b00      	cmp	r3, #0
   11a92:	d170      	bne.n	11b76 <ticker_job+0x9fe>
					lazy_periodic = ticker->lazy_periodic;
   11a94:	8ba3      	ldrh	r3, [r4, #28]
   11a96:	7866      	ldrb	r6, [r4, #1]
   11a98:	9304      	str	r3, [sp, #16]
   11a9a:	469e      	mov	lr, r3
				while (count--) {
   11a9c:	1c47      	adds	r7, r0, #1
   11a9e:	9709      	str	r7, [sp, #36]	; 0x24
   11aa0:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
				ticks_to_expire = 0U;
   11aa4:	2300      	movs	r3, #0
   11aa6:	910b      	str	r1, [sp, #44]	; 0x2c
   11aa8:	4677      	mov	r7, lr
   11aaa:	e00a      	b.n	11ac2 <ticker_job+0x94a>
   11aac:	00026ecc 	.word	0x00026ecc
   11ab0:	00026e8c 	.word	0x00026e8c
   11ab4:	00026f90 	.word	0x00026f90
				while (count--) {
   11ab8:	3f01      	subs	r7, #1
   11aba:	4686      	mov	lr, r0
   11abc:	1c79      	adds	r1, r7, #1
					ticks_to_expire +=
   11abe:	4473      	add	r3, lr
				while (count--) {
   11ac0:	d012      	beq.n	11ae8 <ticker_job+0x970>
	if ((ticker->remainder_current < BIT(31)) &&
   11ac2:	f8df e2d8 	ldr.w	lr, [pc, #728]	; 11d9c <ticker_job+0xc24>
   11ac6:	49b4      	ldr	r1, [pc, #720]	; (11d98 <ticker_job+0xc20>)
	ticker->remainder_current += ticker->remainder_periodic;
   11ac8:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   11aca:	4496      	add	lr, r2
   11acc:	458e      	cmp	lr, r1
   11ace:	d8f3      	bhi.n	11ab8 <ticker_job+0x940>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11ad0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   11ad4:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
   11ad8:	3f01      	subs	r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11ada:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
				while (count--) {
   11ade:	1c79      	adds	r1, r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11ae0:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
					ticks_to_expire +=
   11ae4:	4473      	add	r3, lr
				while (count--) {
   11ae6:	d1ec      	bne.n	11ac2 <ticker_job+0x94a>
   11ae8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11aea:	6262      	str	r2, [r4, #36]	; 0x24
				if (!ticker->must_expire) {
   11aec:	2900      	cmp	r1, #0
   11aee:	f000 814b 	beq.w	11d88 <ticker_job+0xc10>
				ticker->lazy_current += (lazy_periodic + lazy);
   11af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11af4:	9904      	ldr	r1, [sp, #16]
   11af6:	440a      	add	r2, r1
   11af8:	83e2      	strh	r2, [r4, #30]
   11afa:	e009      	b.n	11b10 <ticker_job+0x998>
		is_must_expire_skip = (ticker->must_expire &&
   11afc:	460e      	mov	r6, r1
   11afe:	e6c9      	b.n	11894 <ticker_job+0x71c>
		ticker->ticks_to_expire = 0U;
   11b00:	60a6      	str	r6, [r4, #8]
		instance->ticker_id_head = ticker->next;
   11b02:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   11b06:	2800      	cmp	r0, #0
   11b08:	f43f aee7 	beq.w	118da <ticker_job+0x762>
				ticker->req = ticker->ack;
   11b0c:	78a6      	ldrb	r6, [r4, #2]
   11b0e:	464b      	mov	r3, r9
			ticks_to_expire_prep(ticker, instance->ticks_current,
   11b10:	9805      	ldr	r0, [sp, #20]
   11b12:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   11b16:	6961      	ldr	r1, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   11b18:	eb00 0708 	add.w	r7, r0, r8
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   11b1c:	1ab8      	subs	r0, r7, r2
   11b1e:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   11b22:	d10e      	bne.n	11b42 <ticker_job+0x9ca>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11b24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   11b28:	4403      	add	r3, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
   11b2a:	4299      	cmp	r1, r3
   11b2c:	d211      	bcs.n	11b52 <ticker_job+0x9da>
		ticks_to_expire -= ticks_to_expire_minus;
   11b2e:	1a5b      	subs	r3, r3, r1
		ticks_to_expire_minus = 0U;
   11b30:	2100      	movs	r1, #0
			ticker->next = *insert_head;
   11b32:	9a01      	ldr	r2, [sp, #4]
   11b34:	7022      	strb	r2, [r4, #0]
			ticker->req++;
   11b36:	3601      	adds	r6, #1
   11b38:	7066      	strb	r6, [r4, #1]
	ticker->ticks_to_expire = ticks_to_expire;
   11b3a:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   11b3c:	6161      	str	r1, [r4, #20]
			ticker->req++;
   11b3e:	9501      	str	r5, [sp, #4]
   11b40:	e6d7      	b.n	118f2 <ticker_job+0x77a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11b42:	1bd2      	subs	r2, r2, r7
   11b44:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   11b48:	429a      	cmp	r2, r3
   11b4a:	d211      	bcs.n	11b70 <ticker_job+0x9f8>
			ticks_to_expire -= delta_current_start;
   11b4c:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   11b4e:	4299      	cmp	r1, r3
   11b50:	d3ed      	bcc.n	11b2e <ticker_job+0x9b6>
   11b52:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   11b54:	2300      	movs	r3, #0
   11b56:	e7ec      	b.n	11b32 <ticker_job+0x9ba>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
   11b58:	2e00      	cmp	r6, #0
   11b5a:	f47f aeb6 	bne.w	118ca <ticker_job+0x752>
		    !is_must_expire_skip &&
   11b5e:	b112      	cbz	r2, 11b66 <ticker_job+0x9ee>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   11b60:	7a13      	ldrb	r3, [r2, #8]
   11b62:	2b01      	cmp	r3, #1
   11b64:	d0cc      	beq.n	11b00 <ticker_job+0x988>
			instance->ticker_id_slot_previous = id_expired;
   11b66:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   11b6a:	f8cb 7018 	str.w	r7, [fp, #24]
   11b6e:	e6ac      	b.n	118ca <ticker_job+0x752>
			ticks_to_expire_minus +=
   11b70:	4411      	add	r1, r2
   11b72:	1ac9      	subs	r1, r1, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   11b74:	e7ee      	b.n	11b54 <ticker_job+0x9dc>
					ticker->req = ticker->ack;
   11b76:	f04f 0e00 	mov.w	lr, #0
   11b7a:	78a6      	ldrb	r6, [r4, #2]
					lazy_periodic = 0U;
   11b7c:	f8cd e010 	str.w	lr, [sp, #16]
   11b80:	e78c      	b.n	11a9c <ticker_job+0x924>
	ticker_new->next = current;
   11b82:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   11b84:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
   11b86:	f880 c000 	strb.w	ip, [r0]
   11b8a:	4663      	mov	r3, ip
		node[previous].next = id;
   11b8c:	b212      	sxth	r2, r2
   11b8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11b92:	0112      	lsls	r2, r2, #4
   11b94:	f807 a002 	strb.w	sl, [r7, r2]
   11b98:	e70d      	b.n	119b6 <ticker_job+0x83e>
   11b9a:	9a04      	ldr	r2, [sp, #16]
   11b9c:	4661      	mov	r1, ip
   11b9e:	e703      	b.n	119a8 <ticker_job+0x830>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   11ba0:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   11ba2:	f8db e014 	ldr.w	lr, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   11ba6:	6a68      	ldr	r0, [r5, #36]	; 0x24
   11ba8:	f64f 79ff 	movw	r9, #65535	; 0xffff
   11bac:	454f      	cmp	r7, r9
   11bae:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   11bb2:	d02e      	beq.n	11c12 <ticker_job+0xa9a>
   11bb4:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   11bb8:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   11bba:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   11bbc:	6223      	str	r3, [r4, #32]
	ticker->timeout_func = start->fp_timeout_func;
   11bbe:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   11bc2:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
   11bc4:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
   11bc6:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   11bc8:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   11bca:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
   11bce:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   11bd2:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
   11bd4:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   11bd6:	d40c      	bmi.n	11bf2 <ticker_job+0xa7a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11bd8:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   11bdc:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   11bde:	b18b      	cbz	r3, 11c04 <ticker_job+0xa8c>
	ticker->ticks_to_expire = ticks_to_expire;
   11be0:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   11be2:	2300      	movs	r3, #0
   11be4:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   11be6:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   11be8:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   11bec:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
   11bee:	70e3      	strb	r3, [r4, #3]
}
   11bf0:	e6af      	b.n	11952 <ticker_job+0x7da>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11bf2:	ebae 0200 	sub.w	r2, lr, r0
   11bf6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   11bfa:	4293      	cmp	r3, r2
   11bfc:	d905      	bls.n	11c0a <ticker_job+0xa92>
			ticks_to_expire -= delta_current_start;
   11bfe:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   11c00:	2b00      	cmp	r3, #0
   11c02:	d1ed      	bne.n	11be0 <ticker_job+0xa68>
		ticks_to_expire_minus -= ticks_to_expire;
   11c04:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   11c06:	2300      	movs	r3, #0
   11c08:	e7ea      	b.n	11be0 <ticker_job+0xa68>
			    (delta_current_start - ticks_to_expire);
   11c0a:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
   11c0c:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   11c0e:	2300      	movs	r3, #0
   11c10:	e7e6      	b.n	11be0 <ticker_job+0xa68>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   11c12:	f04f 0701 	mov.w	r7, #1
   11c16:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   11c1a:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   11c1c:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   11c1e:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   11c20:	460f      	mov	r7, r1
   11c22:	e7cc      	b.n	11bbe <ticker_job+0xa46>
	ticker_new->next = current;
   11c24:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
   11c28:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   11c2c:	e6cc      	b.n	119c8 <ticker_job+0x850>
   11c2e:	f8db 3000 	ldr.w	r3, [fp]
   11c32:	9303      	str	r3, [sp, #12]
	while (rescheduling) {
   11c34:	f89b 701d 	ldrb.w	r7, [fp, #29]
   11c38:	9e03      	ldr	r6, [sp, #12]
	uint8_t  rescheduled = 0U;
   11c3a:	2300      	movs	r3, #0
   11c3c:	46ba      	mov	sl, r7
		while (ticker_id_head != TICKER_NULL) {
   11c3e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   11c42:	d010      	beq.n	11c66 <ticker_job+0xaee>
   11c44:	46d1      	mov	r9, sl
			ticker = &nodes[ticker_id_head];
   11c46:	fa0f f289 	sxth.w	r2, r9
   11c4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11c4e:	eb06 1202 	add.w	r2, r6, r2, lsl #4
			ext_data = ticker->ext_data;
   11c52:	6a97      	ldr	r7, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   11c54:	b117      	cbz	r7, 11c5c <ticker_job+0xae4>
   11c56:	7a39      	ldrb	r1, [r7, #8]
   11c58:	2901      	cmp	r1, #1
   11c5a:	d014      	beq.n	11c86 <ticker_job+0xb0e>
			ticker_id_head = ticker->next;
   11c5c:	f892 9000 	ldrb.w	r9, [r2]
		while (ticker_id_head != TICKER_NULL) {
   11c60:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   11c64:	d1ef      	bne.n	11c46 <ticker_job+0xace>
	return rescheduled;
   11c66:	4657      	mov	r7, sl
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   11c68:	2b00      	cmp	r3, #0
   11c6a:	f43f ad8a 	beq.w	11782 <ticker_job+0x60a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11c6e:	9a06      	ldr	r2, [sp, #24]
   11c70:	42ba      	cmp	r2, r7
   11c72:	f47f ad8a 	bne.w	1178a <ticker_job+0x612>
	if (!pending) {
   11c76:	9a08      	ldr	r2, [sp, #32]
   11c78:	2a00      	cmp	r2, #0
   11c7a:	f000 817c 	beq.w	11f76 <ticker_job+0xdfe>
	instance->job_guard = 0U;
   11c7e:	2300      	movs	r3, #0
   11c80:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   11c84:	e58a      	b.n	1179c <ticker_job+0x624>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   11c86:	f89b 301c 	ldrb.w	r3, [fp, #28]
   11c8a:	2bff      	cmp	r3, #255	; 0xff
   11c8c:	d071      	beq.n	11d72 <ticker_job+0xbfa>
			instance->ticks_slot_previous > ticks_elapsed) {
   11c8e:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   11c92:	9b02      	ldr	r3, [sp, #8]
   11c94:	4283      	cmp	r3, r0
   11c96:	d26c      	bcs.n	11d72 <ticker_job+0xbfa>
			window_start_ticks = instance->ticks_slot_previous -
   11c98:	1ac0      	subs	r0, r0, r3
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   11c9a:	e9d7 4300 	ldrd	r4, r3, [r7]
   11c9e:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
   11ca0:	f892 c000 	ldrb.w	ip, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   11ca4:	d26d      	bcs.n	11d82 <ticker_job+0xc0a>
		while (ticker_id_iter != TICKER_NULL &&
   11ca6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   11caa:	eba4 0403 	sub.w	r4, r4, r3
		while (ticker_id_iter != TICKER_NULL &&
   11cae:	d068      	beq.n	11d82 <ticker_job+0xc0a>
		       ticks_start_offset + ticker->ticks_slot <=
   11cb0:	6995      	ldr	r5, [r2, #24]
		while (ticker_id_iter != TICKER_NULL &&
   11cb2:	42ac      	cmp	r4, r5
   11cb4:	f04f 0300 	mov.w	r3, #0
   11cb8:	d333      	bcc.n	11d22 <ticker_job+0xbaa>
   11cba:	469e      	mov	lr, r3
   11cbc:	9501      	str	r5, [sp, #4]
   11cbe:	4661      	mov	r1, ip
   11cc0:	9203      	str	r2, [sp, #12]
   11cc2:	e01d      	b.n	11d00 <ticker_job+0xb88>
			if (node->ticks_to_expire >
   11cc4:	f8d1 8008 	ldr.w	r8, [r1, #8]
					MIN(ticks_slot_window,
   11cc8:	f1a8 0304 	sub.w	r3, r8, #4
			if (node->ticks_to_expire >
   11ccc:	f1b8 0f04 	cmp.w	r8, #4
					MIN(ticks_slot_window,
   11cd0:	4473      	add	r3, lr
			if (node->ticks_to_expire >
   11cd2:	d909      	bls.n	11ce8 <ticker_job+0xb70>
				window_end_ticks =
   11cd4:	42a3      	cmp	r3, r4
			if (window_end_ticks > ticks_start_offset +
   11cd6:	9a01      	ldr	r2, [sp, #4]
				window_end_ticks =
   11cd8:	bf28      	it	cs
   11cda:	4623      	movcs	r3, r4
			if (window_end_ticks > ticks_start_offset +
   11cdc:	4293      	cmp	r3, r2
   11cde:	d903      	bls.n	11ce8 <ticker_job+0xb70>
			if (ticks_to_expire != 0U &&
   11ce0:	1b5b      	subs	r3, r3, r5
   11ce2:	d001      	beq.n	11ce8 <ticker_job+0xb70>
   11ce4:	4283      	cmp	r3, r0
   11ce6:	d21b      	bcs.n	11d20 <ticker_job+0xba8>
			window_start_ticks  = node->ticks_to_expire +
   11ce8:	6988      	ldr	r0, [r1, #24]
			ticker_id_iter = node->next;
   11cea:	7809      	ldrb	r1, [r1, #0]
			ticks_start_offset += node->ticks_to_expire;
   11cec:	44c6      	add	lr, r8
			window_start_ticks  = node->ticks_to_expire +
   11cee:	4440      	add	r0, r8
			ticks_to_expire     = ticks_slot_window -
   11cf0:	1b63      	subs	r3, r4, r5
		       ticks_start_offset + ticker->ticks_slot <=
   11cf2:	eb0e 0205 	add.w	r2, lr, r5
		while (ticker_id_iter != TICKER_NULL &&
   11cf6:	29ff      	cmp	r1, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   11cf8:	9201      	str	r2, [sp, #4]
		while (ticker_id_iter != TICKER_NULL &&
   11cfa:	d011      	beq.n	11d20 <ticker_job+0xba8>
   11cfc:	4294      	cmp	r4, r2
   11cfe:	d30f      	bcc.n	11d20 <ticker_job+0xba8>
			node = &nodes[ticker_id_iter];
   11d00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   11d04:	eb06 1101 	add.w	r1, r6, r1, lsl #4
			if (node->ext_data &&
   11d08:	f8d1 8028 	ldr.w	r8, [r1, #40]	; 0x28
   11d0c:	f1b8 0f00 	cmp.w	r8, #0
   11d10:	d0d8      	beq.n	11cc4 <ticker_job+0xb4c>
   11d12:	f898 8008 	ldrb.w	r8, [r8, #8]
   11d16:	f1b8 0f01 	cmp.w	r8, #1
   11d1a:	d1d3      	bne.n	11cc4 <ticker_job+0xb4c>
				ticker_id_iter = node->next;
   11d1c:	7809      	ldrb	r1, [r1, #0]
				continue;
   11d1e:	e7e8      	b.n	11cf2 <ticker_job+0xb7a>
   11d20:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
   11d22:	6093      	str	r3, [r2, #8]
   11d24:	4664      	mov	r4, ip
   11d26:	f04f 0eff 	mov.w	lr, #255	; 0xff
   11d2a:	e000      	b.n	11d2e <ticker_job+0xbb6>
   11d2c:	4604      	mov	r4, r0
			node = &nodes[ticker_id_iter];
   11d2e:	b221      	sxth	r1, r4
   11d30:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   11d34:	eb06 1800 	add.w	r8, r6, r0, lsl #4
   11d38:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   11d3a:	f8d8 5008 	ldr.w	r5, [r8, #8]
   11d3e:	429d      	cmp	r5, r3
   11d40:	d24e      	bcs.n	11de0 <ticker_job+0xc68>
				ticker->ticks_to_expire -=
   11d42:	1b5b      	subs	r3, r3, r5
   11d44:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
   11d46:	5c30      	ldrb	r0, [r6, r0]
		while (ticker_id_iter != TICKER_NULL) {
   11d48:	28ff      	cmp	r0, #255	; 0xff
   11d4a:	46a6      	mov	lr, r4
   11d4c:	d1ee      	bne.n	11d2c <ticker_job+0xbb4>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   11d4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   11d52:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   11d54:	f88b c01d 	strb.w	ip, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   11d58:	5c73      	ldrb	r3, [r6, r1]
   11d5a:	7013      	strb	r3, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   11d5c:	f806 9001 	strb.w	r9, [r6, r1]
   11d60:	46e2      	mov	sl, ip
		ticker->lazy_current--;
   11d62:	8bd3      	ldrh	r3, [r2, #30]
   11d64:	3b01      	subs	r3, #1
   11d66:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
   11d68:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
   11d6c:	2301      	movs	r3, #1
		ext_data->reschedule_state =
   11d6e:	723a      	strb	r2, [r7, #8]
		rescheduled  = 1U;
   11d70:	e765      	b.n	11c3e <ticker_job+0xac6>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   11d72:	e9d7 4300 	ldrd	r4, r3, [r7]
   11d76:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
   11d78:	f892 c000 	ldrb.w	ip, [r2]
		window_start_ticks = 0U;
   11d7c:	f04f 0000 	mov.w	r0, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   11d80:	d391      	bcc.n	11ca6 <ticker_job+0xb2e>
		ticker->ticks_to_expire = ticks_to_expire;
   11d82:	2300      	movs	r3, #0
   11d84:	6093      	str	r3, [r2, #8]
		while (ticker_id_iter != TICKER_NULL) {
   11d86:	e7ec      	b.n	11d62 <ticker_job+0xbea>
					while (ticks_to_expire <
   11d88:	459a      	cmp	sl, r3
   11d8a:	f67f aeb2 	bls.w	11af2 <ticker_job+0x97a>
   11d8e:	f100 0e01 	add.w	lr, r0, #1
   11d92:	9409      	str	r4, [sp, #36]	; 0x24
   11d94:	e00a      	b.n	11dac <ticker_job+0xc34>
   11d96:	bf00      	nop
   11d98:	7f172b59 	.word	0x7f172b59
   11d9c:	ff172b5a 	.word	0xff172b5a
   11da0:	4607      	mov	r7, r0
						ticks_to_expire +=
   11da2:	443b      	add	r3, r7
						lazy++;
   11da4:	3101      	adds	r1, #1
					while (ticks_to_expire <
   11da6:	459a      	cmp	sl, r3
						lazy++;
   11da8:	b289      	uxth	r1, r1
					while (ticks_to_expire <
   11daa:	d911      	bls.n	11dd0 <ticker_job+0xc58>
	if ((ticker->remainder_current < BIT(31)) &&
   11dac:	4f81      	ldr	r7, [pc, #516]	; (11fb4 <ticker_job+0xe3c>)
   11dae:	4c82      	ldr	r4, [pc, #520]	; (11fb8 <ticker_job+0xe40>)
	ticker->remainder_current += ticker->remainder_periodic;
   11db0:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   11db2:	19d7      	adds	r7, r2, r7
   11db4:	42a7      	cmp	r7, r4
   11db6:	d8f3      	bhi.n	11da0 <ticker_job+0xc28>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11db8:	4677      	mov	r7, lr
   11dba:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
   11dbe:	443b      	add	r3, r7
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11dc0:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
   11dc4:	3101      	adds	r1, #1
					while (ticks_to_expire <
   11dc6:	459a      	cmp	sl, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11dc8:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
   11dcc:	b289      	uxth	r1, r1
					while (ticks_to_expire <
   11dce:	d8ed      	bhi.n	11dac <ticker_job+0xc34>
   11dd0:	9804      	ldr	r0, [sp, #16]
   11dd2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   11dd4:	4408      	add	r0, r1
   11dd6:	b281      	uxth	r1, r0
   11dd8:	9104      	str	r1, [sp, #16]
   11dda:	6262      	str	r2, [r4, #36]	; 0x24
   11ddc:	e689      	b.n	11af2 <ticker_job+0x97a>
   11dde:	4770      	bx	lr
				node->ticks_to_expire -=
   11de0:	1aeb      	subs	r3, r5, r3
		if (ticker_id_prev != TICKER_NULL) {
   11de2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   11de6:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
   11dea:	d0ba      	beq.n	11d62 <ticker_job+0xbea>
   11dec:	fa0f f18e 	sxth.w	r1, lr
   11df0:	e7ad      	b.n	11d4e <ticker_job+0xbd6>
	if (!pending) {
   11df2:	9b08      	ldr	r3, [sp, #32]
   11df4:	2b00      	cmp	r3, #0
   11df6:	f000 80a6 	beq.w	11f46 <ticker_job+0xdce>
	instance->job_guard = 0U;
   11dfa:	2300      	movs	r3, #0
   11dfc:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   11e00:	9b07      	ldr	r3, [sp, #28]
   11e02:	2b00      	cmp	r3, #0
   11e04:	f040 80c4 	bne.w	11f90 <ticker_job+0xe18>
   11e08:	f89b 201f 	ldrb.w	r2, [fp, #31]
	if (instance->worker_trigger) {
   11e0c:	b16a      	cbz	r2, 11e2a <ticker_job+0xcb2>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   11e0e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   11e12:	465b      	mov	r3, fp
   11e14:	2201      	movs	r2, #1
   11e16:	2103      	movs	r1, #3
   11e18:	2004      	movs	r0, #4
   11e1a:	46a4      	mov	ip, r4
}
   11e1c:	b00f      	add	sp, #60	; 0x3c
   11e1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   11e22:	4760      	bx	ip
	instance->job_guard = 0U;
   11e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11e26:	f88b 301e 	strb.w	r3, [fp, #30]
}
   11e2a:	b00f      	add	sp, #60	; 0x3c
   11e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticker->ticks_to_expire -= ticks_elapsed;
   11e30:	eba3 0309 	sub.w	r3, r3, r9
   11e34:	60a3      	str	r3, [r4, #8]
			break;
   11e36:	f8db 3000 	ldr.w	r3, [fp]
   11e3a:	9303      	str	r3, [sp, #12]
   11e3c:	e560      	b.n	11900 <ticker_job+0x788>
	count_user = instance->count_user;
   11e3e:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   11e42:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   11e46:	1e5c      	subs	r4, r3, #1
   11e48:	b2e4      	uxtb	r4, r4
   11e4a:	2b00      	cmp	r3, #0
   11e4c:	f43f aca1 	beq.w	11792 <ticker_job+0x61a>
		flag_compare_update = 1U;
   11e50:	2301      	movs	r3, #1
   11e52:	9307      	str	r3, [sp, #28]
   11e54:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   11e58:	f04f 0900 	mov.w	r9, #0
		while (user->first != user->last) {
   11e5c:	7863      	ldrb	r3, [r4, #1]
   11e5e:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
   11e60:	6865      	ldr	r5, [r4, #4]
		while (user->first != user->last) {
   11e62:	4299      	cmp	r1, r3
   11e64:	d10c      	bne.n	11e80 <ticker_job+0xd08>
   11e66:	e060      	b.n	11f2a <ticker_job+0xdb2>
	switch (uop->op) {
   11e68:	2b01      	cmp	r3, #1
   11e6a:	d05a      	beq.n	11f22 <ticker_job+0xdaa>
			first = user->first + 1;
   11e6c:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
   11e6e:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
   11e70:	3301      	adds	r3, #1
   11e72:	b2db      	uxtb	r3, r3
				first = 0U;
   11e74:	429a      	cmp	r2, r3
   11e76:	bf08      	it	eq
   11e78:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   11e7a:	4299      	cmp	r1, r3
			user->first = first;
   11e7c:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   11e7e:	d054      	beq.n	11f2a <ticker_job+0xdb2>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   11e80:	b21b      	sxth	r3, r3
   11e82:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   11e86:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   11e8a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	switch (uop->op) {
   11e8e:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
   11e92:	2b02      	cmp	r3, #2
   11e94:	d01b      	beq.n	11ece <ticker_job+0xd56>
   11e96:	2b03      	cmp	r3, #3
   11e98:	d1e6      	bne.n	11e68 <ticker_job+0xcf0>
		if (uop->id < instance->count_node) {
   11e9a:	7853      	ldrb	r3, [r2, #1]
   11e9c:	f89b 1008 	ldrb.w	r1, [fp, #8]
   11ea0:	4299      	cmp	r1, r3
   11ea2:	d911      	bls.n	11ec8 <ticker_job+0xd50>
			node[uop->id].priority =
   11ea4:	f8db 1000 	ldr.w	r1, [fp]
   11ea8:	7910      	ldrb	r0, [r2, #4]
   11eaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11eae:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   11eb2:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   11eb6:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   11eba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
   11ebc:	b113      	cbz	r3, 11ec4 <ticker_job+0xd4c>
		fp_op_func(uop->status, uop->op_context);
   11ebe:	6b11      	ldr	r1, [r2, #48]	; 0x30
   11ec0:	6a90      	ldr	r0, [r2, #40]	; 0x28
   11ec2:	4798      	blx	r3
   11ec4:	78e1      	ldrb	r1, [r4, #3]
   11ec6:	e7d1      	b.n	11e6c <ticker_job+0xcf4>
			uop->status = TICKER_STATUS_FAILURE;
   11ec8:	2301      	movs	r3, #1
   11eca:	6293      	str	r3, [r2, #40]	; 0x28
   11ecc:	e7f5      	b.n	11eba <ticker_job+0xd42>
		ticker_by_next_slot_get(instance,
   11ece:	e9d2 7001 	ldrd	r7, r0, [r2, #4]
	_ticker_id_head = *ticker_id_head;
   11ed2:	f897 e000 	ldrb.w	lr, [r7]
		ticker_by_next_slot_get(instance,
   11ed6:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	node = instance->nodes;
   11eda:	f8db 1000 	ldr.w	r1, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
   11ede:	f8db 8014 	ldr.w	r8, [fp, #20]
   11ee2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   11ee6:	d002      	beq.n	11eee <ticker_job+0xd76>
   11ee8:	6803      	ldr	r3, [r0, #0]
   11eea:	4543      	cmp	r3, r8
   11eec:	d024      	beq.n	11f38 <ticker_job+0xdc0>
		_ticker_id_head = instance->ticker_id_head;
   11eee:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
   11ef2:	f8c0 8000 	str.w	r8, [r0]
		_ticks_to_expire = 0U;
   11ef6:	f04f 0e00 	mov.w	lr, #0
   11efa:	e00d      	b.n	11f18 <ticker_job+0xda0>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   11efc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   11f00:	eb01 1800 	add.w	r8, r1, r0, lsl #4
   11f04:	0100      	lsls	r0, r0, #4
   11f06:	f8d8 a008 	ldr.w	sl, [r8, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
   11f0a:	f8d8 8018 	ldr.w	r8, [r8, #24]
   11f0e:	44d6      	add	lr, sl
   11f10:	f1b8 0f00 	cmp.w	r8, #0
   11f14:	d102      	bne.n	11f1c <ticker_job+0xda4>
		_ticker_id_head = ticker->next;
   11f16:	5c0b      	ldrb	r3, [r1, r0]
	while ((_ticker_id_head != TICKER_NULL) &&
   11f18:	2bff      	cmp	r3, #255	; 0xff
   11f1a:	d1ef      	bne.n	11efc <ticker_job+0xd84>
	*ticker_id_head = _ticker_id_head;
   11f1c:	703b      	strb	r3, [r7, #0]
	*ticks_to_expire = _ticks_to_expire;
   11f1e:	f8cc e000 	str.w	lr, [ip]
		fp_op_func = uop->fp_op_func;
   11f22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   11f24:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
   11f28:	e7c8      	b.n	11ebc <ticker_job+0xd44>
	while (count_user--) {
   11f2a:	42a6      	cmp	r6, r4
   11f2c:	f1a4 0308 	sub.w	r3, r4, #8
   11f30:	f43f af63 	beq.w	11dfa <ticker_job+0xc82>
   11f34:	461c      	mov	r4, r3
   11f36:	e791      	b.n	11e5c <ticker_job+0xce4>
		ticker = &node[_ticker_id_head];
   11f38:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   11f3c:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
   11f3e:	f8dc e000 	ldr.w	lr, [ip]
		_ticker_id_head = ticker->next;
   11f42:	5ccb      	ldrb	r3, [r1, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
   11f44:	e7e8      	b.n	11f18 <ticker_job+0xda0>
	count_user = instance->count_user;
   11f46:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   11f4a:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   11f4e:	1e5c      	subs	r4, r3, #1
   11f50:	b2e4      	uxtb	r4, r4
   11f52:	2b00      	cmp	r3, #0
   11f54:	f47f af7e 	bne.w	11e54 <ticker_job+0xcdc>
   11f58:	e74f      	b.n	11dfa <ticker_job+0xc82>
		if (cntr_stop() == 0) {
   11f5a:	f00a ffa5 	bl	1cea8 <cntr_stop>
   11f5e:	2800      	cmp	r0, #0
   11f60:	f47f af52 	bne.w	11e08 <ticker_job+0xc90>
			instance->ticks_slot_previous = 0U;
   11f64:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   11f68:	f00a ffc4 	bl	1cef4 <cntr_cnt_get>
   11f6c:	f89b 201f 	ldrb.w	r2, [fp, #31]
   11f70:	f8cb 0014 	str.w	r0, [fp, #20]
   11f74:	e74a      	b.n	11e0c <ticker_job+0xc94>
	count_user = instance->count_user;
   11f76:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
   11f7a:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   11f7e:	1e54      	subs	r4, r2, #1
   11f80:	b2e4      	uxtb	r4, r4
   11f82:	2a00      	cmp	r2, #0
   11f84:	f47f af65 	bne.w	11e52 <ticker_job+0xcda>
	instance->job_guard = 0U;
   11f88:	9b08      	ldr	r3, [sp, #32]
   11f8a:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   11f8e:	e405      	b.n	1179c <ticker_job+0x624>
   11f90:	f89b 701d 	ldrb.w	r7, [fp, #29]
   11f94:	e402      	b.n	1179c <ticker_job+0x624>
		ticks_current = cntr_cnt_get();
   11f96:	f00a ffad 	bl	1cef4 <cntr_cnt_get>
   11f9a:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   11f9c:	f00a ff74 	bl	1ce88 <cntr_start>
   11fa0:	f89b 701d 	ldrb.w	r7, [fp, #29]
   11fa4:	2800      	cmp	r0, #0
   11fa6:	f47f ac00 	bne.w	117aa <ticker_job+0x632>
			instance->ticks_current = ticks_current;
   11faa:	f8cb 4014 	str.w	r4, [fp, #20]
   11fae:	f7ff bbfc 	b.w	117aa <ticker_job+0x632>
   11fb2:	bf00      	nop
   11fb4:	ff172b5a 	.word	0xff172b5a
   11fb8:	7f172b59 	.word	0x7f172b59

00011fbc <ticker_init>:
{
   11fbc:	b4f0      	push	{r4, r5, r6, r7}
   11fbe:	9f04      	ldr	r7, [sp, #16]
   11fc0:	f89d 4014 	ldrb.w	r4, [sp, #20]
   11fc4:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   11fc6:	2800      	cmp	r0, #0
   11fc8:	d13e      	bne.n	12048 <ticker_init+0x8c>
	instance->count_node = count_node;
   11fca:	f8df c084 	ldr.w	ip, [pc, #132]	; 12050 <ticker_init+0x94>
	while (count_node--) {
   11fce:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
   11fd0:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
   11fd4:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
   11fd8:	b2ed      	uxtb	r5, r5
   11fda:	b149      	cbz	r1, 11ff0 <ticker_init+0x34>
   11fdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   11fe0:	eb02 1105 	add.w	r1, r2, r5, lsl #4
   11fe4:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   11fe6:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   11fea:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   11fee:	d1f9      	bne.n	11fe4 <ticker_init+0x28>
	while (count_user--) {
   11ff0:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   11ff2:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
   11ff6:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
   11ffa:	b2d2      	uxtb	r2, r2
   11ffc:	b17b      	cbz	r3, 1201e <ticker_init+0x62>
   11ffe:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
   12002:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   12004:	4611      	mov	r1, r2
   12006:	f812 3908 	ldrb.w	r3, [r2], #-8
   1200a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
   1200e:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
   12010:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
   12012:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
   12016:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
   12018:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
   1201c:	d1f1      	bne.n	12002 <ticker_init+0x46>
	if (count_op) {
   1201e:	b99c      	cbnz	r4, 12048 <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
   12020:	9a07      	ldr	r2, [sp, #28]
   12022:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
   12026:	9a08      	ldr	r2, [sp, #32]
   12028:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   1202c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   12030:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
   12032:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
   12036:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
   12038:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
   1203c:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
   1203e:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   12042:	f8ac 301c 	strh.w	r3, [ip, #28]
}
   12046:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   12048:	2001      	movs	r0, #1
}
   1204a:	bcf0      	pop	{r4, r5, r6, r7}
   1204c:	4770      	bx	lr
   1204e:	bf00      	nop
   12050:	20001c10 	.word	0x20001c10

00012054 <ticker_trigger>:
	if (instance->sched_cb) {
   12054:	4b0a      	ldr	r3, [pc, #40]	; (12080 <ticker_trigger+0x2c>)
   12056:	222c      	movs	r2, #44	; 0x2c
   12058:	fb02 3200 	mla	r2, r2, r0, r3
{
   1205c:	b410      	push	{r4}
	if (instance->sched_cb) {
   1205e:	6a54      	ldr	r4, [r2, #36]	; 0x24
   12060:	b15c      	cbz	r4, 1207a <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   12062:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   12066:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1206a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1206e:	46a4      	mov	ip, r4
   12070:	2201      	movs	r2, #1
}
   12072:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   12074:	2103      	movs	r1, #3
   12076:	2002      	movs	r0, #2
   12078:	4760      	bx	ip
}
   1207a:	bc10      	pop	{r4}
   1207c:	4770      	bx	lr
   1207e:	bf00      	nop
   12080:	20001c10 	.word	0x20001c10

00012084 <ticker_start_ext>:
{
   12084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   12088:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1212c <ticker_start_ext+0xa8>
{
   1208c:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
   12090:	272c      	movs	r7, #44	; 0x2c
   12092:	fb07 8700 	mla	r7, r7, r0, r8
{
   12096:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   12098:	687d      	ldr	r5, [r7, #4]
   1209a:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   1209e:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
   120a2:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
   120a6:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   120aa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   120ae:	1c75      	adds	r5, r6, #1
{
   120b0:	4608      	mov	r0, r1
	last = user->last + 1;
   120b2:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
   120b4:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
   120b8:	45a9      	cmp	r9, r5
   120ba:	bf98      	it	ls
   120bc:	2500      	movls	r5, #0
	if (last == user->first) {
   120be:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
   120c0:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
   120c4:	d02f      	beq.n	12126 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   120c6:	f8dc 1004 	ldr.w	r1, [ip, #4]
   120ca:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   120ce:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   120d2:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   120d6:	f04f 0904 	mov.w	r9, #4
   120da:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   120de:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   120e0:	9b08      	ldr	r3, [sp, #32]
   120e2:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   120e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   120e6:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   120e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   120ea:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   120ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   120ee:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   120f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   120f2:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   120f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   120f6:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   120f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   120fa:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   120fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   120fe:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   12100:	2102      	movs	r1, #2
	user_op->op_context = op_context;
   12102:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   12104:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
   12106:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
   1210a:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   1210c:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
   1210e:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12112:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   12116:	4798      	blx	r3
   12118:	4643      	mov	r3, r8
   1211a:	4649      	mov	r1, r9
   1211c:	2200      	movs	r2, #0
   1211e:	47a8      	blx	r5
	return user_op->status;
   12120:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   12122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   12126:	2001      	movs	r0, #1
}
   12128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1212c:	20001c10 	.word	0x20001c10

00012130 <ticker_start>:
{
   12130:	b530      	push	{r4, r5, lr}
   12132:	b08b      	sub	sp, #44	; 0x2c
   12134:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   12138:	9500      	str	r5, [sp, #0]
{
   1213a:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1213c:	9401      	str	r4, [sp, #4]
   1213e:	9502      	str	r5, [sp, #8]
{
   12140:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
   12144:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   12146:	9403      	str	r4, [sp, #12]
   12148:	9504      	str	r5, [sp, #16]
{
   1214a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   1214c:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1214e:	9405      	str	r4, [sp, #20]
   12150:	9506      	str	r5, [sp, #24]
{
   12152:	9c15      	ldr	r4, [sp, #84]	; 0x54
   12154:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
   12156:	9407      	str	r4, [sp, #28]
   12158:	2400      	movs	r4, #0
   1215a:	e9cd 5408 	strd	r5, r4, [sp, #32]
   1215e:	f7ff ff91 	bl	12084 <ticker_start_ext>
}
   12162:	b00b      	add	sp, #44	; 0x2c
   12164:	bd30      	pop	{r4, r5, pc}
   12166:	bf00      	nop

00012168 <ticker_update>:
	struct ticker_instance *instance = &_instance[instance_index];
   12168:	f8df c098 	ldr.w	ip, [pc, #152]	; 12204 <ticker_update+0x9c>
{
   1216c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->users[user_id];
   12170:	272c      	movs	r7, #44	; 0x2c
   12172:	fb07 c700 	mla	r7, r7, r0, ip
{
   12176:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   12178:	687d      	ldr	r5, [r7, #4]
{
   1217a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   1217e:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
   12182:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   12184:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   12188:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
   1218c:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   1218e:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   12192:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   12196:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   1219a:	1c75      	adds	r5, r6, #1
   1219c:	b2ed      	uxtb	r5, r5
		last = 0U;
   1219e:	45aa      	cmp	sl, r5
   121a0:	bf98      	it	ls
   121a2:	2500      	movls	r5, #0
	if (last == user->first) {
   121a4:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
   121a6:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
   121aa:	d028      	beq.n	121fe <ticker_update+0x96>
	user_op = &user->user_op[user->last];
   121ac:	f8d1 c004 	ldr.w	ip, [r1, #4]
   121b0:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   121b4:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   121b8:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   121bc:	f04f 0905 	mov.w	r9, #5
   121c0:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   121c4:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   121c6:	9b08      	ldr	r3, [sp, #32]
   121c8:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   121ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   121cc:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   121ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   121d0:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   121d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   121d4:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   121d6:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   121d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   121da:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
   121dc:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
   121e0:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
   121e2:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->status = TICKER_STATUS_BUSY;
   121e6:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
   121e8:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   121ea:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   121ee:	4798      	blx	r3
   121f0:	4653      	mov	r3, sl
   121f2:	2200      	movs	r2, #0
   121f4:	2104      	movs	r1, #4
   121f6:	47a8      	blx	r5
	return user_op->status;
   121f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   121fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
   121fe:	2001      	movs	r0, #1
}
   12200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12204:	20001c10 	.word	0x20001c10

00012208 <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
   12208:	f8df c084 	ldr.w	ip, [pc, #132]	; 12290 <ticker_stop+0x88>
{
   1220c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
   12210:	272c      	movs	r7, #44	; 0x2c
   12212:	fb07 c700 	mla	r7, r7, r0, ip
{
   12216:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   12218:	687d      	ldr	r5, [r7, #4]
{
   1221a:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   1221c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   12220:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
   12224:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   12226:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   1222a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1222e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   12232:	1c75      	adds	r5, r6, #1
   12234:	b2ed      	uxtb	r5, r5
		last = 0U;
   12236:	45a8      	cmp	r8, r5
   12238:	bf98      	it	ls
   1223a:	2500      	movls	r5, #0
	if (last == user->first) {
   1223c:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
   1223e:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
   12242:	d021      	beq.n	12288 <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
   12244:	f8d1 c004 	ldr.w	ip, [r1, #4]
   12248:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
   1224c:	eb06 068e 	add.w	r6, r6, lr, lsl #2
   12250:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   12254:	f04f 0e06 	mov.w	lr, #6
   12258:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
   1225c:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   12260:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   12262:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
   12264:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
   12268:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   1226c:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
   12270:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12272:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   12276:	4798      	blx	r3
   12278:	4623      	mov	r3, r4
   1227a:	2200      	movs	r2, #0
   1227c:	2104      	movs	r1, #4
   1227e:	47a8      	blx	r5
	return user_op->status;
   12280:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
   12284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   12288:	2001      	movs	r0, #1
}
   1228a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1228e:	bf00      	nop
   12290:	20001c10 	.word	0x20001c10

00012294 <ticker_next_slot_get>:
{
   12294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   12298:	4f20      	ldr	r7, [pc, #128]	; (1231c <ticker_next_slot_get+0x88>)
	user = &instance->users[user_id];
   1229a:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   1229e:	fb0c 7c00 	mla	ip, ip, r0, r7
{
   122a2:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   122a4:	f8dc 5004 	ldr.w	r5, [ip, #4]
{
   122a8:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   122aa:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   122ae:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
   122b2:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   122b4:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   122b8:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   122bc:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   122c0:	1c75      	adds	r5, r6, #1
   122c2:	b2ed      	uxtb	r5, r5
		last = 0U;
   122c4:	45a8      	cmp	r8, r5
   122c6:	bf98      	it	ls
   122c8:	2500      	movls	r5, #0
	if (last == user->first) {
   122ca:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
   122cc:	eb07 0484 	add.w	r4, r7, r4, lsl #2
	if (last == user->first) {
   122d0:	d020      	beq.n	12314 <ticker_next_slot_get+0x80>
	user_op = &user->user_op[user->last];
   122d2:	f8d1 e004 	ldr.w	lr, [r1, #4]
   122d6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
   122da:	eb06 0687 	add.w	r6, r6, r7, lsl #2
   122de:	eb0e 0786 	add.w	r7, lr, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   122e2:	f64f 7802 	movw	r8, #65282	; 0xff02
   122e6:	f82e 8026 	strh.w	r8, [lr, r6, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
   122ea:	e9c7 2301 	strd	r2, r3, [r7, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   122ee:	9b06      	ldr	r3, [sp, #24]
   122f0:	60fb      	str	r3, [r7, #12]
	user_op->fp_op_func = fp_op_func;
   122f2:	9b07      	ldr	r3, [sp, #28]
   122f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   122f6:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   122f8:	9b08      	ldr	r3, [sp, #32]
   122fa:	633b      	str	r3, [r7, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   122fc:	62be      	str	r6, [r7, #40]	; 0x28
	user->last = last;
   122fe:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12300:	e9dc 3508 	ldrd	r3, r5, [ip, #32]
   12304:	4798      	blx	r3
   12306:	4623      	mov	r3, r4
   12308:	2200      	movs	r2, #0
   1230a:	2104      	movs	r1, #4
   1230c:	47a8      	blx	r5
	return user_op->status;
   1230e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
}
   12310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   12314:	2001      	movs	r0, #1
}
   12316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1231a:	bf00      	nop
   1231c:	20001c10 	.word	0x20001c10

00012320 <ticker_job_sched>:
{
   12320:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12322:	4d0a      	ldr	r5, [pc, #40]	; (1234c <ticker_job_sched+0x2c>)
   12324:	222c      	movs	r2, #44	; 0x2c
   12326:	fb02 5200 	mla	r2, r2, r0, r5
   1232a:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
   1232e:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12330:	4608      	mov	r0, r1
   12332:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
   12334:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12338:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1233c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12340:	46b4      	mov	ip, r6
   12342:	2200      	movs	r2, #0
}
   12344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12348:	2104      	movs	r1, #4
   1234a:	4760      	bx	ip
   1234c:	20001c10 	.word	0x20001c10

00012350 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   12350:	f00a bdd0 	b.w	1cef4 <cntr_cnt_get>

00012354 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   12354:	1a40      	subs	r0, r0, r1
}
   12356:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1235a:	4770      	bx	lr

0001235c <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   1235c:	2801      	cmp	r0, #1
   1235e:	d813      	bhi.n	12388 <ll_addr_get+0x2c>
{
   12360:	b508      	push	{r3, lr}
		return NULL;
	}

	if (addr_type) {
   12362:	b948      	cbnz	r0, 12378 <ll_addr_get+0x1c>
		}

		return rnd_addr;
	}

	if (bdaddr) {
   12364:	b131      	cbz	r1, 12374 <ll_addr_get+0x18>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   12366:	4608      	mov	r0, r1
   12368:	2206      	movs	r2, #6
   1236a:	4909      	ldr	r1, [pc, #36]	; (12390 <ll_addr_get+0x34>)
   1236c:	f010 f9d8 	bl	22720 <memcpy>
	}

	return pub_addr;
   12370:	4807      	ldr	r0, [pc, #28]	; (12390 <ll_addr_get+0x34>)
}
   12372:	bd08      	pop	{r3, pc}
	return pub_addr;
   12374:	4806      	ldr	r0, [pc, #24]	; (12390 <ll_addr_get+0x34>)
}
   12376:	bd08      	pop	{r3, pc}
		if (bdaddr) {
   12378:	b141      	cbz	r1, 1238c <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   1237a:	4608      	mov	r0, r1
   1237c:	2206      	movs	r2, #6
   1237e:	4905      	ldr	r1, [pc, #20]	; (12394 <ll_addr_get+0x38>)
   12380:	f010 f9ce 	bl	22720 <memcpy>
		return rnd_addr;
   12384:	4803      	ldr	r0, [pc, #12]	; (12394 <ll_addr_get+0x38>)
}
   12386:	bd08      	pop	{r3, pc}
		return NULL;
   12388:	2000      	movs	r0, #0
}
   1238a:	4770      	bx	lr
		return rnd_addr;
   1238c:	4801      	ldr	r0, [pc, #4]	; (12394 <ll_addr_get+0x38>)
}
   1238e:	bd08      	pop	{r3, pc}
   12390:	20001c3c 	.word	0x20001c3c
   12394:	20001c44 	.word	0x20001c44

00012398 <ll_addr_set>:

uint32_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   12398:	b570      	push	{r4, r5, r6, lr}
   1239a:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
		uint32_t status = ull_adv_is_enabled(0);
   1239c:	2000      	movs	r0, #0
{
   1239e:	460d      	mov	r5, r1
		uint32_t status = ull_adv_is_enabled(0);
   123a0:	f003 fac6 	bl	15930 <ull_adv_is_enabled>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if ((status & (ULL_ADV_ENABLED_BITMASK_ENABLED |
			       ULL_ADV_ENABLED_BITMASK_EXTENDED)) ==
		     ULL_ADV_ENABLED_BITMASK_ENABLED) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (status) {
   123a4:	b988      	cbnz	r0, 123ca <ll_addr_set+0x32>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   123a6:	f003 fcdb 	bl	15d60 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   123aa:	f010 0406 	ands.w	r4, r0, #6
   123ae:	d10c      	bne.n	123ca <ll_addr_set+0x32>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   123b0:	4629      	mov	r1, r5
   123b2:	2206      	movs	r2, #6
	if (addr_type) {
   123b4:	b926      	cbnz	r6, 123c0 <ll_addr_set+0x28>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   123b6:	4806      	ldr	r0, [pc, #24]	; (123d0 <ll_addr_set+0x38>)
   123b8:	f010 f9b2 	bl	22720 <memcpy>
	}

	return 0;
}
   123bc:	4620      	mov	r0, r4
   123be:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   123c0:	4804      	ldr	r0, [pc, #16]	; (123d4 <ll_addr_set+0x3c>)
   123c2:	f010 f9ad 	bl	22720 <memcpy>
}
   123c6:	4620      	mov	r0, r4
   123c8:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   123ca:	240c      	movs	r4, #12
}
   123cc:	4620      	mov	r0, r4
   123ce:	bd70      	pop	{r4, r5, r6, pc}
   123d0:	20001c3c 	.word	0x20001c3c
   123d4:	20001c44 	.word	0x20001c44

000123d8 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   123d8:	2802      	cmp	r0, #2
   123da:	d001      	beq.n	123e0 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   123dc:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   123de:	4770      	bx	lr
{
   123e0:	b538      	push	{r3, r4, r5, lr}
   123e2:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   123e4:	4608      	mov	r0, r1
   123e6:	461d      	mov	r5, r3
   123e8:	f004 f8f2 	bl	165d0 <ll_connected_get>
			if (!conn) {
   123ec:	b110      	cbz	r0, 123f4 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   123ee:	2000      	movs	r0, #0
   123f0:	7028      	strb	r0, [r5, #0]
}
   123f2:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   123f4:	4620      	mov	r0, r4
}
   123f6:	bd38      	pop	{r3, r4, r5, pc}

000123f8 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   123f8:	2300      	movs	r3, #0
   123fa:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   123fc:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   123fe:	4770      	bx	lr

00012400 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(struct device *unused)
{
   12400:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   12402:	4802      	ldr	r0, [pc, #8]	; (1240c <hci_driver_init+0xc>)
   12404:	f7f6 ff44 	bl	9290 <bt_hci_driver_register>

	return 0;
}
   12408:	2000      	movs	r0, #0
   1240a:	bd08      	pop	{r3, pc}
   1240c:	00026fbc 	.word	0x00026fbc

00012410 <recv_thread>:
{
   12410:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   12412:	4d37      	ldr	r5, [pc, #220]	; (124f0 <recv_thread+0xe0>)
		LL_ASSERT(0);
   12414:	4f37      	ldr	r7, [pc, #220]	; (124f4 <recv_thread+0xe4>)
   12416:	4e38      	ldr	r6, [pc, #224]	; (124f8 <recv_thread+0xe8>)
{
   12418:	b083      	sub	sp, #12
   1241a:	e015      	b.n	12448 <recv_thread+0x38>
	switch (class) {
   1241c:	2b00      	cmp	r3, #0
   1241e:	d13c      	bne.n	1249a <recv_thread+0x8a>
		LL_ASSERT(0);
   12420:	4836      	ldr	r0, [pc, #216]	; (124fc <recv_thread+0xec>)
   12422:	23b4      	movs	r3, #180	; 0xb4
   12424:	463a      	mov	r2, r7
   12426:	4631      	mov	r1, r6
   12428:	f00e f90a 	bl	20640 <printk>
   1242c:	4040      	eors	r0, r0
   1242e:	f380 8811 	msr	BASEPRI, r0
   12432:	f04f 0003 	mov.w	r0, #3
   12436:	df02      	svc	2
	node_rx->hdr.next = NULL;
   12438:	9b01      	ldr	r3, [sp, #4]
   1243a:	2200      	movs	r2, #0
   1243c:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1243e:	a801      	add	r0, sp, #4
   12440:	f002 fb82 	bl	14b48 <ll_rx_mem_release>
	z_impl_k_yield();
   12444:	f00d fb96 	bl	1fb74 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
   12448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1244c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12450:	4628      	mov	r0, r5
   12452:	f00d f87f 	bl	1f554 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   12456:	2800      	cmp	r0, #0
   12458:	d0f4      	beq.n	12444 <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
   1245a:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   1245c:	9001      	str	r0, [sp, #4]
	switch (class) {
   1245e:	2b04      	cmp	r3, #4
   12460:	d9dc      	bls.n	1241c <recv_thread+0xc>
   12462:	2b05      	cmp	r3, #5
   12464:	d1dc      	bne.n	12420 <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   12466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1246a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1246e:	2003      	movs	r0, #3
   12470:	f7f7 fc4c 	bl	9d0c <bt_buf_get_rx>
   12474:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   12476:	4601      	mov	r1, r0
   12478:	9801      	ldr	r0, [sp, #4]
   1247a:	f000 ff5d 	bl	13338 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   1247e:	9b01      	ldr	r3, [sp, #4]
   12480:	2200      	movs	r2, #0
   12482:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   12484:	a801      	add	r0, sp, #4
   12486:	f002 fb5f 	bl	14b48 <ll_rx_mem_release>
		if (buf) {
   1248a:	2c00      	cmp	r4, #0
   1248c:	d0da      	beq.n	12444 <recv_thread+0x34>
			if (buf->len) {
   1248e:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   12490:	4620      	mov	r0, r4
			if (buf->len) {
   12492:	b1db      	cbz	r3, 124cc <recv_thread+0xbc>
				bt_recv(buf);
   12494:	f7f6 fdfc 	bl	9090 <bt_recv>
   12498:	e7d4      	b.n	12444 <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   1249a:	2b02      	cmp	r3, #2
   1249c:	d019      	beq.n	124d2 <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1249e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   124a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   124a6:	2001      	movs	r0, #1
   124a8:	f7f7 fc30 	bl	9d0c <bt_buf_get_rx>
   124ac:	4604      	mov	r4, r0
		if (buf) {
   124ae:	9801      	ldr	r0, [sp, #4]
   124b0:	b1cc      	cbz	r4, 124e6 <recv_thread+0xd6>
			hci_evt_encode(node_rx, buf);
   124b2:	4621      	mov	r1, r4
   124b4:	f000 ff7a 	bl	133ac <hci_evt_encode>
	node_rx->hdr.next = NULL;
   124b8:	9b01      	ldr	r3, [sp, #4]
   124ba:	2200      	movs	r2, #0
   124bc:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   124be:	a801      	add	r0, sp, #4
   124c0:	f002 fb42 	bl	14b48 <ll_rx_mem_release>
			if (buf->len) {
   124c4:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   124c6:	4620      	mov	r0, r4
			if (buf->len) {
   124c8:	2b00      	cmp	r3, #0
   124ca:	d1e3      	bne.n	12494 <recv_thread+0x84>
				net_buf_unref(buf);
   124cc:	f00b fd74 	bl	1dfb8 <net_buf_unref>
   124d0:	e7b8      	b.n	12444 <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   124d2:	2200      	movs	r2, #0
   124d4:	2300      	movs	r3, #0
   124d6:	2101      	movs	r1, #1
   124d8:	2000      	movs	r0, #0
   124da:	f7f7 fc4d 	bl	9d78 <bt_buf_get_evt>
   124de:	4604      	mov	r4, r0
		if (buf) {
   124e0:	9801      	ldr	r0, [sp, #4]
   124e2:	2c00      	cmp	r4, #0
   124e4:	d1e5      	bne.n	124b2 <recv_thread+0xa2>
	node_rx->hdr.next = NULL;
   124e6:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   124e8:	a801      	add	r0, sp, #4
   124ea:	f002 fb2d 	bl	14b48 <ll_rx_mem_release>
		if (buf) {
   124ee:	e7a9      	b.n	12444 <recv_thread+0x34>
   124f0:	2000088c 	.word	0x2000088c
   124f4:	00026efc 	.word	0x00026efc
   124f8:	00026f3c 	.word	0x00026f3c
   124fc:	00026ecc 	.word	0x00026ecc

00012500 <prio_recv_thread>:
{
   12500:	b570      	push	{r4, r5, r6, lr}
	return z_impl_k_sem_take(sem, timeout);
   12502:	4e1a      	ldr	r6, [pc, #104]	; (1256c <prio_recv_thread+0x6c>)
				k_fifo_put(&recv_fifo, node_rx);
   12504:	4d1a      	ldr	r5, [pc, #104]	; (12570 <prio_recv_thread+0x70>)
{
   12506:	b082      	sub	sp, #8
   12508:	e00c      	b.n	12524 <prio_recv_thread+0x24>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   1250a:	f7f7 fc35 	bl	9d78 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   1250e:	4622      	mov	r2, r4
   12510:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   12514:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   12516:	f001 fb6d 	bl	13bf4 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   1251a:	4620      	mov	r0, r4
   1251c:	f7f6 fe62 	bl	91e4 <bt_recv_prio>
	z_impl_k_yield();
   12520:	f00d fb28 	bl	1fb74 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   12524:	f10d 0102 	add.w	r1, sp, #2
   12528:	a801      	add	r0, sp, #4
   1252a:	f002 f969 	bl	14800 <ll_rx_get>
   1252e:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   12530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12538:	2100      	movs	r1, #0
   1253a:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   1253c:	2c00      	cmp	r4, #0
   1253e:	d1e4      	bne.n	1250a <prio_recv_thread+0xa>
		if (node_rx) {
   12540:	9b01      	ldr	r3, [sp, #4]
   12542:	b15b      	cbz	r3, 1255c <prio_recv_thread+0x5c>
			ll_rx_dequeue();
   12544:	f002 fa36 	bl	149b4 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   12548:	9c01      	ldr	r4, [sp, #4]
   1254a:	4620      	mov	r0, r4
   1254c:	f001 fb6a 	bl	13c24 <hci_get_class>
				k_fifo_put(&recv_fifo, node_rx);
   12550:	9901      	ldr	r1, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   12552:	7160      	strb	r0, [r4, #5]
				k_fifo_put(&recv_fifo, node_rx);
   12554:	4628      	mov	r0, r5
   12556:	f013 fb03 	bl	25b60 <k_queue_append>
			continue;
   1255a:	e7e3      	b.n	12524 <prio_recv_thread+0x24>
	return z_impl_k_sem_take(sem, timeout);
   1255c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12564:	4630      	mov	r0, r6
   12566:	f00d fb9f 	bl	1fca8 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   1256a:	e7db      	b.n	12524 <prio_recv_thread+0x24>
   1256c:	2000085c 	.word	0x2000085c
   12570:	2000088c 	.word	0x2000088c

00012574 <hci_driver_send>:
{
   12574:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   12576:	8983      	ldrh	r3, [r0, #12]
{
   12578:	b083      	sub	sp, #12
	if (!buf->len) {
   1257a:	2b00      	cmp	r3, #0
   1257c:	d03a      	beq.n	125f4 <hci_driver_send+0x80>
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   1257e:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   12580:	4604      	mov	r4, r0
   12582:	b31b      	cbz	r3, 125cc <hci_driver_send+0x58>
   12584:	2b02      	cmp	r3, #2
   12586:	d00f      	beq.n	125a8 <hci_driver_send+0x34>
   12588:	4921      	ldr	r1, [pc, #132]	; (12610 <hci_driver_send+0x9c>)
   1258a:	4a22      	ldr	r2, [pc, #136]	; (12614 <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
   1258c:	4822      	ldr	r0, [pc, #136]	; (12618 <hci_driver_send+0xa4>)
   1258e:	1a52      	subs	r2, r2, r1
   12590:	08d2      	lsrs	r2, r2, #3
   12592:	0192      	lsls	r2, r2, #6
   12594:	4619      	mov	r1, r3
   12596:	f042 0201 	orr.w	r2, r2, #1
   1259a:	f00e fb1e 	bl	20bda <log_1>
		return -EINVAL;
   1259e:	f06f 0515 	mvn.w	r5, #21
}
   125a2:	4628      	mov	r0, r5
   125a4:	b003      	add	sp, #12
   125a6:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   125a8:	a901      	add	r1, sp, #4
   125aa:	f000 fe2d 	bl	13208 <hci_acl_handle>
	if (evt) {
   125ae:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   125b0:	4605      	mov	r5, r0
	if (evt) {
   125b2:	b113      	cbz	r3, 125ba <hci_driver_send+0x46>
		bt_recv_prio(evt);
   125b4:	4618      	mov	r0, r3
   125b6:	f7f6 fe15 	bl	91e4 <bt_recv_prio>
	if (!err) {
   125ba:	2d00      	cmp	r5, #0
   125bc:	d1f1      	bne.n	125a2 <hci_driver_send+0x2e>
		net_buf_unref(buf);
   125be:	4620      	mov	r0, r4
   125c0:	f00b fcfa 	bl	1dfb8 <net_buf_unref>
   125c4:	2500      	movs	r5, #0
}
   125c6:	4628      	mov	r0, r5
   125c8:	b003      	add	sp, #12
   125ca:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   125cc:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   125ce:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   125d0:	f000 f9c8 	bl	12964 <hci_cmd_handle>
	if (evt) {
   125d4:	2800      	cmp	r0, #0
   125d6:	d0f2      	beq.n	125be <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   125d8:	f7f6 fe04 	bl	91e4 <bt_recv_prio>
		if (node_rx) {
   125dc:	9d01      	ldr	r5, [sp, #4]
   125de:	2d00      	cmp	r5, #0
   125e0:	d0ed      	beq.n	125be <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   125e2:	4628      	mov	r0, r5
   125e4:	f001 fb1e 	bl	13c24 <hci_get_class>
   125e8:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   125ea:	9901      	ldr	r1, [sp, #4]
   125ec:	480b      	ldr	r0, [pc, #44]	; (1261c <hci_driver_send+0xa8>)
   125ee:	f013 fab7 	bl	25b60 <k_queue_append>
	if (!err) {
   125f2:	e7e4      	b.n	125be <hci_driver_send+0x4a>
   125f4:	4b06      	ldr	r3, [pc, #24]	; (12610 <hci_driver_send+0x9c>)
   125f6:	4907      	ldr	r1, [pc, #28]	; (12614 <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
   125f8:	4809      	ldr	r0, [pc, #36]	; (12620 <hci_driver_send+0xac>)
   125fa:	1ac9      	subs	r1, r1, r3
   125fc:	08c9      	lsrs	r1, r1, #3
   125fe:	0189      	lsls	r1, r1, #6
   12600:	f041 0101 	orr.w	r1, r1, #1
   12604:	f00e fadc 	bl	20bc0 <log_0>
		return -EINVAL;
   12608:	f06f 0515 	mvn.w	r5, #21
   1260c:	e7c9      	b.n	125a2 <hci_driver_send+0x2e>
   1260e:	bf00      	nop
   12610:	00026544 	.word	0x00026544
   12614:	00026584 	.word	0x00026584
   12618:	00026f54 	.word	0x00026f54
   1261c:	2000088c 	.word	0x2000088c
   12620:	00026f40 	.word	0x00026f40

00012624 <hci_driver_open>:
{
   12624:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   12626:	4822      	ldr	r0, [pc, #136]	; (126b0 <hci_driver_open+0x8c>)
{
   12628:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   1262a:	f001 fdd7 	bl	141dc <ll_init>
	if (err) {
   1262e:	4604      	mov	r4, r0
   12630:	2800      	cmp	r0, #0
   12632:	d12e      	bne.n	12692 <hci_driver_open+0x6e>
	hci_init(NULL);
   12634:	f001 fb0c 	bl	13c50 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   12638:	2600      	movs	r6, #0
   1263a:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1263c:	f06f 0309 	mvn.w	r3, #9
   12640:	9303      	str	r3, [sp, #12]
   12642:	e9cd 6706 	strd	r6, r7, [sp, #24]
   12646:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1264a:	4b1a      	ldr	r3, [pc, #104]	; (126b4 <hci_driver_open+0x90>)
   1264c:	491a      	ldr	r1, [pc, #104]	; (126b8 <hci_driver_open+0x94>)
   1264e:	9404      	str	r4, [sp, #16]
   12650:	9400      	str	r4, [sp, #0]
   12652:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   12656:	4819      	ldr	r0, [pc, #100]	; (126bc <hci_driver_open+0x98>)
   12658:	f00d fb8e 	bl	1fd78 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1265c:	4918      	ldr	r1, [pc, #96]	; (126c0 <hci_driver_open+0x9c>)
   1265e:	4817      	ldr	r0, [pc, #92]	; (126bc <hci_driver_open+0x98>)
   12660:	f013 fc09 	bl	25e76 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12664:	f06f 0307 	mvn.w	r3, #7
   12668:	9303      	str	r3, [sp, #12]
   1266a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1266e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12672:	4b14      	ldr	r3, [pc, #80]	; (126c4 <hci_driver_open+0xa0>)
   12674:	4914      	ldr	r1, [pc, #80]	; (126c8 <hci_driver_open+0xa4>)
   12676:	9404      	str	r4, [sp, #16]
   12678:	9400      	str	r4, [sp, #0]
   1267a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1267e:	4813      	ldr	r0, [pc, #76]	; (126cc <hci_driver_open+0xa8>)
   12680:	f00d fb7a 	bl	1fd78 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   12684:	4912      	ldr	r1, [pc, #72]	; (126d0 <hci_driver_open+0xac>)
   12686:	4811      	ldr	r0, [pc, #68]	; (126cc <hci_driver_open+0xa8>)
   12688:	f013 fbf5 	bl	25e76 <z_impl_k_thread_name_set>
}
   1268c:	4620      	mov	r0, r4
   1268e:	b008      	add	sp, #32
   12690:	bdd0      	pop	{r4, r6, r7, pc}
   12692:	4b10      	ldr	r3, [pc, #64]	; (126d4 <hci_driver_open+0xb0>)
   12694:	4a10      	ldr	r2, [pc, #64]	; (126d8 <hci_driver_open+0xb4>)
		BT_ERR("LL initialization failed: %d", err);
   12696:	4811      	ldr	r0, [pc, #68]	; (126dc <hci_driver_open+0xb8>)
   12698:	1ad2      	subs	r2, r2, r3
   1269a:	08d2      	lsrs	r2, r2, #3
   1269c:	0192      	lsls	r2, r2, #6
   1269e:	f042 0201 	orr.w	r2, r2, #1
   126a2:	4621      	mov	r1, r4
   126a4:	f00e fa99 	bl	20bda <log_1>
}
   126a8:	4620      	mov	r0, r4
   126aa:	b008      	add	sp, #32
   126ac:	bdd0      	pop	{r4, r6, r7, pc}
   126ae:	bf00      	nop
   126b0:	2000085c 	.word	0x2000085c
   126b4:	00012501 	.word	0x00012501
   126b8:	20006330 	.word	0x20006330
   126bc:	200012d0 	.word	0x200012d0
   126c0:	00026f88 	.word	0x00026f88
   126c4:	00012411 	.word	0x00012411
   126c8:	200064f0 	.word	0x200064f0
   126cc:	20001350 	.word	0x20001350
   126d0:	00026f94 	.word	0x00026f94
   126d4:	00026544 	.word	0x00026544
   126d8:	00026584 	.word	0x00026584
   126dc:	00026f68 	.word	0x00026f68

000126e0 <meta_evt>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
   126e0:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   126e2:	f100 0408 	add.w	r4, r0, #8
{
   126e6:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   126e8:	4620      	mov	r0, r4
   126ea:	2102      	movs	r1, #2
{
   126ec:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   126ee:	f012 fe7d 	bl	253ec <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   126f2:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
   126f4:	223e      	movs	r2, #62	; 0x3e
   126f6:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   126f8:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   126fa:	2101      	movs	r1, #1
   126fc:	4620      	mov	r0, r4
   126fe:	f012 fe75 	bl	253ec <net_buf_simple_add>
	me->subevent = subevt;
   12702:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
   12704:	4629      	mov	r1, r5
   12706:	4620      	mov	r0, r4
}
   12708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   1270c:	f012 be6e 	b.w	253ec <net_buf_simple_add>

00012710 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   12710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12714:	4c17      	ldr	r4, [pc, #92]	; (12774 <le_remote_feat_complete+0x64>)
   12716:	6866      	ldr	r6, [r4, #4]
   12718:	f04f 0900 	mov.w	r9, #0
   1271c:	464c      	mov	r4, r9
   1271e:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
   12722:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12724:	ea54 0205 	orrs.w	r2, r4, r5
   12728:	d009      	beq.n	1273e <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   1272a:	4a13      	ldr	r2, [pc, #76]	; (12778 <le_remote_feat_complete+0x68>)
   1272c:	6812      	ldr	r2, [r2, #0]
   1272e:	4606      	mov	r6, r0
   12730:	4688      	mov	r8, r1
   12732:	f002 0008 	and.w	r0, r2, #8
   12736:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12738:	ea50 0201 	orrs.w	r2, r0, r1
   1273c:	d101      	bne.n	12742 <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   1273e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   12742:	4618      	mov	r0, r3
   12744:	220b      	movs	r2, #11
   12746:	2104      	movs	r1, #4
   12748:	f7ff ffca 	bl	126e0 <meta_evt>
	sep->status = status;
   1274c:	7006      	strb	r6, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1274e:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   12752:	b93e      	cbnz	r6, 12764 <le_remote_feat_complete+0x54>
		memcpy(&sep->features[0],
   12754:	f108 0104 	add.w	r1, r8, #4
   12758:	3003      	adds	r0, #3
}
   1275a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(&sep->features[0],
   1275e:	2208      	movs	r2, #8
   12760:	f00f bfde 	b.w	22720 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   12764:	4649      	mov	r1, r9
   12766:	3003      	adds	r0, #3
}
   12768:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   1276c:	2208      	movs	r2, #8
   1276e:	f010 b802 	b.w	22776 <memset>
   12772:	bf00      	nop
   12774:	20000108 	.word	0x20000108
   12778:	20000110 	.word	0x20000110

0001277c <encrypt_change.part.0>:
static void encrypt_change(uint8_t err, uint16_t handle,
   1277c:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   1277e:	f102 0508 	add.w	r5, r2, #8
static void encrypt_change(uint8_t err, uint16_t handle,
   12782:	4604      	mov	r4, r0
   12784:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   12786:	4628      	mov	r0, r5
   12788:	2102      	movs	r1, #2
   1278a:	f012 fe2f 	bl	253ec <net_buf_simple_add>
   1278e:	4603      	mov	r3, r0
	hdr->evt = evt;
   12790:	2208      	movs	r2, #8
	hdr->len = len;
   12792:	2104      	movs	r1, #4
	hdr->evt = evt;
   12794:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   12796:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   12798:	4628      	mov	r0, r5
   1279a:	f012 fe27 	bl	253ec <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   1279e:	fab4 f384 	clz	r3, r4
   127a2:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   127a4:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
   127a6:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
   127a8:	f8a0 6001 	strh.w	r6, [r0, #1]
}
   127ac:	bd70      	pop	{r4, r5, r6, pc}
   127ae:	bf00      	nop

000127b0 <bt_hci_evt_create>:
{
   127b0:	b570      	push	{r4, r5, r6, lr}
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   127b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   127b6:	460e      	mov	r6, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   127b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   127bc:	2100      	movs	r1, #0
{
   127be:	4605      	mov	r5, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   127c0:	f7f7 fada 	bl	9d78 <bt_buf_get_evt>
	hdr = net_buf_add(buf, sizeof(*hdr));
   127c4:	2102      	movs	r1, #2
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   127c6:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   127c8:	3008      	adds	r0, #8
   127ca:	f012 fe0f 	bl	253ec <net_buf_simple_add>
   127ce:	4603      	mov	r3, r0
}
   127d0:	4620      	mov	r0, r4
	hdr->len = len;
   127d2:	705e      	strb	r6, [r3, #1]
	hdr->evt = evt;
   127d4:	701d      	strb	r5, [r3, #0]
}
   127d6:	bd70      	pop	{r4, r5, r6, pc}

000127d8 <bt_hci_cmd_complete_create>:
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   127d8:	3103      	adds	r1, #3
{
   127da:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   127dc:	b2c9      	uxtb	r1, r1
{
   127de:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   127e0:	200e      	movs	r0, #14
   127e2:	f7ff ffe5 	bl	127b0 <bt_hci_evt_create>
	cc = net_buf_add(buf, sizeof(*cc));
   127e6:	2103      	movs	r1, #3
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   127e8:	4604      	mov	r4, r0
	cc = net_buf_add(buf, sizeof(*cc));
   127ea:	3008      	adds	r0, #8
   127ec:	f012 fdfe 	bl	253ec <net_buf_simple_add>
   127f0:	4603      	mov	r3, r0
	cc->ncmd = 1U;
   127f2:	2201      	movs	r2, #1
	cc->opcode = sys_cpu_to_le16(op);
   127f4:	f8a0 5001 	strh.w	r5, [r0, #1]
	cc->ncmd = 1U;
   127f8:	701a      	strb	r2, [r3, #0]
}
   127fa:	4620      	mov	r0, r4
   127fc:	bd38      	pop	{r3, r4, r5, pc}
   127fe:	bf00      	nop

00012800 <bt_hci_cmd_status_create>:
{
   12800:	b570      	push	{r4, r5, r6, lr}
   12802:	4605      	mov	r5, r0
   12804:	460e      	mov	r6, r1
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   12806:	200f      	movs	r0, #15
   12808:	2104      	movs	r1, #4
   1280a:	f7ff ffd1 	bl	127b0 <bt_hci_evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
   1280e:	2104      	movs	r1, #4
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   12810:	4604      	mov	r4, r0
	cs = net_buf_add(buf, sizeof(*cs));
   12812:	3008      	adds	r0, #8
   12814:	f012 fdea 	bl	253ec <net_buf_simple_add>
   12818:	4603      	mov	r3, r0
	cs->ncmd = 1U;
   1281a:	2201      	movs	r2, #1
	cs->status = status;
   1281c:	7006      	strb	r6, [r0, #0]
	cs->opcode = sys_cpu_to_le16(op);
   1281e:	8045      	strh	r5, [r0, #2]
	cs->ncmd = 1U;
   12820:	705a      	strb	r2, [r3, #1]
}
   12822:	4620      	mov	r0, r4
   12824:	bd70      	pop	{r4, r5, r6, pc}
   12826:	bf00      	nop

00012828 <hci_cmd_complete>:
{
   12828:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1282a:	4b06      	ldr	r3, [pc, #24]	; (12844 <hci_cmd_complete+0x1c>)
{
   1282c:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1282e:	8818      	ldrh	r0, [r3, #0]
{
   12830:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12832:	f7ff ffd1 	bl	127d8 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   12836:	4621      	mov	r1, r4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12838:	6028      	str	r0, [r5, #0]
}
   1283a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
   1283e:	3008      	adds	r0, #8
   12840:	f012 bdd4 	b.w	253ec <net_buf_simple_add>
   12844:	20004ce6 	.word	0x20004ce6

00012848 <hci_vendor_cmd_handle_common>:
{
   12848:	b570      	push	{r4, r5, r6, lr}
   1284a:	1e43      	subs	r3, r0, #1
   1284c:	b086      	sub	sp, #24
   1284e:	4614      	mov	r4, r2
   12850:	2b09      	cmp	r3, #9
   12852:	d806      	bhi.n	12862 <hci_vendor_cmd_handle_common+0x1a>
   12854:	e8df f003 	tbb	[pc, r3]
   12858:	05382109 	.word	0x05382109
   1285c:	53054605 	.word	0x53054605
   12860:	7667      	.short	0x7667
	return 0;
   12862:	f06f 0015 	mvn.w	r0, #21
}
   12866:	b006      	add	sp, #24
   12868:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1286a:	4620      	mov	r0, r4
   1286c:	210d      	movs	r1, #13
   1286e:	f7ff ffdb 	bl	12828 <hci_cmd_complete>
   12872:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   12874:	2202      	movs	r2, #2
	rp->status = 0x00;
   12876:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   12878:	2403      	movs	r4, #3
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   1287a:	2163      	movs	r1, #99	; 0x63
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   1287c:	71dc      	strb	r4, [r3, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   1287e:	7259      	strb	r1, [r3, #9]
	rp->status = 0x00;
   12880:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   12882:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   12884:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   12886:	7158      	strb	r0, [r3, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   12888:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   1288a:	7298      	strb	r0, [r3, #10]
   1288c:	72d8      	strb	r0, [r3, #11]
   1288e:	7318      	strb	r0, [r3, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   12890:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   12892:	70da      	strb	r2, [r3, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   12894:	719a      	strb	r2, [r3, #6]
}
   12896:	b006      	add	sp, #24
   12898:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1289a:	4620      	mov	r0, r4
   1289c:	2141      	movs	r1, #65	; 0x41
   1289e:	f7ff ffc3 	bl	12828 <hci_cmd_complete>
	rp->status = 0x00;
   128a2:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   128a4:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   128a6:	4621      	mov	r1, r4
	rp->status = 0x00;
   128a8:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   128ac:	2240      	movs	r2, #64	; 0x40
   128ae:	f00f ff62 	bl	22776 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   128b2:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   128b4:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   128b6:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   128ba:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   128be:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   128c0:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   128c2:	70ab      	strb	r3, [r5, #2]
}
   128c4:	b006      	add	sp, #24
   128c6:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   128c8:	4620      	mov	r0, r4
   128ca:	2109      	movs	r1, #9
   128cc:	f7ff ffac 	bl	12828 <hci_cmd_complete>
	rp->status = 0x00;
   128d0:	2400      	movs	r4, #0
   128d2:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   128d6:	4621      	mov	r1, r4
   128d8:	2208      	movs	r2, #8
   128da:	f00f ff4c 	bl	22776 <memset>
	return 0;
   128de:	4620      	mov	r0, r4
}
   128e0:	b006      	add	sp, #24
   128e2:	bd70      	pop	{r4, r5, r6, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   128e4:	6889      	ldr	r1, [r1, #8]
   128e6:	2000      	movs	r0, #0
   128e8:	f7ff fd56 	bl	12398 <ll_addr_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   128ec:	4620      	mov	r0, r4
   128ee:	2101      	movs	r1, #1
   128f0:	f7ff ff9a 	bl	12828 <hci_cmd_complete>
   128f4:	4603      	mov	r3, r0
	ccst->status = 0x00;
   128f6:	2000      	movs	r0, #0
   128f8:	7018      	strb	r0, [r3, #0]
}
   128fa:	b006      	add	sp, #24
   128fc:	bd70      	pop	{r4, r5, r6, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   128fe:	4e18      	ldr	r6, [pc, #96]	; (12960 <hci_vendor_cmd_handle_common+0x118>)
   12900:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12902:	ad01      	add	r5, sp, #4
   12904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12906:	6833      	ldr	r3, [r6, #0]
   12908:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   1290a:	4620      	mov	r0, r4
   1290c:	2113      	movs	r1, #19
   1290e:	f7ff ff8b 	bl	12828 <hci_cmd_complete>
	rp->status = 0x00;
   12912:	2400      	movs	r4, #0
   12914:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   12918:	2212      	movs	r2, #18
   1291a:	a901      	add	r1, sp, #4
   1291c:	f00f ff00 	bl	22720 <memcpy>
	return 0;
   12920:	4620      	mov	r0, r4
}
   12922:	b006      	add	sp, #24
   12924:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   12926:	4620      	mov	r0, r4
   12928:	2118      	movs	r1, #24
   1292a:	f7ff ff7d 	bl	12828 <hci_cmd_complete>
	rp->status = 0x00;
   1292e:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   12930:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   12932:	2101      	movs	r1, #1
	rp->status = 0x00;
   12934:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   12938:	f00b f9c8 	bl	1dccc <hci_vendor_read_static_addr>
   1293c:	7068      	strb	r0, [r5, #1]
	return 0;
   1293e:	4620      	mov	r0, r4
}
   12940:	b006      	add	sp, #24
   12942:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12944:	4620      	mov	r0, r4
   12946:	2121      	movs	r1, #33	; 0x21
   12948:	f7ff ff6e 	bl	12828 <hci_cmd_complete>
	rp->status = 0x00;
   1294c:	4601      	mov	r1, r0
   1294e:	2400      	movs	r4, #0
   12950:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   12954:	3001      	adds	r0, #1
   12956:	f00b fa2b 	bl	1ddb0 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   1295a:	4620      	mov	r0, r4
}
   1295c:	b006      	add	sp, #24
   1295e:	bd70      	pop	{r4, r5, r6, pc}
   12960:	00026fd0 	.word	0x00026fd0

00012964 <hci_cmd_handle>:
{
   12964:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   12966:	8983      	ldrh	r3, [r0, #12]
{
   12968:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
   1296a:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   1296c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   1296e:	9509      	str	r5, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
   12970:	f240 80bb 	bls.w	12aea <hci_cmd_handle+0x186>
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
   12974:	4604      	mov	r4, r0
   12976:	460e      	mov	r6, r1
   12978:	3008      	adds	r0, #8
   1297a:	2103      	movs	r1, #3
   1297c:	f012 fd73 	bl	25466 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   12980:	89a2      	ldrh	r2, [r4, #12]
   12982:	7883      	ldrb	r3, [r0, #2]
   12984:	429a      	cmp	r2, r3
   12986:	f0c0 80e2 	bcc.w	12b4e <hci_cmd_handle+0x1ea>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   1298a:	8805      	ldrh	r5, [r0, #0]
   1298c:	4f7f      	ldr	r7, [pc, #508]	; (12b8c <hci_cmd_handle+0x228>)
	switch (BT_OGF(_opcode)) {
   1298e:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
	_opcode = sys_le16_to_cpu(chdr->opcode);
   12992:	b2a8      	uxth	r0, r5
   12994:	803d      	strh	r5, [r7, #0]
	ocf = BT_OCF(_opcode);
   12996:	f3c5 0309 	ubfx	r3, r5, #0, #10
	switch (BT_OGF(_opcode)) {
   1299a:	ea4f 2295 	mov.w	r2, r5, lsr #10
   1299e:	d26b      	bcs.n	12a78 <hci_cmd_handle+0x114>
   129a0:	2a00      	cmp	r2, #0
   129a2:	d073      	beq.n	12a8c <hci_cmd_handle+0x128>
   129a4:	3a01      	subs	r2, #1
   129a6:	2a07      	cmp	r2, #7
   129a8:	d870      	bhi.n	12a8c <hci_cmd_handle+0x128>
   129aa:	e8df f002 	tbb	[pc, r2]
   129ae:	6f90      	.short	0x6f90
   129b0:	6f6f5774 	.word	0x6f6f5774
   129b4:	046f      	.short	0x046f
	switch (ocf) {
   129b6:	3b01      	subs	r3, #1
   129b8:	2b4d      	cmp	r3, #77	; 0x4d
   129ba:	d867      	bhi.n	12a8c <hci_cmd_handle+0x128>
   129bc:	e8df f013 	tbh	[pc, r3, lsl #1]
   129c0:	018f019d 	.word	0x018f019d
   129c4:	006601c7 	.word	0x006601c7
   129c8:	01b401c2 	.word	0x01b401c2
   129cc:	03b901ab 	.word	0x03b901ab
   129d0:	03ae03b3 	.word	0x03ae03b3
   129d4:	02030214 	.word	0x02030214
   129d8:	01e601ea 	.word	0x01e601ea
   129dc:	03cb01da 	.word	0x03cb01da
   129e0:	03aa03c7 	.word	0x03aa03c7
   129e4:	02520256 	.word	0x02520256
   129e8:	02390242 	.word	0x02390242
   129ec:	02bd02c9 	.word	0x02bd02c9
   129f0:	02a702af 	.word	0x02a702af
   129f4:	02830296 	.word	0x02830296
   129f8:	00660066 	.word	0x00660066
   129fc:	02740066 	.word	0x02740066
   12a00:	03bf0268 	.word	0x03bf0268
   12a04:	01730179 	.word	0x01730179
   12a08:	00660066 	.word	0x00660066
   12a0c:	0168016c 	.word	0x0168016c
   12a10:	0367022f 	.word	0x0367022f
   12a14:	03450356 	.word	0x03450356
   12a18:	032d0338 	.word	0x032d0338
   12a1c:	02dd030c 	.word	0x02dd030c
   12a20:	03800220 	.word	0x03800220
   12a24:	00660066 	.word	0x00660066
   12a28:	00660066 	.word	0x00660066
   12a2c:	00660066 	.word	0x00660066
   12a30:	00660066 	.word	0x00660066
   12a34:	00660066 	.word	0x00660066
   12a38:	00660066 	.word	0x00660066
   12a3c:	00660066 	.word	0x00660066
   12a40:	00660066 	.word	0x00660066
   12a44:	00660066 	.word	0x00660066
   12a48:	00660066 	.word	0x00660066
   12a4c:	00660066 	.word	0x00660066
   12a50:	00660066 	.word	0x00660066
   12a54:	00660373 	.word	0x00660373
   12a58:	015d0066 	.word	0x015d0066
	switch (ocf) {
   12a5c:	3b01      	subs	r3, #1
   12a5e:	2b08      	cmp	r3, #8
   12a60:	d814      	bhi.n	12a8c <hci_cmd_handle+0x128>
   12a62:	e8df f013 	tbh	[pc, r3, lsl #1]
   12a66:	00f3      	.short	0x00f3
   12a68:	0084009f 	.word	0x0084009f
   12a6c:	00130013 	.word	0x00130013
   12a70:	00130013 	.word	0x00130013
   12a74:	00780013 	.word	0x00780013
	switch (BT_OGF(_opcode)) {
   12a78:	2a3f      	cmp	r2, #63	; 0x3f
   12a7a:	d107      	bne.n	12a8c <hci_cmd_handle+0x128>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   12a7c:	4621      	mov	r1, r4
   12a7e:	4618      	mov	r0, r3
   12a80:	aa09      	add	r2, sp, #36	; 0x24
   12a82:	f7ff fee1 	bl	12848 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   12a86:	3016      	adds	r0, #22
   12a88:	d15f      	bne.n	12b4a <hci_cmd_handle+0x1e6>
   12a8a:	8838      	ldrh	r0, [r7, #0]
	return bt_hci_cmd_status_create(_opcode, status);
   12a8c:	2101      	movs	r1, #1
   12a8e:	f7ff feb7 	bl	12800 <bt_hci_cmd_status_create>
}
   12a92:	b00f      	add	sp, #60	; 0x3c
   12a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   12a96:	2b63      	cmp	r3, #99	; 0x63
   12a98:	f000 839d 	beq.w	131d6 <hci_cmd_handle+0x872>
   12a9c:	d842      	bhi.n	12b24 <hci_cmd_handle+0x1c0>
   12a9e:	2b03      	cmp	r3, #3
   12aa0:	f000 8381 	beq.w	131a6 <hci_cmd_handle+0x842>
   12aa4:	2b2d      	cmp	r3, #45	; 0x2d
   12aa6:	d12d      	bne.n	12b04 <hci_cmd_handle+0x1a0>
		read_tx_power_level(cmd, evt);
   12aa8:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12aaa:	2104      	movs	r1, #4
   12aac:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   12aae:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   12ab0:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12ab2:	f7ff feb9 	bl	12828 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   12ab6:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12ab8:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   12aba:	1cc3      	adds	r3, r0, #3
   12abc:	4632      	mov	r2, r6
   12abe:	2002      	movs	r0, #2
   12ac0:	f7ff fc8a 	bl	123d8 <ll_tx_pwr_lvl_get>
	rp->status = status;
   12ac4:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
   12ac6:	9809      	ldr	r0, [sp, #36]	; 0x24
   12ac8:	f8a4 5001 	strh.w	r5, [r4, #1]
}
   12acc:	e7e1      	b.n	12a92 <hci_cmd_handle+0x12e>
	switch (ocf) {
   12ace:	2b06      	cmp	r3, #6
   12ad0:	f000 834b 	beq.w	1316a <hci_cmd_handle+0x806>
   12ad4:	2b1d      	cmp	r3, #29
   12ad6:	d1d9      	bne.n	12a8c <hci_cmd_handle+0x128>
	handle = sys_le16_to_cpu(cmd->handle);
   12ad8:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   12ada:	8818      	ldrh	r0, [r3, #0]
   12adc:	f003 feb6 	bl	1684c <ll_version_ind_send>
   12ae0:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12ae2:	8838      	ldrh	r0, [r7, #0]
   12ae4:	f7ff fe8c 	bl	12800 <bt_hci_cmd_status_create>
}
   12ae8:	e7d3      	b.n	12a92 <hci_cmd_handle+0x12e>
   12aea:	4929      	ldr	r1, [pc, #164]	; (12b90 <hci_cmd_handle+0x22c>)
   12aec:	4b29      	ldr	r3, [pc, #164]	; (12b94 <hci_cmd_handle+0x230>)
		BT_ERR("No HCI Command header");
   12aee:	482a      	ldr	r0, [pc, #168]	; (12b98 <hci_cmd_handle+0x234>)
   12af0:	1ac9      	subs	r1, r1, r3
   12af2:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
   12af4:	0189      	lsls	r1, r1, #6
   12af6:	f041 0101 	orr.w	r1, r1, #1
   12afa:	f00e f861 	bl	20bc0 <log_0>
		return NULL;
   12afe:	4628      	mov	r0, r5
}
   12b00:	b00f      	add	sp, #60	; 0x3c
   12b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   12b04:	2b01      	cmp	r3, #1
   12b06:	d1c1      	bne.n	12a8c <hci_cmd_handle+0x128>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   12b08:	68a1      	ldr	r1, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   12b0a:	4a24      	ldr	r2, [pc, #144]	; (12b9c <hci_cmd_handle+0x238>)
   12b0c:	6808      	ldr	r0, [r1, #0]
   12b0e:	684c      	ldr	r4, [r1, #4]
   12b10:	6010      	str	r0, [r2, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   12b12:	4619      	mov	r1, r3
   12b14:	a809      	add	r0, sp, #36	; 0x24
	event_mask = sys_get_le64(cmd->events);
   12b16:	6054      	str	r4, [r2, #4]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   12b18:	f7ff fe86 	bl	12828 <hci_cmd_complete>
	ccst->status = 0x00;
   12b1c:	2300      	movs	r3, #0
   12b1e:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   12b20:	9809      	ldr	r0, [sp, #36]	; 0x24
   12b22:	e7b6      	b.n	12a92 <hci_cmd_handle+0x12e>
	switch (ocf) {
   12b24:	2b7b      	cmp	r3, #123	; 0x7b
   12b26:	f000 832a 	beq.w	1317e <hci_cmd_handle+0x81a>
   12b2a:	2b7c      	cmp	r3, #124	; 0x7c
   12b2c:	d1ae      	bne.n	12a8c <hci_cmd_handle+0x128>
		write_auth_payload_timeout(cmd, evt);
   12b2e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   12b30:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   12b32:	8859      	ldrh	r1, [r3, #2]
   12b34:	4628      	mov	r0, r5
   12b36:	f003 ff87 	bl	16a48 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   12b3a:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12b3c:	2103      	movs	r1, #3
   12b3e:	a809      	add	r0, sp, #36	; 0x24
   12b40:	f7ff fe72 	bl	12828 <hci_cmd_complete>
	rp->status = status;
   12b44:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   12b46:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   12b4a:	9809      	ldr	r0, [sp, #36]	; 0x24
   12b4c:	e7a1      	b.n	12a92 <hci_cmd_handle+0x12e>
   12b4e:	4910      	ldr	r1, [pc, #64]	; (12b90 <hci_cmd_handle+0x22c>)
   12b50:	4b10      	ldr	r3, [pc, #64]	; (12b94 <hci_cmd_handle+0x230>)
		BT_ERR("Invalid HCI CMD packet length");
   12b52:	4813      	ldr	r0, [pc, #76]	; (12ba0 <hci_cmd_handle+0x23c>)
   12b54:	e7cc      	b.n	12af0 <hci_cmd_handle+0x18c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12b56:	2107      	movs	r1, #7
   12b58:	a809      	add	r0, sp, #36	; 0x24
   12b5a:	f7ff fe65 	bl	12828 <hci_cmd_complete>
	rp->status = 0x00;
   12b5e:	4601      	mov	r1, r0
   12b60:	2000      	movs	r0, #0
   12b62:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   12b66:	f7ff fbf9 	bl	1235c <ll_addr_get>
   12b6a:	9809      	ldr	r0, [sp, #36]	; 0x24
}
   12b6c:	e791      	b.n	12a92 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12b6e:	2109      	movs	r1, #9
   12b70:	a809      	add	r0, sp, #36	; 0x24
   12b72:	f7ff fe59 	bl	12828 <hci_cmd_complete>
	rp->status = 0x00;
   12b76:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12b78:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12b7a:	2208      	movs	r2, #8
	rp->status = 0x00;
   12b7c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12b80:	f00f fdf9 	bl	22776 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   12b84:	2360      	movs	r3, #96	; 0x60
   12b86:	9809      	ldr	r0, [sp, #36]	; 0x24
   12b88:	7163      	strb	r3, [r4, #5]
}
   12b8a:	e782      	b.n	12a92 <hci_cmd_handle+0x12e>
   12b8c:	20004ce6 	.word	0x20004ce6
   12b90:	0002657c 	.word	0x0002657c
   12b94:	00026544 	.word	0x00026544
   12b98:	00026fe4 	.word	0x00026fe4
   12b9c:	20000108 	.word	0x20000108
   12ba0:	00026ffc 	.word	0x00026ffc
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12ba4:	2141      	movs	r1, #65	; 0x41
   12ba6:	a809      	add	r0, sp, #36	; 0x24
   12ba8:	f7ff fe3e 	bl	12828 <hci_cmd_complete>
	rp->status = 0x00;
   12bac:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12bae:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   12bb0:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   12bb2:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   12bb6:	f00f fdde 	bl	22776 <memset>
	rp->commands[10] |= BIT(2);
   12bba:	7ae5      	ldrb	r5, [r4, #11]
	rp->commands[0] |= BIT(5);
   12bbc:	7867      	ldrb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   12bbe:	79a6      	ldrb	r6, [r4, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
   12bc0:	7be0      	ldrb	r0, [r4, #15]
	rp->commands[15] |= BIT(1);
   12bc2:	7c21      	ldrb	r1, [r4, #16]
	rp->commands[22] |= BIT(2);
   12bc4:	7de2      	ldrb	r2, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   12bc6:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[10] |= BIT(2);
   12bc8:	f045 0504 	orr.w	r5, r5, #4
	rp->commands[0] |= BIT(5);
   12bcc:	f047 0720 	orr.w	r7, r7, #32
	rp->commands[5] |= BIT(6) | BIT(7);
   12bd0:	f066 063f 	orn	r6, r6, #63	; 0x3f
	rp->commands[14] |= BIT(3) | BIT(5);
   12bd4:	f040 0028 	orr.w	r0, r0, #40	; 0x28
	rp->commands[15] |= BIT(1);
   12bd8:	f041 0102 	orr.w	r1, r1, #2
	rp->commands[22] |= BIT(2);
   12bdc:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   12be0:	f063 0308 	orn	r3, r3, #8
	rp->commands[10] |= BIT(2);
   12be4:	72e5      	strb	r5, [r4, #11]
	rp->commands[33] |= BIT(4) | BIT(5);
   12be6:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   12bea:	7067      	strb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   12bec:	71a6      	strb	r6, [r4, #6]
	rp->commands[28] |= BIT(3);
   12bee:	7f67      	ldrb	r7, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   12bf0:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
	rp->commands[14] |= BIT(3) | BIT(5);
   12bf4:	73e0      	strb	r0, [r4, #15]
	rp->commands[15] |= BIT(1);
   12bf6:	7421      	strb	r1, [r4, #16]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   12bf8:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
   12bfc:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[22] |= BIT(2);
   12c00:	75e2      	strb	r2, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   12c02:	76a3      	strb	r3, [r4, #26]
	rp->commands[39] |= BIT(2);
   12c04:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   12c08:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[33] |= BIT(6) | BIT(7);
   12c0c:	f065 050f 	orn	r5, r5, #15
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   12c10:	f060 0006 	orn	r0, r0, #6
	rp->commands[28] |= BIT(1) | BIT(2);
   12c14:	f047 070f 	orr.w	r7, r7, #15
	rp->commands[32] |= BIT(4) | BIT(5);
   12c18:	f046 0630 	orr.w	r6, r6, #48	; 0x30
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   12c1c:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[39] |= BIT(2);
   12c20:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   12c24:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[33] |= BIT(6) | BIT(7);
   12c28:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
	rp->commands[26] |= BIT(4) | BIT(5);
   12c2c:	25ff      	movs	r5, #255	; 0xff
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   12c2e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
   12c32:	7767      	strb	r7, [r4, #29]
   12c34:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
   12c36:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   12c3a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   12c3e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   12c42:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	rp->commands[26] |= BIT(4) | BIT(5);
   12c46:	76e5      	strb	r5, [r4, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   12c48:	7725      	strb	r5, [r4, #28]
}
   12c4a:	e722      	b.n	12a92 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12c4c:	2109      	movs	r1, #9
   12c4e:	a809      	add	r0, sp, #36	; 0x24
   12c50:	f7ff fdea 	bl	12828 <hci_cmd_complete>
   12c54:	4603      	mov	r3, r0
	rp->status = 0x00;
   12c56:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
   12c58:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   12c5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   12c5e:	f06f 050e 	mvn.w	r5, #14
   12c62:	2405      	movs	r4, #5
	rp->status = 0x00;
   12c64:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   12c66:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   12c68:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   12c6a:	715d      	strb	r5, [r3, #5]
   12c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
   12c6e:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
   12c70:	709a      	strb	r2, [r3, #2]
   12c72:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   12c74:	71d9      	strb	r1, [r3, #7]
   12c76:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
   12c78:	e70b      	b.n	12a92 <hci_cmd_handle+0x12e>
		le_set_privacy_mode(cmd, evt);
   12c7a:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   12c7c:	79c1      	ldrb	r1, [r0, #7]
   12c7e:	f007 fd4b 	bl	1a718 <ll_priv_mode_set>
   12c82:	4604      	mov	r4, r0
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   12c84:	2101      	movs	r1, #1
   12c86:	a809      	add	r0, sp, #36	; 0x24
   12c88:	f7ff fdce 	bl	12828 <hci_cmd_complete>
	ccst->status = status;
   12c8c:	7004      	strb	r4, [r0, #0]
   12c8e:	e75c      	b.n	12b4a <hci_cmd_handle+0x1e6>
	status = ll_rl_remove(&cmd->peer_id_addr);
   12c90:	68a0      	ldr	r0, [r4, #8]
   12c92:	f007 fc5d 	bl	1a550 <ll_rl_remove>
   12c96:	e7f4      	b.n	12c82 <hci_cmd_handle+0x31e>
		le_add_dev_to_rl(cmd, evt);
   12c98:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   12c9a:	f100 0217 	add.w	r2, r0, #23
   12c9e:	1dc1      	adds	r1, r0, #7
   12ca0:	f007 fb98 	bl	1a3d4 <ll_rl_add>
   12ca4:	e7ed      	b.n	12c82 <hci_cmd_handle+0x31e>
		le_write_default_data_len(cmd, evt);
   12ca6:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   12ca8:	8859      	ldrh	r1, [r3, #2]
   12caa:	8818      	ldrh	r0, [r3, #0]
   12cac:	f003 fe34 	bl	16918 <ll_length_default_set>
   12cb0:	e7e7      	b.n	12c82 <hci_cmd_handle+0x31e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12cb2:	2105      	movs	r1, #5
   12cb4:	a809      	add	r0, sp, #36	; 0x24
   12cb6:	f7ff fdb7 	bl	12828 <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   12cba:	a90a      	add	r1, sp, #40	; 0x28
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12cbc:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   12cbe:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   12cc2:	f003 fe1d 	bl	16900 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   12cc6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   12cca:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   12cce:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12cd0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   12cd4:	7022      	strb	r2, [r4, #0]
   12cd6:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12cd8:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   12cdc:	e6d9      	b.n	12a92 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12cde:	2104      	movs	r1, #4
   12ce0:	a809      	add	r0, sp, #36	; 0x24
   12ce2:	f7ff fda1 	bl	12828 <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   12ce6:	220a      	movs	r2, #10
	rp->status = 0x00;
   12ce8:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   12cea:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
   12cec:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   12cee:	f06f 0204 	mvn.w	r2, #4
   12cf2:	7042      	strb	r2, [r0, #1]
   12cf4:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   12cf6:	9809      	ldr	r0, [sp, #36]	; 0x24
   12cf8:	e6cb      	b.n	12a92 <hci_cmd_handle+0x12e>
   12cfa:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   12cfc:	4bb3      	ldr	r3, [pc, #716]	; (12fcc <hci_cmd_handle+0x668>)
   12cfe:	6811      	ldr	r1, [r2, #0]
   12d00:	6852      	ldr	r2, [r2, #4]
   12d02:	605a      	str	r2, [r3, #4]
   12d04:	6019      	str	r1, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   12d06:	a809      	add	r0, sp, #36	; 0x24
   12d08:	2101      	movs	r1, #1
   12d0a:	f7ff fd8d 	bl	12828 <hci_cmd_complete>
	ccst->status = 0x00;
   12d0e:	2300      	movs	r3, #0
   12d10:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   12d12:	9809      	ldr	r0, [sp, #36]	; 0x24
   12d14:	e6bd      	b.n	12a92 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12d16:	2102      	movs	r1, #2
   12d18:	a809      	add	r0, sp, #36	; 0x24
   12d1a:	f7ff fd85 	bl	12828 <hci_cmd_complete>
	rp->status = 0x00;
   12d1e:	2300      	movs	r3, #0
   12d20:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   12d22:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   12d24:	9809      	ldr	r0, [sp, #36]	; 0x24
   12d26:	e6b4      	b.n	12a92 <hci_cmd_handle+0x12e>
		le_set_adv_param(cmd, evt);
   12d28:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   12d2a:	7ba5      	ldrb	r5, [r4, #14]
   12d2c:	79a3      	ldrb	r3, [r4, #6]
   12d2e:	7962      	ldrb	r2, [r4, #5]
   12d30:	7921      	ldrb	r1, [r4, #4]
   12d32:	8820      	ldrh	r0, [r4, #0]
   12d34:	9502      	str	r5, [sp, #8]
   12d36:	7b65      	ldrb	r5, [r4, #13]
   12d38:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   12d3a:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   12d3c:	9400      	str	r4, [sp, #0]
   12d3e:	f002 fc83 	bl	15648 <ll_adv_params_set>
   12d42:	e79e      	b.n	12c82 <hci_cmd_handle+0x31e>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   12d44:	68a1      	ldr	r1, [r4, #8]
   12d46:	2001      	movs	r0, #1
   12d48:	f7ff fb26 	bl	12398 <ll_addr_set>
   12d4c:	e799      	b.n	12c82 <hci_cmd_handle+0x31e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12d4e:	2109      	movs	r1, #9
   12d50:	a809      	add	r0, sp, #36	; 0x24
   12d52:	f7ff fd69 	bl	12828 <hci_cmd_complete>
	rp->status = 0x00;
   12d56:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12d58:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12d5a:	2208      	movs	r2, #8
	rp->status = 0x00;
   12d5c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12d60:	f00f fd09 	bl	22776 <memset>
	dst[0] = val;
   12d64:	21ff      	movs	r1, #255	; 0xff
	dst[1] = val >> 8;
   12d66:	2249      	movs	r2, #73	; 0x49
	dst[2] = val >> 16;
   12d68:	2301      	movs	r3, #1
	dst[0] = val;
   12d6a:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
   12d6c:	70a2      	strb	r2, [r4, #2]
	dst[2] = val >> 16;
   12d6e:	70e3      	strb	r3, [r4, #3]
	if (err == -EINVAL) {
   12d70:	9809      	ldr	r0, [sp, #36]	; 0x24
   12d72:	e68e      	b.n	12a92 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12d74:	2102      	movs	r1, #2
   12d76:	a809      	add	r0, sp, #36	; 0x24
   12d78:	f7ff fd56 	bl	12828 <hci_cmd_complete>
	rp->status = 0x00;
   12d7c:	2300      	movs	r3, #0
   12d7e:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12d80:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   12d82:	f006 ff47 	bl	19c14 <ll_wl_size_get>
   12d86:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   12d88:	9809      	ldr	r0, [sp, #36]	; 0x24
   12d8a:	e682      	b.n	12a92 <hci_cmd_handle+0x12e>
	status = ll_connect_disable(node_rx);
   12d8c:	4630      	mov	r0, r6
   12d8e:	f006 fc8d 	bl	196ac <ll_connect_disable>
   12d92:	e776      	b.n	12c82 <hci_cmd_handle+0x31e>
		le_create_connection(cmd, evt);
   12d94:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
   12d96:	f8b4 5013 	ldrh.w	r5, [r4, #19]
   12d9a:	8861      	ldrh	r1, [r4, #2]
   12d9c:	7963      	ldrb	r3, [r4, #5]
   12d9e:	7922      	ldrb	r2, [r4, #4]
   12da0:	8820      	ldrh	r0, [r4, #0]
   12da2:	9504      	str	r5, [sp, #16]
   12da4:	f8b4 5011 	ldrh.w	r5, [r4, #17]
   12da8:	9503      	str	r5, [sp, #12]
   12daa:	f8b4 500f 	ldrh.w	r5, [r4, #15]
   12dae:	9502      	str	r5, [sp, #8]
   12db0:	7b25      	ldrb	r5, [r4, #12]
   12db2:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
   12db4:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   12db6:	9400      	str	r4, [sp, #0]
   12db8:	f006 fa72 	bl	192a0 <ll_create_connection>
   12dbc:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12dbe:	8838      	ldrh	r0, [r7, #0]
   12dc0:	f7ff fd1e 	bl	12800 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   12dc4:	e665      	b.n	12a92 <hci_cmd_handle+0x12e>
		le_set_scan_enable(cmd, evt);
   12dc6:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
   12dc8:	7818      	ldrb	r0, [r3, #0]
   12dca:	2800      	cmp	r0, #0
   12dcc:	f000 8206 	beq.w	131dc <hci_cmd_handle+0x878>
   12dd0:	785b      	ldrb	r3, [r3, #1]
   12dd2:	2b00      	cmp	r3, #0
   12dd4:	f000 8202 	beq.w	131dc <hci_cmd_handle+0x878>
		dup_count = 0;
   12dd8:	497d      	ldr	r1, [pc, #500]	; (12fd0 <hci_cmd_handle+0x66c>)
		dup_curr = 0U;
   12dda:	4a7e      	ldr	r2, [pc, #504]	; (12fd4 <hci_cmd_handle+0x670>)
		dup_count = 0;
   12ddc:	2300      	movs	r3, #0
   12dde:	600b      	str	r3, [r1, #0]
		dup_curr = 0U;
   12de0:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   12de2:	f002 ff3d 	bl	15c60 <ll_scan_enable>
   12de6:	e74c      	b.n	12c82 <hci_cmd_handle+0x31e>
		le_set_scan_param(cmd, evt);
   12de8:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   12dea:	7963      	ldrb	r3, [r4, #5]
   12dec:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   12df0:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   12df4:	7820      	ldrb	r0, [r4, #0]
   12df6:	79a4      	ldrb	r4, [r4, #6]
   12df8:	9400      	str	r4, [sp, #0]
   12dfa:	f7ee fa0d 	bl	1218 <ll_scan_params_set>
   12dfe:	e740      	b.n	12c82 <hci_cmd_handle+0x31e>
		le_set_default_phy(cmd, evt);
   12e00:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   12e02:	781a      	ldrb	r2, [r3, #0]
   12e04:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   12e06:	bf4a      	itet	mi
   12e08:	2007      	movmi	r0, #7
   12e0a:	7858      	ldrbpl	r0, [r3, #1]
   12e0c:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   12e0e:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   12e10:	bf4a      	itet	mi
   12e12:	2107      	movmi	r1, #7
   12e14:	7899      	ldrbpl	r1, [r3, #2]
   12e16:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   12e18:	f003 fdaa 	bl	16970 <ll_phy_default_set>
   12e1c:	e731      	b.n	12c82 <hci_cmd_handle+0x31e>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   12e1e:	2101      	movs	r1, #1
   12e20:	a809      	add	r0, sp, #36	; 0x24
   12e22:	f7ff fd01 	bl	12828 <hci_cmd_complete>
   12e26:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
   12e28:	f006 ffa4 	bl	19d74 <ll_rl_clear>
   12e2c:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   12e2e:	9809      	ldr	r0, [sp, #36]	; 0x24
   12e30:	e62f      	b.n	12a92 <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
   12e32:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   12e34:	8818      	ldrh	r0, [r3, #0]
   12e36:	f003 fcf3 	bl	16820 <ll_feature_req_send>
   12e3a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12e3c:	8838      	ldrh	r0, [r7, #0]
   12e3e:	f7ff fcdf 	bl	12800 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   12e42:	e626      	b.n	12a92 <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
   12e44:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12e46:	2108      	movs	r1, #8
   12e48:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   12e4a:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12e4c:	f7ff fcec 	bl	12828 <hci_cmd_complete>
   12e50:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   12e52:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   12e54:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
   12e56:	f003 fcb3 	bl	167c0 <ll_chm_get>
	rp->status = status;
   12e5a:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   12e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
   12e5e:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   12e62:	e616      	b.n	12a92 <hci_cmd_handle+0x12e>
	status = ll_chm_update(&cmd->ch_map[0]);
   12e64:	68a0      	ldr	r0, [r4, #8]
   12e66:	f006 fc67 	bl	19738 <ll_chm_update>
   12e6a:	e70a      	b.n	12c82 <hci_cmd_handle+0x31e>
		le_conn_update(cmd, evt);
   12e6c:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   12e6e:	8911      	ldrh	r1, [r2, #8]
   12e70:	8853      	ldrh	r3, [r2, #2]
   12e72:	8810      	ldrh	r0, [r2, #0]
   12e74:	9102      	str	r1, [sp, #8]
   12e76:	88d1      	ldrh	r1, [r2, #6]
   12e78:	9101      	str	r1, [sp, #4]
   12e7a:	8892      	ldrh	r2, [r2, #4]
   12e7c:	9200      	str	r2, [sp, #0]
   12e7e:	2200      	movs	r2, #0
   12e80:	4611      	mov	r1, r2
   12e82:	f003 fc1f 	bl	166c4 <ll_conn_update>
   12e86:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12e88:	8838      	ldrh	r0, [r7, #0]
   12e8a:	f7ff fcb9 	bl	12800 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   12e8e:	e600      	b.n	12a92 <hci_cmd_handle+0x12e>
		le_conn_param_req_neg_reply(cmd, evt);
   12e90:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   12e92:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   12e94:	789a      	ldrb	r2, [r3, #2]
   12e96:	2300      	movs	r3, #0
   12e98:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12e9c:	4628      	mov	r0, r5
   12e9e:	9300      	str	r3, [sp, #0]
   12ea0:	2102      	movs	r1, #2
   12ea2:	f003 fc0f 	bl	166c4 <ll_conn_update>
   12ea6:	e648      	b.n	12b3a <hci_cmd_handle+0x1d6>
		le_conn_param_req_reply(cmd, evt);
   12ea8:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   12eaa:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   12eac:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   12eae:	8853      	ldrh	r3, [r2, #2]
   12eb0:	9102      	str	r1, [sp, #8]
   12eb2:	88d1      	ldrh	r1, [r2, #6]
   12eb4:	9101      	str	r1, [sp, #4]
   12eb6:	8892      	ldrh	r2, [r2, #4]
   12eb8:	9200      	str	r2, [sp, #0]
   12eba:	4628      	mov	r0, r5
   12ebc:	2200      	movs	r2, #0
   12ebe:	2102      	movs	r1, #2
   12ec0:	f003 fc00 	bl	166c4 <ll_conn_update>
   12ec4:	e639      	b.n	12b3a <hci_cmd_handle+0x1d6>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12ec6:	2109      	movs	r1, #9
   12ec8:	a809      	add	r0, sp, #36	; 0x24
   12eca:	f7ff fcad 	bl	12828 <hci_cmd_complete>
	dst[0] = val;
   12ece:	23ff      	movs	r3, #255	; 0xff
	rp->status = 0x00;
   12ed0:	2200      	movs	r2, #0
   12ed2:	213f      	movs	r1, #63	; 0x3f
   12ed4:	70c1      	strb	r1, [r0, #3]
   12ed6:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   12ed8:	2103      	movs	r1, #3
	dst[0] = val;
   12eda:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
   12edc:	7083      	strb	r3, [r0, #2]
   12ede:	7181      	strb	r1, [r0, #6]
	dst[0] = val;
   12ee0:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
   12ee2:	7202      	strb	r2, [r0, #8]
   12ee4:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
   12ee6:	7143      	strb	r3, [r0, #5]
	if (err == -EINVAL) {
   12ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
   12eea:	e5d2      	b.n	12a92 <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
   12eec:	68a3      	ldr	r3, [r4, #8]
   12eee:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   12ef0:	2200      	movs	r2, #0
   12ef2:	2106      	movs	r1, #6
   12ef4:	4628      	mov	r0, r5
   12ef6:	f006 f913 	bl	19120 <ll_start_enc_req_send>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12efa:	2103      	movs	r1, #3
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   12efc:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12efe:	a809      	add	r0, sp, #36	; 0x24
   12f00:	f7ff fc92 	bl	12828 <hci_cmd_complete>
	rp->status = status;
   12f04:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_le16_to_cpu(handle);
   12f06:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   12f0a:	9809      	ldr	r0, [sp, #36]	; 0x24
   12f0c:	e5c1      	b.n	12a92 <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
   12f0e:	68a2      	ldr	r2, [r4, #8]
   12f10:	f832 5b02 	ldrh.w	r5, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   12f14:	2100      	movs	r1, #0
   12f16:	4628      	mov	r0, r5
   12f18:	f006 f902 	bl	19120 <ll_start_enc_req_send>
   12f1c:	e60d      	b.n	12b3a <hci_cmd_handle+0x1d6>
		le_start_encryption(cmd, evt);
   12f1e:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
   12f20:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   12f22:	f102 030c 	add.w	r3, r2, #12
   12f26:	f831 0b02 	ldrh.w	r0, [r1], #2
   12f2a:	320a      	adds	r2, #10
   12f2c:	f006 fc30 	bl	19790 <ll_enc_req_send>
   12f30:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12f32:	8838      	ldrh	r0, [r7, #0]
   12f34:	f7ff fc64 	bl	12800 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   12f38:	e5ab      	b.n	12a92 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12f3a:	2109      	movs	r1, #9
   12f3c:	a809      	add	r0, sp, #36	; 0x24
   12f3e:	f7ff fc73 	bl	12828 <hci_cmd_complete>
	rp->status = 0x00;
   12f42:	2300      	movs	r3, #0
   12f44:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   12f48:	2108      	movs	r1, #8
   12f4a:	f008 f865 	bl	1b018 <lll_csrand_get>
	if (err == -EINVAL) {
   12f4e:	9809      	ldr	r0, [sp, #36]	; 0x24
   12f50:	e59f      	b.n	12a92 <hci_cmd_handle+0x12e>
		le_encrypt(cmd, evt);
   12f52:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   12f54:	aa0a      	add	r2, sp, #40	; 0x28
   12f56:	f100 0110 	add.w	r1, r0, #16
   12f5a:	2300      	movs	r3, #0
   12f5c:	f00a f802 	bl	1cf64 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12f60:	2111      	movs	r1, #17
   12f62:	a809      	add	r0, sp, #36	; 0x24
   12f64:	f7ff fc60 	bl	12828 <hci_cmd_complete>
	rp->status = 0x00;
   12f68:	2300      	movs	r3, #0
   12f6a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   12f6e:	a90a      	add	r1, sp, #40	; 0x28
   12f70:	2210      	movs	r2, #16
   12f72:	f00f fbd5 	bl	22720 <memcpy>
	if (err == -EINVAL) {
   12f76:	9809      	ldr	r0, [sp, #36]	; 0x24
   12f78:	e58b      	b.n	12a92 <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
   12f7a:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12f7c:	2105      	movs	r1, #5
   12f7e:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   12f80:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12f82:	f7ff fc51 	bl	12828 <hci_cmd_complete>
   12f86:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   12f88:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   12f8a:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   12f8c:	1ce1      	adds	r1, r4, #3
   12f8e:	f003 fcd7 	bl	16940 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
   12f92:	78e2      	ldrb	r2, [r4, #3]
   12f94:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
   12f96:	7020      	strb	r0, [r4, #0]
   12f98:	2a00      	cmp	r2, #0
   12f9a:	fa92 f2a2 	rbit	r2, r2
   12f9e:	fab2 f282 	clz	r2, r2
   12fa2:	bf08      	it	eq
   12fa4:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   12fa8:	2b00      	cmp	r3, #0
   12faa:	fa93 f3a3 	rbit	r3, r3
   12fae:	fab3 f383 	clz	r3, r3
   12fb2:	f102 0201 	add.w	r2, r2, #1
   12fb6:	bf08      	it	eq
   12fb8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   12fbc:	70e2      	strb	r2, [r4, #3]
   12fbe:	3301      	adds	r3, #1
   12fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
   12fc2:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   12fc6:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
   12fc8:	e563      	b.n	12a92 <hci_cmd_handle+0x12e>
   12fca:	bf00      	nop
   12fcc:	20000110 	.word	0x20000110
   12fd0:	20001c50 	.word	0x20001c50
   12fd4:	20001c54 	.word	0x20001c54
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12fd8:	2109      	movs	r1, #9
   12fda:	a809      	add	r0, sp, #36	; 0x24
   12fdc:	f7ff fc24 	bl	12828 <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   12fe0:	ab0a      	add	r3, sp, #40	; 0x28
	rp = hci_cmd_complete(evt, sizeof(*rp));
   12fe2:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   12fe4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   12fe8:	f10d 001e 	add.w	r0, sp, #30
   12fec:	a908      	add	r1, sp, #32
   12fee:	f003 fc9d 	bl	1692c <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12ff2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   12ff6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   12ffa:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12ffe:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   13002:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   13006:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   1300a:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   1300c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   13010:	7022      	strb	r2, [r4, #0]
   13012:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   13014:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   13018:	e53b      	b.n	12a92 <hci_cmd_handle+0x12e>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   1301a:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   1301c:	8818      	ldrh	r0, [r3, #0]
   1301e:	f006 ff0b 	bl	19e38 <ll_rl_timeout_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   13022:	2101      	movs	r1, #1
   13024:	a809      	add	r0, sp, #36	; 0x24
   13026:	f7ff fbff 	bl	12828 <hci_cmd_complete>
	ccst->status = 0x00;
   1302a:	2300      	movs	r3, #0
   1302c:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   1302e:	e58c      	b.n	12b4a <hci_cmd_handle+0x1e6>
	uint8_t enable = cmd->enable;
   13030:	68a3      	ldr	r3, [r4, #8]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   13032:	2101      	movs	r1, #1
   13034:	a809      	add	r0, sp, #36	; 0x24
	uint8_t enable = cmd->enable;
   13036:	781d      	ldrb	r5, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   13038:	f7ff fbf6 	bl	12828 <hci_cmd_complete>
   1303c:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
   1303e:	4628      	mov	r0, r5
   13040:	f006 fede 	bl	19e00 <ll_rl_enable>
   13044:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   13046:	9809      	ldr	r0, [sp, #36]	; 0x24
   13048:	e523      	b.n	12a92 <hci_cmd_handle+0x12e>
	memcpy(dst, src, sizeof(*dst));
   1304a:	68a1      	ldr	r1, [r4, #8]
   1304c:	2207      	movs	r2, #7
   1304e:	a80a      	add	r0, sp, #40	; 0x28
   13050:	f00f fb66 	bl	22720 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   13054:	2107      	movs	r1, #7
   13056:	a809      	add	r0, sp, #36	; 0x24
   13058:	f7ff fbe6 	bl	12828 <hci_cmd_complete>
   1305c:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   1305e:	1c61      	adds	r1, r4, #1
   13060:	a80a      	add	r0, sp, #40	; 0x28
   13062:	f007 fb3d 	bl	1a6e0 <ll_rl_lrpa_get>
   13066:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   13068:	9809      	ldr	r0, [sp, #36]	; 0x24
   1306a:	e512      	b.n	12a92 <hci_cmd_handle+0x12e>
   1306c:	68a1      	ldr	r1, [r4, #8]
   1306e:	2207      	movs	r2, #7
   13070:	a80a      	add	r0, sp, #40	; 0x28
   13072:	f00f fb55 	bl	22720 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   13076:	2107      	movs	r1, #7
   13078:	a809      	add	r0, sp, #36	; 0x24
   1307a:	f7ff fbd5 	bl	12828 <hci_cmd_complete>
   1307e:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   13080:	1c61      	adds	r1, r4, #1
   13082:	a80a      	add	r0, sp, #40	; 0x28
   13084:	f007 fb0a 	bl	1a69c <ll_rl_crpa_get>
   13088:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   1308a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1308c:	e501      	b.n	12a92 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1308e:	2102      	movs	r1, #2
   13090:	a809      	add	r0, sp, #36	; 0x24
   13092:	f7ff fbc9 	bl	12828 <hci_cmd_complete>
   13096:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   13098:	f006 fe6a 	bl	19d70 <ll_rl_size_get>
	rp->status = 0x00;
   1309c:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   1309e:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   130a0:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
   130a2:	9809      	ldr	r0, [sp, #36]	; 0x24
   130a4:	e4f5      	b.n	12a92 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   130a6:	2103      	movs	r1, #3
   130a8:	a809      	add	r0, sp, #36	; 0x24
   130aa:	f7ff fbbd 	bl	12828 <hci_cmd_complete>
	rp->status = 0x00;
   130ae:	4601      	mov	r1, r0
   130b0:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   130b2:	3001      	adds	r0, #1
	rp->status = 0x00;
   130b4:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   130b8:	f7ff f99e 	bl	123f8 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   130bc:	9809      	ldr	r0, [sp, #36]	; 0x24
   130be:	e4e8      	b.n	12a92 <hci_cmd_handle+0x12e>
		le_set_phy(cmd, evt);
   130c0:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   130c2:	7895      	ldrb	r5, [r2, #2]
   130c4:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   130c6:	8816      	ldrh	r6, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   130c8:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   130cc:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
   130ce:	bf48      	it	mi
   130d0:	f041 0107 	orrmi.w	r1, r1, #7
   130d4:	7913      	ldrb	r3, [r2, #4]
   130d6:	bf48      	it	mi
   130d8:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   130da:	07ad      	lsls	r5, r5, #30
		cmd->rx_phys |= mask_phys;
   130dc:	bf44      	itt	mi
   130de:	f043 0307 	orrmi.w	r3, r3, #7
   130e2:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   130e4:	ea43 0201 	orr.w	r2, r3, r1
   130e8:	f032 0207 	bics.w	r2, r2, #7
   130ec:	d17f      	bne.n	131ee <hci_cmd_handle+0x88a>
	if (!(cmd->tx_phys & 0x07) ||
   130ee:	074d      	lsls	r5, r1, #29
   130f0:	d079      	beq.n	131e6 <hci_cmd_handle+0x882>
   130f2:	075a      	lsls	r2, r3, #29
   130f4:	d077      	beq.n	131e6 <hci_cmd_handle+0x882>
	if (phy_opts & 0x03) {
   130f6:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   130fa:	bf1c      	itt	ne
   130fc:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   13100:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   13104:	4630      	mov	r0, r6
   13106:	f003 fc3d 	bl	16984 <ll_phy_req_send>
   1310a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1310c:	8838      	ldrh	r0, [r7, #0]
   1310e:	f7ff fb77 	bl	12800 <bt_hci_cmd_status_create>
   13112:	e4be      	b.n	12a92 <hci_cmd_handle+0x12e>
	status = ll_wl_remove(&cmd->addr);
   13114:	68a0      	ldr	r0, [r4, #8]
   13116:	f006 fdad 	bl	19c74 <ll_wl_remove>
   1311a:	e5b2      	b.n	12c82 <hci_cmd_handle+0x31e>
	status = ll_adv_enable(cmd->enable);
   1311c:	68a3      	ldr	r3, [r4, #8]
   1311e:	7818      	ldrb	r0, [r3, #0]
   13120:	f7ed fd86 	bl	c30 <ll_adv_enable>
   13124:	e5ad      	b.n	12c82 <hci_cmd_handle+0x31e>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   13126:	68a1      	ldr	r1, [r4, #8]
   13128:	f811 0b01 	ldrb.w	r0, [r1], #1
   1312c:	f002 fcb6 	bl	15a9c <ll_adv_scan_rsp_set>
   13130:	e5a7      	b.n	12c82 <hci_cmd_handle+0x31e>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   13132:	68a1      	ldr	r1, [r4, #8]
   13134:	f811 0b01 	ldrb.w	r0, [r1], #1
   13138:	f002 fc66 	bl	15a08 <ll_adv_data_set>
   1313c:	e5a1      	b.n	12c82 <hci_cmd_handle+0x31e>
		le_set_data_len(cmd, evt);
   1313e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   13140:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   13142:	889a      	ldrh	r2, [r3, #4]
   13144:	8859      	ldrh	r1, [r3, #2]
   13146:	4628      	mov	r0, r5
   13148:	f003 fb96 	bl	16878 <ll_length_req_send>
   1314c:	e4f5      	b.n	12b3a <hci_cmd_handle+0x1d6>
	status = ll_wl_add(&cmd->addr);
   1314e:	68a0      	ldr	r0, [r4, #8]
   13150:	f007 f8de 	bl	1a310 <ll_wl_add>
   13154:	e595      	b.n	12c82 <hci_cmd_handle+0x31e>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   13156:	2101      	movs	r1, #1
   13158:	a809      	add	r0, sp, #36	; 0x24
   1315a:	f7ff fb65 	bl	12828 <hci_cmd_complete>
   1315e:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
   13160:	f006 fd5a 	bl	19c18 <ll_wl_clear>
   13164:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   13166:	9809      	ldr	r0, [sp, #36]	; 0x24
   13168:	e493      	b.n	12a92 <hci_cmd_handle+0x12e>
		disconnect(cmd, evt);
   1316a:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   1316c:	7899      	ldrb	r1, [r3, #2]
   1316e:	8818      	ldrh	r0, [r3, #0]
   13170:	f003 fb42 	bl	167f8 <ll_terminate_ind_send>
   13174:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   13176:	8838      	ldrh	r0, [r7, #0]
   13178:	f7ff fb42 	bl	12800 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   1317c:	e489      	b.n	12a92 <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
   1317e:	68a3      	ldr	r3, [r4, #8]
   13180:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   13182:	a90a      	add	r1, sp, #40	; 0x28
   13184:	4628      	mov	r0, r5
   13186:	f003 fc41 	bl	16a0c <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1318a:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   1318c:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1318e:	a809      	add	r0, sp, #36	; 0x24
   13190:	f7ff fb4a 	bl	12828 <hci_cmd_complete>
	rp->status = status;
   13194:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   13196:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   1319a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1319e:	f8a0 3003 	strh.w	r3, [r0, #3]
   131a2:	9809      	ldr	r0, [sp, #36]	; 0x24
}
   131a4:	e475      	b.n	12a92 <hci_cmd_handle+0x12e>
	dup_count = -1;
   131a6:	4814      	ldr	r0, [pc, #80]	; (131f8 <hci_cmd_handle+0x894>)
	event_mask = DEFAULT_EVENT_MASK;
   131a8:	4914      	ldr	r1, [pc, #80]	; (131fc <hci_cmd_handle+0x898>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   131aa:	4a15      	ldr	r2, [pc, #84]	; (13200 <hci_cmd_handle+0x89c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   131ac:	4b15      	ldr	r3, [pc, #84]	; (13204 <hci_cmd_handle+0x8a0>)
	dup_count = -1;
   131ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   131b2:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
   131b4:	f641 75ff 	movw	r5, #8191	; 0x1fff
   131b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   131bc:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   131c0:	201f      	movs	r0, #31
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   131c2:	2400      	movs	r4, #0
   131c4:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   131c6:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   131c8:	e9c2 4500 	strd	r4, r5, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   131cc:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   131d0:	f001 f976 	bl	144c0 <ll_reset>
		ccst = hci_cmd_complete(evt, sizeof(*ccst));
   131d4:	e725      	b.n	13022 <hci_cmd_handle+0x6be>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   131d6:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   131d8:	4b09      	ldr	r3, [pc, #36]	; (13200 <hci_cmd_handle+0x89c>)
   131da:	e590      	b.n	12cfe <hci_cmd_handle+0x39a>
		dup_count = -1;
   131dc:	4b06      	ldr	r3, [pc, #24]	; (131f8 <hci_cmd_handle+0x894>)
   131de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   131e2:	601a      	str	r2, [r3, #0]
   131e4:	e5fd      	b.n	12de2 <hci_cmd_handle+0x47e>
	return bt_hci_cmd_status_create(_opcode, status);
   131e6:	2112      	movs	r1, #18
   131e8:	f7ff fb0a 	bl	12800 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   131ec:	e451      	b.n	12a92 <hci_cmd_handle+0x12e>
	return bt_hci_cmd_status_create(_opcode, status);
   131ee:	2111      	movs	r1, #17
   131f0:	f7ff fb06 	bl	12800 <bt_hci_cmd_status_create>
		return;
   131f4:	e44d      	b.n	12a92 <hci_cmd_handle+0x12e>
   131f6:	bf00      	nop
   131f8:	20001c50 	.word	0x20001c50
   131fc:	20000108 	.word	0x20000108
   13200:	200013d0 	.word	0x200013d0
   13204:	20000110 	.word	0x20000110

00013208 <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
   13208:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   1320a:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   1320c:	2b03      	cmp	r3, #3
{
   1320e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*evt = NULL;
   13212:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   13214:	d942      	bls.n	1329c <hci_acl_handle+0x94>
	acl = net_buf_pull_mem(buf, sizeof(*acl));
   13216:	4605      	mov	r5, r0
   13218:	460e      	mov	r6, r1
   1321a:	3008      	adds	r0, #8
   1321c:	2104      	movs	r1, #4
   1321e:	f012 f922 	bl	25466 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   13222:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   13224:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   13226:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
   1322a:	42bb      	cmp	r3, r7
   1322c:	d343      	bcc.n	132b6 <hci_acl_handle+0xae>
	node_tx = ll_tx_mem_acquire();
   1322e:	f003 f9d5 	bl	165dc <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   13232:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
   13236:	4604      	mov	r4, r0
   13238:	2800      	cmp	r0, #0
   1323a:	d040      	beq.n	132be <hci_acl_handle+0xb6>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   1323c:	089a      	lsrs	r2, r3, #2
   1323e:	d102      	bne.n	13246 <hci_acl_handle+0x3e>
	switch (bt_acl_flags_pb(flags)) {
   13240:	b333      	cbz	r3, 13290 <hci_acl_handle+0x88>
   13242:	2b01      	cmp	r3, #1
   13244:	d003      	beq.n	1324e <hci_acl_handle+0x46>
		return -EINVAL;
   13246:	f06f 0015 	mvn.w	r0, #21
}
   1324a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1324e:	7902      	ldrb	r2, [r0, #4]
   13250:	f363 0201 	bfi	r2, r3, #0, #2
   13254:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
   13256:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   13258:	68a9      	ldr	r1, [r5, #8]
   1325a:	463a      	mov	r2, r7
   1325c:	1de0      	adds	r0, r4, #7
   1325e:	f00f fa5f 	bl	22720 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   13262:	4621      	mov	r1, r4
   13264:	f3c8 000b 	ubfx	r0, r8, #0, #12
   13268:	f003 f9c4 	bl	165f4 <ll_tx_mem_enqueue>
   1326c:	2800      	cmp	r0, #0
   1326e:	d0ec      	beq.n	1324a <hci_acl_handle+0x42>
   13270:	4b2a      	ldr	r3, [pc, #168]	; (1331c <hci_acl_handle+0x114>)
   13272:	492b      	ldr	r1, [pc, #172]	; (13320 <hci_acl_handle+0x118>)
		BT_ERR("Invalid Tx Enqueue");
   13274:	482b      	ldr	r0, [pc, #172]	; (13324 <hci_acl_handle+0x11c>)
   13276:	1ac9      	subs	r1, r1, r3
   13278:	08c9      	lsrs	r1, r1, #3
   1327a:	0189      	lsls	r1, r1, #6
   1327c:	f041 0101 	orr.w	r1, r1, #1
   13280:	f00d fc9e 	bl	20bc0 <log_0>
		ll_tx_mem_release(node_tx);
   13284:	4620      	mov	r0, r4
   13286:	f003 f9af 	bl	165e8 <ll_tx_mem_release>
		return -EINVAL;
   1328a:	f06f 0015 	mvn.w	r0, #21
   1328e:	e7dc      	b.n	1324a <hci_acl_handle+0x42>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   13290:	7903      	ldrb	r3, [r0, #4]
   13292:	2202      	movs	r2, #2
   13294:	f362 0301 	bfi	r3, r2, #0, #2
   13298:	7103      	strb	r3, [r0, #4]
		break;
   1329a:	e7dc      	b.n	13256 <hci_acl_handle+0x4e>
   1329c:	4920      	ldr	r1, [pc, #128]	; (13320 <hci_acl_handle+0x118>)
   1329e:	4b1f      	ldr	r3, [pc, #124]	; (1331c <hci_acl_handle+0x114>)
		BT_ERR("No HCI ACL header");
   132a0:	4821      	ldr	r0, [pc, #132]	; (13328 <hci_acl_handle+0x120>)
   132a2:	1ac9      	subs	r1, r1, r3
   132a4:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
   132a6:	0189      	lsls	r1, r1, #6
   132a8:	f041 0101 	orr.w	r1, r1, #1
   132ac:	f00d fc88 	bl	20bc0 <log_0>
		return -EINVAL;
   132b0:	f06f 0015 	mvn.w	r0, #21
   132b4:	e7c9      	b.n	1324a <hci_acl_handle+0x42>
   132b6:	491a      	ldr	r1, [pc, #104]	; (13320 <hci_acl_handle+0x118>)
   132b8:	4b18      	ldr	r3, [pc, #96]	; (1331c <hci_acl_handle+0x114>)
		BT_ERR("Invalid HCI ACL packet length");
   132ba:	481c      	ldr	r0, [pc, #112]	; (1332c <hci_acl_handle+0x124>)
   132bc:	e7f1      	b.n	132a2 <hci_acl_handle+0x9a>
   132be:	4b17      	ldr	r3, [pc, #92]	; (1331c <hci_acl_handle+0x114>)
   132c0:	4917      	ldr	r1, [pc, #92]	; (13320 <hci_acl_handle+0x118>)
		BT_ERR("Tx Buffer Overflow");
   132c2:	481b      	ldr	r0, [pc, #108]	; (13330 <hci_acl_handle+0x128>)
   132c4:	1ac9      	subs	r1, r1, r3
   132c6:	08c9      	lsrs	r1, r1, #3
   132c8:	0189      	lsls	r1, r1, #6
   132ca:	f041 0101 	orr.w	r1, r1, #1
   132ce:	f00d fc77 	bl	20bc0 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   132d2:	4b18      	ldr	r3, [pc, #96]	; (13334 <hci_acl_handle+0x12c>)
   132d4:	6819      	ldr	r1, [r3, #0]
   132d6:	4623      	mov	r3, r4
   132d8:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   132dc:	4313      	orrs	r3, r2
   132de:	d102      	bne.n	132e6 <hci_acl_handle+0xde>
		return -ENOBUFS;
   132e0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   132e4:	e7b1      	b.n	1324a <hci_acl_handle+0x42>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   132e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   132ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   132ee:	2001      	movs	r0, #1
   132f0:	f7f6 fd0c 	bl	9d0c <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
   132f4:	2102      	movs	r1, #2
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   132f6:	6030      	str	r0, [r6, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
   132f8:	3008      	adds	r0, #8
   132fa:	f012 f877 	bl	253ec <net_buf_simple_add>
	hdr->len = len;
   132fe:	2401      	movs	r4, #1
	hdr->evt = evt;
   13300:	221a      	movs	r2, #26
   13302:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13304:	7044      	strb	r4, [r0, #1]
	ep = net_buf_add(*buf, sizeof(*ep));
   13306:	6830      	ldr	r0, [r6, #0]
   13308:	4621      	mov	r1, r4
   1330a:	3008      	adds	r0, #8
   1330c:	f012 f86e 	bl	253ec <net_buf_simple_add>
   13310:	4603      	mov	r3, r0
		return -ENOBUFS;
   13312:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   13316:	701c      	strb	r4, [r3, #0]
   13318:	e797      	b.n	1324a <hci_acl_handle+0x42>
   1331a:	bf00      	nop
   1331c:	00026544 	.word	0x00026544
   13320:	0002657c 	.word	0x0002657c
   13324:	00027064 	.word	0x00027064
   13328:	0002701c 	.word	0x0002701c
   1332c:	00027030 	.word	0x00027030
   13330:	00027050 	.word	0x00027050
   13334:	20000108 	.word	0x20000108

00013338 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   13338:	7f03      	ldrb	r3, [r0, #28]
   1333a:	f003 0303 	and.w	r3, r3, #3
   1333e:	3b01      	subs	r3, #1
   13340:	2b01      	cmp	r3, #1
{
   13342:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   13344:	d90d      	bls.n	13362 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   13346:	4a16      	ldr	r2, [pc, #88]	; (133a0 <hci_acl_encode+0x68>)
   13348:	4916      	ldr	r1, [pc, #88]	; (133a4 <hci_acl_encode+0x6c>)
   1334a:	4817      	ldr	r0, [pc, #92]	; (133a8 <hci_acl_encode+0x70>)
   1334c:	f241 037f 	movw	r3, #4223	; 0x107f
   13350:	f00d f976 	bl	20640 <printk>
   13354:	4040      	eors	r0, r0
   13356:	f380 8811 	msr	BASEPRI, r0
   1335a:	f04f 0003 	mov.w	r0, #3
   1335e:	df02      	svc	2
		break;
	}
}
   13360:	bd70      	pop	{r4, r5, r6, pc}
   13362:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   13364:	f101 0508 	add.w	r5, r1, #8
   13368:	4628      	mov	r0, r5
   1336a:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   1336c:	88e6      	ldrh	r6, [r4, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   1336e:	f012 f83d 	bl	253ec <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   13372:	7f23      	ldrb	r3, [r4, #28]
   13374:	f003 0303 	and.w	r3, r3, #3
   13378:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   1337a:	bf0c      	ite	eq
   1337c:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   13380:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   13384:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   13386:	7f61      	ldrb	r1, [r4, #29]
   13388:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   1338a:	4628      	mov	r0, r5
   1338c:	f012 f82e 	bl	253ec <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   13390:	7f62      	ldrb	r2, [r4, #29]
   13392:	f104 011f 	add.w	r1, r4, #31
}
   13396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1339a:	f00f b9c1 	b.w	22720 <memcpy>
   1339e:	bf00      	nop
   133a0:	00027078 	.word	0x00027078
   133a4:	00026f3c 	.word	0x00026f3c
   133a8:	00026ecc 	.word	0x00026ecc

000133ac <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   133ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = PDU_DATA(node_rx);

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   133b0:	7905      	ldrb	r5, [r0, #4]
   133b2:	88c7      	ldrh	r7, [r0, #6]
   133b4:	2d02      	cmp	r5, #2
{
   133b6:	b08b      	sub	sp, #44	; 0x2c
   133b8:	4604      	mov	r4, r0
   133ba:	460e      	mov	r6, r1
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   133bc:	d010      	beq.n	133e0 <hci_evt_encode+0x34>
	switch (node_rx->hdr.type) {
   133be:	3d04      	subs	r5, #4
   133c0:	2d0b      	cmp	r5, #11
   133c2:	d860      	bhi.n	13486 <hci_evt_encode+0xda>
   133c4:	e8df f015 	tbh	[pc, r5, lsl #1]
   133c8:	005f006f 	.word	0x005f006f
   133cc:	005f005f 	.word	0x005f005f
   133d0:	0114005f 	.word	0x0114005f
   133d4:	017e015e 	.word	0x017e015e
   133d8:	01d801be 	.word	0x01d801be
   133dc:	002601ef 	.word	0x002601ef
	switch (pdu_data->llctrl.opcode) {
   133e0:	7fc3      	ldrb	r3, [r0, #31]
   133e2:	3b03      	subs	r3, #3
   133e4:	2b12      	cmp	r3, #18
   133e6:	f200 81f8 	bhi.w	137da <hci_evt_encode+0x42e>
   133ea:	e8df f013 	tbh	[pc, r3, lsl #1]
   133ee:	026e      	.short	0x026e
   133f0:	01f601f6 	.word	0x01f601f6
   133f4:	02a20294 	.word	0x02a20294
   133f8:	023901f6 	.word	0x023901f6
   133fc:	01f601f6 	.word	0x01f601f6
   13400:	024101f6 	.word	0x024101f6
   13404:	025001f6 	.word	0x025001f6
   13408:	01f601f6 	.word	0x01f601f6
   1340c:	01f601f6 	.word	0x01f601f6
   13410:	01f901f9 	.word	0x01f901f9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13414:	4bbd      	ldr	r3, [pc, #756]	; (1370c <hci_evt_encode+0x360>)
   13416:	6858      	ldr	r0, [r3, #4]
   13418:	2100      	movs	r1, #0
   1341a:	460a      	mov	r2, r1
   1341c:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   13420:	4313      	orrs	r3, r2
   13422:	d007      	beq.n	13434 <hci_evt_encode+0x88>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   13424:	4bba      	ldr	r3, [pc, #744]	; (13710 <hci_evt_encode+0x364>)
   13426:	6818      	ldr	r0, [r3, #0]
   13428:	460b      	mov	r3, r1
   1342a:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1342e:	4313      	orrs	r3, r2
   13430:	f040 81f6 	bne.w	13820 <hci_evt_encode+0x474>
   13434:	7f61      	ldrb	r1, [r4, #29]
   13436:	48b7      	ldr	r0, [pc, #732]	; (13714 <hci_evt_encode+0x368>)
   13438:	4bb7      	ldr	r3, [pc, #732]	; (13718 <hci_evt_encode+0x36c>)
   1343a:	7fa2      	ldrb	r2, [r4, #30]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   1343c:	7f25      	ldrb	r5, [r4, #28]
   1343e:	9706      	str	r7, [sp, #24]
   13440:	2900      	cmp	r1, #0
   13442:	eba3 0300 	sub.w	r3, r3, r0
   13446:	fa91 f1a1 	rbit	r1, r1
   1344a:	fab1 f181 	clz	r1, r1
   1344e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   13452:	bf08      	it	eq
   13454:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   13458:	2a00      	cmp	r2, #0
   1345a:	fa92 f2a2 	rbit	r2, r2
   1345e:	fab2 f282 	clz	r2, r2
   13462:	f101 0001 	add.w	r0, r1, #1
   13466:	bf08      	it	eq
   13468:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1346c:	019b      	lsls	r3, r3, #6
   1346e:	1c54      	adds	r4, r2, #1
   13470:	9008      	str	r0, [sp, #32]
   13472:	f043 0302 	orr.w	r3, r3, #2
   13476:	48a9      	ldr	r0, [pc, #676]	; (1371c <hci_evt_encode+0x370>)
   13478:	9409      	str	r4, [sp, #36]	; 0x24
   1347a:	2204      	movs	r2, #4
   1347c:	a906      	add	r1, sp, #24
   1347e:	9507      	str	r5, [sp, #28]
   13480:	f00d fbf4 	bl	20c6c <log_n>
		return;
   13484:	e00c      	b.n	134a0 <hci_evt_encode+0xf4>
		LL_ASSERT(0);
   13486:	f640 738a 	movw	r3, #3978	; 0xf8a
		LL_ASSERT(0);
   1348a:	4aa5      	ldr	r2, [pc, #660]	; (13720 <hci_evt_encode+0x374>)
   1348c:	49a5      	ldr	r1, [pc, #660]	; (13724 <hci_evt_encode+0x378>)
   1348e:	48a6      	ldr	r0, [pc, #664]	; (13728 <hci_evt_encode+0x37c>)
   13490:	f00d f8d6 	bl	20640 <printk>
   13494:	4040      	eors	r0, r0
   13496:	f380 8811 	msr	BASEPRI, r0
   1349a:	f04f 0003 	mov.w	r0, #3
   1349e:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   134a0:	b00b      	add	sp, #44	; 0x2c
   134a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   134a6:	4aa1      	ldr	r2, [pc, #644]	; (1372c <hci_evt_encode+0x380>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   134a8:	7e03      	ldrb	r3, [r0, #24]
	if (adv->tx_addr) {
   134aa:	7f05      	ldrb	r5, [r0, #28]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   134ac:	f890 901a 	ldrb.w	r9, [r0, #26]
	direct = node_rx->hdr.rx_ftr.direct;
   134b0:	f894 a01b 	ldrb.w	sl, [r4, #27]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   134b4:	e892 0003 	ldmia.w	r2, {r0, r1}
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   134b8:	425b      	negs	r3, r3
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   134ba:	0c0a      	lsrs	r2, r1, #16
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   134bc:	b25b      	sxtb	r3, r3
	if (adv->tx_addr) {
   134be:	066f      	lsls	r7, r5, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   134c0:	9006      	str	r0, [sp, #24]
   134c2:	f8ad 101c 	strh.w	r1, [sp, #28]
   134c6:	f88d 201e 	strb.w	r2, [sp, #30]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   134ca:	9305      	str	r3, [sp, #20]
	if (adv->tx_addr) {
   134cc:	f100 824a 	bmi.w	13964 <hci_evt_encode+0x5b8>
	if (direct) {
   134d0:	4b8e      	ldr	r3, [pc, #568]	; (1370c <hci_evt_encode+0x360>)
   134d2:	6858      	ldr	r0, [r3, #4]
   134d4:	2100      	movs	r1, #0
   134d6:	460a      	mov	r2, r1
   134d8:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   134dc:	f1ba 0f00 	cmp.w	sl, #0
   134e0:	f040 826e 	bne.w	139c0 <hci_evt_encode+0x614>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   134e4:	4313      	orrs	r3, r2
   134e6:	d0db      	beq.n	134a0 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   134e8:	4b89      	ldr	r3, [pc, #548]	; (13710 <hci_evt_encode+0x364>)
   134ea:	6819      	ldr	r1, [r3, #0]
   134ec:	4653      	mov	r3, sl
   134ee:	f001 0202 	and.w	r2, r1, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   134f2:	4313      	orrs	r3, r2
   134f4:	d0d4      	beq.n	134a0 <hci_evt_encode+0xf4>
	if (dup_count >= 0) {
   134f6:	f8df 8248 	ldr.w	r8, [pc, #584]	; 13740 <hci_evt_encode+0x394>
   134fa:	f8d8 2000 	ldr.w	r2, [r8]
   134fe:	2a00      	cmp	r2, #0
   13500:	db3f      	blt.n	13582 <hci_evt_encode+0x1d6>
		for (i = 0; i < dup_count; i++) {
   13502:	f104 0b1e 	add.w	fp, r4, #30
   13506:	d016      	beq.n	13536 <hci_evt_encode+0x18a>
   13508:	4d89      	ldr	r5, [pc, #548]	; (13730 <hci_evt_encode+0x384>)
   1350a:	4657      	mov	r7, sl
			if (!memcmp(&adv->adv_ind.addr[0],
   1350c:	2206      	movs	r2, #6
   1350e:	4629      	mov	r1, r5
   13510:	4658      	mov	r0, fp
   13512:	f00f f8f5 	bl	22700 <memcmp>
   13516:	b938      	cbnz	r0, 13528 <hci_evt_encode+0x17c>
			    adv->tx_addr == dup_filter[i].addr.type) {
   13518:	7f22      	ldrb	r2, [r4, #28]
   1351a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1351e:	f3c2 1080 	ubfx	r0, r2, #6, #1
				    sizeof(bt_addr_t)) &&
   13522:	4288      	cmp	r0, r1
   13524:	f000 8325 	beq.w	13b72 <hci_evt_encode+0x7c6>
		for (i = 0; i < dup_count; i++) {
   13528:	f8d8 2000 	ldr.w	r2, [r8]
   1352c:	3701      	adds	r7, #1
   1352e:	4297      	cmp	r7, r2
   13530:	f105 0508 	add.w	r5, r5, #8
   13534:	dbea      	blt.n	1350c <hci_evt_encode+0x160>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   13536:	4d7f      	ldr	r5, [pc, #508]	; (13734 <hci_evt_encode+0x388>)
   13538:	4f7f      	ldr	r7, [pc, #508]	; (13738 <hci_evt_encode+0x38c>)
   1353a:	682a      	ldr	r2, [r5, #0]
   1353c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   13540:	4659      	mov	r1, fp
   13542:	1c90      	adds	r0, r2, #2
   13544:	2206      	movs	r2, #6
   13546:	f00f f8eb 	bl	22720 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   1354a:	682a      	ldr	r2, [r5, #0]
   1354c:	7f21      	ldrb	r1, [r4, #28]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   1354e:	f8d8 3000 	ldr.w	r3, [r8]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   13552:	eb07 00c2 	add.w	r0, r7, r2, lsl #3
   13556:	f3c1 1180 	ubfx	r1, r1, #6, #1
   1355a:	7041      	strb	r1, [r0, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   1355c:	7f20      	ldrb	r0, [r4, #28]
   1355e:	2101      	movs	r1, #1
   13560:	f000 000f 	and.w	r0, r0, #15
   13564:	4081      	lsls	r1, r0
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   13566:	2b0f      	cmp	r3, #15
		dup_filter[dup_curr].mask = BIT(adv->type);
   13568:	f807 1032 	strb.w	r1, [r7, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   1356c:	f300 82fe 	bgt.w	13b6c <hci_evt_encode+0x7c0>
			dup_count++;
   13570:	1c59      	adds	r1, r3, #1
			dup_curr = dup_count;
   13572:	460a      	mov	r2, r1
			dup_count++;
   13574:	f8c8 1000 	str.w	r1, [r8]
			dup_curr = dup_count;
   13578:	6029      	str	r1, [r5, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   1357a:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   1357c:	bf04      	itt	eq
   1357e:	2300      	moveq	r3, #0
   13580:	602b      	streq	r3, [r5, #0]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   13582:	7f23      	ldrb	r3, [r4, #28]
   13584:	f003 030f 	and.w	r3, r3, #15
   13588:	2b01      	cmp	r3, #1
   1358a:	f000 82ec 	beq.w	13b66 <hci_evt_encode+0x7ba>
		data_len = (adv->len - BDADDR_SIZE);
   1358e:	7f63      	ldrb	r3, [r4, #29]
   13590:	f1a3 0a06 	sub.w	sl, r3, #6
   13594:	fa5f fa8a 	uxtb.w	sl, sl
   13598:	3305      	adds	r3, #5
   1359a:	b2da      	uxtb	r2, r3
   1359c:	4657      	mov	r7, sl
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   1359e:	2102      	movs	r1, #2
   135a0:	4630      	mov	r0, r6
   135a2:	f7ff f89d 	bl	126e0 <meta_evt>
	sep->num_reports = 1U;
   135a6:	2301      	movs	r3, #1
   135a8:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   135aa:	7f23      	ldrb	r3, [r4, #28]
   135ac:	aa0a      	add	r2, sp, #40	; 0x28
   135ae:	f003 030f 	and.w	r3, r3, #15
   135b2:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   135b4:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
   135b6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   135ba:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   135bc:	f006 fbd8 	bl	19d70 <ll_rl_size_get>
   135c0:	4581      	cmp	r9, r0
   135c2:	f080 82c5 	bcs.w	13b50 <hci_evt_encode+0x7a4>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   135c6:	4648      	mov	r0, r9
   135c8:	1cea      	adds	r2, r5, #3
   135ca:	1ca9      	adds	r1, r5, #2
   135cc:	f006 fb8c 	bl	19ce8 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   135d0:	78ab      	ldrb	r3, [r5, #2]
   135d2:	3302      	adds	r3, #2
   135d4:	70ab      	strb	r3, [r5, #2]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   135d6:	f105 060a 	add.w	r6, r5, #10
	adv_info->length = data_len;
   135da:	f885 a009 	strb.w	sl, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   135de:	f104 0124 	add.w	r1, r4, #36	; 0x24
   135e2:	4630      	mov	r0, r6
   135e4:	463a      	mov	r2, r7
   135e6:	f00f f89b 	bl	22720 <memcpy>
	*prssi = rssi;
   135ea:	9b05      	ldr	r3, [sp, #20]
   135ec:	55f3      	strb	r3, [r6, r7]
   135ee:	e757      	b.n	134a0 <hci_evt_encode+0xf4>
	uint8_t status = node_rx->status;
   135f0:	7f05      	ldrb	r5, [r0, #28]
	if (!status) {
   135f2:	2d00      	cmp	r5, #0
   135f4:	f000 81ad 	beq.w	13952 <hci_evt_encode+0x5a6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   135f8:	4b44      	ldr	r3, [pc, #272]	; (1370c <hci_evt_encode+0x360>)
   135fa:	6859      	ldr	r1, [r3, #4]
   135fc:	f04f 0800 	mov.w	r8, #0
   13600:	4642      	mov	r2, r8
   13602:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   13606:	4313      	orrs	r3, r2
   13608:	f43f af4a 	beq.w	134a0 <hci_evt_encode+0xf4>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1360c:	4b40      	ldr	r3, [pc, #256]	; (13710 <hci_evt_encode+0x364>)
   1360e:	f8d3 c000 	ldr.w	ip, [r3]
   13612:	f240 2101 	movw	r1, #513	; 0x201
   13616:	ea0c 0201 	and.w	r2, ip, r1
   1361a:	4643      	mov	r3, r8
   1361c:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   1361e:	f40c 7000 	and.w	r0, ip, #512	; 0x200
   13622:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   13624:	f43f af3c 	beq.w	134a0 <hci_evt_encode+0xf4>
	if (!status) {
   13628:	2d00      	cmp	r5, #0
   1362a:	f040 81ad 	bne.w	13988 <hci_evt_encode+0x5dc>
		conn_count++;
   1362e:	4a43      	ldr	r2, [pc, #268]	; (1373c <hci_evt_encode+0x390>)
   13630:	6813      	ldr	r3, [r2, #0]
   13632:	3301      	adds	r3, #1
   13634:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   13636:	ea50 0301 	orrs.w	r3, r0, r1
   1363a:	f104 081f 	add.w	r8, r4, #31
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   1363e:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   13640:	f040 824e 	bne.w	13ae0 <hci_evt_encode+0x734>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   13644:	2212      	movs	r2, #18
   13646:	2101      	movs	r1, #1
   13648:	f7ff f84a 	bl	126e0 <meta_evt>
	lecc->status = 0x00;
   1364c:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   1364e:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = node_rx->role;
   13652:	7f63      	ldrb	r3, [r4, #29]
   13654:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type & 0x1;
   13656:	7fa3      	ldrb	r3, [r4, #30]
   13658:	f003 0301 	and.w	r3, r3, #1
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   1365c:	4606      	mov	r6, r0
	lecc->peer_addr.type = node_rx->peer_addr_type & 0x1;
   1365e:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
   13660:	4641      	mov	r1, r8
   13662:	2206      	movs	r2, #6
   13664:	3005      	adds	r0, #5
   13666:	f00f f85b 	bl	22720 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   1366a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   1366c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
   1366e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   13670:	f8a6 200d 	strh.w	r2, [r6, #13]
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   13674:	f8a6 100b 	strh.w	r1, [r6, #11]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   13678:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = node_rx->sca;
   1367c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   13680:	7473      	strb	r3, [r6, #17]
   13682:	e70d      	b.n	134a0 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   13684:	4b21      	ldr	r3, [pc, #132]	; (1370c <hci_evt_encode+0x360>)
   13686:	6819      	ldr	r1, [r3, #0]
   13688:	2500      	movs	r5, #0
   1368a:	f001 0210 	and.w	r2, r1, #16
   1368e:	462b      	mov	r3, r5
   13690:	4313      	orrs	r3, r2
   13692:	f43f af05 	beq.w	134a0 <hci_evt_encode+0xf4>
	hdr = net_buf_add(buf, sizeof(*hdr));
   13696:	3608      	adds	r6, #8
   13698:	2102      	movs	r1, #2
   1369a:	4630      	mov	r0, r6
   1369c:	f011 fea6 	bl	253ec <net_buf_simple_add>
   136a0:	4603      	mov	r3, r0
	hdr->evt = evt;
   136a2:	2205      	movs	r2, #5
	hdr->len = len;
   136a4:	2104      	movs	r1, #4
	hdr->evt = evt;
   136a6:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   136a8:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   136aa:	4630      	mov	r0, r6
   136ac:	f011 fe9e 	bl	253ec <net_buf_simple_add>
	conn_count--;
   136b0:	4a22      	ldr	r2, [pc, #136]	; (1373c <hci_evt_encode+0x390>)
	ep->status = 0x00;
   136b2:	7005      	strb	r5, [r0, #0]
	conn_count--;
   136b4:	6813      	ldr	r3, [r2, #0]
	ep->handle = sys_cpu_to_le16(handle);
   136b6:	f8a0 7001 	strh.w	r7, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   136ba:	7f21      	ldrb	r1, [r4, #28]
   136bc:	70c1      	strb	r1, [r0, #3]
	conn_count--;
   136be:	3b01      	subs	r3, #1
   136c0:	6013      	str	r3, [r2, #0]
   136c2:	e6ed      	b.n	134a0 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   136c4:	4b11      	ldr	r3, [pc, #68]	; (1370c <hci_evt_encode+0x360>)
   136c6:	6858      	ldr	r0, [r3, #4]
   136c8:	2100      	movs	r1, #0
   136ca:	460a      	mov	r2, r1
   136cc:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   136d0:	4313      	orrs	r3, r2
   136d2:	f43f aee5 	beq.w	134a0 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   136d6:	4b0e      	ldr	r3, [pc, #56]	; (13710 <hci_evt_encode+0x364>)
   136d8:	6818      	ldr	r0, [r3, #0]
   136da:	460b      	mov	r3, r1
   136dc:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   136e0:	4313      	orrs	r3, r2
   136e2:	f43f aedd 	beq.w	134a0 <hci_evt_encode+0xf4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   136e6:	2209      	movs	r2, #9
   136e8:	2103      	movs	r1, #3
   136ea:	4630      	mov	r0, r6
   136ec:	f7fe fff8 	bl	126e0 <meta_evt>
	sep->status = cu->status;
   136f0:	7f23      	ldrb	r3, [r4, #28]
   136f2:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   136f4:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   136f6:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   136f8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   136fa:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   136fe:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   13702:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   13706:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1370a:	e6c9      	b.n	134a0 <hci_evt_encode+0xf4>
   1370c:	20000108 	.word	0x20000108
   13710:	20000110 	.word	0x20000110
   13714:	00026544 	.word	0x00026544
   13718:	0002657c 	.word	0x0002657c
   1371c:	000270dc 	.word	0x000270dc
   13720:	00027078 	.word	0x00027078
   13724:	00026f3c 	.word	0x00026f3c
   13728:	00026ecc 	.word	0x00026ecc
   1372c:	0002674c 	.word	0x0002674c
   13730:	20001c5a 	.word	0x20001c5a
   13734:	20001c54 	.word	0x20001c54
   13738:	20001c58 	.word	0x20001c58
   1373c:	20001c4c 	.word	0x20001c4c
   13740:	20001c50 	.word	0x20001c50
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   13744:	4b98      	ldr	r3, [pc, #608]	; (139a8 <hci_evt_encode+0x5fc>)
   13746:	6859      	ldr	r1, [r3, #4]
   13748:	2400      	movs	r4, #0
   1374a:	4622      	mov	r2, r4
   1374c:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
   13750:	4313      	orrs	r3, r2
   13752:	f43f aea5 	beq.w	134a0 <hci_evt_encode+0xf4>
	hdr = net_buf_add(buf, sizeof(*hdr));
   13756:	3608      	adds	r6, #8
   13758:	2102      	movs	r1, #2
   1375a:	4630      	mov	r0, r6
   1375c:	f011 fe46 	bl	253ec <net_buf_simple_add>
   13760:	4603      	mov	r3, r0
	hdr->evt = evt;
   13762:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
   13764:	2103      	movs	r1, #3
	ep = net_buf_add(buf, sizeof(*ep));
   13766:	4630      	mov	r0, r6
	hdr->evt = evt;
   13768:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   1376a:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   1376c:	f011 fe3e 	bl	253ec <net_buf_simple_add>
	ep->status = 0x00;
   13770:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   13772:	f8a0 7001 	strh.w	r7, [r0, #1]
   13776:	e693      	b.n	134a0 <hci_evt_encode+0xf4>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   13778:	4b8c      	ldr	r3, [pc, #560]	; (139ac <hci_evt_encode+0x600>)
   1377a:	6819      	ldr	r1, [r3, #0]
   1377c:	2300      	movs	r3, #0
   1377e:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
   13782:	4313      	orrs	r3, r2
   13784:	f43f ae8c 	beq.w	134a0 <hci_evt_encode+0xf4>
	hdr = net_buf_add(buf, sizeof(*hdr));
   13788:	3608      	adds	r6, #8
   1378a:	2102      	movs	r1, #2
   1378c:	4630      	mov	r0, r6
   1378e:	f011 fe2d 	bl	253ec <net_buf_simple_add>
   13792:	4603      	mov	r3, r0
	hdr->evt = evt;
   13794:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
   13796:	2102      	movs	r1, #2
	ep = net_buf_add(buf, sizeof(*ep));
   13798:	4630      	mov	r0, r6
	hdr->evt = evt;
   1379a:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   1379c:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   1379e:	f011 fe25 	bl	253ec <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   137a2:	8007      	strh	r7, [r0, #0]
   137a4:	e67c      	b.n	134a0 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   137a6:	4b80      	ldr	r3, [pc, #512]	; (139a8 <hci_evt_encode+0x5fc>)
   137a8:	6858      	ldr	r0, [r3, #4]
   137aa:	2100      	movs	r1, #0
   137ac:	460a      	mov	r2, r1
   137ae:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   137b2:	4313      	orrs	r3, r2
   137b4:	f43f ae74 	beq.w	134a0 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   137b8:	4b7d      	ldr	r3, [pc, #500]	; (139b0 <hci_evt_encode+0x604>)
   137ba:	6818      	ldr	r0, [r3, #0]
   137bc:	460b      	mov	r3, r1
   137be:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   137c2:	4313      	orrs	r3, r2
   137c4:	f43f ae6c 	beq.w	134a0 <hci_evt_encode+0xf4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
   137c8:	4630      	mov	r0, r6
   137ca:	2203      	movs	r2, #3
   137cc:	2114      	movs	r1, #20
   137ce:	f7fe ff87 	bl	126e0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   137d2:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   137d4:	7f23      	ldrb	r3, [r4, #28]
   137d6:	7083      	strb	r3, [r0, #2]
   137d8:	e662      	b.n	134a0 <hci_evt_encode+0xf4>
		LL_ASSERT(0);
   137da:	f241 0353 	movw	r3, #4179	; 0x1053
   137de:	e654      	b.n	1348a <hci_evt_encode+0xde>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   137e0:	4b71      	ldr	r3, [pc, #452]	; (139a8 <hci_evt_encode+0x5fc>)
   137e2:	6858      	ldr	r0, [r3, #4]
   137e4:	2100      	movs	r1, #0
   137e6:	460a      	mov	r2, r1
   137e8:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   137ec:	4313      	orrs	r3, r2
   137ee:	f43f ae57 	beq.w	134a0 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   137f2:	4b6f      	ldr	r3, [pc, #444]	; (139b0 <hci_evt_encode+0x604>)
   137f4:	6818      	ldr	r0, [r3, #0]
   137f6:	460b      	mov	r3, r1
   137f8:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   137fc:	4313      	orrs	r3, r2
   137fe:	f43f ae4f 	beq.w	134a0 <hci_evt_encode+0xf4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
   13802:	4630      	mov	r0, r6
   13804:	220a      	movs	r2, #10
   13806:	2107      	movs	r1, #7
   13808:	f7fe ff6a 	bl	126e0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   1380c:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   1380e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   13810:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   13812:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   13814:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   13816:	8c23      	ldrh	r3, [r4, #32]
   13818:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   1381a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1381c:	8103      	strh	r3, [r0, #8]
   1381e:	e63f      	b.n	134a0 <hci_evt_encode+0xf4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
   13820:	2205      	movs	r2, #5
   13822:	4630      	mov	r0, r6
   13824:	210c      	movs	r1, #12
   13826:	f7fe ff5b 	bl	126e0 <meta_evt>
	sep->status = pu->status;
   1382a:	7f23      	ldrb	r3, [r4, #28]
   1382c:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1382e:	f8a0 7001 	strh.w	r7, [r0, #1]
   13832:	7f62      	ldrb	r2, [r4, #29]
   13834:	2a00      	cmp	r2, #0
   13836:	fa92 f3a2 	rbit	r3, r2
   1383a:	fab3 f383 	clz	r3, r3
   1383e:	bf08      	it	eq
   13840:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   13844:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   13846:	70c3      	strb	r3, [r0, #3]
   13848:	7fa2      	ldrb	r2, [r4, #30]
   1384a:	fa92 f3a2 	rbit	r3, r2
   1384e:	2a00      	cmp	r2, #0
   13850:	fab3 f383 	clz	r3, r3
   13854:	bf08      	it	eq
   13856:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1385a:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   1385c:	7103      	strb	r3, [r0, #4]
   1385e:	e61f      	b.n	134a0 <hci_evt_encode+0xf4>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   13860:	460b      	mov	r3, r1
   13862:	463a      	mov	r2, r7
   13864:	f100 011c 	add.w	r1, r0, #28
   13868:	2000      	movs	r0, #0
   1386a:	f7fe ff51 	bl	12710 <le_remote_feat_complete>
		break;
   1386e:	e617      	b.n	134a0 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   13870:	4b4d      	ldr	r3, [pc, #308]	; (139a8 <hci_evt_encode+0x5fc>)
   13872:	6819      	ldr	r1, [r3, #0]
   13874:	2300      	movs	r3, #0
   13876:	f001 0280 	and.w	r2, r1, #128	; 0x80
   1387a:	4313      	orrs	r3, r2
   1387c:	f43f ae10 	beq.w	134a0 <hci_evt_encode+0xf4>
   13880:	f890 0020 	ldrb.w	r0, [r0, #32]
   13884:	4632      	mov	r2, r6
   13886:	4639      	mov	r1, r7
   13888:	f7fe ff78 	bl	1277c <encrypt_change.part.0>
   1388c:	e608      	b.n	134a0 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1388e:	4b46      	ldr	r3, [pc, #280]	; (139a8 <hci_evt_encode+0x5fc>)
   13890:	6858      	ldr	r0, [r3, #4]
   13892:	2100      	movs	r1, #0
   13894:	460a      	mov	r2, r1
   13896:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   1389a:	4313      	orrs	r3, r2
   1389c:	d06a      	beq.n	13974 <hci_evt_encode+0x5c8>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   1389e:	4b44      	ldr	r3, [pc, #272]	; (139b0 <hci_evt_encode+0x604>)
   138a0:	6818      	ldr	r0, [r3, #0]
   138a2:	460b      	mov	r3, r1
   138a4:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   138a8:	4313      	orrs	r3, r2
   138aa:	d063      	beq.n	13974 <hci_evt_encode+0x5c8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   138ac:	4630      	mov	r0, r6
   138ae:	220a      	movs	r2, #10
   138b0:	2106      	movs	r1, #6
   138b2:	f7fe ff15 	bl	126e0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   138b6:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   138b8:	8c23      	ldrh	r3, [r4, #32]
   138ba:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   138bc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   138be:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   138c0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   138c2:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   138c4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   138c6:	8103      	strh	r3, [r0, #8]
   138c8:	e5ea      	b.n	134a0 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   138ca:	4b37      	ldr	r3, [pc, #220]	; (139a8 <hci_evt_encode+0x5fc>)
   138cc:	6858      	ldr	r0, [r3, #4]
   138ce:	2100      	movs	r1, #0
   138d0:	460a      	mov	r2, r1
   138d2:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   138d6:	4313      	orrs	r3, r2
   138d8:	f43f ade2 	beq.w	134a0 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   138dc:	4b34      	ldr	r3, [pc, #208]	; (139b0 <hci_evt_encode+0x604>)
   138de:	6818      	ldr	r0, [r3, #0]
   138e0:	460b      	mov	r3, r1
   138e2:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   138e6:	4313      	orrs	r3, r2
   138e8:	f43f adda 	beq.w	134a0 <hci_evt_encode+0xf4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   138ec:	4630      	mov	r0, r6
   138ee:	220c      	movs	r2, #12
   138f0:	2105      	movs	r1, #5
   138f2:	f7fe fef5 	bl	126e0 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   138f6:	f104 0120 	add.w	r1, r4, #32
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   138fa:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   138fc:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   138fe:	f820 7b02 	strh.w	r7, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   13902:	f00e ff0d 	bl	22720 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   13906:	f105 000a 	add.w	r0, r5, #10
   1390a:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1390e:	2202      	movs	r2, #2
   13910:	f00e ff06 	bl	22720 <memcpy>
   13914:	e5c4      	b.n	134a0 <hci_evt_encode+0xf4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   13916:	4b24      	ldr	r3, [pc, #144]	; (139a8 <hci_evt_encode+0x5fc>)
   13918:	6819      	ldr	r1, [r3, #0]
   1391a:	2000      	movs	r0, #0
   1391c:	f001 0280 	and.w	r2, r1, #128	; 0x80
   13920:	4603      	mov	r3, r0
   13922:	4313      	orrs	r3, r2
   13924:	f43f adbc 	beq.w	134a0 <hci_evt_encode+0xf4>
   13928:	4632      	mov	r2, r6
   1392a:	4639      	mov	r1, r7
   1392c:	f7fe ff26 	bl	1277c <encrypt_change.part.0>
   13930:	e5b6      	b.n	134a0 <hci_evt_encode+0xf4>
		le_unknown_rsp(pdu_data, handle, buf);
   13932:	f890 1020 	ldrb.w	r1, [r0, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   13936:	290e      	cmp	r1, #14
   13938:	f000 80cb 	beq.w	13ad2 <hci_evt_encode+0x726>
   1393c:	4b1d      	ldr	r3, [pc, #116]	; (139b4 <hci_evt_encode+0x608>)
   1393e:	4a1e      	ldr	r2, [pc, #120]	; (139b8 <hci_evt_encode+0x60c>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   13940:	481e      	ldr	r0, [pc, #120]	; (139bc <hci_evt_encode+0x610>)
   13942:	1ad2      	subs	r2, r2, r3
   13944:	08d2      	lsrs	r2, r2, #3
   13946:	0192      	lsls	r2, r2, #6
   13948:	f042 0202 	orr.w	r2, r2, #2
   1394c:	f00d f945 	bl	20bda <log_1>
   13950:	e5a6      	b.n	134a0 <hci_evt_encode+0xf4>
		ll_rl_crpa_set(node_rx->peer_addr_type,
   13952:	f100 0325 	add.w	r3, r0, #37	; 0x25
   13956:	f100 011f 	add.w	r1, r0, #31
   1395a:	22ff      	movs	r2, #255	; 0xff
   1395c:	7f80      	ldrb	r0, [r0, #30]
   1395e:	f006 fe79 	bl	1a654 <ll_rl_crpa_set>
   13962:	e649      	b.n	135f8 <hci_evt_encode+0x24c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   13964:	2100      	movs	r1, #0
   13966:	4608      	mov	r0, r1
   13968:	f104 031e 	add.w	r3, r4, #30
   1396c:	464a      	mov	r2, r9
   1396e:	f006 fe71 	bl	1a654 <ll_rl_crpa_set>
   13972:	e5ad      	b.n	134d0 <hci_evt_encode+0x124>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   13974:	2300      	movs	r3, #0
   13976:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1397a:	4638      	mov	r0, r7
   1397c:	9300      	str	r3, [sp, #0]
   1397e:	221a      	movs	r2, #26
   13980:	2102      	movs	r1, #2
   13982:	f002 fe9f 	bl	166c4 <ll_conn_update>
		return;
   13986:	e58b      	b.n	134a0 <hci_evt_encode+0xf4>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   13988:	ea50 0301 	orrs.w	r3, r0, r1
   1398c:	f040 80d4 	bne.w	13b38 <hci_evt_encode+0x78c>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   13990:	2212      	movs	r2, #18
   13992:	2101      	movs	r1, #1
   13994:	4630      	mov	r0, r6
   13996:	f7fe fea3 	bl	126e0 <meta_evt>
   1399a:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   1399c:	4641      	mov	r1, r8
   1399e:	2212      	movs	r2, #18
   139a0:	f00e fee9 	bl	22776 <memset>
		lecc->status = status;
   139a4:	7025      	strb	r5, [r4, #0]
		return;
   139a6:	e57b      	b.n	134a0 <hci_evt_encode+0xf4>
   139a8:	20000108 	.word	0x20000108
   139ac:	200013d0 	.word	0x200013d0
   139b0:	20000110 	.word	0x20000110
   139b4:	00026544 	.word	0x00026544
   139b8:	0002657c 	.word	0x0002657c
   139bc:	00027108 	.word	0x00027108
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   139c0:	4313      	orrs	r3, r2
   139c2:	f43f ad6d 	beq.w	134a0 <hci_evt_encode+0xf4>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   139c6:	4b83      	ldr	r3, [pc, #524]	; (13bd4 <hci_evt_encode+0x828>)
   139c8:	6818      	ldr	r0, [r3, #0]
   139ca:	460b      	mov	r3, r1
   139cc:	f400 6280 	and.w	r2, r0, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   139d0:	4313      	orrs	r3, r2
   139d2:	f43f ad65 	beq.w	134a0 <hci_evt_encode+0xf4>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   139d6:	7f23      	ldrb	r3, [r4, #28]
   139d8:	f003 030f 	and.w	r3, r3, #15
   139dc:	2b01      	cmp	r3, #1
   139de:	d00c      	beq.n	139fa <hci_evt_encode+0x64e>
   139e0:	4a7d      	ldr	r2, [pc, #500]	; (13bd8 <hci_evt_encode+0x82c>)
   139e2:	497e      	ldr	r1, [pc, #504]	; (13bdc <hci_evt_encode+0x830>)
   139e4:	487e      	ldr	r0, [pc, #504]	; (13be0 <hci_evt_encode+0x834>)
   139e6:	f640 333d 	movw	r3, #2877	; 0xb3d
   139ea:	f00c fe29 	bl	20640 <printk>
   139ee:	4040      	eors	r0, r0
   139f0:	f380 8811 	msr	BASEPRI, r0
   139f4:	f04f 0003 	mov.w	r0, #3
   139f8:	df02      	svc	2
	if (dup_count >= 0) {
   139fa:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 13bf0 <hci_evt_encode+0x844>
   139fe:	f8d8 2000 	ldr.w	r2, [r8]
   13a02:	2a00      	cmp	r2, #0
   13a04:	db42      	blt.n	13a8c <hci_evt_encode+0x6e0>
		for (i = 0; i < dup_count; i++) {
   13a06:	f104 0a1e 	add.w	sl, r4, #30
   13a0a:	d016      	beq.n	13a3a <hci_evt_encode+0x68e>
   13a0c:	4d75      	ldr	r5, [pc, #468]	; (13be4 <hci_evt_encode+0x838>)
   13a0e:	2700      	movs	r7, #0
			if (!memcmp(&adv->adv_ind.addr[0],
   13a10:	2206      	movs	r2, #6
   13a12:	4629      	mov	r1, r5
   13a14:	4650      	mov	r0, sl
   13a16:	f00e fe73 	bl	22700 <memcmp>
   13a1a:	b938      	cbnz	r0, 13a2c <hci_evt_encode+0x680>
			    adv->tx_addr == dup_filter[i].addr.type) {
   13a1c:	7f22      	ldrb	r2, [r4, #28]
   13a1e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   13a22:	f3c2 1080 	ubfx	r0, r2, #6, #1
				    sizeof(bt_addr_t)) &&
   13a26:	4288      	cmp	r0, r1
   13a28:	f000 80c2 	beq.w	13bb0 <hci_evt_encode+0x804>
		for (i = 0; i < dup_count; i++) {
   13a2c:	f8d8 2000 	ldr.w	r2, [r8]
   13a30:	3701      	adds	r7, #1
   13a32:	4297      	cmp	r7, r2
   13a34:	f105 0508 	add.w	r5, r5, #8
   13a38:	dbea      	blt.n	13a10 <hci_evt_encode+0x664>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   13a3a:	4d6b      	ldr	r5, [pc, #428]	; (13be8 <hci_evt_encode+0x83c>)
   13a3c:	4f6b      	ldr	r7, [pc, #428]	; (13bec <hci_evt_encode+0x840>)
   13a3e:	682a      	ldr	r2, [r5, #0]
   13a40:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   13a44:	4651      	mov	r1, sl
   13a46:	1c90      	adds	r0, r2, #2
   13a48:	2206      	movs	r2, #6
   13a4a:	f00e fe69 	bl	22720 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   13a4e:	682a      	ldr	r2, [r5, #0]
   13a50:	7f20      	ldrb	r0, [r4, #28]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   13a52:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   13a56:	eb07 0cc2 	add.w	ip, r7, r2, lsl #3
   13a5a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13a5e:	f88c 0001 	strb.w	r0, [ip, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   13a62:	f894 c01c 	ldrb.w	ip, [r4, #28]
   13a66:	2001      	movs	r0, #1
   13a68:	f00c 0c0f 	and.w	ip, ip, #15
   13a6c:	fa00 f00c 	lsl.w	r0, r0, ip
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   13a70:	290f      	cmp	r1, #15
		dup_filter[dup_curr].mask = BIT(adv->type);
   13a72:	f807 0032 	strb.w	r0, [r7, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   13a76:	f300 8098 	bgt.w	13baa <hci_evt_encode+0x7fe>
			dup_count++;
   13a7a:	3101      	adds	r1, #1
			dup_curr = dup_count;
   13a7c:	460a      	mov	r2, r1
			dup_count++;
   13a7e:	f8c8 1000 	str.w	r1, [r8]
			dup_curr = dup_count;
   13a82:	6029      	str	r1, [r5, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   13a84:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   13a86:	bf04      	itt	eq
   13a88:	2300      	moveq	r3, #0
   13a8a:	602b      	streq	r3, [r5, #0]
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   13a8c:	2211      	movs	r2, #17
   13a8e:	210b      	movs	r1, #11
   13a90:	4630      	mov	r0, r6
   13a92:	f7fe fe25 	bl	126e0 <meta_evt>
	drp->num_reports = 1U;
   13a96:	2301      	movs	r3, #1
   13a98:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   13a9a:	7043      	strb	r3, [r0, #1]
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   13a9c:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   13a9e:	f006 f967 	bl	19d70 <ll_rl_size_get>
   13aa2:	4581      	cmp	r9, r0
   13aa4:	d276      	bcs.n	13b94 <hci_evt_encode+0x7e8>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   13aa6:	4648      	mov	r0, r9
   13aa8:	1cea      	adds	r2, r5, #3
   13aaa:	1ca9      	adds	r1, r5, #2
   13aac:	f006 f91c 	bl	19ce8 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   13ab0:	78ab      	ldrb	r3, [r5, #2]
   13ab2:	3302      	adds	r3, #2
   13ab4:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
   13ab6:	7f23      	ldrb	r3, [r4, #28]
   13ab8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   13abc:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   13abe:	f104 0124 	add.w	r1, r4, #36	; 0x24
   13ac2:	2206      	movs	r2, #6
   13ac4:	f105 000a 	add.w	r0, r5, #10
   13ac8:	f00e fe2a 	bl	22720 <memcpy>
	dir_info->rssi = rssi;
   13acc:	9b05      	ldr	r3, [sp, #20]
   13ace:	742b      	strb	r3, [r5, #16]
   13ad0:	e4e6      	b.n	134a0 <hci_evt_encode+0xf4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   13ad2:	4633      	mov	r3, r6
   13ad4:	463a      	mov	r2, r7
   13ad6:	2100      	movs	r1, #0
   13ad8:	201a      	movs	r0, #26
   13ada:	f7fe fe19 	bl	12710 <le_remote_feat_complete>
		break;
   13ade:	e4df      	b.n	134a0 <hci_evt_encode+0xf4>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   13ae0:	221e      	movs	r2, #30
   13ae2:	210a      	movs	r1, #10
   13ae4:	f7fe fdfc 	bl	126e0 <meta_evt>
		leecc->status = 0x00;
   13ae8:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   13aea:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = node_rx->role;
   13aee:	7f63      	ldrb	r3, [r4, #29]
   13af0:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = node_rx->peer_addr_type;
   13af2:	7fa3      	ldrb	r3, [r4, #30]
   13af4:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   13af6:	4606      	mov	r6, r0
		memcpy(&leecc->peer_addr.a.val[0], &node_rx->peer_addr[0],
   13af8:	4641      	mov	r1, r8
   13afa:	2206      	movs	r2, #6
   13afc:	3005      	adds	r0, #5
   13afe:	f00e fe0f 	bl	22720 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &node_rx->local_rpa[0],
   13b02:	2206      	movs	r2, #6
   13b04:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   13b08:	f106 000b 	add.w	r0, r6, #11
   13b0c:	f00e fe08 	bl	22720 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &node_rx->peer_rpa[0],
   13b10:	2206      	movs	r2, #6
   13b12:	f104 0125 	add.w	r1, r4, #37	; 0x25
   13b16:	f106 0011 	add.w	r0, r6, #17
   13b1a:	f00e fe01 	bl	22720 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   13b1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
   13b20:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(node_rx->latency);
   13b22:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   13b24:	f8a6 2019 	strh.w	r2, [r6, #25]
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
   13b28:	f8a6 1017 	strh.w	r1, [r6, #23]
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   13b2c:	f8a6 301b 	strh.w	r3, [r6, #27]
		leecc->clock_accuracy = node_rx->sca;
   13b30:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   13b34:	7773      	strb	r3, [r6, #29]
		return;
   13b36:	e4b3      	b.n	134a0 <hci_evt_encode+0xf4>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   13b38:	221e      	movs	r2, #30
   13b3a:	210a      	movs	r1, #10
   13b3c:	4630      	mov	r0, r6
   13b3e:	f7fe fdcf 	bl	126e0 <meta_evt>
   13b42:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   13b44:	4641      	mov	r1, r8
   13b46:	221e      	movs	r2, #30
   13b48:	f00e fe15 	bl	22776 <memset>
			leecc->status = status;
   13b4c:	7025      	strb	r5, [r4, #0]
			return;
   13b4e:	e4a7      	b.n	134a0 <hci_evt_encode+0xf4>
		adv_info->addr.type = adv->tx_addr;
   13b50:	7f23      	ldrb	r3, [r4, #28]
   13b52:	f3c3 1380 	ubfx	r3, r3, #6, #1
   13b56:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   13b58:	2206      	movs	r2, #6
   13b5a:	f104 011e 	add.w	r1, r4, #30
   13b5e:	1ce8      	adds	r0, r5, #3
   13b60:	f00e fdde 	bl	22720 <memcpy>
   13b64:	e537      	b.n	135d6 <hci_evt_encode+0x22a>
   13b66:	2700      	movs	r7, #0
   13b68:	220b      	movs	r2, #11
   13b6a:	e518      	b.n	1359e <hci_evt_encode+0x1f2>
			dup_curr++;
   13b6c:	3201      	adds	r2, #1
   13b6e:	602a      	str	r2, [r5, #0]
   13b70:	e503      	b.n	1357a <hci_evt_encode+0x1ce>
				if (dup_filter[i].mask & BIT(adv->type)) {
   13b72:	491e      	ldr	r1, [pc, #120]	; (13bec <hci_evt_encode+0x840>)
   13b74:	f811 3037 	ldrb.w	r3, [r1, r7, lsl #3]
   13b78:	f002 020f 	and.w	r2, r2, #15
   13b7c:	fa23 f002 	lsr.w	r0, r3, r2
   13b80:	07c0      	lsls	r0, r0, #31
   13b82:	f53f ac8d 	bmi.w	134a0 <hci_evt_encode+0xf4>
				dup_filter[i].mask |= BIT(adv->type);
   13b86:	2001      	movs	r0, #1
   13b88:	fa00 f202 	lsl.w	r2, r0, r2
   13b8c:	4313      	orrs	r3, r2
   13b8e:	f801 3037 	strb.w	r3, [r1, r7, lsl #3]
				return false;
   13b92:	e4f6      	b.n	13582 <hci_evt_encode+0x1d6>
		dir_info->addr.type = adv->tx_addr;
   13b94:	7f23      	ldrb	r3, [r4, #28]
   13b96:	f3c3 1380 	ubfx	r3, r3, #6, #1
   13b9a:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   13b9c:	2206      	movs	r2, #6
   13b9e:	f104 011e 	add.w	r1, r4, #30
   13ba2:	1ce8      	adds	r0, r5, #3
   13ba4:	f00e fdbc 	bl	22720 <memcpy>
   13ba8:	e785      	b.n	13ab6 <hci_evt_encode+0x70a>
			dup_curr++;
   13baa:	3201      	adds	r2, #1
   13bac:	602a      	str	r2, [r5, #0]
   13bae:	e769      	b.n	13a84 <hci_evt_encode+0x6d8>
				if (dup_filter[i].mask & BIT(adv->type)) {
   13bb0:	480e      	ldr	r0, [pc, #56]	; (13bec <hci_evt_encode+0x840>)
   13bb2:	f810 3037 	ldrb.w	r3, [r0, r7, lsl #3]
   13bb6:	f002 020f 	and.w	r2, r2, #15
   13bba:	fa23 f102 	lsr.w	r1, r3, r2
   13bbe:	07cd      	lsls	r5, r1, #31
   13bc0:	f53f ac6e 	bmi.w	134a0 <hci_evt_encode+0xf4>
				dup_filter[i].mask |= BIT(adv->type);
   13bc4:	2101      	movs	r1, #1
   13bc6:	fa01 f202 	lsl.w	r2, r1, r2
   13bca:	4313      	orrs	r3, r2
   13bcc:	f800 3037 	strb.w	r3, [r0, r7, lsl #3]
				return false;
   13bd0:	e75c      	b.n	13a8c <hci_evt_encode+0x6e0>
   13bd2:	bf00      	nop
   13bd4:	20000110 	.word	0x20000110
   13bd8:	00027078 	.word	0x00027078
   13bdc:	000270b4 	.word	0x000270b4
   13be0:	00026ecc 	.word	0x00026ecc
   13be4:	20001c5a 	.word	0x20001c5a
   13be8:	20001c54 	.word	0x20001c54
   13bec:	20001c58 	.word	0x20001c58
   13bf0:	20001c50 	.word	0x20001c50

00013bf4 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   13bf4:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   13bf6:	f100 0408 	add.w	r4, r0, #8
{
   13bfa:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   13bfc:	4620      	mov	r0, r4
   13bfe:	2102      	movs	r1, #2
{
   13c00:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   13c02:	f011 fbf3 	bl	253ec <net_buf_simple_add>
   13c06:	4603      	mov	r3, r0
	hdr->evt = evt;
   13c08:	2213      	movs	r2, #19
	hdr->len = len;
   13c0a:	2105      	movs	r1, #5
	hdr->evt = evt;
   13c0c:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   13c0e:	7059      	strb	r1, [r3, #1]
	num_handles = 1U;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
   13c10:	4620      	mov	r0, r4
   13c12:	f011 fbeb 	bl	253ec <net_buf_simple_add>
	ep->num_handles = num_handles;
   13c16:	2301      	movs	r3, #1
   13c18:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   13c1a:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   13c1e:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   13c22:	bd70      	pop	{r4, r5, r6, pc}

00013c24 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = PDU_DATA(node_rx);
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   13c24:	7903      	ldrb	r3, [r0, #4]
   13c26:	2b02      	cmp	r3, #2
   13c28:	d008      	beq.n	13c3c <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   13c2a:	3b04      	subs	r3, #4
   13c2c:	b2db      	uxtb	r3, r3
   13c2e:	2b0b      	cmp	r3, #11
   13c30:	d901      	bls.n	13c36 <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   13c32:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   13c34:	4770      	bx	lr
   13c36:	4a05      	ldr	r2, [pc, #20]	; (13c4c <hci_get_class+0x28>)
   13c38:	5cd0      	ldrb	r0, [r2, r3]
   13c3a:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   13c3c:	7f03      	ldrb	r3, [r0, #28]
   13c3e:	f003 0303 	and.w	r3, r3, #3
   13c42:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   13c44:	bf0c      	ite	eq
   13c46:	2004      	moveq	r0, #4
   13c48:	2005      	movne	r0, #5
   13c4a:	4770      	bx	lr
   13c4c:	00027124 	.word	0x00027124

00013c50 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   13c50:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   13c52:	480b      	ldr	r0, [pc, #44]	; (13c80 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   13c54:	490b      	ldr	r1, [pc, #44]	; (13c84 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   13c56:	4a0c      	ldr	r2, [pc, #48]	; (13c88 <hci_init+0x38>)
	dup_count = -1;
   13c58:	4b0c      	ldr	r3, [pc, #48]	; (13c8c <hci_init+0x3c>)
	event_mask = DEFAULT_EVENT_MASK;
   13c5a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13c5e:	f641 75ff 	movw	r5, #8191	; 0x1fff
   13c62:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   13c66:	2400      	movs	r4, #0
   13c68:	2500      	movs	r5, #0
   13c6a:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   13c6e:	201f      	movs	r0, #31
   13c70:	2100      	movs	r1, #0
   13c72:	e9c2 0100 	strd	r0, r1, [r2]
	dup_count = -1;
   13c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   13c7a:	bc30      	pop	{r4, r5}
	dup_count = -1;
   13c7c:	601a      	str	r2, [r3, #0]
}
   13c7e:	4770      	bx	lr
   13c80:	20000108 	.word	0x20000108
   13c84:	200013d0 	.word	0x200013d0
   13c88:	20000110 	.word	0x20000110
   13c8c:	20001c50 	.word	0x20001c50

00013c90 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   13c90:	f007 b9c2 	b.w	1b018 <lll_csrand_get>

00013c94 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   13c94:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   13c96:	2300      	movs	r3, #0
   13c98:	f009 f964 	bl	1cf64 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   13c9c:	2000      	movs	r0, #0
   13c9e:	bd08      	pop	{r3, pc}

00013ca0 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   13ca0:	b510      	push	{r4, lr}
   13ca2:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   13ca4:	f007 f9da 	bl	1b05c <lll_reset>
	LL_ASSERT(!err);
   13ca8:	b970      	cbnz	r0, 13cc8 <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   13caa:	f007 ffad 	bl	1bc08 <lll_adv_reset>
	LL_ASSERT(!err);
   13cae:	b9e0      	cbnz	r0, 13cea <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   13cb0:	f008 fad6 	bl	1c260 <lll_scan_reset>
	LL_ASSERT(!err);
   13cb4:	bb50      	cbnz	r0, 13d0c <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   13cb6:	f008 fb8b 	bl	1c3d0 <lll_conn_reset>
	LL_ASSERT(!err);
   13cba:	2800      	cmp	r0, #0
   13cbc:	d137      	bne.n	13d2e <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
   13cbe:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   13cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13cc4:	f00b bfca 	b.w	1fc5c <z_impl_k_sem_give>
	LL_ASSERT(!err);
   13cc8:	4a22      	ldr	r2, [pc, #136]	; (13d54 <perform_lll_reset+0xb4>)
   13cca:	4923      	ldr	r1, [pc, #140]	; (13d58 <perform_lll_reset+0xb8>)
   13ccc:	4823      	ldr	r0, [pc, #140]	; (13d5c <perform_lll_reset+0xbc>)
   13cce:	f240 43fe 	movw	r3, #1278	; 0x4fe
   13cd2:	f00c fcb5 	bl	20640 <printk>
   13cd6:	4040      	eors	r0, r0
   13cd8:	f380 8811 	msr	BASEPRI, r0
   13cdc:	f04f 0003 	mov.w	r0, #3
   13ce0:	df02      	svc	2
	err = lll_adv_reset();
   13ce2:	f007 ff91 	bl	1bc08 <lll_adv_reset>
	LL_ASSERT(!err);
   13ce6:	2800      	cmp	r0, #0
   13ce8:	d0e2      	beq.n	13cb0 <perform_lll_reset+0x10>
   13cea:	4a1a      	ldr	r2, [pc, #104]	; (13d54 <perform_lll_reset+0xb4>)
   13cec:	491a      	ldr	r1, [pc, #104]	; (13d58 <perform_lll_reset+0xb8>)
   13cee:	481b      	ldr	r0, [pc, #108]	; (13d5c <perform_lll_reset+0xbc>)
   13cf0:	f240 5303 	movw	r3, #1283	; 0x503
   13cf4:	f00c fca4 	bl	20640 <printk>
   13cf8:	4040      	eors	r0, r0
   13cfa:	f380 8811 	msr	BASEPRI, r0
   13cfe:	f04f 0003 	mov.w	r0, #3
   13d02:	df02      	svc	2
	err = lll_scan_reset();
   13d04:	f008 faac 	bl	1c260 <lll_scan_reset>
	LL_ASSERT(!err);
   13d08:	2800      	cmp	r0, #0
   13d0a:	d0d4      	beq.n	13cb6 <perform_lll_reset+0x16>
   13d0c:	4a11      	ldr	r2, [pc, #68]	; (13d54 <perform_lll_reset+0xb4>)
   13d0e:	4912      	ldr	r1, [pc, #72]	; (13d58 <perform_lll_reset+0xb8>)
   13d10:	4812      	ldr	r0, [pc, #72]	; (13d5c <perform_lll_reset+0xbc>)
   13d12:	f240 5309 	movw	r3, #1289	; 0x509
   13d16:	f00c fc93 	bl	20640 <printk>
   13d1a:	4040      	eors	r0, r0
   13d1c:	f380 8811 	msr	BASEPRI, r0
   13d20:	f04f 0003 	mov.w	r0, #3
   13d24:	df02      	svc	2
	err = lll_conn_reset();
   13d26:	f008 fb53 	bl	1c3d0 <lll_conn_reset>
	LL_ASSERT(!err);
   13d2a:	2800      	cmp	r0, #0
   13d2c:	d0c7      	beq.n	13cbe <perform_lll_reset+0x1e>
   13d2e:	4a09      	ldr	r2, [pc, #36]	; (13d54 <perform_lll_reset+0xb4>)
   13d30:	4909      	ldr	r1, [pc, #36]	; (13d58 <perform_lll_reset+0xb8>)
   13d32:	480a      	ldr	r0, [pc, #40]	; (13d5c <perform_lll_reset+0xbc>)
   13d34:	f240 530f 	movw	r3, #1295	; 0x50f
   13d38:	f00c fc82 	bl	20640 <printk>
   13d3c:	4040      	eors	r0, r0
   13d3e:	f380 8811 	msr	BASEPRI, r0
   13d42:	f04f 0003 	mov.w	r0, #3
   13d46:	df02      	svc	2
   13d48:	4620      	mov	r0, r4
}
   13d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13d4e:	f00b bf85 	b.w	1fc5c <z_impl_k_sem_give>
   13d52:	bf00      	nop
   13d54:	00027140 	.word	0x00027140
   13d58:	0002717c 	.word	0x0002717c
   13d5c:	00026ecc 	.word	0x00026ecc

00013d60 <disabled_cb>:
   13d60:	f00b bf7c 	b.w	1fc5c <z_impl_k_sem_give>

00013d64 <tx_cmplt_get>:
	}
}

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   13d64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   13d68:	4f2f      	ldr	r7, [pc, #188]	; (13e28 <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   13d6a:	780b      	ldrb	r3, [r1, #0]
   13d6c:	783c      	ldrb	r4, [r7, #0]
{
   13d6e:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   13d70:	7879      	ldrb	r1, [r7, #1]
   13d72:	4299      	cmp	r1, r3
   13d74:	bf9c      	itt	ls
   13d76:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   13d78:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
   13d7a:	429a      	cmp	r2, r3
{
   13d7c:	4683      	mov	fp, r0
   13d7e:	4692      	mov	sl, r2
   13d80:	d045      	beq.n	13e0e <tx_cmplt_get+0xaa>
		return NULL;
	}

	i = *idx + 1;
   13d82:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   13d84:	4e29      	ldr	r6, [pc, #164]	; (13e2c <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   13d86:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   13d88:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
   13d8c:	4291      	cmp	r1, r2
   13d8e:	bf08      	it	eq
   13d90:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   13d92:	18f1      	adds	r1, r6, r3

	*idx = i;
   13d94:	702a      	strb	r2, [r5, #0]
   13d96:	d03a      	beq.n	13e0e <tx_cmplt_get+0xaa>
		return 0;
	}

	*handle = tx->handle;
   13d98:	5af3      	ldrh	r3, [r6, r3]
   13d9a:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   13d9c:	f04f 0800 	mov.w	r8, #0
   13da0:	f04f 0901 	mov.w	r9, #1
   13da4:	e022      	b.n	13dec <tx_cmplt_get+0x88>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   13da6:	b37b      	cbz	r3, 13e08 <tx_cmplt_get+0xa4>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   13da8:	7903      	ldrb	r3, [r0, #4]
   13daa:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   13dae:	3b01      	subs	r3, #1
   13db0:	2b01      	cmp	r3, #1
   13db2:	d931      	bls.n	13e18 <tx_cmplt_get+0xb4>
   13db4:	2302      	movs	r3, #2
   13db6:	604b      	str	r3, [r1, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   13db8:	f002 fc16 	bl	165e8 <ll_tx_mem_release>
	if (*idx >= count) {
   13dbc:	782b      	ldrb	r3, [r5, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   13dbe:	7879      	ldrb	r1, [r7, #1]
   13dc0:	7838      	ldrb	r0, [r7, #0]
   13dc2:	4299      	cmp	r1, r3
   13dc4:	bf9c      	itt	ls
   13dc6:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   13dc8:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
   13dca:	459a      	cmp	sl, r3
   13dcc:	d021      	beq.n	13e12 <tx_cmplt_get+0xae>
	i = *idx + 1;
   13dce:	1c5c      	adds	r4, r3, #1
   13dd0:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
   13dd2:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   13dd6:	42a1      	cmp	r1, r4
   13dd8:	bf08      	it	eq
   13dda:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   13ddc:	18f1      	adds	r1, r6, r3
	*idx = i;
   13dde:	702c      	strb	r4, [r5, #0]
   13de0:	d017      	beq.n	13e12 <tx_cmplt_get+0xae>
   13de2:	5af0      	ldrh	r0, [r6, r3]
   13de4:	f8bb 3000 	ldrh.w	r3, [fp]
   13de8:	4298      	cmp	r0, r3
   13dea:	d112      	bne.n	13e12 <tx_cmplt_get+0xae>
		node_tx = tx->node;
   13dec:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   13dee:	2801      	cmp	r0, #1
   13df0:	f020 0303 	bic.w	r3, r0, #3
   13df4:	d8d7      	bhi.n	13da6 <tx_cmplt_get+0x42>
			cmplt++;
   13df6:	f108 0801 	add.w	r8, r8, #1
   13dfa:	fa5f f888 	uxtb.w	r8, r8
   13dfe:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   13e02:	2b00      	cmp	r3, #0
   13e04:	d0da      	beq.n	13dbc <tx_cmplt_get+0x58>
   13e06:	e7d7      	b.n	13db8 <tx_cmplt_get+0x54>
   13e08:	2302      	movs	r3, #2
   13e0a:	604b      	str	r3, [r1, #4]
   13e0c:	e7d6      	b.n	13dbc <tx_cmplt_get+0x58>
		return 0;
   13e0e:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
   13e12:	4640      	mov	r0, r8
   13e14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   13e18:	f108 0801 	add.w	r8, r8, #1
   13e1c:	fa5f f888 	uxtb.w	r8, r8
   13e20:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   13e24:	e7c8      	b.n	13db8 <tx_cmplt_get+0x54>
   13e26:	bf00      	nop
   13e28:	200003d4 	.word	0x200003d4
   13e2c:	200003d8 	.word	0x200003d8

00013e30 <rx_demux>:
		}
}
#endif /* CONFIG_BT_CONN */

static void rx_demux(void *param)
{
   13e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e34:	4ca7      	ldr	r4, [pc, #668]	; (140d4 <rx_demux+0x2a4>)
	k_sem_give(sem_recv);
   13e36:	4ea8      	ldr	r6, [pc, #672]	; (140d8 <rx_demux+0x2a8>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
   13e38:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 140fc <rx_demux+0x2cc>
{
   13e3c:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   13e3e:	e9d4 0100 	ldrd	r0, r1, [r4]
   13e42:	aa03      	add	r2, sp, #12
   13e44:	f7fc fd7c 	bl	10940 <memq_peek>
		if (link) {
   13e48:	4607      	mov	r7, r0
   13e4a:	2800      	cmp	r0, #0
   13e4c:	d040      	beq.n	13ed0 <rx_demux+0xa0>
			LL_ASSERT(rx);
   13e4e:	9b03      	ldr	r3, [sp, #12]
   13e50:	2b00      	cmp	r3, #0
   13e52:	f000 812f 	beq.w	140b4 <rx_demux+0x284>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   13e56:	7818      	ldrb	r0, [r3, #0]
   13e58:	aa04      	add	r2, sp, #16
   13e5a:	a902      	add	r1, sp, #8
   13e5c:	f004 fe80 	bl	18b60 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   13e60:	4605      	mov	r5, r0
   13e62:	2800      	cmp	r0, #0
   13e64:	d06a      	beq.n	13f3c <rx_demux+0x10c>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   13e66:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
   13e6a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13e6e:	f891 9000 	ldrb.w	r9, [r1]
   13e72:	9205      	str	r2, [sp, #20]
   13e74:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   13e78:	f10d 0814 	add.w	r8, sp, #20
   13e7c:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   13e80:	f004 fe84 	bl	18b8c <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   13e84:	4629      	mov	r1, r5
   13e86:	9a05      	ldr	r2, [sp, #20]
   13e88:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   13e8c:	f004 fec6 	bl	18c1c <ull_conn_tx_ack>
   13e90:	4603      	mov	r3, r0
		ull_conn_link_tx_release(link);
   13e92:	4628      	mov	r0, r5
		conn = ull_conn_tx_ack(handle, link, node_tx);
   13e94:	461d      	mov	r5, r3
		ull_conn_link_tx_release(link);
   13e96:	f004 fe3d 	bl	18b14 <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   13e9a:	2001      	movs	r0, #1
   13e9c:	f004 faec 	bl	18478 <ull_conn_tx_demux>
			ull_conn_tx_lll_enqueue(conn, 1);
   13ea0:	2101      	movs	r1, #1
   13ea2:	4628      	mov	r0, r5
		if (conn) {
   13ea4:	b10d      	cbz	r5, 13eaa <rx_demux+0x7a>
			ull_conn_tx_lll_enqueue(conn, 1);
   13ea6:	f004 fd3f 	bl	18928 <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   13eaa:	4642      	mov	r2, r8
   13eac:	4639      	mov	r1, r7
   13eae:	4648      	mov	r0, r9
   13eb0:	f004 fe56 	bl	18b60 <ull_conn_ack_by_last_peek>
	} while (link);
   13eb4:	4605      	mov	r5, r0
   13eb6:	2800      	cmp	r0, #0
   13eb8:	d1e2      	bne.n	13e80 <rx_demux+0x50>
	k_sem_give(sem_recv);
   13eba:	6830      	ldr	r0, [r6, #0]
   13ebc:	f00b fece 	bl	1fc5c <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   13ec0:	e9d4 0100 	ldrd	r0, r1, [r4]
   13ec4:	aa03      	add	r2, sp, #12
   13ec6:	f7fc fd3b 	bl	10940 <memq_peek>
		if (link) {
   13eca:	4607      	mov	r7, r0
   13ecc:	2800      	cmp	r0, #0
   13ece:	d1be      	bne.n	13e4e <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   13ed0:	aa04      	add	r2, sp, #16
   13ed2:	a902      	add	r1, sp, #8
   13ed4:	f10d 0007 	add.w	r0, sp, #7
   13ed8:	f004 fe28 	bl	18b2c <ull_conn_ack_peek>
			if (link) {
   13edc:	4605      	mov	r5, r0
   13ede:	2800      	cmp	r0, #0
   13ee0:	d069      	beq.n	13fb6 <rx_demux+0x186>
				rx_demux_conn_tx_ack(ack_last, handle,
   13ee2:	9a04      	ldr	r2, [sp, #16]
   13ee4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13ee8:	f89d 9007 	ldrb.w	r9, [sp, #7]
   13eec:	9205      	str	r2, [sp, #20]
   13eee:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   13ef2:	f10d 0814 	add.w	r8, sp, #20
   13ef6:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   13efa:	f004 fe47 	bl	18b8c <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   13efe:	4629      	mov	r1, r5
   13f00:	9a05      	ldr	r2, [sp, #20]
   13f02:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   13f06:	f004 fe89 	bl	18c1c <ull_conn_tx_ack>
   13f0a:	4603      	mov	r3, r0
		ull_conn_link_tx_release(link);
   13f0c:	4628      	mov	r0, r5
		conn = ull_conn_tx_ack(handle, link, node_tx);
   13f0e:	461d      	mov	r5, r3
		ull_conn_link_tx_release(link);
   13f10:	f004 fe00 	bl	18b14 <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   13f14:	2001      	movs	r0, #1
   13f16:	f004 faaf 	bl	18478 <ull_conn_tx_demux>
			ull_conn_tx_lll_enqueue(conn, 1);
   13f1a:	2101      	movs	r1, #1
   13f1c:	4628      	mov	r0, r5
		if (conn) {
   13f1e:	b10d      	cbz	r5, 13f24 <rx_demux+0xf4>
			ull_conn_tx_lll_enqueue(conn, 1);
   13f20:	f004 fd02 	bl	18928 <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   13f24:	4642      	mov	r2, r8
   13f26:	4639      	mov	r1, r7
   13f28:	4648      	mov	r0, r9
   13f2a:	f004 fe19 	bl	18b60 <ull_conn_ack_by_last_peek>
	} while (link);
   13f2e:	4605      	mov	r5, r0
   13f30:	2800      	cmp	r0, #0
   13f32:	d1e2      	bne.n	13efa <rx_demux+0xca>
	k_sem_give(sem_recv);
   13f34:	6830      	ldr	r0, [r6, #0]
   13f36:	f00b fe91 	bl	1fc5c <z_impl_k_sem_give>
			if (nack) {
   13f3a:	e7c1      	b.n	13ec0 <rx_demux+0x90>
				nack = rx_demux_rx(link, rx);
   13f3c:	9b03      	ldr	r3, [sp, #12]
   13f3e:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   13f40:	791b      	ldrb	r3, [r3, #4]
   13f42:	3b01      	subs	r3, #1
   13f44:	2b09      	cmp	r3, #9
   13f46:	d806      	bhi.n	13f56 <rx_demux+0x126>
   13f48:	e8df f003 	tbb	[pc, r3]
   13f4c:	13052e38 	.word	0x13052e38
   13f50:	05050505 	.word	0x05050505
   13f54:	1324      	.short	0x1324
		LL_ASSERT(0);
   13f56:	4a61      	ldr	r2, [pc, #388]	; (140dc <rx_demux+0x2ac>)
   13f58:	4961      	ldr	r1, [pc, #388]	; (140e0 <rx_demux+0x2b0>)
   13f5a:	4862      	ldr	r0, [pc, #392]	; (140e4 <rx_demux+0x2b4>)
   13f5c:	f240 63b4 	movw	r3, #1716	; 0x6b4
   13f60:	f00c fb6e 	bl	20640 <printk>
   13f64:	4040      	eors	r0, r0
   13f66:	f380 8811 	msr	BASEPRI, r0
   13f6a:	f04f 0003 	mov.w	r0, #3
   13f6e:	df02      	svc	2
			if (nack) {
   13f70:	e765      	b.n	13e3e <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13f72:	4958      	ldr	r1, [pc, #352]	; (140d4 <rx_demux+0x2a4>)
   13f74:	6860      	ldr	r0, [r4, #4]
   13f76:	2200      	movs	r2, #0
   13f78:	f7fc fcea 	bl	10950 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13f7c:	4b5a      	ldr	r3, [pc, #360]	; (140e8 <rx_demux+0x2b8>)
		ll_rx_put(link, rx);
   13f7e:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13f80:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13f82:	4a5a      	ldr	r2, [pc, #360]	; (140ec <rx_demux+0x2bc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13f84:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13f86:	4638      	mov	r0, r7
   13f88:	f7fc fcd2 	bl	10930 <memq_enqueue>
	k_sem_give(sem_recv);
   13f8c:	6830      	ldr	r0, [r6, #0]
   13f8e:	f00b fe65 	bl	1fc5c <z_impl_k_sem_give>
			if (nack) {
   13f92:	e795      	b.n	13ec0 <rx_demux+0x90>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13f94:	494f      	ldr	r1, [pc, #316]	; (140d4 <rx_demux+0x2a4>)
   13f96:	6860      	ldr	r0, [r4, #4]
   13f98:	2200      	movs	r2, #0
   13f9a:	f7fc fcd9 	bl	10950 <memq_dequeue>
		ull_conn_setup(link, rx);
   13f9e:	9905      	ldr	r1, [sp, #20]
   13fa0:	4638      	mov	r0, r7
   13fa2:	f002 fdff 	bl	16ba4 <ull_conn_setup>
			if (nack) {
   13fa6:	e74a      	b.n	13e3e <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
   13fa8:	a905      	add	r1, sp, #20
   13faa:	4638      	mov	r0, r7
   13fac:	f002 fe0a 	bl	16bc4 <ull_conn_rx>
		if (nack) {
   13fb0:	2800      	cmp	r0, #0
   13fb2:	f000 80c8 	beq.w	14146 <rx_demux+0x316>
}
   13fb6:	b007      	add	sp, #28
   13fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13fbc:	4945      	ldr	r1, [pc, #276]	; (140d4 <rx_demux+0x2a4>)
   13fbe:	6860      	ldr	r0, [r4, #4]
   13fc0:	2200      	movs	r2, #0
   13fc2:	f7fc fcc5 	bl	10950 <memq_dequeue>
		rx_demux_event_done(link, rx);
   13fc6:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
   13fc8:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
   13fcc:	f8d5 a01c 	ldr.w	sl, [r5, #28]
	switch (done->extra.type) {
   13fd0:	b17b      	cbz	r3, 13ff2 <rx_demux+0x1c2>
   13fd2:	2b01      	cmp	r3, #1
   13fd4:	f000 80b3 	beq.w	1413e <rx_demux+0x30e>
		LL_ASSERT(0);
   13fd8:	4a40      	ldr	r2, [pc, #256]	; (140dc <rx_demux+0x2ac>)
   13fda:	4941      	ldr	r1, [pc, #260]	; (140e0 <rx_demux+0x2b0>)
   13fdc:	4841      	ldr	r0, [pc, #260]	; (140e4 <rx_demux+0x2b4>)
   13fde:	f240 63e5 	movw	r3, #1765	; 0x6e5
   13fe2:	f00c fb2d 	bl	20640 <printk>
   13fe6:	4040      	eors	r0, r0
   13fe8:	f380 8811 	msr	BASEPRI, r0
   13fec:	f04f 0003 	mov.w	r0, #3
   13ff0:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   13ff2:	4a3f      	ldr	r2, [pc, #252]	; (140f0 <rx_demux+0x2c0>)
   13ff4:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   13ff6:	f892 c001 	ldrb.w	ip, [r2, #1]
   13ffa:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   13ffc:	1c4b      	adds	r3, r1, #1
   13ffe:	b2db      	uxtb	r3, r3
		last = 0U;
   14000:	459c      	cmp	ip, r3
   14002:	bf08      	it	eq
   14004:	2300      	moveq	r3, #0
	if (last == first) {
   14006:	4298      	cmp	r0, r3
	done->extra.type = 0U;
   14008:	f04f 0c00 	mov.w	ip, #0
   1400c:	f885 c020 	strb.w	ip, [r5, #32]
   14010:	f000 80ad 	beq.w	1416e <rx_demux+0x33e>
	done->hdr.link = link;
   14014:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14016:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   14018:	fb00 2101 	mla	r1, r0, r1, r2
   1401c:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1401e:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
   14020:	4d34      	ldr	r5, [pc, #208]	; (140f4 <rx_demux+0x2c4>)
   14022:	78ab      	ldrb	r3, [r5, #2]
	if (first == last) {
   14024:	78ea      	ldrb	r2, [r5, #3]
   14026:	f895 c000 	ldrb.w	ip, [r5]
   1402a:	429a      	cmp	r2, r3
   1402c:	d02a      	beq.n	14084 <rx_demux+0x254>
	return (void *)(fifo + first * size);
   1402e:	f105 0904 	add.w	r9, r5, #4
   14032:	fb03 9c0c 	mla	ip, r3, ip, r9
	while (next) {
   14036:	f1bc 0f00 	cmp.w	ip, #0
   1403a:	d023      	beq.n	14084 <rx_demux+0x254>
		uint8_t is_aborted = next->is_aborted;
   1403c:	f89c 3020 	ldrb.w	r3, [ip, #32]
		if (!is_aborted) {
   14040:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   14042:	f3c3 0740 	ubfx	r7, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   14046:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
   1404a:	d559      	bpl.n	14100 <rx_demux+0x2d0>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   1404c:	78ea      	ldrb	r2, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   1404e:	78ab      	ldrb	r3, [r5, #2]
   14050:	f895 c000 	ldrb.w	ip, [r5]
   14054:	7869      	ldrb	r1, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   14056:	429a      	cmp	r2, r3
   14058:	d014      	beq.n	14084 <rx_demux+0x254>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   1405a:	3301      	adds	r3, #1
   1405c:	b2db      	uxtb	r3, r3
	if (_first == count) {
   1405e:	4299      	cmp	r1, r3
   14060:	d066      	beq.n	14130 <rx_demux+0x300>
	if (first == last) {
   14062:	429a      	cmp	r2, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
   14064:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   14066:	d00d      	beq.n	14084 <rx_demux+0x254>
	return (void *)(fifo + first * size);
   14068:	fb03 9c0c 	mla	ip, r3, ip, r9

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   1406c:	f1bc 0f00 	cmp.w	ip, #0
   14070:	d008      	beq.n	14084 <rx_demux+0x254>
   14072:	2f00      	cmp	r7, #0
   14074:	d1e2      	bne.n	1403c <rx_demux+0x20c>
   14076:	f1b8 0f00 	cmp.w	r8, #0
   1407a:	d003      	beq.n	14084 <rx_demux+0x254>
   1407c:	f89c 3020 	ldrb.w	r3, [ip, #32]
   14080:	07db      	lsls	r3, r3, #31
   14082:	d5db      	bpl.n	1403c <rx_demux+0x20c>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   14084:	f1ba 0f00 	cmp.w	sl, #0
   14088:	f43f aed9 	beq.w	13e3e <rx_demux+0xe>
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_hdr->ref);
   1408c:	f89a 3000 	ldrb.w	r3, [sl]
   14090:	2b00      	cmp	r3, #0
   14092:	d07a      	beq.n	1418a <rx_demux+0x35a>
	return hdr->ref--;
   14094:	3b01      	subs	r3, #1
   14096:	b2db      	uxtb	r3, r3
   14098:	f88a 3000 	strb.w	r3, [sl]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
   1409c:	2b00      	cmp	r3, #0
   1409e:	f47f aece 	bne.w	13e3e <rx_demux+0xe>
   140a2:	f8da 3004 	ldr.w	r3, [sl, #4]
   140a6:	2b00      	cmp	r3, #0
   140a8:	f43f aec9 	beq.w	13e3e <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   140ac:	f8da 0008 	ldr.w	r0, [sl, #8]
   140b0:	4798      	blx	r3
			if (nack) {
   140b2:	e6c4      	b.n	13e3e <rx_demux+0xe>
			LL_ASSERT(rx);
   140b4:	4a09      	ldr	r2, [pc, #36]	; (140dc <rx_demux+0x2ac>)
   140b6:	4910      	ldr	r1, [pc, #64]	; (140f8 <rx_demux+0x2c8>)
   140b8:	480a      	ldr	r0, [pc, #40]	; (140e4 <rx_demux+0x2b4>)
   140ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   140be:	f00c fabf 	bl	20640 <printk>
   140c2:	4040      	eors	r0, r0
   140c4:	f380 8811 	msr	BASEPRI, r0
   140c8:	f04f 0003 	mov.w	r0, #3
   140cc:	df02      	svc	2
   140ce:	9b03      	ldr	r3, [sp, #12]
   140d0:	e6c1      	b.n	13e56 <rx_demux+0x26>
   140d2:	bf00      	nop
   140d4:	20002948 	.word	0x20002948
   140d8:	20002950 	.word	0x20002950
   140dc:	00027140 	.word	0x00027140
   140e0:	00026f3c 	.word	0x00026f3c
   140e4:	00026ecc 	.word	0x00026ecc
   140e8:	200003d4 	.word	0x200003d4
   140ec:	20002944 	.word	0x20002944
   140f0:	2000026c 	.word	0x2000026c
   140f4:	200002b0 	.word	0x200002b0
   140f8:	00027184 	.word	0x00027184
   140fc:	20000460 	.word	0x20000460
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   14100:	465b      	mov	r3, fp
   14102:	463a      	mov	r2, r7
   14104:	4639      	mov	r1, r7
   14106:	2001      	movs	r0, #1
			mfy.param = next;
   14108:	f8cb c008 	str.w	ip, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1410c:	f7fc fc84 	bl	10a18 <mayfly_enqueue>
			LL_ASSERT(!ret);
   14110:	2800      	cmp	r0, #0
   14112:	d09b      	beq.n	1404c <rx_demux+0x21c>
   14114:	4a28      	ldr	r2, [pc, #160]	; (141b8 <rx_demux+0x388>)
   14116:	4929      	ldr	r1, [pc, #164]	; (141bc <rx_demux+0x38c>)
   14118:	4829      	ldr	r0, [pc, #164]	; (141c0 <rx_demux+0x390>)
   1411a:	f240 63fd 	movw	r3, #1789	; 0x6fd
   1411e:	f00c fa8f 	bl	20640 <printk>
   14122:	4040      	eors	r0, r0
   14124:	f380 8811 	msr	BASEPRI, r0
   14128:	f04f 0003 	mov.w	r0, #3
   1412c:	df02      	svc	2
   1412e:	e78d      	b.n	1404c <rx_demux+0x21c>
	*first = _first; /* Write back read-index */
   14130:	2300      	movs	r3, #0
   14132:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   14134:	2a00      	cmp	r2, #0
   14136:	d0a5      	beq.n	14084 <rx_demux+0x254>
	return (void *)(fifo + first * size);
   14138:	f8df c09c 	ldr.w	ip, [pc, #156]	; 141d8 <rx_demux+0x3a8>
   1413c:	e799      	b.n	14072 <rx_demux+0x242>
		ull_conn_done(done);
   1413e:	4628      	mov	r0, r5
   14140:	f004 fa62 	bl	18608 <ull_conn_done>
		break;
   14144:	e755      	b.n	13ff2 <rx_demux+0x1c2>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   14146:	491f      	ldr	r1, [pc, #124]	; (141c4 <rx_demux+0x394>)
   14148:	4602      	mov	r2, r0
   1414a:	6860      	ldr	r0, [r4, #4]
   1414c:	f7fc fc00 	bl	10950 <memq_dequeue>
		if (rx) {
   14150:	9905      	ldr	r1, [sp, #20]
   14152:	2900      	cmp	r1, #0
   14154:	f43f ae73 	beq.w	13e3e <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   14158:	4b1b      	ldr	r3, [pc, #108]	; (141c8 <rx_demux+0x398>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1415a:	4a1c      	ldr	r2, [pc, #112]	; (141cc <rx_demux+0x39c>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1415c:	78db      	ldrb	r3, [r3, #3]
   1415e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   14160:	4638      	mov	r0, r7
   14162:	f7fc fbe5 	bl	10930 <memq_enqueue>
	k_sem_give(sem_recv);
   14166:	6830      	ldr	r0, [r6, #0]
   14168:	f00b fd78 	bl	1fc5c <z_impl_k_sem_give>
			if (nack) {
   1416c:	e667      	b.n	13e3e <rx_demux+0xe>
	LL_ASSERT(release == done);
   1416e:	4a12      	ldr	r2, [pc, #72]	; (141b8 <rx_demux+0x388>)
   14170:	4917      	ldr	r1, [pc, #92]	; (141d0 <rx_demux+0x3a0>)
   14172:	4813      	ldr	r0, [pc, #76]	; (141c0 <rx_demux+0x390>)
   14174:	f240 63ec 	movw	r3, #1772	; 0x6ec
   14178:	f00c fa62 	bl	20640 <printk>
   1417c:	4040      	eors	r0, r0
   1417e:	f380 8811 	msr	BASEPRI, r0
   14182:	f04f 0003 	mov.w	r0, #3
   14186:	df02      	svc	2
   14188:	e74a      	b.n	14020 <rx_demux+0x1f0>
	LL_ASSERT(ull_hdr->ref);
   1418a:	4a0b      	ldr	r2, [pc, #44]	; (141b8 <rx_demux+0x388>)
   1418c:	4911      	ldr	r1, [pc, #68]	; (141d4 <rx_demux+0x3a4>)
   1418e:	480c      	ldr	r0, [pc, #48]	; (141c0 <rx_demux+0x390>)
   14190:	f240 730f 	movw	r3, #1807	; 0x70f
   14194:	f00c fa54 	bl	20640 <printk>
   14198:	4040      	eors	r0, r0
   1419a:	f380 8811 	msr	BASEPRI, r0
   1419e:	f04f 0003 	mov.w	r0, #3
   141a2:	df02      	svc	2
   141a4:	f89a 3000 	ldrb.w	r3, [sl]
   141a8:	3b01      	subs	r3, #1
   141aa:	b2db      	uxtb	r3, r3
   141ac:	f88a 3000 	strb.w	r3, [sl]
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
   141b0:	2b00      	cmp	r3, #0
   141b2:	f47f ae44 	bne.w	13e3e <rx_demux+0xe>
   141b6:	e774      	b.n	140a2 <rx_demux+0x272>
   141b8:	00027140 	.word	0x00027140
   141bc:	00027188 	.word	0x00027188
   141c0:	00026ecc 	.word	0x00026ecc
   141c4:	20002948 	.word	0x20002948
   141c8:	200003d4 	.word	0x200003d4
   141cc:	20002944 	.word	0x20002944
   141d0:	000271a0 	.word	0x000271a0
   141d4:	00027190 	.word	0x00027190
   141d8:	200002b4 	.word	0x200002b4

000141dc <ll_init>:
{
   141dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
   141e0:	4ba1      	ldr	r3, [pc, #644]	; (14468 <ll_init+0x28c>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   141e2:	4da2      	ldr	r5, [pc, #648]	; (1446c <ll_init+0x290>)
	sem_recv = sem_rx;
   141e4:	6018      	str	r0, [r3, #0]
{
   141e6:	b086      	sub	sp, #24
	cntr_init();
   141e8:	f008 fe40 	bl	1ce6c <cntr_init>
	mayfly_init();
   141ec:	f7fc fbc0 	bl	10970 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   141f0:	489f      	ldr	r0, [pc, #636]	; (14470 <ll_init+0x294>)
   141f2:	9005      	str	r0, [sp, #20]
   141f4:	489f      	ldr	r0, [pc, #636]	; (14474 <ll_init+0x298>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   141f6:	4ca0      	ldr	r4, [pc, #640]	; (14478 <ll_init+0x29c>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   141f8:	4aa0      	ldr	r2, [pc, #640]	; (1447c <ll_init+0x2a0>)
   141fa:	9204      	str	r2, [sp, #16]
   141fc:	e9cd 0502 	strd	r0, r5, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   14200:	2103      	movs	r1, #3
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   14202:	220b      	movs	r2, #11
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   14204:	2502      	movs	r5, #2
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   14206:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   14208:	9201      	str	r2, [sp, #4]
   1420a:	9400      	str	r4, [sp, #0]
   1420c:	4a9c      	ldr	r2, [pc, #624]	; (14480 <ll_init+0x2a4>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1420e:	7021      	strb	r1, [r4, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   14210:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   14212:	2107      	movs	r1, #7
   14214:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   14216:	7425      	strb	r5, [r4, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   14218:	7625      	strb	r5, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1421a:	f7fd fecf 	bl	11fbc <ticker_init>
	LL_ASSERT(!err);
   1421e:	2800      	cmp	r0, #0
   14220:	f040 80f3 	bne.w	1440a <ll_init+0x22e>
	return z_impl_k_sem_init(sem, initial_count, limit);
   14224:	2201      	movs	r2, #1
   14226:	2100      	movs	r1, #0
   14228:	4896      	ldr	r0, [pc, #600]	; (14484 <ll_init+0x2a8>)
   1422a:	f011 fe0c 	bl	25e46 <z_impl_k_sem_init>
	err = lll_init();
   1422e:	f006 fec1 	bl	1afb4 <lll_init>
	if (err) {
   14232:	4604      	mov	r4, r0
   14234:	b118      	cbz	r0, 1423e <ll_init+0x62>
}
   14236:	4620      	mov	r0, r4
   14238:	b006      	add	sp, #24
   1423a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1423e:	4b92      	ldr	r3, [pc, #584]	; (14488 <ll_init+0x2ac>)
		link = mem_acquire(&mem_link_done.free);
   14240:	f8df 824c 	ldr.w	r8, [pc, #588]	; 14490 <ll_init+0x2b4>
   14244:	4d91      	ldr	r5, [pc, #580]	; (1448c <ll_init+0x2b0>)
		rx = mem_acquire(&mem_done.free);
   14246:	4f90      	ldr	r7, [pc, #576]	; (14488 <ll_init+0x2ac>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   14248:	1d18      	adds	r0, r3, #4
   1424a:	2203      	movs	r2, #3
   1424c:	2134      	movs	r1, #52	; 0x34
   1424e:	f7fc fadd 	bl	1080c <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   14252:	4643      	mov	r3, r8
   14254:	2203      	movs	r2, #3
   14256:	1d18      	adds	r0, r3, #4
   14258:	2108      	movs	r1, #8
   1425a:	f7fc fad7 	bl	1080c <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1425e:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   14260:	786a      	ldrb	r2, [r5, #1]
   14262:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   14264:	3401      	adds	r4, #1
   14266:	b2e4      	uxtb	r4, r4
		last = 0U;
   14268:	42a2      	cmp	r2, r4
   1426a:	bf08      	it	eq
   1426c:	2400      	moveq	r4, #0
	if (last == first) {
   1426e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   14270:	4640      	mov	r0, r8
   14272:	d013      	beq.n	1429c <ll_init+0xc0>
   14274:	f7fc faf8 	bl	10868 <mem_acquire>
   14278:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   1427a:	4638      	mov	r0, r7
		if (!link) {
   1427c:	b176      	cbz	r6, 1429c <ll_init+0xc0>
		rx = mem_acquire(&mem_done.free);
   1427e:	f7fc faf3 	bl	10868 <mem_acquire>
		if (!rx) {
   14282:	b138      	cbz	r0, 14294 <ll_init+0xb8>
		rx->link = link;
   14284:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14286:	78ea      	ldrb	r2, [r5, #3]
   14288:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1428a:	fb02 5303 	mla	r3, r2, r3, r5
   1428e:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   14290:	70ec      	strb	r4, [r5, #3]
}
   14292:	e7e5      	b.n	14260 <ll_init+0x84>
			mem_release(link, &mem_link_done.free);
   14294:	497e      	ldr	r1, [pc, #504]	; (14490 <ll_init+0x2b4>)
   14296:	4630      	mov	r0, r6
   14298:	f7fc fb00 	bl	1089c <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   1429c:	4b7d      	ldr	r3, [pc, #500]	; (14494 <ll_init+0x2b8>)
   1429e:	220a      	movs	r2, #10
   142a0:	1d18      	adds	r0, r3, #4
   142a2:	f44f 718e 	mov.w	r1, #284	; 0x11c
   142a6:	f7fc fab1 	bl	1080c <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   142aa:	4b7b      	ldr	r3, [pc, #492]	; (14498 <ll_init+0x2bc>)
   142ac:	220c      	movs	r2, #12
   142ae:	1d18      	adds	r0, r3, #4
   142b0:	2108      	movs	r1, #8
   142b2:	f7fc faab 	bl	1080c <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   142b6:	4878      	ldr	r0, [pc, #480]	; (14498 <ll_init+0x2bc>)
   142b8:	f7fc fad6 	bl	10868 <mem_acquire>
	LL_ASSERT(link);
   142bc:	4604      	mov	r4, r0
   142be:	2800      	cmp	r0, #0
   142c0:	f000 80bf 	beq.w	14442 <ll_init+0x266>
	MEMQ_INIT(ull_rx, link);
   142c4:	4a75      	ldr	r2, [pc, #468]	; (1449c <ll_init+0x2c0>)
   142c6:	4620      	mov	r0, r4
   142c8:	1f11      	subs	r1, r2, #4
   142ca:	f7fc fb23 	bl	10914 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   142ce:	4872      	ldr	r0, [pc, #456]	; (14498 <ll_init+0x2bc>)
   142d0:	f7fc faca 	bl	10868 <mem_acquire>
	LL_ASSERT(link);
   142d4:	4604      	mov	r4, r0
   142d6:	2800      	cmp	r0, #0
   142d8:	f000 80a5 	beq.w	14426 <ll_init+0x24a>
	MEMQ_INIT(ll_rx, link);
   142dc:	4a70      	ldr	r2, [pc, #448]	; (144a0 <ll_init+0x2c4>)
	mem_link_rx.quota_pdu = RX_CNT;
   142de:	4d71      	ldr	r5, [pc, #452]	; (144a4 <ll_init+0x2c8>)
   142e0:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 144bc <ll_init+0x2e0>
		rx = mem_acquire(&mem_pdu_rx.free);
   142e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 14494 <ll_init+0x2b8>
	MEMQ_INIT(ll_rx, link);
   142e8:	4620      	mov	r0, r4
   142ea:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   142ec:	462e      	mov	r6, r5
	MEMQ_INIT(ll_rx, link);
   142ee:	f7fc fb11 	bl	10914 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   142f2:	2308      	movs	r3, #8
   142f4:	f806 3b04 	strb.w	r3, [r6], #4
	while (mem_link_rx.quota_pdu &&
   142f8:	f899 4003 	ldrb.w	r4, [r9, #3]
		link->mem = NULL;
   142fc:	2700      	movs	r7, #0
	if (last == count) {
   142fe:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   14302:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   14306:	3401      	adds	r4, #1
   14308:	b2e4      	uxtb	r4, r4
		last = 0U;
   1430a:	42a2      	cmp	r2, r4
   1430c:	bf08      	it	eq
   1430e:	2400      	moveq	r4, #0
	if (last == first) {
   14310:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   14312:	4630      	mov	r0, r6
   14314:	d049      	beq.n	143aa <ll_init+0x1ce>
   14316:	f7fc faa7 	bl	10868 <mem_acquire>
   1431a:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1431c:	4640      	mov	r0, r8
		if (!link) {
   1431e:	f1ba 0f00 	cmp.w	sl, #0
   14322:	d042      	beq.n	143aa <ll_init+0x1ce>
		rx = mem_acquire(&mem_pdu_rx.free);
   14324:	f7fc faa0 	bl	10868 <mem_acquire>
		if (!rx) {
   14328:	2800      	cmp	r0, #0
   1432a:	d03a      	beq.n	143a2 <ll_init+0x1c6>
		link->mem = NULL;
   1432c:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   14330:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14334:	f899 1003 	ldrb.w	r1, [r9, #3]
   14338:	f899 2000 	ldrb.w	r2, [r9]
	mem_link_rx.quota_pdu += delta;
   1433c:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1433e:	fb01 9202 	mla	r2, r1, r2, r9
   14342:	3b01      	subs	r3, #1
   14344:	b2db      	uxtb	r3, r3
   14346:	6050      	str	r0, [r2, #4]
   14348:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   1434a:	f889 4003 	strb.w	r4, [r9, #3]
	while (mem_link_rx.quota_pdu &&
   1434e:	2b00      	cmp	r3, #0
   14350:	d1d5      	bne.n	142fe <ll_init+0x122>
	err = lll_adv_init();
   14352:	f007 fc57 	bl	1bc04 <lll_adv_init>
	if (err) {
   14356:	4604      	mov	r4, r0
   14358:	2800      	cmp	r0, #0
   1435a:	f47f af6c 	bne.w	14236 <ll_init+0x5a>
	err = ull_adv_init();
   1435e:	f001 fa19 	bl	15794 <ull_adv_init>
	if (err) {
   14362:	4604      	mov	r4, r0
   14364:	2800      	cmp	r0, #0
   14366:	f47f af66 	bne.w	14236 <ll_init+0x5a>
	err = lll_scan_init();
   1436a:	f007 ff77 	bl	1c25c <lll_scan_init>
	if (err) {
   1436e:	4604      	mov	r4, r0
   14370:	2800      	cmp	r0, #0
   14372:	f47f af60 	bne.w	14236 <ll_init+0x5a>
	err = ull_scan_init();
   14376:	f001 fbdf 	bl	15b38 <ull_scan_init>
	if (err) {
   1437a:	4604      	mov	r4, r0
   1437c:	2800      	cmp	r0, #0
   1437e:	f47f af5a 	bne.w	14236 <ll_init+0x5a>
	err = lll_conn_init();
   14382:	f008 f823 	bl	1c3cc <lll_conn_init>
	if (err) {
   14386:	4604      	mov	r4, r0
   14388:	2800      	cmp	r0, #0
   1438a:	f47f af54 	bne.w	14236 <ll_init+0x5a>
	err = ull_conn_init();
   1438e:	f002 fb77 	bl	16a80 <ull_conn_init>
	if (err) {
   14392:	4604      	mov	r4, r0
   14394:	2800      	cmp	r0, #0
   14396:	f47f af4e 	bne.w	14236 <ll_init+0x5a>
		ull_filter_reset(true);
   1439a:	2001      	movs	r0, #1
   1439c:	f006 f9f2 	bl	1a784 <ull_filter_reset>
	return  0;
   143a0:	e749      	b.n	14236 <ll_init+0x5a>
			mem_release(link, &mem_link_rx.free);
   143a2:	493d      	ldr	r1, [pc, #244]	; (14498 <ll_init+0x2bc>)
   143a4:	4650      	mov	r0, sl
   143a6:	f7fc fa79 	bl	1089c <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   143aa:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   143ac:	1e5f      	subs	r7, r3, #1
   143ae:	b2ff      	uxtb	r7, r7
   143b0:	2b00      	cmp	r3, #0
   143b2:	d0ce      	beq.n	14352 <ll_init+0x176>
   143b4:	4e3c      	ldr	r6, [pc, #240]	; (144a8 <ll_init+0x2cc>)
		link = mem_acquire(&mem_link_rx.free);
   143b6:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 14498 <ll_init+0x2bc>
   143ba:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   143bc:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 14494 <ll_init+0x2b8>
	if (last == count) {
   143c0:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   143c2:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   143c4:	3401      	adds	r4, #1
   143c6:	b2e4      	uxtb	r4, r4
		last = 0U;
   143c8:	42a2      	cmp	r2, r4
   143ca:	bf08      	it	eq
   143cc:	2400      	moveq	r4, #0
	if (last == first) {
   143ce:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   143d0:	4648      	mov	r0, r9
   143d2:	d0be      	beq.n	14352 <ll_init+0x176>
   143d4:	f7fc fa48 	bl	10868 <mem_acquire>
   143d8:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   143da:	4640      	mov	r0, r8
		if (!link) {
   143dc:	f1ba 0f00 	cmp.w	sl, #0
   143e0:	d0b7      	beq.n	14352 <ll_init+0x176>
		rx = mem_acquire(&mem_pdu_rx.free);
   143e2:	f7fc fa41 	bl	10868 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   143e6:	3f01      	subs	r7, #1
   143e8:	b2ff      	uxtb	r7, r7
		if (!rx) {
   143ea:	2800      	cmp	r0, #0
   143ec:	d037      	beq.n	1445e <ll_init+0x282>
		rx->link = link;
   143ee:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   143f2:	78f1      	ldrb	r1, [r6, #3]
   143f4:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   143f6:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   143f8:	fb01 6202 	mla	r2, r1, r2, r6
   143fc:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   143fe:	2fff      	cmp	r7, #255	; 0xff
   14400:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   14402:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   14404:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14406:	d1db      	bne.n	143c0 <ll_init+0x1e4>
   14408:	e7a3      	b.n	14352 <ll_init+0x176>
	LL_ASSERT(!err);
   1440a:	4a28      	ldr	r2, [pc, #160]	; (144ac <ll_init+0x2d0>)
   1440c:	4928      	ldr	r1, [pc, #160]	; (144b0 <ll_init+0x2d4>)
   1440e:	4829      	ldr	r0, [pc, #164]	; (144b4 <ll_init+0x2d8>)
   14410:	f44f 7396 	mov.w	r3, #300	; 0x12c
   14414:	f00c f914 	bl	20640 <printk>
   14418:	4040      	eors	r0, r0
   1441a:	f380 8811 	msr	BASEPRI, r0
   1441e:	f04f 0003 	mov.w	r0, #3
   14422:	df02      	svc	2
   14424:	e6fe      	b.n	14224 <ll_init+0x48>
	LL_ASSERT(link);
   14426:	4a21      	ldr	r2, [pc, #132]	; (144ac <ll_init+0x2d0>)
   14428:	4923      	ldr	r1, [pc, #140]	; (144b8 <ll_init+0x2dc>)
   1442a:	4822      	ldr	r0, [pc, #136]	; (144b4 <ll_init+0x2d8>)
   1442c:	f240 43ec 	movw	r3, #1260	; 0x4ec
   14430:	f00c f906 	bl	20640 <printk>
   14434:	4040      	eors	r0, r0
   14436:	f380 8811 	msr	BASEPRI, r0
   1443a:	f04f 0003 	mov.w	r0, #3
   1443e:	df02      	svc	2
   14440:	e74c      	b.n	142dc <ll_init+0x100>
	LL_ASSERT(link);
   14442:	4a1a      	ldr	r2, [pc, #104]	; (144ac <ll_init+0x2d0>)
   14444:	491c      	ldr	r1, [pc, #112]	; (144b8 <ll_init+0x2dc>)
   14446:	481b      	ldr	r0, [pc, #108]	; (144b4 <ll_init+0x2d8>)
   14448:	f240 43e5 	movw	r3, #1253	; 0x4e5
   1444c:	f00c f8f8 	bl	20640 <printk>
   14450:	4040      	eors	r0, r0
   14452:	f380 8811 	msr	BASEPRI, r0
   14456:	f04f 0003 	mov.w	r0, #3
   1445a:	df02      	svc	2
   1445c:	e732      	b.n	142c4 <ll_init+0xe8>
			mem_release(link, &mem_link_rx.free);
   1445e:	490e      	ldr	r1, [pc, #56]	; (14498 <ll_init+0x2bc>)
   14460:	4650      	mov	r0, sl
   14462:	f7fc fa1b 	bl	1089c <mem_release>
			break;
   14466:	e774      	b.n	14352 <ll_init+0x176>
   14468:	20002950 	.word	0x20002950
   1446c:	0001db81 	.word	0x0001db81
   14470:	0001dcc5 	.word	0x0001dcc5
   14474:	20002abc 	.word	0x20002abc
   14478:	20002cf8 	.word	0x20002cf8
   1447c:	0001dbe5 	.word	0x0001dbe5
   14480:	2000296c 	.word	0x2000296c
   14484:	20002954 	.word	0x20002954
   14488:	20001d00 	.word	0x20001d00
   1448c:	2000026c 	.word	0x2000026c
   14490:	20001da0 	.word	0x20001da0
   14494:	20001e24 	.word	0x20001e24
   14498:	20001dc0 	.word	0x20001dc0
   1449c:	2000294c 	.word	0x2000294c
   144a0:	20002944 	.word	0x20002944
   144a4:	20001dbc 	.word	0x20001dbc
   144a8:	20000294 	.word	0x20000294
   144ac:	00027140 	.word	0x00027140
   144b0:	0002717c 	.word	0x0002717c
   144b4:	00026ecc 	.word	0x00026ecc
   144b8:	00027460 	.word	0x00027460
   144bc:	20000280 	.word	0x20000280

000144c0 <ll_reset>:
{
   144c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144c4:	b087      	sub	sp, #28
	err = ull_adv_reset();
   144c6:	f001 f967 	bl	15798 <ull_adv_reset>
	LL_ASSERT(!err);
   144ca:	2800      	cmp	r0, #0
   144cc:	f040 80f0 	bne.w	146b0 <ll_reset+0x1f0>
	err = ull_scan_reset();
   144d0:	f001 fc0a 	bl	15ce8 <ull_scan_reset>
	LL_ASSERT(!err);
   144d4:	2800      	cmp	r0, #0
   144d6:	f040 80fd 	bne.w	146d4 <ll_reset+0x214>
		err = ll_connect_disable(&rx);
   144da:	4668      	mov	r0, sp
   144dc:	f005 f8e6 	bl	196ac <ll_connect_disable>
		if (!err) {
   144e0:	2800      	cmp	r0, #0
   144e2:	f000 810a 	beq.w	146fa <ll_reset+0x23a>
	err = ull_conn_reset();
   144e6:	f002 facd 	bl	16a84 <ull_conn_reset>
	LL_ASSERT(!err);
   144ea:	2800      	cmp	r0, #0
   144ec:	f040 8117 	bne.w	1471e <ll_reset+0x25e>
	MFIFO_INIT(tx_ack);
   144f0:	4bb0      	ldr	r3, [pc, #704]	; (147b4 <ll_reset+0x2f4>)
	MFIFO_INIT(done);
   144f2:	4eb1      	ldr	r6, [pc, #708]	; (147b8 <ll_reset+0x2f8>)
	MFIFO_INIT(pdu_rx_free);
   144f4:	4fb1      	ldr	r7, [pc, #708]	; (147bc <ll_reset+0x2fc>)
	MFIFO_INIT(ll_pdu_rx_free);
   144f6:	4db2      	ldr	r5, [pc, #712]	; (147c0 <ll_reset+0x300>)
	MFIFO_INIT(tx_ack);
   144f8:	2400      	movs	r4, #0
   144fa:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   144fc:	4620      	mov	r0, r4
   144fe:	f006 f941 	bl	1a784 <ull_filter_reset>
	MFIFO_INIT(prep);
   14502:	4bb0      	ldr	r3, [pc, #704]	; (147c4 <ll_reset+0x304>)
	MFIFO_INIT(done);
   14504:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
   14506:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   14508:	807c      	strh	r4, [r7, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   1450a:	806c      	strh	r4, [r5, #2]
   1450c:	2201      	movs	r2, #1
   1450e:	4621      	mov	r1, r4
   14510:	4668      	mov	r0, sp
   14512:	f011 fc98 	bl	25e46 <z_impl_k_sem_init>
		mfy.param = &sem;
   14516:	4bac      	ldr	r3, [pc, #688]	; (147c8 <ll_reset+0x308>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   14518:	4622      	mov	r2, r4
   1451a:	4621      	mov	r1, r4
   1451c:	2003      	movs	r0, #3
		mfy.param = &sem;
   1451e:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   14522:	f7fc fa79 	bl	10a18 <mayfly_enqueue>
		LL_ASSERT(!retval);
   14526:	2800      	cmp	r0, #0
   14528:	f040 8107 	bne.w	1473a <ll_reset+0x27a>
	return z_impl_k_sem_take(sem, timeout);
   1452c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14534:	4668      	mov	r0, sp
   14536:	f00b fbb7 	bl	1fca8 <z_impl_k_sem_take>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1453a:	4ba4      	ldr	r3, [pc, #656]	; (147cc <ll_reset+0x30c>)
		link = mem_acquire(&mem_link_done.free);
   1453c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 147d0 <ll_reset+0x310>
		rx = mem_acquire(&mem_done.free);
   14540:	f8df 8288 	ldr.w	r8, [pc, #648]	; 147cc <ll_reset+0x30c>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   14544:	1d18      	adds	r0, r3, #4
   14546:	2203      	movs	r2, #3
   14548:	2134      	movs	r1, #52	; 0x34
   1454a:	f7fc f95f 	bl	1080c <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   1454e:	464b      	mov	r3, r9
   14550:	2203      	movs	r2, #3
   14552:	1d18      	adds	r0, r3, #4
   14554:	2108      	movs	r1, #8
   14556:	f7fc f959 	bl	1080c <mem_init>
static inline void done_alloc(void)
   1455a:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   1455c:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1455e:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   14560:	3401      	adds	r4, #1
   14562:	b2e4      	uxtb	r4, r4
		last = 0U;
   14564:	42a2      	cmp	r2, r4
   14566:	bf08      	it	eq
   14568:	2400      	moveq	r4, #0
	if (last == first) {
   1456a:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   1456c:	4648      	mov	r0, r9
   1456e:	d016      	beq.n	1459e <ll_reset+0xde>
   14570:	f7fc f97a 	bl	10868 <mem_acquire>
   14574:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
   14576:	4640      	mov	r0, r8
		if (!link) {
   14578:	f1ba 0f00 	cmp.w	sl, #0
   1457c:	d00f      	beq.n	1459e <ll_reset+0xde>
		rx = mem_acquire(&mem_done.free);
   1457e:	f7fc f973 	bl	10868 <mem_acquire>
		if (!rx) {
   14582:	b140      	cbz	r0, 14596 <ll_reset+0xd6>
		rx->link = link;
   14584:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14588:	78f2      	ldrb	r2, [r6, #3]
   1458a:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1458c:	fb02 6303 	mla	r3, r2, r3, r6
   14590:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   14592:	70f4      	strb	r4, [r6, #3]
}
   14594:	e7e2      	b.n	1455c <ll_reset+0x9c>
			mem_release(link, &mem_link_done.free);
   14596:	498e      	ldr	r1, [pc, #568]	; (147d0 <ll_reset+0x310>)
   14598:	4650      	mov	r0, sl
   1459a:	f7fc f97f 	bl	1089c <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   1459e:	4b8d      	ldr	r3, [pc, #564]	; (147d4 <ll_reset+0x314>)
   145a0:	220a      	movs	r2, #10
   145a2:	1d18      	adds	r0, r3, #4
   145a4:	f44f 718e 	mov.w	r1, #284	; 0x11c
   145a8:	f7fc f930 	bl	1080c <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   145ac:	4b8a      	ldr	r3, [pc, #552]	; (147d8 <ll_reset+0x318>)
   145ae:	220c      	movs	r2, #12
   145b0:	1d18      	adds	r0, r3, #4
   145b2:	2108      	movs	r1, #8
   145b4:	f7fc f92a 	bl	1080c <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   145b8:	4887      	ldr	r0, [pc, #540]	; (147d8 <ll_reset+0x318>)
   145ba:	f7fc f955 	bl	10868 <mem_acquire>
	LL_ASSERT(link);
   145be:	4604      	mov	r4, r0
   145c0:	2800      	cmp	r0, #0
   145c2:	f000 80d6 	beq.w	14772 <ll_reset+0x2b2>
	MEMQ_INIT(ull_rx, link);
   145c6:	4a85      	ldr	r2, [pc, #532]	; (147dc <ll_reset+0x31c>)
   145c8:	4620      	mov	r0, r4
   145ca:	1f11      	subs	r1, r2, #4
   145cc:	f7fc f9a2 	bl	10914 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   145d0:	4881      	ldr	r0, [pc, #516]	; (147d8 <ll_reset+0x318>)
   145d2:	f7fc f949 	bl	10868 <mem_acquire>
	LL_ASSERT(link);
   145d6:	4604      	mov	r4, r0
   145d8:	2800      	cmp	r0, #0
   145da:	f000 80bc 	beq.w	14756 <ll_reset+0x296>
	MEMQ_INIT(ll_rx, link);
   145de:	4a80      	ldr	r2, [pc, #512]	; (147e0 <ll_reset+0x320>)
	mem_link_rx.quota_pdu = RX_CNT;
   145e0:	4e80      	ldr	r6, [pc, #512]	; (147e4 <ll_reset+0x324>)
		rx = mem_acquire(&mem_pdu_rx.free);
   145e2:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 147d4 <ll_reset+0x314>
	MEMQ_INIT(ll_rx, link);
   145e6:	4620      	mov	r0, r4
   145e8:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   145ea:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
   145ec:	f7fc f992 	bl	10914 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   145f0:	2308      	movs	r3, #8
   145f2:	f808 3b04 	strb.w	r3, [r8], #4
	while (mem_link_rx.quota_pdu &&
   145f6:	78ec      	ldrb	r4, [r5, #3]
		link->mem = NULL;
   145f8:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   145fc:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   145fe:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   14600:	3401      	adds	r4, #1
   14602:	b2e4      	uxtb	r4, r4
		last = 0U;
   14604:	42a2      	cmp	r2, r4
   14606:	bf08      	it	eq
   14608:	2400      	moveq	r4, #0
	if (last == first) {
   1460a:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1460c:	4640      	mov	r0, r8
   1460e:	d020      	beq.n	14652 <ll_reset+0x192>
   14610:	f7fc f92a 	bl	10868 <mem_acquire>
   14614:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   14616:	4650      	mov	r0, sl
		if (!link) {
   14618:	f1bb 0f00 	cmp.w	fp, #0
   1461c:	d019      	beq.n	14652 <ll_reset+0x192>
		rx = mem_acquire(&mem_pdu_rx.free);
   1461e:	f7fc f923 	bl	10868 <mem_acquire>
		if (!rx) {
   14622:	b190      	cbz	r0, 1464a <ll_reset+0x18a>
		link->mem = NULL;
   14624:	f8cb 9004 	str.w	r9, [fp, #4]
		rx->link = link;
   14628:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1462c:	78e9      	ldrb	r1, [r5, #3]
   1462e:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   14630:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   14632:	fb01 5202 	mla	r2, r1, r2, r5
   14636:	3b01      	subs	r3, #1
   14638:	b2db      	uxtb	r3, r3
   1463a:	6050      	str	r0, [r2, #4]
   1463c:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   1463e:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
   14640:	2b00      	cmp	r3, #0
   14642:	d1db      	bne.n	145fc <ll_reset+0x13c>
}
   14644:	b007      	add	sp, #28
   14646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   1464a:	4963      	ldr	r1, [pc, #396]	; (147d8 <ll_reset+0x318>)
   1464c:	4658      	mov	r0, fp
   1464e:	f7fc f925 	bl	1089c <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   14652:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14654:	1e5d      	subs	r5, r3, #1
   14656:	b2ed      	uxtb	r5, r5
   14658:	2b00      	cmp	r3, #0
   1465a:	d0f3      	beq.n	14644 <ll_reset+0x184>
   1465c:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
   1465e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 147d8 <ll_reset+0x318>
		rx = mem_acquire(&mem_pdu_rx.free);
   14662:	f8df 8170 	ldr.w	r8, [pc, #368]	; 147d4 <ll_reset+0x314>
	if (last == count) {
   14666:	787a      	ldrb	r2, [r7, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14668:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   1466a:	3401      	adds	r4, #1
   1466c:	b2e4      	uxtb	r4, r4
		last = 0U;
   1466e:	42a2      	cmp	r2, r4
   14670:	bf08      	it	eq
   14672:	2400      	moveq	r4, #0
	if (last == first) {
   14674:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   14676:	4648      	mov	r0, r9
   14678:	d0e4      	beq.n	14644 <ll_reset+0x184>
   1467a:	f7fc f8f5 	bl	10868 <mem_acquire>
   1467e:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   14680:	4640      	mov	r0, r8
		if (!link) {
   14682:	f1ba 0f00 	cmp.w	sl, #0
   14686:	d0dd      	beq.n	14644 <ll_reset+0x184>
		rx = mem_acquire(&mem_pdu_rx.free);
   14688:	f7fc f8ee 	bl	10868 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1468c:	3d01      	subs	r5, #1
   1468e:	b2ed      	uxtb	r5, r5
		if (!rx) {
   14690:	2800      	cmp	r0, #0
   14692:	d07c      	beq.n	1478e <ll_reset+0x2ce>
		rx->link = link;
   14694:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14698:	78f9      	ldrb	r1, [r7, #3]
   1469a:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   1469c:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1469e:	fb01 7202 	mla	r2, r1, r2, r7
   146a2:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   146a4:	2dff      	cmp	r5, #255	; 0xff
   146a6:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   146a8:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   146aa:	70fc      	strb	r4, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   146ac:	d1db      	bne.n	14666 <ll_reset+0x1a6>
   146ae:	e7c9      	b.n	14644 <ll_reset+0x184>
	LL_ASSERT(!err);
   146b0:	4a4d      	ldr	r2, [pc, #308]	; (147e8 <ll_reset+0x328>)
   146b2:	494e      	ldr	r1, [pc, #312]	; (147ec <ll_reset+0x32c>)
   146b4:	484e      	ldr	r0, [pc, #312]	; (147f0 <ll_reset+0x330>)
   146b6:	f44f 73bd 	mov.w	r3, #378	; 0x17a
   146ba:	f00b ffc1 	bl	20640 <printk>
   146be:	4040      	eors	r0, r0
   146c0:	f380 8811 	msr	BASEPRI, r0
   146c4:	f04f 0003 	mov.w	r0, #3
   146c8:	df02      	svc	2
	err = ull_scan_reset();
   146ca:	f001 fb0d 	bl	15ce8 <ull_scan_reset>
	LL_ASSERT(!err);
   146ce:	2800      	cmp	r0, #0
   146d0:	f43f af03 	beq.w	144da <ll_reset+0x1a>
   146d4:	4a44      	ldr	r2, [pc, #272]	; (147e8 <ll_reset+0x328>)
   146d6:	4945      	ldr	r1, [pc, #276]	; (147ec <ll_reset+0x32c>)
   146d8:	4845      	ldr	r0, [pc, #276]	; (147f0 <ll_reset+0x330>)
   146da:	f44f 73c0 	mov.w	r3, #384	; 0x180
   146de:	f00b ffaf 	bl	20640 <printk>
   146e2:	4040      	eors	r0, r0
   146e4:	f380 8811 	msr	BASEPRI, r0
   146e8:	f04f 0003 	mov.w	r0, #3
   146ec:	df02      	svc	2
		err = ll_connect_disable(&rx);
   146ee:	4668      	mov	r0, sp
   146f0:	f004 ffdc 	bl	196ac <ll_connect_disable>
		if (!err) {
   146f4:	2800      	cmp	r0, #0
   146f6:	f47f aef6 	bne.w	144e6 <ll_reset+0x26>
			scan = ull_scan_is_enabled_get(0);
   146fa:	f001 fb17 	bl	15d2c <ull_scan_is_enabled_get>
			LL_ASSERT(scan);
   146fe:	4604      	mov	r4, r0
   14700:	2800      	cmp	r0, #0
   14702:	d049      	beq.n	14798 <ll_reset+0x2d8>
			scan->is_enabled = 0U;
   14704:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
			scan->lll.conn = NULL;
   14708:	2200      	movs	r2, #0
			scan->is_enabled = 0U;
   1470a:	f36f 0300 	bfc	r3, #0, #1
   1470e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			scan->lll.conn = NULL;
   14712:	6262      	str	r2, [r4, #36]	; 0x24
	err = ull_conn_reset();
   14714:	f002 f9b6 	bl	16a84 <ull_conn_reset>
	LL_ASSERT(!err);
   14718:	2800      	cmp	r0, #0
   1471a:	f43f aee9 	beq.w	144f0 <ll_reset+0x30>
   1471e:	4a32      	ldr	r2, [pc, #200]	; (147e8 <ll_reset+0x328>)
   14720:	4932      	ldr	r1, [pc, #200]	; (147ec <ll_reset+0x32c>)
   14722:	4833      	ldr	r0, [pc, #204]	; (147f0 <ll_reset+0x330>)
   14724:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   14728:	f00b ff8a 	bl	20640 <printk>
   1472c:	4040      	eors	r0, r0
   1472e:	f380 8811 	msr	BASEPRI, r0
   14732:	f04f 0003 	mov.w	r0, #3
   14736:	df02      	svc	2
   14738:	e6da      	b.n	144f0 <ll_reset+0x30>
		LL_ASSERT(!retval);
   1473a:	4a2b      	ldr	r2, [pc, #172]	; (147e8 <ll_reset+0x328>)
   1473c:	492d      	ldr	r1, [pc, #180]	; (147f4 <ll_reset+0x334>)
   1473e:	482c      	ldr	r0, [pc, #176]	; (147f0 <ll_reset+0x330>)
   14740:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   14744:	f00b ff7c 	bl	20640 <printk>
   14748:	4040      	eors	r0, r0
   1474a:	f380 8811 	msr	BASEPRI, r0
   1474e:	f04f 0003 	mov.w	r0, #3
   14752:	df02      	svc	2
   14754:	e6ea      	b.n	1452c <ll_reset+0x6c>
	LL_ASSERT(link);
   14756:	4a24      	ldr	r2, [pc, #144]	; (147e8 <ll_reset+0x328>)
   14758:	4927      	ldr	r1, [pc, #156]	; (147f8 <ll_reset+0x338>)
   1475a:	4825      	ldr	r0, [pc, #148]	; (147f0 <ll_reset+0x330>)
   1475c:	f240 43ec 	movw	r3, #1260	; 0x4ec
   14760:	f00b ff6e 	bl	20640 <printk>
   14764:	4040      	eors	r0, r0
   14766:	f380 8811 	msr	BASEPRI, r0
   1476a:	f04f 0003 	mov.w	r0, #3
   1476e:	df02      	svc	2
   14770:	e735      	b.n	145de <ll_reset+0x11e>
	LL_ASSERT(link);
   14772:	4a1d      	ldr	r2, [pc, #116]	; (147e8 <ll_reset+0x328>)
   14774:	4920      	ldr	r1, [pc, #128]	; (147f8 <ll_reset+0x338>)
   14776:	481e      	ldr	r0, [pc, #120]	; (147f0 <ll_reset+0x330>)
   14778:	f240 43e5 	movw	r3, #1253	; 0x4e5
   1477c:	f00b ff60 	bl	20640 <printk>
   14780:	4040      	eors	r0, r0
   14782:	f380 8811 	msr	BASEPRI, r0
   14786:	f04f 0003 	mov.w	r0, #3
   1478a:	df02      	svc	2
   1478c:	e71b      	b.n	145c6 <ll_reset+0x106>
			mem_release(link, &mem_link_rx.free);
   1478e:	4912      	ldr	r1, [pc, #72]	; (147d8 <ll_reset+0x318>)
   14790:	4650      	mov	r0, sl
   14792:	f7fc f883 	bl	1089c <mem_release>
			break;
   14796:	e755      	b.n	14644 <ll_reset+0x184>
			LL_ASSERT(scan);
   14798:	4a13      	ldr	r2, [pc, #76]	; (147e8 <ll_reset+0x328>)
   1479a:	4918      	ldr	r1, [pc, #96]	; (147fc <ll_reset+0x33c>)
   1479c:	4814      	ldr	r0, [pc, #80]	; (147f0 <ll_reset+0x330>)
   1479e:	f44f 73c7 	mov.w	r3, #398	; 0x18e
   147a2:	f00b ff4d 	bl	20640 <printk>
   147a6:	4040      	eors	r0, r0
   147a8:	f380 8811 	msr	BASEPRI, r0
   147ac:	f04f 0003 	mov.w	r0, #3
   147b0:	df02      	svc	2
   147b2:	e7a7      	b.n	14704 <ll_reset+0x244>
   147b4:	200003d4 	.word	0x200003d4
   147b8:	2000026c 	.word	0x2000026c
   147bc:	20000294 	.word	0x20000294
   147c0:	20000280 	.word	0x20000280
   147c4:	200002b0 	.word	0x200002b0
   147c8:	20000430 	.word	0x20000430
   147cc:	20001d00 	.word	0x20001d00
   147d0:	20001da0 	.word	0x20001da0
   147d4:	20001e24 	.word	0x20001e24
   147d8:	20001dc0 	.word	0x20001dc0
   147dc:	2000294c 	.word	0x2000294c
   147e0:	20002944 	.word	0x20002944
   147e4:	20001dbc 	.word	0x20001dbc
   147e8:	00027140 	.word	0x00027140
   147ec:	0002717c 	.word	0x0002717c
   147f0:	00026ecc 	.word	0x00026ecc
   147f4:	000271b0 	.word	0x000271b0
   147f8:	00027460 	.word	0x00027460
   147fc:	000273d8 	.word	0x000273d8

00014800 <ll_rx_get>:
{
   14800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14804:	b085      	sub	sp, #20
   14806:	e9cd 0100 	strd	r0, r1, [sp]
   1480a:	4c5f      	ldr	r4, [pc, #380]	; (14988 <ll_rx_get+0x188>)
				mem_release(link, &mem_link_rx.free);
   1480c:	4d5f      	ldr	r5, [pc, #380]	; (1498c <ll_rx_get+0x18c>)
   1480e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 14994 <ll_rx_get+0x194>
	*node_rx = NULL;
   14812:	9a00      	ldr	r2, [sp, #0]
   14814:	2300      	movs	r3, #0
   14816:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   14818:	e9d9 0100 	ldrd	r0, r1, [r9]
   1481c:	aa03      	add	r2, sp, #12
   1481e:	f7fc f88f 	bl	10940 <memq_peek>
	if (link) {
   14822:	4607      	mov	r7, r0
   14824:	2800      	cmp	r0, #0
   14826:	f000 80a4 	beq.w	14972 <ll_rx_get+0x172>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1482a:	9b03      	ldr	r3, [sp, #12]
   1482c:	4958      	ldr	r1, [pc, #352]	; (14990 <ll_rx_get+0x190>)
   1482e:	781a      	ldrb	r2, [r3, #0]
   14830:	9801      	ldr	r0, [sp, #4]
   14832:	f7ff fa97 	bl	13d64 <tx_cmplt_get>
		if (!cmplt) {
   14836:	4603      	mov	r3, r0
   14838:	2800      	cmp	r0, #0
   1483a:	f040 8091 	bne.w	14960 <ll_rx_get+0x160>
			f = mfifo_tx_ack.f;
   1483e:	78a2      	ldrb	r2, [r4, #2]
   14840:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   14844:	78e2      	ldrb	r2, [r4, #3]
   14846:	f10d 0109 	add.w	r1, sp, #9
   1484a:	f10d 000a 	add.w	r0, sp, #10
   1484e:	461e      	mov	r6, r3
   14850:	f7ff fa88 	bl	13d64 <tx_cmplt_get>
   14854:	ea46 0200 	orr.w	r2, r6, r0
			} while ((cmplt_prev != 0U) ||
   14858:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
   1485c:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
   1485e:	d1f1      	bne.n	14844 <ll_rx_get+0x44>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
   14860:	9b03      	ldr	r3, [sp, #12]
   14862:	7919      	ldrb	r1, [r3, #4]
   14864:	2903      	cmp	r1, #3
   14866:	d178      	bne.n	1495a <ll_rx_get+0x15a>
				(void)memq_dequeue(memq_ll_rx.tail,
   14868:	494a      	ldr	r1, [pc, #296]	; (14994 <ll_rx_get+0x194>)
   1486a:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1486e:	f7fc f86f 	bl	10950 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   14872:	4949      	ldr	r1, [pc, #292]	; (14998 <ll_rx_get+0x198>)
   14874:	4638      	mov	r0, r7
   14876:	f7fc f811 	bl	1089c <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1487a:	782b      	ldrb	r3, [r5, #0]
   1487c:	2b07      	cmp	r3, #7
   1487e:	d85d      	bhi.n	1493c <ll_rx_get+0x13c>
	mem_link_rx.quota_pdu += delta;
   14880:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   14882:	4946      	ldr	r1, [pc, #280]	; (1499c <ll_rx_get+0x19c>)
   14884:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   14886:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   14888:	f7fc f808 	bl	1089c <mem_release>
	while (mem_link_rx.quota_pdu &&
   1488c:	782b      	ldrb	r3, [r5, #0]
   1488e:	2b00      	cmp	r3, #0
   14890:	d0bf      	beq.n	14812 <ll_rx_get+0x12>
   14892:	4f43      	ldr	r7, [pc, #268]	; (149a0 <ll_rx_get+0x1a0>)
		link = mem_acquire(&mem_link_rx.free);
   14894:	f8df 8100 	ldr.w	r8, [pc, #256]	; 14998 <ll_rx_get+0x198>
   14898:	78fe      	ldrb	r6, [r7, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   1489a:	f8df a100 	ldr.w	sl, [pc, #256]	; 1499c <ll_rx_get+0x19c>
	if (last == count) {
   1489e:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   148a0:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   148a2:	3601      	adds	r6, #1
   148a4:	b2f6      	uxtb	r6, r6
		last = 0U;
   148a6:	42b2      	cmp	r2, r6
   148a8:	bf08      	it	eq
   148aa:	2600      	moveq	r6, #0
	if (last == first) {
   148ac:	429e      	cmp	r6, r3
		link = mem_acquire(&mem_link_rx.free);
   148ae:	4640      	mov	r0, r8
   148b0:	d01f      	beq.n	148f2 <ll_rx_get+0xf2>
   148b2:	f7fb ffd9 	bl	10868 <mem_acquire>
   148b6:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   148b8:	4650      	mov	r0, sl
		if (!link) {
   148ba:	f1bb 0f00 	cmp.w	fp, #0
   148be:	d018      	beq.n	148f2 <ll_rx_get+0xf2>
		rx = mem_acquire(&mem_pdu_rx.free);
   148c0:	f7fb ffd2 	bl	10868 <mem_acquire>
		if (!rx) {
   148c4:	b188      	cbz	r0, 148ea <ll_rx_get+0xea>
		link->mem = NULL;
   148c6:	2300      	movs	r3, #0
   148c8:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   148cc:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   148d0:	78f9      	ldrb	r1, [r7, #3]
   148d2:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   148d4:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   148d6:	fb01 7202 	mla	r2, r1, r2, r7
   148da:	3b01      	subs	r3, #1
   148dc:	b2db      	uxtb	r3, r3
   148de:	6050      	str	r0, [r2, #4]
   148e0:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   148e2:	70fe      	strb	r6, [r7, #3]
	while (mem_link_rx.quota_pdu &&
   148e4:	2b00      	cmp	r3, #0
   148e6:	d1da      	bne.n	1489e <ll_rx_get+0x9e>
   148e8:	e793      	b.n	14812 <ll_rx_get+0x12>
			mem_release(link, &mem_link_rx.free);
   148ea:	492b      	ldr	r1, [pc, #172]	; (14998 <ll_rx_get+0x198>)
   148ec:	4658      	mov	r0, fp
   148ee:	f7fb ffd5 	bl	1089c <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   148f2:	782b      	ldrb	r3, [r5, #0]
   148f4:	2b00      	cmp	r3, #0
   148f6:	d08c      	beq.n	14812 <ll_rx_get+0x12>
   148f8:	4f2a      	ldr	r7, [pc, #168]	; (149a4 <ll_rx_get+0x1a4>)
	last = last + 1;
   148fa:	78fe      	ldrb	r6, [r7, #3]
	if (last == count) {
   148fc:	787a      	ldrb	r2, [r7, #1]
   148fe:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   14900:	3601      	adds	r6, #1
   14902:	b2f6      	uxtb	r6, r6
		last = 0U;
   14904:	42b2      	cmp	r2, r6
   14906:	bf08      	it	eq
   14908:	2600      	moveq	r6, #0
	if (last == first) {
   1490a:	429e      	cmp	r6, r3
   1490c:	d081      	beq.n	14812 <ll_rx_get+0x12>
		link = mem_acquire(&mem_link_rx.free);
   1490e:	4822      	ldr	r0, [pc, #136]	; (14998 <ll_rx_get+0x198>)
   14910:	f7fb ffaa 	bl	10868 <mem_acquire>
		if (!link) {
   14914:	4680      	mov	r8, r0
   14916:	2800      	cmp	r0, #0
   14918:	f43f af7b 	beq.w	14812 <ll_rx_get+0x12>
		rx = mem_acquire(&mem_pdu_rx.free);
   1491c:	481f      	ldr	r0, [pc, #124]	; (1499c <ll_rx_get+0x19c>)
   1491e:	f7fb ffa3 	bl	10868 <mem_acquire>
		if (!rx) {
   14922:	b308      	cbz	r0, 14968 <ll_rx_get+0x168>
		rx->link = link;
   14924:	f8c0 8000 	str.w	r8, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14928:	78f9      	ldrb	r1, [r7, #3]
   1492a:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   1492c:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1492e:	fb01 7202 	mla	r2, r1, r2, r7
   14932:	3b01      	subs	r3, #1
   14934:	6050      	str	r0, [r2, #4]
   14936:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   14938:	70fe      	strb	r6, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1493a:	e76a      	b.n	14812 <ll_rx_get+0x12>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1493c:	4a1a      	ldr	r2, [pc, #104]	; (149a8 <ll_rx_get+0x1a8>)
   1493e:	491b      	ldr	r1, [pc, #108]	; (149ac <ll_rx_get+0x1ac>)
   14940:	481b      	ldr	r0, [pc, #108]	; (149b0 <ll_rx_get+0x1b0>)
   14942:	f240 3393 	movw	r3, #915	; 0x393
   14946:	f00b fe7b 	bl	20640 <printk>
   1494a:	4040      	eors	r0, r0
   1494c:	f380 8811 	msr	BASEPRI, r0
   14950:	f04f 0003 	mov.w	r0, #3
   14954:	df02      	svc	2
   14956:	782b      	ldrb	r3, [r5, #0]
   14958:	e792      	b.n	14880 <ll_rx_get+0x80>
			*node_rx = rx;
   1495a:	9900      	ldr	r1, [sp, #0]
   1495c:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1495e:	4613      	mov	r3, r2
}
   14960:	4618      	mov	r0, r3
   14962:	b005      	add	sp, #20
   14964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   14968:	490b      	ldr	r1, [pc, #44]	; (14998 <ll_rx_get+0x198>)
   1496a:	4640      	mov	r0, r8
   1496c:	f7fb ff96 	bl	1089c <mem_release>
			break;
   14970:	e74f      	b.n	14812 <ll_rx_get+0x12>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   14972:	78e2      	ldrb	r2, [r4, #3]
   14974:	4906      	ldr	r1, [pc, #24]	; (14990 <ll_rx_get+0x190>)
   14976:	9801      	ldr	r0, [sp, #4]
   14978:	f7ff f9f4 	bl	13d64 <tx_cmplt_get>
   1497c:	4603      	mov	r3, r0
}
   1497e:	4618      	mov	r0, r3
   14980:	b005      	add	sp, #20
   14982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14986:	bf00      	nop
   14988:	200003d4 	.word	0x200003d4
   1498c:	20001dbc 	.word	0x20001dbc
   14990:	200003d6 	.word	0x200003d6
   14994:	20002940 	.word	0x20002940
   14998:	20001dc0 	.word	0x20001dc0
   1499c:	20001e24 	.word	0x20001e24
   149a0:	20000280 	.word	0x20000280
   149a4:	20000294 	.word	0x20000294
   149a8:	00027140 	.word	0x00027140
   149ac:	000271b8 	.word	0x000271b8
   149b0:	00026ecc 	.word	0x00026ecc

000149b4 <ll_rx_dequeue>:
{
   149b4:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   149b6:	495a      	ldr	r1, [pc, #360]	; (14b20 <ll_rx_dequeue+0x16c>)
{
   149b8:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   149ba:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   149bc:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   149be:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   149c0:	aa01      	add	r2, sp, #4
   149c2:	f7fb ffc5 	bl	10950 <memq_dequeue>
	LL_ASSERT(link);
   149c6:	4604      	mov	r4, r0
   149c8:	2800      	cmp	r0, #0
   149ca:	d04f      	beq.n	14a6c <ll_rx_dequeue+0xb8>
	mem_release(link, &mem_link_rx.free);
   149cc:	4955      	ldr	r1, [pc, #340]	; (14b24 <ll_rx_dequeue+0x170>)
   149ce:	4620      	mov	r0, r4
   149d0:	f7fb ff64 	bl	1089c <mem_release>
	switch (rx->type) {
   149d4:	9a01      	ldr	r2, [sp, #4]
   149d6:	7913      	ldrb	r3, [r2, #4]
   149d8:	2b0f      	cmp	r3, #15
   149da:	d80d      	bhi.n	149f8 <ll_rx_dequeue+0x44>
   149dc:	e8df f003 	tbb	[pc, r3]
   149e0:	0c080c08 	.word	0x0c080c08
   149e4:	0c0c0c08 	.word	0x0c0c0c08
   149e8:	08081b0c 	.word	0x08081b0c
   149ec:	08080808 	.word	0x08080808
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   149f0:	2b00      	cmp	r3, #0
   149f2:	d049      	beq.n	14a88 <ll_rx_dequeue+0xd4>
}
   149f4:	b002      	add	sp, #8
   149f6:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
   149f8:	4a4b      	ldr	r2, [pc, #300]	; (14b28 <ll_rx_dequeue+0x174>)
   149fa:	494c      	ldr	r1, [pc, #304]	; (14b2c <ll_rx_dequeue+0x178>)
   149fc:	484c      	ldr	r0, [pc, #304]	; (14b30 <ll_rx_dequeue+0x17c>)
   149fe:	f240 23d2 	movw	r3, #722	; 0x2d2
   14a02:	f00b fe1d 	bl	20640 <printk>
   14a06:	4040      	eors	r0, r0
   14a08:	f380 8811 	msr	BASEPRI, r0
   14a0c:	f04f 0003 	mov.w	r0, #3
   14a10:	df02      	svc	2
}
   14a12:	b002      	add	sp, #8
   14a14:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   14a16:	7f13      	ldrb	r3, [r2, #28]
   14a18:	6895      	ldr	r5, [r2, #8]
   14a1a:	2b3c      	cmp	r3, #60	; 0x3c
   14a1c:	682c      	ldr	r4, [r5, #0]
   14a1e:	d042      	beq.n	14aa6 <ll_rx_dequeue+0xf2>
   14a20:	7f53      	ldrb	r3, [r2, #29]
   14a22:	b1e3      	cbz	r3, 14a5e <ll_rx_dequeue+0xaa>
				if (adv->node_rx_cc_free) {
   14a24:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   14a28:	b128      	cbz	r0, 14a36 <ll_rx_dequeue+0x82>
					adv->node_rx_cc_free = NULL;
   14a2a:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   14a2c:	4941      	ldr	r1, [pc, #260]	; (14b34 <ll_rx_dequeue+0x180>)
					adv->node_rx_cc_free = NULL;
   14a2e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
					mem_release(rx_free, &mem_pdu_rx.free);
   14a32:	f7fb ff33 	bl	1089c <mem_release>
			adv->is_enabled = 0U;
   14a36:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   14a3a:	f36f 0300 	bfc	r3, #0, #1
   14a3e:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
			      ull_scan_is_enabled(0) << 1) |
   14a42:	2000      	movs	r0, #0
   14a44:	f001 f98c 	bl	15d60 <ull_scan_is_enabled>
   14a48:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
   14a4a:	2000      	movs	r0, #0
   14a4c:	f000 ff70 	bl	15930 <ull_adv_is_enabled>
			if (!bm) {
   14a50:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
   14a54:	d1ce      	bne.n	149f4 <ll_rx_dequeue+0x40>
				ull_filter_adv_scan_state_cb(0);
   14a56:	f005 f9f9 	bl	19e4c <ull_filter_adv_scan_state_cb>
}
   14a5a:	b002      	add	sp, #8
   14a5c:	bd70      	pop	{r4, r5, r6, pc}
			scan->is_enabled = 0U;
   14a5e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
   14a62:	f363 0200 	bfi	r2, r3, #0, #1
   14a66:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   14a6a:	e7ea      	b.n	14a42 <ll_rx_dequeue+0x8e>
	LL_ASSERT(link);
   14a6c:	4a2e      	ldr	r2, [pc, #184]	; (14b28 <ll_rx_dequeue+0x174>)
   14a6e:	4932      	ldr	r1, [pc, #200]	; (14b38 <ll_rx_dequeue+0x184>)
   14a70:	482f      	ldr	r0, [pc, #188]	; (14b30 <ll_rx_dequeue+0x17c>)
   14a72:	f240 232a 	movw	r3, #554	; 0x22a
   14a76:	f00b fde3 	bl	20640 <printk>
   14a7a:	4040      	eors	r0, r0
   14a7c:	f380 8811 	msr	BASEPRI, r0
   14a80:	f04f 0003 	mov.w	r0, #3
   14a84:	df02      	svc	2
   14a86:	e7a1      	b.n	149cc <ll_rx_dequeue+0x18>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   14a88:	4a27      	ldr	r2, [pc, #156]	; (14b28 <ll_rx_dequeue+0x174>)
   14a8a:	492c      	ldr	r1, [pc, #176]	; (14b3c <ll_rx_dequeue+0x188>)
   14a8c:	4828      	ldr	r0, [pc, #160]	; (14b30 <ll_rx_dequeue+0x17c>)
   14a8e:	f240 23ce 	movw	r3, #718	; 0x2ce
   14a92:	f00b fdd5 	bl	20640 <printk>
   14a96:	4040      	eors	r0, r0
   14a98:	f380 8811 	msr	BASEPRI, r0
   14a9c:	f04f 0003 	mov.w	r0, #3
   14aa0:	df02      	svc	2
}
   14aa2:	b002      	add	sp, #8
   14aa4:	bd70      	pop	{r4, r5, r6, pc}
				conn_lll = lll->conn;
   14aa6:	68ae      	ldr	r6, [r5, #8]
				LL_ASSERT(conn_lll);
   14aa8:	b1ee      	cbz	r6, 14ae6 <ll_rx_dequeue+0x132>
				LL_ASSERT(!conn_lll->link_tx_free);
   14aaa:	6df3      	ldr	r3, [r6, #92]	; 0x5c
				lll->conn = NULL;
   14aac:	2200      	movs	r2, #0
   14aae:	60aa      	str	r2, [r5, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   14ab0:	b163      	cbz	r3, 14acc <ll_rx_dequeue+0x118>
   14ab2:	4a1d      	ldr	r2, [pc, #116]	; (14b28 <ll_rx_dequeue+0x174>)
   14ab4:	4922      	ldr	r1, [pc, #136]	; (14b40 <ll_rx_dequeue+0x18c>)
   14ab6:	481e      	ldr	r0, [pc, #120]	; (14b30 <ll_rx_dequeue+0x17c>)
   14ab8:	f44f 7318 	mov.w	r3, #608	; 0x260
   14abc:	f00b fdc0 	bl	20640 <printk>
   14ac0:	4040      	eors	r0, r0
   14ac2:	f380 8811 	msr	BASEPRI, r0
   14ac6:	f04f 0003 	mov.w	r0, #3
   14aca:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   14acc:	f106 0150 	add.w	r1, r6, #80	; 0x50
   14ad0:	f106 004c 	add.w	r0, r6, #76	; 0x4c
   14ad4:	f7fb ff22 	bl	1091c <memq_deinit>
				LL_ASSERT(link);
   14ad8:	4605      	mov	r5, r0
   14ada:	b190      	cbz	r0, 14b02 <ll_rx_dequeue+0x14e>
				ll_conn_release(conn);
   14adc:	6830      	ldr	r0, [r6, #0]
				conn_lll->link_tx_free = link;
   14ade:	65f5      	str	r5, [r6, #92]	; 0x5c
				ll_conn_release(conn);
   14ae0:	f001 fd60 	bl	165a4 <ll_conn_release>
   14ae4:	e7a7      	b.n	14a36 <ll_rx_dequeue+0x82>
				LL_ASSERT(conn_lll);
   14ae6:	4a10      	ldr	r2, [pc, #64]	; (14b28 <ll_rx_dequeue+0x174>)
   14ae8:	4916      	ldr	r1, [pc, #88]	; (14b44 <ll_rx_dequeue+0x190>)
   14aea:	4811      	ldr	r0, [pc, #68]	; (14b30 <ll_rx_dequeue+0x17c>)
   14aec:	f240 235d 	movw	r3, #605	; 0x25d
   14af0:	f00b fda6 	bl	20640 <printk>
   14af4:	4040      	eors	r0, r0
   14af6:	f380 8811 	msr	BASEPRI, r0
   14afa:	f04f 0003 	mov.w	r0, #3
   14afe:	df02      	svc	2
   14b00:	e7d3      	b.n	14aaa <ll_rx_dequeue+0xf6>
				LL_ASSERT(link);
   14b02:	4a09      	ldr	r2, [pc, #36]	; (14b28 <ll_rx_dequeue+0x174>)
   14b04:	490c      	ldr	r1, [pc, #48]	; (14b38 <ll_rx_dequeue+0x184>)
   14b06:	480a      	ldr	r0, [pc, #40]	; (14b30 <ll_rx_dequeue+0x17c>)
   14b08:	f240 2363 	movw	r3, #611	; 0x263
   14b0c:	f00b fd98 	bl	20640 <printk>
   14b10:	4040      	eors	r0, r0
   14b12:	f380 8811 	msr	BASEPRI, r0
   14b16:	f04f 0003 	mov.w	r0, #3
   14b1a:	df02      	svc	2
   14b1c:	e7de      	b.n	14adc <ll_rx_dequeue+0x128>
   14b1e:	bf00      	nop
   14b20:	20002940 	.word	0x20002940
   14b24:	20001dc0 	.word	0x20001dc0
   14b28:	00027140 	.word	0x00027140
   14b2c:	00026f3c 	.word	0x00026f3c
   14b30:	00026ecc 	.word	0x00026ecc
   14b34:	20001e24 	.word	0x20001e24
   14b38:	00027460 	.word	0x00027460
   14b3c:	00027210 	.word	0x00027210
   14b40:	000271f8 	.word	0x000271f8
   14b44:	000271ec 	.word	0x000271ec

00014b48 <ll_rx_mem_release>:
{
   14b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
   14b4c:	6804      	ldr	r4, [r0, #0]
	while (rx) {
   14b4e:	4dad      	ldr	r5, [pc, #692]	; (14e04 <ll_rx_mem_release+0x2bc>)
{
   14b50:	b083      	sub	sp, #12
   14b52:	4683      	mov	fp, r0
	while (rx) {
   14b54:	2c00      	cmp	r4, #0
   14b56:	d044      	beq.n	14be2 <ll_rx_mem_release+0x9a>
			LL_ASSERT(0);
   14b58:	4fab      	ldr	r7, [pc, #684]	; (14e08 <ll_rx_mem_release+0x2c0>)
   14b5a:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 14e38 <ll_rx_mem_release+0x2f0>
   14b5e:	4eab      	ldr	r6, [pc, #684]	; (14e0c <ll_rx_mem_release+0x2c4>)
		rx = rx->next;
   14b60:	46a0      	mov	r8, r4
   14b62:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   14b64:	f898 3004 	ldrb.w	r3, [r8, #4]
   14b68:	2b0f      	cmp	r3, #15
   14b6a:	d86d      	bhi.n	14c48 <ll_rx_mem_release+0x100>
   14b6c:	e8df f003 	tbb	[pc, r3]
   14b70:	6c206c20 	.word	0x6c206c20
   14b74:	6c6c6c20 	.word	0x6c6c6c20
   14b78:	207d086c 	.word	0x207d086c
   14b7c:	20202020 	.word	0x20202020
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   14b80:	f898 301c 	ldrb.w	r3, [r8, #28]
   14b84:	2b3c      	cmp	r3, #60	; 0x3c
   14b86:	f000 8118 	beq.w	14dba <ll_rx_mem_release+0x272>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   14b8a:	2b02      	cmp	r3, #2
   14b8c:	f000 80d8 	beq.w	14d40 <ll_rx_mem_release+0x1f8>
				LL_ASSERT(!cc->status);
   14b90:	b1e3      	cbz	r3, 14bcc <ll_rx_mem_release+0x84>
   14b92:	499f      	ldr	r1, [pc, #636]	; (14e10 <ll_rx_mem_release+0x2c8>)
   14b94:	f240 332a 	movw	r3, #810	; 0x32a
   14b98:	463a      	mov	r2, r7
   14b9a:	4630      	mov	r0, r6
   14b9c:	f00b fd50 	bl	20640 <printk>
   14ba0:	4040      	eors	r0, r0
   14ba2:	f380 8811 	msr	BASEPRI, r0
   14ba6:	f04f 0003 	mov.w	r0, #3
   14baa:	df02      	svc	2
   14bac:	f898 3004 	ldrb.w	r3, [r8, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   14bb0:	b963      	cbnz	r3, 14bcc <ll_rx_mem_release+0x84>
   14bb2:	4998      	ldr	r1, [pc, #608]	; (14e14 <ll_rx_mem_release+0x2cc>)
   14bb4:	f240 336d 	movw	r3, #877	; 0x36d
   14bb8:	463a      	mov	r2, r7
   14bba:	4630      	mov	r0, r6
   14bbc:	f00b fd40 	bl	20640 <printk>
   14bc0:	4040      	eors	r0, r0
   14bc2:	f380 8811 	msr	BASEPRI, r0
   14bc6:	f04f 0003 	mov.w	r0, #3
   14bca:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   14bcc:	782b      	ldrb	r3, [r5, #0]
   14bce:	2b07      	cmp	r3, #7
   14bd0:	d872      	bhi.n	14cb8 <ll_rx_mem_release+0x170>
	mem_link_rx.quota_pdu += delta;
   14bd2:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   14bd4:	4990      	ldr	r1, [pc, #576]	; (14e18 <ll_rx_mem_release+0x2d0>)
	mem_link_rx.quota_pdu += delta;
   14bd6:	702b      	strb	r3, [r5, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
   14bd8:	4640      	mov	r0, r8
   14bda:	f7fb fe5f 	bl	1089c <mem_release>
	while (rx) {
   14bde:	2c00      	cmp	r4, #0
   14be0:	d1be      	bne.n	14b60 <ll_rx_mem_release+0x18>
	*node_rx = rx;
   14be2:	2700      	movs	r7, #0
   14be4:	f8cb 7000 	str.w	r7, [fp]
	while (mem_link_rx.quota_pdu &&
   14be8:	782b      	ldrb	r3, [r5, #0]
   14bea:	b353      	cbz	r3, 14c42 <ll_rx_mem_release+0xfa>
   14bec:	4e8b      	ldr	r6, [pc, #556]	; (14e1c <ll_rx_mem_release+0x2d4>)
		link = mem_acquire(&mem_link_rx.free);
   14bee:	f8df 8238 	ldr.w	r8, [pc, #568]	; 14e28 <ll_rx_mem_release+0x2e0>
   14bf2:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   14bf4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 14e18 <ll_rx_mem_release+0x2d0>
	if (last == count) {
   14bf8:	7872      	ldrb	r2, [r6, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   14bfa:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   14bfc:	3401      	adds	r4, #1
   14bfe:	b2e4      	uxtb	r4, r4
		last = 0U;
   14c00:	42a2      	cmp	r2, r4
   14c02:	bf08      	it	eq
   14c04:	2400      	moveq	r4, #0
	if (last == first) {
   14c06:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   14c08:	4640      	mov	r0, r8
   14c0a:	d068      	beq.n	14cde <ll_rx_mem_release+0x196>
   14c0c:	f7fb fe2c 	bl	10868 <mem_acquire>
   14c10:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   14c12:	4648      	mov	r0, r9
		if (!link) {
   14c14:	f1ba 0f00 	cmp.w	sl, #0
   14c18:	d061      	beq.n	14cde <ll_rx_mem_release+0x196>
		rx = mem_acquire(&mem_pdu_rx.free);
   14c1a:	f7fb fe25 	bl	10868 <mem_acquire>
		if (!rx) {
   14c1e:	2800      	cmp	r0, #0
   14c20:	d059      	beq.n	14cd6 <ll_rx_mem_release+0x18e>
		link->mem = NULL;
   14c22:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   14c26:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14c2a:	78f1      	ldrb	r1, [r6, #3]
   14c2c:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   14c2e:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   14c30:	fb01 6202 	mla	r2, r1, r2, r6
   14c34:	3b01      	subs	r3, #1
   14c36:	b2db      	uxtb	r3, r3
   14c38:	6050      	str	r0, [r2, #4]
   14c3a:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   14c3c:	70f4      	strb	r4, [r6, #3]
	while (mem_link_rx.quota_pdu &&
   14c3e:	2b00      	cmp	r3, #0
   14c40:	d1da      	bne.n	14bf8 <ll_rx_mem_release+0xb0>
}
   14c42:	b003      	add	sp, #12
   14c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(0);
   14c48:	f240 3387 	movw	r3, #903	; 0x387
   14c4c:	463a      	mov	r2, r7
   14c4e:	4649      	mov	r1, r9
   14c50:	4630      	mov	r0, r6
   14c52:	f00b fcf5 	bl	20640 <printk>
   14c56:	4040      	eors	r0, r0
   14c58:	f380 8811 	msr	BASEPRI, r0
   14c5c:	f04f 0003 	mov.w	r0, #3
   14c60:	df02      	svc	2
	while (rx) {
   14c62:	2c00      	cmp	r4, #0
   14c64:	f47f af7c 	bne.w	14b60 <ll_rx_mem_release+0x18>
   14c68:	e7bb      	b.n	14be2 <ll_rx_mem_release+0x9a>
			conn = ll_conn_get(rx_free->handle);
   14c6a:	f8b8 0006 	ldrh.w	r0, [r8, #6]
   14c6e:	f001 fca7 	bl	165c0 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   14c72:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
   14c74:	4680      	mov	r8, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   14c76:	b163      	cbz	r3, 14c92 <ll_rx_mem_release+0x14a>
   14c78:	4969      	ldr	r1, [pc, #420]	; (14e20 <ll_rx_mem_release+0x2d8>)
   14c7a:	f240 337a 	movw	r3, #890	; 0x37a
   14c7e:	463a      	mov	r2, r7
   14c80:	4630      	mov	r0, r6
   14c82:	f00b fcdd 	bl	20640 <printk>
   14c86:	4040      	eors	r0, r0
   14c88:	f380 8811 	msr	BASEPRI, r0
   14c8c:	f04f 0003 	mov.w	r0, #3
   14c90:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   14c92:	f108 016c 	add.w	r1, r8, #108	; 0x6c
   14c96:	f108 0068 	add.w	r0, r8, #104	; 0x68
   14c9a:	f7fb fe3f 	bl	1091c <memq_deinit>
			LL_ASSERT(link);
   14c9e:	4682      	mov	sl, r0
   14ca0:	2800      	cmp	r0, #0
   14ca2:	f000 8092 	beq.w	14dca <ll_rx_mem_release+0x282>
			conn->lll.link_tx_free = link;
   14ca6:	f8c8 a078 	str.w	sl, [r8, #120]	; 0x78
			ll_conn_release(conn);
   14caa:	4640      	mov	r0, r8
   14cac:	f001 fc7a 	bl	165a4 <ll_conn_release>
	while (rx) {
   14cb0:	2c00      	cmp	r4, #0
   14cb2:	f47f af55 	bne.w	14b60 <ll_rx_mem_release+0x18>
   14cb6:	e794      	b.n	14be2 <ll_rx_mem_release+0x9a>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   14cb8:	495a      	ldr	r1, [pc, #360]	; (14e24 <ll_rx_mem_release+0x2dc>)
   14cba:	f240 3393 	movw	r3, #915	; 0x393
   14cbe:	463a      	mov	r2, r7
   14cc0:	4630      	mov	r0, r6
   14cc2:	f00b fcbd 	bl	20640 <printk>
   14cc6:	4040      	eors	r0, r0
   14cc8:	f380 8811 	msr	BASEPRI, r0
   14ccc:	f04f 0003 	mov.w	r0, #3
   14cd0:	df02      	svc	2
   14cd2:	782b      	ldrb	r3, [r5, #0]
   14cd4:	e77d      	b.n	14bd2 <ll_rx_mem_release+0x8a>
			mem_release(link, &mem_link_rx.free);
   14cd6:	4954      	ldr	r1, [pc, #336]	; (14e28 <ll_rx_mem_release+0x2e0>)
   14cd8:	4650      	mov	r0, sl
   14cda:	f7fb fddf 	bl	1089c <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   14cde:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14ce0:	1e5f      	subs	r7, r3, #1
   14ce2:	b2ff      	uxtb	r7, r7
   14ce4:	2b00      	cmp	r3, #0
   14ce6:	d0ac      	beq.n	14c42 <ll_rx_mem_release+0xfa>
   14ce8:	4e50      	ldr	r6, [pc, #320]	; (14e2c <ll_rx_mem_release+0x2e4>)
		link = mem_acquire(&mem_link_rx.free);
   14cea:	f8df 813c 	ldr.w	r8, [pc, #316]	; 14e28 <ll_rx_mem_release+0x2e0>
   14cee:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   14cf0:	f8df 9124 	ldr.w	r9, [pc, #292]	; 14e18 <ll_rx_mem_release+0x2d0>
	if (last == count) {
   14cf4:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14cf6:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   14cf8:	3401      	adds	r4, #1
   14cfa:	b2e4      	uxtb	r4, r4
		last = 0U;
   14cfc:	42a2      	cmp	r2, r4
   14cfe:	bf08      	it	eq
   14d00:	2400      	moveq	r4, #0
	if (last == first) {
   14d02:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   14d04:	4640      	mov	r0, r8
   14d06:	d09c      	beq.n	14c42 <ll_rx_mem_release+0xfa>
   14d08:	f7fb fdae 	bl	10868 <mem_acquire>
   14d0c:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   14d0e:	4648      	mov	r0, r9
		if (!link) {
   14d10:	f1ba 0f00 	cmp.w	sl, #0
   14d14:	d095      	beq.n	14c42 <ll_rx_mem_release+0xfa>
		rx = mem_acquire(&mem_pdu_rx.free);
   14d16:	f7fb fda7 	bl	10868 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14d1a:	3f01      	subs	r7, #1
   14d1c:	b2ff      	uxtb	r7, r7
		if (!rx) {
   14d1e:	2800      	cmp	r0, #0
   14d20:	f000 809a 	beq.w	14e58 <ll_rx_mem_release+0x310>
		rx->link = link;
   14d24:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14d28:	78f1      	ldrb	r1, [r6, #3]
   14d2a:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   14d2c:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   14d2e:	fb01 6202 	mla	r2, r1, r2, r6
   14d32:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14d34:	2fff      	cmp	r7, #255	; 0xff
   14d36:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   14d38:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   14d3a:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14d3c:	d1da      	bne.n	14cf4 <ll_rx_mem_release+0x1ac>
   14d3e:	e780      	b.n	14c42 <ll_rx_mem_release+0xfa>
				struct ll_scan_set *scan =
   14d40:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14d44:	f8d3 a000 	ldr.w	sl, [r3]
				conn_lll = scan->lll.conn;
   14d48:	f8da 8024 	ldr.w	r8, [sl, #36]	; 0x24
				LL_ASSERT(conn_lll);
   14d4c:	f1b8 0f00 	cmp.w	r8, #0
   14d50:	d074      	beq.n	14e3c <ll_rx_mem_release+0x2f4>
				LL_ASSERT(!conn_lll->link_tx_free);
   14d52:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
				scan->lll.conn = NULL;
   14d56:	2200      	movs	r2, #0
   14d58:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
				LL_ASSERT(!conn_lll->link_tx_free);
   14d5c:	b163      	cbz	r3, 14d78 <ll_rx_mem_release+0x230>
   14d5e:	4934      	ldr	r1, [pc, #208]	; (14e30 <ll_rx_mem_release+0x2e8>)
   14d60:	f240 3313 	movw	r3, #787	; 0x313
   14d64:	463a      	mov	r2, r7
   14d66:	4630      	mov	r0, r6
   14d68:	f00b fc6a 	bl	20640 <printk>
   14d6c:	4040      	eors	r0, r0
   14d6e:	f380 8811 	msr	BASEPRI, r0
   14d72:	f04f 0003 	mov.w	r0, #3
   14d76:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   14d78:	f108 0150 	add.w	r1, r8, #80	; 0x50
   14d7c:	f108 004c 	add.w	r0, r8, #76	; 0x4c
   14d80:	f7fb fdcc 	bl	1091c <memq_deinit>
				LL_ASSERT(link);
   14d84:	9001      	str	r0, [sp, #4]
   14d86:	b370      	cbz	r0, 14de6 <ll_rx_mem_release+0x29e>
				conn_lll->link_tx_free = link;
   14d88:	9b01      	ldr	r3, [sp, #4]
				ll_conn_release(conn);
   14d8a:	f8d8 0000 	ldr.w	r0, [r8]
				conn_lll->link_tx_free = link;
   14d8e:	f8c8 305c 	str.w	r3, [r8, #92]	; 0x5c
				ll_conn_release(conn);
   14d92:	f001 fc07 	bl	165a4 <ll_conn_release>
				scan->is_enabled = 0U;
   14d96:	f89a 3048 	ldrb.w	r3, [sl, #72]	; 0x48
   14d9a:	f36f 0300 	bfc	r3, #0, #1
   14d9e:	f88a 3048 	strb.w	r3, [sl, #72]	; 0x48
				if (!ull_adv_is_enabled_get(0))
   14da2:	2000      	movs	r0, #0
   14da4:	f000 fdb6 	bl	15914 <ull_adv_is_enabled_get>
   14da8:	2800      	cmp	r0, #0
   14daa:	f47f af18 	bne.w	14bde <ll_rx_mem_release+0x96>
					ull_filter_adv_scan_state_cb(0);
   14dae:	f005 f84d 	bl	19e4c <ull_filter_adv_scan_state_cb>
	while (rx) {
   14db2:	2c00      	cmp	r4, #0
   14db4:	f47f aed4 	bne.w	14b60 <ll_rx_mem_release+0x18>
   14db8:	e713      	b.n	14be2 <ll_rx_mem_release+0x9a>
				mem_release(rx_free, &mem_pdu_rx.free);
   14dba:	4917      	ldr	r1, [pc, #92]	; (14e18 <ll_rx_mem_release+0x2d0>)
   14dbc:	4640      	mov	r0, r8
   14dbe:	f7fb fd6d 	bl	1089c <mem_release>
	while (rx) {
   14dc2:	2c00      	cmp	r4, #0
   14dc4:	f47f aecc 	bne.w	14b60 <ll_rx_mem_release+0x18>
   14dc8:	e70b      	b.n	14be2 <ll_rx_mem_release+0x9a>
			LL_ASSERT(link);
   14dca:	491a      	ldr	r1, [pc, #104]	; (14e34 <ll_rx_mem_release+0x2ec>)
   14dcc:	f240 337d 	movw	r3, #893	; 0x37d
   14dd0:	463a      	mov	r2, r7
   14dd2:	4630      	mov	r0, r6
   14dd4:	f00b fc34 	bl	20640 <printk>
   14dd8:	4040      	eors	r0, r0
   14dda:	f380 8811 	msr	BASEPRI, r0
   14dde:	f04f 0003 	mov.w	r0, #3
   14de2:	df02      	svc	2
   14de4:	e75f      	b.n	14ca6 <ll_rx_mem_release+0x15e>
				LL_ASSERT(link);
   14de6:	4913      	ldr	r1, [pc, #76]	; (14e34 <ll_rx_mem_release+0x2ec>)
   14de8:	f240 3316 	movw	r3, #790	; 0x316
   14dec:	463a      	mov	r2, r7
   14dee:	4630      	mov	r0, r6
   14df0:	f00b fc26 	bl	20640 <printk>
   14df4:	4040      	eors	r0, r0
   14df6:	f380 8811 	msr	BASEPRI, r0
   14dfa:	f04f 0003 	mov.w	r0, #3
   14dfe:	df02      	svc	2
   14e00:	e7c2      	b.n	14d88 <ll_rx_mem_release+0x240>
   14e02:	bf00      	nop
   14e04:	20001dbc 	.word	0x20001dbc
   14e08:	00027140 	.word	0x00027140
   14e0c:	00026ecc 	.word	0x00026ecc
   14e10:	00027230 	.word	0x00027230
   14e14:	0002723c 	.word	0x0002723c
   14e18:	20001e24 	.word	0x20001e24
   14e1c:	20000280 	.word	0x20000280
   14e20:	00027260 	.word	0x00027260
   14e24:	000271b8 	.word	0x000271b8
   14e28:	20001dc0 	.word	0x20001dc0
   14e2c:	20000294 	.word	0x20000294
   14e30:	000271f8 	.word	0x000271f8
   14e34:	00027460 	.word	0x00027460
   14e38:	00026f3c 	.word	0x00026f3c
				LL_ASSERT(conn_lll);
   14e3c:	490a      	ldr	r1, [pc, #40]	; (14e68 <ll_rx_mem_release+0x320>)
   14e3e:	f44f 7344 	mov.w	r3, #784	; 0x310
   14e42:	463a      	mov	r2, r7
   14e44:	4630      	mov	r0, r6
   14e46:	f00b fbfb 	bl	20640 <printk>
   14e4a:	4040      	eors	r0, r0
   14e4c:	f380 8811 	msr	BASEPRI, r0
   14e50:	f04f 0003 	mov.w	r0, #3
   14e54:	df02      	svc	2
   14e56:	e77c      	b.n	14d52 <ll_rx_mem_release+0x20a>
			mem_release(link, &mem_link_rx.free);
   14e58:	4904      	ldr	r1, [pc, #16]	; (14e6c <ll_rx_mem_release+0x324>)
   14e5a:	4650      	mov	r0, sl
}
   14e5c:	b003      	add	sp, #12
   14e5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   14e62:	f7fb bd1b 	b.w	1089c <mem_release>
   14e66:	bf00      	nop
   14e68:	000271ec 	.word	0x000271ec
   14e6c:	20001dc0 	.word	0x20001dc0

00014e70 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   14e70:	4801      	ldr	r0, [pc, #4]	; (14e78 <ll_rx_link_alloc+0x8>)
   14e72:	f7fb bcf9 	b.w	10868 <mem_acquire>
   14e76:	bf00      	nop
   14e78:	20001dc0 	.word	0x20001dc0

00014e7c <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   14e7c:	4901      	ldr	r1, [pc, #4]	; (14e84 <ll_rx_link_release+0x8>)
   14e7e:	f7fb bd0d 	b.w	1089c <mem_release>
   14e82:	bf00      	nop
   14e84:	20001dc0 	.word	0x20001dc0

00014e88 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   14e88:	4801      	ldr	r0, [pc, #4]	; (14e90 <ll_rx_alloc+0x8>)
   14e8a:	f7fb bced 	b.w	10868 <mem_acquire>
   14e8e:	bf00      	nop
   14e90:	20001e24 	.word	0x20001e24

00014e94 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   14e94:	4901      	ldr	r1, [pc, #4]	; (14e9c <ll_rx_release+0x8>)
   14e96:	f7fb bd01 	b.w	1089c <mem_release>
   14e9a:	bf00      	nop
   14e9c:	20001e24 	.word	0x20001e24

00014ea0 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   14ea0:	4b02      	ldr	r3, [pc, #8]	; (14eac <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   14ea2:	4a03      	ldr	r2, [pc, #12]	; (14eb0 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   14ea4:	78db      	ldrb	r3, [r3, #3]
   14ea6:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   14ea8:	f7fb bd42 	b.w	10930 <memq_enqueue>
   14eac:	200003d4 	.word	0x200003d4
   14eb0:	20002944 	.word	0x20002944

00014eb4 <ll_rx_sched>:
	k_sem_give(sem_recv);
   14eb4:	4b01      	ldr	r3, [pc, #4]	; (14ebc <ll_rx_sched+0x8>)
   14eb6:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   14eb8:	f00a bed0 	b.w	1fc5c <z_impl_k_sem_give>
   14ebc:	20002950 	.word	0x20002950

00014ec0 <ll_pdu_rx_alloc_peek>:
{
   14ec0:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   14ec2:	4b0d      	ldr	r3, [pc, #52]	; (14ef8 <ll_pdu_rx_alloc_peek+0x38>)
   14ec4:	789a      	ldrb	r2, [r3, #2]
   14ec6:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   14ec8:	42a2      	cmp	r2, r4
   14eca:	d809      	bhi.n	14ee0 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   14ecc:	1aa1      	subs	r1, r4, r2
   14ece:	b2c9      	uxtb	r1, r1
   14ed0:	4288      	cmp	r0, r1
   14ed2:	d802      	bhi.n	14eda <ll_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   14ed4:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   14ed6:	7819      	ldrb	r1, [r3, #0]
   14ed8:	d109      	bne.n	14eee <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   14eda:	2000      	movs	r0, #0
}
   14edc:	bc10      	pop	{r4}
   14ede:	4770      	bx	lr
		return count - first + last;
   14ee0:	7859      	ldrb	r1, [r3, #1]
   14ee2:	1a89      	subs	r1, r1, r2
   14ee4:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   14ee6:	b2c9      	uxtb	r1, r1
   14ee8:	4288      	cmp	r0, r1
   14eea:	d8f6      	bhi.n	14eda <ll_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   14eec:	7819      	ldrb	r1, [r3, #0]
}
   14eee:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   14ef0:	fb02 3301 	mla	r3, r2, r1, r3
   14ef4:	6858      	ldr	r0, [r3, #4]
   14ef6:	4770      	bx	lr
   14ef8:	20000280 	.word	0x20000280

00014efc <ll_pdu_rx_alloc>:
{
   14efc:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   14efe:	4b0a      	ldr	r3, [pc, #40]	; (14f28 <ll_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   14f00:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   14f02:	78da      	ldrb	r2, [r3, #3]
   14f04:	7818      	ldrb	r0, [r3, #0]
   14f06:	785c      	ldrb	r4, [r3, #1]
   14f08:	428a      	cmp	r2, r1
   14f0a:	d00a      	beq.n	14f22 <ll_pdu_rx_alloc+0x26>
	_first += 1U;
   14f0c:	1c4a      	adds	r2, r1, #1
   14f0e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   14f10:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   14f14:	4294      	cmp	r4, r2
   14f16:	bf08      	it	eq
   14f18:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   14f1a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   14f1c:	709a      	strb	r2, [r3, #2]
}
   14f1e:	bc10      	pop	{r4}
   14f20:	4770      	bx	lr
		return NULL;
   14f22:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   14f24:	e7fb      	b.n	14f1e <ll_pdu_rx_alloc+0x22>
   14f26:	bf00      	nop
   14f28:	20000280 	.word	0x20000280

00014f2c <ll_tx_ack_put>:
{
   14f2c:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   14f2e:	4a13      	ldr	r2, [pc, #76]	; (14f7c <ll_tx_ack_put+0x50>)
   14f30:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   14f32:	7855      	ldrb	r5, [r2, #1]
   14f34:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   14f36:	1c73      	adds	r3, r6, #1
   14f38:	b2db      	uxtb	r3, r3
		last = 0U;
   14f3a:	429d      	cmp	r5, r3
   14f3c:	bf08      	it	eq
   14f3e:	2300      	moveq	r3, #0
	if (last == first) {
   14f40:	429c      	cmp	r4, r3
   14f42:	d00a      	beq.n	14f5a <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14f44:	4615      	mov	r5, r2
   14f46:	f815 4b04 	ldrb.w	r4, [r5], #4
   14f4a:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   14f4e:	192e      	adds	r6, r5, r4
   14f50:	d003      	beq.n	14f5a <ll_tx_ack_put+0x2e>
	tx->handle = handle;
   14f52:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   14f54:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
   14f56:	6071      	str	r1, [r6, #4]
}
   14f58:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
   14f5a:	4a09      	ldr	r2, [pc, #36]	; (14f80 <ll_tx_ack_put+0x54>)
   14f5c:	4909      	ldr	r1, [pc, #36]	; (14f84 <ll_tx_ack_put+0x58>)
   14f5e:	480a      	ldr	r0, [pc, #40]	; (14f88 <ll_tx_ack_put+0x5c>)
   14f60:	f240 33dd 	movw	r3, #989	; 0x3dd
   14f64:	f00b fb6c 	bl	20640 <printk>
   14f68:	4040      	eors	r0, r0
   14f6a:	f380 8811 	msr	BASEPRI, r0
   14f6e:	f04f 0003 	mov.w	r0, #3
   14f72:	df02      	svc	2
	tx->handle = handle;
   14f74:	2300      	movs	r3, #0
   14f76:	801b      	strh	r3, [r3, #0]
   14f78:	deff      	udf	#255	; 0xff
   14f7a:	bf00      	nop
   14f7c:	200003d4 	.word	0x200003d4
   14f80:	00027140 	.word	0x00027140
   14f84:	00027454 	.word	0x00027454
   14f88:	00026ecc 	.word	0x00026ecc

00014f8c <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   14f8c:	6008      	str	r0, [r1, #0]
   14f8e:	4801      	ldr	r0, [pc, #4]	; (14f94 <ull_ticker_status_give+0x8>)
   14f90:	f00a be64 	b.w	1fc5c <z_impl_k_sem_give>
   14f94:	20002954 	.word	0x20002954

00014f98 <ull_ticker_status_take>:
{
   14f98:	b510      	push	{r4, lr}
   14f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14f9e:	460c      	mov	r4, r1
   14fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return z_impl_k_sem_take(sem, timeout);
   14fa4:	4802      	ldr	r0, [pc, #8]	; (14fb0 <ull_ticker_status_take+0x18>)
   14fa6:	f00a fe7f 	bl	1fca8 <z_impl_k_sem_take>
	return *ret_cb;
   14faa:	6820      	ldr	r0, [r4, #0]
}
   14fac:	bd10      	pop	{r4, pc}
   14fae:	bf00      	nop
   14fb0:	20002954 	.word	0x20002954

00014fb4 <ull_disable_mark>:
	if (!*m) {
   14fb4:	4a04      	ldr	r2, [pc, #16]	; (14fc8 <ull_disable_mark+0x14>)
   14fb6:	6813      	ldr	r3, [r2, #0]
   14fb8:	b10b      	cbz	r3, 14fbe <ull_disable_mark+0xa>
}
   14fba:	4618      	mov	r0, r3
   14fbc:	4770      	bx	lr
		*m = param;
   14fbe:	4603      	mov	r3, r0
   14fc0:	6010      	str	r0, [r2, #0]
}
   14fc2:	4618      	mov	r0, r3
   14fc4:	4770      	bx	lr
   14fc6:	bf00      	nop
   14fc8:	20001cf8 	.word	0x20001cf8

00014fcc <ull_disable_unmark>:
	if (*m && *m == param) {
   14fcc:	4a04      	ldr	r2, [pc, #16]	; (14fe0 <ull_disable_unmark+0x14>)
   14fce:	6813      	ldr	r3, [r2, #0]
   14fd0:	b123      	cbz	r3, 14fdc <ull_disable_unmark+0x10>
   14fd2:	4298      	cmp	r0, r3
		*m = NULL;
   14fd4:	bf06      	itte	eq
   14fd6:	2100      	moveq	r1, #0
   14fd8:	6011      	streq	r1, [r2, #0]
	return NULL;
   14fda:	2300      	movne	r3, #0
}
   14fdc:	4618      	mov	r0, r3
   14fde:	4770      	bx	lr
   14fe0:	20001cf8 	.word	0x20001cf8

00014fe4 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   14fe4:	4b01      	ldr	r3, [pc, #4]	; (14fec <ull_disable_mark_get+0x8>)
}
   14fe6:	6818      	ldr	r0, [r3, #0]
   14fe8:	4770      	bx	lr
   14fea:	bf00      	nop
   14fec:	20001cf8 	.word	0x20001cf8

00014ff0 <ull_update_mark>:
	if (!*m) {
   14ff0:	4a04      	ldr	r2, [pc, #16]	; (15004 <ull_update_mark+0x14>)
   14ff2:	6813      	ldr	r3, [r2, #0]
   14ff4:	b10b      	cbz	r3, 14ffa <ull_update_mark+0xa>
}
   14ff6:	4618      	mov	r0, r3
   14ff8:	4770      	bx	lr
		*m = param;
   14ffa:	4603      	mov	r3, r0
   14ffc:	6010      	str	r0, [r2, #0]
}
   14ffe:	4618      	mov	r0, r3
   15000:	4770      	bx	lr
   15002:	bf00      	nop
   15004:	20001cfc 	.word	0x20001cfc

00015008 <ull_update_unmark>:
	if (*m && *m == param) {
   15008:	4a04      	ldr	r2, [pc, #16]	; (1501c <ull_update_unmark+0x14>)
   1500a:	6813      	ldr	r3, [r2, #0]
   1500c:	b123      	cbz	r3, 15018 <ull_update_unmark+0x10>
   1500e:	4298      	cmp	r0, r3
		*m = NULL;
   15010:	bf06      	itte	eq
   15012:	2100      	moveq	r1, #0
   15014:	6011      	streq	r1, [r2, #0]
	return NULL;
   15016:	2300      	movne	r3, #0
}
   15018:	4618      	mov	r0, r3
   1501a:	4770      	bx	lr
   1501c:	20001cfc 	.word	0x20001cfc

00015020 <ull_update_mark_get>:
	return mark_get(mark_update);
   15020:	4b01      	ldr	r3, [pc, #4]	; (15028 <ull_update_mark_get+0x8>)
}
   15022:	6818      	ldr	r0, [r3, #0]
   15024:	4770      	bx	lr
   15026:	bf00      	nop
   15028:	20001cfc 	.word	0x20001cfc

0001502c <ull_disable>:
{
   1502c:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   1502e:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   15030:	f115 0f10 	cmn.w	r5, #16
{
   15034:	b087      	sub	sp, #28
	if (!hdr) {
   15036:	d00b      	beq.n	15050 <ull_disable+0x24>
	compiler_barrier();
   15038:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   1503a:	2201      	movs	r2, #1
   1503c:	4668      	mov	r0, sp
   1503e:	2100      	movs	r1, #0
   15040:	f010 ff01 	bl	25e46 <z_impl_k_sem_init>
	if (!hdr->ref) {
   15044:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   15046:	4a13      	ldr	r2, [pc, #76]	; (15094 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   15048:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   1504c:	616a      	str	r2, [r5, #20]
	if (!hdr->ref) {
   1504e:	b913      	cbnz	r3, 15056 <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   15050:	2000      	movs	r0, #0
}
   15052:	b007      	add	sp, #28
   15054:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   15056:	4b10      	ldr	r3, [pc, #64]	; (15098 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   15058:	2200      	movs	r2, #0
   1505a:	4611      	mov	r1, r2
   1505c:	2003      	movs	r0, #3
	mfy.param = lll;
   1505e:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   15060:	f7fb fcda 	bl	10a18 <mayfly_enqueue>
	LL_ASSERT(!ret);
   15064:	b940      	cbnz	r0, 15078 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   15066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1506a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1506e:	4668      	mov	r0, sp
   15070:	f00a fe1a 	bl	1fca8 <z_impl_k_sem_take>
}
   15074:	b007      	add	sp, #28
   15076:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   15078:	4a08      	ldr	r2, [pc, #32]	; (1509c <ull_disable+0x70>)
   1507a:	4909      	ldr	r1, [pc, #36]	; (150a0 <ull_disable+0x74>)
   1507c:	4809      	ldr	r0, [pc, #36]	; (150a4 <ull_disable+0x78>)
   1507e:	f44f 6389 	mov.w	r3, #1096	; 0x448
   15082:	f00b fadd 	bl	20640 <printk>
   15086:	4040      	eors	r0, r0
   15088:	f380 8811 	msr	BASEPRI, r0
   1508c:	f04f 0003 	mov.w	r0, #3
   15090:	df02      	svc	2
   15092:	e7e8      	b.n	15066 <ull_disable+0x3a>
   15094:	00013d61 	.word	0x00013d61
   15098:	20000440 	.word	0x20000440
   1509c:	00027140 	.word	0x00027140
   150a0:	00027188 	.word	0x00027188
   150a4:	00026ecc 	.word	0x00026ecc

000150a8 <ull_pdu_rx_alloc_peek>:
{
   150a8:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   150aa:	4b0d      	ldr	r3, [pc, #52]	; (150e0 <ull_pdu_rx_alloc_peek+0x38>)
   150ac:	789a      	ldrb	r2, [r3, #2]
   150ae:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   150b0:	42a2      	cmp	r2, r4
   150b2:	d809      	bhi.n	150c8 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   150b4:	1aa1      	subs	r1, r4, r2
   150b6:	b2c9      	uxtb	r1, r1
   150b8:	4288      	cmp	r0, r1
   150ba:	d802      	bhi.n	150c2 <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   150bc:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   150be:	7819      	ldrb	r1, [r3, #0]
   150c0:	d109      	bne.n	150d6 <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   150c2:	2000      	movs	r0, #0
}
   150c4:	bc10      	pop	{r4}
   150c6:	4770      	bx	lr
		return count - first + last;
   150c8:	7859      	ldrb	r1, [r3, #1]
   150ca:	1a89      	subs	r1, r1, r2
   150cc:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   150ce:	b2c9      	uxtb	r1, r1
   150d0:	4288      	cmp	r0, r1
   150d2:	d8f6      	bhi.n	150c2 <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   150d4:	7819      	ldrb	r1, [r3, #0]
}
   150d6:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   150d8:	fb02 3301 	mla	r3, r2, r1, r3
   150dc:	6858      	ldr	r0, [r3, #4]
   150de:	4770      	bx	lr
   150e0:	20000294 	.word	0x20000294

000150e4 <ull_pdu_rx_alloc>:
{
   150e4:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
   150e6:	4b0a      	ldr	r3, [pc, #40]	; (15110 <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   150e8:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   150ea:	78da      	ldrb	r2, [r3, #3]
   150ec:	7818      	ldrb	r0, [r3, #0]
   150ee:	785c      	ldrb	r4, [r3, #1]
   150f0:	428a      	cmp	r2, r1
   150f2:	d00a      	beq.n	1510a <ull_pdu_rx_alloc+0x26>
	_first += 1U;
   150f4:	1c4a      	adds	r2, r1, #1
   150f6:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   150f8:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   150fc:	4294      	cmp	r4, r2
   150fe:	bf08      	it	eq
   15100:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   15102:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   15104:	709a      	strb	r2, [r3, #2]
}
   15106:	bc10      	pop	{r4}
   15108:	4770      	bx	lr
		return NULL;
   1510a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   1510c:	e7fb      	b.n	15106 <ull_pdu_rx_alloc+0x22>
   1510e:	bf00      	nop
   15110:	20000294 	.word	0x20000294

00015114 <ull_rx_put>:
{
   15114:	b538      	push	{r3, r4, r5, lr}
   15116:	460c      	mov	r4, r1
   15118:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1511a:	f003 fd01 	bl	18b20 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1511e:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   15120:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   15122:	4a03      	ldr	r2, [pc, #12]	; (15130 <ull_rx_put+0x1c>)
   15124:	4628      	mov	r0, r5
}
   15126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1512a:	f7fb bc01 	b.w	10930 <memq_enqueue>
   1512e:	bf00      	nop
   15130:	2000294c 	.word	0x2000294c

00015134 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   15134:	2201      	movs	r2, #1
   15136:	4b02      	ldr	r3, [pc, #8]	; (15140 <ull_rx_sched+0xc>)
   15138:	4611      	mov	r1, r2
   1513a:	2000      	movs	r0, #0
   1513c:	f7fb bc6c 	b.w	10a18 <mayfly_enqueue>
   15140:	20000450 	.word	0x20000450

00015144 <ull_prepare_enqueue>:
{
   15144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   15148:	4e19      	ldr	r6, [pc, #100]	; (151b0 <ull_prepare_enqueue+0x6c>)
{
   1514a:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1514e:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   15150:	7877      	ldrb	r7, [r6, #1]
   15152:	f896 c002 	ldrb.w	ip, [r6, #2]
	last = last + 1;
   15156:	1c65      	adds	r5, r4, #1
   15158:	b2ed      	uxtb	r5, r5
		last = 0U;
   1515a:	42af      	cmp	r7, r5
   1515c:	bf08      	it	eq
   1515e:	2500      	moveq	r5, #0
	if (last == first) {
   15160:	45ac      	cmp	ip, r5
   15162:	d021      	beq.n	151a8 <ull_prepare_enqueue+0x64>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   15164:	4699      	mov	r9, r3
   15166:	4633      	mov	r3, r6
   15168:	460f      	mov	r7, r1
   1516a:	4611      	mov	r1, r2
   1516c:	f813 2b04 	ldrb.w	r2, [r3], #4
   15170:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
   15174:	b1c4      	cbz	r4, 151a8 <ull_prepare_enqueue+0x64>
   15176:	4680      	mov	r8, r0
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   15178:	2210      	movs	r2, #16
   1517a:	4620      	mov	r0, r4
   1517c:	f00d fad0 	bl	22720 <memcpy>
	e->is_resume = is_resume;
   15180:	f894 2020 	ldrb.w	r2, [r4, #32]
	e->prepare_cb = prepare_cb;
   15184:	f8c4 9010 	str.w	r9, [r4, #16]
	e->is_resume = is_resume;
   15188:	f00a 0a01 	and.w	sl, sl, #1
   1518c:	f022 0303 	bic.w	r3, r2, #3
   15190:	ea43 030a 	orr.w	r3, r3, sl
	e->prio = prio;
   15194:	9a08      	ldr	r2, [sp, #32]
   15196:	61e2      	str	r2, [r4, #28]
	e->abort_cb = abort_cb;
   15198:	e9c4 8705 	strd	r8, r7, [r4, #20]
	*last = idx; /* Commit: Update write index */
   1519c:	70f5      	strb	r5, [r6, #3]
	e->is_resume = is_resume;
   1519e:	f884 3020 	strb.w	r3, [r4, #32]
	return 0;
   151a2:	2000      	movs	r0, #0
}
   151a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
   151a8:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   151ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   151b0:	200002b0 	.word	0x200002b0

000151b4 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   151b4:	4b05      	ldr	r3, [pc, #20]	; (151cc <ull_prepare_dequeue_get+0x18>)
   151b6:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   151b8:	78d9      	ldrb	r1, [r3, #3]
   151ba:	7818      	ldrb	r0, [r3, #0]
   151bc:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   151be:	bf1a      	itte	ne
   151c0:	3304      	addne	r3, #4
   151c2:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   151c6:	2000      	moveq	r0, #0
}
   151c8:	4770      	bx	lr
   151ca:	bf00      	nop
   151cc:	200002b0 	.word	0x200002b0

000151d0 <ull_prepare_dequeue_iter>:
{
   151d0:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   151d2:	4b0c      	ldr	r3, [pc, #48]	; (15204 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   151d4:	7802      	ldrb	r2, [r0, #0]
   151d6:	785c      	ldrb	r4, [r3, #1]
   151d8:	78dd      	ldrb	r5, [r3, #3]
   151da:	7819      	ldrb	r1, [r3, #0]
   151dc:	4294      	cmp	r4, r2
   151de:	bf9c      	itt	ls
   151e0:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   151e2:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   151e4:	4295      	cmp	r5, r2
   151e6:	d00a      	beq.n	151fe <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
   151e8:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
   151ea:	4d07      	ldr	r5, [pc, #28]	; (15208 <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
   151ec:	b2db      	uxtb	r3, r3
		i = 0U;
   151ee:	429c      	cmp	r4, r3
   151f0:	bf08      	it	eq
   151f2:	2300      	moveq	r3, #0
	*idx = i;
   151f4:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   151f6:	fb02 5001 	mla	r0, r2, r1, r5
}
   151fa:	bc30      	pop	{r4, r5}
   151fc:	4770      	bx	lr
		return NULL;
   151fe:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   15200:	e7fb      	b.n	151fa <ull_prepare_dequeue_iter+0x2a>
   15202:	bf00      	nop
   15204:	200002b0 	.word	0x200002b0
   15208:	200002b4 	.word	0x200002b4

0001520c <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   1520c:	4b06      	ldr	r3, [pc, #24]	; (15228 <ull_event_done_extra_get+0x1c>)
   1520e:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   15210:	78d8      	ldrb	r0, [r3, #3]
   15212:	781a      	ldrb	r2, [r3, #0]
   15214:	4288      	cmp	r0, r1
   15216:	d005      	beq.n	15224 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   15218:	fb01 3302 	mla	r3, r1, r2, r3
   1521c:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   1521e:	b110      	cbz	r0, 15226 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   15220:	3020      	adds	r0, #32
   15222:	4770      	bx	lr
		return NULL;
   15224:	2000      	movs	r0, #0
}
   15226:	4770      	bx	lr
   15228:	2000026c 	.word	0x2000026c

0001522c <ull_event_done>:
{
   1522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	evdone = MFIFO_DEQUEUE(done);
   1522e:	4a14      	ldr	r2, [pc, #80]	; (15280 <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
   15230:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   15232:	78d4      	ldrb	r4, [r2, #3]
   15234:	7811      	ldrb	r1, [r2, #0]
   15236:	7855      	ldrb	r5, [r2, #1]
   15238:	429c      	cmp	r4, r3
   1523a:	d01f      	beq.n	1527c <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
   1523c:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   15240:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   15242:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   15244:	b2db      	uxtb	r3, r3
		_first = 0U;
   15246:	429d      	cmp	r5, r3
   15248:	bf08      	it	eq
   1524a:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1524c:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   1524e:	b19c      	cbz	r4, 15278 <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   15250:	2501      	movs	r5, #1
	evdone->hdr.link = NULL;
   15252:	2600      	movs	r6, #0
	link = evdone->hdr.link;
   15254:	6827      	ldr	r7, [r4, #0]
	evdone->param = param;
   15256:	61e0      	str	r0, [r4, #28]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   15258:	7125      	strb	r5, [r4, #4]
	evdone->hdr.link = NULL;
   1525a:	6026      	str	r6, [r4, #0]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1525c:	f003 fc60 	bl	18b20 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   15260:	4a08      	ldr	r2, [pc, #32]	; (15284 <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   15262:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   15264:	4621      	mov	r1, r4
   15266:	4638      	mov	r0, r7
   15268:	f7fb fb62 	bl	10930 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1526c:	4b06      	ldr	r3, [pc, #24]	; (15288 <ull_event_done+0x5c>)
   1526e:	4630      	mov	r0, r6
   15270:	462a      	mov	r2, r5
   15272:	4629      	mov	r1, r5
   15274:	f7fb fbd0 	bl	10a18 <mayfly_enqueue>
}
   15278:	4620      	mov	r0, r4
   1527a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   1527c:	2400      	movs	r4, #0
   1527e:	e7fb      	b.n	15278 <ull_event_done+0x4c>
   15280:	2000026c 	.word	0x2000026c
   15284:	2000294c 	.word	0x2000294c
   15288:	20000450 	.word	0x20000450

0001528c <disabled_cb>:
{
   1528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   1528e:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   15290:	f8d5 70cc 	ldr.w	r7, [r5, #204]	; 0xcc
{
   15294:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   15296:	b1ef      	cbz	r7, 152d4 <disabled_cb+0x48>
	LL_ASSERT(adv->node_rx_cc_free);
   15298:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
	adv->link_cc_free = NULL;
   1529c:	2300      	movs	r3, #0
   1529e:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	LL_ASSERT(adv->node_rx_cc_free);
   152a2:	b36c      	cbz	r4, 15300 <disabled_cb+0x74>
	adv->node_rx_cc_free = NULL;
   152a4:	2100      	movs	r1, #0
	rx->hdr.handle = 0xffff;
   152a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   152aa:	2209      	movs	r2, #9
	adv->node_rx_cc_free = NULL;
   152ac:	f8c5 10d0 	str.w	r1, [r5, #208]	; 0xd0
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   152b0:	f104 001c 	add.w	r0, r4, #28
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   152b4:	7122      	strb	r2, [r4, #4]
	rx->hdr.handle = 0xffff;
   152b6:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   152b8:	221e      	movs	r2, #30
   152ba:	f00d fa5c 	bl	22776 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   152be:	233c      	movs	r3, #60	; 0x3c
	ftr->param = param;
   152c0:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   152c2:	4638      	mov	r0, r7
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   152c4:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
   152c6:	4621      	mov	r1, r4
   152c8:	f7ff fdea 	bl	14ea0 <ll_rx_put>
}
   152cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   152d0:	f7ff bdf0 	b.w	14eb4 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   152d4:	4a12      	ldr	r2, [pc, #72]	; (15320 <disabled_cb+0x94>)
   152d6:	4913      	ldr	r1, [pc, #76]	; (15324 <disabled_cb+0x98>)
   152d8:	4813      	ldr	r0, [pc, #76]	; (15328 <disabled_cb+0x9c>)
   152da:	f240 53e4 	movw	r3, #1508	; 0x5e4
   152de:	f00b f9af 	bl	20640 <printk>
   152e2:	4040      	eors	r0, r0
   152e4:	f380 8811 	msr	BASEPRI, r0
   152e8:	f04f 0003 	mov.w	r0, #3
   152ec:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   152ee:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
   152f2:	f8d5 70cc 	ldr.w	r7, [r5, #204]	; 0xcc
	adv->link_cc_free = NULL;
   152f6:	2300      	movs	r3, #0
   152f8:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	LL_ASSERT(adv->node_rx_cc_free);
   152fc:	2c00      	cmp	r4, #0
   152fe:	d1d1      	bne.n	152a4 <disabled_cb+0x18>
   15300:	4a07      	ldr	r2, [pc, #28]	; (15320 <disabled_cb+0x94>)
   15302:	490a      	ldr	r1, [pc, #40]	; (1532c <disabled_cb+0xa0>)
   15304:	4808      	ldr	r0, [pc, #32]	; (15328 <disabled_cb+0x9c>)
   15306:	f44f 63bd 	mov.w	r3, #1512	; 0x5e8
   1530a:	f00b f999 	bl	20640 <printk>
   1530e:	4040      	eors	r0, r0
   15310:	f380 8811 	msr	BASEPRI, r0
   15314:	f04f 0003 	mov.w	r0, #3
   15318:	df02      	svc	2
   1531a:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
   1531e:	e7c1      	b.n	152a4 <disabled_cb+0x18>
   15320:	00027284 	.word	0x00027284
   15324:	000272c4 	.word	0x000272c4
   15328:	00026ecc 	.word	0x00026ecc
   1532c:	000272d8 	.word	0x000272d8

00015330 <ticker_cb>:
{
   15330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15334:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   15336:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1533a:	4295      	cmp	r5, r2
{
   1533c:	b08a      	sub	sp, #40	; 0x28
   1533e:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   15340:	d018      	beq.n	15374 <ticker_cb+0x44>
	return ++hdr->ref;
   15342:	7c1b      	ldrb	r3, [r3, #16]
   15344:	3301      	adds	r3, #1
   15346:	b2db      	uxtb	r3, r3
   15348:	4680      	mov	r8, r0
   1534a:	460f      	mov	r7, r1
   1534c:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
   1534e:	2b00      	cmp	r3, #0
   15350:	d061      	beq.n	15416 <ticker_cb+0xe6>
		p.ticks_at_expire = ticks_at_expire;
   15352:	4e38      	ldr	r6, [pc, #224]	; (15434 <ticker_cb+0x104>)
		mfy.param = &p;
   15354:	4b38      	ldr	r3, [pc, #224]	; (15438 <ticker_cb+0x108>)
		p.ticks_at_expire = ticks_at_expire;
   15356:	f8c6 8000 	str.w	r8, [r6]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1535a:	2200      	movs	r2, #0
	lll = &adv->lll;
   1535c:	f104 0c1c 	add.w	ip, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   15360:	4611      	mov	r1, r2
   15362:	2001      	movs	r0, #1
		mfy.param = &p;
   15364:	609e      	str	r6, [r3, #8]
		p.remainder = remainder;
   15366:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
   15368:	8135      	strh	r5, [r6, #8]
		p.param = lll;
   1536a:	f8c6 c00c 	str.w	ip, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1536e:	f7fb fb53 	bl	10a18 <mayfly_enqueue>
		LL_ASSERT(!ret);
   15372:	b938      	cbnz	r0, 15384 <ticker_cb+0x54>
	if (!lll->is_hdcd)
   15374:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   15378:	f015 0501 	ands.w	r5, r5, #1
   1537c:	d014      	beq.n	153a8 <ticker_cb+0x78>
}
   1537e:	b00a      	add	sp, #40	; 0x28
   15380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   15384:	4a2d      	ldr	r2, [pc, #180]	; (1543c <ticker_cb+0x10c>)
   15386:	492e      	ldr	r1, [pc, #184]	; (15440 <ticker_cb+0x110>)
   15388:	482e      	ldr	r0, [pc, #184]	; (15444 <ticker_cb+0x114>)
   1538a:	f240 5366 	movw	r3, #1382	; 0x566
   1538e:	f00b f957 	bl	20640 <printk>
   15392:	4040      	eors	r0, r0
   15394:	f380 8811 	msr	BASEPRI, r0
   15398:	f04f 0003 	mov.w	r0, #3
   1539c:	df02      	svc	2
	if (!lll->is_hdcd)
   1539e:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   153a2:	f015 0501 	ands.w	r5, r5, #1
   153a6:	d1ea      	bne.n	1537e <ticker_cb+0x4e>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   153a8:	2104      	movs	r1, #4
   153aa:	a809      	add	r0, sp, #36	; 0x24
   153ac:	f005 fe54 	bl	1b058 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   153b0:	9809      	ldr	r0, [sp, #36]	; 0x24
   153b2:	4925      	ldr	r1, [pc, #148]	; (15448 <ticker_cb+0x118>)
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   153b4:	4a25      	ldr	r2, [pc, #148]	; (1544c <ticker_cb+0x11c>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   153b6:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   153b8:	fba1 3100 	umull	r3, r1, r1, r0
   153bc:	1a43      	subs	r3, r0, r1
   153be:	eb01 0353 	add.w	r3, r1, r3, lsr #1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   153c2:	1aa2      	subs	r2, r4, r2
   153c4:	4c22      	ldr	r4, [pc, #136]	; (15450 <ticker_cb+0x120>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   153c6:	9504      	str	r5, [sp, #16]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   153c8:	f240 1147 	movw	r1, #327	; 0x147
   153cc:	0a1b      	lsrs	r3, r3, #8
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   153ce:	0952      	lsrs	r2, r2, #5
		random_delay %= ULL_ADV_RANDOM_DELAY;
   153d0:	fb01 0313 	mls	r3, r1, r3, r0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   153d4:	fba4 1202 	umull	r1, r2, r4, r2
				    (TICKER_ID_ADV_BASE +
   153d8:	3202      	adds	r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   153da:	491e      	ldr	r1, [pc, #120]	; (15454 <ticker_cb+0x124>)
   153dc:	9105      	str	r1, [sp, #20]
		random_delay += 1;
   153de:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   153e0:	e9cd 5502 	strd	r5, r5, [sp, #8]
   153e4:	e9cd 5500 	strd	r5, r5, [sp]
   153e8:	4628      	mov	r0, r5
   153ea:	b2d2      	uxtb	r2, r2
   153ec:	2101      	movs	r1, #1
		random_delay += 1;
   153ee:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   153f0:	f7fc feba 	bl	12168 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   153f4:	f030 0302 	bics.w	r3, r0, #2
   153f8:	d0c1      	beq.n	1537e <ticker_cb+0x4e>
   153fa:	4a10      	ldr	r2, [pc, #64]	; (1543c <ticker_cb+0x10c>)
   153fc:	4916      	ldr	r1, [pc, #88]	; (15458 <ticker_cb+0x128>)
   153fe:	4811      	ldr	r0, [pc, #68]	; (15444 <ticker_cb+0x114>)
   15400:	f240 537c 	movw	r3, #1404	; 0x57c
   15404:	f00b f91c 	bl	20640 <printk>
   15408:	4040      	eors	r0, r0
   1540a:	f380 8811 	msr	BASEPRI, r0
   1540e:	f04f 0003 	mov.w	r0, #3
   15412:	df02      	svc	2
}
   15414:	e7b3      	b.n	1537e <ticker_cb+0x4e>
		LL_ASSERT(ref);
   15416:	4a09      	ldr	r2, [pc, #36]	; (1543c <ticker_cb+0x10c>)
   15418:	4910      	ldr	r1, [pc, #64]	; (1545c <ticker_cb+0x12c>)
   1541a:	480a      	ldr	r0, [pc, #40]	; (15444 <ticker_cb+0x114>)
   1541c:	f240 535a 	movw	r3, #1370	; 0x55a
   15420:	f00b f90e 	bl	20640 <printk>
   15424:	4040      	eors	r0, r0
   15426:	f380 8811 	msr	BASEPRI, r0
   1542a:	f04f 0003 	mov.w	r0, #3
   1542e:	df02      	svc	2
   15430:	e78f      	b.n	15352 <ticker_cb+0x22>
   15432:	bf00      	nop
   15434:	20002e14 	.word	0x20002e14
   15438:	20000470 	.word	0x20000470
   1543c:	00027284 	.word	0x00027284
   15440:	00027188 	.word	0x00027188
   15444:	00026ecc 	.word	0x00026ecc
   15448:	90d4f121 	.word	0x90d4f121
   1544c:	20002d28 	.word	0x20002d28
   15450:	24924929 	.word	0x24924929
   15454:	00015501 	.word	0x00015501
   15458:	000272f4 	.word	0x000272f4
   1545c:	000272f0 	.word	0x000272f0

00015460 <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   15460:	2800      	cmp	r0, #0
   15462:	d130      	bne.n	154c6 <ticker_op_stop_cb+0x66>
{
   15464:	b538      	push	{r3, r4, r5, lr}
	mfy.param = &adv->lll;
   15466:	4d1f      	ldr	r5, [pc, #124]	; (154e4 <ticker_op_stop_cb+0x84>)
	if (hdr->ref) {
   15468:	7c0a      	ldrb	r2, [r1, #16]
	mfy.param = &adv->lll;
   1546a:	f101 031c 	add.w	r3, r1, #28
   1546e:	460c      	mov	r4, r1
   15470:	60ab      	str	r3, [r5, #8]
	if (hdr->ref) {
   15472:	b1e2      	cbz	r2, 154ae <ticker_op_stop_cb+0x4e>
		LL_ASSERT(!hdr->disabled_cb);
   15474:	694a      	ldr	r2, [r1, #20]
   15476:	b16a      	cbz	r2, 15494 <ticker_op_stop_cb+0x34>
   15478:	4a1b      	ldr	r2, [pc, #108]	; (154e8 <ticker_op_stop_cb+0x88>)
   1547a:	491c      	ldr	r1, [pc, #112]	; (154ec <ticker_op_stop_cb+0x8c>)
   1547c:	481c      	ldr	r0, [pc, #112]	; (154f0 <ticker_op_stop_cb+0x90>)
   1547e:	f240 53ca 	movw	r3, #1482	; 0x5ca
   15482:	f00b f8dd 	bl	20640 <printk>
   15486:	4040      	eors	r0, r0
   15488:	f380 8811 	msr	BASEPRI, r0
   1548c:	f04f 0003 	mov.w	r0, #3
   15490:	df02      	svc	2
   15492:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   15494:	4917      	ldr	r1, [pc, #92]	; (154f4 <ticker_op_stop_cb+0x94>)
		mfy.fp = lll_disable;
   15496:	4818      	ldr	r0, [pc, #96]	; (154f8 <ticker_op_stop_cb+0x98>)
		hdr->disabled_param = mfy.param;
   15498:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1549a:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   1549c:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   1549e:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   154a0:	4b10      	ldr	r3, [pc, #64]	; (154e4 <ticker_op_stop_cb+0x84>)
   154a2:	4611      	mov	r1, r2
   154a4:	2002      	movs	r0, #2
   154a6:	f7fb fab7 	bl	10a18 <mayfly_enqueue>
		LL_ASSERT(!ret);
   154aa:	b968      	cbnz	r0, 154c8 <ticker_op_stop_cb+0x68>
}
   154ac:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   154ae:	4b11      	ldr	r3, [pc, #68]	; (154f4 <ticker_op_stop_cb+0x94>)
   154b0:	60eb      	str	r3, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   154b2:	2101      	movs	r1, #1
   154b4:	462b      	mov	r3, r5
   154b6:	2002      	movs	r0, #2
   154b8:	f7fb faae 	bl	10a18 <mayfly_enqueue>
		LL_ASSERT(!ret);
   154bc:	2800      	cmp	r0, #0
   154be:	d0f5      	beq.n	154ac <ticker_op_stop_cb+0x4c>
   154c0:	f240 53d6 	movw	r3, #1494	; 0x5d6
   154c4:	e002      	b.n	154cc <ticker_op_stop_cb+0x6c>
   154c6:	4770      	bx	lr
		LL_ASSERT(!ret);
   154c8:	f240 53d1 	movw	r3, #1489	; 0x5d1
		LL_ASSERT(!ret);
   154cc:	4a06      	ldr	r2, [pc, #24]	; (154e8 <ticker_op_stop_cb+0x88>)
   154ce:	490b      	ldr	r1, [pc, #44]	; (154fc <ticker_op_stop_cb+0x9c>)
   154d0:	4807      	ldr	r0, [pc, #28]	; (154f0 <ticker_op_stop_cb+0x90>)
   154d2:	f00b f8b5 	bl	20640 <printk>
   154d6:	4040      	eors	r0, r0
   154d8:	f380 8811 	msr	BASEPRI, r0
   154dc:	f04f 0003 	mov.w	r0, #3
   154e0:	df02      	svc	2
}
   154e2:	bd38      	pop	{r3, r4, r5, pc}
   154e4:	20000480 	.word	0x20000480
   154e8:	00027284 	.word	0x00027284
   154ec:	00027310 	.word	0x00027310
   154f0:	00026ecc 	.word	0x00026ecc
   154f4:	0001528d 	.word	0x0001528d
   154f8:	0001b0c5 	.word	0x0001b0c5
   154fc:	00027188 	.word	0x00027188

00015500 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   15500:	b900      	cbnz	r0, 15504 <ticker_op_update_cb+0x4>
   15502:	4770      	bx	lr
{
   15504:	b510      	push	{r4, lr}
   15506:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   15508:	f7ff fd6c 	bl	14fe4 <ull_disable_mark_get>
   1550c:	4284      	cmp	r4, r0
   1550e:	d00c      	beq.n	1552a <ticker_op_update_cb+0x2a>
   15510:	4a06      	ldr	r2, [pc, #24]	; (1552c <ticker_op_update_cb+0x2c>)
   15512:	4907      	ldr	r1, [pc, #28]	; (15530 <ticker_op_update_cb+0x30>)
   15514:	4807      	ldr	r0, [pc, #28]	; (15534 <ticker_op_update_cb+0x34>)
   15516:	f240 538b 	movw	r3, #1419	; 0x58b
   1551a:	f00b f891 	bl	20640 <printk>
   1551e:	4040      	eors	r0, r0
   15520:	f380 8811 	msr	BASEPRI, r0
   15524:	f04f 0003 	mov.w	r0, #3
   15528:	df02      	svc	2
}
   1552a:	bd10      	pop	{r4, pc}
   1552c:	00027284 	.word	0x00027284
   15530:	00027324 	.word	0x00027324
   15534:	00026ecc 	.word	0x00026ecc

00015538 <ticker_stop_cb>:
{
   15538:	b530      	push	{r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1553a:	4c19      	ldr	r4, [pc, #100]	; (155a0 <ticker_stop_cb+0x68>)
   1553c:	4a19      	ldr	r2, [pc, #100]	; (155a4 <ticker_stop_cb+0x6c>)
   1553e:	1b1c      	subs	r4, r3, r4
   15540:	0964      	lsrs	r4, r4, #5
{
   15542:	461d      	mov	r5, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   15544:	fba2 3404 	umull	r3, r4, r2, r4
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   15548:	f014 0fff 	tst.w	r4, #255	; 0xff
{
   1554c:	b083      	sub	sp, #12
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1554e:	d119      	bne.n	15584 <ticker_stop_cb+0x4c>
			  TICKER_ID_ADV_BASE + handle,
   15550:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   15552:	4b15      	ldr	r3, [pc, #84]	; (155a8 <ticker_stop_cb+0x70>)
   15554:	9500      	str	r5, [sp, #0]
   15556:	b2d2      	uxtb	r2, r2
   15558:	2101      	movs	r1, #1
   1555a:	2000      	movs	r0, #0
   1555c:	f7fc fe54 	bl	12208 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   15560:	f030 0302 	bics.w	r3, r0, #2
   15564:	d00c      	beq.n	15580 <ticker_stop_cb+0x48>
   15566:	4a11      	ldr	r2, [pc, #68]	; (155ac <ticker_stop_cb+0x74>)
   15568:	4911      	ldr	r1, [pc, #68]	; (155b0 <ticker_stop_cb+0x78>)
   1556a:	4812      	ldr	r0, [pc, #72]	; (155b4 <ticker_stop_cb+0x7c>)
   1556c:	f240 53ac 	movw	r3, #1452	; 0x5ac
   15570:	f00b f866 	bl	20640 <printk>
   15574:	4040      	eors	r0, r0
   15576:	f380 8811 	msr	BASEPRI, r0
   1557a:	f04f 0003 	mov.w	r0, #3
   1557e:	df02      	svc	2
}
   15580:	b003      	add	sp, #12
   15582:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   15584:	4a09      	ldr	r2, [pc, #36]	; (155ac <ticker_stop_cb+0x74>)
   15586:	490c      	ldr	r1, [pc, #48]	; (155b8 <ticker_stop_cb+0x80>)
   15588:	480a      	ldr	r0, [pc, #40]	; (155b4 <ticker_stop_cb+0x7c>)
   1558a:	f240 53a7 	movw	r3, #1447	; 0x5a7
   1558e:	f00b f857 	bl	20640 <printk>
   15592:	4040      	eors	r0, r0
   15594:	f380 8811 	msr	BASEPRI, r0
   15598:	f04f 0003 	mov.w	r0, #3
   1559c:	df02      	svc	2
   1559e:	e7d7      	b.n	15550 <ticker_stop_cb+0x18>
   155a0:	20002d28 	.word	0x20002d28
   155a4:	24924929 	.word	0x24924929
   155a8:	00015461 	.word	0x00015461
   155ac:	00027284 	.word	0x00027284
   155b0:	000272f4 	.word	0x000272f4
   155b4:	00026ecc 	.word	0x00026ecc
   155b8:	00027354 	.word	0x00027354

000155bc <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   155bc:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   155be:	4c1d      	ldr	r4, [pc, #116]	; (15634 <conn_release.constprop.0+0x78>)
   155c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
	LL_ASSERT(!lll->link_tx_free);
   155c2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   155c4:	b163      	cbz	r3, 155e0 <conn_release.constprop.0+0x24>
   155c6:	4a1c      	ldr	r2, [pc, #112]	; (15638 <conn_release.constprop.0+0x7c>)
   155c8:	491c      	ldr	r1, [pc, #112]	; (1563c <conn_release.constprop.0+0x80>)
   155ca:	481d      	ldr	r0, [pc, #116]	; (15640 <conn_release.constprop.0+0x84>)
   155cc:	f240 53ff 	movw	r3, #1535	; 0x5ff
   155d0:	f00b f836 	bl	20640 <printk>
   155d4:	4040      	eors	r0, r0
   155d6:	f380 8811 	msr	BASEPRI, r0
   155da:	f04f 0003 	mov.w	r0, #3
   155de:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   155e0:	f105 0150 	add.w	r1, r5, #80	; 0x50
   155e4:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   155e8:	f7fb f998 	bl	1091c <memq_deinit>
	LL_ASSERT(link);
   155ec:	4606      	mov	r6, r0
   155ee:	b190      	cbz	r0, 15616 <conn_release.constprop.0+0x5a>
	ll_conn_release(lll->hdr.parent);
   155f0:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   155f2:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
   155f4:	f000 ffd6 	bl	165a4 <ll_conn_release>
	adv->lll.conn = NULL;
   155f8:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   155fa:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
	adv->lll.conn = NULL;
   155fe:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   15600:	f7ff fc48 	bl	14e94 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   15604:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
	adv->node_rx_cc_free = NULL;
   15608:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
	ll_rx_link_release(adv->link_cc_free);
   1560c:	f7ff fc36 	bl	14e7c <ll_rx_link_release>
	adv->link_cc_free = NULL;
   15610:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
}
   15614:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   15616:	4a08      	ldr	r2, [pc, #32]	; (15638 <conn_release.constprop.0+0x7c>)
   15618:	490a      	ldr	r1, [pc, #40]	; (15644 <conn_release.constprop.0+0x88>)
   1561a:	4809      	ldr	r0, [pc, #36]	; (15640 <conn_release.constprop.0+0x84>)
   1561c:	f240 6301 	movw	r3, #1537	; 0x601
   15620:	f00b f80e 	bl	20640 <printk>
   15624:	4040      	eors	r0, r0
   15626:	f380 8811 	msr	BASEPRI, r0
   1562a:	f04f 0003 	mov.w	r0, #3
   1562e:	df02      	svc	2
   15630:	e7de      	b.n	155f0 <conn_release.constprop.0+0x34>
   15632:	bf00      	nop
   15634:	20002d28 	.word	0x20002d28
   15638:	00027284 	.word	0x00027284
   1563c:	00027360 	.word	0x00027360
   15640:	00026ecc 	.word	0x00026ecc
   15644:	00027460 	.word	0x00027460

00015648 <ll_adv_params_set>:
{
   15648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1564c:	4d4e      	ldr	r5, [pc, #312]	; (15788 <ll_adv_params_set+0x140>)
	if (!adv || adv->is_enabled) {
   1564e:	4c4f      	ldr	r4, [pc, #316]	; (1578c <ll_adv_params_set+0x144>)
{
   15650:	4684      	mov	ip, r0
	if (!adv || adv->is_enabled) {
   15652:	f894 60d6 	ldrb.w	r6, [r4, #214]	; 0xd6
{
   15656:	468a      	mov	sl, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   15658:	e895 0003 	ldmia.w	r5, {r0, r1}
{
   1565c:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   1565e:	f016 0601 	ands.w	r6, r6, #1
{
   15662:	4699      	mov	r9, r3
   15664:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
   15668:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1566c:	9000      	str	r0, [sp, #0]
   1566e:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   15672:	d172      	bne.n	1575a <ll_adv_params_set+0x112>
   15674:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   15678:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   1567a:	f8df e114 	ldr.w	lr, [pc, #276]	; 15790 <ll_adv_params_set+0x148>
   1567e:	4615      	mov	r5, r2
   15680:	2727      	movs	r7, #39	; 0x27
   15682:	222d      	movs	r2, #45	; 0x2d
   15684:	fb17 2701 	smlabb	r7, r7, r1, r2
	pdu->type = pdu_adv_type[adv_type];
   15688:	aa02      	add	r2, sp, #8
   1568a:	4452      	add	r2, sl
		adv->interval = 0;
   1568c:	f1ba 0f01 	cmp.w	sl, #1
	adv->lll.chan_map = chan_map;
   15690:	f008 0107 	and.w	r1, r8, #7
	pdu->type = pdu_adv_type[adv_type];
   15694:	f812 ac08 	ldrb.w	sl, [r2, #-8]
   15698:	5de2      	ldrb	r2, [r4, r7]
	adv->lll.chan_map = chan_map;
   1569a:	ea4f 0141 	mov.w	r1, r1, lsl #1
   1569e:	f003 0303 	and.w	r3, r3, #3
		adv->interval = 0;
   156a2:	bf08      	it	eq
   156a4:	f04f 0c00 	moveq.w	ip, #0
	pdu->type = pdu_adv_type[adv_type];
   156a8:	f00a 080f 	and.w	r8, sl, #15
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   156ac:	f01a 0f0e 	tst.w	sl, #14
	adv->lll.chan_map = chan_map;
   156b0:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
	pdu->type = pdu_adv_type[adv_type];
   156b4:	f022 021f 	bic.w	r2, r2, #31
	adv->own_addr_type = own_addr_type;
   156b8:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
   156bc:	f8a4 c0d4 	strh.w	ip, [r4, #212]	; 0xd4
	adv->lll.filter_policy = filter_policy;
   156c0:	ea48 0202 	orr.w	r2, r8, r2
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   156c4:	bf0c      	ite	eq
   156c6:	f04f 0c01 	moveq.w	ip, #1
   156ca:	f04f 0c00 	movne.w	ip, #0
	adv->lll.chan_map = chan_map;
   156ce:	ea00 000e 	and.w	r0, r0, lr
	adv->own_addr_type = own_addr_type;
   156d2:	f365 0142 	bfi	r1, r5, #1, #2
   156d6:	f36c 1245 	bfi	r2, ip, #5, #1
	adv->lll.chan_map = chan_map;
   156da:	4303      	orrs	r3, r0
   156dc:	8523      	strh	r3, [r4, #40]	; 0x28
   156de:	55e2      	strb	r2, [r4, r7]
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   156e0:	074a      	lsls	r2, r1, #29
   156e2:	eb04 0807 	add.w	r8, r4, r7
   156e6:	b2cb      	uxtb	r3, r1
	adv->own_addr_type = own_addr_type;
   156e8:	f884 10d6 	strb.w	r1, [r4, #214]	; 0xd6
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   156ec:	d509      	bpl.n	15702 <ll_adv_params_set+0xba>
		adv->id_addr_type = direct_addr_type;
   156ee:	f369 03c3 	bfi	r3, r9, #3, #1
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   156f2:	990a      	ldr	r1, [sp, #40]	; 0x28
		adv->id_addr_type = direct_addr_type;
   156f4:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   156f8:	2206      	movs	r2, #6
   156fa:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   156fe:	f00d f80f 	bl	22720 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   15702:	5de2      	ldrb	r2, [r4, r7]
   15704:	f002 030f 	and.w	r3, r2, #15
   15708:	2b01      	cmp	r3, #1
   1570a:	f005 0101 	and.w	r1, r5, #1
   1570e:	d029      	beq.n	15764 <ll_adv_params_set+0x11c>
	} else if (pdu->len == 0) {
   15710:	f898 3001 	ldrb.w	r3, [r8, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   15714:	f361 1286 	bfi	r2, r1, #6, #1
	} else if (pdu->len == 0) {
   15718:	b1c3      	cbz	r3, 1574c <ll_adv_params_set+0x104>
		pdu->rx_addr = 0;
   1571a:	f36f 12c7 	bfc	r2, #7, #1
   1571e:	55e2      	strb	r2, [r4, r7]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   15720:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   15724:	01ad      	lsls	r5, r5, #6
   15726:	2327      	movs	r3, #39	; 0x27
   15728:	227d      	movs	r2, #125	; 0x7d
   1572a:	fb13 2301 	smlabb	r3, r3, r1, r2
   1572e:	f005 0540 	and.w	r5, r5, #64	; 0x40
   15732:	f045 0504 	orr.w	r5, r5, #4
   15736:	54e5      	strb	r5, [r4, r3]
   15738:	441c      	add	r4, r3
	if (pdu->len == 0) {
   1573a:	7863      	ldrb	r3, [r4, #1]
   1573c:	b913      	cbnz	r3, 15744 <ll_adv_params_set+0xfc>
		pdu->len = BDADDR_SIZE;
   1573e:	2206      	movs	r2, #6
	return 0;
   15740:	461e      	mov	r6, r3
		pdu->len = BDADDR_SIZE;
   15742:	7062      	strb	r2, [r4, #1]
}
   15744:	4630      	mov	r0, r6
   15746:	b002      	add	sp, #8
   15748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->rx_addr = 0;
   1574c:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu->len = BDADDR_SIZE;
   15750:	2306      	movs	r3, #6
		pdu->rx_addr = 0;
   15752:	55e2      	strb	r2, [r4, r7]
		pdu->len = BDADDR_SIZE;
   15754:	f888 3001 	strb.w	r3, [r8, #1]
   15758:	e7e2      	b.n	15720 <ll_adv_params_set+0xd8>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1575a:	260c      	movs	r6, #12
}
   1575c:	4630      	mov	r0, r6
   1575e:	b002      	add	sp, #8
   15760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   15764:	f361 1286 	bfi	r2, r1, #6, #1
		pdu->rx_addr = direct_addr_type;
   15768:	4694      	mov	ip, r2
   1576a:	f369 1cc7 	bfi	ip, r9, #7, #1
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   1576e:	990a      	ldr	r1, [sp, #40]	; 0x28
		pdu->rx_addr = direct_addr_type;
   15770:	f804 c007 	strb.w	ip, [r4, r7]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   15774:	2206      	movs	r2, #6
   15776:	f108 0008 	add.w	r0, r8, #8
   1577a:	f00c ffd1 	bl	22720 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   1577e:	230c      	movs	r3, #12
   15780:	f888 3001 	strb.w	r3, [r8, #1]
   15784:	e7cc      	b.n	15720 <ll_adv_params_set+0xd8>
   15786:	bf00      	nop
   15788:	00026754 	.word	0x00026754
   1578c:	20002d28 	.word	0x20002d28
   15790:	fffffcf1 	.word	0xfffffcf1

00015794 <ull_adv_init>:
}
   15794:	2000      	movs	r0, #0
   15796:	4770      	bx	lr

00015798 <ull_adv_reset>:
{
   15798:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   1579a:	4c4a      	ldr	r4, [pc, #296]	; (158c4 <ull_adv_reset+0x12c>)
{
   1579c:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   1579e:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
   157a2:	2202      	movs	r2, #2
   157a4:	9203      	str	r2, [sp, #12]
	if (!adv || !adv->is_enabled) {
   157a6:	07da      	lsls	r2, r3, #31
   157a8:	d554      	bpl.n	15854 <ull_adv_reset+0xbc>
	mark = ull_disable_mark(adv);
   157aa:	4620      	mov	r0, r4
   157ac:	f7ff fc02 	bl	14fb4 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   157b0:	4284      	cmp	r4, r0
   157b2:	d00c      	beq.n	157ce <ull_adv_reset+0x36>
   157b4:	4a44      	ldr	r2, [pc, #272]	; (158c8 <ull_adv_reset+0x130>)
   157b6:	4945      	ldr	r1, [pc, #276]	; (158cc <ull_adv_reset+0x134>)
   157b8:	4845      	ldr	r0, [pc, #276]	; (158d0 <ull_adv_reset+0x138>)
   157ba:	f240 632b 	movw	r3, #1579	; 0x62b
   157be:	f00a ff3f 	bl	20640 <printk>
   157c2:	4040      	eors	r0, r0
   157c4:	f380 8811 	msr	BASEPRI, r0
   157c8:	f04f 0003 	mov.w	r0, #3
   157cc:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   157ce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   157d2:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   157d4:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   157d6:	d50d      	bpl.n	157f4 <ull_adv_reset+0x5c>
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   157d8:	2103      	movs	r1, #3
   157da:	4b3e      	ldr	r3, [pc, #248]	; (158d4 <ull_adv_reset+0x13c>)
   157dc:	9500      	str	r5, [sp, #0]
   157de:	2201      	movs	r2, #1
   157e0:	2000      	movs	r0, #0
   157e2:	f7fc fd11 	bl	12208 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   157e6:	4629      	mov	r1, r5
   157e8:	f7ff fbd6 	bl	14f98 <ull_ticker_status_take>
		if (ret) {
   157ec:	2800      	cmp	r0, #0
   157ee:	d161      	bne.n	158b4 <ull_adv_reset+0x11c>
		ret_cb = TICKER_STATUS_BUSY;
   157f0:	2302      	movs	r3, #2
   157f2:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   157f4:	2103      	movs	r1, #3
   157f6:	4b37      	ldr	r3, [pc, #220]	; (158d4 <ull_adv_reset+0x13c>)
   157f8:	9500      	str	r5, [sp, #0]
   157fa:	2202      	movs	r2, #2
   157fc:	2000      	movs	r0, #0
   157fe:	f7fc fd03 	bl	12208 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   15802:	4629      	mov	r1, r5
   15804:	f7ff fbc8 	bl	14f98 <ull_ticker_status_take>
	if (ret) {
   15808:	2800      	cmp	r0, #0
   1580a:	d139      	bne.n	15880 <ull_adv_reset+0xe8>
	ret = ull_disable(&adv->lll);
   1580c:	4832      	ldr	r0, [pc, #200]	; (158d8 <ull_adv_reset+0x140>)
   1580e:	f7ff fc0d 	bl	1502c <ull_disable>
	LL_ASSERT(!ret);
   15812:	bb10      	cbnz	r0, 1585a <ull_adv_reset+0xc2>
	mark = ull_disable_unmark(adv);
   15814:	482b      	ldr	r0, [pc, #172]	; (158c4 <ull_adv_reset+0x12c>)
   15816:	f7ff fbd9 	bl	14fcc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1581a:	4284      	cmp	r4, r0
   1581c:	d00c      	beq.n	15838 <ull_adv_reset+0xa0>
   1581e:	4a2a      	ldr	r2, [pc, #168]	; (158c8 <ull_adv_reset+0x130>)
   15820:	492a      	ldr	r1, [pc, #168]	; (158cc <ull_adv_reset+0x134>)
   15822:	482b      	ldr	r0, [pc, #172]	; (158d0 <ull_adv_reset+0x138>)
   15824:	f240 634d 	movw	r3, #1613	; 0x64d
   15828:	f00a ff0a 	bl	20640 <printk>
   1582c:	4040      	eors	r0, r0
   1582e:	f380 8811 	msr	BASEPRI, r0
   15832:	f04f 0003 	mov.w	r0, #3
   15836:	df02      	svc	2
	if (adv->lll.conn) {
   15838:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1583a:	b10b      	cbz	r3, 15840 <ull_adv_reset+0xa8>
		conn_release(adv);
   1583c:	f7ff febe 	bl	155bc <conn_release.constprop.0>
	adv->is_enabled = 0U;
   15840:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   15844:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   15846:	f36f 0300 	bfc	r3, #0, #1
   1584a:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   1584e:	f000 fa6d 	bl	15d2c <ull_scan_is_enabled_get>
   15852:	b350      	cbz	r0, 158aa <ull_adv_reset+0x112>
}
   15854:	2000      	movs	r0, #0
   15856:	b005      	add	sp, #20
   15858:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   1585a:	4a1b      	ldr	r2, [pc, #108]	; (158c8 <ull_adv_reset+0x130>)
   1585c:	491f      	ldr	r1, [pc, #124]	; (158dc <ull_adv_reset+0x144>)
   1585e:	481c      	ldr	r0, [pc, #112]	; (158d0 <ull_adv_reset+0x138>)
   15860:	f240 634a 	movw	r3, #1610	; 0x64a
   15864:	f00a feec 	bl	20640 <printk>
   15868:	4040      	eors	r0, r0
   1586a:	f380 8811 	msr	BASEPRI, r0
   1586e:	f04f 0003 	mov.w	r0, #3
   15872:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   15874:	4813      	ldr	r0, [pc, #76]	; (158c4 <ull_adv_reset+0x12c>)
   15876:	f7ff fba9 	bl	14fcc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1587a:	4284      	cmp	r4, r0
   1587c:	d1cf      	bne.n	1581e <ull_adv_reset+0x86>
   1587e:	e7db      	b.n	15838 <ull_adv_reset+0xa0>
		mark = ull_disable_mark(adv);
   15880:	4810      	ldr	r0, [pc, #64]	; (158c4 <ull_adv_reset+0x12c>)
   15882:	f7ff fb97 	bl	14fb4 <ull_disable_mark>
		LL_ASSERT(mark == adv);
   15886:	4284      	cmp	r4, r0
   15888:	d0e4      	beq.n	15854 <ull_adv_reset+0xbc>
   1588a:	f240 6344 	movw	r3, #1604	; 0x644
   1588e:	4a0e      	ldr	r2, [pc, #56]	; (158c8 <ull_adv_reset+0x130>)
   15890:	490e      	ldr	r1, [pc, #56]	; (158cc <ull_adv_reset+0x134>)
   15892:	480f      	ldr	r0, [pc, #60]	; (158d0 <ull_adv_reset+0x138>)
   15894:	f00a fed4 	bl	20640 <printk>
   15898:	4040      	eors	r0, r0
   1589a:	f380 8811 	msr	BASEPRI, r0
   1589e:	f04f 0003 	mov.w	r0, #3
   158a2:	df02      	svc	2
}
   158a4:	2000      	movs	r0, #0
   158a6:	b005      	add	sp, #20
   158a8:	bd30      	pop	{r4, r5, pc}
		ull_filter_adv_scan_state_cb(0);
   158aa:	f004 facf 	bl	19e4c <ull_filter_adv_scan_state_cb>
}
   158ae:	2000      	movs	r0, #0
   158b0:	b005      	add	sp, #20
   158b2:	bd30      	pop	{r4, r5, pc}
			mark = ull_disable_mark(adv);
   158b4:	4803      	ldr	r0, [pc, #12]	; (158c4 <ull_adv_reset+0x12c>)
   158b6:	f7ff fb7d 	bl	14fb4 <ull_disable_mark>
			LL_ASSERT(mark == adv);
   158ba:	4284      	cmp	r4, r0
   158bc:	d0ca      	beq.n	15854 <ull_adv_reset+0xbc>
   158be:	f240 6335 	movw	r3, #1589	; 0x635
   158c2:	e7e4      	b.n	1588e <ull_adv_reset+0xf6>
   158c4:	20002d28 	.word	0x20002d28
   158c8:	00027284 	.word	0x00027284
   158cc:	00027374 	.word	0x00027374
   158d0:	00026ecc 	.word	0x00026ecc
   158d4:	00014f8d 	.word	0x00014f8d
   158d8:	20002d44 	.word	0x20002d44
   158dc:	00027188 	.word	0x00027188

000158e0 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   158e0:	4a03      	ldr	r2, [pc, #12]	; (158f0 <ull_adv_handle_get+0x10>)
   158e2:	4b04      	ldr	r3, [pc, #16]	; (158f4 <ull_adv_handle_get+0x14>)
   158e4:	1a80      	subs	r0, r0, r2
   158e6:	0940      	lsrs	r0, r0, #5
   158e8:	fba3 3000 	umull	r3, r0, r3, r0
}
   158ec:	b280      	uxth	r0, r0
   158ee:	4770      	bx	lr
   158f0:	20002d28 	.word	0x20002d28
   158f4:	24924929 	.word	0x24924929

000158f8 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   158f8:	4a04      	ldr	r2, [pc, #16]	; (1590c <ull_adv_lll_handle_get+0x14>)
   158fa:	6800      	ldr	r0, [r0, #0]
   158fc:	4b04      	ldr	r3, [pc, #16]	; (15910 <ull_adv_lll_handle_get+0x18>)
   158fe:	1a80      	subs	r0, r0, r2
   15900:	0940      	lsrs	r0, r0, #5
   15902:	fba3 3000 	umull	r3, r0, r3, r0
}
   15906:	b280      	uxth	r0, r0
   15908:	4770      	bx	lr
   1590a:	bf00      	nop
   1590c:	20002d28 	.word	0x20002d28
   15910:	24924929 	.word	0x24924929

00015914 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   15914:	b938      	cbnz	r0, 15926 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   15916:	4805      	ldr	r0, [pc, #20]	; (1592c <ull_adv_is_enabled_get+0x18>)
   15918:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
	return &ll_adv[handle];
   1591c:	f013 0f01 	tst.w	r3, #1
   15920:	bf08      	it	eq
   15922:	2000      	moveq	r0, #0
   15924:	4770      	bx	lr
		return NULL;
   15926:	2000      	movs	r0, #0
}
   15928:	4770      	bx	lr
   1592a:	bf00      	nop
   1592c:	20002d28 	.word	0x20002d28

00015930 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   15930:	b928      	cbnz	r0, 1593e <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   15932:	4b04      	ldr	r3, [pc, #16]	; (15944 <ull_adv_is_enabled+0x14>)
   15934:	f893 00d6 	ldrb.w	r0, [r3, #214]	; 0xd6
   15938:	f000 0001 	and.w	r0, r0, #1
   1593c:	4770      	bx	lr
		return 0;
   1593e:	2000      	movs	r0, #0
}
   15940:	4770      	bx	lr
   15942:	bf00      	nop
   15944:	20002d28 	.word	0x20002d28

00015948 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   15948:	b950      	cbnz	r0, 15960 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   1594a:	4b06      	ldr	r3, [pc, #24]	; (15964 <ull_adv_filter_pol_get+0x1c>)
   1594c:	f893 00d6 	ldrb.w	r0, [r3, #214]	; 0xd6
   15950:	f010 0001 	ands.w	r0, r0, #1
   15954:	d005      	beq.n	15962 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   15956:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   1595a:	f000 0003 	and.w	r0, r0, #3
   1595e:	4770      	bx	lr
		return 0;
   15960:	2000      	movs	r0, #0
}
   15962:	4770      	bx	lr
   15964:	20002d28 	.word	0x20002d28

00015968 <ull_adv_data_set>:
{
   15968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1596c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
   15970:	f100 0e1c 	add.w	lr, r0, #28
   15974:	4604      	mov	r4, r0
   15976:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1597a:	ebc5 00c0 	rsb	r0, r5, r0, lsl #3
   1597e:	f100 0c11 	add.w	ip, r0, #17
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   15982:	f81e 300c 	ldrb.w	r3, [lr, ip]
   15986:	f003 080f 	and.w	r8, r3, #15
   1598a:	f1b8 0f01 	cmp.w	r8, #1
   1598e:	44e6      	add	lr, ip
   15990:	d02b      	beq.n	159ea <ull_adv_data_set+0x82>
   15992:	4617      	mov	r7, r2
	if (pdu->first == pdu->last) {
   15994:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
   15998:	42aa      	cmp	r2, r5
   1599a:	460e      	mov	r6, r1
   1599c:	d028      	beq.n	159f0 <ull_adv_data_set+0x88>
   1599e:	1c82      	adds	r2, r0, #2
		pdu->chan_sel = prev->chan_sel;
   159a0:	f3c3 1c40 	ubfx	ip, r3, #5, #1
	pdu->type = prev->type;
   159a4:	f3c3 0003 	ubfx	r0, r3, #0, #4
   159a8:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
	pdu->tx_addr = prev->tx_addr;
   159ac:	f3c3 1c80 	ubfx	ip, r3, #6, #1
	pdu->type = prev->type;
   159b0:	ea40 108c 	orr.w	r0, r0, ip, lsl #6
   159b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
	return (void *)pdu->pdu[last];
   159b8:	f104 0c2b 	add.w	ip, r4, #43	; 0x2b
   159bc:	eb0c 0802 	add.w	r8, ip, r2
   159c0:	4303      	orrs	r3, r0
   159c2:	f80c 3002 	strb.w	r3, [ip, r2]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   159c6:	f10e 0102 	add.w	r1, lr, #2
   159ca:	2206      	movs	r2, #6
   159cc:	f108 0002 	add.w	r0, r8, #2
   159d0:	f00c fea6 	bl	22720 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   159d4:	4632      	mov	r2, r6
   159d6:	4639      	mov	r1, r7
   159d8:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
   159dc:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   159de:	f00c fe9f 	bl	22720 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   159e2:	f888 6001 	strb.w	r6, [r8, #1]
	pdu->last = idx;
   159e6:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
   159ea:	2000      	movs	r0, #0
   159ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = pdu->last + 1;
   159f0:	3501      	adds	r5, #1
   159f2:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   159f4:	2d02      	cmp	r5, #2
   159f6:	d004      	beq.n	15a02 <ull_adv_data_set+0x9a>
   159f8:	2027      	movs	r0, #39	; 0x27
   159fa:	2202      	movs	r2, #2
   159fc:	fb10 2205 	smlabb	r2, r0, r5, r2
   15a00:	e7ce      	b.n	159a0 <ull_adv_data_set+0x38>
   15a02:	462a      	mov	r2, r5
			last = 0U;
   15a04:	2500      	movs	r5, #0
   15a06:	e7cb      	b.n	159a0 <ull_adv_data_set+0x38>

00015a08 <ll_adv_data_set>:
{
   15a08:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   15a0a:	4601      	mov	r1, r0
   15a0c:	4801      	ldr	r0, [pc, #4]	; (15a14 <ll_adv_data_set+0xc>)
   15a0e:	f7ff bfab 	b.w	15968 <ull_adv_data_set>
   15a12:	bf00      	nop
   15a14:	20002d28 	.word	0x20002d28

00015a18 <ull_scan_rsp_set>:
{
   15a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   15a1c:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
	if (pdu->first == pdu->last) {
   15a20:	f890 e07b 	ldrb.w	lr, [r0, #123]	; 0x7b
   15a24:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15a28:	4605      	mov	r5, r0
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   15a2a:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
   15a2e:	f103 0061 	add.w	r0, r3, #97	; 0x61
   15a32:	f105 0c1c 	add.w	ip, r5, #28
	if (pdu->first == pdu->last) {
   15a36:	45a6      	cmp	lr, r4
   15a38:	460e      	mov	r6, r1
   15a3a:	4617      	mov	r7, r2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   15a3c:	eb0c 0100 	add.w	r1, ip, r0
	if (pdu->first == pdu->last) {
   15a40:	d020      	beq.n	15a84 <ull_scan_rsp_set+0x6c>
   15a42:	3302      	adds	r3, #2
	pdu->tx_addr = prev->tx_addr;
   15a44:	f81c 0000 	ldrb.w	r0, [ip, r0]
   15a48:	f3c0 1080 	ubfx	r0, r0, #6, #1
	return (void *)pdu->pdu[last];
   15a4c:	f105 027b 	add.w	r2, r5, #123	; 0x7b
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   15a50:	0180      	lsls	r0, r0, #6
   15a52:	eb02 0803 	add.w	r8, r2, r3
   15a56:	f040 0004 	orr.w	r0, r0, #4
   15a5a:	54d0      	strb	r0, [r2, r3]
	pdu->len = BDADDR_SIZE + len;
   15a5c:	1db3      	adds	r3, r6, #6
   15a5e:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   15a62:	3102      	adds	r1, #2
   15a64:	f108 0002 	add.w	r0, r8, #2
   15a68:	2206      	movs	r2, #6
   15a6a:	f00c fe59 	bl	22720 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   15a6e:	4632      	mov	r2, r6
   15a70:	4639      	mov	r1, r7
   15a72:	f108 0008 	add.w	r0, r8, #8
   15a76:	f00c fe53 	bl	22720 <memcpy>
	pdu->last = idx;
   15a7a:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
}
   15a7e:	2000      	movs	r0, #0
   15a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = pdu->last + 1;
   15a84:	3401      	adds	r4, #1
   15a86:	b2e4      	uxtb	r4, r4
		if (last == DOUBLE_BUFFER_SIZE) {
   15a88:	2c02      	cmp	r4, #2
   15a8a:	d004      	beq.n	15a96 <ull_scan_rsp_set+0x7e>
   15a8c:	2227      	movs	r2, #39	; 0x27
   15a8e:	2302      	movs	r3, #2
   15a90:	fb12 3304 	smlabb	r3, r2, r4, r3
   15a94:	e7d6      	b.n	15a44 <ull_scan_rsp_set+0x2c>
   15a96:	4623      	mov	r3, r4
			last = 0U;
   15a98:	2400      	movs	r4, #0
   15a9a:	e7d3      	b.n	15a44 <ull_scan_rsp_set+0x2c>

00015a9c <ll_adv_scan_rsp_set>:
{
   15a9c:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   15a9e:	4601      	mov	r1, r0
   15aa0:	4801      	ldr	r0, [pc, #4]	; (15aa8 <ll_adv_scan_rsp_set+0xc>)
   15aa2:	f7ff bfb9 	b.w	15a18 <ull_scan_rsp_set>
   15aa6:	bf00      	nop
   15aa8:	20002d28 	.word	0x20002d28

00015aac <ticker_cb>:
	return 0;
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t remainder, uint16_t lazy,
		      void *param)
{
   15aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ab0:	461c      	mov	r4, r3
   15ab2:	7c1b      	ldrb	r3, [r3, #16]
   15ab4:	3301      	adds	r3, #1
   15ab6:	b2db      	uxtb	r3, r3
   15ab8:	4680      	mov	r8, r0
   15aba:	460f      	mov	r7, r1
   15abc:	4616      	mov	r6, r2
   15abe:	7423      	strb	r3, [r4, #16]

	DEBUG_RADIO_PREPARE_O(1);

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   15ac0:	b183      	cbz	r3, 15ae4 <ticker_cb+0x38>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   15ac2:	4d17      	ldr	r5, [pc, #92]	; (15b20 <ticker_cb+0x74>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = &scan->lll;
	mfy.param = &p;
   15ac4:	4b17      	ldr	r3, [pc, #92]	; (15b24 <ticker_cb+0x78>)
	p.ticks_at_expire = ticks_at_expire;
   15ac6:	f8c5 8000 	str.w	r8, [r5]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   15aca:	2200      	movs	r2, #0
	p.param = &scan->lll;
   15acc:	341c      	adds	r4, #28
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   15ace:	4611      	mov	r1, r2
   15ad0:	2001      	movs	r0, #1
	mfy.param = &p;
   15ad2:	609d      	str	r5, [r3, #8]
	p.param = &scan->lll;
   15ad4:	60ec      	str	r4, [r5, #12]
	p.remainder = remainder;
   15ad6:	606f      	str	r7, [r5, #4]
	p.lazy = lazy;
   15ad8:	812e      	strh	r6, [r5, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   15ada:	f7fa ff9d 	bl	10a18 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   15ade:	b978      	cbnz	r0, 15b00 <ticker_cb+0x54>

	DEBUG_RADIO_PREPARE_O(1);
}
   15ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(ref);
   15ae4:	4a10      	ldr	r2, [pc, #64]	; (15b28 <ticker_cb+0x7c>)
   15ae6:	4911      	ldr	r1, [pc, #68]	; (15b2c <ticker_cb+0x80>)
   15ae8:	4811      	ldr	r0, [pc, #68]	; (15b30 <ticker_cb+0x84>)
   15aea:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   15aee:	f00a fda7 	bl	20640 <printk>
   15af2:	4040      	eors	r0, r0
   15af4:	f380 8811 	msr	BASEPRI, r0
   15af8:	f04f 0003 	mov.w	r0, #3
   15afc:	df02      	svc	2
   15afe:	e7e0      	b.n	15ac2 <ticker_cb+0x16>
	LL_ASSERT(!ret);
   15b00:	4a09      	ldr	r2, [pc, #36]	; (15b28 <ticker_cb+0x7c>)
   15b02:	490c      	ldr	r1, [pc, #48]	; (15b34 <ticker_cb+0x88>)
   15b04:	480a      	ldr	r0, [pc, #40]	; (15b30 <ticker_cb+0x84>)
   15b06:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   15b0a:	f00a fd99 	bl	20640 <printk>
   15b0e:	4040      	eors	r0, r0
   15b10:	f380 8811 	msr	BASEPRI, r0
   15b14:	f04f 0003 	mov.w	r0, #3
   15b18:	df02      	svc	2
}
   15b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15b1e:	bf00      	nop
   15b20:	20002e78 	.word	0x20002e78
   15b24:	20000490 	.word	0x20000490
   15b28:	00027390 	.word	0x00027390
   15b2c:	000272f0 	.word	0x000272f0
   15b30:	00026ecc 	.word	0x00026ecc
   15b34:	00027188 	.word	0x00027188

00015b38 <ull_scan_init>:
}
   15b38:	2000      	movs	r0, #0
   15b3a:	4770      	bx	lr

00015b3c <ull_scan_disable>:
{
   15b3c:	b530      	push	{r4, r5, lr}
   15b3e:	b085      	sub	sp, #20
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
   15b40:	2302      	movs	r3, #2
{
   15b42:	4605      	mov	r5, r0
	mark = ull_disable_mark(scan);
   15b44:	4608      	mov	r0, r1
{
   15b46:	460c      	mov	r4, r1
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
   15b48:	9303      	str	r3, [sp, #12]
	mark = ull_disable_mark(scan);
   15b4a:	f7ff fa33 	bl	14fb4 <ull_disable_mark>
	LL_ASSERT(mark == scan);
   15b4e:	4284      	cmp	r4, r0
   15b50:	d00c      	beq.n	15b6c <ull_scan_disable+0x30>
   15b52:	4a2e      	ldr	r2, [pc, #184]	; (15c0c <ull_scan_disable+0xd0>)
   15b54:	492e      	ldr	r1, [pc, #184]	; (15c10 <ull_scan_disable+0xd4>)
   15b56:	482f      	ldr	r0, [pc, #188]	; (15c14 <ull_scan_disable+0xd8>)
   15b58:	f240 1375 	movw	r3, #373	; 0x175
   15b5c:	f00a fd70 	bl	20640 <printk>
   15b60:	4040      	eors	r0, r0
   15b62:	f380 8811 	msr	BASEPRI, r0
   15b66:	f04f 0003 	mov.w	r0, #3
   15b6a:	df02      	svc	2
			  TICKER_ID_SCAN_BASE + handle,
   15b6c:	1d2a      	adds	r2, r5, #4
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   15b6e:	ad03      	add	r5, sp, #12
   15b70:	2103      	movs	r1, #3
   15b72:	4b29      	ldr	r3, [pc, #164]	; (15c18 <ull_scan_disable+0xdc>)
   15b74:	9500      	str	r5, [sp, #0]
   15b76:	b2d2      	uxtb	r2, r2
   15b78:	2000      	movs	r0, #0
   15b7a:	f7fc fb45 	bl	12208 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   15b7e:	4629      	mov	r1, r5
   15b80:	f7ff fa0a 	bl	14f98 <ull_ticker_status_take>
	if (ret) {
   15b84:	bb50      	cbnz	r0, 15bdc <ull_scan_disable+0xa0>
	ret = ull_disable(&scan->lll);
   15b86:	f104 001c 	add.w	r0, r4, #28
   15b8a:	f7ff fa4f 	bl	1502c <ull_disable>
	LL_ASSERT(!ret);
   15b8e:	b9b8      	cbnz	r0, 15bc0 <ull_scan_disable+0x84>
	mark = ull_disable_unmark(scan);
   15b90:	4620      	mov	r0, r4
   15b92:	f7ff fa1b 	bl	14fcc <ull_disable_unmark>
	LL_ASSERT(mark == scan);
   15b96:	4284      	cmp	r4, r0
   15b98:	d00f      	beq.n	15bba <ull_scan_disable+0x7e>
   15b9a:	4a1c      	ldr	r2, [pc, #112]	; (15c0c <ull_scan_disable+0xd0>)
   15b9c:	491c      	ldr	r1, [pc, #112]	; (15c10 <ull_scan_disable+0xd4>)
   15b9e:	481d      	ldr	r0, [pc, #116]	; (15c14 <ull_scan_disable+0xd8>)
   15ba0:	f240 1387 	movw	r3, #391	; 0x187
   15ba4:	f00a fd4c 	bl	20640 <printk>
   15ba8:	4040      	eors	r0, r0
   15baa:	f380 8811 	msr	BASEPRI, r0
   15bae:	f04f 0003 	mov.w	r0, #3
   15bb2:	df02      	svc	2
	return 0;
   15bb4:	2000      	movs	r0, #0
}
   15bb6:	b005      	add	sp, #20
   15bb8:	bd30      	pop	{r4, r5, pc}
	return 0;
   15bba:	2000      	movs	r0, #0
}
   15bbc:	b005      	add	sp, #20
   15bbe:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   15bc0:	4a12      	ldr	r2, [pc, #72]	; (15c0c <ull_scan_disable+0xd0>)
   15bc2:	4916      	ldr	r1, [pc, #88]	; (15c1c <ull_scan_disable+0xe0>)
   15bc4:	4813      	ldr	r0, [pc, #76]	; (15c14 <ull_scan_disable+0xd8>)
   15bc6:	f44f 73c2 	mov.w	r3, #388	; 0x184
   15bca:	f00a fd39 	bl	20640 <printk>
   15bce:	4040      	eors	r0, r0
   15bd0:	f380 8811 	msr	BASEPRI, r0
   15bd4:	f04f 0003 	mov.w	r0, #3
   15bd8:	df02      	svc	2
   15bda:	e7d9      	b.n	15b90 <ull_scan_disable+0x54>
		mark = ull_disable_unmark(scan);
   15bdc:	4620      	mov	r0, r4
   15bde:	f7ff f9f5 	bl	14fcc <ull_disable_unmark>
		LL_ASSERT(mark == scan);
   15be2:	4284      	cmp	r4, r0
   15be4:	d00f      	beq.n	15c06 <ull_scan_disable+0xca>
   15be6:	4a09      	ldr	r2, [pc, #36]	; (15c0c <ull_scan_disable+0xd0>)
   15be8:	4909      	ldr	r1, [pc, #36]	; (15c10 <ull_scan_disable+0xd4>)
   15bea:	480a      	ldr	r0, [pc, #40]	; (15c14 <ull_scan_disable+0xd8>)
   15bec:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   15bf0:	f00a fd26 	bl	20640 <printk>
   15bf4:	4040      	eors	r0, r0
   15bf6:	f380 8811 	msr	BASEPRI, r0
   15bfa:	f04f 0003 	mov.w	r0, #3
   15bfe:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   15c00:	200c      	movs	r0, #12
}
   15c02:	b005      	add	sp, #20
   15c04:	bd30      	pop	{r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15c06:	200c      	movs	r0, #12
}
   15c08:	b005      	add	sp, #20
   15c0a:	bd30      	pop	{r4, r5, pc}
   15c0c:	00027390 	.word	0x00027390
   15c10:	000273d0 	.word	0x000273d0
   15c14:	00026ecc 	.word	0x00026ecc
   15c18:	00014f8d 	.word	0x00014f8d
   15c1c:	00027188 	.word	0x00027188

00015c20 <disable.constprop.0>:

static uint8_t disable(uint8_t handle)
   15c20:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   15c22:	4c0e      	ldr	r4, [pc, #56]	; (15c5c <disable.constprop.0+0x3c>)
   15c24:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   15c28:	07db      	lsls	r3, r3, #31
   15c2a:	d501      	bpl.n	15c30 <disable.constprop.0+0x10>
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   15c2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   15c2e:	b110      	cbz	r0, 15c36 <disable.constprop.0+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15c30:	250c      	movs	r5, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   15c32:	4628      	mov	r0, r5
   15c34:	bd38      	pop	{r3, r4, r5, pc}
	ret = ull_scan_disable(handle, scan);
   15c36:	4621      	mov	r1, r4
   15c38:	f7ff ff80 	bl	15b3c <ull_scan_disable>
	if (ret) {
   15c3c:	4605      	mov	r5, r0
   15c3e:	2800      	cmp	r0, #0
   15c40:	d1f7      	bne.n	15c32 <disable.constprop.0+0x12>
	scan->is_enabled = 0U;
   15c42:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   15c46:	f360 0300 	bfi	r3, r0, #0, #1
   15c4a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ull_adv_is_enabled_get(0))
   15c4e:	f7ff fe61 	bl	15914 <ull_adv_is_enabled_get>
   15c52:	2800      	cmp	r0, #0
   15c54:	d1ed      	bne.n	15c32 <disable.constprop.0+0x12>
		ull_filter_adv_scan_state_cb(0);
   15c56:	f004 f8f9 	bl	19e4c <ull_filter_adv_scan_state_cb>
   15c5a:	e7ea      	b.n	15c32 <disable.constprop.0+0x12>
   15c5c:	20002e2c 	.word	0x20002e2c

00015c60 <ll_scan_enable>:
	if (!enable) {
   15c60:	b380      	cbz	r0, 15cc4 <ll_scan_enable+0x64>
{
   15c62:	b538      	push	{r3, r4, r5, lr}
	if (!scan || scan->is_enabled) {
   15c64:	4c1f      	ldr	r4, [pc, #124]	; (15ce4 <ll_scan_enable+0x84>)
   15c66:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   15c6a:	f013 0101 	ands.w	r1, r3, #1
   15c6e:	d135      	bne.n	15cdc <ll_scan_enable+0x7c>
	    (scan->own_addr_type & 0x1)) {
   15c70:	f3c3 0541 	ubfx	r5, r3, #1, #2
	if ((IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) && is_coded_phy &&
   15c74:	079b      	lsls	r3, r3, #30
   15c76:	d50a      	bpl.n	15c8e <ll_scan_enable+0x2e>
		if (!mem_nz(ll_addr_get(1, NULL), BDADDR_SIZE)) {
   15c78:	2001      	movs	r0, #1
   15c7a:	f7fc fb6f 	bl	1235c <ll_addr_get>
   15c7e:	2106      	movs	r1, #6
   15c80:	f7fa fe3c 	bl	108fc <mem_nz>
   15c84:	b360      	cbz	r0, 15ce0 <ll_scan_enable+0x80>
   15c86:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
   15c8a:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   15c8e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   15c92:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   15c96:	f004 f91d 	bl	19ed4 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   15c9a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   15c9e:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
   15ca2:	f36f 0300 	bfc	r3, #0, #1
	lll->rl_idx = FILTER_IDX_NONE;
   15ca6:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   15ca8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   15cac:	09d3      	lsrs	r3, r2, #7
	lll->rl_idx = FILTER_IDX_NONE;
   15cae:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
   15cb2:	d002      	beq.n	15cba <ll_scan_enable+0x5a>
   15cb4:	3d02      	subs	r5, #2
   15cb6:	2d01      	cmp	r5, #1
   15cb8:	d906      	bls.n	15cc8 <ll_scan_enable+0x68>
}
   15cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   15cbe:	4809      	ldr	r0, [pc, #36]	; (15ce4 <ll_scan_enable+0x84>)
   15cc0:	f7eb bb0a 	b.w	12d8 <ull_scan_enable>
		err = disable(SCAN_HANDLE_1M);
   15cc4:	f7ff bfac 	b.w	15c20 <disable.constprop.0>
		ull_filter_rpa_update(false);
   15cc8:	2000      	movs	r0, #0
   15cca:	f004 f9ad 	bl	1a028 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   15cce:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   15cd2:	f043 0301 	orr.w	r3, r3, #1
   15cd6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   15cda:	e7ee      	b.n	15cba <ll_scan_enable+0x5a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15cdc:	200c      	movs	r0, #12
}
   15cde:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_INVALID_PARAM;
   15ce0:	2012      	movs	r0, #18
}
   15ce2:	bd38      	pop	{r3, r4, r5, pc}
   15ce4:	20002e2c 	.word	0x20002e2c

00015ce8 <ull_scan_reset>:
{
   15ce8:	b508      	push	{r3, lr}
		(void)disable(handle);
   15cea:	f7ff ff99 	bl	15c20 <disable.constprop.0>
}
   15cee:	2000      	movs	r0, #0
   15cf0:	bd08      	pop	{r3, pc}
   15cf2:	bf00      	nop

00015cf4 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   15cf4:	4a04      	ldr	r2, [pc, #16]	; (15d08 <ull_scan_handle_get+0x14>)
   15cf6:	4b05      	ldr	r3, [pc, #20]	; (15d0c <ull_scan_handle_get+0x18>)
   15cf8:	1a80      	subs	r0, r0, r2
   15cfa:	0880      	lsrs	r0, r0, #2
   15cfc:	fba3 3000 	umull	r3, r0, r3, r0
}
   15d00:	f3c0 0047 	ubfx	r0, r0, #1, #8
   15d04:	4770      	bx	lr
   15d06:	bf00      	nop
   15d08:	20002e2c 	.word	0x20002e2c
   15d0c:	1af286bd 	.word	0x1af286bd

00015d10 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   15d10:	4a04      	ldr	r2, [pc, #16]	; (15d24 <ull_scan_lll_handle_get+0x14>)
   15d12:	6800      	ldr	r0, [r0, #0]
   15d14:	4b04      	ldr	r3, [pc, #16]	; (15d28 <ull_scan_lll_handle_get+0x18>)
   15d16:	1a80      	subs	r0, r0, r2
   15d18:	0880      	lsrs	r0, r0, #2
   15d1a:	fba3 3000 	umull	r3, r0, r3, r0
}
   15d1e:	f3c0 0047 	ubfx	r0, r0, #1, #8
   15d22:	4770      	bx	lr
   15d24:	20002e2c 	.word	0x20002e2c
   15d28:	1af286bd 	.word	0x1af286bd

00015d2c <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   15d2c:	b938      	cbnz	r0, 15d3e <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   15d2e:	4805      	ldr	r0, [pc, #20]	; (15d44 <ull_scan_is_enabled_get+0x18>)
   15d30:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
	return &ll_scan[handle];
   15d34:	f013 0f01 	tst.w	r3, #1
   15d38:	bf08      	it	eq
   15d3a:	2000      	moveq	r0, #0
   15d3c:	4770      	bx	lr
		return NULL;
   15d3e:	2000      	movs	r0, #0
}
   15d40:	4770      	bx	lr
   15d42:	bf00      	nop
   15d44:	20002e2c 	.word	0x20002e2c

00015d48 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   15d48:	4a04      	ldr	r2, [pc, #16]	; (15d5c <ull_scan_is_disabled_get+0x14>)
   15d4a:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
   15d4e:	f003 0301 	and.w	r3, r3, #1
   15d52:	4303      	orrs	r3, r0
}
   15d54:	bf0c      	ite	eq
   15d56:	4610      	moveq	r0, r2
   15d58:	2000      	movne	r0, #0
   15d5a:	4770      	bx	lr
   15d5c:	20002e2c 	.word	0x20002e2c

00015d60 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   15d60:	b988      	cbnz	r0, 15d86 <ull_scan_is_enabled+0x26>
	if (!scan || !scan->is_enabled) {
   15d62:	4a0a      	ldr	r2, [pc, #40]	; (15d8c <ull_scan_is_enabled+0x2c>)
   15d64:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
   15d68:	f013 0001 	ands.w	r0, r3, #1
   15d6c:	d00c      	beq.n	15d88 <ull_scan_is_enabled+0x28>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   15d6e:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? BIT(2) : 0) |
   15d72:	6a52      	ldr	r2, [r2, #36]	; 0x24
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   15d74:	f003 0301 	and.w	r3, r3, #1
   15d78:	09c0      	lsrs	r0, r0, #7
   15d7a:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? BIT(2) : 0) |
   15d7e:	b11a      	cbz	r2, 15d88 <ull_scan_is_enabled+0x28>
   15d80:	f040 0004 	orr.w	r0, r0, #4
   15d84:	4770      	bx	lr
		return 0;
   15d86:	2000      	movs	r0, #0
}
   15d88:	4770      	bx	lr
   15d8a:	bf00      	nop
   15d8c:	20002e2c 	.word	0x20002e2c

00015d90 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   15d90:	b950      	cbnz	r0, 15da8 <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   15d92:	4b06      	ldr	r3, [pc, #24]	; (15dac <ull_scan_filter_pol_get+0x1c>)
   15d94:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
   15d98:	f010 0001 	ands.w	r0, r0, #1
   15d9c:	d005      	beq.n	15daa <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   15d9e:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   15da2:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   15da6:	4770      	bx	lr
		return 0;
   15da8:	2000      	movs	r0, #0
}
   15daa:	4770      	bx	lr
   15dac:	20002e2c 	.word	0x20002e2c

00015db0 <tx_ull_dequeue>:
{
   15db0:	b410      	push	{r4}
   15db2:	e9d0 246c 	ldrd	r2, r4, [r0, #432]	; 0x1b0
   15db6:	4603      	mov	r3, r0
   15db8:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   15dba:	b164      	cbz	r4, 15dd6 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   15dbc:	4294      	cmp	r4, r2
   15dbe:	d027      	beq.n	15e10 <tx_ull_dequeue+0x60>
		if (conn->tx_head == conn->tx_data) {
   15dc0:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
   15dc4:	4291      	cmp	r1, r2
   15dc6:	d018      	beq.n	15dfa <tx_ull_dequeue+0x4a>
		conn->tx_head = conn->tx_head->next;
   15dc8:	6812      	ldr	r2, [r2, #0]
   15dca:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		tx->next = NULL;
   15dce:	2300      	movs	r3, #0
}
   15dd0:	bc10      	pop	{r4}
		tx->next = NULL;
   15dd2:	6003      	str	r3, [r0, #0]
}
   15dd4:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   15dd6:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
   15dda:	4291      	cmp	r1, r2
   15ddc:	d023      	beq.n	15e26 <tx_ull_dequeue+0x76>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15dde:	7911      	ldrb	r1, [r2, #4]
   15de0:	f001 0103 	and.w	r1, r1, #3
   15de4:	2903      	cmp	r1, #3
   15de6:	d00d      	beq.n	15e04 <tx_ull_dequeue+0x54>
		conn->tx_head = conn->tx_head->next;
   15de8:	6812      	ldr	r2, [r2, #0]
   15dea:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
			conn->tx_ctrl = NULL;
   15dee:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   15df0:	e9c3 226d 	strd	r2, r2, [r3, #436]	; 0x1b4
}
   15df4:	bc10      	pop	{r4}
		tx->next = tx;
   15df6:	6000      	str	r0, [r0, #0]
}
   15df8:	4770      	bx	lr
   15dfa:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   15dfc:	6809      	ldr	r1, [r1, #0]
   15dfe:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
   15e02:	e7e1      	b.n	15dc8 <tx_ull_dequeue+0x18>
		    ((pdu_data_tx->llctrl.opcode !=
   15e04:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15e06:	2903      	cmp	r1, #3
   15e08:	d0de      	beq.n	15dc8 <tx_ull_dequeue+0x18>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15e0a:	290a      	cmp	r1, #10
   15e0c:	d1ec      	bne.n	15de8 <tx_ull_dequeue+0x38>
   15e0e:	e7db      	b.n	15dc8 <tx_ull_dequeue+0x18>
   15e10:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
		conn->tx_head = conn->tx_head->next;
   15e14:	6812      	ldr	r2, [r2, #0]
   15e16:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   15e1a:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   15e1c:	bf18      	it	ne
   15e1e:	f8c3 21b4 	strne.w	r2, [r3, #436]	; 0x1b4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   15e22:	d1e7      	bne.n	15df4 <tx_ull_dequeue+0x44>
   15e24:	e7e3      	b.n	15dee <tx_ull_dequeue+0x3e>
	if (conn->tx_head == conn->tx_ctrl) {
   15e26:	2a00      	cmp	r2, #0
   15e28:	d1e8      	bne.n	15dfc <tx_ull_dequeue+0x4c>
   15e2a:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
   15e2e:	4614      	mov	r4, r2
   15e30:	e7f0      	b.n	15e14 <tx_ull_dequeue+0x64>
   15e32:	bf00      	nop

00015e34 <calc_eff_time>:
	uint16_t time = PKT_US(max_octets, phy);
   15e34:	074b      	lsls	r3, r1, #29
   15e36:	d50c      	bpl.n	15e52 <calc_eff_time+0x1e>
   15e38:	0181      	lsls	r1, r0, #6
	eff_time = MIN(eff_time, default_time);
   15e3a:	f501 7074 	add.w	r0, r1, #976	; 0x3d0
   15e3e:	4290      	cmp	r0, r2
   15e40:	bf28      	it	cs
   15e42:	4610      	movcs	r0, r2
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   15e44:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   15e48:	4288      	cmp	r0, r1
   15e4a:	bf38      	it	cc
   15e4c:	4608      	movcc	r0, r1
}
   15e4e:	b280      	uxth	r0, r0
   15e50:	4770      	bx	lr
{
   15e52:	b410      	push	{r4}
	uint16_t time = PKT_US(max_octets, phy);
   15e54:	f100 040d 	add.w	r4, r0, #13
   15e58:	f001 0003 	and.w	r0, r1, #3
   15e5c:	4404      	add	r4, r0
   15e5e:	f3c1 0140 	ubfx	r1, r1, #1, #1
   15e62:	00e4      	lsls	r4, r4, #3
   15e64:	40cc      	lsrs	r4, r1
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
   15e66:	b2a3      	uxth	r3, r4
   15e68:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   15e6c:	f100 0028 	add.w	r0, r0, #40	; 0x28
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
   15e70:	bf38      	it	cc
   15e72:	f44f 73a4 	movcc.w	r3, #328	; 0x148
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   15e76:	00c4      	lsls	r4, r0, #3
	eff_time = MIN(eff_time, default_time);
   15e78:	429a      	cmp	r2, r3
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   15e7a:	fa24 f101 	lsr.w	r1, r4, r1
	eff_time = MIN(eff_time, default_time);
   15e7e:	bf28      	it	cs
   15e80:	461a      	movcs	r2, r3
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   15e82:	428a      	cmp	r2, r1
	eff_time = MIN(eff_time, default_time);
   15e84:	4610      	mov	r0, r2
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   15e86:	bf38      	it	cc
   15e88:	4608      	movcc	r0, r1
}
   15e8a:	b280      	uxth	r0, r0
   15e8c:	bc10      	pop	{r4}
   15e8e:	4770      	bx	lr

00015e90 <ticker_update_latency_cancel_op_cb>:
{
   15e90:	b510      	push	{r4, lr}
   15e92:	460c      	mov	r4, r1
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   15e94:	b930      	cbnz	r0, 15ea4 <ticker_update_latency_cancel_op_cb+0x14>
	conn->slave.latency_cancel = 0U;
   15e96:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   15e9a:	f36f 0341 	bfc	r3, #1, #1
   15e9e:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   15ea2:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   15ea4:	4a09      	ldr	r2, [pc, #36]	; (15ecc <ticker_update_latency_cancel_op_cb+0x3c>)
   15ea6:	490a      	ldr	r1, [pc, #40]	; (15ed0 <ticker_update_latency_cancel_op_cb+0x40>)
   15ea8:	480a      	ldr	r0, [pc, #40]	; (15ed4 <ticker_update_latency_cancel_op_cb+0x44>)
   15eaa:	f240 6349 	movw	r3, #1609	; 0x649
   15eae:	f00a fbc7 	bl	20640 <printk>
   15eb2:	4040      	eors	r0, r0
   15eb4:	f380 8811 	msr	BASEPRI, r0
   15eb8:	f04f 0003 	mov.w	r0, #3
   15ebc:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   15ebe:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   15ec2:	f36f 0341 	bfc	r3, #1, #1
   15ec6:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   15eca:	bd10      	pop	{r4, pc}
   15ecc:	000273f4 	.word	0x000273f4
   15ed0:	00027434 	.word	0x00027434
   15ed4:	00026ecc 	.word	0x00026ecc

00015ed8 <ctrl_tx_pause_enqueue>:
{
   15ed8:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
   15eda:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
{
   15ede:	4604      	mov	r4, r0
   15ee0:	460d      	mov	r5, r1
	if (
   15ee2:	b11b      	cbz	r3, 15eec <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   15ee4:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
	    conn->tx_head &&
   15ee8:	0788      	lsls	r0, r1, #30
   15eea:	d50d      	bpl.n	15f08 <ctrl_tx_pause_enqueue+0x30>
		if (!conn->tx_ctrl) {
   15eec:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   15ef0:	b301      	cbz	r1, 15f34 <ctrl_tx_pause_enqueue+0x5c>
			LL_ASSERT(!pause);
   15ef2:	bb4a      	cbnz	r2, 15f48 <ctrl_tx_pause_enqueue+0x70>
	tx->next = conn->tx_ctrl_last->next;
   15ef4:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   15ef8:	681a      	ldr	r2, [r3, #0]
   15efa:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   15efc:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   15efe:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
   15f02:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   15f04:	b19b      	cbz	r3, 15f2e <ctrl_tx_pause_enqueue+0x56>
}
   15f06:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   15f08:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
   15f0c:	07c9      	lsls	r1, r1, #31
   15f0e:	d4ed      	bmi.n	15eec <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   15f10:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   15f14:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   15f16:	bf04      	itt	eq
   15f18:	6819      	ldreq	r1, [r3, #0]
   15f1a:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   15f1e:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   15f22:	b1f9      	cbz	r1, 15f64 <ctrl_tx_pause_enqueue+0x8c>
			LL_ASSERT(!pause);
   15f24:	2a00      	cmp	r2, #0
   15f26:	d0e5      	beq.n	15ef4 <ctrl_tx_pause_enqueue+0x1c>
   15f28:	f240 735b 	movw	r3, #1883	; 0x75b
   15f2c:	e00e      	b.n	15f4c <ctrl_tx_pause_enqueue+0x74>
		conn->tx_data_last = tx;
   15f2e:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
   15f32:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   15f34:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   15f36:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
			if (!pause) {
   15f3a:	2a00      	cmp	r2, #0
   15f3c:	d1e2      	bne.n	15f04 <ctrl_tx_pause_enqueue+0x2c>
				conn->tx_ctrl_last = tx;
   15f3e:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
	if (!tx->next) {
   15f42:	2b00      	cmp	r3, #0
   15f44:	d1df      	bne.n	15f06 <ctrl_tx_pause_enqueue+0x2e>
   15f46:	e7f2      	b.n	15f2e <ctrl_tx_pause_enqueue+0x56>
			LL_ASSERT(!pause);
   15f48:	f240 736d 	movw	r3, #1901	; 0x76d
   15f4c:	4a0b      	ldr	r2, [pc, #44]	; (15f7c <ctrl_tx_pause_enqueue+0xa4>)
   15f4e:	490c      	ldr	r1, [pc, #48]	; (15f80 <ctrl_tx_pause_enqueue+0xa8>)
   15f50:	480c      	ldr	r0, [pc, #48]	; (15f84 <ctrl_tx_pause_enqueue+0xac>)
   15f52:	f00a fb75 	bl	20640 <printk>
   15f56:	4040      	eors	r0, r0
   15f58:	f380 8811 	msr	BASEPRI, r0
   15f5c:	f04f 0003 	mov.w	r0, #3
   15f60:	df02      	svc	2
   15f62:	e7c7      	b.n	15ef4 <ctrl_tx_pause_enqueue+0x1c>
			tx->next = conn->tx_head->next;
   15f64:	6819      	ldr	r1, [r3, #0]
   15f66:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   15f68:	601d      	str	r5, [r3, #0]
			if (!pause) {
   15f6a:	2a00      	cmp	r2, #0
   15f6c:	d1c9      	bne.n	15f02 <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
   15f6e:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
   15f72:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   15f74:	2b00      	cmp	r3, #0
   15f76:	d1c6      	bne.n	15f06 <ctrl_tx_pause_enqueue+0x2e>
   15f78:	e7d9      	b.n	15f2e <ctrl_tx_pause_enqueue+0x56>
   15f7a:	bf00      	nop
   15f7c:	000273f4 	.word	0x000273f4
   15f80:	00027448 	.word	0x00027448
   15f84:	00026ecc 	.word	0x00026ecc

00015f88 <init_reset>:
{
   15f88:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   15f8a:	4814      	ldr	r0, [pc, #80]	; (15fdc <init_reset+0x54>)
   15f8c:	4b14      	ldr	r3, [pc, #80]	; (15fe0 <init_reset+0x58>)
   15f8e:	2202      	movs	r2, #2
   15f90:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   15f94:	f7fa fc3a 	bl	1080c <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   15f98:	4b12      	ldr	r3, [pc, #72]	; (15fe4 <init_reset+0x5c>)
   15f9a:	220a      	movs	r2, #10
   15f9c:	1d18      	adds	r0, r3, #4
   15f9e:	f44f 7182 	mov.w	r1, #260	; 0x104
   15fa2:	f7fa fc33 	bl	1080c <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   15fa6:	4b10      	ldr	r3, [pc, #64]	; (15fe8 <init_reset+0x60>)
   15fa8:	2204      	movs	r2, #4
   15faa:	1898      	adds	r0, r3, r2
   15fac:	2120      	movs	r1, #32
   15fae:	f7fa fc2d 	bl	1080c <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   15fb2:	4b0e      	ldr	r3, [pc, #56]	; (15fec <init_reset+0x64>)
   15fb4:	220e      	movs	r2, #14
   15fb6:	1d18      	adds	r0, r3, #4
   15fb8:	2108      	movs	r1, #8
   15fba:	f7fa fc27 	bl	1080c <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   15fbe:	4b0c      	ldr	r3, [pc, #48]	; (15ff0 <init_reset+0x68>)
	default_phy_tx |= BIT(2);
   15fc0:	490c      	ldr	r1, [pc, #48]	; (15ff4 <init_reset+0x6c>)
	default_phy_rx |= BIT(2);
   15fc2:	4a0d      	ldr	r2, [pc, #52]	; (15ff8 <init_reset+0x70>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   15fc4:	480d      	ldr	r0, [pc, #52]	; (15ffc <init_reset+0x74>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   15fc6:	251b      	movs	r5, #27
   15fc8:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= BIT(2);
   15fca:	2307      	movs	r3, #7
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   15fcc:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= BIT(2);
   15fd0:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= BIT(2);
   15fd2:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   15fd4:	8004      	strh	r4, [r0, #0]
}
   15fd6:	2000      	movs	r0, #0
   15fd8:	bd38      	pop	{r3, r4, r5, pc}
   15fda:	bf00      	nop
   15fdc:	20002e8c 	.word	0x20002e8c
   15fe0:	20002e88 	.word	0x20002e88
   15fe4:	20003228 	.word	0x20003228
   15fe8:	20003c54 	.word	0x20003c54
   15fec:	20003cd8 	.word	0x20003cd8
   15ff0:	20004ce8 	.word	0x20004ce8
   15ff4:	20005389 	.word	0x20005389
   15ff8:	20005388 	.word	0x20005388
   15ffc:	20004cea 	.word	0x20004cea

00016000 <tx_lll_flush>:
{
   16000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   16004:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   16008:	4935      	ldr	r1, [pc, #212]	; (160e0 <tx_lll_flush+0xe0>)
{
   1600a:	b083      	sub	sp, #12
   1600c:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1600e:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   16012:	4640      	mov	r0, r8
   16014:	f7fa fc5e 	bl	108d4 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   16018:	f105 064c 	add.w	r6, r5, #76	; 0x4c
	lll_conn_flush(handle, lll);
   1601c:	4629      	mov	r1, r5
   1601e:	f006 fd1f 	bl	1ca60 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   16022:	6d28      	ldr	r0, [r5, #80]	; 0x50
   16024:	4631      	mov	r1, r6
   16026:	aa01      	add	r2, sp, #4
   16028:	f7fa fc92 	bl	10950 <memq_dequeue>
	while (link) {
   1602c:	b340      	cbz	r0, 16080 <tx_lll_flush+0x80>
   1602e:	4c2d      	ldr	r4, [pc, #180]	; (160e4 <tx_lll_flush+0xe4>)
		lll_tx->handle = 0xFFFF;
   16030:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   16034:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   16038:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   1603a:	f894 c001 	ldrb.w	ip, [r4, #1]
   1603e:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   16040:	1c4b      	adds	r3, r1, #1
   16042:	b2db      	uxtb	r3, r3
		last = 0U;
   16044:	459c      	cmp	ip, r3
   16046:	bf08      	it	eq
   16048:	2300      	moveq	r3, #0
	if (last == first) {
   1604a:	429a      	cmp	r2, r3
   1604c:	d038      	beq.n	160c0 <tx_lll_flush+0xc0>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1604e:	7822      	ldrb	r2, [r4, #0]
   16050:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   16054:	eb19 0e02 	adds.w	lr, r9, r2
   16058:	d032      	beq.n	160c0 <tx_lll_flush+0xc0>
		lll_tx->node = tx;
   1605a:	f8dd c004 	ldr.w	ip, [sp, #4]
		lll_tx->handle = 0xFFFF;
   1605e:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   16062:	f8dc 1000 	ldr.w	r1, [ip]
		lll_tx->node = tx;
   16066:	f8ce c004 	str.w	ip, [lr, #4]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1606a:	aa01      	add	r2, sp, #4
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1606c:	6001      	str	r1, [r0, #0]
		tx->next = link;
   1606e:	f8cc 0000 	str.w	r0, [ip]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   16072:	4631      	mov	r1, r6
   16074:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
   16076:	70e3      	strb	r3, [r4, #3]
   16078:	f7fa fc6a 	bl	10950 <memq_dequeue>
	while (link) {
   1607c:	2800      	cmp	r0, #0
   1607e:	d1db      	bne.n	16038 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   16080:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
	rx = (void *)&conn->llcp_terminate.node_rx;
   16084:	f508 7498 	add.w	r4, r8, #304	; 0x130
	LL_ASSERT(rx->hdr.link);
   16088:	b150      	cbz	r0, 160a0 <tx_lll_flush+0xa0>
	rx->hdr.link = NULL;
   1608a:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   1608c:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   1608e:	f8c8 3130 	str.w	r3, [r8, #304]	; 0x130
	ull_rx_put(link, rx);
   16092:	f7ff f83f 	bl	15114 <ull_rx_put>
	ull_rx_sched();
   16096:	f7ff f84d 	bl	15134 <ull_rx_sched>
}
   1609a:	b003      	add	sp, #12
   1609c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   160a0:	4a11      	ldr	r2, [pc, #68]	; (160e8 <tx_lll_flush+0xe8>)
   160a2:	4912      	ldr	r1, [pc, #72]	; (160ec <tx_lll_flush+0xec>)
   160a4:	4812      	ldr	r0, [pc, #72]	; (160f0 <tx_lll_flush+0xf0>)
   160a6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
   160aa:	f00a fac9 	bl	20640 <printk>
   160ae:	4040      	eors	r0, r0
   160b0:	f380 8811 	msr	BASEPRI, r0
   160b4:	f04f 0003 	mov.w	r0, #3
   160b8:	df02      	svc	2
   160ba:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
   160be:	e7e4      	b.n	1608a <tx_lll_flush+0x8a>
		LL_ASSERT(lll_tx);
   160c0:	4a09      	ldr	r2, [pc, #36]	; (160e8 <tx_lll_flush+0xe8>)
   160c2:	490c      	ldr	r1, [pc, #48]	; (160f4 <tx_lll_flush+0xf4>)
   160c4:	480a      	ldr	r0, [pc, #40]	; (160f0 <tx_lll_flush+0xf0>)
   160c6:	f240 63ec 	movw	r3, #1772	; 0x6ec
   160ca:	f00a fab9 	bl	20640 <printk>
   160ce:	4040      	eors	r0, r0
   160d0:	f380 8811 	msr	BASEPRI, r0
   160d4:	f04f 0003 	mov.w	r0, #3
   160d8:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   160da:	2300      	movs	r3, #0
   160dc:	801b      	strh	r3, [r3, #0]
   160de:	deff      	udf	#255	; 0xff
   160e0:	20002e8c 	.word	0x20002e8c
   160e4:	200004a0 	.word	0x200004a0
   160e8:	000273f4 	.word	0x000273f4
   160ec:	00027458 	.word	0x00027458
   160f0:	00026ecc 	.word	0x00026ecc
   160f4:	00027450 	.word	0x00027450

000160f8 <ticker_op_stop_cb>:
{
   160f8:	b510      	push	{r4, lr}
   160fa:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   160fc:	b9b0      	cbnz	r0, 1612c <ticker_op_stop_cb+0x34>
	mfy.param = param;
   160fe:	4b12      	ldr	r3, [pc, #72]	; (16148 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   16100:	2200      	movs	r2, #0
   16102:	4611      	mov	r1, r2
   16104:	2002      	movs	r0, #2
	mfy.param = param;
   16106:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   16108:	f7fa fc86 	bl	10a18 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1610c:	b900      	cbnz	r0, 16110 <ticker_op_stop_cb+0x18>
}
   1610e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   16110:	4a0e      	ldr	r2, [pc, #56]	; (1614c <ticker_op_stop_cb+0x54>)
   16112:	490f      	ldr	r1, [pc, #60]	; (16150 <ticker_op_stop_cb+0x58>)
   16114:	480f      	ldr	r0, [pc, #60]	; (16154 <ticker_op_stop_cb+0x5c>)
   16116:	f240 6379 	movw	r3, #1657	; 0x679
   1611a:	f00a fa91 	bl	20640 <printk>
   1611e:	4040      	eors	r0, r0
   16120:	f380 8811 	msr	BASEPRI, r0
   16124:	f04f 0003 	mov.w	r0, #3
   16128:	df02      	svc	2
}
   1612a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1612c:	4a07      	ldr	r2, [pc, #28]	; (1614c <ticker_op_stop_cb+0x54>)
   1612e:	490a      	ldr	r1, [pc, #40]	; (16158 <ticker_op_stop_cb+0x60>)
   16130:	4808      	ldr	r0, [pc, #32]	; (16154 <ticker_op_stop_cb+0x5c>)
   16132:	f240 6372 	movw	r3, #1650	; 0x672
   16136:	f00a fa83 	bl	20640 <printk>
   1613a:	4040      	eors	r0, r0
   1613c:	f380 8811 	msr	BASEPRI, r0
   16140:	f04f 0003 	mov.w	r0, #3
   16144:	df02      	svc	2
   16146:	e7da      	b.n	160fe <ticker_op_stop_cb+0x6>
   16148:	20000578 	.word	0x20000578
   1614c:	000273f4 	.word	0x000273f4
   16150:	000271b0 	.word	0x000271b0
   16154:	00026ecc 	.word	0x00026ecc
   16158:	00027468 	.word	0x00027468

0001615c <ticker_start_conn_op_cb>:
{
   1615c:	b510      	push	{r4, lr}
   1615e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   16160:	b990      	cbnz	r0, 16188 <ticker_start_conn_op_cb+0x2c>
	void *p = ull_update_unmark(param);
   16162:	4620      	mov	r0, r4
   16164:	f7fe ff50 	bl	15008 <ull_update_unmark>
	LL_ASSERT(p == param);
   16168:	4284      	cmp	r4, r0
   1616a:	d00c      	beq.n	16186 <ticker_start_conn_op_cb+0x2a>
   1616c:	4a0d      	ldr	r2, [pc, #52]	; (161a4 <ticker_start_conn_op_cb+0x48>)
   1616e:	490e      	ldr	r1, [pc, #56]	; (161a8 <ticker_start_conn_op_cb+0x4c>)
   16170:	480e      	ldr	r0, [pc, #56]	; (161ac <ticker_start_conn_op_cb+0x50>)
   16172:	f240 6369 	movw	r3, #1641	; 0x669
   16176:	f00a fa63 	bl	20640 <printk>
   1617a:	4040      	eors	r0, r0
   1617c:	f380 8811 	msr	BASEPRI, r0
   16180:	f04f 0003 	mov.w	r0, #3
   16184:	df02      	svc	2
}
   16186:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   16188:	4a06      	ldr	r2, [pc, #24]	; (161a4 <ticker_start_conn_op_cb+0x48>)
   1618a:	4909      	ldr	r1, [pc, #36]	; (161b0 <ticker_start_conn_op_cb+0x54>)
   1618c:	4807      	ldr	r0, [pc, #28]	; (161ac <ticker_start_conn_op_cb+0x50>)
   1618e:	f240 6365 	movw	r3, #1637	; 0x665
   16192:	f00a fa55 	bl	20640 <printk>
   16196:	4040      	eors	r0, r0
   16198:	f380 8811 	msr	BASEPRI, r0
   1619c:	f04f 0003 	mov.w	r0, #3
   161a0:	df02      	svc	2
   161a2:	e7de      	b.n	16162 <ticker_start_conn_op_cb+0x6>
   161a4:	000273f4 	.word	0x000273f4
   161a8:	00027474 	.word	0x00027474
   161ac:	00026ecc 	.word	0x00026ecc
   161b0:	00027468 	.word	0x00027468

000161b4 <ticker_stop_conn_op_cb>:
{
   161b4:	b510      	push	{r4, lr}
   161b6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   161b8:	b990      	cbnz	r0, 161e0 <ticker_stop_conn_op_cb+0x2c>
	void *p = ull_update_mark(param);
   161ba:	4620      	mov	r0, r4
   161bc:	f7fe ff18 	bl	14ff0 <ull_update_mark>
	LL_ASSERT(p == param);
   161c0:	4284      	cmp	r4, r0
   161c2:	d00c      	beq.n	161de <ticker_stop_conn_op_cb+0x2a>
   161c4:	4a0d      	ldr	r2, [pc, #52]	; (161fc <ticker_stop_conn_op_cb+0x48>)
   161c6:	490e      	ldr	r1, [pc, #56]	; (16200 <ticker_stop_conn_op_cb+0x4c>)
   161c8:	480e      	ldr	r0, [pc, #56]	; (16204 <ticker_stop_conn_op_cb+0x50>)
   161ca:	f44f 63cc 	mov.w	r3, #1632	; 0x660
   161ce:	f00a fa37 	bl	20640 <printk>
   161d2:	4040      	eors	r0, r0
   161d4:	f380 8811 	msr	BASEPRI, r0
   161d8:	f04f 0003 	mov.w	r0, #3
   161dc:	df02      	svc	2
}
   161de:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   161e0:	4a06      	ldr	r2, [pc, #24]	; (161fc <ticker_stop_conn_op_cb+0x48>)
   161e2:	4909      	ldr	r1, [pc, #36]	; (16208 <ticker_stop_conn_op_cb+0x54>)
   161e4:	4807      	ldr	r0, [pc, #28]	; (16204 <ticker_stop_conn_op_cb+0x50>)
   161e6:	f240 635c 	movw	r3, #1628	; 0x65c
   161ea:	f00a fa29 	bl	20640 <printk>
   161ee:	4040      	eors	r0, r0
   161f0:	f380 8811 	msr	BASEPRI, r0
   161f4:	f04f 0003 	mov.w	r0, #3
   161f8:	df02      	svc	2
   161fa:	e7de      	b.n	161ba <ticker_stop_conn_op_cb+0x6>
   161fc:	000273f4 	.word	0x000273f4
   16200:	00027474 	.word	0x00027474
   16204:	00026ecc 	.word	0x00026ecc
   16208:	00027468 	.word	0x00027468

0001620c <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1620c:	b900      	cbnz	r0, 16210 <ticker_update_conn_op_cb+0x4>
   1620e:	4770      	bx	lr
{
   16210:	b510      	push	{r4, lr}
   16212:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   16214:	f7fe ff04 	bl	15020 <ull_update_mark_get>
   16218:	4284      	cmp	r4, r0
   1621a:	d010      	beq.n	1623e <ticker_update_conn_op_cb+0x32>
   1621c:	f7fe fee2 	bl	14fe4 <ull_disable_mark_get>
   16220:	4284      	cmp	r4, r0
   16222:	d00c      	beq.n	1623e <ticker_update_conn_op_cb+0x32>
   16224:	4a06      	ldr	r2, [pc, #24]	; (16240 <ticker_update_conn_op_cb+0x34>)
   16226:	4907      	ldr	r1, [pc, #28]	; (16244 <ticker_update_conn_op_cb+0x38>)
   16228:	4807      	ldr	r0, [pc, #28]	; (16248 <ticker_update_conn_op_cb+0x3c>)
   1622a:	f240 6355 	movw	r3, #1621	; 0x655
   1622e:	f00a fa07 	bl	20640 <printk>
   16232:	4040      	eors	r0, r0
   16234:	f380 8811 	msr	BASEPRI, r0
   16238:	f04f 0003 	mov.w	r0, #3
   1623c:	df02      	svc	2
}
   1623e:	bd10      	pop	{r4, pc}
   16240:	000273f4 	.word	0x000273f4
   16244:	00027480 	.word	0x00027480
   16248:	00026ecc 	.word	0x00026ecc

0001624c <ll_connected_get.part.0>:
struct ll_conn *ll_connected_get(uint16_t handle)
   1624c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1624e:	4602      	mov	r2, r0
struct ll_conn *ll_connected_get(uint16_t handle)
   16250:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16252:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   16256:	4804      	ldr	r0, [pc, #16]	; (16268 <ll_connected_get.part.0+0x1c>)
   16258:	f7fa fb38 	bl	108cc <mem_get>
	if (conn->lll.handle != handle) {
   1625c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
}
   1625e:	42a3      	cmp	r3, r4
   16260:	bf18      	it	ne
   16262:	2000      	movne	r0, #0
   16264:	bd10      	pop	{r4, pc}
   16266:	bf00      	nop
   16268:	20002e8c 	.word	0x20002e8c

0001626c <reject_ext_ind_send.isra.0>:

	return 0;
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1626c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16270:	4605      	mov	r5, r0
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16272:	4826      	ldr	r0, [pc, #152]	; (1630c <reject_ext_ind_send.isra.0+0xa0>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   16274:	460e      	mov	r6, r1
   16276:	4690      	mov	r8, r2
   16278:	461f      	mov	r7, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1627a:	f7fa faf5 	bl	10868 <mem_acquire>
	if (!tx) {
   1627e:	2800      	cmp	r0, #0
   16280:	d041      	beq.n	16306 <reject_ext_ind_send.isra.0+0x9a>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   16282:	2303      	movs	r3, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16284:	7904      	ldrb	r4, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   16286:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   16288:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   1628c:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16290:	4323      	orrs	r3, r4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   16292:	2111      	movs	r1, #17
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   16294:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16296:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   16298:	71c1      	strb	r1, [r0, #7]
	if (
   1629a:	b11a      	cbz	r2, 162a4 <reject_ext_ind_send.isra.0+0x38>
	    !conn->llcp_enc.pause_tx &&
   1629c:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	    conn->tx_head &&
   162a0:	0799      	lsls	r1, r3, #30
   162a2:	d510      	bpl.n	162c6 <reject_ext_ind_send.isra.0+0x5a>
		if (!conn->tx_ctrl) {
   162a4:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   162a8:	b33b      	cbz	r3, 162fa <reject_ext_ind_send.isra.0+0x8e>
	tx->next = conn->tx_ctrl_last->next;
   162aa:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
   162ae:	681a      	ldr	r2, [r3, #0]
   162b0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   162b2:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   162b4:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   162b8:	6802      	ldr	r2, [r0, #0]
	if (!tx->next) {
   162ba:	b1da      	cbz	r2, 162f4 <reject_ext_ind_send.isra.0+0x88>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   162bc:	2303      	movs	r3, #3
   162be:	7033      	strb	r3, [r6, #0]

	return 0;
   162c0:	2000      	movs	r0, #0
}
   162c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    !conn->llcp_phy.pause_tx &&
   162c6:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   162ca:	07db      	lsls	r3, r3, #31
   162cc:	d4ea      	bmi.n	162a4 <reject_ext_ind_send.isra.0+0x38>
		if (conn->tx_head == conn->tx_data) {
   162ce:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   162d2:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   162d4:	bf04      	itt	eq
   162d6:	6813      	ldreq	r3, [r2, #0]
   162d8:	f8c5 31bc 	streq.w	r3, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   162dc:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   162e0:	2b00      	cmp	r3, #0
   162e2:	d1e2      	bne.n	162aa <reject_ext_ind_send.isra.0+0x3e>
			tx->next = conn->tx_head->next;
   162e4:	6813      	ldr	r3, [r2, #0]
   162e6:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   162e8:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   162ea:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   162ec:	e9c5 006d 	strd	r0, r0, [r5, #436]	; 0x1b4
	if (!tx->next) {
   162f0:	2a00      	cmp	r2, #0
   162f2:	d1e3      	bne.n	162bc <reject_ext_ind_send.isra.0+0x50>
		conn->tx_data_last = tx;
   162f4:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
   162f8:	e7e0      	b.n	162bc <reject_ext_ind_send.isra.0+0x50>
			tx->next = conn->tx_head;
   162fa:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   162fc:	e9c5 006c 	strd	r0, r0, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   16300:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   16304:	e7d9      	b.n	162ba <reject_ext_ind_send.isra.0+0x4e>
		return -ENOBUFS;
   16306:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1630a:	e7da      	b.n	162c2 <reject_ext_ind_send.isra.0+0x56>
   1630c:	20003c54 	.word	0x20003c54

00016310 <start_enc_rsp_send>:
{
   16310:	b570      	push	{r4, r5, r6, lr}
   16312:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   16314:	b179      	cbz	r1, 16336 <start_enc_rsp_send+0x26>
	conn->lll.enc_tx = 1;
   16316:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1631a:	780b      	ldrb	r3, [r1, #0]
	conn->lll.enc_tx = 1;
   1631c:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16320:	2601      	movs	r6, #1
	conn->lll.enc_tx = 1;
   16322:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16326:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1632a:	2506      	movs	r5, #6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1632c:	704e      	strb	r6, [r1, #1]
	return 0;
   1632e:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16330:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   16332:	70cd      	strb	r5, [r1, #3]
}
   16334:	bd70      	pop	{r4, r5, r6, pc}
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16336:	4826      	ldr	r0, [pc, #152]	; (163d0 <start_enc_rsp_send+0xc0>)
   16338:	f7fa fa96 	bl	10868 <mem_acquire>
		if (!tx) {
   1633c:	2800      	cmp	r0, #0
   1633e:	d043      	beq.n	163c8 <start_enc_rsp_send+0xb8>
	conn->lll.enc_tx = 1;
   16340:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16344:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
   16346:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1634a:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
   1634c:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16350:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   16352:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16356:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1635a:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1635c:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1635e:	71c1      	strb	r1, [r0, #7]
	if (
   16360:	b1e3      	cbz	r3, 1639c <start_enc_rsp_send+0x8c>
	    !conn->llcp_enc.pause_tx &&
   16362:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
   16366:	0791      	lsls	r1, r2, #30
   16368:	d418      	bmi.n	1639c <start_enc_rsp_send+0x8c>
	    !conn->llcp_phy.pause_tx &&
   1636a:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
   1636e:	07d2      	lsls	r2, r2, #31
   16370:	d414      	bmi.n	1639c <start_enc_rsp_send+0x8c>
		if (conn->tx_head == conn->tx_data) {
   16372:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
   16376:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   16378:	bf04      	itt	eq
   1637a:	681a      	ldreq	r2, [r3, #0]
   1637c:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   16380:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   16384:	b1ca      	cbz	r2, 163ba <start_enc_rsp_send+0xaa>
	tx->next = conn->tx_ctrl_last->next;
   16386:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   1638a:	681a      	ldr	r2, [r3, #0]
   1638c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1638e:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   16390:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
   16394:	6803      	ldr	r3, [r0, #0]
	if (!tx->next) {
   16396:	b163      	cbz	r3, 163b2 <start_enc_rsp_send+0xa2>
	return 0;
   16398:	2000      	movs	r0, #0
}
   1639a:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   1639c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   163a0:	2a00      	cmp	r2, #0
   163a2:	d1f0      	bne.n	16386 <start_enc_rsp_send+0x76>
			tx->next = conn->tx_head;
   163a4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   163a6:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   163aa:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
   163ae:	2b00      	cmp	r3, #0
   163b0:	d1f2      	bne.n	16398 <start_enc_rsp_send+0x88>
		conn->tx_data_last = tx;
   163b2:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
	return 0;
   163b6:	4618      	mov	r0, r3
}
   163b8:	bd70      	pop	{r4, r5, r6, pc}
			tx->next = conn->tx_head->next;
   163ba:	681a      	ldr	r2, [r3, #0]
   163bc:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   163be:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   163c0:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   163c2:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
   163c6:	e7e6      	b.n	16396 <start_enc_rsp_send+0x86>
			return -ENOBUFS;
   163c8:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   163cc:	bd70      	pop	{r4, r5, r6, pc}
   163ce:	bf00      	nop
   163d0:	20003c54 	.word	0x20003c54

000163d4 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   163d4:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
   163d8:	f8d0 21b4 	ldr.w	r2, [r0, #436]	; 0x1b4
   163dc:	079b      	lsls	r3, r3, #30
{
   163de:	b570      	push	{r4, r5, r6, lr}
   163e0:	4604      	mov	r4, r0
   163e2:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   163e4:	d509      	bpl.n	163fa <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
   163e6:	2a00      	cmp	r2, #0
   163e8:	d03d      	beq.n	16466 <ctrl_tx_sec_enqueue+0x92>
			tx->next = conn->tx_ctrl_last->next;
   163ea:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
   163ee:	681a      	ldr	r2, [r3, #0]
   163f0:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   163f2:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   163f4:	682b      	ldr	r3, [r5, #0]
   163f6:	b333      	cbz	r3, 16446 <ctrl_tx_sec_enqueue+0x72>
}
   163f8:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->tx_head) {
   163fa:	f8d0 11b0 	ldr.w	r1, [r0, #432]	; 0x1b0
   163fe:	b1e1      	cbz	r1, 1643a <ctrl_tx_sec_enqueue+0x66>
			if ((conn->llcp_req != conn->llcp_ack) &&
   16400:	f890 31ab 	ldrb.w	r3, [r0, #427]	; 0x1ab
   16404:	f890 60e8 	ldrb.w	r6, [r0, #232]	; 0xe8
   16408:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
   1640c:	4286      	cmp	r6, r0
   1640e:	f003 0301 	and.w	r3, r3, #1
   16412:	d003      	beq.n	1641c <ctrl_tx_sec_enqueue+0x48>
   16414:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   16418:	2803      	cmp	r0, #3
   1641a:	d02c      	beq.n	16476 <ctrl_tx_sec_enqueue+0xa2>
	    !conn->llcp_phy.pause_tx &&
   1641c:	b9b3      	cbnz	r3, 1644c <ctrl_tx_sec_enqueue+0x78>
		if (conn->tx_head == conn->tx_data) {
   1641e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   16422:	4299      	cmp	r1, r3
   16424:	d045      	beq.n	164b2 <ctrl_tx_sec_enqueue+0xde>
		if (!conn->tx_ctrl) {
   16426:	b99a      	cbnz	r2, 16450 <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head->next;
   16428:	680b      	ldr	r3, [r1, #0]
   1642a:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   1642c:	600d      	str	r5, [r1, #0]
				conn->tx_ctrl_last = tx;
   1642e:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
   16432:	682b      	ldr	r3, [r5, #0]
		if (!tx->next) {
   16434:	2b00      	cmp	r3, #0
   16436:	d1df      	bne.n	163f8 <ctrl_tx_sec_enqueue+0x24>
   16438:	e005      	b.n	16446 <ctrl_tx_sec_enqueue+0x72>
		if (!conn->tx_ctrl) {
   1643a:	b94a      	cbnz	r2, 16450 <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head;
   1643c:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   1643e:	e9c0 556c 	strd	r5, r5, [r0, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   16442:	f8c0 51b8 	str.w	r5, [r0, #440]	; 0x1b8
			conn->tx_data_last = tx;
   16446:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
   1644a:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   1644c:	2a00      	cmp	r2, #0
   1644e:	d036      	beq.n	164be <ctrl_tx_sec_enqueue+0xea>
	tx->next = conn->tx_ctrl_last->next;
   16450:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   16454:	681a      	ldr	r2, [r3, #0]
   16456:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   16458:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   1645a:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
   1645e:	682b      	ldr	r3, [r5, #0]
		if (!tx->next) {
   16460:	2b00      	cmp	r3, #0
   16462:	d1c9      	bne.n	163f8 <ctrl_tx_sec_enqueue+0x24>
   16464:	e7ef      	b.n	16446 <ctrl_tx_sec_enqueue+0x72>
			tx->next = conn->tx_head;
   16466:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   1646a:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   1646c:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		if (!tx->next) {
   16470:	2b00      	cmp	r3, #0
   16472:	d1c1      	bne.n	163f8 <ctrl_tx_sec_enqueue+0x24>
   16474:	e7e7      	b.n	16446 <ctrl_tx_sec_enqueue+0x72>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   16476:	7908      	ldrb	r0, [r1, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   16478:	f000 0003 	and.w	r0, r0, #3
   1647c:	2803      	cmp	r0, #3
   1647e:	d1cd      	bne.n	1641c <ctrl_tx_sec_enqueue+0x48>
			    ((pdu_data_tx->llctrl.opcode ==
   16480:	79c8      	ldrb	r0, [r1, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   16482:	2803      	cmp	r0, #3
   16484:	d001      	beq.n	1648a <ctrl_tx_sec_enqueue+0xb6>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   16486:	280a      	cmp	r0, #10
   16488:	d1c8      	bne.n	1641c <ctrl_tx_sec_enqueue+0x48>
	    !conn->llcp_phy.pause_tx &&
   1648a:	b9f3      	cbnz	r3, 164ca <ctrl_tx_sec_enqueue+0xf6>
		if (conn->tx_head == conn->tx_data) {
   1648c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   16490:	428b      	cmp	r3, r1
   16492:	d022      	beq.n	164da <ctrl_tx_sec_enqueue+0x106>
		if (!conn->tx_ctrl) {
   16494:	b332      	cbz	r2, 164e4 <ctrl_tx_sec_enqueue+0x110>
			LL_ASSERT(!pause);
   16496:	f240 735b 	movw	r3, #1883	; 0x75b
			LL_ASSERT(!pause);
   1649a:	4a14      	ldr	r2, [pc, #80]	; (164ec <ctrl_tx_sec_enqueue+0x118>)
   1649c:	4914      	ldr	r1, [pc, #80]	; (164f0 <ctrl_tx_sec_enqueue+0x11c>)
   1649e:	4815      	ldr	r0, [pc, #84]	; (164f4 <ctrl_tx_sec_enqueue+0x120>)
   164a0:	f00a f8ce 	bl	20640 <printk>
   164a4:	4040      	eors	r0, r0
   164a6:	f380 8811 	msr	BASEPRI, r0
   164aa:	f04f 0003 	mov.w	r0, #3
   164ae:	df02      	svc	2
   164b0:	e7ce      	b.n	16450 <ctrl_tx_sec_enqueue+0x7c>
			conn->tx_data = conn->tx_data->next;
   164b2:	680b      	ldr	r3, [r1, #0]
   164b4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   164b8:	2a00      	cmp	r2, #0
   164ba:	d1c9      	bne.n	16450 <ctrl_tx_sec_enqueue+0x7c>
   164bc:	e7b4      	b.n	16428 <ctrl_tx_sec_enqueue+0x54>
			tx->next = conn->tx_head;
   164be:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
   164c0:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   164c4:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
}
   164c8:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   164ca:	b112      	cbz	r2, 164d2 <ctrl_tx_sec_enqueue+0xfe>
			LL_ASSERT(!pause);
   164cc:	f240 736d 	movw	r3, #1901	; 0x76d
   164d0:	e7e3      	b.n	1649a <ctrl_tx_sec_enqueue+0xc6>
			tx->next = conn->tx_head;
   164d2:	6029      	str	r1, [r5, #0]
			conn->tx_head = tx;
   164d4:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
}
   164d8:	bd70      	pop	{r4, r5, r6, pc}
			conn->tx_data = conn->tx_data->next;
   164da:	680b      	ldr	r3, [r1, #0]
   164dc:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   164e0:	2a00      	cmp	r2, #0
   164e2:	d1d8      	bne.n	16496 <ctrl_tx_sec_enqueue+0xc2>
			tx->next = conn->tx_head->next;
   164e4:	680b      	ldr	r3, [r1, #0]
   164e6:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   164e8:	600d      	str	r5, [r1, #0]
			if (!pause) {
   164ea:	e783      	b.n	163f4 <ctrl_tx_sec_enqueue+0x20>
   164ec:	000273f4 	.word	0x000273f4
   164f0:	00027448 	.word	0x00027448
   164f4:	00026ecc 	.word	0x00026ecc

000164f8 <feature_rsp_send.isra.0>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   164f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   164fa:	4606      	mov	r6, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   164fc:	4824      	ldr	r0, [pc, #144]	; (16590 <feature_rsp_send.isra.0+0x98>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   164fe:	460d      	mov	r5, r1
   16500:	4617      	mov	r7, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16502:	f7fa f9b1 	bl	10868 <mem_acquire>
	if (!tx) {
   16506:	2800      	cmp	r0, #0
   16508:	d03e      	beq.n	16588 <feature_rsp_send.isra.0+0x90>
	       (features[1] << 8) | (features[2] << 16);
   1650a:	79bb      	ldrb	r3, [r7, #6]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1650c:	7939      	ldrb	r1, [r7, #4]
	       (features[1] << 8) | (features[2] << 16);
   1650e:	4a21      	ldr	r2, [pc, #132]	; (16594 <feature_rsp_send.isra.0+0x9c>)
   16510:	4604      	mov	r4, r0
   16512:	7978      	ldrb	r0, [r7, #5]
   16514:	041b      	lsls	r3, r3, #16
   16516:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1651a:	430b      	orrs	r3, r1
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1651c:	f8d6 111c 	ldr.w	r1, [r6, #284]	; 0x11c
	conn->common.fex_valid = 1U;
   16520:	f896 00dc 	ldrb.w	r0, [r6, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   16524:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   16526:	400b      	ands	r3, r1
   16528:	f3c3 0310 	ubfx	r3, r3, #0, #17
   1652c:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   16530:	79bb      	ldrb	r3, [r7, #6]
   16532:	f897 c005 	ldrb.w	ip, [r7, #5]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   16536:	7939      	ldrb	r1, [r7, #4]
	       (features[1] << 8) | (features[2] << 16);
   16538:	041b      	lsls	r3, r3, #16
   1653a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   1653e:	430b      	orrs	r3, r1
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16540:	7921      	ldrb	r1, [r4, #4]
	       (features[1] << 8) | (features[2] << 16);
   16542:	4313      	orrs	r3, r2
	feat &= LL_FEAT_BIT_MASK;
   16544:	f3c3 0310 	ubfx	r3, r3, #0, #17
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   16548:	2709      	movs	r7, #9
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1654a:	2208      	movs	r2, #8
	conn->common.fex_valid = 1U;
   1654c:	f040 0001 	orr.w	r0, r0, #1
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16550:	f041 0103 	orr.w	r1, r1, #3
	conn->llcp_feature.features_peer =
   16554:	f8c6 3120 	str.w	r3, [r6, #288]	; 0x120
	conn->common.fex_valid = 1U;
   16558:	f886 00dc 	strb.w	r0, [r6, #220]	; 0xdc
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1655c:	7121      	strb	r1, [r4, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1655e:	18a0      	adds	r0, r4, r2
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   16560:	7167      	strb	r7, [r4, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   16562:	71e7      	strb	r7, [r4, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   16564:	2100      	movs	r1, #0
   16566:	f00c f906 	bl	22776 <memset>
	feat_result &= 0xFF;
   1656a:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
	dst[0] = val;
   1656e:	7223      	strb	r3, [r4, #8]
	dst[1] = val >> 8;
   16570:	2249      	movs	r2, #73	; 0x49
	dst[2] = val >> 16;
   16572:	2301      	movs	r3, #1
	ctrl_tx_sec_enqueue(conn, tx);
   16574:	4630      	mov	r0, r6
   16576:	72a3      	strb	r3, [r4, #10]
	dst[1] = val >> 8;
   16578:	7262      	strb	r2, [r4, #9]
   1657a:	4621      	mov	r1, r4
   1657c:	f7ff ff2a 	bl	163d4 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16580:	2303      	movs	r3, #3
   16582:	702b      	strb	r3, [r5, #0]
	return 0;
   16584:	2000      	movs	r0, #0
}
   16586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   16588:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1658c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1658e:	bf00      	nop
   16590:	20003c54 	.word	0x20003c54
   16594:	fffe30d0 	.word	0xfffe30d0

00016598 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   16598:	4801      	ldr	r0, [pc, #4]	; (165a0 <ll_conn_acquire+0x8>)
   1659a:	f7fa b965 	b.w	10868 <mem_acquire>
   1659e:	bf00      	nop
   165a0:	20002e88 	.word	0x20002e88

000165a4 <ll_conn_release>:
	mem_release(conn, &conn_free);
   165a4:	4901      	ldr	r1, [pc, #4]	; (165ac <ll_conn_release+0x8>)
   165a6:	f7fa b979 	b.w	1089c <mem_release>
   165aa:	bf00      	nop
   165ac:	20002e88 	.word	0x20002e88

000165b0 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   165b0:	4902      	ldr	r1, [pc, #8]	; (165bc <ll_conn_handle_get+0xc>)
   165b2:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   165b6:	f7fa b98d 	b.w	108d4 <mem_index_get>
   165ba:	bf00      	nop
   165bc:	20002e8c 	.word	0x20002e8c

000165c0 <ll_conn_get>:
{
   165c0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   165c2:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   165c6:	4801      	ldr	r0, [pc, #4]	; (165cc <ll_conn_get+0xc>)
   165c8:	f7fa b980 	b.w	108cc <mem_get>
   165cc:	20002e8c 	.word	0x20002e8c

000165d0 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   165d0:	2801      	cmp	r0, #1
   165d2:	d801      	bhi.n	165d8 <ll_connected_get+0x8>
   165d4:	f7ff be3a 	b.w	1624c <ll_connected_get.part.0>
}
   165d8:	2000      	movs	r0, #0
   165da:	4770      	bx	lr

000165dc <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   165dc:	4801      	ldr	r0, [pc, #4]	; (165e4 <ll_tx_mem_acquire+0x8>)
   165de:	f7fa b943 	b.w	10868 <mem_acquire>
   165e2:	bf00      	nop
   165e4:	20003228 	.word	0x20003228

000165e8 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   165e8:	4901      	ldr	r1, [pc, #4]	; (165f0 <ll_tx_mem_release+0x8>)
   165ea:	f7fa b957 	b.w	1089c <mem_release>
   165ee:	bf00      	nop
   165f0:	20003228 	.word	0x20003228

000165f4 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   165f4:	2801      	cmp	r0, #1
   165f6:	d858      	bhi.n	166aa <ll_tx_mem_enqueue+0xb6>
{
   165f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   165fa:	b089      	sub	sp, #36	; 0x24
   165fc:	4604      	mov	r4, r0
   165fe:	460f      	mov	r7, r1
   16600:	f7ff fe24 	bl	1624c <ll_connected_get.part.0>
	if (!conn) {
   16604:	b1e0      	cbz	r0, 16640 <ll_tx_mem_enqueue+0x4c>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   16606:	4a2a      	ldr	r2, [pc, #168]	; (166b0 <ll_tx_mem_enqueue+0xbc>)
   16608:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   1660a:	7856      	ldrb	r6, [r2, #1]
   1660c:	7895      	ldrb	r5, [r2, #2]
	last = last + 1;
   1660e:	1c4b      	adds	r3, r1, #1
   16610:	b2db      	uxtb	r3, r3
		last = 0U;
   16612:	429e      	cmp	r6, r3
   16614:	bf08      	it	eq
   16616:	2300      	moveq	r3, #0
	if (last == first) {
   16618:	429d      	cmp	r5, r3
   1661a:	d015      	beq.n	16648 <ll_tx_mem_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1661c:	4616      	mov	r6, r2
   1661e:	f816 5b04 	ldrb.w	r5, [r6], #4
   16622:	fb15 f501 	smulbb	r5, r5, r1
	if (!lll_tx) {
   16626:	1971      	adds	r1, r6, r5
   16628:	d00e      	beq.n	16648 <ll_tx_mem_enqueue+0x54>
	if (conn->lll.role && conn->lll.latency_event &&
   1662a:	f990 c03d 	ldrsb.w	ip, [r0, #61]	; 0x3d
	lll_tx->handle = handle;
   1662e:	5374      	strh	r4, [r6, r5]
	if (conn->lll.role && conn->lll.latency_event &&
   16630:	f1bc 0f00 	cmp.w	ip, #0
	lll_tx->node = tx;
   16634:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   16636:	70d3      	strb	r3, [r2, #3]
	if (conn->lll.role && conn->lll.latency_event &&
   16638:	db0a      	blt.n	16650 <ll_tx_mem_enqueue+0x5c>
	return 0;
   1663a:	2000      	movs	r0, #0
}
   1663c:	b009      	add	sp, #36	; 0x24
   1663e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   16640:	f06f 0015 	mvn.w	r0, #21
}
   16644:	b009      	add	sp, #36	; 0x24
   16646:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   16648:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1664c:	b009      	add	sp, #36	; 0x24
   1664e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->lll.role && conn->lll.latency_event &&
   16650:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   16652:	2b00      	cmp	r3, #0
   16654:	d0f1      	beq.n	1663a <ll_tx_mem_enqueue+0x46>
	    !conn->slave.latency_cancel) {
   16656:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->lll.role && conn->lll.latency_event &&
   1665a:	f013 0502 	ands.w	r5, r3, #2
   1665e:	d1ec      	bne.n	1663a <ll_tx_mem_enqueue+0x46>
		conn->slave.latency_cancel = 1U;
   16660:	f043 0302 	orr.w	r3, r3, #2
   16664:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   16668:	4912      	ldr	r1, [pc, #72]	; (166b4 <ll_tx_mem_enqueue+0xc0>)
   1666a:	9006      	str	r0, [sp, #24]
   1666c:	2301      	movs	r3, #1
				      (TICKER_ID_CONN_BASE + handle),
   1666e:	1d62      	adds	r2, r4, #5
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   16670:	9105      	str	r1, [sp, #20]
   16672:	9303      	str	r3, [sp, #12]
   16674:	e9cd 5501 	strd	r5, r5, [sp, #4]
   16678:	462b      	mov	r3, r5
   1667a:	b2d2      	uxtb	r2, r2
   1667c:	9504      	str	r5, [sp, #16]
   1667e:	9500      	str	r5, [sp, #0]
   16680:	2103      	movs	r1, #3
   16682:	4628      	mov	r0, r5
   16684:	f7fb fd70 	bl	12168 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16688:	f030 0302 	bics.w	r3, r0, #2
   1668c:	d0d5      	beq.n	1663a <ll_tx_mem_enqueue+0x46>
   1668e:	4a0a      	ldr	r2, [pc, #40]	; (166b8 <ll_tx_mem_enqueue+0xc4>)
   16690:	490a      	ldr	r1, [pc, #40]	; (166bc <ll_tx_mem_enqueue+0xc8>)
   16692:	480b      	ldr	r0, [pc, #44]	; (166c0 <ll_tx_mem_enqueue+0xcc>)
   16694:	23fe      	movs	r3, #254	; 0xfe
   16696:	f009 ffd3 	bl	20640 <printk>
   1669a:	4040      	eors	r0, r0
   1669c:	f380 8811 	msr	BASEPRI, r0
   166a0:	f04f 0003 	mov.w	r0, #3
   166a4:	df02      	svc	2
	return 0;
   166a6:	4628      	mov	r0, r5
   166a8:	e7c8      	b.n	1663c <ll_tx_mem_enqueue+0x48>
		return -EINVAL;
   166aa:	f06f 0015 	mvn.w	r0, #21
}
   166ae:	4770      	bx	lr
   166b0:	2000051c 	.word	0x2000051c
   166b4:	00015e91 	.word	0x00015e91
   166b8:	000273f4 	.word	0x000273f4
   166bc:	000274d4 	.word	0x000274d4
   166c0:	00026ecc 	.word	0x00026ecc

000166c4 <ll_conn_update>:
{
   166c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   166c8:	2801      	cmp	r0, #1
{
   166ca:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   166ce:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   166d2:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   166d6:	d823      	bhi.n	16720 <ll_conn_update+0x5c>
   166d8:	460c      	mov	r4, r1
   166da:	4615      	mov	r5, r2
   166dc:	461e      	mov	r6, r3
   166de:	f7ff fdb5 	bl	1624c <ll_connected_get.part.0>
	if (!conn) {
   166e2:	b1e8      	cbz	r0, 16720 <ll_conn_update+0x5c>
	if (!cmd) {
   166e4:	b1fc      	cbz	r4, 16726 <ll_conn_update+0x62>
		cmd--;
   166e6:	1e61      	subs	r1, r4, #1
		if (cmd) {
   166e8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   166ec:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
   166f0:	f890 2171 	ldrb.w	r2, [r0, #369]	; 0x171
   166f4:	d04b      	beq.n	1678e <ll_conn_update+0xca>
			if ((conn->llcp_conn_param.req ==
   166f6:	4293      	cmp	r3, r2
   166f8:	d012      	beq.n	16720 <ll_conn_update+0x5c>
			    (conn->llcp_conn_param.state !=
   166fa:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
			     conn->llcp_conn_param.ack) ||
   166fe:	f003 0207 	and.w	r2, r3, #7
   16702:	2a03      	cmp	r2, #3
   16704:	d10c      	bne.n	16720 <ll_conn_update+0x5c>
			conn->llcp_conn_param.state = cmd;
   16706:	f001 0107 	and.w	r1, r1, #7
   1670a:	f041 0108 	orr.w	r1, r1, #8
   1670e:	f023 030f 	bic.w	r3, r3, #15
   16712:	4319      	orrs	r1, r3
   16714:	f880 1172 	strb.w	r1, [r0, #370]	; 0x172
			conn->llcp_conn_param.status = status;
   16718:	f880 5173 	strb.w	r5, [r0, #371]	; 0x173
	return 0;
   1671c:	2000      	movs	r0, #0
   1671e:	e000      	b.n	16722 <ll_conn_update+0x5e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16720:	200c      	movs	r0, #12
}
   16722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!conn->llcp_conn_param.disabled &&
   16726:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   1672a:	06d9      	lsls	r1, r3, #27
   1672c:	d523      	bpl.n	16776 <ll_conn_update+0xb2>
		} else if (conn->lll.role) {
   1672e:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   16732:	2b00      	cmp	r3, #0
   16734:	db42      	blt.n	167bc <ll_conn_update+0xf8>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   16736:	f890 2104 	ldrb.w	r2, [r0, #260]	; 0x104
   1673a:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
   1673e:	4293      	cmp	r3, r2
   16740:	d1ee      	bne.n	16720 <ll_conn_update+0x5c>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16742:	f890 2106 	ldrb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.interval = interval_max;
   16746:	f8a0 9108 	strh.w	r9, [r0, #264]	; 0x108
		conn->llcp_cu.req++;
   1674a:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
   1674c:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1674e:	f022 0207 	bic.w	r2, r2, #7
		conn->llcp_cu.req++;
   16752:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16756:	f042 0205 	orr.w	r2, r2, #5
		conn->llcp_cu.win_offset_us = 0U;
   1675a:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
   1675c:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
		conn->llcp_cu.latency = latency;
   16760:	f8a0 810a 	strh.w	r8, [r0, #266]	; 0x10a
		conn->llcp_cu.timeout = timeout;
   16764:	f8a0 710c 	strh.w	r7, [r0, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16768:	f880 2106 	strb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.win_offset_us = 0U;
   1676c:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
	return 0;
   16770:	4618      	mov	r0, r3
}
   16772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    (!conn->common.fex_valid ||
   16776:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   1677a:	07da      	lsls	r2, r3, #31
   1677c:	d503      	bpl.n	16786 <ll_conn_update+0xc2>
		     (conn->llcp_feature.features_conn &
   1677e:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
		    (!conn->common.fex_valid ||
   16782:	079b      	lsls	r3, r3, #30
   16784:	d5d3      	bpl.n	1672e <ll_conn_update+0x6a>
   16786:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
   1678a:	f890 2171 	ldrb.w	r2, [r0, #369]	; 0x171
			if (conn->llcp_conn_param.req !=
   1678e:	4293      	cmp	r3, r2
   16790:	d1c6      	bne.n	16720 <ll_conn_update+0x5c>
			conn->llcp_conn_param.state = cmd;
   16792:	f8b0 2172 	ldrh.w	r2, [r0, #370]	; 0x172
			conn->llcp_conn_param.interval_min = interval_min;
   16796:	f8a0 6174 	strh.w	r6, [r0, #372]	; 0x174
			conn->llcp_conn_param.state = cmd;
   1679a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
   1679e:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   167a0:	f042 0208 	orr.w	r2, r2, #8
			conn->llcp_conn_param.req++;
   167a4:	f880 3170 	strb.w	r3, [r0, #368]	; 0x170
			conn->llcp_conn_param.interval_max = interval_max;
   167a8:	f8a0 9176 	strh.w	r9, [r0, #374]	; 0x176
			conn->llcp_conn_param.latency = latency;
   167ac:	f8a0 8178 	strh.w	r8, [r0, #376]	; 0x178
			conn->llcp_conn_param.timeout = timeout;
   167b0:	f8a0 717a 	strh.w	r7, [r0, #378]	; 0x17a
			conn->llcp_conn_param.state = cmd;
   167b4:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
	return 0;
   167b8:	2000      	movs	r0, #0
   167ba:	e7b2      	b.n	16722 <ll_conn_update+0x5e>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   167bc:	201a      	movs	r0, #26
   167be:	e7b0      	b.n	16722 <ll_conn_update+0x5e>

000167c0 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   167c0:	2801      	cmp	r0, #1
   167c2:	d816      	bhi.n	167f2 <ll_chm_get+0x32>
{
   167c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   167c6:	460d      	mov	r5, r1
   167c8:	f7ff fd40 	bl	1624c <ll_connected_get.part.0>
	if (!conn) {
   167cc:	4604      	mov	r4, r0
   167ce:	b170      	cbz	r0, 167ee <ll_chm_get+0x2e>
   167d0:	f100 0738 	add.w	r7, r0, #56	; 0x38
		conn->chm_updated = 0U;
   167d4:	2600      	movs	r6, #0
   167d6:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
		memcpy(chm, conn->lll.data_chan_map,
   167da:	2205      	movs	r2, #5
   167dc:	4639      	mov	r1, r7
   167de:	4628      	mov	r0, r5
   167e0:	f00b ff9e 	bl	22720 <memcpy>
	} while (conn->chm_updated);
   167e4:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
   167e8:	2800      	cmp	r0, #0
   167ea:	d1f4      	bne.n	167d6 <ll_chm_get+0x16>
}
   167ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   167ee:	200c      	movs	r0, #12
}
   167f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   167f2:	200c      	movs	r0, #12
}
   167f4:	4770      	bx	lr
   167f6:	bf00      	nop

000167f8 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   167f8:	2801      	cmp	r0, #1
   167fa:	d80f      	bhi.n	1681c <ll_terminate_ind_send+0x24>
{
   167fc:	b510      	push	{r4, lr}
   167fe:	460c      	mov	r4, r1
   16800:	f7ff fd24 	bl	1624c <ll_connected_get.part.0>
	if (!conn) {
   16804:	b140      	cbz	r0, 16818 <ll_terminate_ind_send+0x20>
	conn->llcp_terminate.req++;
   16806:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
	conn->llcp_terminate.reason_own = reason;
   1680a:	f880 412e 	strb.w	r4, [r0, #302]	; 0x12e
	conn->llcp_terminate.req++;
   1680e:	3301      	adds	r3, #1
   16810:	f880 312c 	strb.w	r3, [r0, #300]	; 0x12c
	return 0;
   16814:	2000      	movs	r0, #0
}
   16816:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16818:	200c      	movs	r0, #12
}
   1681a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1681c:	200c      	movs	r0, #12
}
   1681e:	4770      	bx	lr

00016820 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16820:	2801      	cmp	r0, #1
   16822:	d810      	bhi.n	16846 <ll_feature_req_send+0x26>
{
   16824:	b508      	push	{r3, lr}
   16826:	f7ff fd11 	bl	1624c <ll_connected_get.part.0>
	if (!conn) {
   1682a:	b150      	cbz	r0, 16842 <ll_feature_req_send+0x22>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   1682c:	f890 2118 	ldrb.w	r2, [r0, #280]	; 0x118
   16830:	f890 3119 	ldrb.w	r3, [r0, #281]	; 0x119
   16834:	4293      	cmp	r3, r2
   16836:	d104      	bne.n	16842 <ll_feature_req_send+0x22>
	conn->llcp_feature.req++;
   16838:	3301      	adds	r3, #1
   1683a:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	return 0;
   1683e:	2000      	movs	r0, #0
}
   16840:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16842:	200c      	movs	r0, #12
}
   16844:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16846:	200c      	movs	r0, #12
}
   16848:	4770      	bx	lr
   1684a:	bf00      	nop

0001684c <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1684c:	2801      	cmp	r0, #1
   1684e:	d810      	bhi.n	16872 <ll_version_ind_send+0x26>
{
   16850:	b508      	push	{r3, lr}
   16852:	f7ff fcfb 	bl	1624c <ll_connected_get.part.0>
	if (!conn) {
   16856:	b150      	cbz	r0, 1686e <ll_version_ind_send+0x22>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   16858:	f890 2124 	ldrb.w	r2, [r0, #292]	; 0x124
   1685c:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
   16860:	4293      	cmp	r3, r2
   16862:	d104      	bne.n	1686e <ll_version_ind_send+0x22>
	conn->llcp_version.req++;
   16864:	3301      	adds	r3, #1
   16866:	f880 3124 	strb.w	r3, [r0, #292]	; 0x124
	return 0;
   1686a:	2000      	movs	r0, #0
}
   1686c:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1686e:	200c      	movs	r0, #12
}
   16870:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16872:	200c      	movs	r0, #12
}
   16874:	4770      	bx	lr
   16876:	bf00      	nop

00016878 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16878:	2801      	cmp	r0, #1
   1687a:	d82f      	bhi.n	168dc <ll_length_req_send+0x64>
{
   1687c:	b538      	push	{r3, r4, r5, lr}
   1687e:	460d      	mov	r5, r1
   16880:	4614      	mov	r4, r2
   16882:	f7ff fce3 	bl	1624c <ll_connected_get.part.0>
	if (!conn) {
   16886:	b318      	cbz	r0, 168d0 <ll_length_req_send+0x58>
	if (conn->llcp_length.disabled ||
   16888:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   1688c:	071a      	lsls	r2, r3, #28
   1688e:	d421      	bmi.n	168d4 <ll_length_req_send+0x5c>
	    (conn->common.fex_valid &&
   16890:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
	if (conn->llcp_length.disabled ||
   16894:	07d1      	lsls	r1, r2, #31
   16896:	d503      	bpl.n	168a0 <ll_length_req_send+0x28>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
   16898:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
	    (conn->common.fex_valid &&
   1689c:	0692      	lsls	r2, r2, #26
   1689e:	d519      	bpl.n	168d4 <ll_length_req_send+0x5c>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   168a0:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   168a4:	f890 2199 	ldrb.w	r2, [r0, #409]	; 0x199
   168a8:	428a      	cmp	r2, r1
   168aa:	d019      	beq.n	168e0 <ll_length_req_send+0x68>
		switch (conn->llcp_length.state) {
   168ac:	f003 0307 	and.w	r3, r3, #7
   168b0:	2b03      	cmp	r3, #3
   168b2:	d004      	beq.n	168be <ll_length_req_send+0x46>
   168b4:	3303      	adds	r3, #3
   168b6:	f003 0307 	and.w	r3, r3, #7
   168ba:	2b01      	cmp	r3, #1
   168bc:	d80c      	bhi.n	168d8 <ll_length_req_send+0x60>
			if (!conn->llcp_length.cache.tx_octets) {
   168be:	f8b0 31a4 	ldrh.w	r3, [r0, #420]	; 0x1a4
   168c2:	b94b      	cbnz	r3, 168d8 <ll_length_req_send+0x60>
				conn->llcp_length.cache.tx_octets = tx_octets;
   168c4:	f8a0 51a4 	strh.w	r5, [r0, #420]	; 0x1a4
				conn->llcp_length.cache.tx_time = tx_time;
   168c8:	f8a0 41a6 	strh.w	r4, [r0, #422]	; 0x1a6
				return 0;
   168cc:	4618      	mov	r0, r3
}
   168ce:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   168d0:	2002      	movs	r0, #2
}
   168d2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   168d4:	201a      	movs	r0, #26
}
   168d6:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   168d8:	200c      	movs	r0, #12
}
   168da:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   168dc:	2002      	movs	r0, #2
}
   168de:	4770      	bx	lr
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   168e0:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
	conn->llcp_length.tx_octets = tx_octets;
   168e4:	f8a0 519e 	strh.w	r5, [r0, #414]	; 0x19e
	conn->llcp_length.req++;
   168e8:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   168ea:	f36f 0302 	bfc	r3, #0, #3
	conn->llcp_length.req++;
   168ee:	f880 2198 	strb.w	r2, [r0, #408]	; 0x198
	conn->llcp_length.tx_time = tx_time;
   168f2:	f8a0 41a2 	strh.w	r4, [r0, #418]	; 0x1a2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   168f6:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
	return 0;
   168fa:	2000      	movs	r0, #0
}
   168fc:	bd38      	pop	{r3, r4, r5, pc}
   168fe:	bf00      	nop

00016900 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   16900:	4a03      	ldr	r2, [pc, #12]	; (16910 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   16902:	4b04      	ldr	r3, [pc, #16]	; (16914 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   16904:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   16906:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   16908:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   1690a:	800b      	strh	r3, [r1, #0]
}
   1690c:	4770      	bx	lr
   1690e:	bf00      	nop
   16910:	20004ce8 	.word	0x20004ce8
   16914:	20004cea 	.word	0x20004cea

00016918 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   16918:	4a02      	ldr	r2, [pc, #8]	; (16924 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   1691a:	4b03      	ldr	r3, [pc, #12]	; (16928 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   1691c:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   1691e:	8019      	strh	r1, [r3, #0]
}
   16920:	2000      	movs	r0, #0
   16922:	4770      	bx	lr
   16924:	20004ce8 	.word	0x20004ce8
   16928:	20004cea 	.word	0x20004cea

0001692c <ll_length_max_get>:
{
   1692c:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1692e:	25fb      	movs	r5, #251	; 0xfb
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   16930:	f244 2490 	movw	r4, #17040	; 0x4290
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   16934:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   16936:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   16938:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   1693a:	801c      	strh	r4, [r3, #0]
}
   1693c:	bc30      	pop	{r4, r5}
   1693e:	4770      	bx	lr

00016940 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16940:	2801      	cmp	r0, #1
   16942:	d813      	bhi.n	1696c <ll_phy_get+0x2c>
{
   16944:	b538      	push	{r3, r4, r5, lr}
   16946:	460d      	mov	r5, r1
   16948:	4614      	mov	r4, r2
   1694a:	f7ff fc7f 	bl	1624c <ll_connected_get.part.0>
	if (!conn) {
   1694e:	b158      	cbz	r0, 16968 <ll_phy_get+0x28>
	*tx = conn->lll.phy_tx;
   16950:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   16954:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16958:	702b      	strb	r3, [r5, #0]
	*rx = conn->lll.phy_rx;
   1695a:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
   1695e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16962:	7023      	strb	r3, [r4, #0]
	return 0;
   16964:	2000      	movs	r0, #0
}
   16966:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16968:	2002      	movs	r0, #2
}
   1696a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1696c:	2002      	movs	r0, #2
}
   1696e:	4770      	bx	lr

00016970 <ll_phy_default_set>:
	default_phy_tx = tx;
   16970:	4a02      	ldr	r2, [pc, #8]	; (1697c <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   16972:	4b03      	ldr	r3, [pc, #12]	; (16980 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   16974:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   16976:	7019      	strb	r1, [r3, #0]
}
   16978:	2000      	movs	r0, #0
   1697a:	4770      	bx	lr
   1697c:	20005389 	.word	0x20005389
   16980:	20005388 	.word	0x20005388

00016984 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16984:	2801      	cmp	r0, #1
   16986:	d83f      	bhi.n	16a08 <ll_phy_req_send+0x84>
{
   16988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1698a:	460f      	mov	r7, r1
   1698c:	4615      	mov	r5, r2
   1698e:	461e      	mov	r6, r3
   16990:	f7ff fc5c 	bl	1624c <ll_connected_get.part.0>
	if (!conn) {
   16994:	4604      	mov	r4, r0
   16996:	b398      	cbz	r0, 16a00 <ll_phy_req_send+0x7c>
	if (conn->llcp_phy.disabled ||
   16998:	f890 01ab 	ldrb.w	r0, [r0, #427]	; 0x1ab
   1699c:	f010 0008 	ands.w	r0, r0, #8
   169a0:	d130      	bne.n	16a04 <ll_phy_req_send+0x80>
	    (conn->common.fex_valid &&
   169a2:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
	if (conn->llcp_phy.disabled ||
   169a6:	07db      	lsls	r3, r3, #31
   169a8:	d504      	bpl.n	169b4 <ll_phy_req_send+0x30>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
   169aa:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   169ae:	f413 6f10 	tst.w	r3, #2304	; 0x900
   169b2:	d027      	beq.n	16a04 <ll_phy_req_send+0x80>
	if ((conn->llcp_req != conn->llcp_ack) ||
   169b4:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   169b8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   169bc:	429a      	cmp	r2, r3
   169be:	d11d      	bne.n	169fc <ll_phy_req_send+0x78>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   169c0:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
	if ((conn->llcp_req != conn->llcp_ack) ||
   169c4:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   169c8:	429a      	cmp	r2, r3
   169ca:	d117      	bne.n	169fc <ll_phy_req_send+0x78>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   169cc:	f007 0107 	and.w	r1, r7, #7
   169d0:	0089      	lsls	r1, r1, #2
   169d2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   169d6:	f006 0307 	and.w	r3, r6, #7
   169da:	f8b4 61aa 	ldrh.w	r6, [r4, #426]	; 0x1aa
   169de:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   169e2:	f005 0501 	and.w	r5, r5, #1
   169e6:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
   169ea:	f406 4179 	and.w	r1, r6, #63744	; 0xf900
	conn->llcp_phy.req++;
   169ee:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   169f0:	430b      	orrs	r3, r1
	conn->llcp_phy.req++;
   169f2:	f884 21a8 	strb.w	r2, [r4, #424]	; 0x1a8
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   169f6:	f8a4 31aa 	strh.w	r3, [r4, #426]	; 0x1aa
}
   169fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   169fc:	200c      	movs	r0, #12
}
   169fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16a00:	2002      	movs	r0, #2
}
   16a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   16a04:	201a      	movs	r0, #26
}
   16a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16a08:	2002      	movs	r0, #2
}
   16a0a:	4770      	bx	lr

00016a0c <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16a0c:	2801      	cmp	r0, #1
   16a0e:	d816      	bhi.n	16a3e <ll_apto_get+0x32>
{
   16a10:	b510      	push	{r4, lr}
   16a12:	460c      	mov	r4, r1
   16a14:	f7ff fc1a 	bl	1624c <ll_connected_get.part.0>
	if (!conn) {
   16a18:	b178      	cbz	r0, 16a3a <ll_apto_get+0x2e>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   16a1a:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
   16a1e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   16a20:	4a08      	ldr	r2, [pc, #32]	; (16a44 <ll_apto_get+0x38>)
   16a22:	fb03 f301 	mul.w	r3, r3, r1
   16a26:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   16a2a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   16a2e:	fba2 2303 	umull	r2, r3, r2, r3
   16a32:	099b      	lsrs	r3, r3, #6
   16a34:	8023      	strh	r3, [r4, #0]
	return 0;
   16a36:	2000      	movs	r0, #0
}
   16a38:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16a3a:	2002      	movs	r0, #2
}
   16a3c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16a3e:	2002      	movs	r0, #2
}
   16a40:	4770      	bx	lr
   16a42:	bf00      	nop
   16a44:	10624dd3 	.word	0x10624dd3

00016a48 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16a48:	2801      	cmp	r0, #1
   16a4a:	d817      	bhi.n	16a7c <ll_apto_set+0x34>
{
   16a4c:	b510      	push	{r4, lr}
   16a4e:	460c      	mov	r4, r1
   16a50:	f7ff fbfc 	bl	1624c <ll_connected_get.part.0>
	if (!conn) {
   16a54:	4603      	mov	r3, r0
   16a56:	b178      	cbz	r0, 16a78 <ll_apto_set+0x30>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   16a58:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   16a5a:	f240 41e2 	movw	r1, #1250	; 0x4e2
   16a5e:	fb01 f202 	mul.w	r2, r1, r2
   16a62:	f242 7110 	movw	r1, #10000	; 0x2710
   16a66:	fb01 2104 	mla	r1, r1, r4, r2
   16a6a:	3901      	subs	r1, #1
	return 0;
   16a6c:	2000      	movs	r0, #0
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   16a6e:	fbb1 f1f2 	udiv	r1, r1, r2
   16a72:	f8a3 10d2 	strh.w	r1, [r3, #210]	; 0xd2
}
   16a76:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16a78:	2002      	movs	r0, #2
}
   16a7a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16a7c:	2002      	movs	r0, #2
}
   16a7e:	4770      	bx	lr

00016a80 <ull_conn_init>:
	err = init_reset();
   16a80:	f7ff ba82 	b.w	15f88 <init_reset>

00016a84 <ull_conn_reset>:
{
   16a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16a88:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 16b70 <ull_conn_reset+0xec>
	LL_ASSERT(mark == conn);
   16a8c:	4e30      	ldr	r6, [pc, #192]	; (16b50 <ull_conn_reset+0xcc>)
   16a8e:	4f31      	ldr	r7, [pc, #196]	; (16b54 <ull_conn_reset+0xd0>)
{
   16a90:	b084      	sub	sp, #16
   16a92:	2500      	movs	r5, #0
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
   16a94:	2302      	movs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16a96:	462a      	mov	r2, r5
   16a98:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   16a9c:	4640      	mov	r0, r8
	volatile uint32_t ret_cb = TICKER_STATUS_BUSY;
   16a9e:	9303      	str	r3, [sp, #12]
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16aa0:	f7f9 ff14 	bl	108cc <mem_get>
   16aa4:	4604      	mov	r4, r0
	mark = ull_disable_mark(conn);
   16aa6:	f7fe fa85 	bl	14fb4 <ull_disable_mark>
	LL_ASSERT(mark == conn);
   16aaa:	4284      	cmp	r4, r0
   16aac:	d00c      	beq.n	16ac8 <ull_conn_reset+0x44>
   16aae:	482a      	ldr	r0, [pc, #168]	; (16b58 <ull_conn_reset+0xd4>)
   16ab0:	f240 6386 	movw	r3, #1670	; 0x686
   16ab4:	4632      	mov	r2, r6
   16ab6:	4639      	mov	r1, r7
   16ab8:	f009 fdc2 	bl	20640 <printk>
   16abc:	4040      	eors	r0, r0
   16abe:	f380 8811 	msr	BASEPRI, r0
   16ac2:	f04f 0003 	mov.w	r0, #3
   16ac6:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   16ac8:	ab03      	add	r3, sp, #12
   16aca:	9300      	str	r3, [sp, #0]
   16acc:	2103      	movs	r1, #3
   16ace:	4b23      	ldr	r3, [pc, #140]	; (16b5c <ull_conn_reset+0xd8>)
   16ad0:	1d6a      	adds	r2, r5, #5
   16ad2:	2000      	movs	r0, #0
   16ad4:	f7fb fb98 	bl	12208 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   16ad8:	a903      	add	r1, sp, #12
   16ada:	f7fe fa5d 	bl	14f98 <ull_ticker_status_take>
	if (!ret) {
   16ade:	b310      	cbz	r0, 16b26 <ull_conn_reset+0xa2>
	conn->lll.link_tx_free = NULL;
   16ae0:	2300      	movs	r3, #0
   16ae2:	67a3      	str	r3, [r4, #120]	; 0x78
	mark = ull_disable_unmark(conn);
   16ae4:	4620      	mov	r0, r4
   16ae6:	f7fe fa71 	bl	14fcc <ull_disable_unmark>
	LL_ASSERT(mark == conn);
   16aea:	4284      	cmp	r4, r0
   16aec:	d00c      	beq.n	16b08 <ull_conn_reset+0x84>
   16aee:	481a      	ldr	r0, [pc, #104]	; (16b58 <ull_conn_reset+0xd4>)
   16af0:	f240 6395 	movw	r3, #1685	; 0x695
   16af4:	4632      	mov	r2, r6
   16af6:	4639      	mov	r1, r7
   16af8:	f009 fda2 	bl	20640 <printk>
   16afc:	4040      	eors	r0, r0
   16afe:	f380 8811 	msr	BASEPRI, r0
   16b02:	f04f 0003 	mov.w	r0, #3
   16b06:	df02      	svc	2
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   16b08:	b15d      	cbz	r5, 16b22 <ull_conn_reset+0x9e>
	MFIFO_INIT(conn_ack);
   16b0a:	4915      	ldr	r1, [pc, #84]	; (16b60 <ull_conn_reset+0xdc>)
	MFIFO_INIT(conn_tx);
   16b0c:	4815      	ldr	r0, [pc, #84]	; (16b64 <ull_conn_reset+0xe0>)
	conn_upd_curr = NULL;
   16b0e:	4a16      	ldr	r2, [pc, #88]	; (16b68 <ull_conn_reset+0xe4>)
	MFIFO_INIT(conn_tx);
   16b10:	2300      	movs	r3, #0
   16b12:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   16b14:	804b      	strh	r3, [r1, #2]
	conn_upd_curr = NULL;
   16b16:	6013      	str	r3, [r2, #0]
	err = init_reset();
   16b18:	f7ff fa36 	bl	15f88 <init_reset>
}
   16b1c:	b004      	add	sp, #16
   16b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16b22:	2501      	movs	r5, #1
   16b24:	e7b6      	b.n	16a94 <ull_conn_reset+0x10>
		ret = ull_disable(&conn->lll);
   16b26:	f104 001c 	add.w	r0, r4, #28
   16b2a:	f7fe fa7f 	bl	1502c <ull_disable>
		LL_ASSERT(!ret);
   16b2e:	2800      	cmp	r0, #0
   16b30:	d0d6      	beq.n	16ae0 <ull_conn_reset+0x5c>
   16b32:	490e      	ldr	r1, [pc, #56]	; (16b6c <ull_conn_reset+0xe8>)
   16b34:	4808      	ldr	r0, [pc, #32]	; (16b58 <ull_conn_reset+0xd4>)
   16b36:	f240 638f 	movw	r3, #1679	; 0x68f
   16b3a:	4632      	mov	r2, r6
   16b3c:	f009 fd80 	bl	20640 <printk>
   16b40:	4040      	eors	r0, r0
   16b42:	f380 8811 	msr	BASEPRI, r0
   16b46:	f04f 0003 	mov.w	r0, #3
   16b4a:	df02      	svc	2
   16b4c:	e7c8      	b.n	16ae0 <ull_conn_reset+0x5c>
   16b4e:	bf00      	nop
   16b50:	000273f4 	.word	0x000273f4
   16b54:	00027504 	.word	0x00027504
   16b58:	00026ecc 	.word	0x00026ecc
   16b5c:	00014f8d 	.word	0x00014f8d
   16b60:	200004a0 	.word	0x200004a0
   16b64:	2000051c 	.word	0x2000051c
   16b68:	2000321c 	.word	0x2000321c
   16b6c:	00027188 	.word	0x00027188
   16b70:	20002e8c 	.word	0x20002e8c

00016b74 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   16b74:	4b01      	ldr	r3, [pc, #4]	; (16b7c <ull_conn_default_tx_octets_get+0x8>)
}
   16b76:	8818      	ldrh	r0, [r3, #0]
   16b78:	4770      	bx	lr
   16b7a:	bf00      	nop
   16b7c:	20004ce8 	.word	0x20004ce8

00016b80 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   16b80:	4b01      	ldr	r3, [pc, #4]	; (16b88 <ull_conn_default_tx_time_get+0x8>)
}
   16b82:	8818      	ldrh	r0, [r3, #0]
   16b84:	4770      	bx	lr
   16b86:	bf00      	nop
   16b88:	20004cea 	.word	0x20004cea

00016b8c <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   16b8c:	4b01      	ldr	r3, [pc, #4]	; (16b94 <ull_conn_default_phy_tx_get+0x8>)
}
   16b8e:	7818      	ldrb	r0, [r3, #0]
   16b90:	4770      	bx	lr
   16b92:	bf00      	nop
   16b94:	20005389 	.word	0x20005389

00016b98 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   16b98:	4b01      	ldr	r3, [pc, #4]	; (16ba0 <ull_conn_default_phy_rx_get+0x8>)
}
   16b9a:	7818      	ldrb	r0, [r3, #0]
   16b9c:	4770      	bx	lr
   16b9e:	bf00      	nop
   16ba0:	20005388 	.word	0x20005388

00016ba4 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   16ba4:	688b      	ldr	r3, [r1, #8]
   16ba6:	689b      	ldr	r3, [r3, #8]
{
   16ba8:	b410      	push	{r4}
	switch (lll->role) {
   16baa:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   16bae:	09e4      	lsrs	r4, r4, #7
	ftr = &(rx->rx_ftr);
   16bb0:	f101 0208 	add.w	r2, r1, #8
	switch (lll->role) {
   16bb4:	d002      	beq.n	16bbc <ull_conn_setup+0x18>
}
   16bb6:	bc10      	pop	{r4}
		ull_slave_setup(link, rx, ftr, lll);
   16bb8:	f7ec bb2e 	b.w	3218 <ull_slave_setup>
}
   16bbc:	bc10      	pop	{r4}
		ull_master_setup(link, rx, ftr, lll);
   16bbe:	f7ec bd6f 	b.w	36a0 <ull_master_setup>
   16bc2:	bf00      	nop

00016bc4 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   16bc4:	680a      	ldr	r2, [r1, #0]
   16bc6:	88d3      	ldrh	r3, [r2, #6]
	if (handle >= CONFIG_BT_MAX_CONN) {
   16bc8:	2b01      	cmp	r3, #1
   16bca:	d875      	bhi.n	16cb8 <ull_conn_rx+0xf4>
{
   16bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bd0:	4607      	mov	r7, r0
   16bd2:	b087      	sub	sp, #28
   16bd4:	4618      	mov	r0, r3
   16bd6:	460c      	mov	r4, r1
   16bd8:	f7ff fb38 	bl	1624c <ll_connected_get.part.0>
	if (!conn) {
   16bdc:	6822      	ldr	r2, [r4, #0]
   16bde:	4605      	mov	r5, r0
   16be0:	2800      	cmp	r0, #0
   16be2:	d057      	beq.n	16c94 <ull_conn_rx+0xd0>
	switch (pdu_rx->ll_id) {
   16be4:	7f13      	ldrb	r3, [r2, #28]
   16be6:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
   16bea:	f003 0303 	and.w	r3, r3, #3
   16bee:	2b03      	cmp	r3, #3
	pdu_rx = (void *)(*rx)->pdu;
   16bf0:	4616      	mov	r6, r2
	switch (pdu_rx->ll_id) {
   16bf2:	f001 0001 	and.w	r0, r1, #1
   16bf6:	d147      	bne.n	16c88 <ull_conn_rx+0xc4>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   16bf8:	f892 a01f 	ldrb.w	sl, [r2, #31]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   16bfc:	2800      	cmp	r0, #0
   16bfe:	d05f      	beq.n	16cc0 <ull_conn_rx+0xfc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   16c00:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   16c04:	2b00      	cmp	r3, #0
   16c06:	f001 0204 	and.w	r2, r1, #4
   16c0a:	f2c0 80db 	blt.w	16dc4 <ull_conn_rx+0x200>
	return (!conn->lll.role &&
   16c0e:	2a00      	cmp	r2, #0
   16c10:	f000 85fa 	beq.w	17808 <ull_conn_rx+0xc44>
		 (conn->llcp_enc.refresh &&
   16c14:	f1ba 0f02 	cmp.w	sl, #2
   16c18:	f000 8425 	beq.w	17466 <ull_conn_rx+0x8a2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   16c1c:	f1ba 0f0b 	cmp.w	sl, #11
   16c20:	f000 85fe 	beq.w	17820 <ull_conn_rx+0xc5c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   16c24:	f1ba 0f04 	cmp.w	sl, #4
   16c28:	f000 84e6 	beq.w	175f8 <ull_conn_rx+0xa34>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   16c2c:	f1ba 0f05 	cmp.w	sl, #5
   16c30:	f000 8505 	beq.w	1763e <ull_conn_rx+0xa7a>
   16c34:	f1ba 0f06 	cmp.w	sl, #6
   16c38:	f000 8617 	beq.w	1786a <ull_conn_rx+0xca6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   16c3c:	f1ba 0f0d 	cmp.w	sl, #13
   16c40:	f000 83f1 	beq.w	17426 <ull_conn_rx+0x862>
   16c44:	f1ba 0f11 	cmp.w	sl, #17
   16c48:	d12c      	bne.n	16ca4 <ull_conn_rx+0xe0>

		break;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	case PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   16c4a:	7f73      	ldrb	r3, [r6, #29]
   16c4c:	2b03      	cmp	r3, #3
   16c4e:	d177      	bne.n	16d40 <ull_conn_rx+0x17c>
	switch (rej_ext_ind->reject_opcode) {
   16c50:	f896 3020 	ldrb.w	r3, [r6, #32]
   16c54:	3b03      	subs	r3, #3
   16c56:	2b13      	cmp	r3, #19
   16c58:	f200 80a0 	bhi.w	16d9c <ull_conn_rx+0x1d8>
   16c5c:	e8df f013 	tbh	[pc, r3, lsl #1]
   16c60:	009e0591 	.word	0x009e0591
   16c64:	009e009e 	.word	0x009e009e
   16c68:	009e009e 	.word	0x009e009e
   16c6c:	009e009e 	.word	0x009e009e
   16c70:	009e009e 	.word	0x009e009e
   16c74:	009e009e 	.word	0x009e009e
   16c78:	009e055e 	.word	0x009e055e
   16c7c:	009e009e 	.word	0x009e009e
   16c80:	05b1009e 	.word	0x05b1009e
   16c84:	052b009e 	.word	0x052b009e
	switch (pdu_rx->ll_id) {
   16c88:	b953      	cbnz	r3, 16ca0 <ull_conn_rx+0xdc>
		if (conn->llcp_enc.pause_rx) {
   16c8a:	b118      	cbz	r0, 16c94 <ull_conn_rx+0xd0>
			conn->llcp_terminate.reason_peer =
   16c8c:	233d      	movs	r3, #61	; 0x3d
   16c8e:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
   16c92:	6822      	ldr	r2, [r4, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16c94:	2303      	movs	r3, #3
   16c96:	7113      	strb	r3, [r2, #4]
	return 0;
   16c98:	2000      	movs	r0, #0
}
   16c9a:	b007      	add	sp, #28
   16c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   16ca0:	2800      	cmp	r0, #0
   16ca2:	d0f9      	beq.n	16c98 <ull_conn_rx+0xd4>
		conn->llcp_terminate.reason_peer =
   16ca4:	233d      	movs	r3, #61	; 0x3d
   16ca6:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16caa:	6823      	ldr	r3, [r4, #0]
   16cac:	2203      	movs	r2, #3
		return 0;
   16cae:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16cb0:	711a      	strb	r2, [r3, #4]
}
   16cb2:	b007      	add	sp, #28
   16cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16cb8:	2303      	movs	r3, #3
   16cba:	7113      	strb	r3, [r2, #4]
		return 0;
   16cbc:	2000      	movs	r0, #0
}
   16cbe:	4770      	bx	lr
	pdu_rx = (void *)(*rx)->pdu;
   16cc0:	321c      	adds	r2, #28
	switch (opcode) {
   16cc2:	f1ba 0f19 	cmp.w	sl, #25
   16cc6:	d83b      	bhi.n	16d40 <ull_conn_rx+0x17c>
   16cc8:	a301      	add	r3, pc, #4	; (adr r3, 16cd0 <ull_conn_rx+0x10c>)
   16cca:	f853 f02a 	ldr.w	pc, [r3, sl, lsl #2]
   16cce:	bf00      	nop
   16cd0:	00017107 	.word	0x00017107
   16cd4:	0001747f 	.word	0x0001747f
   16cd8:	00017467 	.word	0x00017467
   16cdc:	00017567 	.word	0x00017567
   16ce0:	000175ef 	.word	0x000175ef
   16ce4:	00017635 	.word	0x00017635
   16ce8:	00017673 	.word	0x00017673
   16cec:	000173db 	.word	0x000173db
   16cf0:	000173cf 	.word	0x000173cf
   16cf4:	00017365 	.word	0x00017365
   16cf8:	000172c9 	.word	0x000172c9
   16cfc:	00017695 	.word	0x00017695
   16d00:	00017201 	.word	0x00017201
   16d04:	00017427 	.word	0x00017427
   16d08:	000171e1 	.word	0x000171e1
   16d0c:	000170e3 	.word	0x000170e3
   16d10:	00016f59 	.word	0x00016f59
   16d14:	00016c4b 	.word	0x00016c4b
   16d18:	00016ead 	.word	0x00016ead
   16d1c:	00016e97 	.word	0x00016e97
   16d20:	00016e2d 	.word	0x00016e2d
   16d24:	00016e2d 	.word	0x00016e2d
   16d28:	00017081 	.word	0x00017081
   16d2c:	00016edf 	.word	0x00016edf
   16d30:	000174eb 	.word	0x000174eb
   16d34:	0001725f 	.word	0x0001725f
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   16d38:	7f73      	ldrb	r3, [r6, #29]
   16d3a:	2b01      	cmp	r3, #1
   16d3c:	f000 84b3 	beq.w	176a6 <ull_conn_rx+0xae2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16d40:	48ce      	ldr	r0, [pc, #824]	; (1707c <ull_conn_rx+0x4b8>)
   16d42:	f7f9 fd91 	bl	10868 <mem_acquire>
	if (!tx) {
   16d46:	2800      	cmp	r0, #0
   16d48:	f000 85c1 	beq.w	178ce <ull_conn_rx+0xd0a>
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   16d4c:	2302      	movs	r3, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16d4e:	7902      	ldrb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   16d50:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   16d52:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
	pdu->llctrl.unknown_rsp.type = type;
   16d56:	f880 a008 	strb.w	sl, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16d5a:	f042 0203 	orr.w	r2, r2, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   16d5e:	2107      	movs	r1, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16d60:	7102      	strb	r2, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   16d62:	71c1      	strb	r1, [r0, #7]
	if (
   16d64:	b303      	cbz	r3, 16da8 <ull_conn_rx+0x1e4>
	    !conn->llcp_enc.pause_tx &&
   16d66:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
	    conn->tx_head &&
   16d6a:	0791      	lsls	r1, r2, #30
   16d6c:	d41c      	bmi.n	16da8 <ull_conn_rx+0x1e4>
	    !conn->llcp_phy.pause_tx &&
   16d6e:	f895 21ab 	ldrb.w	r2, [r5, #427]	; 0x1ab
   16d72:	07d2      	lsls	r2, r2, #31
   16d74:	d418      	bmi.n	16da8 <ull_conn_rx+0x1e4>
		if (conn->tx_head == conn->tx_data) {
   16d76:	f8d5 21bc 	ldr.w	r2, [r5, #444]	; 0x1bc
   16d7a:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   16d7c:	bf04      	itt	eq
   16d7e:	681a      	ldreq	r2, [r3, #0]
   16d80:	f8c5 21bc 	streq.w	r2, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   16d84:	f8d5 21b4 	ldr.w	r2, [r5, #436]	; 0x1b4
   16d88:	b99a      	cbnz	r2, 16db2 <ull_conn_rx+0x1ee>
			tx->next = conn->tx_head->next;
   16d8a:	681a      	ldr	r2, [r3, #0]
   16d8c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   16d8e:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   16d90:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   16d92:	e9c5 006d 	strd	r0, r0, [r5, #436]	; 0x1b4
	if (!tx->next) {
   16d96:	2b00      	cmp	r3, #0
   16d98:	f000 8532 	beq.w	17800 <ull_conn_rx+0xc3c>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16d9c:	2303      	movs	r3, #3
	return 0;
   16d9e:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16da0:	7133      	strb	r3, [r6, #4]
}
   16da2:	b007      	add	sp, #28
   16da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!conn->tx_ctrl) {
   16da8:	f8d5 21b4 	ldr.w	r2, [r5, #436]	; 0x1b4
   16dac:	2a00      	cmp	r2, #0
   16dae:	f000 8530 	beq.w	17812 <ull_conn_rx+0xc4e>
	tx->next = conn->tx_ctrl_last->next;
   16db2:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
   16db6:	681a      	ldr	r2, [r3, #0]
   16db8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   16dba:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   16dbc:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   16dc0:	6803      	ldr	r3, [r0, #0]
}
   16dc2:	e7e8      	b.n	16d96 <ull_conn_rx+0x1d2>
	       (conn->lll.role &&
   16dc4:	2a00      	cmp	r2, #0
   16dc6:	f000 8347 	beq.w	17458 <ull_conn_rx+0x894>
		 (conn->llcp_enc.refresh &&
   16dca:	f1ba 0f02 	cmp.w	sl, #2
   16dce:	f000 834a 	beq.w	17466 <ull_conn_rx+0x8a2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   16dd2:	f1ba 0f0b 	cmp.w	sl, #11
   16dd6:	d0af      	beq.n	16d38 <ull_conn_rx+0x174>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   16dd8:	f1ba 0f03 	cmp.w	sl, #3
   16ddc:	f000 83c8 	beq.w	17570 <ull_conn_rx+0x9ac>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   16de0:	f1ba 0f06 	cmp.w	sl, #6
   16de4:	f47f af2a 	bne.w	16c3c <ull_conn_rx+0x78>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   16de8:	7f73      	ldrb	r3, [r6, #29]
   16dea:	2b01      	cmp	r3, #1
   16dec:	d1a8      	bne.n	16d40 <ull_conn_rx+0x17c>
			if ((conn->llcp_req != conn->llcp_ack) &&
   16dee:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   16df2:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   16df6:	4293      	cmp	r3, r2
   16df8:	f001 8128 	beq.w	1804c <ull_conn_rx+0x1488>
   16dfc:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   16e00:	2b03      	cmp	r3, #3
   16e02:	d19d      	bne.n	16d40 <ull_conn_rx+0x17c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16e04:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
   16e08:	f36f 0301 	bfc	r3, #0, #2
   16e0c:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
		if (conn->llcp_enc.refresh) {
   16e10:	074e      	lsls	r6, r1, #29
   16e12:	d506      	bpl.n	16e22 <ull_conn_rx+0x25e>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   16e14:	6823      	ldr	r3, [r4, #0]
			conn->llcp_enc.refresh = 0U;
   16e16:	f36f 0182 	bfc	r1, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   16e1a:	220c      	movs	r2, #12
			conn->llcp_enc.refresh = 0U;
   16e1c:	f885 1152 	strb.w	r1, [r5, #338]	; 0x152
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   16e20:	711a      	strb	r2, [r3, #4]
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   16e22:	2300      	movs	r3, #0
   16e24:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   16e28:	4618      	mov	r0, r3
		break;
   16e2a:	e736      	b.n	16c9a <ull_conn_rx+0xd6>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   16e2c:	7f73      	ldrb	r3, [r6, #29]
   16e2e:	2b09      	cmp	r3, #9
   16e30:	d186      	bne.n	16d40 <ull_conn_rx+0x17c>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   16e32:	f1ba 0f14 	cmp.w	sl, #20
   16e36:	f000 854e 	beq.w	178d6 <ull_conn_rx+0xd12>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   16e3a:	f895 1198 	ldrb.w	r1, [r5, #408]	; 0x198
	if (/* Local idle, and Peer request then complete the Peer procedure
   16e3e:	f895 3199 	ldrb.w	r3, [r5, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
   16e42:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
   16e46:	9201      	str	r2, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   16e48:	428b      	cmp	r3, r1
	eff_tx_octets = conn->lll.max_tx_octets;
   16e4a:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   16e4e:	f8b5 8062 	ldrh.w	r8, [r5, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   16e52:	f8b5 9060 	ldrh.w	r9, [r5, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   16e56:	9100      	str	r1, [sp, #0]
	eff_tx_octets = conn->lll.max_tx_octets;
   16e58:	9202      	str	r2, [sp, #8]
	if (/* Local idle, and Peer request then complete the Peer procedure
   16e5a:	f001 8105 	beq.w	18068 <ull_conn_rx+0x14a4>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   16e5e:	f895 319a 	ldrb.w	r3, [r5, #410]	; 0x19a
	struct node_tx *tx = NULL;
   16e62:	2100      	movs	r1, #0
	       tx) ||
   16e64:	f003 0307 	and.w	r3, r3, #7
   16e68:	2b02      	cmp	r3, #2
   16e6a:	f000 854c 	beq.w	17906 <ull_conn_rx+0xd42>
   16e6e:	f896 a01f 	ldrb.w	sl, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   16e72:	f1ba 0f15 	cmp.w	sl, #21
   16e76:	f43f af0f 	beq.w	16c98 <ull_conn_rx+0xd4>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   16e7a:	4608      	mov	r0, r1
   16e7c:	497f      	ldr	r1, [pc, #508]	; (1707c <ull_conn_rx+0x4b8>)
   16e7e:	f7f9 fd0d 	bl	1089c <mem_release>
			if (conn->llcp_length.state ==
   16e82:	f895 319a 	ldrb.w	r3, [r5, #410]	; 0x19a
   16e86:	f003 0307 	and.w	r3, r3, #7
   16e8a:	2b04      	cmp	r3, #4
   16e8c:	f47f af04 	bne.w	16c98 <ull_conn_rx+0xd4>
				return -EBUSY;
   16e90:	f06f 000f 	mvn.w	r0, #15
   16e94:	e701      	b.n	16c9a <ull_conn_rx+0xd6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   16e96:	7f73      	ldrb	r3, [r6, #29]
   16e98:	2b01      	cmp	r3, #1
   16e9a:	f47f af51 	bne.w	16d40 <ull_conn_rx+0x17c>
		conn->procedure_expire = 0U;
   16e9e:	2300      	movs	r3, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16ea0:	2203      	movs	r2, #3
		conn->procedure_expire = 0U;
   16ea2:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   16ea6:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16ea8:	7132      	strb	r2, [r6, #4]
		break;
   16eaa:	e6f6      	b.n	16c9a <ull_conn_rx+0xd6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   16eac:	7f74      	ldrb	r4, [r6, #29]
   16eae:	2c01      	cmp	r4, #1
   16eb0:	f47f af46 	bne.w	16d40 <ull_conn_rx+0x17c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16eb4:	4871      	ldr	r0, [pc, #452]	; (1707c <ull_conn_rx+0x4b8>)
   16eb6:	f7f9 fcd7 	bl	10868 <mem_acquire>
	if (!tx) {
   16eba:	4601      	mov	r1, r0
   16ebc:	2800      	cmp	r0, #0
   16ebe:	f000 8506 	beq.w	178ce <ull_conn_rx+0xd0a>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16ec2:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   16ec4:	7144      	strb	r4, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16ec6:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   16eca:	2213      	movs	r2, #19
	ctrl_tx_sec_enqueue(conn, tx);
   16ecc:	4628      	mov	r0, r5
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16ece:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   16ed0:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   16ed2:	f7ff fa7f 	bl	163d4 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16ed6:	2303      	movs	r3, #3
   16ed8:	7133      	strb	r3, [r6, #4]
	return 0;
   16eda:	2000      	movs	r0, #0
   16edc:	e6dd      	b.n	16c9a <ull_conn_rx+0xd6>
			nack = phy_rsp_send(conn, *rx, pdu_rx);
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
		if (conn->lll.role ||
   16ede:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   16ee2:	2b00      	cmp	r3, #0
   16ee4:	f6ff af2c 	blt.w	16d40 <ull_conn_rx+0x17c>
   16ee8:	7f73      	ldrb	r3, [r6, #29]
   16eea:	2b03      	cmp	r3, #3
   16eec:	f47f af28 	bne.w	16d40 <ull_conn_rx+0x17c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP, pdu_rx->len)) {
			goto ull_conn_rx_unknown_rsp_send;
		}

		if (!conn->lll.role &&
   16ef0:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
   16ef4:	f895 31a8 	ldrb.w	r3, [r5, #424]	; 0x1a8
   16ef8:	429a      	cmp	r2, r3
   16efa:	f43f af4f 	beq.w	16d9c <ull_conn_rx+0x1d8>
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   16efe:	f895 11aa 	ldrb.w	r1, [r5, #426]	; 0x1aa
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   16f02:	f001 0303 	and.w	r3, r1, #3
   16f06:	2b02      	cmp	r3, #2
   16f08:	f47f af48 	bne.w	16d9c <ull_conn_rx+0x1d8>
			struct pdu_data_llctrl_phy_rsp *p =
				&pdu_rx->llctrl.phy_rsp;

			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;

			conn->llcp_phy.tx &= p->rx_phys;
   16f0c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
			conn->llcp_phy.rx &= p->tx_phys;
   16f10:	f896 2020 	ldrb.w	r2, [r6, #32]
			conn->llcp_phy.tx &= p->rx_phys;
   16f14:	f3c1 0082 	ubfx	r0, r1, #2, #3
   16f18:	4003      	ands	r3, r0
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   16f1a:	009b      	lsls	r3, r3, #2
   16f1c:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   16f20:	ea02 1251 	and.w	r2, r2, r1, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   16f24:	ea43 1342 	orr.w	r3, r3, r2, lsl #5

			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   16f28:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   16f2c:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   16f30:	d002      	beq.n	16f38 <ull_conn_rx+0x374>
   16f32:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   16f36:	d105      	bne.n	16f44 <ull_conn_rx+0x380>
				conn->llcp_phy.tx = 0;
   16f38:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
   16f3c:	f003 0303 	and.w	r3, r3, #3
   16f40:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
				conn->llcp_phy.rx = 0;
			}

			/* pause data packet tx */
			conn->llcp_phy.pause_tx = 1U;
   16f44:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab

			/* Procedure timeout is stopped */
			conn->procedure_expire = 0U;
   16f48:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   16f4a:	f043 0301 	orr.w	r3, r3, #1
   16f4e:	f885 31ab 	strb.w	r3, [r5, #427]	; 0x1ab
			conn->procedure_expire = 0U;
   16f52:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16f56:	e721      	b.n	16d9c <ull_conn_rx+0x1d8>
		if (conn->lll.role ||
   16f58:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   16f5c:	2b00      	cmp	r3, #0
   16f5e:	f6ff aeef 	blt.w	16d40 <ull_conn_rx+0x17c>
   16f62:	7f73      	ldrb	r3, [r6, #29]
   16f64:	2b18      	cmp	r3, #24
   16f66:	f47f aeeb 	bne.w	16d40 <ull_conn_rx+0x17c>
		if (!conn->lll.role &&
   16f6a:	f895 2170 	ldrb.w	r2, [r5, #368]	; 0x170
   16f6e:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
   16f72:	429a      	cmp	r2, r3
   16f74:	f43f af12 	beq.w	16d9c <ull_conn_rx+0x1d8>
		    (conn->llcp_conn_param.state ==
   16f78:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
		     conn->llcp_conn_param.ack) &&
   16f7c:	f003 0307 	and.w	r3, r3, #7
   16f80:	2b04      	cmp	r3, #4
   16f82:	f47f af0b 	bne.w	16d9c <ull_conn_rx+0x1d8>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   16f86:	8c37      	ldrh	r7, [r6, #32]
			if ((interval_min < 6) ||
   16f88:	2f05      	cmp	r7, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   16f8a:	b2ba      	uxth	r2, r7
			if ((interval_min < 6) ||
   16f8c:	f240 87e9 	bls.w	17f62 <ull_conn_rx+0x139e>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   16f90:	8c70      	ldrh	r0, [r6, #34]	; 0x22
			if ((interval_min < 6) ||
   16f92:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   16f96:	b283      	uxth	r3, r0
			if ((interval_min < 6) ||
   16f98:	f200 87e3 	bhi.w	17f62 <ull_conn_rx+0x139e>
			    (interval_max > 3200) ||
   16f9c:	429a      	cmp	r2, r3
   16f9e:	f200 87e0 	bhi.w	17f62 <ull_conn_rx+0x139e>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   16fa2:	8cb1      	ldrh	r1, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
   16fa4:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   16fa8:	fa1f fc81 	uxth.w	ip, r1
			    (interval_min > interval_max) ||
   16fac:	f080 87d9 	bcs.w	17f62 <ull_conn_rx+0x139e>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   16fb0:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			    (latency > 499) ||
   16fb2:	f1a2 0e0a 	sub.w	lr, r2, #10
   16fb6:	fa1f fe8e 	uxth.w	lr, lr
   16fba:	f640 4976 	movw	r9, #3190	; 0xc76
   16fbe:	45ce      	cmp	lr, r9
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   16fc0:	fa1f f882 	uxth.w	r8, r2
			    (latency > 499) ||
   16fc4:	f200 87cd 	bhi.w	17f62 <ull_conn_rx+0x139e>
			     ((latency + 1) * interval_max)) ||
   16fc8:	fb0c 3c03 	mla	ip, ip, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
   16fcc:	ebbc 0f88 	cmp.w	ip, r8, lsl #2
   16fd0:	f080 87c7 	bcs.w	17f62 <ull_conn_rx+0x139e>
			     ((latency + 1) * interval_max)) ||
   16fd4:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
   16fd8:	4573      	cmp	r3, lr
   16fda:	f0c0 87c2 	bcc.w	17f62 <ull_conn_rx+0x139e>
			conn->procedure_expire = 0U;
   16fde:	2300      	movs	r3, #0
			conn->llcp_conn_param.timeout =	timeout;
   16fe0:	f8a5 217a 	strh.w	r2, [r5, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
   16fe4:	f885 e17c 	strb.w	lr, [r5, #380]	; 0x17c
			conn->llcp_conn_param.interval_min = interval_min;
   16fe8:	f8a5 7174 	strh.w	r7, [r5, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   16fec:	f8a5 0176 	strh.w	r0, [r5, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
   16ff0:	f8a5 1178 	strh.w	r1, [r5, #376]	; 0x178
			conn->procedure_expire = 0U;
   16ff4:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   16ff8:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
   16ffc:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   17000:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   17004:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   17008:	f8a5 317e 	strh.w	r3, [r5, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
   1700c:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
   17010:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
   17014:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   17018:	f8a5 3180 	strh.w	r3, [r5, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
   1701c:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
   17020:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   17024:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   17028:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   1702c:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
   17030:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   17034:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   17038:	f8a5 3184 	strh.w	r3, [r5, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   1703c:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
   17040:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
   17044:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   17048:	f8a5 3186 	strh.w	r3, [r5, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   1704c:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
   17050:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
   17054:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   17058:	f8a5 3188 	strh.w	r3, [r5, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   1705c:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   17060:	f896 0036 	ldrb.w	r0, [r6, #54]	; 0x36
   17064:	6826      	ldr	r6, [r4, #0]
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   17066:	2101      	movs	r1, #1
				sys_le16_to_cpu(cpr->offset5);
   17068:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1706c:	f361 0202 	bfi	r2, r1, #0, #3
			conn->llcp_conn_param.offset5 =
   17070:	f8a5 318a 	strh.w	r3, [r5, #394]	; 0x18a
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   17074:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17078:	e690      	b.n	16d9c <ull_conn_rx+0x1d8>
   1707a:	bf00      	nop
   1707c:	20003c54 	.word	0x20003c54
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   17080:	7f73      	ldrb	r3, [r6, #29]
   17082:	2b03      	cmp	r3, #3
   17084:	f47f ae5c 	bne.w	16d40 <ull_conn_rx+0x17c>
		if (!conn->lll.role) {
   17088:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   1708c:	2b00      	cmp	r3, #0
   1708e:	f2c0 84f6 	blt.w	17a7e <ull_conn_rx+0xeba>
			if ((conn->llcp_phy.ack !=
   17092:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
			     conn->llcp_phy.req) &&
   17096:	f895 11a8 	ldrb.w	r1, [r5, #424]	; 0x1a8
			if ((conn->llcp_phy.ack !=
   1709a:	428a      	cmp	r2, r1
   1709c:	d007      	beq.n	170ae <ull_conn_rx+0x4ea>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   1709e:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
   170a2:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   170a6:	3b01      	subs	r3, #1
   170a8:	2b02      	cmp	r3, #2
   170aa:	f240 8755 	bls.w	17f58 <ull_conn_rx+0x1394>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   170ae:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   170b2:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
   170b6:	1a1b      	subs	r3, r3, r0
   170b8:	f003 0303 	and.w	r3, r3, #3
   170bc:	2b02      	cmp	r3, #2
   170be:	f000 869b 	beq.w	17df8 <ull_conn_rx+0x1234>
				     LLCP_ENCRYPTION)) ||
   170c2:	f895 0170 	ldrb.w	r0, [r5, #368]	; 0x170
   170c6:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
   170ca:	4298      	cmp	r0, r3
   170cc:	f000 874f 	beq.w	17f6e <ull_conn_rx+0x13aa>
				nack = reject_ext_ind_send(conn, *rx,
   170d0:	1d31      	adds	r1, r6, #4
   170d2:	4628      	mov	r0, r5
   170d4:	232a      	movs	r3, #42	; 0x2a
   170d6:	2216      	movs	r2, #22
}
   170d8:	b007      	add	sp, #28
   170da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   170de:	f7ff b8c5 	b.w	1626c <reject_ext_ind_send.isra.0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   170e2:	7f73      	ldrb	r3, [r6, #29]
   170e4:	2b18      	cmp	r3, #24
   170e6:	f47f ae2b 	bne.w	16d40 <ull_conn_rx+0x17c>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   170ea:	4fd8      	ldr	r7, [pc, #864]	; (1744c <ull_conn_rx+0x888>)
   170ec:	683b      	ldr	r3, [r7, #0]
   170ee:	9300      	str	r3, [sp, #0]
   170f0:	2b00      	cmp	r3, #0
   170f2:	f000 83c0 	beq.w	17876 <ull_conn_rx+0xcb2>
   170f6:	429d      	cmp	r5, r3
   170f8:	f000 83bd 	beq.w	17876 <ull_conn_rx+0xcb2>
			nack = reject_ext_ind_send(conn, *rx,
   170fc:	1d31      	adds	r1, r6, #4
   170fe:	4628      	mov	r0, r5
   17100:	2320      	movs	r3, #32
   17102:	220f      	movs	r2, #15
   17104:	e7e8      	b.n	170d8 <ull_conn_rx+0x514>
		if (!conn->lll.role ||
   17106:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   1710a:	2b00      	cmp	r3, #0
   1710c:	f6bf ae18 	bge.w	16d40 <ull_conn_rx+0x17c>
   17110:	7f73      	ldrb	r3, [r6, #29]
   17112:	2b0c      	cmp	r3, #12
   17114:	f47f ae14 	bne.w	16d40 <ull_conn_rx+0x17c>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   17118:	f8b6 0029 	ldrh.w	r0, [r6, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   1711c:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   1711e:	1ac3      	subs	r3, r0, r3
   17120:	041b      	lsls	r3, r3, #16
   17122:	f100 8715 	bmi.w	17f50 <ull_conn_rx+0x138c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   17126:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   1712a:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   1712e:	1a9b      	subs	r3, r3, r2
   17130:	f003 0303 	and.w	r3, r3, #3
   17134:	2b02      	cmp	r3, #2
   17136:	f000 8703 	beq.w	17f40 <ull_conn_rx+0x137c>
	if (!conn_upd_curr) {
   1713a:	4bc4      	ldr	r3, [pc, #784]	; (1744c <ull_conn_rx+0x888>)
   1713c:	681a      	ldr	r2, [r3, #0]
   1713e:	2a00      	cmp	r2, #0
   17140:	f000 87fa 	beq.w	18138 <ull_conn_rx+0x1574>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   17144:	f896 3020 	ldrb.w	r3, [r6, #32]
   17148:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   1714c:	f8b6 1021 	ldrh.w	r1, [r6, #33]	; 0x21
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   17150:	f895 3106 	ldrb.w	r3, [r5, #262]	; 0x106
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   17154:	f240 42e2 	movw	r2, #1250	; 0x4e2
   17158:	fb02 f201 	mul.w	r2, r2, r1
	conn->llcp_cu.win_offset_us =
   1715c:	f8c5 2110 	str.w	r2, [r5, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   17160:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   17164:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   17168:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.interval =
   1716c:	f8a5 2108 	strh.w	r2, [r5, #264]	; 0x108
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   17170:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
   17174:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   17178:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.latency =
   1717c:	f8a5 210a 	strh.w	r2, [r5, #266]	; 0x10a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   17180:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
	conn->llcp_cu.ack--;
   17184:	f895 2105 	ldrb.w	r2, [r5, #261]	; 0x105
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   17188:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   1718c:	f8a5 00ec 	strh.w	r0, [r5, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   17190:	f023 0307 	bic.w	r3, r3, #7
	link->mem = conn->llcp_rx;
   17194:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   17198:	f043 0304 	orr.w	r3, r3, #4
	conn->llcp_cu.ack--;
   1719c:	3a01      	subs	r2, #1
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1719e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	conn->llcp_cu.ack--;
   171a2:	f885 2105 	strb.w	r2, [r5, #261]	; 0x105
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   171a6:	f885 3106 	strb.w	r3, [r5, #262]	; 0x106
	conn->llcp_cu.timeout =
   171aa:	f8a5 110c 	strh.w	r1, [r5, #268]	; 0x10c
	link->mem = conn->llcp_rx;
   171ae:	6078      	str	r0, [r7, #4]
	(*rx)->hdr.link = link;
   171b0:	6823      	ldr	r3, [r4, #0]
   171b2:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   171b4:	6823      	ldr	r3, [r4, #0]
   171b6:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	*rx = NULL;
   171ba:	2300      	movs	r3, #0
   171bc:	6023      	str	r3, [r4, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   171be:	f895 2170 	ldrb.w	r2, [r5, #368]	; 0x170
   171c2:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
   171c6:	4293      	cmp	r3, r2
   171c8:	f43f ae2b 	beq.w	16e22 <ull_conn_rx+0x25e>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   171cc:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   171d0:	f003 0307 	and.w	r3, r3, #7
   171d4:	2b04      	cmp	r3, #4
   171d6:	f47f ae24 	bne.w	16e22 <ull_conn_rx+0x25e>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   171da:	f885 2171 	strb.w	r2, [r5, #369]	; 0x171
		if (err) {
   171de:	e620      	b.n	16e22 <ull_conn_rx+0x25e>
		if (conn->lll.role ||
   171e0:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   171e4:	2b00      	cmp	r3, #0
   171e6:	f6ff adab 	blt.w	16d40 <ull_conn_rx+0x17c>
   171ea:	7f73      	ldrb	r3, [r6, #29]
   171ec:	2b09      	cmp	r3, #9
   171ee:	f47f ada7 	bne.w	16d40 <ull_conn_rx+0x17c>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   171f2:	1d31      	adds	r1, r6, #4
   171f4:	4628      	mov	r0, r5
}
   171f6:	b007      	add	sp, #28
   171f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   171fc:	f7ff b97c 	b.w	164f8 <feature_rsp_send.isra.0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   17200:	7f74      	ldrb	r4, [r6, #29]
   17202:	2c06      	cmp	r4, #6
   17204:	f47f ad9c 	bne.w	16d40 <ull_conn_rx+0x17c>
	if (!conn->llcp_version.tx) {
   17208:	f895 3126 	ldrb.w	r3, [r5, #294]	; 0x126
   1720c:	07df      	lsls	r7, r3, #31
   1720e:	f140 84c1 	bpl.w	17b94 <ull_conn_rx+0xfd0>
	} else if (!conn->llcp_version.rx) {
   17212:	f013 0302 	ands.w	r3, r3, #2
   17216:	f47f adc1 	bne.w	16d9c <ull_conn_rx+0x1d8>
		conn->llcp_version.ack = conn->llcp_version.req;
   1721a:	f895 2124 	ldrb.w	r2, [r5, #292]	; 0x124
		conn->procedure_expire = 0U;
   1721e:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
		conn->llcp_version.ack = conn->llcp_version.req;
   17222:	f885 2125 	strb.w	r2, [r5, #293]	; 0x125
	conn->llcp_version.version_number = v->version_number;
   17226:	f896 3020 	ldrb.w	r3, [r6, #32]
   1722a:	f885 3127 	strb.w	r3, [r5, #295]	; 0x127
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1722e:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
   17232:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   17236:	f895 3126 	ldrb.w	r3, [r5, #294]	; 0x126
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1723a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1723e:	f8a5 2128 	strh.w	r2, [r5, #296]	; 0x128
		sys_le16_to_cpu(v->sub_version_number);
   17242:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   17246:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   1724a:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   1724e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   17252:	f8a5 212a 	strh.w	r2, [r5, #298]	; 0x12a
	conn->llcp_version.rx = 1U;
   17256:	f885 3126 	strb.w	r3, [r5, #294]	; 0x126
	return 0;
   1725a:	2000      	movs	r0, #0
   1725c:	e51d      	b.n	16c9a <ull_conn_rx+0xd6>
	break;
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   1725e:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   17262:	2b00      	cmp	r3, #0
   17264:	f6ff ad6c 	blt.w	16d40 <ull_conn_rx+0x17c>
   17268:	7f77      	ldrb	r7, [r6, #29]
   1726a:	2f03      	cmp	r7, #3
   1726c:	f47f ad68 	bne.w	16d40 <ull_conn_rx+0x17c>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   17270:	f895 1064 	ldrb.w	r1, [r5, #100]	; 0x64
					 conn->lll.phy_rx))) {
   17274:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
			if (!(p->phys & (conn->lll.phy_tx |
   17278:	f896 2020 	ldrb.w	r2, [r6, #32]
   1727c:	430b      	orrs	r3, r1
   1727e:	f003 0307 	and.w	r3, r3, #7
   17282:	4213      	tst	r3, r2
   17284:	f43f ad08 	beq.w	16c98 <ull_conn_rx+0xd4>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   17288:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   1728c:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   17290:	1a9b      	subs	r3, r3, r2
   17292:	f003 0303 	and.w	r3, r3, #3
   17296:	2b02      	cmp	r3, #2
   17298:	f43f acfe 	beq.w	16c98 <ull_conn_rx+0xd4>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   1729c:	f105 00ed 	add.w	r0, r5, #237	; 0xed
   172a0:	f002 fb34 	bl	1990c <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   172a4:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
			conn->llcp.chan_map.initiate = 1U;
   172a8:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
			conn->llcp_ack -= 2U;
   172ac:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   172ae:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   172b0:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
			conn->llcp_type = LLCP_CHAN_MAP;
   172b4:	f885 10ea 	strb.w	r1, [r5, #234]	; 0xea
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   172b8:	6822      	ldr	r2, [r4, #0]
			conn->llcp.chan_map.initiate = 1U;
   172ba:	f043 0301 	orr.w	r3, r3, #1
   172be:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
	int nack = 0;
   172c2:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   172c4:	7117      	strb	r7, [r2, #4]

		break;
   172c6:	e4e8      	b.n	16c9a <ull_conn_rx+0xd6>
		if (!conn->lll.role ||
   172c8:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   172cc:	2b00      	cmp	r3, #0
   172ce:	f6bf ad37 	bge.w	16d40 <ull_conn_rx+0x17c>
   172d2:	7f74      	ldrb	r4, [r6, #29]
   172d4:	2c01      	cmp	r4, #1
   172d6:	f47f ad33 	bne.w	16d40 <ull_conn_rx+0x17c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   172da:	485d      	ldr	r0, [pc, #372]	; (17450 <ull_conn_rx+0x88c>)
   172dc:	f7f9 fac4 	bl	10868 <mem_acquire>
		if (!tx) {
   172e0:	4603      	mov	r3, r0
   172e2:	2800      	cmp	r0, #0
   172e4:	f000 82f3 	beq.w	178ce <ull_conn_rx+0xd0a>
	conn->llcp_enc.pause_rx = 1U;
   172e8:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
	conn->lll.enc_rx = 0;
   172ec:	f895 107e 	ldrb.w	r1, [r5, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   172f0:	f022 0205 	bic.w	r2, r2, #5
	conn->lll.enc_rx = 0;
   172f4:	f36f 01c3 	bfc	r1, #3, #1
   172f8:	f885 107e 	strb.w	r1, [r5, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   172fc:	f042 0205 	orr.w	r2, r2, #5
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17300:	7901      	ldrb	r1, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   17302:	f885 2152 	strb.w	r2, [r5, #338]	; 0x152
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   17306:	7144      	strb	r4, [r0, #5]
	    conn->tx_head &&
   17308:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1730c:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   17310:	200b      	movs	r0, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17312:	7119      	strb	r1, [r3, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   17314:	71d8      	strb	r0, [r3, #7]
	if (
   17316:	2a00      	cmp	r2, #0
   17318:	f000 829c 	beq.w	17854 <ull_conn_rx+0xc90>
	    !conn->llcp_enc.pause_tx &&
   1731c:	f895 1152 	ldrb.w	r1, [r5, #338]	; 0x152
	    conn->tx_head &&
   17320:	0788      	lsls	r0, r1, #30
   17322:	f100 8297 	bmi.w	17854 <ull_conn_rx+0xc90>
	    !conn->llcp_phy.pause_tx &&
   17326:	f895 11ab 	ldrb.w	r1, [r5, #427]	; 0x1ab
   1732a:	07c9      	lsls	r1, r1, #31
   1732c:	f100 8292 	bmi.w	17854 <ull_conn_rx+0xc90>
		if (conn->tx_head == conn->tx_data) {
   17330:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
   17334:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   17336:	bf04      	itt	eq
   17338:	6811      	ldreq	r1, [r2, #0]
   1733a:	f8c5 11bc 	streq.w	r1, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   1733e:	f8d5 11b4 	ldr.w	r1, [r5, #436]	; 0x1b4
   17342:	2900      	cmp	r1, #0
   17344:	f000 8707 	beq.w	18156 <ull_conn_rx+0x1592>
	tx->next = conn->tx_ctrl_last->next;
   17348:	f8d5 21b8 	ldr.w	r2, [r5, #440]	; 0x1b8
   1734c:	6811      	ldr	r1, [r2, #0]
   1734e:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   17350:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
   17352:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
	if (!tx->next) {
   17356:	681a      	ldr	r2, [r3, #0]
   17358:	2a00      	cmp	r2, #0
   1735a:	f47f ad1f 	bne.w	16d9c <ull_conn_rx+0x1d8>
		conn->tx_data_last = tx;
   1735e:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
   17362:	e51b      	b.n	16d9c <ull_conn_rx+0x1d8>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   17364:	7f73      	ldrb	r3, [r6, #29]
   17366:	2b09      	cmp	r3, #9
   17368:	f47f acea 	bne.w	16d40 <ull_conn_rx+0x17c>
	       (features[1] << 8) | (features[2] << 16);
   1736c:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   17370:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   17374:	f896 2020 	ldrb.w	r2, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   17378:	4936      	ldr	r1, [pc, #216]	; (17454 <ull_conn_rx+0x890>)
   1737a:	041b      	lsls	r3, r3, #16
   1737c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   17380:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   17382:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
	conn->common.fex_valid = 1U;
   17386:	f895 20dc 	ldrb.w	r2, [r5, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   1738a:	430b      	orrs	r3, r1
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1738c:	4003      	ands	r3, r0
   1738e:	f3c3 0310 	ubfx	r3, r3, #0, #17
   17392:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   17396:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   1739a:	f896 4021 	ldrb.w	r4, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1739e:	f896 0020 	ldrb.w	r0, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   173a2:	041b      	lsls	r3, r3, #16
   173a4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   173a8:	4303      	orrs	r3, r0
   173aa:	430b      	orrs	r3, r1
	feat &= LL_FEAT_BIT_MASK;
   173ac:	f3c3 0310 	ubfx	r3, r3, #0, #17
	conn->llcp_feature.ack = conn->llcp_feature.req;
   173b0:	f895 1118 	ldrb.w	r1, [r5, #280]	; 0x118
	conn->llcp_feature.features_peer =
   173b4:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
	conn->common.fex_valid = 1U;
   173b8:	f042 0201 	orr.w	r2, r2, #1
	conn->procedure_expire = 0U;
   173bc:	2300      	movs	r3, #0
	conn->common.fex_valid = 1U;
   173be:	f885 20dc 	strb.w	r2, [r5, #220]	; 0xdc
	conn->llcp_feature.ack = conn->llcp_feature.req;
   173c2:	f885 1119 	strb.w	r1, [r5, #281]	; 0x119
	conn->procedure_expire = 0U;
   173c6:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   173ca:	4618      	mov	r0, r3
}
   173cc:	e465      	b.n	16c9a <ull_conn_rx+0xd6>
		if (!conn->lll.role ||
   173ce:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   173d2:	2b00      	cmp	r3, #0
   173d4:	f6ff af09 	blt.w	171ea <ull_conn_rx+0x626>
   173d8:	e4b2      	b.n	16d40 <ull_conn_rx+0x17c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   173da:	7f73      	ldrb	r3, [r6, #29]
   173dc:	2b02      	cmp	r3, #2
   173de:	f47f acaf 	bne.w	16d40 <ull_conn_rx+0x17c>
		} else if ((conn->llcp_conn_param.ack !=
   173e2:	f895 1171 	ldrb.w	r1, [r5, #369]	; 0x171
   173e6:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
   173ea:	f896 2020 	ldrb.w	r2, [r6, #32]
   173ee:	4299      	cmp	r1, r3
   173f0:	d002      	beq.n	173f8 <ull_conn_rx+0x834>
			    conn->llcp_conn_param.req) &&
   173f2:	2a0f      	cmp	r2, #15
   173f4:	f000 8489 	beq.w	17d0a <ull_conn_rx+0x1146>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   173f8:	f895 3198 	ldrb.w	r3, [r5, #408]	; 0x198
   173fc:	f895 1199 	ldrb.w	r1, [r5, #409]	; 0x199
   17400:	4299      	cmp	r1, r3
   17402:	d002      	beq.n	1740a <ull_conn_rx+0x846>
   17404:	2a14      	cmp	r2, #20
   17406:	f000 84e3 	beq.w	17dd0 <ull_conn_rx+0x120c>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   1740a:	f895 11a8 	ldrb.w	r1, [r5, #424]	; 0x1a8
   1740e:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   17412:	428b      	cmp	r3, r1
   17414:	d002      	beq.n	1741c <ull_conn_rx+0x858>
   17416:	2a16      	cmp	r2, #22
   17418:	f000 8566 	beq.w	17ee8 <ull_conn_rx+0x1324>
			switch (llctrl->unknown_rsp.type) {
   1741c:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1741e:	bf04      	itt	eq
   17420:	2303      	moveq	r3, #3
   17422:	7133      	strbeq	r3, [r6, #4]
				break;
   17424:	e4fd      	b.n	16e22 <ull_conn_rx+0x25e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   17426:	7f73      	ldrb	r3, [r6, #29]
   17428:	2b02      	cmp	r3, #2
   1742a:	f47f ac89 	bne.w	16d40 <ull_conn_rx+0x17c>
		conn->llcp_enc.pause_rx = 0U;
   1742e:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
		conn->llcp_ack = conn->llcp_req;
   17432:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   17436:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		conn->llcp_enc.pause_rx = 0U;
   1743a:	f022 0203 	bic.w	r2, r2, #3
		conn->procedure_expire = 0U;
   1743e:	2300      	movs	r3, #0
		conn->llcp_enc.pause_rx = 0U;
   17440:	f885 2152 	strb.w	r2, [r5, #338]	; 0x152
		conn->procedure_expire = 0U;
   17444:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   17448:	4618      	mov	r0, r3
		break;
   1744a:	e426      	b.n	16c9a <ull_conn_rx+0xd6>
   1744c:	2000321c 	.word	0x2000321c
   17450:	20003c54 	.word	0x20003c54
   17454:	fffe30d0 	.word	0xfffe30d0
		((!conn->llcp_enc.refresh &&
   17458:	f1ba 0f07 	cmp.w	sl, #7
   1745c:	d0bd      	beq.n	173da <ull_conn_rx+0x816>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   1745e:	f1ba 0f02 	cmp.w	sl, #2
   17462:	f47f acbd 	bne.w	16de0 <ull_conn_rx+0x21c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   17466:	7f73      	ldrb	r3, [r6, #29]
   17468:	2b02      	cmp	r3, #2
   1746a:	f47f ac69 	bne.w	16d40 <ull_conn_rx+0x17c>
		terminate_ind_recv(conn, *rx, pdu_rx);
   1746e:	f896 3020 	ldrb.w	r3, [r6, #32]
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   17472:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17476:	2303      	movs	r3, #3
   17478:	7133      	strb	r3, [r6, #4]
	int nack = 0;
   1747a:	2000      	movs	r0, #0
}
   1747c:	e40d      	b.n	16c9a <ull_conn_rx+0xd6>
		if (!conn->lll.role ||
   1747e:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   17482:	2b00      	cmp	r3, #0
   17484:	f6bf ac5c 	bge.w	16d40 <ull_conn_rx+0x17c>
   17488:	7f73      	ldrb	r3, [r6, #29]
   1748a:	2b08      	cmp	r3, #8
   1748c:	f47f ac58 	bne.w	16d40 <ull_conn_rx+0x17c>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   17490:	f8b6 4025 	ldrh.w	r4, [r6, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   17494:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   17496:	1ae3      	subs	r3, r4, r3
   17498:	041f      	lsls	r7, r3, #16
   1749a:	f100 8559 	bmi.w	17f50 <ull_conn_rx+0x138c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1749e:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   174a2:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   174a6:	1a9b      	subs	r3, r3, r2
   174a8:	f003 0303 	and.w	r3, r3, #3
   174ac:	2b02      	cmp	r3, #2
   174ae:	f000 8547 	beq.w	17f40 <ull_conn_rx+0x137c>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   174b2:	2205      	movs	r2, #5
   174b4:	f106 0120 	add.w	r1, r6, #32
   174b8:	f105 00ed 	add.w	r0, r5, #237	; 0xed
   174bc:	f00b f930 	bl	22720 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   174c0:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
	conn->llcp_ack -= 2U;
   174c4:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
	conn->llcp.chan_map.instant = instant;
   174c8:	f8a5 40f2 	strh.w	r4, [r5, #242]	; 0xf2
	conn->llcp_type = LLCP_CHAN_MAP;
   174cc:	2002      	movs	r0, #2
	conn->llcp.chan_map.initiate = 0U;
   174ce:	f36f 0200 	bfc	r2, #0, #1
	conn->llcp_ack -= 2U;
   174d2:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   174d4:	2103      	movs	r1, #3
	conn->llcp_type = LLCP_CHAN_MAP;
   174d6:	f885 00ea 	strb.w	r0, [r5, #234]	; 0xea
	conn->llcp.chan_map.initiate = 0U;
   174da:	f885 20ec 	strb.w	r2, [r5, #236]	; 0xec
	conn->llcp_ack -= 2U;
   174de:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	int nack = 0;
   174e2:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   174e4:	7131      	strb	r1, [r6, #4]
		if (err) {
   174e6:	f7ff bbd8 	b.w	16c9a <ull_conn_rx+0xd6>
		if (!conn->lll.role ||
   174ea:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   174ee:	2b00      	cmp	r3, #0
   174f0:	f6bf ac26 	bge.w	16d40 <ull_conn_rx+0x17c>
   174f4:	7f73      	ldrb	r3, [r6, #29]
   174f6:	2b05      	cmp	r3, #5
   174f8:	f47f ac22 	bne.w	16d40 <ull_conn_rx+0x17c>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   174fc:	f896 1020 	ldrb.w	r1, [r6, #32]
   17500:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   17504:	ea41 0003 	orr.w	r0, r1, r3
   17508:	f010 0007 	ands.w	r0, r0, #7
   1750c:	f040 847e 	bne.w	17e0c <ull_conn_rx+0x1248>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   17510:	f895 11a8 	ldrb.w	r1, [r5, #424]	; 0x1a8
   17514:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   17518:	428b      	cmp	r3, r1
   1751a:	f43f ac3f 	beq.w	16d9c <ull_conn_rx+0x1d8>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   1751e:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   17522:	f003 0303 	and.w	r3, r3, #3
   17526:	2b02      	cmp	r3, #2
   17528:	f47f ac38 	bne.w	16d9c <ull_conn_rx+0x1d8>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1752c:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   17530:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
   17534:	f885 11a9 	strb.w	r1, [r5, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
   17538:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1753c:	4611      	mov	r1, r2
   1753e:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   17542:	f885 31ab 	strb.w	r3, [r5, #427]	; 0x1ab
		if (!conn->llcp_phy.cmd) {
   17546:	f013 0304 	ands.w	r3, r3, #4
		conn->procedure_expire = 0U;
   1754a:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1754e:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
   17552:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   17556:	f040 85f2 	bne.w	1813e <ull_conn_rx+0x157a>
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1755a:	6822      	ldr	r2, [r4, #0]
   1755c:	2103      	movs	r1, #3
	int nack = 0;
   1755e:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17560:	7111      	strb	r1, [r2, #4]
		if (err) {
   17562:	f7ff bb9a 	b.w	16c9a <ull_conn_rx+0xd6>
		if (!conn->lll.role ||
   17566:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   1756a:	2b00      	cmp	r3, #0
   1756c:	f6bf abe8 	bge.w	16d40 <ull_conn_rx+0x17c>
   17570:	7f73      	ldrb	r3, [r6, #29]
   17572:	2b17      	cmp	r3, #23
   17574:	f47f abe4 	bne.w	16d40 <ull_conn_rx+0x17c>
		memcpy(&conn->llcp_enc.rand[0],
   17578:	2208      	movs	r2, #8
   1757a:	f106 0120 	add.w	r1, r6, #32
   1757e:	f205 1055 	addw	r0, r5, #341	; 0x155
   17582:	f00b f8cd 	bl	22720 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   17586:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   1758a:	f885 3153 	strb.w	r3, [r5, #339]	; 0x153
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   1758e:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   17592:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   17596:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1759a:	6821      	ldr	r1, [r4, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1759c:	2201      	movs	r2, #1
   1759e:	f362 0301 	bfi	r3, r2, #0, #2
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   175a2:	2203      	movs	r2, #3
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   175a4:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   175a8:	710a      	strb	r2, [r1, #4]
		conn->llcp_ack -= 2U;
   175aa:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
		conn->llcp_type = LLCP_ENCRYPTION;
   175ae:	f885 20ea 	strb.w	r2, [r5, #234]	; 0xea
		conn->llcp_ack -= 2U;
   175b2:	3b02      	subs	r3, #2
   175b4:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		memcpy(&conn->llcp.encryption.skd[0],
   175b8:	2208      	movs	r2, #8
   175ba:	f106 012a 	add.w	r1, r6, #42	; 0x2a
   175be:	f105 00ee 	add.w	r0, r5, #238	; 0xee
   175c2:	f00b f8ad 	bl	22720 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   175c6:	2204      	movs	r2, #4
   175c8:	f106 0132 	add.w	r1, r6, #50	; 0x32
   175cc:	f105 0098 	add.w	r0, r5, #152	; 0x98
   175d0:	f00b f8a6 	bl	22720 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   175d4:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   175d8:	f8b5 20ca 	ldrh.w	r2, [r5, #202]	; 0xca
   175dc:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
		conn->llcp_enc.pause_rx = 1U;
   175e0:	f043 0301 	orr.w	r3, r3, #1
   175e4:	f885 3152 	strb.w	r3, [r5, #338]	; 0x152
	int nack = 0;
   175e8:	2000      	movs	r0, #0
		break;
   175ea:	f7ff bb56 	b.w	16c9a <ull_conn_rx+0xd6>
		if (conn->lll.role ||
   175ee:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   175f2:	2b00      	cmp	r3, #0
   175f4:	f6ff aba4 	blt.w	16d40 <ull_conn_rx+0x17c>
   175f8:	7f73      	ldrb	r3, [r6, #29]
   175fa:	2b0d      	cmp	r3, #13
   175fc:	f47f aba0 	bne.w	16d40 <ull_conn_rx+0x17c>
		memcpy(&conn->llcp.encryption.skd[8],
   17600:	2208      	movs	r2, #8
   17602:	f106 0120 	add.w	r1, r6, #32
   17606:	f105 00f6 	add.w	r0, r5, #246	; 0xf6
   1760a:	f00b f889 	bl	22720 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   1760e:	f106 0128 	add.w	r1, r6, #40	; 0x28
   17612:	2204      	movs	r2, #4
   17614:	f105 009c 	add.w	r0, r5, #156	; 0x9c
   17618:	f00b f882 	bl	22720 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   1761c:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17620:	6822      	ldr	r2, [r4, #0]
		conn->llcp_enc.pause_rx = 1U;
   17622:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17626:	2103      	movs	r1, #3
		conn->llcp_enc.pause_rx = 1U;
   17628:	f885 3152 	strb.w	r3, [r5, #338]	; 0x152
	int nack = 0;
   1762c:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1762e:	7111      	strb	r1, [r2, #4]
		break;
   17630:	f7ff bb33 	b.w	16c9a <ull_conn_rx+0xd6>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   17634:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   17638:	2b00      	cmp	r3, #0
   1763a:	f6ff ab81 	blt.w	16d40 <ull_conn_rx+0x17c>
   1763e:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   17642:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   17646:	429a      	cmp	r2, r3
   17648:	f43f ab7a 	beq.w	16d40 <ull_conn_rx+0x17c>
   1764c:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   17650:	2b03      	cmp	r3, #3
   17652:	f47f ab75 	bne.w	16d40 <ull_conn_rx+0x17c>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   17656:	7f72      	ldrb	r2, [r6, #29]
   17658:	2a01      	cmp	r2, #1
   1765a:	f47f ab71 	bne.w	16d40 <ull_conn_rx+0x17c>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1765e:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
   17662:	f36f 0201 	bfc	r2, #0, #2
   17666:	f885 20ec 	strb.w	r2, [r5, #236]	; 0xec
	int nack = 0;
   1766a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1766c:	7133      	strb	r3, [r6, #4]
		break;
   1766e:	f7ff bb14 	b.w	16c9a <ull_conn_rx+0xd6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   17672:	7f73      	ldrb	r3, [r6, #29]
   17674:	2b01      	cmp	r3, #1
   17676:	f47f ab63 	bne.w	16d40 <ull_conn_rx+0x17c>
		if (conn->lll.role) {
   1767a:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   1767e:	2b00      	cmp	r3, #0
   17680:	f6ff abb5 	blt.w	16dee <ull_conn_rx+0x22a>
			conn->llcp_enc.pause_rx = 0U;
   17684:	f895 1152 	ldrb.w	r1, [r5, #338]	; 0x152
   17688:	f021 0103 	bic.w	r1, r1, #3
   1768c:	f885 1152 	strb.w	r1, [r5, #338]	; 0x152
   17690:	f7ff bbbe 	b.w	16e10 <ull_conn_rx+0x24c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   17694:	7f73      	ldrb	r3, [r6, #29]
   17696:	2b01      	cmp	r3, #1
   17698:	f47f ab52 	bne.w	16d40 <ull_conn_rx+0x17c>
	} else if (!conn->lll.role) {
   1769c:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   176a0:	2b00      	cmp	r3, #0
   176a2:	f280 80c1 	bge.w	17828 <ull_conn_rx+0xc64>
		conn->lll.enc_tx = 0;
   176a6:	f895 307e 	ldrb.w	r3, [r5, #126]	; 0x7e
   176aa:	f36f 1304 	bfc	r3, #4, #1
   176ae:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
		goto pause_enc_rsp_send_exit;
   176b2:	f7ff bb73 	b.w	16d9c <ull_conn_rx+0x1d8>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   176b6:	f895 01a8 	ldrb.w	r0, [r5, #424]	; 0x1a8
   176ba:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   176be:	4283      	cmp	r3, r0
   176c0:	f43f ab6c 	beq.w	16d9c <ull_conn_rx+0x1d8>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   176c4:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   176c8:	2a23      	cmp	r2, #35	; 0x23
   176ca:	d012      	beq.n	176f2 <ull_conn_rx+0xb2e>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   176cc:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   176d0:	f895 11ab 	ldrb.w	r1, [r5, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
   176d4:	f885 01a9 	strb.w	r0, [r5, #425]	; 0x1a9
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   176d8:	f3c3 0002 	ubfx	r0, r3, #0, #3
   176dc:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   176e0:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
   176e4:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   176e6:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   176ea:	f885 11ab 	strb.w	r1, [r5, #427]	; 0x1ab
		conn->procedure_expire = 0U;
   176ee:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
	if (!conn->llcp_phy.cmd) {
   176f2:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   176f6:	0759      	lsls	r1, r3, #29
   176f8:	f57f ab50 	bpl.w	16d9c <ull_conn_rx+0x1d8>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   176fc:	230f      	movs	r3, #15
	p->status = rej_ext_ind->error_code;
   176fe:	7732      	strb	r2, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   17700:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
   17702:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
   17706:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1770a:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
   1770c:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   17710:	f3c3 0302 	ubfx	r3, r3, #0, #3
   17714:	77b3      	strb	r3, [r6, #30]
	int nack = 0;
   17716:	2000      	movs	r0, #0
   17718:	f7ff babf 	b.w	16c9a <ull_conn_rx+0xd6>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1771c:	f895 2171 	ldrb.w	r2, [r5, #369]	; 0x171
   17720:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
   17724:	429a      	cmp	r2, r3
   17726:	f43f ab39 	beq.w	16d9c <ull_conn_rx+0x1d8>
	if (!lll->role && (rej_ext_ind->error_code ==
   1772a:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
   1772e:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   17732:	2900      	cmp	r1, #0
   17734:	f2c0 8516 	blt.w	18164 <ull_conn_rx+0x15a0>
   17738:	2a1a      	cmp	r2, #26
   1773a:	f000 861a 	beq.w	18372 <ull_conn_rx+0x17ae>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1773e:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
   17742:	f002 0107 	and.w	r1, r2, #7
   17746:	2904      	cmp	r1, #4
   17748:	f000 85ce 	beq.w	182e8 <ull_conn_rx+0x1724>
	if (!conn->llcp_conn_param.cmd) {
   1774c:	0713      	lsls	r3, r2, #28
   1774e:	f57f ab25 	bpl.w	16d9c <ull_conn_rx+0x1d8>
	cu->status = rej_ext_ind->error_code;
   17752:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   17756:	7733      	strb	r3, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   17758:	220b      	movs	r2, #11
   1775a:	7132      	strb	r2, [r6, #4]
	cu->interval = lll->interval;
   1775c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
   1775e:	f8b5 20c6 	ldrh.w	r2, [r5, #198]	; 0xc6
	cu->latency = lll->latency;
   17762:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	cu->interval = lll->interval;
   17764:	83f3      	strh	r3, [r6, #30]
	cu->timeout = conn->supervision_reload *
   17766:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
   1776a:	237d      	movs	r3, #125	; 0x7d
   1776c:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
   17770:	8431      	strh	r1, [r6, #32]
		      lll->interval * 125U / 1000;
   17772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
   17776:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
   17778:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   1777c:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   1777e:	f7ff ba8c 	b.w	16c9a <ull_conn_rx+0xd6>
		if ((conn->llcp_ack != conn->llcp_req) &&
   17782:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   17786:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   1778a:	429a      	cmp	r2, r3
   1778c:	f43f ab06 	beq.w	16d9c <ull_conn_rx+0x1d8>
   17790:	f895 20ea 	ldrb.w	r2, [r5, #234]	; 0xea
   17794:	2a03      	cmp	r2, #3
   17796:	f47f ab01 	bne.w	16d9c <ull_conn_rx+0x1d8>
	conn->llcp_enc.pause_rx = 0U;
   1779a:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
   1779e:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
   177a2:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   177a6:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   177a8:	f885 2152 	strb.w	r2, [r5, #338]	; 0x152
	conn->procedure_expire = 0U;
   177ac:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   177b0:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   177b4:	f886 2020 	strb.w	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   177b8:	220d      	movs	r2, #13
	int nack = 0;
   177ba:	4618      	mov	r0, r3
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   177bc:	77f2      	strb	r2, [r6, #31]
	if (err) {
   177be:	f7ff ba6c 	b.w	16c9a <ull_conn_rx+0xd6>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   177c2:	f895 2198 	ldrb.w	r2, [r5, #408]	; 0x198
   177c6:	f895 3199 	ldrb.w	r3, [r5, #409]	; 0x199
   177ca:	4293      	cmp	r3, r2
   177cc:	f43f aae6 	beq.w	16d9c <ull_conn_rx+0x1d8>
	conn->procedure_expire = 0U;
   177d0:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   177d2:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   177d4:	f885 2199 	strb.w	r2, [r5, #409]	; 0x199
	conn->procedure_expire = 0U;
   177d8:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   177dc:	7771      	strb	r1, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   177de:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   177e2:	f8b5 705c 	ldrh.w	r7, [r5, #92]	; 0x5c
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   177e6:	f8b5 4062 	ldrh.w	r4, [r5, #98]	; 0x62
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   177ea:	f8b5 1060 	ldrh.w	r1, [r5, #96]	; 0x60
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   177ee:	8432      	strh	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   177f0:	2215      	movs	r2, #21
	int nack = 0;
   177f2:	4618      	mov	r0, r3
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   177f4:	84b7      	strh	r7, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   177f6:	8474      	strh	r4, [r6, #34]	; 0x22
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   177f8:	84f1      	strh	r1, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   177fa:	77f2      	strb	r2, [r6, #31]
	if (err) {
   177fc:	f7ff ba4d 	b.w	16c9a <ull_conn_rx+0xd6>
		conn->tx_data_last = tx;
   17800:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
   17804:	f7ff baca 	b.w	16d9c <ull_conn_rx+0x1d8>
		((!conn->llcp_enc.refresh &&
   17808:	f1ba 0f02 	cmp.w	sl, #2
   1780c:	f47f aa0e 	bne.w	16c2c <ull_conn_rx+0x68>
   17810:	e629      	b.n	17466 <ull_conn_rx+0x8a2>
			tx->next = conn->tx_head;
   17812:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   17814:	e9c5 006c 	strd	r0, r0, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   17818:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   1781c:	f7ff babb 	b.w	16d96 <ull_conn_rx+0x1d2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   17820:	7f73      	ldrb	r3, [r6, #29]
   17822:	2b01      	cmp	r3, #1
   17824:	f47f aa8c 	bne.w	16d40 <ull_conn_rx+0x17c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17828:	48d6      	ldr	r0, [pc, #856]	; (17b84 <ull_conn_rx+0xfc0>)
   1782a:	f7f9 f81d 	bl	10868 <mem_acquire>
		if (!tx) {
   1782e:	4603      	mov	r3, r0
   17830:	2800      	cmp	r0, #0
   17832:	d04c      	beq.n	178ce <ull_conn_rx+0xd0a>
	conn->llcp_enc.pause_rx = 1U;
   17834:	f895 0152 	ldrb.w	r0, [r5, #338]	; 0x152
	conn->lll.enc_rx = 0;
   17838:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1783c:	7919      	ldrb	r1, [r3, #4]
	conn->llcp_enc.pause_rx = 1U;
   1783e:	f040 0001 	orr.w	r0, r0, #1
   17842:	f885 0152 	strb.w	r0, [r5, #338]	; 0x152
	conn->lll.enc_rx = 0;
   17846:	f022 0218 	bic.w	r2, r2, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1784a:	2001      	movs	r0, #1
	conn->lll.enc_rx = 0;
   1784c:	f885 207e 	strb.w	r2, [r5, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   17850:	7158      	strb	r0, [r3, #5]
   17852:	e559      	b.n	17308 <ull_conn_rx+0x744>
		if (!conn->tx_ctrl) {
   17854:	f8d5 11b4 	ldr.w	r1, [r5, #436]	; 0x1b4
   17858:	2900      	cmp	r1, #0
   1785a:	f47f ad75 	bne.w	17348 <ull_conn_rx+0x784>
			tx->next = conn->tx_head;
   1785e:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   17860:	e9c5 336c 	strd	r3, r3, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   17864:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   17868:	e575      	b.n	17356 <ull_conn_rx+0x792>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   1786a:	7f73      	ldrb	r3, [r6, #29]
   1786c:	2b01      	cmp	r3, #1
   1786e:	f43f af09 	beq.w	17684 <ull_conn_rx+0xac0>
   17872:	f7ff ba65 	b.w	16d40 <ull_conn_rx+0x17c>
		if (!conn->lll.role) {
   17876:	f995 003d 	ldrsb.w	r0, [r5, #61]	; 0x3d
   1787a:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
   1787e:	f895 2170 	ldrb.w	r2, [r5, #368]	; 0x170
   17882:	9302      	str	r3, [sp, #8]
   17884:	2800      	cmp	r0, #0
   17886:	f2c0 80e1 	blt.w	17a4c <ull_conn_rx+0xe88>
			if ((conn->llcp_conn_param.req !=
   1788a:	4293      	cmp	r3, r2
   1788c:	d009      	beq.n	178a2 <ull_conn_rx+0xcde>
			    ((conn->llcp_conn_param.state ==
   1788e:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
					conn->llcp_conn_param.ack) &&
   17892:	f012 0207 	ands.w	r2, r2, #7
   17896:	f000 82a5 	beq.w	17de4 <ull_conn_rx+0x1220>
			      LLCP_CPR_STATE_REQ) ||
   1789a:	3a04      	subs	r2, #4
   1789c:	2a01      	cmp	r2, #1
   1789e:	f240 82a1 	bls.w	17de4 <ull_conn_rx+0x1220>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   178a2:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   178a6:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
   178aa:	1a12      	subs	r2, r2, r0
   178ac:	f002 0203 	and.w	r2, r2, #3
   178b0:	2a02      	cmp	r2, #2
   178b2:	f000 8418 	beq.w	180e6 <ull_conn_rx+0x1522>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   178b6:	f895 01a8 	ldrb.w	r0, [r5, #424]	; 0x1a8
   178ba:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
   178be:	4290      	cmp	r0, r2
   178c0:	f000 8476 	beq.w	181b0 <ull_conn_rx+0x15ec>
				nack = reject_ext_ind_send(conn, *rx,
   178c4:	1d31      	adds	r1, r6, #4
   178c6:	4628      	mov	r0, r5
   178c8:	232a      	movs	r3, #42	; 0x2a
   178ca:	220f      	movs	r2, #15
   178cc:	e404      	b.n	170d8 <ull_conn_rx+0x514>
			return -ENOBUFS;
   178ce:	f06f 0036 	mvn.w	r0, #54	; 0x36
   178d2:	f7ff b9e2 	b.w	16c9a <ull_conn_rx+0xd6>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   178d6:	48ab      	ldr	r0, [pc, #684]	; (17b84 <ull_conn_rx+0xfc0>)
   178d8:	f7f8 ffc6 	bl	10868 <mem_acquire>
		if (!tx) {
   178dc:	4601      	mov	r1, r0
   178de:	2800      	cmp	r0, #0
   178e0:	d0f5      	beq.n	178ce <ull_conn_rx+0xd0a>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   178e2:	f895 0198 	ldrb.w	r0, [r5, #408]	; 0x198
   178e6:	f895 3199 	ldrb.w	r3, [r5, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
   178ea:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
   178ee:	9201      	str	r2, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   178f0:	4298      	cmp	r0, r3
	eff_tx_octets = conn->lll.max_tx_octets;
   178f2:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   178f6:	f8b5 8062 	ldrh.w	r8, [r5, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   178fa:	f8b5 9060 	ldrh.w	r9, [r5, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   178fe:	9000      	str	r0, [sp, #0]
	eff_tx_octets = conn->lll.max_tx_octets;
   17900:	9202      	str	r2, [sp, #8]
	if (/* Local idle, and Peer request then complete the Peer procedure
   17902:	f040 857c 	bne.w	183fe <ull_conn_rx+0x183a>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   17906:	8c33      	ldrh	r3, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   17908:	2b1a      	cmp	r3, #26
   1790a:	f240 825f 	bls.w	17dcc <ull_conn_rx+0x1208>
			eff_tx_octets = MIN(max_rx_octets,
   1790e:	f8b5 00d6 	ldrh.w	r0, [r5, #214]	; 0xd6
   17912:	4298      	cmp	r0, r3
   17914:	bf28      	it	cs
   17916:	4618      	movcs	r0, r3
		max_tx_octets = sys_le16_to_cpu(lr->max_tx_octets);
   17918:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   1791c:	f1bc 0f1a 	cmp.w	ip, #26
   17920:	f240 8271 	bls.w	17e06 <ull_conn_rx+0x1242>
			eff_rx_octets = MIN(max_tx_octets,
   17924:	f1bc 0ffb 	cmp.w	ip, #251	; 0xfb
   17928:	bf28      	it	cs
   1792a:	f04f 0cfb 	movcs.w	ip, #251	; 0xfb
	if (!conn->common.fex_valid ||
   1792e:	f895 a0dc 	ldrb.w	sl, [r5, #220]	; 0xdc
	feature_coded_phy = (conn->llcp_feature.features_conn &
   17932:	f8d5 e11c 	ldr.w	lr, [r5, #284]	; 0x11c
	if (!conn->common.fex_valid ||
   17936:	f8b5 30d8 	ldrh.w	r3, [r5, #216]	; 0xd8
   1793a:	f01a 0f01 	tst.w	sl, #1
   1793e:	f000 8116 	beq.w	17b6e <ull_conn_rx+0xfaa>
   17942:	f41e 6f00 	tst.w	lr, #2048	; 0x800
   17946:	f000 83d5 	beq.w	180f4 <ull_conn_rx+0x1530>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   1794a:	f244 2e90 	movw	lr, #17040	; 0x4290
   1794e:	4573      	cmp	r3, lr
   17950:	bf28      	it	cs
   17952:	4673      	movcs	r3, lr
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
   17954:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   17958:	bf38      	it	cc
   1795a:	f44f 73a4 	movcc.w	r3, #328	; 0x148
		lr_rx_time = sys_le16_to_cpu(lr->max_rx_time);
   1795e:	f8b6 b022 	ldrh.w	fp, [r6, #34]	; 0x22
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   17962:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
   17964:	9203      	str	r2, [sp, #12]
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   17966:	f5bb 7fa4 	cmp.w	fp, #328	; 0x148
   1796a:	f0c0 8243 	bcc.w	17df4 <ull_conn_rx+0x1230>
			eff_tx_time = MAX(eff_tx_time,
   1796e:	f895 a064 	ldrb.w	sl, [r5, #100]	; 0x64
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   17972:	459b      	cmp	fp, r3
   17974:	bf28      	it	cs
   17976:	469b      	movcs	fp, r3
			eff_tx_time = MAX(eff_tx_time,
   17978:	f01a 0f04 	tst.w	sl, #4
   1797c:	f00a 0307 	and.w	r3, sl, #7
   17980:	f040 83ae 	bne.w	180e0 <ull_conn_rx+0x151c>
   17984:	f103 0a28 	add.w	sl, r3, #40	; 0x28
   17988:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   1798c:	105b      	asrs	r3, r3, #1
   1798e:	fa2a f303 	lsr.w	r3, sl, r3
   17992:	455b      	cmp	r3, fp
   17994:	bf38      	it	cc
   17996:	465b      	movcc	r3, fp
   17998:	b29b      	uxth	r3, r3
		if (lr_tx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   1799a:	9a03      	ldr	r2, [sp, #12]
   1799c:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
   179a0:	f0c0 8226 	bcc.w	17df0 <ull_conn_rx+0x122c>
			eff_rx_time = MAX(eff_rx_time,
   179a4:	f895 a065 	ldrb.w	sl, [r5, #101]	; 0x65
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   179a8:	4572      	cmp	r2, lr
   179aa:	bf28      	it	cs
   179ac:	4672      	movcs	r2, lr
			eff_rx_time = MAX(eff_rx_time,
   179ae:	f01a 0f04 	tst.w	sl, #4
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   179b2:	4693      	mov	fp, r2
			eff_rx_time = MAX(eff_rx_time,
   179b4:	f00a 0e07 	and.w	lr, sl, #7
   179b8:	f040 83ad 	bne.w	18116 <ull_conn_rx+0x1552>
   179bc:	f10e 0a28 	add.w	sl, lr, #40	; 0x28
   179c0:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   179c4:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   179c8:	fa2a fe0e 	lsr.w	lr, sl, lr
   179cc:	45de      	cmp	lr, fp
   179ce:	bf38      	it	cc
   179d0:	46de      	movcc	lr, fp
   179d2:	fa1f fe8e 	uxth.w	lr, lr
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   179d6:	9a01      	ldr	r2, [sp, #4]
   179d8:	4594      	cmp	ip, r2
   179da:	f000 830e 	beq.w	17ffa <ull_conn_rx+0x1436>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   179de:	9a00      	ldr	r2, [sp, #0]
			conn->llcp_length.rx_octets = eff_rx_octets;
   179e0:	f8a5 c19c 	strh.w	ip, [r5, #412]	; 0x19c
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   179e4:	3a01      	subs	r2, #1
   179e6:	f885 2199 	strb.w	r2, [r5, #409]	; 0x199
			conn->llcp_length.tx_octets = eff_tx_octets;
   179ea:	f8a5 019e 	strh.w	r0, [r5, #414]	; 0x19e
				conn->llcp_length.state =
   179ee:	f895 219a 	ldrb.w	r2, [r5, #410]	; 0x19a
			conn->llcp_length.rx_time = eff_rx_time;
   179f2:	f8a5 e1a0 	strh.w	lr, [r5, #416]	; 0x1a0
			conn->llcp_length.tx_time = eff_tx_time;
   179f6:	f8a5 31a2 	strh.w	r3, [r5, #418]	; 0x1a2
			if (tx) {
   179fa:	2900      	cmp	r1, #0
   179fc:	f000 838e 	beq.w	1811c <ull_conn_rx+0x1558>
				conn->llcp_length.state =
   17a00:	2605      	movs	r6, #5
   17a02:	f366 0202 	bfi	r2, r6, #0, #3
   17a06:	f885 219a 	strb.w	r2, [r5, #410]	; 0x19a
			link->mem = conn->llcp_rx;
   17a0a:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
   17a0e:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   17a10:	6822      	ldr	r2, [r4, #0]
   17a12:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   17a14:	6822      	ldr	r2, [r4, #0]
   17a16:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
			*rx = NULL;
   17a1a:	2200      	movs	r2, #0
   17a1c:	6022      	str	r2, [r4, #0]
	if (tx) {
   17a1e:	2900      	cmp	r1, #0
   17a20:	f43f a93a 	beq.w	16c98 <ull_conn_rx+0xd4>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17a24:	790a      	ldrb	r2, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   17a26:	8188      	strh	r0, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17a28:	f042 0203 	orr.w	r2, r2, #3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   17a2c:	2609      	movs	r6, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   17a2e:	2415      	movs	r4, #21
	ctrl_tx_sec_enqueue(conn, tx);
   17a30:	4628      	mov	r0, r5
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   17a32:	f8a1 c008 	strh.w	ip, [r1, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   17a36:	f8a1 e00a 	strh.w	lr, [r1, #10]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   17a3a:	81cb      	strh	r3, [r1, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17a3c:	710a      	strb	r2, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   17a3e:	714e      	strb	r6, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   17a40:	71cc      	strb	r4, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   17a42:	f7fe fcc7 	bl	163d4 <ctrl_tx_sec_enqueue>
	return 0;
   17a46:	2000      	movs	r0, #0
}
   17a48:	f7ff b927 	b.w	16c9a <ull_conn_rx+0xd6>
		} else if ((conn->llcp_conn_param.req ==
   17a4c:	9b02      	ldr	r3, [sp, #8]
   17a4e:	4293      	cmp	r3, r2
   17a50:	f000 80c6 	beq.w	17be0 <ull_conn_rx+0x101c>
			    conn->llcp_conn_param.ack) ||
   17a54:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
   17a58:	0790      	lsls	r0, r2, #30
   17a5a:	f000 80c1 	beq.w	17be0 <ull_conn_rx+0x101c>
			LL_ASSERT(0);
   17a5e:	4a4a      	ldr	r2, [pc, #296]	; (17b88 <ull_conn_rx+0xfc4>)
   17a60:	494a      	ldr	r1, [pc, #296]	; (17b8c <ull_conn_rx+0xfc8>)
   17a62:	484b      	ldr	r0, [pc, #300]	; (17b90 <ull_conn_rx+0xfcc>)
   17a64:	f241 6379 	movw	r3, #5753	; 0x1679
   17a68:	f008 fdea 	bl	20640 <printk>
   17a6c:	4040      	eors	r0, r0
   17a6e:	f380 8811 	msr	BASEPRI, r0
   17a72:	f04f 0003 	mov.w	r0, #3
   17a76:	df02      	svc	2
	int nack = 0;
   17a78:	2000      	movs	r0, #0
   17a7a:	f7ff b90e 	b.w	16c9a <ull_conn_rx+0xd6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17a7e:	4841      	ldr	r0, [pc, #260]	; (17b84 <ull_conn_rx+0xfc0>)
   17a80:	f7f8 fef2 	bl	10868 <mem_acquire>
	if (!tx) {
   17a84:	4602      	mov	r2, r0
   17a86:	2800      	cmp	r0, #0
   17a88:	f43f af21 	beq.w	178ce <ull_conn_rx+0xd0a>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   17a8c:	f895 11aa 	ldrb.w	r1, [r5, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   17a90:	f895 e1a9 	ldrb.w	lr, [r5, #425]	; 0x1a9
   17a94:	f895 71a8 	ldrb.w	r7, [r5, #424]	; 0x1a8
   17a98:	f895 31ac 	ldrb.w	r3, [r5, #428]	; 0x1ac
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   17a9c:	2002      	movs	r0, #2
   17a9e:	f360 0101 	bfi	r1, r0, #0, #2
	if (conn->llcp_phy.ack ==
   17aa2:	4577      	cmp	r7, lr
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   17aa4:	f885 11aa 	strb.w	r1, [r5, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   17aa8:	f3c3 0402 	ubfx	r4, r3, #0, #3
   17aac:	f003 0c07 	and.w	ip, r3, #7
   17ab0:	f3c3 1002 	ubfx	r0, r3, #4, #3
   17ab4:	d113      	bne.n	17ade <ull_conn_rx+0xf1a>
		conn->llcp_phy.tx =
   17ab6:	b2c9      	uxtb	r1, r1
   17ab8:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.cmd = 0U;
   17abc:	f895 c1ab 	ldrb.w	ip, [r5, #427]	; 0x1ab
		conn->procedure_expire =
   17ac0:	f8b5 30ca 	ldrh.w	r3, [r5, #202]	; 0xca
   17ac4:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
		conn->llcp_phy.ack--;
   17ac8:	3f01      	subs	r7, #1
		conn->llcp_phy.rx =
   17aca:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   17ace:	f36f 0c82 	bfc	ip, #2, #1
		conn->llcp_phy.ack--;
   17ad2:	f885 71a9 	strb.w	r7, [r5, #425]	; 0x1a9
		conn->llcp_phy.rx =
   17ad6:	f885 11aa 	strb.w	r1, [r5, #426]	; 0x1aa
		conn->llcp_phy.cmd = 0U;
   17ada:	f885 c1ab 	strb.w	ip, [r5, #427]	; 0x1ab
	conn->llcp_phy.rx &= p->tx_phys;
   17ade:	f895 11aa 	ldrb.w	r1, [r5, #426]	; 0x1aa
	conn->llcp_phy.tx &= p->rx_phys;
   17ae2:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   17ae6:	f896 7020 	ldrb.w	r7, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   17aea:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   17aee:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   17af2:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   17af6:	009b      	lsls	r3, r3, #2
   17af8:	f001 0103 	and.w	r1, r1, #3
   17afc:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   17b00:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   17b02:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   17b04:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17b08:	7913      	ldrb	r3, [r2, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   17b0a:	7151      	strb	r1, [r2, #5]
	    conn->tx_head &&
   17b0c:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   17b10:	7214      	strb	r4, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17b12:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   17b16:	2417      	movs	r4, #23
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   17b18:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17b1a:	7113      	strb	r3, [r2, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   17b1c:	71d4      	strb	r4, [r2, #7]
	if (
   17b1e:	2900      	cmp	r1, #0
   17b20:	f000 813f 	beq.w	17da2 <ull_conn_rx+0x11de>
	    !conn->llcp_enc.pause_tx &&
   17b24:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	    conn->tx_head &&
   17b28:	079c      	lsls	r4, r3, #30
   17b2a:	f100 813a 	bmi.w	17da2 <ull_conn_rx+0x11de>
	    !conn->llcp_phy.pause_tx &&
   17b2e:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   17b32:	07d8      	lsls	r0, r3, #31
   17b34:	f100 8135 	bmi.w	17da2 <ull_conn_rx+0x11de>
		if (conn->tx_head == conn->tx_data) {
   17b38:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   17b3c:	4299      	cmp	r1, r3
			conn->tx_data = conn->tx_data->next;
   17b3e:	bf04      	itt	eq
   17b40:	680b      	ldreq	r3, [r1, #0]
   17b42:	f8c5 31bc 	streq.w	r3, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   17b46:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   17b4a:	2b00      	cmp	r3, #0
   17b4c:	f000 8450 	beq.w	183f0 <ull_conn_rx+0x182c>
	tx->next = conn->tx_ctrl_last->next;
   17b50:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
   17b54:	6819      	ldr	r1, [r3, #0]
   17b56:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   17b58:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   17b5a:	f8c5 21b8 	str.w	r2, [r5, #440]	; 0x1b8
	if (!tx->next) {
   17b5e:	6813      	ldr	r3, [r2, #0]
   17b60:	2b00      	cmp	r3, #0
   17b62:	f47f a91b 	bne.w	16d9c <ull_conn_rx+0x1d8>
		conn->tx_data_last = tx;
   17b66:	f8c5 21c0 	str.w	r2, [r5, #448]	; 0x1c0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17b6a:	f7ff b917 	b.w	16d9c <ull_conn_rx+0x1d8>
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
   17b6e:	f640 0e48 	movw	lr, #2120	; 0x848
   17b72:	4573      	cmp	r3, lr
   17b74:	bf28      	it	cs
   17b76:	4673      	movcs	r3, lr
   17b78:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   17b7c:	bf38      	it	cc
   17b7e:	f44f 73a4 	movcc.w	r3, #328	; 0x148
   17b82:	e6ec      	b.n	1795e <ull_conn_rx+0xd9a>
   17b84:	20003c54 	.word	0x20003c54
   17b88:	000273f4 	.word	0x000273f4
   17b8c:	00026f3c 	.word	0x00026f3c
   17b90:	00026ecc 	.word	0x00026ecc
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17b94:	48e6      	ldr	r0, [pc, #920]	; (17f30 <ull_conn_rx+0x136c>)
   17b96:	f7f8 fe67 	bl	10868 <mem_acquire>
		if (!tx) {
   17b9a:	4601      	mov	r1, r0
   17b9c:	2800      	cmp	r0, #0
   17b9e:	f43f ae96 	beq.w	178ce <ull_conn_rx+0xd0a>
		conn->llcp_version.tx = 1U;
   17ba2:	f895 2126 	ldrb.w	r2, [r5, #294]	; 0x126
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17ba6:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
   17ba8:	f042 0201 	orr.w	r2, r2, #1
   17bac:	f885 2126 	strb.w	r2, [r5, #294]	; 0x126
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17bb0:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   17bb4:	220c      	movs	r2, #12
		pdu_tx->len =
   17bb6:	7144      	strb	r4, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17bb8:	7103      	strb	r3, [r0, #4]
		v->version_number = LL_VERSION_NUMBER;
   17bba:	240b      	movs	r4, #11
		v->sub_version_number =
   17bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17bc0:	f06f 000e 	mvn.w	r0, #14
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   17bc4:	71ca      	strb	r2, [r1, #7]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17bc6:	2205      	movs	r2, #5
   17bc8:	7248      	strb	r0, [r1, #9]
		v->sub_version_number =
   17bca:	72cb      	strb	r3, [r1, #11]
   17bcc:	730b      	strb	r3, [r1, #12]
		v->version_number = LL_VERSION_NUMBER;
   17bce:	720c      	strb	r4, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17bd0:	728a      	strb	r2, [r1, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   17bd2:	4628      	mov	r0, r5
   17bd4:	f7fe fbfe 	bl	163d4 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17bd8:	2303      	movs	r3, #3
   17bda:	7133      	strb	r3, [r6, #4]
   17bdc:	f7ff bb23 	b.w	17226 <ull_conn_rx+0x662>
				uint16_t offset = cpr->offset0;
   17be0:	f8b6 302b 	ldrh.w	r3, [r6, #43]	; 0x2b
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   17be4:	f8b6 8020 	ldrh.w	r8, [r6, #32]
				uint16_t offset = cpr->offset0;
   17be8:	f8ad 3016 	strh.w	r3, [sp, #22]
			if ((interval_min < 6) ||
   17bec:	f1b8 0f05 	cmp.w	r8, #5
				uint16_t offset = cpr->offset0;
   17bf0:	b29b      	uxth	r3, r3
   17bf2:	f8b5 b180 	ldrh.w	fp, [r5, #384]	; 0x180
   17bf6:	9301      	str	r3, [sp, #4]
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   17bf8:	fa1f f088 	uxth.w	r0, r8
			if ((interval_min < 6) ||
   17bfc:	f240 80dc 	bls.w	17db8 <ull_conn_rx+0x11f4>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   17c00:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
			if ((interval_min < 6) ||
   17c04:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   17c08:	fa1f f18e 	uxth.w	r1, lr
			if ((interval_min < 6) ||
   17c0c:	f200 80d4 	bhi.w	17db8 <ull_conn_rx+0x11f4>
			    (interval_max > 3200) ||
   17c10:	4288      	cmp	r0, r1
   17c12:	f200 80d1 	bhi.w	17db8 <ull_conn_rx+0x11f4>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   17c16:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
   17c1a:	fa1f f38c 	uxth.w	r3, ip
			    (interval_min > interval_max) ||
   17c1e:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   17c22:	9303      	str	r3, [sp, #12]
			    (interval_min > interval_max) ||
   17c24:	f080 80c8 	bcs.w	17db8 <ull_conn_rx+0x11f4>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   17c28:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
			    (latency > 499) ||
   17c2a:	f1a0 090a 	sub.w	r9, r0, #10
   17c2e:	fa1f f989 	uxth.w	r9, r9
   17c32:	f640 4a76 	movw	sl, #3190	; 0xc76
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   17c36:	b282      	uxth	r2, r0
			    (latency > 499) ||
   17c38:	45d1      	cmp	r9, sl
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   17c3a:	9204      	str	r2, [sp, #16]
			    (latency > 499) ||
   17c3c:	f200 80bc 	bhi.w	17db8 <ull_conn_rx+0x11f4>
			     ((latency + 1) * interval_max)) ||
   17c40:	fb03 1901 	mla	r9, r3, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   17c44:	ebb9 0f82 	cmp.w	r9, r2, lsl #2
   17c48:	f080 80b6 	bcs.w	17db8 <ull_conn_rx+0x11f4>
			     ((latency + 1) * interval_max)) ||
   17c4c:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
   17c50:	4551      	cmp	r1, sl
   17c52:	f0c0 80b1 	bcc.w	17db8 <ull_conn_rx+0x11f4>
			    (preferred_periodicity > interval_max) ||
   17c56:	9b01      	ldr	r3, [sp, #4]
   17c58:	455b      	cmp	r3, fp
   17c5a:	f000 8269 	beq.w	18130 <ull_conn_rx+0x156c>
			conn->llcp_conn_param.interval_min = interval_min;
   17c5e:	f8a5 8174 	strh.w	r8, [r5, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   17c62:	f8a5 e176 	strh.w	lr, [r5, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
   17c66:	f8a5 c178 	strh.w	ip, [r5, #376]	; 0x178
			conn->llcp_conn_param.timeout =	timeout;
   17c6a:	f8a5 017a 	strh.w	r0, [r5, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
   17c6e:	f885 a17c 	strb.w	sl, [r5, #380]	; 0x17c
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   17c72:	f896 c02a 	ldrb.w	ip, [r6, #42]	; 0x2a
   17c76:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
			conn->llcp_conn_param.offset0 =
   17c7a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   17c7e:	f8a5 3180 	strh.w	r3, [r5, #384]	; 0x180
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   17c82:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   17c86:	f8a5 017e 	strh.w	r0, [r5, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset1);
   17c8a:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   17c8e:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
			     lll->interval) ||
   17c92:	f8b5 c02e 	ldrh.w	ip, [r5, #46]	; 0x2e
				sys_le16_to_cpu(cpr->offset1);
   17c96:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   17c9a:	f8a5 0182 	strh.w	r0, [r5, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   17c9e:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   17ca2:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   17ca6:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   17caa:	f8a5 0184 	strh.w	r0, [r5, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   17cae:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   17cb2:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   17cb6:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   17cba:	f8a5 0186 	strh.w	r0, [r5, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   17cbe:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   17cc2:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   17cc6:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   17cca:	f8a5 0188 	strh.w	r0, [r5, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   17cce:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   17cd2:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
			if ((conn->llcp_conn_param.interval_max !=
   17cd6:	4561      	cmp	r1, ip
				sys_le16_to_cpu(cpr->offset5);
   17cd8:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
			conn->llcp_conn_param.offset5 =
   17cdc:	f8a5 018a 	strh.w	r0, [r5, #394]	; 0x18a
			if ((conn->llcp_conn_param.interval_max !=
   17ce0:	f000 8395 	beq.w	1840e <ull_conn_rx+0x184a>
conn->llcp_conn_param.state =
   17ce4:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
   17ce8:	2103      	movs	r1, #3
   17cea:	f361 0202 	bfi	r2, r1, #0, #3
   17cee:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
			conn->llcp_conn_param.ack--;
   17cf2:	9b02      	ldr	r3, [sp, #8]
   17cf4:	1e5a      	subs	r2, r3, #1
			if (!conn_upd_curr) {
   17cf6:	9b00      	ldr	r3, [sp, #0]
			conn->llcp_conn_param.ack--;
   17cf8:	f885 2171 	strb.w	r2, [r5, #369]	; 0x171
			if (!conn_upd_curr) {
   17cfc:	2b00      	cmp	r3, #0
   17cfe:	f47e afcb 	bne.w	16c98 <ull_conn_rx+0xd4>
				conn_upd_curr = conn;
   17d02:	603d      	str	r5, [r7, #0]
	int nack = 0;
   17d04:	4618      	mov	r0, r3
   17d06:	f7fe bfc8 	b.w	16c9a <ull_conn_rx+0xd6>
			conn->llcp_conn_param.disabled = 1U;
   17d0a:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
			if (!conn->lll.role) {
   17d0e:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
			conn->llcp_conn_param.disabled = 1U;
   17d12:	f042 0210 	orr.w	r2, r2, #16
			if (!conn->lll.role) {
   17d16:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
   17d18:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
			if (!conn->lll.role) {
   17d1c:	f2c0 81ac 	blt.w	18078 <ull_conn_rx+0x14b4>
				LL_ASSERT(conn->llcp_cu.req ==
   17d20:	f895 2104 	ldrb.w	r2, [r5, #260]	; 0x104
   17d24:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
   17d28:	429a      	cmp	r2, r3
   17d2a:	d00e      	beq.n	17d4a <ull_conn_rx+0x1186>
   17d2c:	4a81      	ldr	r2, [pc, #516]	; (17f34 <ull_conn_rx+0x1370>)
   17d2e:	4982      	ldr	r1, [pc, #520]	; (17f38 <ull_conn_rx+0x1374>)
   17d30:	4882      	ldr	r0, [pc, #520]	; (17f3c <ull_conn_rx+0x1378>)
   17d32:	f241 63fd 	movw	r3, #5885	; 0x16fd
   17d36:	f008 fc83 	bl	20640 <printk>
   17d3a:	4040      	eors	r0, r0
   17d3c:	f380 8811 	msr	BASEPRI, r0
   17d40:	f04f 0003 	mov.w	r0, #3
   17d44:	df02      	svc	2
   17d46:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
				conn->llcp_conn_param.state =
   17d4a:	f895 0172 	ldrb.w	r0, [r5, #370]	; 0x172
				conn->llcp_cu.interval =
   17d4e:	f8b5 2176 	ldrh.w	r2, [r5, #374]	; 0x176
   17d52:	f8a5 2108 	strh.w	r2, [r5, #264]	; 0x108
				conn->llcp_conn_param.state =
   17d56:	2205      	movs	r2, #5
   17d58:	f362 0002 	bfi	r0, r2, #0, #3
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17d5c:	f895 1106 	ldrb.w	r1, [r5, #262]	; 0x106
				conn->llcp_cu.latency =
   17d60:	f8b5 6178 	ldrh.w	r6, [r5, #376]	; 0x178
				conn->llcp_cu.ack--;
   17d64:	3b01      	subs	r3, #1
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   17d66:	f3c0 02c0 	ubfx	r2, r0, #3, #1
				conn->llcp_cu.ack--;
   17d6a:	f885 3105 	strb.w	r3, [r5, #261]	; 0x105
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17d6e:	0092      	lsls	r2, r2, #2
				conn->llcp_cu.win_size = 1U;
   17d70:	2301      	movs	r3, #1
   17d72:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17d76:	431a      	orrs	r2, r3
   17d78:	f021 0307 	bic.w	r3, r1, #7
   17d7c:	431a      	orrs	r2, r3
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17d7e:	6821      	ldr	r1, [r4, #0]
				conn->llcp_cu.timeout =
   17d80:	f8b5 417a 	ldrh.w	r4, [r5, #378]	; 0x17a
				conn->llcp_conn_param.state =
   17d84:	f885 0172 	strb.w	r0, [r5, #370]	; 0x172
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17d88:	f885 2106 	strb.w	r2, [r5, #262]	; 0x106
				conn->llcp_cu.win_offset_us = 0U;
   17d8c:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17d8e:	2203      	movs	r2, #3
				conn->llcp_cu.win_offset_us = 0U;
   17d90:	f8c5 0110 	str.w	r0, [r5, #272]	; 0x110
				conn->llcp_cu.latency =
   17d94:	f8a5 610a 	strh.w	r6, [r5, #266]	; 0x10a
				conn->llcp_cu.timeout =
   17d98:	f8a5 410c 	strh.w	r4, [r5, #268]	; 0x10c
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17d9c:	710a      	strb	r2, [r1, #4]
				break;
   17d9e:	f7fe bf7c 	b.w	16c9a <ull_conn_rx+0xd6>
		if (!conn->tx_ctrl) {
   17da2:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   17da6:	2b00      	cmp	r3, #0
   17da8:	f47f aed2 	bne.w	17b50 <ull_conn_rx+0xf8c>
			tx->next = conn->tx_head;
   17dac:	6011      	str	r1, [r2, #0]
				conn->tx_ctrl = tx;
   17dae:	e9c5 226c 	strd	r2, r2, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   17db2:	f8c5 21b8 	str.w	r2, [r5, #440]	; 0x1b8
   17db6:	e6d2      	b.n	17b5e <ull_conn_rx+0xf9a>
				if(cpr->offset0 == conn->llcp_conn_param.offset0)
   17db8:	9b01      	ldr	r3, [sp, #4]
   17dba:	455b      	cmp	r3, fp
   17dbc:	f000 81b8 	beq.w	18130 <ull_conn_rx+0x156c>
				nack = reject_ext_ind_send(conn, *rx,
   17dc0:	1d31      	adds	r1, r6, #4
   17dc2:	4628      	mov	r0, r5
   17dc4:	231e      	movs	r3, #30
   17dc6:	220f      	movs	r2, #15
   17dc8:	f7ff b986 	b.w	170d8 <ull_conn_rx+0x514>
   17dcc:	9802      	ldr	r0, [sp, #8]
   17dce:	e5a3      	b.n	17918 <ull_conn_rx+0xd54>
			conn->llcp_length.disabled = 1U;
   17dd0:	f895 219a 	ldrb.w	r2, [r5, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
   17dd4:	f885 3199 	strb.w	r3, [r5, #409]	; 0x199
			conn->llcp_length.disabled = 1U;
   17dd8:	f042 0308 	orr.w	r3, r2, #8
   17ddc:	f885 319a 	strb.w	r3, [r5, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
   17de0:	f7ff b81f 	b.w	16e22 <ull_conn_rx+0x25e>
				nack = reject_ext_ind_send(conn, *rx,
   17de4:	1d31      	adds	r1, r6, #4
   17de6:	4628      	mov	r0, r5
   17de8:	2323      	movs	r3, #35	; 0x23
   17dea:	220f      	movs	r2, #15
   17dec:	f7ff b974 	b.w	170d8 <ull_conn_rx+0x514>
   17df0:	46c6      	mov	lr, r8
   17df2:	e5f0      	b.n	179d6 <ull_conn_rx+0xe12>
   17df4:	464b      	mov	r3, r9
   17df6:	e5d0      	b.n	1799a <ull_conn_rx+0xdd6>
				      0x03) == 0x02) &&
   17df8:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   17dfc:	2b03      	cmp	r3, #3
   17dfe:	f47f a967 	bne.w	170d0 <ull_conn_rx+0x50c>
   17e02:	f7ff b95e 	b.w	170c2 <ull_conn_rx+0x4fe>
   17e06:	f8dd c004 	ldr.w	ip, [sp, #4]
   17e0a:	e590      	b.n	1792e <ull_conn_rx+0xd6a>
	instant = sys_le16_to_cpu(ind->instant);
   17e0c:	8c70      	ldrh	r0, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   17e0e:	8eea      	ldrh	r2, [r5, #54]	; 0x36
   17e10:	1a82      	subs	r2, r0, r2
   17e12:	0412      	lsls	r2, r2, #16
   17e14:	f100 809c 	bmi.w	17f50 <ull_conn_rx+0x138c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   17e18:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   17e1c:	f895 c0e9 	ldrb.w	ip, [r5, #233]	; 0xe9
   17e20:	eba2 020c 	sub.w	r2, r2, ip
   17e24:	f002 0203 	and.w	r2, r2, #3
   17e28:	2a02      	cmp	r2, #2
   17e2a:	f000 8089 	beq.w	17f40 <ull_conn_rx+0x137c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   17e2e:	f895 c1a8 	ldrb.w	ip, [r5, #424]	; 0x1a8
   17e32:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
   17e36:	4562      	cmp	r2, ip
   17e38:	d019      	beq.n	17e6e <ull_conn_rx+0x12aa>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   17e3a:	f895 21aa 	ldrb.w	r2, [r5, #426]	; 0x1aa
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   17e3e:	f002 0203 	and.w	r2, r2, #3
   17e42:	2a02      	cmp	r2, #2
   17e44:	d113      	bne.n	17e6e <ull_conn_rx+0x12aa>
		conn->llcp_phy.pause_tx = 0U;
   17e46:	f895 21ab 	ldrb.w	r2, [r5, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   17e4a:	f895 60ec 	ldrb.w	r6, [r5, #236]	; 0xec
		conn->llcp_phy.ack = conn->llcp_phy.req;
   17e4e:	f885 c1a9 	strb.w	ip, [r5, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
   17e52:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   17e56:	f3c2 0c80 	ubfx	ip, r2, #2, #1
   17e5a:	f36c 0641 	bfi	r6, ip, #1, #1
		conn->procedure_expire = 0U;
   17e5e:	f04f 0c00 	mov.w	ip, #0
		conn->llcp_phy.pause_tx = 0U;
   17e62:	f885 21ab 	strb.w	r2, [r5, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   17e66:	f885 60ec 	strb.w	r6, [r5, #236]	; 0xec
		conn->procedure_expire = 0U;
   17e6a:	f8a5 c0cc 	strh.w	ip, [r5, #204]	; 0xcc
	conn->llcp.phy_upd_ind.initiate = 0U;
   17e6e:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
   17e72:	f8a5 00ee 	strh.w	r0, [r5, #238]	; 0xee
	conn->llcp.phy_upd_ind.initiate = 0U;
   17e76:	009b      	lsls	r3, r3, #2
   17e78:	f003 031c 	and.w	r3, r3, #28
   17e7c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   17e80:	f002 0202 	and.w	r2, r2, #2
   17e84:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   17e86:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
	conn->llcp.phy_upd_ind.initiate = 0U;
   17e8a:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
	link->mem = conn->llcp_rx;
   17e8e:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   17e90:	6823      	ldr	r3, [r4, #0]
   17e92:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   17e94:	6823      	ldr	r3, [r4, #0]
   17e96:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	*rx = NULL;
   17e9a:	2300      	movs	r3, #0
   17e9c:	6023      	str	r3, [r4, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   17e9e:	f7fd f82d 	bl	14efc <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   17ea2:	4604      	mov	r4, r0
   17ea4:	2800      	cmp	r0, #0
   17ea6:	f000 8166 	beq.w	18176 <ull_conn_rx+0x15b2>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   17eaa:	6823      	ldr	r3, [r4, #0]
   17eac:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
   17eb0:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   17eb2:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   17eb6:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
	conn->llcp_rx = rx_dle;
   17eba:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
	conn->llcp_ack -= 2U;
   17ebe:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
   17ec0:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
   17ec2:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_ack -= 2U;
   17ec6:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	conn->llcp_type = LLCP_PHY_UPD;
   17eca:	f885 10ea 	strb.w	r1, [r5, #234]	; 0xea
	if (conn->llcp.phy_upd_ind.tx) {
   17ece:	f43e aee3 	beq.w	16c98 <ull_conn_rx+0xd4>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   17ed2:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
   17ed6:	f3c3 0382 	ubfx	r3, r3, #2, #3
   17eda:	f363 1206 	bfi	r2, r3, #4, #3
   17ede:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
	int nack = 0;
   17ee2:	2000      	movs	r0, #0
   17ee4:	f7fe bed9 	b.w	16c9a <ull_conn_rx+0xd6>
			conn->llcp_phy.pause_tx = 0U;
   17ee8:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
   17eec:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
			conn->llcp_phy.ack = conn->llcp_phy.req;
   17ef0:	f885 11a9 	strb.w	r1, [r5, #425]	; 0x1a9
			conn->llcp_phy.pause_tx = 0U;
   17ef4:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   17ef8:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   17efa:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   17efe:	f362 1106 	bfi	r1, r2, #4, #3
			if (conn->llcp_phy.cmd) {
   17f02:	075f      	lsls	r7, r3, #29
			conn->llcp_phy.pause_tx = 0U;
   17f04:	f885 31ab 	strb.w	r3, [r5, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
   17f08:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
   17f0c:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (conn->llcp_phy.cmd) {
   17f10:	f140 80ad 	bpl.w	1806e <ull_conn_rx+0x14aa>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   17f14:	6821      	ldr	r1, [r4, #0]
				p->status = 0U;
   17f16:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   17f18:	200f      	movs	r0, #15
   17f1a:	7108      	strb	r0, [r1, #4]
				p->tx = lll->phy_tx;
   17f1c:	7772      	strb	r2, [r6, #29]
				p->status = 0U;
   17f1e:	7733      	strb	r3, [r6, #28]
				p->rx = lll->phy_rx;
   17f20:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   17f24:	f3c3 0302 	ubfx	r3, r3, #0, #3
   17f28:	77b3      	strb	r3, [r6, #30]
   17f2a:	f7fe bf7a 	b.w	16e22 <ull_conn_rx+0x25e>
   17f2e:	bf00      	nop
   17f30:	20003c54 	.word	0x20003c54
   17f34:	000273f4 	.word	0x000273f4
   17f38:	00027514 	.word	0x00027514
   17f3c:	00026ecc 	.word	0x00026ecc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17f40:	2303      	movs	r3, #3
   17f42:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   17f44:	232a      	movs	r3, #42	; 0x2a
			conn->llcp_terminate.reason_peer = err;
   17f46:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
	int nack = 0;
   17f4a:	2000      	movs	r0, #0
   17f4c:	f7fe bea5 	b.w	16c9a <ull_conn_rx+0xd6>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17f50:	2303      	movs	r3, #3
   17f52:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   17f54:	2328      	movs	r3, #40	; 0x28
   17f56:	e7f6      	b.n	17f46 <ull_conn_rx+0x1382>
				nack = reject_ext_ind_send(conn, *rx,
   17f58:	1d31      	adds	r1, r6, #4
   17f5a:	4628      	mov	r0, r5
   17f5c:	2323      	movs	r3, #35	; 0x23
   17f5e:	f7ff b8ba 	b.w	170d6 <ull_conn_rx+0x512>
				nack = reject_ext_ind_send(conn, *rx,
   17f62:	1d31      	adds	r1, r6, #4
   17f64:	4628      	mov	r0, r5
   17f66:	231e      	movs	r3, #30
   17f68:	2210      	movs	r2, #16
   17f6a:	f7ff b8b5 	b.w	170d8 <ull_conn_rx+0x514>
				conn->llcp_phy.state =
   17f6e:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
				if (conn->llcp_phy.ack ==
   17f72:	428a      	cmp	r2, r1
				conn->llcp_phy.state =
   17f74:	f043 0303 	orr.w	r3, r3, #3
   17f78:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
				if (conn->llcp_phy.ack ==
   17f7c:	d112      	bne.n	17fa4 <ull_conn_rx+0x13e0>
					conn->llcp_phy.tx =
   17f7e:	f8b5 31aa 	ldrh.w	r3, [r5, #426]	; 0x1aa
						conn->phy_pref_rx;
   17f82:	f895 11ac 	ldrb.w	r1, [r5, #428]	; 0x1ac
					conn->llcp_phy.tx =
   17f86:	48d2      	ldr	r0, [pc, #840]	; (182d0 <ull_conn_rx+0x170c>)
   17f88:	4018      	ands	r0, r3
   17f8a:	f001 0307 	and.w	r3, r1, #7
   17f8e:	009b      	lsls	r3, r3, #2
   17f90:	f3c1 1102 	ubfx	r1, r1, #4, #3
   17f94:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
					conn->llcp_phy.ack--;
   17f98:	3a01      	subs	r2, #1
					conn->llcp_phy.tx =
   17f9a:	4303      	orrs	r3, r0
					conn->llcp_phy.ack--;
   17f9c:	f885 21a9 	strb.w	r2, [r5, #425]	; 0x1a9
					conn->llcp_phy.tx =
   17fa0:	f8a5 31aa 	strh.w	r3, [r5, #426]	; 0x1aa
				conn->llcp_phy.rx &= p->tx_phys;
   17fa4:	f895 21aa 	ldrb.w	r2, [r5, #426]	; 0x1aa
				conn->llcp_phy.tx &= p->rx_phys;
   17fa8:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
				conn->llcp_phy.rx &= p->tx_phys;
   17fac:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   17fb0:	f3c2 0082 	ubfx	r0, r2, #2, #3
   17fb4:	4003      	ands	r3, r0
				conn->llcp_phy.rx &= p->tx_phys;
   17fb6:	ea01 1152 	and.w	r1, r1, r2, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   17fba:	009b      	lsls	r3, r3, #2
   17fbc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   17fc0:	f002 0203 	and.w	r2, r2, #3
   17fc4:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   17fc6:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   17fca:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   17fce:	d002      	beq.n	17fd6 <ull_conn_rx+0x1412>
   17fd0:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   17fd4:	d105      	bne.n	17fe2 <ull_conn_rx+0x141e>
					conn->llcp_phy.tx = 0;
   17fd6:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
   17fda:	f003 0303 	and.w	r3, r3, #3
   17fde:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
				conn->llcp_phy.pause_tx = 1U;
   17fe2:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   17fe6:	f043 0301 	orr.w	r3, r3, #1
   17fea:	f885 31ab 	strb.w	r3, [r5, #427]	; 0x1ab
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17fee:	6823      	ldr	r3, [r4, #0]
   17ff0:	2203      	movs	r2, #3
   17ff2:	711a      	strb	r2, [r3, #4]
	int nack = 0;
   17ff4:	2000      	movs	r0, #0
   17ff6:	f7fe be50 	b.w	16c9a <ull_conn_rx+0xd6>
			conn->llcp_length.ack = conn->llcp_length.req;
   17ffa:	9a00      	ldr	r2, [sp, #0]
   17ffc:	f885 2199 	strb.w	r2, [r5, #409]	; 0x199
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   18000:	9a02      	ldr	r2, [sp, #8]
			conn->procedure_expire = 0U;
   18002:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   18004:	4290      	cmp	r0, r2
			conn->procedure_expire = 0U;
   18006:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1800a:	f000 80c7 	beq.w	1819c <ull_conn_rx+0x15d8>
			conn->lll.max_rx_time = eff_rx_time;
   1800e:	f8a5 e062 	strh.w	lr, [r5, #98]	; 0x62
			if (tx) {
   18012:	2900      	cmp	r1, #0
   18014:	f000 80bd 	beq.w	18192 <ull_conn_rx+0x15ce>
				conn->llcp_length.state =
   18018:	f895 419a 	ldrb.w	r4, [r5, #410]	; 0x19a
					(conn->llcp_length.req - 1);
   1801c:	9a00      	ldr	r2, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
   1801e:	f8a5 c19c 	strh.w	ip, [r5, #412]	; 0x19c
				conn->llcp_length.state =
   18022:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
   18024:	3a01      	subs	r2, #1
				conn->llcp_length.state =
   18026:	f367 0402 	bfi	r4, r7, #0, #3
				conn->llcp_length.ack =
   1802a:	f885 2199 	strb.w	r2, [r5, #409]	; 0x199
				conn->llcp_length.tx_octets = eff_tx_octets;
   1802e:	f8a5 019e 	strh.w	r0, [r5, #414]	; 0x19e
				conn->llcp_length.rx_time = eff_rx_time;
   18032:	f8a5 e1a0 	strh.w	lr, [r5, #416]	; 0x1a0
				conn->llcp_length.tx_time = eff_tx_time;
   18036:	f8a5 31a2 	strh.w	r3, [r5, #418]	; 0x1a2
				conn->llcp_length.state =
   1803a:	f885 419a 	strb.w	r4, [r5, #410]	; 0x19a
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   1803e:	f8a6 c020 	strh.w	ip, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   18042:	84b0      	strh	r0, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   18044:	f8a6 e022 	strh.w	lr, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   18048:	84f3      	strh	r3, [r6, #38]	; 0x26
   1804a:	e4e8      	b.n	17a1e <ull_conn_rx+0xe5a>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1804c:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
				conn->llcp_ack -= 2U;
   18050:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   18052:	f36f 0201 	bfc	r2, #0, #2
				conn->llcp_type = LLCP_ENCRYPTION;
   18056:	2003      	movs	r0, #3
				conn->llcp_ack -= 2U;
   18058:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1805c:	f885 20ec 	strb.w	r2, [r5, #236]	; 0xec
				conn->llcp_type = LLCP_ENCRYPTION;
   18060:	f885 00ea 	strb.w	r0, [r5, #234]	; 0xea
				conn->llcp_ack -= 2U;
   18064:	f7fe bed4 	b.w	16e10 <ull_conn_rx+0x24c>
	struct node_tx *tx = NULL;
   18068:	2100      	movs	r1, #0
   1806a:	f7fe bf02 	b.w	16e72 <ull_conn_rx+0x2ae>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1806e:	6823      	ldr	r3, [r4, #0]
   18070:	2203      	movs	r2, #3
   18072:	711a      	strb	r2, [r3, #4]
   18074:	f7fe bed5 	b.w	16e22 <ull_conn_rx+0x25e>
			LL_ASSERT(conn_upd_curr == conn);
   18078:	4f96      	ldr	r7, [pc, #600]	; (182d4 <ull_conn_rx+0x1710>)
   1807a:	683a      	ldr	r2, [r7, #0]
   1807c:	4295      	cmp	r5, r2
   1807e:	d00e      	beq.n	1809e <ull_conn_rx+0x14da>
   18080:	4a95      	ldr	r2, [pc, #596]	; (182d8 <ull_conn_rx+0x1714>)
   18082:	4996      	ldr	r1, [pc, #600]	; (182dc <ull_conn_rx+0x1718>)
   18084:	4896      	ldr	r0, [pc, #600]	; (182e0 <ull_conn_rx+0x171c>)
   18086:	f241 7315 	movw	r3, #5909	; 0x1715
   1808a:	f008 fad9 	bl	20640 <printk>
   1808e:	4040      	eors	r0, r0
   18090:	f380 8811 	msr	BASEPRI, r0
   18094:	f04f 0003 	mov.w	r0, #3
   18098:	df02      	svc	2
   1809a:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
			if (!conn->llcp_conn_param.cmd) {
   1809e:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   180a2:	f885 3171 	strb.w	r3, [r5, #369]	; 0x171
	conn_upd_curr = NULL;
   180a6:	2300      	movs	r3, #0
   180a8:	603b      	str	r3, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   180aa:	f012 0308 	ands.w	r3, r2, #8
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   180ae:	6822      	ldr	r2, [r4, #0]
			if (!conn->llcp_conn_param.cmd) {
   180b0:	f43f aa54 	beq.w	1755c <ull_conn_rx+0x998>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   180b4:	210b      	movs	r1, #11
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   180b6:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   180b8:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   180ba:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   180bc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
   180be:	f8b5 20c6 	ldrh.w	r2, [r5, #198]	; 0xc6
			cu->latency = lll->latency;
   180c2:	8e29      	ldrh	r1, [r5, #48]	; 0x30
			cu->interval = lll->interval;
   180c4:	83f3      	strh	r3, [r6, #30]
			cu->timeout = conn->supervision_reload *
   180c6:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
   180ca:	237d      	movs	r3, #125	; 0x7d
   180cc:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
   180d0:	8431      	strh	r1, [r6, #32]
				      lll->interval * 125U / 1000;
   180d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   180d6:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   180da:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   180dc:	f7fe bea1 	b.w	16e22 <ull_conn_rx+0x25e>
			eff_tx_time = MAX(eff_tx_time,
   180e0:	f44f 6329 	mov.w	r3, #2704	; 0xa90
   180e4:	e455      	b.n	17992 <ull_conn_rx+0xdce>
				      0x03) == 0x02) &&
   180e6:	f895 20ea 	ldrb.w	r2, [r5, #234]	; 0xea
   180ea:	2a03      	cmp	r2, #3
   180ec:	f47f abea 	bne.w	178c4 <ull_conn_rx+0xd00>
   180f0:	f7ff bbe1 	b.w	178b6 <ull_conn_rx+0xcf2>
	    (!feature_coded_phy && !feature_phy_2m)) {
   180f4:	f41e 7f80 	tst.w	lr, #256	; 0x100
   180f8:	f43f ad39 	beq.w	17b6e <ull_conn_rx+0xfaa>
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M),
   180fc:	f5b3 6f85 	cmp.w	r3, #1064	; 0x428
   18100:	bf28      	it	cs
   18102:	f44f 6385 	movcs.w	r3, #1064	; 0x428
   18106:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1810a:	bf38      	it	cc
   1810c:	f44f 73a4 	movcc.w	r3, #328	; 0x148
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_2M),
   18110:	f44f 6e85 	mov.w	lr, #1064	; 0x428
   18114:	e423      	b.n	1795e <ull_conn_rx+0xd9a>
			eff_rx_time = MAX(eff_rx_time,
   18116:	f44f 6e29 	mov.w	lr, #2704	; 0xa90
   1811a:	e457      	b.n	179cc <ull_conn_rx+0xe08>
				conn->llcp_length.state =
   1811c:	2604      	movs	r6, #4
   1811e:	f366 0202 	bfi	r2, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
   18122:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   18126:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
				conn->llcp_length.state =
   1812a:	f885 219a 	strb.w	r2, [r5, #410]	; 0x19a
   1812e:	e46c      	b.n	17a0a <ull_conn_rx+0xe46>
					conn->llcp_conn_param.offset0 = 0;
   18130:	2300      	movs	r3, #0
   18132:	f8a5 3180 	strh.w	r3, [r5, #384]	; 0x180
   18136:	e643      	b.n	17dc0 <ull_conn_rx+0x11fc>
		conn_upd_curr = conn;
   18138:	601d      	str	r5, [r3, #0]
   1813a:	f7ff b803 	b.w	17144 <ull_conn_rx+0x580>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1813e:	6823      	ldr	r3, [r4, #0]
   18140:	210f      	movs	r1, #15
   18142:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   18144:	7730      	strb	r0, [r6, #28]
		p->tx = conn->lll.phy_tx;
   18146:	7772      	strb	r2, [r6, #29]
		p->rx = conn->lll.phy_rx;
   18148:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   1814c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   18150:	77b3      	strb	r3, [r6, #30]
		if (err) {
   18152:	f7fe bda2 	b.w	16c9a <ull_conn_rx+0xd6>
			tx->next = conn->tx_head->next;
   18156:	6811      	ldr	r1, [r2, #0]
   18158:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   1815a:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
   1815c:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   18160:	f7ff b8f9 	b.w	17356 <ull_conn_rx+0x792>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   18164:	2a23      	cmp	r2, #35	; 0x23
   18166:	f43f aaea 	beq.w	1773e <ull_conn_rx+0xb7a>
			conn->slave.ticks_to_offset =
   1816a:	f8d5 2194 	ldr.w	r2, [r5, #404]	; 0x194
   1816e:	f8c5 20e4 	str.w	r2, [r5, #228]	; 0xe4
   18172:	f7ff bae4 	b.w	1773e <ull_conn_rx+0xb7a>
	LL_ASSERT(rx_dle);
   18176:	4a58      	ldr	r2, [pc, #352]	; (182d8 <ull_conn_rx+0x1714>)
   18178:	495a      	ldr	r1, [pc, #360]	; (182e4 <ull_conn_rx+0x1720>)
   1817a:	4859      	ldr	r0, [pc, #356]	; (182e0 <ull_conn_rx+0x171c>)
   1817c:	f241 332c 	movw	r3, #4908	; 0x132c
   18180:	f008 fa5e 	bl	20640 <printk>
   18184:	4040      	eors	r0, r0
   18186:	f380 8811 	msr	BASEPRI, r0
   1818a:	f04f 0003 	mov.w	r0, #3
   1818e:	df02      	svc	2
   18190:	e68b      	b.n	17eaa <ull_conn_rx+0x12e6>
				conn->lll.max_tx_octets = eff_tx_octets;
   18192:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   18196:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
   1819a:	e750      	b.n	1803e <ull_conn_rx+0x147a>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1819c:	454b      	cmp	r3, r9
   1819e:	f47f af36 	bne.w	1800e <ull_conn_rx+0x144a>
			    eff_rx_time == conn->lll.max_rx_time &&
   181a2:	45c6      	cmp	lr, r8
   181a4:	f47f af33 	bne.w	1800e <ull_conn_rx+0x144a>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   181a8:	6822      	ldr	r2, [r4, #0]
   181aa:	2403      	movs	r4, #3
   181ac:	7114      	strb	r4, [r2, #4]
				goto send_length_resp;
   181ae:	e436      	b.n	17a1e <ull_conn_rx+0xe5a>
				uint16_t interval_min =
   181b0:	f8b6 8020 	ldrh.w	r8, [r6, #32]
				if ((interval_min < 6) ||
   181b4:	f1b8 0f05 	cmp.w	r8, #5
				uint16_t interval_min =
   181b8:	fa1f f088 	uxth.w	r0, r8
				if ((interval_min < 6) ||
   181bc:	f67f ae00 	bls.w	17dc0 <ull_conn_rx+0x11fc>
				uint16_t interval_max =
   181c0:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
				if ((interval_min < 6) ||
   181c4:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
				uint16_t interval_max =
   181c8:	fa1f f28e 	uxth.w	r2, lr
				if ((interval_min < 6) ||
   181cc:	f63f adf8 	bhi.w	17dc0 <ull_conn_rx+0x11fc>
				    (interval_max > 3200) ||
   181d0:	4290      	cmp	r0, r2
   181d2:	f63f adf5 	bhi.w	17dc0 <ull_conn_rx+0x11fc>
				uint16_t latency =
   181d6:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
				    (interval_min > interval_max) ||
   181da:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
				uint16_t latency =
   181de:	fa1f fa8c 	uxth.w	sl, ip
				    (interval_min > interval_max) ||
   181e2:	f4bf aded 	bcs.w	17dc0 <ull_conn_rx+0x11fc>
				uint16_t timeout =
   181e6:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
				    (latency > 499) ||
   181e8:	f1a0 090a 	sub.w	r9, r0, #10
   181ec:	fa1f f989 	uxth.w	r9, r9
   181f0:	f640 4b76 	movw	fp, #3190	; 0xc76
				uint16_t timeout =
   181f4:	b283      	uxth	r3, r0
				    (latency > 499) ||
   181f6:	45d9      	cmp	r9, fp
				uint16_t timeout =
   181f8:	9301      	str	r3, [sp, #4]
				    (latency > 499) ||
   181fa:	f63f ade1 	bhi.w	17dc0 <ull_conn_rx+0x11fc>
				     ((latency + 1) * interval_max)) ||
   181fe:	fb0a 2902 	mla	r9, sl, r2, r2
				    (timeout > 3200) ||
   18202:	ebb9 0f83 	cmp.w	r9, r3, lsl #2
   18206:	f4bf addb 	bcs.w	17dc0 <ull_conn_rx+0x11fc>
				     ((latency + 1) * interval_max)) ||
   1820a:	f896 9028 	ldrb.w	r9, [r6, #40]	; 0x28
   1820e:	454a      	cmp	r2, r9
					cpr->preferred_periodicity;
   18210:	46cb      	mov	fp, r9
				     ((latency + 1) * interval_max)) ||
   18212:	f4ff add5 	bcc.w	17dc0 <ull_conn_rx+0x11fc>
				uint16_t offset = cpr->offset0;
   18216:	f8b6 902b 	ldrh.w	r9, [r6, #43]	; 0x2b
				conn->llcp_conn_param.interval_min =
   1821a:	f8a5 8174 	strh.w	r8, [r5, #372]	; 0x174
				conn->llcp_conn_param.interval_max =
   1821e:	f8a5 e176 	strh.w	lr, [r5, #374]	; 0x176
				conn->llcp_conn_param.latency =	latency;
   18222:	f8a5 c178 	strh.w	ip, [r5, #376]	; 0x178
				conn->llcp_conn_param.timeout =	timeout;
   18226:	f8a5 017a 	strh.w	r0, [r5, #378]	; 0x17a
				conn->llcp_conn_param.preferred_periodicity =
   1822a:	f885 b17c 	strb.w	fp, [r5, #380]	; 0x17c
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1822e:	f896 c02a 	ldrb.w	ip, [r6, #42]	; 0x2a
   18232:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
				conn->llcp_conn_param.offset0 =
   18236:	f8a5 9180 	strh.w	r9, [r5, #384]	; 0x180
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1823a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   1823e:	f8a5 017e 	strh.w	r0, [r5, #382]	; 0x17e
					sys_le16_to_cpu(cpr->offset1);
   18242:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   18246:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
				     lll->interval) ||
   1824a:	f8b5 c02e 	ldrh.w	ip, [r5, #46]	; 0x2e
					sys_le16_to_cpu(cpr->offset1);
   1824e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   18252:	f8a5 0182 	strh.w	r0, [r5, #386]	; 0x182
					sys_le16_to_cpu(cpr->offset2);
   18256:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   1825a:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   1825e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   18262:	f8a5 0184 	strh.w	r0, [r5, #388]	; 0x184
					sys_le16_to_cpu(cpr->offset3);
   18266:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   1826a:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   1826e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   18272:	f8a5 0186 	strh.w	r0, [r5, #390]	; 0x186
					sys_le16_to_cpu(cpr->offset4);
   18276:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   1827a:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   1827e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   18282:	f8a5 0188 	strh.w	r0, [r5, #392]	; 0x188
					sys_le16_to_cpu(cpr->offset5);
   18286:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   1828a:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
				if ((conn->llcp_conn_param.interval_max !=
   1828e:	4562      	cmp	r2, ip
					sys_le16_to_cpu(cpr->offset5);
   18290:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
				conn->llcp_conn_param.offset5 =
   18294:	f8a5 618a 	strh.w	r6, [r5, #394]	; 0x18a
				uint16_t offset = cpr->offset0;
   18298:	fa1f f089 	uxth.w	r0, r9
				if ((conn->llcp_conn_param.interval_max !=
   1829c:	d047      	beq.n	1832e <ull_conn_rx+0x176a>
					if (conn->llcp_enc.pause_tx) {
   1829e:	078e      	lsls	r6, r1, #30
						conn->llcp_conn_param.state =
   182a0:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
					if (conn->llcp_enc.pause_tx) {
   182a4:	d53d      	bpl.n	18322 <ull_conn_rx+0x175e>
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   182a6:	6821      	ldr	r1, [r4, #0]
						conn->llcp_conn_param.state =
   182a8:	2002      	movs	r0, #2
   182aa:	f360 0202 	bfi	r2, r0, #0, #3
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   182ae:	2003      	movs	r0, #3
						conn->llcp_conn_param.state =
   182b0:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   182b4:	7108      	strb	r0, [r1, #4]
				conn->llcp_conn_param.ack--;
   182b6:	9b02      	ldr	r3, [sp, #8]
   182b8:	1e5a      	subs	r2, r3, #1
				if (!conn_upd_curr) {
   182ba:	9b00      	ldr	r3, [sp, #0]
				conn->llcp_conn_param.ack--;
   182bc:	f885 2171 	strb.w	r2, [r5, #369]	; 0x171
				if (!conn_upd_curr) {
   182c0:	2b00      	cmp	r3, #0
   182c2:	f47e ace9 	bne.w	16c98 <ull_conn_rx+0xd4>
	int nack = 0;
   182c6:	9800      	ldr	r0, [sp, #0]
					conn_upd_curr = conn;
   182c8:	603d      	str	r5, [r7, #0]
   182ca:	f7fe bce6 	b.w	16c9a <ull_conn_rx+0xd6>
   182ce:	bf00      	nop
   182d0:	fffffb03 	.word	0xfffffb03
   182d4:	2000321c 	.word	0x2000321c
   182d8:	000273f4 	.word	0x000273f4
   182dc:	0002753c 	.word	0x0002753c
   182e0:	00026ecc 	.word	0x00026ecc
   182e4:	00027554 	.word	0x00027554
		LL_ASSERT(conn_upd_curr == conn);
   182e8:	4f5e      	ldr	r7, [pc, #376]	; (18464 <ull_conn_rx+0x18a0>)
   182ea:	6839      	ldr	r1, [r7, #0]
   182ec:	428d      	cmp	r5, r1
   182ee:	d010      	beq.n	18312 <ull_conn_rx+0x174e>
   182f0:	4a5d      	ldr	r2, [pc, #372]	; (18468 <ull_conn_rx+0x18a4>)
   182f2:	495e      	ldr	r1, [pc, #376]	; (1846c <ull_conn_rx+0x18a8>)
   182f4:	485e      	ldr	r0, [pc, #376]	; (18470 <ull_conn_rx+0x18ac>)
   182f6:	f241 03b4 	movw	r3, #4276	; 0x10b4
   182fa:	f008 f9a1 	bl	20640 <printk>
   182fe:	4040      	eors	r0, r0
   18300:	f380 8811 	msr	BASEPRI, r0
   18304:	f04f 0003 	mov.w	r0, #3
   18308:	df02      	svc	2
   1830a:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
   1830e:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   18312:	f885 3171 	strb.w	r3, [r5, #369]	; 0x171
	conn_upd_curr = NULL;
   18316:	2300      	movs	r3, #0
   18318:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   1831a:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
   1831e:	f7ff ba15 	b.w	1774c <ull_conn_rx+0xb88>
						conn->llcp_conn_param.state =
   18322:	2103      	movs	r1, #3
   18324:	f361 0202 	bfi	r2, r1, #0, #3
   18328:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
   1832c:	e7c3      	b.n	182b6 <ull_conn_rx+0x16f2>
				     lll->interval) ||
   1832e:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   18330:	4552      	cmp	r2, sl
   18332:	d1b4      	bne.n	1829e <ull_conn_rx+0x16da>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   18334:	f240 42e2 	movw	r2, #1250	; 0x4e2
   18338:	9b01      	ldr	r3, [sp, #4]
   1833a:	fb02 f60c 	mul.w	r6, r2, ip
   1833e:	f242 7210 	movw	r2, #10000	; 0x2710
				     lll->latency) ||
   18342:	f8b5 c0c6 	ldrh.w	ip, [r5, #198]	; 0xc6
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   18346:	fb02 6203 	mla	r2, r2, r3, r6
   1834a:	3a01      	subs	r2, #1
   1834c:	fbb2 f2f6 	udiv	r2, r2, r6
				     lll->latency) ||
   18350:	b292      	uxth	r2, r2
   18352:	4594      	cmp	ip, r2
   18354:	d1a3      	bne.n	1829e <ull_conn_rx+0x16da>
				     conn->supervision_reload) ||
   18356:	2800      	cmp	r0, #0
   18358:	d1a1      	bne.n	1829e <ull_conn_rx+0x16da>
					conn->llcp_conn_param.state =
   1835a:	f8b5 2172 	ldrh.w	r2, [r5, #370]	; 0x172
   1835e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   18362:	f042 0201 	orr.w	r2, r2, #1
   18366:	f8a5 2172 	strh.w	r2, [r5, #370]	; 0x172
					(*rx)->hdr.type =
   1836a:	6822      	ldr	r2, [r4, #0]
   1836c:	2103      	movs	r1, #3
   1836e:	7111      	strb	r1, [r2, #4]
   18370:	e7a1      	b.n	182b6 <ull_conn_rx+0x16f2>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   18372:	f895 2104 	ldrb.w	r2, [r5, #260]	; 0x104
   18376:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
   1837a:	429a      	cmp	r2, r3
   1837c:	d00e      	beq.n	1839c <ull_conn_rx+0x17d8>
   1837e:	4a3a      	ldr	r2, [pc, #232]	; (18468 <ull_conn_rx+0x18a4>)
   18380:	493c      	ldr	r1, [pc, #240]	; (18474 <ull_conn_rx+0x18b0>)
   18382:	483b      	ldr	r0, [pc, #236]	; (18470 <ull_conn_rx+0x18ac>)
   18384:	f241 0399 	movw	r3, #4249	; 0x1099
   18388:	f008 f95a 	bl	20640 <printk>
   1838c:	4040      	eors	r0, r0
   1838e:	f380 8811 	msr	BASEPRI, r0
   18392:	f04f 0003 	mov.w	r0, #3
   18396:	df02      	svc	2
   18398:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1839c:	f895 1172 	ldrb.w	r1, [r5, #370]	; 0x172
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   183a0:	f8b5 2176 	ldrh.w	r2, [r5, #374]	; 0x176
   183a4:	f8a5 2108 	strh.w	r2, [r5, #264]	; 0x108
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   183a8:	2205      	movs	r2, #5
   183aa:	f362 0102 	bfi	r1, r2, #0, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   183ae:	f895 0106 	ldrb.w	r0, [r5, #262]	; 0x106
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   183b2:	f885 1172 	strb.w	r1, [r5, #370]	; 0x172
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   183b6:	f3c1 02c0 	ubfx	r2, r1, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   183ba:	0092      	lsls	r2, r2, #2
   183bc:	f020 0007 	bic.w	r0, r0, #7
		conn->llcp_cu.ack--;
   183c0:	3b01      	subs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   183c2:	f042 0201 	orr.w	r2, r2, #1
   183c6:	4302      	orrs	r2, r0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   183c8:	f8b5 1178 	ldrh.w	r1, [r5, #376]	; 0x178
		conn->llcp_cu.ack--;
   183cc:	f885 3105 	strb.w	r3, [r5, #261]	; 0x105
		conn->llcp_cu.win_size = 1U;
   183d0:	2401      	movs	r4, #1
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   183d2:	f8b5 317a 	ldrh.w	r3, [r5, #378]	; 0x17a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   183d6:	f885 2106 	strb.w	r2, [r5, #262]	; 0x106
		conn->llcp_cu.win_offset_us = 0U;
   183da:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   183dc:	f885 4114 	strb.w	r4, [r5, #276]	; 0x114
		conn->llcp_cu.win_offset_us = 0U;
   183e0:	f8c5 0110 	str.w	r0, [r5, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   183e4:	f8a5 110a 	strh.w	r1, [r5, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   183e8:	f8a5 310c 	strh.w	r3, [r5, #268]	; 0x10c
	if (err) {
   183ec:	f7fe bcd6 	b.w	16d9c <ull_conn_rx+0x1d8>
			tx->next = conn->tx_head->next;
   183f0:	680b      	ldr	r3, [r1, #0]
   183f2:	6013      	str	r3, [r2, #0]
			conn->tx_head->next = tx;
   183f4:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl_last = tx;
   183f6:	e9c5 226d 	strd	r2, r2, [r5, #436]	; 0x1b4
   183fa:	f7ff bbb0 	b.w	17b5e <ull_conn_rx+0xf9a>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   183fe:	f895 319a 	ldrb.w	r3, [r5, #410]	; 0x19a
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   18402:	f013 0f06 	tst.w	r3, #6
   18406:	f43f aa7e 	beq.w	17906 <ull_conn_rx+0xd42>
   1840a:	f7fe bd2b 	b.w	16e64 <ull_conn_rx+0x2a0>
			     lll->interval) ||
   1840e:	8e29      	ldrh	r1, [r5, #48]	; 0x30
   18410:	9b03      	ldr	r3, [sp, #12]
   18412:	4299      	cmp	r1, r3
   18414:	f47f ac66 	bne.w	17ce4 <ull_conn_rx+0x1120>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   18418:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1841c:	9b04      	ldr	r3, [sp, #16]
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1841e:	f8b5 60c6 	ldrh.w	r6, [r5, #198]	; 0xc6
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   18422:	fb01 f00c 	mul.w	r0, r1, ip
   18426:	f242 7110 	movw	r1, #10000	; 0x2710
   1842a:	fb01 0103 	mla	r1, r1, r3, r0
   1842e:	3901      	subs	r1, #1
   18430:	fbb1 f1f0 	udiv	r1, r1, r0
			    (conn->llcp_conn_param.latency != lll->latency) ||
   18434:	b289      	uxth	r1, r1
   18436:	428e      	cmp	r6, r1
   18438:	f47f ac54 	bne.w	17ce4 <ull_conn_rx+0x1120>
			     conn->supervision_reload)||
   1843c:	9b01      	ldr	r3, [sp, #4]
   1843e:	1e5a      	subs	r2, r3, #1
   18440:	b292      	uxth	r2, r2
   18442:	f640 719e 	movw	r1, #3998	; 0xf9e
   18446:	428a      	cmp	r2, r1
   18448:	f67f ac4c 	bls.w	17ce4 <ull_conn_rx+0x1120>
				conn->llcp_conn_param.state =
   1844c:	f8b5 2172 	ldrh.w	r2, [r5, #370]	; 0x172
   18450:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   18454:	f042 0201 	orr.w	r2, r2, #1
   18458:	f8a5 2172 	strh.w	r2, [r5, #370]	; 0x172
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1845c:	6822      	ldr	r2, [r4, #0]
   1845e:	2103      	movs	r1, #3
   18460:	7111      	strb	r1, [r2, #4]
   18462:	e446      	b.n	17cf2 <ull_conn_rx+0x112e>
   18464:	2000321c 	.word	0x2000321c
   18468:	000273f4 	.word	0x000273f4
   1846c:	0002753c 	.word	0x0002753c
   18470:	00026ecc 	.word	0x00026ecc
   18474:	00027514 	.word	0x00027514

00018478 <ull_conn_tx_demux>:
{
   18478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1847c:	4f22      	ldr	r7, [pc, #136]	; (18508 <ull_conn_tx_demux+0x90>)
   1847e:	4604      	mov	r4, r0
   18480:	78fa      	ldrb	r2, [r7, #3]
	return (void *)(fifo + first * size);
   18482:	1d3d      	adds	r5, r7, #4
			tx->next = NULL;
   18484:	2600      	movs	r6, #0
   18486:	e01d      	b.n	184c4 <ull_conn_tx_demux+0x4c>
   18488:	f7fd fee0 	bl	1624c <ll_connected_get.part.0>
		if (conn) {
   1848c:	b330      	cbz	r0, 184dc <ull_conn_tx_demux+0x64>
			struct node_tx *tx = lll_tx->node;
   1848e:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   18492:	f8d0 21bc 	ldr.w	r2, [r0, #444]	; 0x1bc
			tx->next = NULL;
   18496:	601e      	str	r6, [r3, #0]
			if (!conn->tx_data) {
   18498:	b36a      	cbz	r2, 184f6 <ull_conn_tx_demux+0x7e>
			if (conn->tx_data_last) {
   1849a:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
   1849e:	b102      	cbz	r2, 184a2 <ull_conn_tx_demux+0x2a>
				conn->tx_data_last->next = tx;
   184a0:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   184a2:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
		MFIFO_DEQUEUE(conn_tx);
   184a6:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   184a8:	78bb      	ldrb	r3, [r7, #2]
   184aa:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   184ac:	429a      	cmp	r2, r3
   184ae:	d005      	beq.n	184bc <ull_conn_tx_demux+0x44>
	_first += 1U;
   184b0:	3301      	adds	r3, #1
   184b2:	b2db      	uxtb	r3, r3
		_first = 0U;
   184b4:	4299      	cmp	r1, r3
   184b6:	bf08      	it	eq
   184b8:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   184ba:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   184bc:	3c01      	subs	r4, #1
   184be:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   184c2:	d016      	beq.n	184f2 <ull_conn_tx_demux+0x7a>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   184c4:	78bb      	ldrb	r3, [r7, #2]
   184c6:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   184c8:	4293      	cmp	r3, r2
   184ca:	d012      	beq.n	184f2 <ull_conn_tx_demux+0x7a>
	return (void *)(fifo + first * size);
   184cc:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   184d0:	eb15 0803 	adds.w	r8, r5, r3
   184d4:	d00d      	beq.n	184f2 <ull_conn_tx_demux+0x7a>
		conn = ll_connected_get(lll_tx->handle);
   184d6:	5ae8      	ldrh	r0, [r5, r3]
	if (handle >= CONFIG_BT_MAX_CONN) {
   184d8:	2801      	cmp	r0, #1
   184da:	d9d5      	bls.n	18488 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   184dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   184e0:	790b      	ldrb	r3, [r1, #4]
   184e2:	f36f 0301 	bfc	r3, #0, #2
   184e6:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   184e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   184ec:	f7fc fd1e 	bl	14f2c <ll_tx_ack_put>
   184f0:	e7d9      	b.n	184a6 <ull_conn_tx_demux+0x2e>
}
   184f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (!conn->tx_head) {
   184f6:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
				conn->tx_data = tx;
   184fa:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
				if (!conn->tx_head) {
   184fe:	2a00      	cmp	r2, #0
   18500:	d1cb      	bne.n	1849a <ull_conn_tx_demux+0x22>
					conn->tx_head = tx;
   18502:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
			if (conn->tx_data_last) {
   18506:	e7cc      	b.n	184a2 <ull_conn_tx_demux+0x2a>
   18508:	2000051c 	.word	0x2000051c

0001850c <conn_cleanup>:
{
   1850c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = conn->llcp_rx;
   18510:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	rx->hdr.handle = conn->lll.handle;
   18514:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	*((uint8_t *)rx->pdu) = reason;
   18516:	f880 114c 	strb.w	r1, [r0, #332]	; 0x14c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1851a:	230a      	movs	r3, #10
{
   1851c:	b083      	sub	sp, #12
   1851e:	4606      	mov	r6, r0
	rx->hdr.handle = conn->lll.handle;
   18520:	f8a0 2136 	strh.w	r2, [r0, #310]	; 0x136
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   18524:	f880 3134 	strb.w	r3, [r0, #308]	; 0x134
	struct lll_conn *lll = &conn->lll;
   18528:	f100 0b1c 	add.w	fp, r0, #28
	while (rx) {
   1852c:	b144      	cbz	r4, 18540 <conn_cleanup+0x34>
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1852e:	2503      	movs	r5, #3
		rx = hdr->link->mem;
   18530:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   18532:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   18534:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   18536:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   18538:	f7fc fcb2 	bl	14ea0 <ll_rx_put>
	while (rx) {
   1853c:	2c00      	cmp	r4, #0
   1853e:	d1f7      	bne.n	18530 <conn_cleanup+0x24>
	while (conn->tx_head) {
   18540:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   18544:	b381      	cbz	r1, 185a8 <conn_cleanup+0x9c>
		link = mem_acquire(&mem_link_tx.free);
   18546:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 18600 <conn_cleanup+0xf4>
		LL_ASSERT(link);
   1854a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 185f8 <conn_cleanup+0xec>
   1854e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 18604 <conn_cleanup+0xf8>
   18552:	f106 076c 	add.w	r7, r6, #108	; 0x6c
   18556:	e007      	b.n	18568 <conn_cleanup+0x5c>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   18558:	4629      	mov	r1, r5
   1855a:	4620      	mov	r0, r4
   1855c:	463a      	mov	r2, r7
   1855e:	f7f8 f9e7 	bl	10930 <memq_enqueue>
	while (conn->tx_head) {
   18562:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   18566:	b1f9      	cbz	r1, 185a8 <conn_cleanup+0x9c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   18568:	4630      	mov	r0, r6
   1856a:	f7fd fc21 	bl	15db0 <tx_ull_dequeue>
   1856e:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   18570:	4640      	mov	r0, r8
   18572:	f7f8 f979 	bl	10868 <mem_acquire>
		LL_ASSERT(link);
   18576:	4604      	mov	r4, r0
   18578:	2800      	cmp	r0, #0
   1857a:	d1ed      	bne.n	18558 <conn_cleanup+0x4c>
   1857c:	481c      	ldr	r0, [pc, #112]	; (185f0 <conn_cleanup+0xe4>)
   1857e:	f240 63d4 	movw	r3, #1748	; 0x6d4
   18582:	4652      	mov	r2, sl
   18584:	4649      	mov	r1, r9
   18586:	f008 f85b 	bl	20640 <printk>
   1858a:	4040      	eors	r0, r0
   1858c:	f380 8811 	msr	BASEPRI, r0
   18590:	f04f 0003 	mov.w	r0, #3
   18594:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   18596:	4629      	mov	r1, r5
   18598:	4620      	mov	r0, r4
   1859a:	463a      	mov	r2, r7
   1859c:	f7f8 f9c8 	bl	10930 <memq_enqueue>
	while (conn->tx_head) {
   185a0:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   185a4:	2900      	cmp	r1, #0
   185a6:	d1df      	bne.n	18568 <conn_cleanup+0x5c>
				    TICKER_ID_CONN_BASE + lll->handle,
   185a8:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   185ac:	4b11      	ldr	r3, [pc, #68]	; (185f4 <conn_cleanup+0xe8>)
   185ae:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   185b2:	3205      	adds	r2, #5
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   185b4:	b2d2      	uxtb	r2, r2
   185b6:	2101      	movs	r1, #1
   185b8:	2000      	movs	r0, #0
   185ba:	f7f9 fe25 	bl	12208 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   185be:	f030 0302 	bics.w	r3, r0, #2
   185c2:	d00c      	beq.n	185de <conn_cleanup+0xd2>
   185c4:	4a0c      	ldr	r2, [pc, #48]	; (185f8 <conn_cleanup+0xec>)
   185c6:	490d      	ldr	r1, [pc, #52]	; (185fc <conn_cleanup+0xf0>)
   185c8:	4809      	ldr	r0, [pc, #36]	; (185f0 <conn_cleanup+0xe4>)
   185ca:	f240 63c1 	movw	r3, #1729	; 0x6c1
   185ce:	f008 f837 	bl	20640 <printk>
   185d2:	4040      	eors	r0, r0
   185d4:	f380 8811 	msr	BASEPRI, r0
   185d8:	f04f 0003 	mov.w	r0, #3
   185dc:	df02      	svc	2
	lll->handle = 0xFFFF;
   185de:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   185e2:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   185e4:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   185e6:	b003      	add	sp, #12
   185e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   185ec:	f7ff bf44 	b.w	18478 <ull_conn_tx_demux>
   185f0:	00026ecc 	.word	0x00026ecc
   185f4:	000160f9 	.word	0x000160f9
   185f8:	000273f4 	.word	0x000273f4
   185fc:	000274d4 	.word	0x000274d4
   18600:	20003cd8 	.word	0x20003cd8
   18604:	00027460 	.word	0x00027460

00018608 <ull_conn_done>:
{
   18608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   1860c:	69c6      	ldr	r6, [r0, #28]
	if (lll->handle == 0xFFFF) {
   1860e:	8bb2      	ldrh	r2, [r6, #28]
   18610:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18614:	429a      	cmp	r2, r3
{
   18616:	b08a      	sub	sp, #40	; 0x28
	if (lll->handle == 0xFFFF) {
   18618:	d052      	beq.n	186c0 <ull_conn_done+0xb8>
	switch (done->extra.mic_state) {
   1861a:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   1861e:	68f4      	ldr	r4, [r6, #12]
	switch (done->extra.mic_state) {
   18620:	2b01      	cmp	r3, #1
   18622:	4605      	mov	r5, r0
   18624:	f000 8128 	beq.w	18878 <ull_conn_done+0x270>
   18628:	2b02      	cmp	r3, #2
   1862a:	d043      	beq.n	186b4 <ull_conn_done+0xac>
   1862c:	2b00      	cmp	r3, #0
   1862e:	f000 8104 	beq.w	1883a <ull_conn_done+0x232>
	reason_peer = conn->llcp_terminate.reason_peer;
   18632:	f894 112f 	ldrb.w	r1, [r4, #303]	; 0x12f
	if (reason_peer && (
   18636:	2900      	cmp	r1, #0
   18638:	f040 80ad 	bne.w	18796 <ull_conn_done+0x18e>
	latency_event = lll->latency_event;
   1863c:	f8b6 8024 	ldrh.w	r8, [r6, #36]	; 0x24
	if (done->extra.trx_cnt) {
   18640:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	ticks_drift_plus = 0U;
   18642:	9109      	str	r1, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   18644:	f108 0701 	add.w	r7, r8, #1
	ticks_drift_minus = 0U;
   18648:	9108      	str	r1, [sp, #32]
	elapsed_event = latency_event + 1;
   1864a:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   1864c:	b3db      	cbz	r3, 186c6 <ull_conn_done+0xbe>
		} else if (lll->role) {
   1864e:	f996 302d 	ldrsb.w	r3, [r6, #45]	; 0x2d
   18652:	2b00      	cmp	r3, #0
   18654:	f2c0 8120 	blt.w	18898 <ull_conn_done+0x290>
	if (done->extra.crc_valid) {
   18658:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   1865c:	2200      	movs	r2, #0
   1865e:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
   18662:	bba3      	cbnz	r3, 186ce <ull_conn_done+0xc6>
		if (!conn->supervision_expire) {
   18664:	f8b4 50c8 	ldrh.w	r5, [r4, #200]	; 0xc8
   18668:	b925      	cbnz	r5, 18674 <ull_conn_done+0x6c>
			conn->supervision_expire = conn->supervision_reload;
   1866a:	f8b4 50c6 	ldrh.w	r5, [r4, #198]	; 0xc6
   1866e:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
	if (conn->supervision_expire) {
   18672:	b37d      	cbz	r5, 186d4 <ull_conn_done+0xcc>
		if (conn->supervision_expire > elapsed_event) {
   18674:	42bd      	cmp	r5, r7
   18676:	f240 811a 	bls.w	188ae <ull_conn_done+0x2a6>
			conn->supervision_expire -= elapsed_event;
   1867a:	1bed      	subs	r5, r5, r7
   1867c:	b2ab      	uxth	r3, r5
			if (conn->supervision_expire <= 6U) {
   1867e:	2b06      	cmp	r3, #6
			lll->latency_event = 0;
   18680:	f04f 0500 	mov.w	r5, #0
			conn->supervision_expire -= elapsed_event;
   18684:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0;
   18688:	84b5      	strh	r5, [r6, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   1868a:	f240 80fb 	bls.w	18884 <ull_conn_done+0x27c>
			else if (lll->role) {
   1868e:	f996 302d 	ldrsb.w	r3, [r6, #45]	; 0x2d
   18692:	42ab      	cmp	r3, r5
   18694:	da1e      	bge.n	186d4 <ull_conn_done+0xcc>
				if (latency_event) {
   18696:	f1b8 0f00 	cmp.w	r8, #0
   1869a:	f040 80f3 	bne.w	18884 <ull_conn_done+0x27c>
					force = conn->slave.force & 0x01;
   1869e:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
					conn->slave.force >>= 1;
   186a2:	086b      	lsrs	r3, r5, #1
					if (force) {
   186a4:	f015 0501 	ands.w	r5, r5, #1
						conn->slave.force |= BIT(31);
   186a8:	bf18      	it	ne
   186aa:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
   186ae:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   186b2:	e00f      	b.n	186d4 <ull_conn_done+0xcc>
		conn->llcp_terminate.reason_peer =
   186b4:	213d      	movs	r1, #61	; 0x3d
   186b6:	f884 112f 	strb.w	r1, [r4, #303]	; 0x12f
		conn_cleanup(conn, reason_peer);
   186ba:	4620      	mov	r0, r4
   186bc:	f7ff ff26 	bl	1850c <conn_cleanup>
}
   186c0:	b00a      	add	sp, #40	; 0x28
   186c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (done->extra.crc_valid) {
   186c6:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   186ca:	2b00      	cmp	r3, #0
   186cc:	d07d      	beq.n	187ca <ull_conn_done+0x1c2>
		conn->supervision_expire = 0U;
   186ce:	2500      	movs	r5, #0
   186d0:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
	if (conn->procedure_expire != 0U) {
   186d4:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   186d8:	b12b      	cbz	r3, 186e6 <ull_conn_done+0xde>
		if (conn->procedure_expire > elapsed_event) {
   186da:	42bb      	cmp	r3, r7
   186dc:	f240 80ec 	bls.w	188b8 <ull_conn_done+0x2b0>
			conn->procedure_expire -= elapsed_event;
   186e0:	1bdb      	subs	r3, r3, r7
   186e2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
   186e6:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   186ea:	b12b      	cbz	r3, 186f8 <ull_conn_done+0xf0>
		if (conn->apto_expire > elapsed_event) {
   186ec:	42bb      	cmp	r3, r7
   186ee:	f240 8092 	bls.w	18816 <ull_conn_done+0x20e>
			conn->apto_expire -= elapsed_event;
   186f2:	1bdb      	subs	r3, r3, r7
   186f4:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
	if (conn->appto_expire != 0U) {
   186f8:	f8b4 20d0 	ldrh.w	r2, [r4, #208]	; 0xd0
   186fc:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   18700:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   18704:	b152      	cbz	r2, 1871c <ull_conn_done+0x114>
		if (conn->appto_expire > elapsed_event) {
   18706:	42ba      	cmp	r2, r7
   18708:	d871      	bhi.n	187ee <ull_conn_done+0x1e6>
			if ((conn->procedure_expire == 0U) &&
   1870a:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			conn->appto_expire = 0U;
   1870e:	2000      	movs	r0, #0
   18710:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
   18714:	b912      	cbnz	r2, 1871c <ull_conn_done+0x114>
   18716:	4299      	cmp	r1, r3
   18718:	f000 80dc 	beq.w	188d4 <ull_conn_done+0x2cc>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1871c:	1a5b      	subs	r3, r3, r1
   1871e:	f003 0303 	and.w	r3, r3, #3
   18722:	2b02      	cmp	r3, #2
   18724:	d06b      	beq.n	187fe <ull_conn_done+0x1f6>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   18726:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
   1872a:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
   1872e:	429a      	cmp	r2, r3
   18730:	f000 80aa 	beq.w	18888 <ull_conn_done+0x280>
		lll->latency_event = 0;
   18734:	2200      	movs	r2, #0
   18736:	84b2      	strh	r2, [r6, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   18738:	e9dd 4308 	ldrd	r4, r3, [sp, #32]
   1873c:	b90d      	cbnz	r5, 18742 <ull_conn_done+0x13a>
   1873e:	4542      	cmp	r2, r8
   18740:	d063      	beq.n	1880a <ull_conn_done+0x202>
		lazy = lll->latency_event + 1;
   18742:	3201      	adds	r2, #1
   18744:	b291      	uxth	r1, r2
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   18746:	b90b      	cbnz	r3, 1874c <ull_conn_done+0x144>
   18748:	2c00      	cmp	r4, #0
   1874a:	d04c      	beq.n	187e6 <ull_conn_done+0x1de>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1874c:	7f32      	ldrb	r2, [r6, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1874e:	4f72      	ldr	r7, [pc, #456]	; (18918 <ull_conn_done+0x310>)
		struct ll_conn *conn = lll->hdr.parent;
   18750:	68f6      	ldr	r6, [r6, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   18752:	9606      	str	r6, [sp, #24]
   18754:	2000      	movs	r0, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   18756:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   18758:	9103      	str	r1, [sp, #12]
   1875a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1875e:	b2d2      	uxtb	r2, r2
   18760:	9504      	str	r5, [sp, #16]
   18762:	9400      	str	r4, [sp, #0]
   18764:	9705      	str	r7, [sp, #20]
   18766:	2101      	movs	r1, #1
   18768:	f7f9 fcfe 	bl	12168 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1876c:	f030 0302 	bics.w	r3, r0, #2
   18770:	d0a6      	beq.n	186c0 <ull_conn_done+0xb8>
   18772:	f7fc fc37 	bl	14fe4 <ull_disable_mark_get>
   18776:	4286      	cmp	r6, r0
   18778:	d0a2      	beq.n	186c0 <ull_conn_done+0xb8>
   1877a:	4a68      	ldr	r2, [pc, #416]	; (1891c <ull_conn_done+0x314>)
   1877c:	4968      	ldr	r1, [pc, #416]	; (18920 <ull_conn_done+0x318>)
   1877e:	4869      	ldr	r0, [pc, #420]	; (18924 <ull_conn_done+0x31c>)
   18780:	f240 43d3 	movw	r3, #1235	; 0x4d3
   18784:	f007 ff5c 	bl	20640 <printk>
   18788:	4040      	eors	r0, r0
   1878a:	f380 8811 	msr	BASEPRI, r0
   1878e:	f04f 0003 	mov.w	r0, #3
   18792:	df02      	svc	2
   18794:	e794      	b.n	186c0 <ull_conn_done+0xb8>
	if (reason_peer && (
   18796:	f996 302d 	ldrsb.w	r3, [r6, #45]	; 0x2d
   1879a:	2b00      	cmp	r3, #0
   1879c:	db8d      	blt.n	186ba <ull_conn_done+0xb2>
			    lll->role ||
   1879e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   187a2:	f013 0202 	ands.w	r2, r3, #2
   187a6:	d188      	bne.n	186ba <ull_conn_done+0xb2>
			    conn->master.terminate_ack ||
   187a8:	293d      	cmp	r1, #61	; 0x3d
   187aa:	d086      	beq.n	186ba <ull_conn_done+0xb2>
	latency_event = lll->latency_event;
   187ac:	f8b6 8024 	ldrh.w	r8, [r6, #36]	; 0x24
	if (done->extra.trx_cnt) {
   187b0:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
	ticks_drift_plus = 0U;
   187b2:	9209      	str	r2, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   187b4:	f108 0701 	add.w	r7, r8, #1
	ticks_drift_minus = 0U;
   187b8:	9208      	str	r2, [sp, #32]
	elapsed_event = latency_event + 1;
   187ba:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   187bc:	2900      	cmp	r1, #0
   187be:	d082      	beq.n	186c6 <ull_conn_done+0xbe>
			conn->master.terminate_ack = 1;
   187c0:	f043 0302 	orr.w	r3, r3, #2
   187c4:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   187c8:	e746      	b.n	18658 <ull_conn_done+0x50>
	else if (conn->connect_expire) {
   187ca:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   187ce:	2b00      	cmp	r3, #0
   187d0:	f43f af48 	beq.w	18664 <ull_conn_done+0x5c>
		if (conn->connect_expire > elapsed_event) {
   187d4:	42bb      	cmp	r3, r7
   187d6:	f240 8084 	bls.w	188e2 <ull_conn_done+0x2da>
			conn->connect_expire -= elapsed_event;
   187da:	1bdb      	subs	r3, r3, r7
   187dc:	f8b4 50c8 	ldrh.w	r5, [r4, #200]	; 0xc8
   187e0:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   187e4:	e745      	b.n	18672 <ull_conn_done+0x6a>
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   187e6:	2900      	cmp	r1, #0
   187e8:	d06b      	beq.n	188c2 <ull_conn_done+0x2ba>
   187ea:	4623      	mov	r3, r4
   187ec:	e7ae      	b.n	1874c <ull_conn_done+0x144>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   187ee:	1a5b      	subs	r3, r3, r1
   187f0:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   187f4:	1bd7      	subs	r7, r2, r7
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   187f6:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   187f8:	f8a4 70d0 	strh.w	r7, [r4, #208]	; 0xd0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   187fc:	d193      	bne.n	18726 <ull_conn_done+0x11e>
   187fe:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   18802:	3b01      	subs	r3, #1
   18804:	2b01      	cmp	r3, #1
   18806:	d88e      	bhi.n	18726 <ull_conn_done+0x11e>
   18808:	e794      	b.n	18734 <ull_conn_done+0x12c>
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   1880a:	b913      	cbnz	r3, 18812 <ull_conn_done+0x20a>
   1880c:	2c00      	cmp	r4, #0
   1880e:	f43f af57 	beq.w	186c0 <ull_conn_done+0xb8>
	lazy = 0U;
   18812:	4629      	mov	r1, r5
   18814:	e79a      	b.n	1874c <ull_conn_done+0x144>
			rx = ll_pdu_rx_alloc();
   18816:	f7fc fb71 	bl	14efc <ll_pdu_rx_alloc>
			if (rx) {
   1881a:	4601      	mov	r1, r0
   1881c:	2800      	cmp	r0, #0
   1881e:	d055      	beq.n	188cc <ull_conn_done+0x2c4>
				conn->apto_expire = 0U;
   18820:	2300      	movs	r3, #0
				rx->handle = lll->handle;
   18822:	8bb2      	ldrh	r2, [r6, #28]
				conn->apto_expire = 0U;
   18824:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
				rx->type = NODE_RX_TYPE_APTO;
   18828:	230d      	movs	r3, #13
				rx->handle = lll->handle;
   1882a:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   1882c:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   1882e:	6800      	ldr	r0, [r0, #0]
   18830:	f7fc fb36 	bl	14ea0 <ll_rx_put>
				ll_rx_sched();
   18834:	f7fc fb3e 	bl	14eb4 <ll_rx_sched>
   18838:	e75e      	b.n	186f8 <ull_conn_done+0xf0>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1883a:	f896 306e 	ldrb.w	r3, [r6, #110]	; 0x6e
   1883e:	0719      	lsls	r1, r3, #28
   18840:	d404      	bmi.n	1884c <ull_conn_done+0x244>
   18842:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   18846:	07da      	lsls	r2, r3, #31
   18848:	f57f aef3 	bpl.w	18632 <ull_conn_done+0x2a>
					    (lll->latency + 6)) ?
   1884c:	8c33      	ldrh	r3, [r6, #32]
			appto_reload_new = (conn->apto_reload >
   1884e:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   18852:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   18854:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   18856:	bfc4      	itt	gt
   18858:	1ad3      	subgt	r3, r2, r3
   1885a:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   1885c:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   18860:	bfcc      	ite	gt
   18862:	b29b      	uxthgt	r3, r3
   18864:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   18866:	4299      	cmp	r1, r3
   18868:	d010      	beq.n	1888c <ull_conn_done+0x284>
				conn->appto_reload = appto_reload_new;
   1886a:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   1886e:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   18872:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   18876:	e6dc      	b.n	18632 <ull_conn_done+0x2a>
		conn->appto_expire = conn->apto_expire = 0U;
   18878:	2300      	movs	r3, #0
   1887a:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   1887e:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   18882:	e6d6      	b.n	18632 <ull_conn_done+0x2a>
					force = 1U;
   18884:	2501      	movs	r5, #1
   18886:	e725      	b.n	186d4 <ull_conn_done+0xcc>
   18888:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
   1888a:	e755      	b.n	18738 <ull_conn_done+0x130>
			if (conn->apto_expire == 0U) {
   1888c:	f8b4 10d4 	ldrh.w	r1, [r4, #212]	; 0xd4
   18890:	2900      	cmp	r1, #0
   18892:	f47f aece 	bne.w	18632 <ull_conn_done+0x2a>
   18896:	e7ea      	b.n	1886e <ull_conn_done+0x266>
			ull_slave_done(done, &ticks_drift_plus,
   18898:	aa08      	add	r2, sp, #32
   1889a:	a909      	add	r1, sp, #36	; 0x24
   1889c:	4628      	mov	r0, r5
   1889e:	f7ea feb7 	bl	3610 <ull_slave_done>
			if (!conn->tx_head) {
   188a2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   188a6:	b30b      	cbz	r3, 188ec <ull_conn_done+0x2e4>
				lll->latency_event = 0;
   188a8:	2300      	movs	r3, #0
   188aa:	84b3      	strh	r3, [r6, #36]	; 0x24
   188ac:	e6d4      	b.n	18658 <ull_conn_done+0x50>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   188ae:	4620      	mov	r0, r4
   188b0:	2108      	movs	r1, #8
   188b2:	f7ff fe2b 	bl	1850c <conn_cleanup>
			return;
   188b6:	e703      	b.n	186c0 <ull_conn_done+0xb8>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   188b8:	4620      	mov	r0, r4
   188ba:	2122      	movs	r1, #34	; 0x22
   188bc:	f7ff fe26 	bl	1850c <conn_cleanup>
			return;
   188c0:	e6fe      	b.n	186c0 <ull_conn_done+0xb8>
	    (lazy != 0U) || (force != 0U)) {
   188c2:	2d00      	cmp	r5, #0
   188c4:	f43f aefc 	beq.w	186c0 <ull_conn_done+0xb8>
   188c8:	4623      	mov	r3, r4
   188ca:	e73f      	b.n	1874c <ull_conn_done+0x144>
				conn->apto_expire = 1U;
   188cc:	2301      	movs	r3, #1
   188ce:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   188d2:	e711      	b.n	186f8 <ull_conn_done+0xf0>
				conn->llcp_ack -= 2U;
   188d4:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   188d6:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   188d8:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
				conn->llcp_type = LLCP_PING;
   188dc:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   188e0:	e721      	b.n	18726 <ull_conn_done+0x11e>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   188e2:	4620      	mov	r0, r4
   188e4:	213e      	movs	r1, #62	; 0x3e
   188e6:	f7ff fe11 	bl	1850c <conn_cleanup>
			return;
   188ea:	e6e9      	b.n	186c0 <ull_conn_done+0xb8>
				ull_conn_tx_demux(UINT8_MAX);
   188ec:	20ff      	movs	r0, #255	; 0xff
   188ee:	f7ff fdc3 	bl	18478 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   188f2:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
   188f6:	2a00      	cmp	r2, #0
   188f8:	d1d6      	bne.n	188a8 <ull_conn_done+0x2a0>
   188fa:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
   188fe:	f7f8 f81f 	bl	10940 <memq_peek>
   18902:	2800      	cmp	r0, #0
   18904:	d1d0      	bne.n	188a8 <ull_conn_done+0x2a0>
			} else if (lll->slave.latency_enabled) {
   18906:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1890a:	07db      	lsls	r3, r3, #31
   1890c:	f57f aea4 	bpl.w	18658 <ull_conn_done+0x50>
				lll->latency_event = lll->latency;
   18910:	8c33      	ldrh	r3, [r6, #32]
   18912:	84b3      	strh	r3, [r6, #36]	; 0x24
   18914:	e6a0      	b.n	18658 <ull_conn_done+0x50>
   18916:	bf00      	nop
   18918:	0001620d 	.word	0x0001620d
   1891c:	000273f4 	.word	0x000273f4
   18920:	0002758c 	.word	0x0002758c
   18924:	00026ecc 	.word	0x00026ecc

00018928 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   18928:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   1892c:	2b00      	cmp	r3, #0
   1892e:	f000 80e7 	beq.w	18b00 <ull_conn_tx_lll_enqueue+0x1d8>
   18932:	3901      	subs	r1, #1
{
   18934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   18938:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 18b08 <ull_conn_tx_lll_enqueue+0x1e0>
		LL_ASSERT(link);
   1893c:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 18b0c <ull_conn_tx_lll_enqueue+0x1e4>
   18940:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 18b10 <ull_conn_tx_lll_enqueue+0x1e8>
   18944:	4604      	mov	r4, r0
   18946:	b2cd      	uxtb	r5, r1
   18948:	e012      	b.n	18970 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   1894a:	4640      	mov	r0, r8
   1894c:	f7f7 ff8c 	bl	10868 <mem_acquire>
		LL_ASSERT(link);
   18950:	4607      	mov	r7, r0
   18952:	2800      	cmp	r0, #0
   18954:	d066      	beq.n	18a24 <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   18956:	4631      	mov	r1, r6
   18958:	4638      	mov	r0, r7
   1895a:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   1895e:	f7f7 ffe7 	bl	10930 <memq_enqueue>
	while (conn->tx_head &&
   18962:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   18966:	3d01      	subs	r5, #1
   18968:	b2ed      	uxtb	r5, r5
   1896a:	2b00      	cmp	r3, #0
   1896c:	f000 8089 	beq.w	18a82 <ull_conn_tx_lll_enqueue+0x15a>
			  !conn->llcp_phy.pause_tx &&
   18970:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
	while (conn->tx_head &&
   18974:	07d1      	lsls	r1, r2, #31
   18976:	d403      	bmi.n	18980 <ull_conn_tx_lll_enqueue+0x58>
			  !conn->llcp_enc.pause_tx &&
   18978:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
			  !conn->llcp_phy.pause_tx &&
   1897c:	0792      	lsls	r2, r2, #30
   1897e:	d566      	bpl.n	18a4e <ull_conn_tx_lll_enqueue+0x126>
			 (!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   18980:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   18984:	4293      	cmp	r3, r2
   18986:	d17c      	bne.n	18a82 <ull_conn_tx_lll_enqueue+0x15a>
   18988:	2dff      	cmp	r5, #255	; 0xff
   1898a:	d07a      	beq.n	18a82 <ull_conn_tx_lll_enqueue+0x15a>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1898c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
   18990:	4620      	mov	r0, r4
   18992:	f7fd fa0d 	bl	15db0 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   18996:	7903      	ldrb	r3, [r0, #4]
   18998:	f003 0303 	and.w	r3, r3, #3
   1899c:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1899e:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   189a0:	d1d3      	bne.n	1894a <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   189a2:	79c3      	ldrb	r3, [r0, #7]
   189a4:	3b03      	subs	r3, #3
   189a6:	2b14      	cmp	r3, #20
   189a8:	d8cf      	bhi.n	1894a <ull_conn_tx_lll_enqueue+0x22>
   189aa:	a201      	add	r2, pc, #4	; (adr r2, 189b0 <ull_conn_tx_lll_enqueue+0x88>)
   189ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   189b0:	00018a0d 	.word	0x00018a0d
   189b4:	00018a0d 	.word	0x00018a0d
   189b8:	0001894b 	.word	0x0001894b
   189bc:	0001894b 	.word	0x0001894b
   189c0:	0001894b 	.word	0x0001894b
   189c4:	0001894b 	.word	0x0001894b
   189c8:	0001894b 	.word	0x0001894b
   189cc:	00018a0d 	.word	0x00018a0d
   189d0:	00018a05 	.word	0x00018a05
   189d4:	0001894b 	.word	0x0001894b
   189d8:	0001894b 	.word	0x0001894b
   189dc:	0001894b 	.word	0x0001894b
   189e0:	0001894b 	.word	0x0001894b
   189e4:	0001894b 	.word	0x0001894b
   189e8:	0001894b 	.word	0x0001894b
   189ec:	0001894b 	.word	0x0001894b
   189f0:	0001894b 	.word	0x0001894b
   189f4:	0001894b 	.word	0x0001894b
   189f8:	0001894b 	.word	0x0001894b
   189fc:	00018a41 	.word	0x00018a41
   18a00:	00018a41 	.word	0x00018a41
		if (!conn->lll.role) {
   18a04:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   18a08:	2b00      	cmp	r3, #0
   18a0a:	da9e      	bge.n	1894a <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   18a0c:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   18a10:	f043 0302 	orr.w	r3, r3, #2
   18a14:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		link = mem_acquire(&mem_link_tx.free);
   18a18:	4640      	mov	r0, r8
   18a1a:	f7f7 ff25 	bl	10868 <mem_acquire>
		LL_ASSERT(link);
   18a1e:	4607      	mov	r7, r0
   18a20:	2800      	cmp	r0, #0
   18a22:	d198      	bne.n	18956 <ull_conn_tx_lll_enqueue+0x2e>
   18a24:	4837      	ldr	r0, [pc, #220]	; (18b04 <ull_conn_tx_lll_enqueue+0x1dc>)
   18a26:	f240 534e 	movw	r3, #1358	; 0x54e
   18a2a:	4652      	mov	r2, sl
   18a2c:	4649      	mov	r1, r9
   18a2e:	f007 fe07 	bl	20640 <printk>
   18a32:	4040      	eors	r0, r0
   18a34:	f380 8811 	msr	BASEPRI, r0
   18a38:	f04f 0003 	mov.w	r0, #3
   18a3c:	df02      	svc	2
   18a3e:	e78a      	b.n	18956 <ull_conn_tx_lll_enqueue+0x2e>
		conn->llcp_phy.pause_tx = 1U;
   18a40:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   18a44:	f043 0301 	orr.w	r3, r3, #1
   18a48:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		break;
   18a4c:	e77d      	b.n	1894a <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   18a4e:	791a      	ldrb	r2, [r3, #4]
   18a50:	f002 0203 	and.w	r2, r2, #3
   18a54:	2a03      	cmp	r2, #3
   18a56:	d197      	bne.n	18988 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   18a58:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   18a5a:	2a03      	cmp	r2, #3
   18a5c:	d001      	beq.n	18a62 <ull_conn_tx_lll_enqueue+0x13a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   18a5e:	2a0a      	cmp	r2, #10
   18a60:	d192      	bne.n	18988 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   18a62:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   18a66:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   18a6a:	428a      	cmp	r2, r1
   18a6c:	d00b      	beq.n	18a86 <ull_conn_tx_lll_enqueue+0x15e>
   18a6e:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   18a72:	2a03      	cmp	r2, #3
   18a74:	d088      	beq.n	18988 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   18a76:	681a      	ldr	r2, [r3, #0]
   18a78:	b11a      	cbz	r2, 18a82 <ull_conn_tx_lll_enqueue+0x15a>
   18a7a:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   18a7e:	428a      	cmp	r2, r1
   18a80:	d02d      	beq.n	18ade <ull_conn_tx_lll_enqueue+0x1b6>
}
   18a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		    ((conn->llcp_req == conn->llcp_ack) &&
   18a86:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
   18a8a:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
   18a8e:	4288      	cmp	r0, r1
   18a90:	d1f1      	bne.n	18a76 <ull_conn_tx_lll_enqueue+0x14e>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   18a92:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
   18a96:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
   18a9a:	4288      	cmp	r0, r1
   18a9c:	d1eb      	bne.n	18a76 <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   18a9e:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   18aa2:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   18aa6:	4288      	cmp	r0, r1
   18aa8:	d1e5      	bne.n	18a76 <ull_conn_tx_lll_enqueue+0x14e>
		       conn->llcp_conn_param.req) ||
   18aaa:	f894 0199 	ldrb.w	r0, [r4, #409]	; 0x199
   18aae:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
   18ab2:	4288      	cmp	r0, r1
   18ab4:	d1df      	bne.n	18a76 <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   18ab6:	f894 01a9 	ldrb.w	r0, [r4, #425]	; 0x1a9
   18aba:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   18abe:	4288      	cmp	r0, r1
   18ac0:	d1d9      	bne.n	18a76 <ull_conn_tx_lll_enqueue+0x14e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   18ac2:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   18ac6:	2101      	movs	r1, #1
   18ac8:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   18acc:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   18ace:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   18ad0:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   18ad4:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			conn->llcp_type = LLCP_ENCRYPTION;
   18ad8:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   18adc:	e754      	b.n	18988 <ull_conn_tx_lll_enqueue+0x60>
				tx->next = conn->tx_ctrl_last->next;
   18ade:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
				if (!conn->tx_data_last) {
   18ae2:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
				conn->tx_head = tx->next;
   18ae6:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
				tx->next = conn->tx_ctrl_last->next;
   18aea:	680a      	ldr	r2, [r1, #0]
   18aec:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   18aee:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
   18af0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
				if (!conn->tx_data_last) {
   18af4:	2800      	cmp	r0, #0
   18af6:	f47f af47 	bne.w	18988 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   18afa:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
   18afe:	e743      	b.n	18988 <ull_conn_tx_lll_enqueue+0x60>
   18b00:	4770      	bx	lr
   18b02:	bf00      	nop
   18b04:	00026ecc 	.word	0x00026ecc
   18b08:	20003cd8 	.word	0x20003cd8
   18b0c:	000273f4 	.word	0x000273f4
   18b10:	00027460 	.word	0x00027460

00018b14 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   18b14:	4901      	ldr	r1, [pc, #4]	; (18b1c <ull_conn_link_tx_release+0x8>)
   18b16:	f7f7 bec1 	b.w	1089c <mem_release>
   18b1a:	bf00      	nop
   18b1c:	20003cd8 	.word	0x20003cd8

00018b20 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   18b20:	4b01      	ldr	r3, [pc, #4]	; (18b28 <ull_conn_ack_last_idx_get+0x8>)
}
   18b22:	78d8      	ldrb	r0, [r3, #3]
   18b24:	4770      	bx	lr
   18b26:	bf00      	nop
   18b28:	200004a0 	.word	0x200004a0

00018b2c <ull_conn_ack_peek>:
{
   18b2c:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   18b2e:	4b0b      	ldr	r3, [pc, #44]	; (18b5c <ull_conn_ack_peek+0x30>)
   18b30:	789c      	ldrb	r4, [r3, #2]
   18b32:	78de      	ldrb	r6, [r3, #3]
   18b34:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
   18b36:	42b4      	cmp	r4, r6
   18b38:	d00d      	beq.n	18b56 <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   18b3a:	3304      	adds	r3, #4
   18b3c:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   18b40:	4605      	mov	r5, r0
   18b42:	1918      	adds	r0, r3, r4
   18b44:	d005      	beq.n	18b52 <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   18b46:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   18b48:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   18b4a:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   18b4c:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   18b4e:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   18b50:	6818      	ldr	r0, [r3, #0]
}
   18b52:	bcf0      	pop	{r4, r5, r6, r7}
   18b54:	4770      	bx	lr
		return NULL;
   18b56:	2000      	movs	r0, #0
   18b58:	e7fb      	b.n	18b52 <ull_conn_ack_peek+0x26>
   18b5a:	bf00      	nop
   18b5c:	200004a0 	.word	0x200004a0

00018b60 <ull_conn_ack_by_last_peek>:
{
   18b60:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   18b62:	4b09      	ldr	r3, [pc, #36]	; (18b88 <ull_conn_ack_by_last_peek+0x28>)
   18b64:	789c      	ldrb	r4, [r3, #2]
   18b66:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   18b68:	4284      	cmp	r4, r0
   18b6a:	d00b      	beq.n	18b84 <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   18b6c:	3304      	adds	r3, #4
   18b6e:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   18b72:	1918      	adds	r0, r3, r4
   18b74:	d004      	beq.n	18b80 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   18b76:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   18b78:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   18b7a:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   18b7c:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   18b7e:	6818      	ldr	r0, [r3, #0]
}
   18b80:	bc30      	pop	{r4, r5}
   18b82:	4770      	bx	lr
		return NULL;
   18b84:	2000      	movs	r0, #0
   18b86:	e7fb      	b.n	18b80 <ull_conn_ack_by_last_peek+0x20>
   18b88:	200004a0 	.word	0x200004a0

00018b8c <ull_conn_ack_dequeue>:
{
   18b8c:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   18b8e:	4b0a      	ldr	r3, [pc, #40]	; (18bb8 <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   18b90:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   18b92:	78da      	ldrb	r2, [r3, #3]
   18b94:	7818      	ldrb	r0, [r3, #0]
   18b96:	785c      	ldrb	r4, [r3, #1]
   18b98:	428a      	cmp	r2, r1
   18b9a:	d00a      	beq.n	18bb2 <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   18b9c:	1c4a      	adds	r2, r1, #1
   18b9e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   18ba0:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   18ba4:	4294      	cmp	r4, r2
   18ba6:	bf08      	it	eq
   18ba8:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   18baa:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   18bac:	709a      	strb	r2, [r3, #2]
}
   18bae:	bc10      	pop	{r4}
   18bb0:	4770      	bx	lr
		return NULL;
   18bb2:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   18bb4:	e7fb      	b.n	18bae <ull_conn_ack_dequeue+0x22>
   18bb6:	bf00      	nop
   18bb8:	200004a0 	.word	0x200004a0

00018bbc <ull_conn_lll_ack_enqueue>:
{
   18bbc:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   18bbe:	4a13      	ldr	r2, [pc, #76]	; (18c0c <ull_conn_lll_ack_enqueue+0x50>)
   18bc0:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   18bc2:	7855      	ldrb	r5, [r2, #1]
   18bc4:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   18bc6:	1c73      	adds	r3, r6, #1
   18bc8:	b2db      	uxtb	r3, r3
		last = 0U;
   18bca:	429d      	cmp	r5, r3
   18bcc:	bf08      	it	eq
   18bce:	2300      	moveq	r3, #0
	if (last == first) {
   18bd0:	429c      	cmp	r4, r3
   18bd2:	d00a      	beq.n	18bea <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   18bd4:	4615      	mov	r5, r2
   18bd6:	f815 4b04 	ldrb.w	r4, [r5], #4
   18bda:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   18bde:	192e      	adds	r6, r5, r4
   18be0:	d003      	beq.n	18bea <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   18be2:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   18be4:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   18be6:	6071      	str	r1, [r6, #4]
}
   18be8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   18bea:	4a09      	ldr	r2, [pc, #36]	; (18c10 <ull_conn_lll_ack_enqueue+0x54>)
   18bec:	4909      	ldr	r1, [pc, #36]	; (18c14 <ull_conn_lll_ack_enqueue+0x58>)
   18bee:	480a      	ldr	r0, [pc, #40]	; (18c18 <ull_conn_lll_ack_enqueue+0x5c>)
   18bf0:	f240 538d 	movw	r3, #1421	; 0x58d
   18bf4:	f007 fd24 	bl	20640 <printk>
   18bf8:	4040      	eors	r0, r0
   18bfa:	f380 8811 	msr	BASEPRI, r0
   18bfe:	f04f 0003 	mov.w	r0, #3
   18c02:	df02      	svc	2
	lll_tx->handle = handle;
   18c04:	2300      	movs	r3, #0
   18c06:	801b      	strh	r3, [r3, #0]
   18c08:	deff      	udf	#255	; 0xff
   18c0a:	bf00      	nop
   18c0c:	200004a0 	.word	0x200004a0
   18c10:	000273f4 	.word	0x000273f4
   18c14:	00027450 	.word	0x00027450
   18c18:	00026ecc 	.word	0x00026ecc

00018c1c <ull_conn_tx_ack>:
{
   18c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   18c1e:	7953      	ldrb	r3, [r2, #5]
{
   18c20:	b083      	sub	sp, #12
   18c22:	4614      	mov	r4, r2
   18c24:	4605      	mov	r5, r0
   18c26:	460f      	mov	r7, r1
	LL_ASSERT(pdu_tx->len);
   18c28:	2b00      	cmp	r3, #0
   18c2a:	d033      	beq.n	18c94 <ull_conn_tx_ack+0x78>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   18c2c:	7923      	ldrb	r3, [r4, #4]
   18c2e:	f003 0203 	and.w	r2, r3, #3
   18c32:	2a03      	cmp	r2, #3
   18c34:	d016      	beq.n	18c64 <ull_conn_tx_ack+0x48>
	} else if (handle != 0xFFFF) {
   18c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18c3a:	4295      	cmp	r5, r2
   18c3c:	d10a      	bne.n	18c54 <ull_conn_tx_ack+0x38>
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   18c3e:	f36f 0301 	bfc	r3, #0, #2
   18c42:	7123      	strb	r3, [r4, #4]
	struct ll_conn *conn = NULL;
   18c44:	2600      	movs	r6, #0
	ll_tx_ack_put(handle, tx);
   18c46:	4621      	mov	r1, r4
   18c48:	4628      	mov	r0, r5
   18c4a:	f7fc f96f 	bl	14f2c <ll_tx_ack_put>
}
   18c4e:	4630      	mov	r0, r6
   18c50:	b003      	add	sp, #12
   18c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18c54:	48c4      	ldr	r0, [pc, #784]	; (18f68 <ull_conn_tx_ack+0x34c>)
   18c56:	462a      	mov	r2, r5
   18c58:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   18c5c:	f7f7 fe36 	bl	108cc <mem_get>
   18c60:	4606      	mov	r6, r0
   18c62:	e7f0      	b.n	18c46 <ull_conn_tx_ack+0x2a>
		if (handle != 0xFFFF) {
   18c64:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18c68:	429d      	cmp	r5, r3
   18c6a:	d121      	bne.n	18cb0 <ull_conn_tx_ack+0x94>
	struct ll_conn *conn = NULL;
   18c6c:	2600      	movs	r6, #0
		if (link->next == (void *)tx) {
   18c6e:	6838      	ldr	r0, [r7, #0]
   18c70:	4284      	cmp	r4, r0
   18c72:	d045      	beq.n	18d00 <ull_conn_tx_ack+0xe4>
			LL_ASSERT(!link->next);
   18c74:	2800      	cmp	r0, #0
   18c76:	d0e6      	beq.n	18c46 <ull_conn_tx_ack+0x2a>
   18c78:	4abc      	ldr	r2, [pc, #752]	; (18f6c <ull_conn_tx_ack+0x350>)
   18c7a:	49bd      	ldr	r1, [pc, #756]	; (18f70 <ull_conn_tx_ack+0x354>)
   18c7c:	48bd      	ldr	r0, [pc, #756]	; (18f74 <ull_conn_tx_ack+0x358>)
   18c7e:	f240 53af 	movw	r3, #1455	; 0x5af
   18c82:	f007 fcdd 	bl	20640 <printk>
   18c86:	4040      	eors	r0, r0
   18c88:	f380 8811 	msr	BASEPRI, r0
   18c8c:	f04f 0003 	mov.w	r0, #3
   18c90:	df02      	svc	2
   18c92:	e7d8      	b.n	18c46 <ull_conn_tx_ack+0x2a>
	LL_ASSERT(pdu_tx->len);
   18c94:	4ab5      	ldr	r2, [pc, #724]	; (18f6c <ull_conn_tx_ack+0x350>)
   18c96:	49b8      	ldr	r1, [pc, #736]	; (18f78 <ull_conn_tx_ack+0x35c>)
   18c98:	48b6      	ldr	r0, [pc, #728]	; (18f74 <ull_conn_tx_ack+0x358>)
   18c9a:	f240 539c 	movw	r3, #1436	; 0x59c
   18c9e:	f007 fccf 	bl	20640 <printk>
   18ca2:	4040      	eors	r0, r0
   18ca4:	f380 8811 	msr	BASEPRI, r0
   18ca8:	f04f 0003 	mov.w	r0, #3
   18cac:	df02      	svc	2
   18cae:	e7bd      	b.n	18c2c <ull_conn_tx_ack+0x10>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18cb0:	48ad      	ldr	r0, [pc, #692]	; (18f68 <ull_conn_tx_ack+0x34c>)
   18cb2:	462a      	mov	r2, r5
   18cb4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   18cb8:	f7f7 fe08 	bl	108cc <mem_get>
   18cbc:	79e3      	ldrb	r3, [r4, #7]
   18cbe:	3b02      	subs	r3, #2
   18cc0:	4606      	mov	r6, r0
	switch (pdu_tx->llctrl.opcode) {
   18cc2:	2b16      	cmp	r3, #22
   18cc4:	d818      	bhi.n	18cf8 <ull_conn_tx_ack+0xdc>
   18cc6:	e8df f013 	tbh	[pc, r3, lsl #1]
   18cca:	011e      	.short	0x011e
   18ccc:	00460102 	.word	0x00460102
   18cd0:	00170017 	.word	0x00170017
   18cd4:	00170017 	.word	0x00170017
   18cd8:	00f10017 	.word	0x00f10017
   18cdc:	0017005a 	.word	0x0017005a
   18ce0:	00170050 	.word	0x00170050
   18ce4:	00170017 	.word	0x00170017
   18ce8:	0017004d 	.word	0x0017004d
   18cec:	00d80017 	.word	0x00d80017
   18cf0:	001f00b0 	.word	0x001f00b0
   18cf4:	00e00026 	.word	0x00e00026
		if (link->next == (void *)tx) {
   18cf8:	6838      	ldr	r0, [r7, #0]
   18cfa:	42a0      	cmp	r0, r4
   18cfc:	d1ba      	bne.n	18c74 <ull_conn_tx_ack+0x58>
   18cfe:	4620      	mov	r0, r4
			mem_release(tx, &mem_conn_tx_ctrl.free);
   18d00:	499e      	ldr	r1, [pc, #632]	; (18f7c <ull_conn_tx_ack+0x360>)
   18d02:	f7f7 fdcb 	bl	1089c <mem_release>
			return conn;
   18d06:	e7a2      	b.n	18c4e <ull_conn_tx_ack+0x32>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   18d08:	f890 31aa 	ldrb.w	r3, [r0, #426]	; 0x1aa
   18d0c:	2202      	movs	r2, #2
   18d0e:	f362 0301 	bfi	r3, r2, #0, #2
   18d12:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
		if (conn->lll.role) {
   18d16:	f996 303d 	ldrsb.w	r3, [r6, #61]	; 0x3d
   18d1a:	2b00      	cmp	r3, #0
   18d1c:	da14      	bge.n	18d48 <ull_conn_tx_ack+0x12c>
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   18d1e:	4998      	ldr	r1, [pc, #608]	; (18f80 <ull_conn_tx_ack+0x364>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   18d20:	f896 2064 	ldrb.w	r2, [r6, #100]	; 0x64
   18d24:	f896 31aa 	ldrb.w	r3, [r6, #426]	; 0x1aa
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   18d28:	c903      	ldmia	r1, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   18d2a:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   18d2e:	f10d 0c08 	add.w	ip, sp, #8
   18d32:	e90c 0003 	stmdb	ip, {r0, r1}
			lll->phy_tx_time = phy_tx_time[phys];
   18d36:	f003 0307 	and.w	r3, r3, #7
   18d3a:	4463      	add	r3, ip
   18d3c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   18d40:	f363 1206 	bfi	r2, r3, #4, #3
   18d44:	f886 2064 	strb.w	r2, [r6, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   18d48:	f896 31ab 	ldrb.w	r3, [r6, #427]	; 0x1ab
   18d4c:	f36f 0300 	bfc	r3, #0, #1
   18d50:	f886 31ab 	strb.w	r3, [r6, #427]	; 0x1ab
		break;
   18d54:	e78b      	b.n	18c6e <ull_conn_tx_ack+0x52>
			conn->llcp_enc.pause_tx = 1U;
   18d56:	f896 3152 	ldrb.w	r3, [r6, #338]	; 0x152
   18d5a:	f043 0302 	orr.w	r3, r3, #2
   18d5e:	f886 3152 	strb.w	r3, [r6, #338]	; 0x152
   18d62:	e784      	b.n	18c6e <ull_conn_tx_ack+0x52>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   18d64:	7a23      	ldrb	r3, [r4, #8]
   18d66:	2b03      	cmp	r3, #3
   18d68:	d181      	bne.n	18c6e <ull_conn_tx_ack+0x52>
		conn->llcp_enc.pause_rx = 0U;
   18d6a:	f896 3152 	ldrb.w	r3, [r6, #338]	; 0x152
		conn->procedure_expire = 0U;
   18d6e:	2200      	movs	r2, #0
		conn->llcp_enc.pause_rx = 0U;
   18d70:	f023 0303 	bic.w	r3, r3, #3
   18d74:	f886 3152 	strb.w	r3, [r6, #338]	; 0x152
		conn->procedure_expire = 0U;
   18d78:	f8a6 20cc 	strh.w	r2, [r6, #204]	; 0xcc
		break;
   18d7c:	e777      	b.n	18c6e <ull_conn_tx_ack+0x52>
		if (!conn->lll.role) {
   18d7e:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   18d82:	2b00      	cmp	r3, #0
   18d84:	dbe7      	blt.n	18d56 <ull_conn_tx_ack+0x13a>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18d86:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   18d88:	2203      	movs	r2, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18d8a:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   18d8e:	2117      	movs	r1, #23
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   18d90:	71e2      	strb	r2, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   18d92:	2208      	movs	r2, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18d94:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   18d96:	7161      	strb	r1, [r4, #5]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   18d98:	f200 1155 	addw	r1, r0, #341	; 0x155
   18d9c:	18a0      	adds	r0, r4, r2
   18d9e:	f009 fcbf 	bl	22720 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   18da2:	f896 3153 	ldrb.w	r3, [r6, #339]	; 0x153
   18da6:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   18da8:	f896 3154 	ldrb.w	r3, [r6, #340]	; 0x154
   18dac:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   18dae:	210c      	movs	r1, #12
   18db0:	f104 0012 	add.w	r0, r4, #18
   18db4:	f002 f93c 	bl	1b030 <lll_csrand_isr_get>
	    conn->tx_head &&
   18db8:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	if (
   18dbc:	2b00      	cmp	r3, #0
   18dbe:	f000 80ac 	beq.w	18f1a <ull_conn_tx_ack+0x2fe>
	    !conn->llcp_enc.pause_tx &&
   18dc2:	f896 2152 	ldrb.w	r2, [r6, #338]	; 0x152
	    conn->tx_head &&
   18dc6:	0791      	lsls	r1, r2, #30
   18dc8:	f100 80a7 	bmi.w	18f1a <ull_conn_tx_ack+0x2fe>
	    !conn->llcp_phy.pause_tx &&
   18dcc:	f896 21ab 	ldrb.w	r2, [r6, #427]	; 0x1ab
   18dd0:	07d2      	lsls	r2, r2, #31
   18dd2:	f100 80a2 	bmi.w	18f1a <ull_conn_tx_ack+0x2fe>
		if (conn->tx_head == conn->tx_data) {
   18dd6:	f8d6 21bc 	ldr.w	r2, [r6, #444]	; 0x1bc
   18dda:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   18ddc:	bf04      	itt	eq
   18dde:	681a      	ldreq	r2, [r3, #0]
   18de0:	f8c6 21bc 	streq.w	r2, [r6, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   18de4:	f8d6 21b4 	ldr.w	r2, [r6, #436]	; 0x1b4
   18de8:	2a00      	cmp	r2, #0
   18dea:	f000 80b5 	beq.w	18f58 <ull_conn_tx_ack+0x33c>
	tx->next = conn->tx_ctrl_last->next;
   18dee:	f8d6 31b8 	ldr.w	r3, [r6, #440]	; 0x1b8
   18df2:	681a      	ldr	r2, [r3, #0]
   18df4:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   18df6:	601c      	str	r4, [r3, #0]
	conn->tx_ctrl_last = tx;
   18df8:	f8c6 41b8 	str.w	r4, [r6, #440]	; 0x1b8
   18dfc:	6823      	ldr	r3, [r4, #0]
	if (!tx->next) {
   18dfe:	683a      	ldr	r2, [r7, #0]
   18e00:	2b00      	cmp	r3, #0
   18e02:	f000 8087 	beq.w	18f14 <ull_conn_tx_ack+0x2f8>
		if (link->next == (void *)tx) {
   18e06:	2a00      	cmp	r2, #0
   18e08:	f47f af21 	bne.w	18c4e <ull_conn_tx_ack+0x32>
			LL_ASSERT(link->next);
   18e0c:	4a57      	ldr	r2, [pc, #348]	; (18f6c <ull_conn_tx_ack+0x350>)
   18e0e:	495d      	ldr	r1, [pc, #372]	; (18f84 <ull_conn_tx_ack+0x368>)
   18e10:	4858      	ldr	r0, [pc, #352]	; (18f74 <ull_conn_tx_ack+0x358>)
   18e12:	f44f 63b5 	mov.w	r3, #1448	; 0x5a8
   18e16:	f007 fc13 	bl	20640 <printk>
   18e1a:	4040      	eors	r0, r0
   18e1c:	f380 8811 	msr	BASEPRI, r0
   18e20:	f04f 0003 	mov.w	r0, #3
   18e24:	df02      	svc	2
   18e26:	2000      	movs	r0, #0
   18e28:	e76a      	b.n	18d00 <ull_conn_tx_ack+0xe4>
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   18e2a:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   18e2e:	f890 3199 	ldrb.w	r3, [r0, #409]	; 0x199
   18e32:	428b      	cmp	r3, r1
   18e34:	f43f af1b 	beq.w	18c6e <ull_conn_tx_ack+0x52>
			switch (conn->llcp_length.state) {
   18e38:	f890 219a 	ldrb.w	r2, [r0, #410]	; 0x19a
   18e3c:	f002 0307 	and.w	r3, r2, #7
   18e40:	2b03      	cmp	r3, #3
   18e42:	d005      	beq.n	18e50 <ull_conn_tx_ack+0x234>
   18e44:	3303      	adds	r3, #3
   18e46:	f003 0307 	and.w	r3, r3, #7
   18e4a:	2b01      	cmp	r3, #1
   18e4c:	f63f af54 	bhi.w	18cf8 <ull_conn_tx_ack+0xdc>
				conn->lll.max_tx_octets =
   18e50:	f8b6 319e 	ldrh.w	r3, [r6, #414]	; 0x19e
   18e54:	f8a6 305c 	strh.w	r3, [r6, #92]	; 0x5c
				if (conn->llcp_length.state ==
   18e58:	f002 0307 	and.w	r3, r2, #7
				conn->lll.max_tx_time =
   18e5c:	f8b6 01a2 	ldrh.w	r0, [r6, #418]	; 0x1a2
   18e60:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
				if (conn->llcp_length.state ==
   18e64:	2b05      	cmp	r3, #5
   18e66:	d071      	beq.n	18f4c <ull_conn_tx_ack+0x330>
				if (!conn->llcp_length.cache.tx_octets) {
   18e68:	f8b6 31a4 	ldrh.w	r3, [r6, #420]	; 0x1a4
   18e6c:	2b00      	cmp	r3, #0
   18e6e:	d15f      	bne.n	18f30 <ull_conn_tx_ack+0x314>
					conn->llcp_length.ack =
   18e70:	f886 1199 	strb.w	r1, [r6, #409]	; 0x199
					conn->procedure_expire = 0U;
   18e74:	f8a6 30cc 	strh.w	r3, [r6, #204]	; 0xcc
					break;
   18e78:	e6f9      	b.n	18c6e <ull_conn_tx_ack+0x52>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   18e7a:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   18e7e:	2202      	movs	r2, #2
   18e80:	f362 0302 	bfi	r3, r2, #0, #3
   18e84:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
		break;
   18e88:	e6f1      	b.n	18c6e <ull_conn_tx_ack+0x52>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   18e8a:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   18e8e:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   18e92:	f890 21ab 	ldrb.w	r2, [r0, #427]	; 0x1ab
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   18e96:	f3c3 0382 	ubfx	r3, r3, #2, #3
   18e9a:	f363 1106 	bfi	r1, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   18e9e:	f36f 0200 	bfc	r2, #0, #1
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   18ea2:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   18ea6:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
		break;
   18eaa:	e6e0      	b.n	18c6e <ull_conn_tx_ack+0x52>
		conn->llcp_enc.pause_tx = 1U;
   18eac:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   18eb0:	f8b0 20ca 	ldrh.w	r2, [r0, #202]	; 0xca
   18eb4:	f8a0 20cc 	strh.w	r2, [r0, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
   18eb8:	f023 0306 	bic.w	r3, r3, #6
		conn->llcp_enc.ack = conn->llcp_enc.req;
   18ebc:	f890 2150 	ldrb.w	r2, [r0, #336]	; 0x150
   18ec0:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
		conn->llcp_enc.pause_tx = 1U;
   18ec4:	f043 0306 	orr.w	r3, r3, #6
   18ec8:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
		break;
   18ecc:	e6cf      	b.n	18c6e <ull_conn_tx_ack+0x52>
		memcpy(&conn->llcp.encryption.skd[0],
   18ece:	2208      	movs	r2, #8
   18ed0:	f104 0112 	add.w	r1, r4, #18
   18ed4:	30ee      	adds	r0, #238	; 0xee
   18ed6:	f009 fc23 	bl	22720 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   18eda:	2204      	movs	r2, #4
   18edc:	f104 011a 	add.w	r1, r4, #26
   18ee0:	f106 0098 	add.w	r0, r6, #152	; 0x98
   18ee4:	f009 fc1c 	bl	22720 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   18ee8:	f896 3152 	ldrb.w	r3, [r6, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   18eec:	f8b6 10ca 	ldrh.w	r1, [r6, #202]	; 0xca
		conn->llcp_enc.ack = conn->llcp_enc.req;
   18ef0:	f896 2150 	ldrb.w	r2, [r6, #336]	; 0x150
		conn->procedure_expire = conn->procedure_reload;
   18ef4:	f8a6 10cc 	strh.w	r1, [r6, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
   18ef8:	f043 0302 	orr.w	r3, r3, #2
   18efc:	f886 3152 	strb.w	r3, [r6, #338]	; 0x152
		conn->llcp_enc.ack = conn->llcp_enc.req;
   18f00:	f886 2151 	strb.w	r2, [r6, #337]	; 0x151
		break;
   18f04:	e6b3      	b.n	18c6e <ull_conn_tx_ack+0x52>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   18f06:	7a21      	ldrb	r1, [r4, #8]
   18f08:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   18f0a:	bf08      	it	eq
   18f0c:	2116      	moveq	r1, #22
   18f0e:	f7ff fafd 	bl	1850c <conn_cleanup>
	break;
   18f12:	e6ac      	b.n	18c6e <ull_conn_tx_ack+0x52>
		conn->tx_data_last = tx;
   18f14:	f8c6 41c0 	str.w	r4, [r6, #448]	; 0x1c0
   18f18:	e775      	b.n	18e06 <ull_conn_tx_ack+0x1ea>
		if (!conn->tx_ctrl) {
   18f1a:	f8d6 21b4 	ldr.w	r2, [r6, #436]	; 0x1b4
   18f1e:	2a00      	cmp	r2, #0
   18f20:	f47f af65 	bne.w	18dee <ull_conn_tx_ack+0x1d2>
			tx->next = conn->tx_head;
   18f24:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   18f26:	e9c6 446c 	strd	r4, r4, [r6, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   18f2a:	f8c6 41b8 	str.w	r4, [r6, #440]	; 0x1b8
   18f2e:	e766      	b.n	18dfe <ull_conn_tx_ack+0x1e2>
				conn->llcp_length.cache.tx_octets = 0;
   18f30:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   18f32:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_length.tx_octets =
   18f36:	f8a6 319e 	strh.w	r3, [r6, #414]	; 0x19e
				conn->llcp_length.tx_time =
   18f3a:	f8b6 31a6 	ldrh.w	r3, [r6, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   18f3e:	f886 219a 	strb.w	r2, [r6, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
   18f42:	f8a6 11a4 	strh.w	r1, [r6, #420]	; 0x1a4
				conn->llcp_length.tx_time =
   18f46:	f8a6 31a2 	strh.w	r3, [r6, #418]	; 0x1a2
				break;
   18f4a:	e690      	b.n	18c6e <ull_conn_tx_ack+0x52>
					conn->llcp_length.state =
   18f4c:	2304      	movs	r3, #4
   18f4e:	f363 0202 	bfi	r2, r3, #0, #3
   18f52:	f886 219a 	strb.w	r2, [r6, #410]	; 0x19a
					break;
   18f56:	e68a      	b.n	18c6e <ull_conn_tx_ack+0x52>
			tx->next = conn->tx_head->next;
   18f58:	681a      	ldr	r2, [r3, #0]
   18f5a:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   18f5c:	601c      	str	r4, [r3, #0]
				conn->tx_ctrl = tx;
   18f5e:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   18f60:	e9c6 446d 	strd	r4, r4, [r6, #436]	; 0x1b4
   18f64:	e74b      	b.n	18dfe <ull_conn_tx_ack+0x1e2>
   18f66:	bf00      	nop
   18f68:	20002e8c 	.word	0x20002e8c
   18f6c:	000273f4 	.word	0x000273f4
   18f70:	000275f4 	.word	0x000275f4
   18f74:	00026ecc 	.word	0x00026ecc
   18f78:	000275e8 	.word	0x000275e8
   18f7c:	20003c54 	.word	0x20003c54
   18f80:	0002760c 	.word	0x0002760c
   18f84:	00027600 	.word	0x00027600

00018f88 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   18f88:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   18f8c:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   18f90:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   18f92:	bf03      	ittte	eq
   18f94:	3301      	addeq	r3, #1
   18f96:	f880 30e8 	strbeq.w	r3, [r0, #232]	; 0xe8
	return 0;
   18f9a:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   18f9c:	200c      	movne	r0, #12
}
   18f9e:	4770      	bx	lr

00018fa0 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   18fa0:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
   18fa4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   18fa8:	f3c1 1202 	ubfx	r2, r1, #4, #3
   18fac:	2a02      	cmp	r2, #2
   18fae:	d010      	beq.n	18fd2 <ull_conn_lll_max_tx_octets_get+0x32>
   18fb0:	2a04      	cmp	r2, #4
   18fb2:	d012      	beq.n	18fda <ull_conn_lll_max_tx_octets_get+0x3a>
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   18fb4:	08db      	lsrs	r3, r3, #3
   18fb6:	3b0a      	subs	r3, #10
   18fb8:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   18fba:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	return max_tx_octets;
   18fbe:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
	if (lll->enc_tx) {
   18fc2:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   18fc4:	bf44      	itt	mi
   18fc6:	3b04      	submi	r3, #4
   18fc8:	b29b      	uxthmi	r3, r3
}
   18fca:	4298      	cmp	r0, r3
   18fcc:	bf28      	it	cs
   18fce:	4618      	movcs	r0, r3
   18fd0:	4770      	bx	lr
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   18fd2:	089b      	lsrs	r3, r3, #2
   18fd4:	3b0b      	subs	r3, #11
   18fd6:	b29b      	uxth	r3, r3
		break;
   18fd8:	e7ef      	b.n	18fba <ull_conn_lll_max_tx_octets_get+0x1a>
		if (lll->phy_flags & 0x01) {
   18fda:	0709      	lsls	r1, r1, #28
			max_tx_octets = ((lll->max_tx_time - 592) >>
   18fdc:	bf4b      	itete	mi
   18fde:	f5a3 7314 	submi.w	r3, r3, #592	; 0x250
			max_tx_octets = ((lll->max_tx_time - 430) >>
   18fe2:	f5a3 73d7 	subpl.w	r3, r3, #430	; 0x1ae
			max_tx_octets = ((lll->max_tx_time - 592) >>
   18fe6:	119b      	asrmi	r3, r3, #6
			max_tx_octets = ((lll->max_tx_time - 430) >>
   18fe8:	111b      	asrpl	r3, r3, #4
					  4) - 2;
   18fea:	3b02      	subs	r3, #2
			max_tx_octets = ((lll->max_tx_time - 430) >>
   18fec:	b29b      	uxth	r3, r3
   18fee:	e7e4      	b.n	18fba <ull_conn_lll_max_tx_octets_get+0x1a>

00018ff0 <ull_conn_upd_curr_reset>:
	conn_upd_curr = NULL;
   18ff0:	4b01      	ldr	r3, [pc, #4]	; (18ff8 <ull_conn_upd_curr_reset+0x8>)
   18ff2:	2200      	movs	r2, #0
   18ff4:	601a      	str	r2, [r3, #0]
}
   18ff6:	4770      	bx	lr
   18ff8:	2000321c 	.word	0x2000321c

00018ffc <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	ARG_UNUSED(param);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18ffc:	b900      	cbnz	r0, 19000 <ticker_op_cb+0x4>
   18ffe:	4770      	bx	lr
{
   19000:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19002:	4a07      	ldr	r2, [pc, #28]	; (19020 <ticker_op_cb+0x24>)
   19004:	4907      	ldr	r1, [pc, #28]	; (19024 <ticker_op_cb+0x28>)
   19006:	4808      	ldr	r0, [pc, #32]	; (19028 <ticker_op_cb+0x2c>)
   19008:	f240 13cb 	movw	r3, #459	; 0x1cb
   1900c:	f007 fb18 	bl	20640 <printk>
   19010:	4040      	eors	r0, r0
   19012:	f380 8811 	msr	BASEPRI, r0
   19016:	f04f 0003 	mov.w	r0, #3
   1901a:	df02      	svc	2
}
   1901c:	bd08      	pop	{r3, pc}
   1901e:	bf00      	nop
   19020:	0002762c 	.word	0x0002762c
   19024:	00027468 	.word	0x00027468
   19028:	00026ecc 	.word	0x00026ecc

0001902c <ticker_op_stop_adv_cb.part.0>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param)
   1902c:	b508      	push	{r3, lr}
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1902e:	4a07      	ldr	r2, [pc, #28]	; (1904c <ticker_op_stop_adv_cb.part.0+0x20>)
   19030:	4907      	ldr	r1, [pc, #28]	; (19050 <ticker_op_stop_adv_cb.part.0+0x24>)
   19032:	4808      	ldr	r0, [pc, #32]	; (19054 <ticker_op_stop_adv_cb.part.0+0x28>)
   19034:	f240 13c3 	movw	r3, #451	; 0x1c3
   19038:	f007 fb02 	bl	20640 <printk>
   1903c:	4040      	eors	r0, r0
   1903e:	f380 8811 	msr	BASEPRI, r0
   19042:	f04f 0003 	mov.w	r0, #3
   19046:	df02      	svc	2
}
   19048:	bd08      	pop	{r3, pc}
   1904a:	bf00      	nop
   1904c:	0002762c 	.word	0x0002762c
   19050:	00027670 	.word	0x00027670
   19054:	00026ecc 	.word	0x00026ecc

00019058 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   19058:	2801      	cmp	r0, #1
   1905a:	d000      	beq.n	1905e <ticker_op_stop_adv_cb+0x6>
   1905c:	4770      	bx	lr
{
   1905e:	b510      	push	{r4, lr}
   19060:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   19062:	f7fb ffbf 	bl	14fe4 <ull_disable_mark_get>
   19066:	4284      	cmp	r4, r0
   19068:	d003      	beq.n	19072 <ticker_op_stop_adv_cb+0x1a>
}
   1906a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1906e:	f7ff bfdd 	b.w	1902c <ticker_op_stop_adv_cb.part.0>
   19072:	bd10      	pop	{r4, pc}

00019074 <ull_slave_ticker_cb>:
{
   19074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19078:	4605      	mov	r5, r0
   1907a:	4688      	mov	r8, r1
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1907c:	4618      	mov	r0, r3
   1907e:	4629      	mov	r1, r5
{
   19080:	461c      	mov	r4, r3
   19082:	4617      	mov	r7, r2
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   19084:	f7e8 f9e8 	bl	1458 <ull_conn_llcp>
		if (ret) {
   19088:	2800      	cmp	r0, #0
   1908a:	d13a      	bne.n	19102 <ull_slave_ticker_cb+0x8e>
   1908c:	7c23      	ldrb	r3, [r4, #16]
   1908e:	3301      	adds	r3, #1
   19090:	b2db      	uxtb	r3, r3
   19092:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   19094:	b33b      	cbz	r3, 190e6 <ull_slave_ticker_cb+0x72>
	p.ticks_at_expire = ticks_at_expire;
   19096:	4e1c      	ldr	r6, [pc, #112]	; (19108 <ull_slave_ticker_cb+0x94>)
	mfy.param = &p;
   19098:	4b1c      	ldr	r3, [pc, #112]	; (1910c <ull_slave_ticker_cb+0x98>)
	p.ticks_at_expire = ticks_at_expire;
   1909a:	6035      	str	r5, [r6, #0]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1909c:	2200      	movs	r2, #0
	p.param = &conn->lll;
   1909e:	f104 0c1c 	add.w	ip, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   190a2:	4611      	mov	r1, r2
   190a4:	2001      	movs	r0, #1
	mfy.param = &p;
   190a6:	609e      	str	r6, [r3, #8]
	p.remainder = remainder;
   190a8:	f8c6 8004 	str.w	r8, [r6, #4]
	p.lazy = lazy;
   190ac:	8137      	strh	r7, [r6, #8]
	p.param = &conn->lll;
   190ae:	f8c6 c00c 	str.w	ip, [r6, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   190b2:	f7f7 fcb1 	bl	10a18 <mayfly_enqueue>
	LL_ASSERT(!err);
   190b6:	b940      	cbnz	r0, 190ca <ull_slave_ticker_cb+0x56>
	ull_conn_tx_demux(UINT8_MAX);
   190b8:	20ff      	movs	r0, #255	; 0xff
   190ba:	f7ff f9dd 	bl	18478 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   190be:	4620      	mov	r0, r4
   190c0:	21ff      	movs	r1, #255	; 0xff
}
   190c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   190c6:	f7ff bc2f 	b.w	18928 <ull_conn_tx_lll_enqueue>
	LL_ASSERT(!err);
   190ca:	4a11      	ldr	r2, [pc, #68]	; (19110 <ull_slave_ticker_cb+0x9c>)
   190cc:	4911      	ldr	r1, [pc, #68]	; (19114 <ull_slave_ticker_cb+0xa0>)
   190ce:	4812      	ldr	r0, [pc, #72]	; (19118 <ull_slave_ticker_cb+0xa4>)
   190d0:	f240 1387 	movw	r3, #391	; 0x187
   190d4:	f007 fab4 	bl	20640 <printk>
   190d8:	4040      	eors	r0, r0
   190da:	f380 8811 	msr	BASEPRI, r0
   190de:	f04f 0003 	mov.w	r0, #3
   190e2:	df02      	svc	2
   190e4:	e7e8      	b.n	190b8 <ull_slave_ticker_cb+0x44>
	LL_ASSERT(ref);
   190e6:	4a0a      	ldr	r2, [pc, #40]	; (19110 <ull_slave_ticker_cb+0x9c>)
   190e8:	490c      	ldr	r1, [pc, #48]	; (1911c <ull_slave_ticker_cb+0xa8>)
   190ea:	480b      	ldr	r0, [pc, #44]	; (19118 <ull_slave_ticker_cb+0xa4>)
   190ec:	f240 137b 	movw	r3, #379	; 0x17b
   190f0:	f007 faa6 	bl	20640 <printk>
   190f4:	4040      	eors	r0, r0
   190f6:	f380 8811 	msr	BASEPRI, r0
   190fa:	f04f 0003 	mov.w	r0, #3
   190fe:	df02      	svc	2
   19100:	e7c9      	b.n	19096 <ull_slave_ticker_cb+0x22>
}
   19102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19106:	bf00      	nop
   19108:	20003d64 	.word	0x20003d64
   1910c:	200005a8 	.word	0x200005a8
   19110:	0002762c 	.word	0x0002762c
   19114:	0002717c 	.word	0x0002717c
   19118:	00026ecc 	.word	0x00026ecc
   1911c:	000272f0 	.word	0x000272f0

00019120 <ll_start_enc_req_send>:
{
   19120:	b570      	push	{r4, r5, r6, lr}
   19122:	460e      	mov	r6, r1
   19124:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   19126:	f7fd fa53 	bl	165d0 <ll_connected_get>
	if (!conn) {
   1912a:	2800      	cmp	r0, #0
   1912c:	d040      	beq.n	191b0 <ll_start_enc_req_send+0x90>
	if (error_code) {
   1912e:	4604      	mov	r4, r0
   19130:	b95e      	cbnz	r6, 1914a <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   19132:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   19136:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1913a:	429a      	cmp	r2, r3
   1913c:	d003      	beq.n	19146 <ll_start_enc_req_send+0x26>
   1913e:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   19142:	2b03      	cmp	r3, #3
   19144:	d026      	beq.n	19194 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   19146:	200c      	movs	r0, #12
}
   19148:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   1914a:	f890 0152 	ldrb.w	r0, [r0, #338]	; 0x152
   1914e:	f010 0004 	ands.w	r0, r0, #4
   19152:	d112      	bne.n	1917a <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   19154:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   19158:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1915c:	429a      	cmp	r2, r3
   1915e:	d0f2      	beq.n	19146 <ll_start_enc_req_send+0x26>
   19160:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   19164:	2b03      	cmp	r3, #3
   19166:	d1ee      	bne.n	19146 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   19168:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			conn->llcp.encryption.error_code = error_code;
   1916c:	f884 60ed 	strb.w	r6, [r4, #237]	; 0xed
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   19170:	f360 0301 	bfi	r3, r0, #0, #2
   19174:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
}
   19178:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   1917a:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
			if (conn->llcp_terminate.ack !=
   1917e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
   19182:	4293      	cmp	r3, r2
   19184:	d1df      	bne.n	19146 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   19186:	3301      	adds	r3, #1
   19188:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
			conn->llcp_terminate.reason_own = error_code;
   1918c:	f884 612e 	strb.w	r6, [r4, #302]	; 0x12e
	return 0;
   19190:	2000      	movs	r0, #0
}
   19192:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   19194:	4629      	mov	r1, r5
   19196:	2210      	movs	r2, #16
   19198:	f200 105d 	addw	r0, r0, #349	; 0x15d
   1919c:	f009 fac0 	bl	22720 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   191a0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   191a4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
	return 0;
   191a8:	4630      	mov	r0, r6
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   191aa:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
}
   191ae:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   191b0:	2002      	movs	r0, #2
}
   191b2:	bd70      	pop	{r4, r5, r6, pc}

000191b4 <ticker_op_stop_scan_cb>:
}

static void ticker_op_stop_scan_cb(uint32_t status, void *params)
{
	/* TODO: */
}
   191b4:	4770      	bx	lr
   191b6:	bf00      	nop

000191b8 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *params)
{
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   191b8:	b900      	cbnz	r0, 191bc <ticker_op_cb+0x4>
   191ba:	4770      	bx	lr
{
   191bc:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   191be:	4a07      	ldr	r2, [pc, #28]	; (191dc <ticker_op_cb+0x24>)
   191c0:	4907      	ldr	r1, [pc, #28]	; (191e0 <ticker_op_cb+0x28>)
   191c2:	4808      	ldr	r0, [pc, #32]	; (191e4 <ticker_op_cb+0x2c>)
   191c4:	f240 3316 	movw	r3, #790	; 0x316
   191c8:	f007 fa3a 	bl	20640 <printk>
   191cc:	4040      	eors	r0, r0
   191ce:	f380 8811 	msr	BASEPRI, r0
   191d2:	f04f 0003 	mov.w	r0, #3
   191d6:	df02      	svc	2
}
   191d8:	bd08      	pop	{r3, pc}
   191da:	bf00      	nop
   191dc:	000276b4 	.word	0x000276b4
   191e0:	00027468 	.word	0x00027468
   191e4:	00026ecc 	.word	0x00026ecc

000191e8 <ull_master_ticker_cb>:
{
   191e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   191ec:	4605      	mov	r5, r0
   191ee:	4688      	mov	r8, r1
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   191f0:	4618      	mov	r0, r3
   191f2:	4629      	mov	r1, r5
{
   191f4:	461c      	mov	r4, r3
   191f6:	4617      	mov	r7, r2
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   191f8:	f7e8 f92e 	bl	1458 <ull_conn_llcp>
		if (ret) {
   191fc:	2800      	cmp	r0, #0
   191fe:	d141      	bne.n	19284 <ull_master_ticker_cb+0x9c>
   19200:	7c23      	ldrb	r3, [r4, #16]
   19202:	3301      	adds	r3, #1
   19204:	b2db      	uxtb	r3, r3
   19206:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   19208:	b373      	cbz	r3, 19268 <ull_master_ticker_cb+0x80>
	ull_conn_tx_demux(1);
   1920a:	2001      	movs	r0, #1
   1920c:	f7ff f934 	bl	18478 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 1);
   19210:	2101      	movs	r1, #1
   19212:	4620      	mov	r0, r4
   19214:	f7ff fb88 	bl	18928 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   19218:	4e1b      	ldr	r6, [pc, #108]	; (19288 <ull_master_ticker_cb+0xa0>)
	mfy.param = &p;
   1921a:	4b1c      	ldr	r3, [pc, #112]	; (1928c <ull_master_ticker_cb+0xa4>)
	p.ticks_at_expire = ticks_at_expire;
   1921c:	6035      	str	r5, [r6, #0]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1921e:	2200      	movs	r2, #0
	p.param = &conn->lll;
   19220:	f104 0c1c 	add.w	ip, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19224:	4611      	mov	r1, r2
   19226:	2001      	movs	r0, #1
	mfy.param = &p;
   19228:	609e      	str	r6, [r3, #8]
	p.remainder = remainder;
   1922a:	f8c6 8004 	str.w	r8, [r6, #4]
	p.lazy = lazy;
   1922e:	8137      	strh	r7, [r6, #8]
	p.param = &conn->lll;
   19230:	f8c6 c00c 	str.w	ip, [r6, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19234:	f7f7 fbf0 	bl	10a18 <mayfly_enqueue>
	LL_ASSERT(!err);
   19238:	b940      	cbnz	r0, 1924c <ull_master_ticker_cb+0x64>
	ull_conn_tx_demux(UINT8_MAX);
   1923a:	20ff      	movs	r0, #255	; 0xff
   1923c:	f7ff f91c 	bl	18478 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   19240:	4620      	mov	r0, r4
   19242:	21ff      	movs	r1, #255	; 0xff
}
   19244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   19248:	f7ff bb6e 	b.w	18928 <ull_conn_tx_lll_enqueue>
	LL_ASSERT(!err);
   1924c:	4a10      	ldr	r2, [pc, #64]	; (19290 <ull_master_ticker_cb+0xa8>)
   1924e:	4911      	ldr	r1, [pc, #68]	; (19294 <ull_master_ticker_cb+0xac>)
   19250:	4811      	ldr	r0, [pc, #68]	; (19298 <ull_master_ticker_cb+0xb0>)
   19252:	f240 3302 	movw	r3, #770	; 0x302
   19256:	f007 f9f3 	bl	20640 <printk>
   1925a:	4040      	eors	r0, r0
   1925c:	f380 8811 	msr	BASEPRI, r0
   19260:	f04f 0003 	mov.w	r0, #3
   19264:	df02      	svc	2
   19266:	e7e8      	b.n	1923a <ull_master_ticker_cb+0x52>
	LL_ASSERT(ref);
   19268:	4a09      	ldr	r2, [pc, #36]	; (19290 <ull_master_ticker_cb+0xa8>)
   1926a:	490c      	ldr	r1, [pc, #48]	; (1929c <ull_master_ticker_cb+0xb4>)
   1926c:	480a      	ldr	r0, [pc, #40]	; (19298 <ull_master_ticker_cb+0xb0>)
   1926e:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   19272:	f007 f9e5 	bl	20640 <printk>
   19276:	4040      	eors	r0, r0
   19278:	f380 8811 	msr	BASEPRI, r0
   1927c:	f04f 0003 	mov.w	r0, #3
   19280:	df02      	svc	2
   19282:	e7c2      	b.n	1920a <ull_master_ticker_cb+0x22>
}
   19284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19288:	20003d7c 	.word	0x20003d7c
   1928c:	200005b8 	.word	0x200005b8
   19290:	000276b4 	.word	0x000276b4
   19294:	0002717c 	.word	0x0002717c
   19298:	00026ecc 	.word	0x00026ecc
   1929c:	000272f0 	.word	0x000272f0

000192a0 <ll_create_connection>:
{
   192a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192a4:	b089      	sub	sp, #36	; 0x24
   192a6:	4680      	mov	r8, r0
   192a8:	9303      	str	r3, [sp, #12]
   192aa:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   192ae:	9302      	str	r3, [sp, #8]
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   192b0:	2000      	movs	r0, #0
{
   192b2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
   192b6:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
   192ba:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
   192be:	9304      	str	r3, [sp, #16]
   192c0:	4689      	mov	r9, r1
   192c2:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   192c4:	f7fc fd40 	bl	15d48 <ull_scan_is_disabled_get>
	if (!scan) {
   192c8:	2800      	cmp	r0, #0
   192ca:	f000 819e 	beq.w	1960a <ll_create_connection+0x36a>
	if (lll->conn) {
   192ce:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
   192d2:	4605      	mov	r5, r0
   192d4:	f1bb 0f00 	cmp.w	fp, #0
   192d8:	d02e      	beq.n	19338 <ll_create_connection+0x98>
	ull_filter_scan_update(filter_policy);
   192da:	4630      	mov	r0, r6
   192dc:	f000 fdfa 	bl	19ed4 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   192e0:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
   192e4:	22ff      	movs	r2, #255	; 0xff
	lll->rpa_gen = 0;
   192e6:	f36f 0300 	bfc	r3, #0, #1
   192ea:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
   192ee:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   192f2:	b1ae      	cbz	r6, 19320 <ll_create_connection+0x80>
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   192f4:	f1aa 0302 	sub.w	r3, sl, #2
   192f8:	2b01      	cmp	r3, #1
   192fa:	f240 8150 	bls.w	1959e <ll_create_connection+0x2fe>
	scan->own_addr_type = own_addr_type;
   192fe:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   19302:	f36a 0342 	bfi	r3, sl, #1, #2
   19306:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	err = lll_clock_wait();
   1930a:	f002 f871 	bl	1b3f0 <lll_clock_wait>
	if (err) {
   1930e:	2800      	cmp	r0, #0
   19310:	f040 8151 	bne.w	195b6 <ll_create_connection+0x316>
	return ull_scan_enable(scan);
   19314:	4628      	mov	r0, r5
   19316:	f7e7 ffdf 	bl	12d8 <ull_scan_enable>
}
   1931a:	b009      	add	sp, #36	; 0x24
   1931c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   19320:	f001 fc60 	bl	1abe4 <ull_filter_lll_rl_enabled>
   19324:	2800      	cmp	r0, #0
   19326:	d0e5      	beq.n	192f4 <ll_create_connection+0x54>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
   19328:	9803      	ldr	r0, [sp, #12]
   1932a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1932c:	4632      	mov	r2, r6
   1932e:	f000 ffb3 	bl	1a298 <ull_filter_rl_find>
   19332:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
   19336:	e7dd      	b.n	192f4 <ll_create_connection+0x54>
	link = ll_rx_link_alloc();
   19338:	f7fb fd9a 	bl	14e70 <ll_rx_link_alloc>
	if (!link) {
   1933c:	9005      	str	r0, [sp, #20]
   1933e:	2800      	cmp	r0, #0
   19340:	f000 8178 	beq.w	19634 <ll_create_connection+0x394>
	conn = ll_conn_acquire();
   19344:	f7fd f928 	bl	16598 <ll_conn_acquire>
	if (!conn) {
   19348:	4604      	mov	r4, r0
   1934a:	2800      	cmp	r0, #0
   1934c:	f000 8174 	beq.w	19638 <ll_create_connection+0x398>
	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
   19350:	4642      	mov	r2, r8
   19352:	464b      	mov	r3, r9
   19354:	4659      	mov	r1, fp
   19356:	f105 001c 	add.w	r0, r5, #28
   1935a:	9600      	str	r6, [sp, #0]
   1935c:	f7e7 ff94 	bl	1288 <ull_scan_params_set>
	lll->adv_addr_type = peer_addr_type;
   19360:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   19364:	9a03      	ldr	r2, [sp, #12]
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   19366:	9912      	ldr	r1, [sp, #72]	; 0x48
	lll->adv_addr_type = peer_addr_type;
   19368:	f362 1345 	bfi	r3, r2, #5, #1
   1936c:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   19370:	2206      	movs	r2, #6
   19372:	f105 003b 	add.w	r0, r5, #59	; 0x3b
   19376:	f009 f9d3 	bl	22720 <memcpy>
	lll->conn_timeout = timeout;
   1937a:	862f      	strh	r7, [r5, #48]	; 0x30
	lll->conn_ticks_slot = 0; /* TODO: */
   1937c:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
	err = util_aa_le32(conn_lll->access_addr);
   19380:	f104 0024 	add.w	r0, r4, #36	; 0x24
   19384:	f7f7 fc56 	bl	10c34 <util_aa_le32>
	conn_lll = &conn->lll;
   19388:	f104 081c 	add.w	r8, r4, #28
	LL_ASSERT(!err);
   1938c:	2800      	cmp	r0, #0
   1938e:	f040 8140 	bne.w	19612 <ll_create_connection+0x372>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
   19392:	2103      	movs	r1, #3
   19394:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19398:	f001 fe3e 	bl	1b018 <lll_csrand_get>
	conn_lll->interval = interval;
   1939c:	9b02      	ldr	r3, [sp, #8]
	if (!conn_lll->link_tx_free) {
   1939e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	conn_lll->latency = latency;
   193a0:	9a04      	ldr	r2, [sp, #16]
	conn_lll->interval = interval;
   193a2:	85e3      	strh	r3, [r4, #46]	; 0x2e
	conn_lll->handle = 0xFFFF;
   193a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
   193a8:	8622      	strh	r2, [r4, #48]	; 0x30
	conn_lll->handle = 0xFFFF;
   193aa:	85a3      	strh	r3, [r4, #44]	; 0x2c
	if (!conn_lll->link_tx_free) {
   193ac:	2800      	cmp	r0, #0
   193ae:	f000 813d 	beq.w	1962c <ll_create_connection+0x38c>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   193b2:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   193b6:	f104 0168 	add.w	r1, r4, #104	; 0x68
   193ba:	f7f7 faab 	bl	10914 <memq_init>
	conn_lll->phy_tx = BIT(0);
   193be:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
   193c2:	49ae      	ldr	r1, [pc, #696]	; (1967c <ll_create_connection+0x3dc>)
	conn_lll->sn = 0;
   193c4:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
	conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   193c8:	48ad      	ldr	r0, [pc, #692]	; (19680 <ll_create_connection+0x3e0>)
   193ca:	6620      	str	r0, [r4, #96]	; 0x60
	conn_lll->phy_tx = BIT(0);
   193cc:	400b      	ands	r3, r1
   193ce:	f443 7388 	orr.w	r3, r3, #272	; 0x110
	conn_lll->link_tx_free = NULL;
   193d2:	f04f 0900 	mov.w	r9, #0
	conn_lll->sn = 0;
   193d6:	f022 0207 	bic.w	r2, r2, #7
	conn_lll->phy_tx = BIT(0);
   193da:	f043 0301 	orr.w	r3, r3, #1
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   193de:	f04f 111b 	mov.w	r1, #1769499	; 0x1b001b
	conn_lll->sn = 0;
   193e2:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
	conn_lll->phy_tx = BIT(0);
   193e6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   193ea:	65e1      	str	r1, [r4, #92]	; 0x5c
	conn_lll->link_tx_free = NULL;
   193ec:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
	conn_lll->packet_tx_head_len = 0;
   193f0:	f8a4 907c 	strh.w	r9, [r4, #124]	; 0x7c
	conn_lll->latency_prepare = 0;
   193f4:	f8a4 9032 	strh.w	r9, [r4, #50]	; 0x32
	conn_lll->latency_event = 0;
   193f8:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
   193fc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   19400:	f000 fa84 	bl	1990c <ull_chan_map_get>
   19404:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   19408:	f360 0305 	bfi	r3, r0, #0, #6
   1940c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	lll_csrand_get(&hop, sizeof(uint8_t));
   19410:	2101      	movs	r1, #1
   19412:	f10d 001f 	add.w	r0, sp, #31
   19416:	f001 fdff 	bl	1b018 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
   1941a:	f89d e01f 	ldrb.w	lr, [sp, #31]
   1941e:	4b99      	ldr	r3, [pc, #612]	; (19684 <ll_create_connection+0x3e4>)
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   19420:	8e20      	ldrh	r0, [r4, #48]	; 0x30
	conn_lll->data_chan_sel = 0;
   19422:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
	conn_lll->data_chan_use = 0;
   19426:	f884 903f 	strb.w	r9, [r4, #63]	; 0x3f
	conn_lll->data_chan_hop = 5 + (hop % 12);
   1942a:	fba3 230e 	umull	r2, r3, r3, lr
   1942e:	08db      	lsrs	r3, r3, #3
   19430:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   19434:	ebae 0e83 	sub.w	lr, lr, r3, lsl #2
	conn_interval_us = (uint32_t)interval * 1250U;
   19438:	9b02      	ldr	r3, [sp, #8]
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   1943a:	4a93      	ldr	r2, [pc, #588]	; (19688 <ll_create_connection+0x3e8>)
	conn->supervision_expire = 0U;
   1943c:	f8a4 90c8 	strh.w	r9, [r4, #200]	; 0xc8
	conn_interval_us = (uint32_t)interval * 1250U;
   19440:	f240 41e2 	movw	r1, #1250	; 0x4e2
   19444:	fb01 f103 	mul.w	r1, r1, r3
	conn_lll->data_chan_hop = 5 + (hop % 12);
   19448:	f10e 0e05 	add.w	lr, lr, #5
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   1944c:	1e4b      	subs	r3, r1, #1
	conn_lll->data_chan_hop = 5 + (hop % 12);
   1944e:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   19452:	f242 7e10 	movw	lr, #10000	; 0x2710
   19456:	fb0e 3307 	mla	r3, lr, r7, r3
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   1945a:	f8df e24c 	ldr.w	lr, [pc, #588]	; 196a8 <ll_create_connection+0x408>
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   1945e:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   19462:	440a      	add	r2, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   19464:	448e      	add	lr, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   19466:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   1946a:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   1946e:	fbbe f1f1 	udiv	r1, lr, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   19472:	b293      	uxth	r3, r2
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   19474:	f100 0e06 	add.w	lr, r0, #6
	conn_lll->data_chan_sel = 0;
   19478:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   1947c:	f8a4 10ca 	strh.w	r1, [r4, #202]	; 0xca
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   19480:	4573      	cmp	r3, lr
	conn->connect_expire = 6U;
   19482:	f04f 0106 	mov.w	r1, #6
	conn->procedure_expire = 0U;
   19486:	f8a4 90cc 	strh.w	r9, [r4, #204]	; 0xcc
	conn->apto_expire = 0U;
   1948a:	f8a4 90d4 	strh.w	r9, [r4, #212]	; 0xd4
	conn->appto_expire = 0U;
   1948e:	f8a4 90d0 	strh.w	r9, [r4, #208]	; 0xd0
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   19492:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
	conn_lll->data_chan_sel = 0;
   19496:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
	conn->connect_expire = 6U;
   1949a:	f8a4 10c4 	strh.w	r1, [r4, #196]	; 0xc4
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   1949e:	dd02      	ble.n	194a6 <ll_create_connection+0x206>
			     (conn->apto_reload - (conn_lll->latency + 6)) :
   194a0:	1a18      	subs	r0, r3, r0
   194a2:	3806      	subs	r0, #6
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   194a4:	b283      	uxth	r3, r0
	conn->llcp_terminate.node_rx.hdr.link = link;
   194a6:	9805      	ldr	r0, [sp, #20]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   194a8:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   194ac:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	conn->common.fex_valid = 0U;
   194b0:	f894 e0dc 	ldrb.w	lr, [r4, #220]	; 0xdc
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   194b4:	f894 1126 	ldrb.w	r1, [r4, #294]	; 0x126
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   194b8:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
	conn->llcp_conn_param.disabled = 0U;
   194bc:	f894 c172 	ldrb.w	ip, [r4, #370]	; 0x172
	conn->llcp_terminate.node_rx.hdr.link = link;
   194c0:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
	conn->llcp_length.disabled = 0U;
   194c4:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   194c8:	f04f 0900 	mov.w	r9, #0
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   194cc:	f023 0307 	bic.w	r3, r3, #7
	conn->common.fex_valid = 0U;
   194d0:	f02e 0e03 	bic.w	lr, lr, #3
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   194d4:	f021 0103 	bic.w	r1, r1, #3
	conn->llcp_conn_param.disabled = 0U;
   194d8:	f369 1c04 	bfi	ip, r9, #4, #1
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   194dc:	f022 0218 	bic.w	r2, r2, #24
	conn->llcp_length.disabled = 0U;
   194e0:	f369 00c3 	bfi	r0, r9, #3, #1
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   194e4:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	conn->llcp_feature.features_conn = LL_FEAT;
   194e8:	4b68      	ldr	r3, [pc, #416]	; (1968c <ll_create_connection+0x3ec>)
	conn->common.fex_valid = 0U;
   194ea:	f884 e0dc 	strb.w	lr, [r4, #220]	; 0xdc
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   194ee:	f884 1126 	strb.w	r1, [r4, #294]	; 0x126
	conn->llcp_conn_param.disabled = 0U;
   194f2:	f884 c172 	strb.w	ip, [r4, #370]	; 0x172
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   194f6:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
	conn->llcp_feature.features_conn = LL_FEAT;
   194fa:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   194fe:	f8a4 90e8 	strh.w	r9, [r4, #232]	; 0xe8
   19502:	f884 90ea 	strb.w	r9, [r4, #234]	; 0xea
	conn->llcp_rx = NULL;
   19506:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   1950a:	f8a4 9104 	strh.w	r9, [r4, #260]	; 0x104
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   1950e:	f8a4 9118 	strh.w	r9, [r4, #280]	; 0x118
	conn->llcp_feature.features_peer = 0;
   19512:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
	conn->llcp_version.req = conn->llcp_version.ack = 0;
   19516:	f8a4 9124 	strh.w	r9, [r4, #292]	; 0x124
	conn->llcp_terminate.reason_peer = 0U;
   1951a:	f884 912f 	strb.w	r9, [r4, #303]	; 0x12f
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   1951e:	f8a4 9150 	strh.w	r9, [r4, #336]	; 0x150
	conn->llcp_conn_param.req = 0U;
   19522:	f8a4 9170 	strh.w	r9, [r4, #368]	; 0x170
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
   19526:	f8a4 9198 	strh.w	r9, [r4, #408]	; 0x198
	conn->llcp_length.cache.tx_octets = 0U;
   1952a:	f8a4 91a4 	strh.w	r9, [r4, #420]	; 0x1a4
	conn->llcp_length.disabled = 0U;
   1952e:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
   19532:	f7fd fb1f 	bl	16b74 <ull_conn_default_tx_octets_get>
   19536:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
	conn->default_tx_time = ull_conn_default_tx_time_get();
   1953a:	f7fd fb21 	bl	16b80 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   1953e:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   19542:	4b53      	ldr	r3, [pc, #332]	; (19690 <ll_create_connection+0x3f0>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
   19544:	f8a4 00d8 	strh.w	r0, [r4, #216]	; 0xd8
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   19548:	4013      	ands	r3, r2
   1954a:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   1954e:	f7fd fb1d 	bl	16b8c <ull_conn_default_phy_tx_get>
   19552:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   19556:	f360 0302 	bfi	r3, r0, #0, #3
   1955a:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   1955e:	f7fd fb1b 	bl	16b98 <ull_conn_default_phy_rx_get>
	conn->phy_pref_flags = 0U;
   19562:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	conn->tx_data = conn->tx_data_last = 0;
   19566:	f8c4 91c0 	str.w	r9, [r4, #448]	; 0x1c0
	conn->phy_pref_flags = 0U;
   1956a:	0103      	lsls	r3, r0, #4
   1956c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   19570:	f022 0278 	bic.w	r2, r2, #120	; 0x78
   19574:	4313      	orrs	r3, r2
   19576:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   1957a:	e9c4 996e 	strd	r9, r9, [r4, #440]	; 0x1b8
   1957e:	e9c4 996c 	strd	r9, r9, [r4, #432]	; 0x1b0
	lll->conn = conn_lll;
   19582:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   19586:	f894 3020 	ldrb.w	r3, [r4, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   1958a:	f8c4 9018 	str.w	r9, [r4, #24]
   1958e:	f369 0300 	bfi	r3, r9, #0, #1
   19592:	f8c4 9014 	str.w	r9, [r4, #20]
	hdr->parent = parent;
   19596:	61e4      	str	r4, [r4, #28]
	hdr->is_stop = 0U;
   19598:	f884 3020 	strb.w	r3, [r4, #32]
}
   1959c:	e69d      	b.n	192da <ll_create_connection+0x3a>
		ull_filter_rpa_update(false);
   1959e:	2000      	movs	r0, #0
   195a0:	f000 fd42 	bl	1a028 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   195a4:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   195a8:	f043 0301 	orr.w	r3, r3, #1
		own_addr_type &= 0x1;
   195ac:	f00a 0a01 	and.w	sl, sl, #1
		lll->rpa_gen = 1;
   195b0:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   195b4:	e6a3      	b.n	192fe <ll_create_connection+0x5e>

static inline void conn_release(struct ll_scan_set *scan)
{
	struct lll_conn *lll = scan->lll.conn;
   195b6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	struct node_rx_pdu *cc;
	struct ll_conn *conn;
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   195b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   195ba:	b163      	cbz	r3, 195d6 <ll_create_connection+0x336>
   195bc:	4a35      	ldr	r2, [pc, #212]	; (19694 <ll_create_connection+0x3f4>)
   195be:	4936      	ldr	r1, [pc, #216]	; (19698 <ll_create_connection+0x3f8>)
   195c0:	4836      	ldr	r0, [pc, #216]	; (1969c <ll_create_connection+0x3fc>)
   195c2:	f44f 7348 	mov.w	r3, #800	; 0x320
   195c6:	f007 f83b 	bl	20640 <printk>
   195ca:	4040      	eors	r0, r0
   195cc:	f380 8811 	msr	BASEPRI, r0
   195d0:	f04f 0003 	mov.w	r0, #3
   195d4:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   195d6:	f104 0150 	add.w	r1, r4, #80	; 0x50
   195da:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   195de:	f7f7 f99d 	bl	1091c <memq_deinit>
	LL_ASSERT(link);
   195e2:	4606      	mov	r6, r0
   195e4:	2800      	cmp	r0, #0
   195e6:	d03a      	beq.n	1965e <ll_create_connection+0x3be>
	lll->link_tx_free = link;

	conn = (void *)HDR_LLL2EVT(lll);
   195e8:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
   195ea:	65e6      	str	r6, [r4, #92]	; 0x5c

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
   195ec:	f8d7 4130 	ldr.w	r4, [r7, #304]	; 0x130
	LL_ASSERT(link);
   195f0:	b33c      	cbz	r4, 19642 <ll_create_connection+0x3a2>

	ll_rx_link_release(link);
   195f2:	4620      	mov	r0, r4
   195f4:	f7fb fc42 	bl	14e7c <ll_rx_link_release>

	ll_conn_release(conn);
   195f8:	4638      	mov	r0, r7
   195fa:	f7fc ffd3 	bl	165a4 <ll_conn_release>
	scan->lll.conn = NULL;
   195fe:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
   19600:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
   19602:	626b      	str	r3, [r5, #36]	; 0x24
}
   19604:	b009      	add	sp, #36	; 0x24
   19606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1960a:	200c      	movs	r0, #12
}
   1960c:	b009      	add	sp, #36	; 0x24
   1960e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
   19612:	4a20      	ldr	r2, [pc, #128]	; (19694 <ll_create_connection+0x3f4>)
   19614:	4922      	ldr	r1, [pc, #136]	; (196a0 <ll_create_connection+0x400>)
   19616:	4821      	ldr	r0, [pc, #132]	; (1969c <ll_create_connection+0x3fc>)
   19618:	2396      	movs	r3, #150	; 0x96
   1961a:	f007 f811 	bl	20640 <printk>
   1961e:	4040      	eors	r0, r0
   19620:	f380 8811 	msr	BASEPRI, r0
   19624:	f04f 0003 	mov.w	r0, #3
   19628:	df02      	svc	2
   1962a:	e6b2      	b.n	19392 <ll_create_connection+0xf2>
		conn_lll->link_tx_free = &conn_lll->link_tx;
   1962c:	f104 0070 	add.w	r0, r4, #112	; 0x70
   19630:	67a0      	str	r0, [r4, #120]	; 0x78
   19632:	e6be      	b.n	193b2 <ll_create_connection+0x112>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19634:	2007      	movs	r0, #7
   19636:	e670      	b.n	1931a <ll_create_connection+0x7a>
		ll_rx_link_release(link);
   19638:	9805      	ldr	r0, [sp, #20]
   1963a:	f7fb fc1f 	bl	14e7c <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1963e:	2007      	movs	r0, #7
   19640:	e66b      	b.n	1931a <ll_create_connection+0x7a>
	LL_ASSERT(link);
   19642:	4a14      	ldr	r2, [pc, #80]	; (19694 <ll_create_connection+0x3f4>)
   19644:	4917      	ldr	r1, [pc, #92]	; (196a4 <ll_create_connection+0x404>)
   19646:	4815      	ldr	r0, [pc, #84]	; (1969c <ll_create_connection+0x3fc>)
   19648:	f240 3329 	movw	r3, #809	; 0x329
   1964c:	f006 fff8 	bl	20640 <printk>
   19650:	4040      	eors	r0, r0
   19652:	f380 8811 	msr	BASEPRI, r0
   19656:	f04f 0003 	mov.w	r0, #3
   1965a:	df02      	svc	2
   1965c:	e7c9      	b.n	195f2 <ll_create_connection+0x352>
	LL_ASSERT(link);
   1965e:	4a0d      	ldr	r2, [pc, #52]	; (19694 <ll_create_connection+0x3f4>)
   19660:	4910      	ldr	r1, [pc, #64]	; (196a4 <ll_create_connection+0x404>)
   19662:	480e      	ldr	r0, [pc, #56]	; (1969c <ll_create_connection+0x3fc>)
   19664:	f240 3322 	movw	r3, #802	; 0x322
   19668:	f006 ffea 	bl	20640 <printk>
   1966c:	4040      	eors	r0, r0
   1966e:	f380 8811 	msr	BASEPRI, r0
   19672:	f04f 0003 	mov.w	r0, #3
   19676:	df02      	svc	2
   19678:	e7b6      	b.n	195e8 <ll_create_connection+0x348>
   1967a:	bf00      	nop
   1967c:	fffff880 	.word	0xfffff880
   19680:	01480148 	.word	0x01480148
   19684:	aaaaaaab 	.word	0xaaaaaaab
   19688:	01c9c37f 	.word	0x01c9c37f
   1968c:	000149ff 	.word	0x000149ff
   19690:	f6ff0000 	.word	0xf6ff0000
   19694:	000276b4 	.word	0x000276b4
   19698:	00027360 	.word	0x00027360
   1969c:	00026ecc 	.word	0x00026ecc
   196a0:	0002717c 	.word	0x0002717c
   196a4:	00027460 	.word	0x00027460
   196a8:	026259ff 	.word	0x026259ff

000196ac <ll_connect_disable>:
{
   196ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   196b0:	4607      	mov	r7, r0
	scan = ull_scan_is_enabled_get(0);
   196b2:	2000      	movs	r0, #0
   196b4:	f7fc fb3a 	bl	15d2c <ull_scan_is_enabled_get>
	if (!scan) {
   196b8:	b328      	cbz	r0, 19706 <ll_connect_disable+0x5a>
	conn_lll = scan->lll.conn;
   196ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
	if (!conn_lll) {
   196bc:	4604      	mov	r4, r0
   196be:	b316      	cbz	r6, 19706 <ll_connect_disable+0x5a>
	status = ull_scan_disable(0, scan);
   196c0:	4601      	mov	r1, r0
   196c2:	2000      	movs	r0, #0
   196c4:	f7fc fa3a 	bl	15b3c <ull_scan_disable>
	if (!status) {
   196c8:	4605      	mov	r5, r0
   196ca:	b9c8      	cbnz	r0, 19700 <ll_connect_disable+0x54>
		struct ll_conn *conn = (void *)HDR_LLL2EVT(conn_lll);
   196cc:	6836      	ldr	r6, [r6, #0]
		link = cc->hdr.link;
   196ce:	f8d6 8130 	ldr.w	r8, [r6, #304]	; 0x130
		cc = (void *)&conn->llcp_terminate.node_rx;
   196d2:	f506 7998 	add.w	r9, r6, #304	; 0x130
		LL_ASSERT(link);
   196d6:	f1b8 0f00 	cmp.w	r8, #0
   196da:	d018      	beq.n	1970e <ll_connect_disable+0x62>
		ll_rx_link_release(link);
   196dc:	4640      	mov	r0, r8
   196de:	f7fb fbcd 	bl	14e7c <ll_rx_link_release>
		ftr->param = &scan->lll;
   196e2:	341c      	adds	r4, #28
		cc->hdr.type = NODE_RX_TYPE_CONNECTION;
   196e4:	2109      	movs	r1, #9
		cc->hdr.handle = 0xffff;
   196e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
		*((uint8_t *)cc->pdu) = BT_HCI_ERR_UNKNOWN_CONN_ID;
   196ea:	2302      	movs	r3, #2
		ftr->param = &scan->lll;
   196ec:	f8c6 4138 	str.w	r4, [r6, #312]	; 0x138
		cc->hdr.type = NODE_RX_TYPE_CONNECTION;
   196f0:	f886 1134 	strb.w	r1, [r6, #308]	; 0x134
		cc->hdr.handle = 0xffff;
   196f4:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
		*((uint8_t *)cc->pdu) = BT_HCI_ERR_UNKNOWN_CONN_ID;
   196f8:	f886 314c 	strb.w	r3, [r6, #332]	; 0x14c
		*rx = cc;
   196fc:	f8c7 9000 	str.w	r9, [r7]
}
   19700:	4628      	mov	r0, r5
   19702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19706:	250c      	movs	r5, #12
}
   19708:	4628      	mov	r0, r5
   1970a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   1970e:	4a07      	ldr	r2, [pc, #28]	; (1972c <ll_connect_disable+0x80>)
   19710:	4907      	ldr	r1, [pc, #28]	; (19730 <ll_connect_disable+0x84>)
   19712:	4808      	ldr	r0, [pc, #32]	; (19734 <ll_connect_disable+0x88>)
   19714:	f44f 73c8 	mov.w	r3, #400	; 0x190
   19718:	f006 ff92 	bl	20640 <printk>
   1971c:	4040      	eors	r0, r0
   1971e:	f380 8811 	msr	BASEPRI, r0
   19722:	f04f 0003 	mov.w	r0, #3
   19726:	df02      	svc	2
   19728:	e7d8      	b.n	196dc <ll_connect_disable+0x30>
   1972a:	bf00      	nop
   1972c:	000276b4 	.word	0x000276b4
   19730:	00027460 	.word	0x00027460
   19734:	00026ecc 	.word	0x00026ecc

00019738 <ll_chm_update>:
{
   19738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1973a:	4606      	mov	r6, r0
	ull_chan_map_set(chm);
   1973c:	f000 f8f2 	bl	19924 <ull_chan_map_set>
	while (handle--) {
   19740:	2501      	movs	r5, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   19742:	2702      	movs	r7, #2
		conn = ll_connected_get(handle);
   19744:	4628      	mov	r0, r5
   19746:	f7fc ff43 	bl	165d0 <ll_connected_get>
		if (!conn || conn->lll.role) {
   1974a:	4604      	mov	r4, r0
   1974c:	b1d0      	cbz	r0, 19784 <ll_chm_update+0x4c>
   1974e:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   19752:	2b00      	cmp	r3, #0
   19754:	db16      	blt.n	19784 <ll_chm_update+0x4c>
		ret = ull_conn_llcp_req(conn);
   19756:	f7ff fc17 	bl	18f88 <ull_conn_llcp_req>
   1975a:	4603      	mov	r3, r0
		memcpy(conn->llcp.chan_map.chm, chm,
   1975c:	2205      	movs	r2, #5
   1975e:	4631      	mov	r1, r6
   19760:	f104 00ed 	add.w	r0, r4, #237	; 0xed
		if (ret) {
   19764:	b993      	cbnz	r3, 1978c <ll_chm_update+0x54>
		memcpy(conn->llcp.chan_map.chm, chm,
   19766:	f008 ffdb 	bl	22720 <memcpy>
		conn->llcp.chan_map.initiate = 1U;
   1976a:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
		conn->llcp_req++;
   1976e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_CHAN_MAP;
   19772:	f884 70ea 	strb.w	r7, [r4, #234]	; 0xea
		conn->llcp.chan_map.initiate = 1U;
   19776:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_req++;
   1977a:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   1977c:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
		conn->llcp_req++;
   19780:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	while (handle--) {
   19784:	b10d      	cbz	r5, 1978a <ll_chm_update+0x52>
   19786:	2500      	movs	r5, #0
   19788:	e7dc      	b.n	19744 <ll_chm_update+0xc>
	return 0;
   1978a:	462b      	mov	r3, r5
}
   1978c:	4618      	mov	r0, r3
   1978e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019790 <ll_enc_req_send>:
{
   19790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19794:	4688      	mov	r8, r1
   19796:	4616      	mov	r6, r2
   19798:	4699      	mov	r9, r3
   1979a:	4607      	mov	r7, r0
	conn = ll_connected_get(handle);
   1979c:	f7fc ff18 	bl	165d0 <ll_connected_get>
	if (!conn) {
   197a0:	2800      	cmp	r0, #0
   197a2:	d063      	beq.n	1986c <ll_enc_req_send+0xdc>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   197a4:	f890 2150 	ldrb.w	r2, [r0, #336]	; 0x150
   197a8:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   197ac:	429a      	cmp	r2, r3
   197ae:	4604      	mov	r4, r0
   197b0:	d13d      	bne.n	1982e <ll_enc_req_send+0x9e>
   197b2:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   197b6:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   197ba:	429a      	cmp	r2, r3
   197bc:	d003      	beq.n	197c6 <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   197be:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   197c2:	2b03      	cmp	r3, #3
   197c4:	d033      	beq.n	1982e <ll_enc_req_send+0x9e>
	tx = ll_tx_mem_acquire();
   197c6:	f7fc ff09 	bl	165dc <ll_tx_mem_acquire>
	if (tx) {
   197ca:	4605      	mov	r5, r0
   197cc:	b378      	cbz	r0, 1982e <ll_enc_req_send+0x9e>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   197ce:	4649      	mov	r1, r9
   197d0:	2210      	movs	r2, #16
   197d2:	f204 105d 	addw	r0, r4, #349	; 0x15d
   197d6:	f008 ffa3 	bl	22720 <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   197da:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   197de:	f013 0318 	ands.w	r3, r3, #24
   197e2:	d027      	beq.n	19834 <ll_enc_req_send+0xa4>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   197e4:	2b18      	cmp	r3, #24
   197e6:	d11f      	bne.n	19828 <ll_enc_req_send+0x98>
			memcpy(&conn->llcp_enc.rand[0], rand,
   197e8:	4641      	mov	r1, r8
   197ea:	2208      	movs	r2, #8
   197ec:	f204 1055 	addw	r0, r4, #341	; 0x155
   197f0:	f008 ff96 	bl	22720 <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   197f4:	7833      	ldrb	r3, [r6, #0]
   197f6:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
			conn->llcp_enc.ediv[1] = ediv[1];
   197fa:	7873      	ldrb	r3, [r6, #1]
   197fc:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   19800:	792b      	ldrb	r3, [r5, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   19802:	2101      	movs	r1, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   19804:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->llctrl.opcode =
   19808:	220a      	movs	r2, #10
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1980a:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1980c:	7169      	strb	r1, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   1980e:	71ea      	strb	r2, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   19810:	4638      	mov	r0, r7
   19812:	4629      	mov	r1, r5
   19814:	f7fc feee 	bl	165f4 <ll_tx_mem_enqueue>
   19818:	b930      	cbnz	r0, 19828 <ll_enc_req_send+0x98>
		conn->llcp_enc.req++;
   1981a:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
   1981e:	3301      	adds	r3, #1
   19820:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
}
   19824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   19828:	4628      	mov	r0, r5
   1982a:	f7fc fedd 	bl	165e8 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   1982e:	200c      	movs	r0, #12
}
   19830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   19834:	792b      	ldrb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   19836:	2203      	movs	r2, #3
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   19838:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->llctrl.opcode =
   1983c:	71ea      	strb	r2, [r5, #7]
			pdu_data_tx->len =
   1983e:	2017      	movs	r0, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   19840:	2208      	movs	r2, #8
   19842:	4641      	mov	r1, r8
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   19844:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   19846:	7168      	strb	r0, [r5, #5]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   19848:	18a8      	adds	r0, r5, r2
   1984a:	f008 ff69 	bl	22720 <memcpy>
			enc_req->ediv[0] = ediv[0];
   1984e:	7833      	ldrb	r3, [r6, #0]
   19850:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   19852:	7873      	ldrb	r3, [r6, #1]
   19854:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   19856:	2108      	movs	r1, #8
   19858:	f105 0012 	add.w	r0, r5, #18
   1985c:	f001 fbdc 	bl	1b018 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   19860:	2104      	movs	r1, #4
   19862:	f105 001a 	add.w	r0, r5, #26
   19866:	f001 fbd7 	bl	1b018 <lll_csrand_get>
   1986a:	e7d1      	b.n	19810 <ll_enc_req_send+0x80>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1986c:	2002      	movs	r0, #2
}
   1986e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19872:	bf00      	nop

00019874 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   19874:	6008      	str	r0, [r1, #0]
}
   19876:	4770      	bx	lr

00019878 <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   19878:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   1987a:	6802      	ldr	r2, [r0, #0]
	struct evt_hdr *conn_evt = HDR_LLL2EVT(lll->conn);
   1987c:	6899      	ldr	r1, [r3, #8]
{
   1987e:	b410      	push	{r4}
			      (ticks_slot_overhead + conn_evt->ticks_slot),
   19880:	680c      	ldr	r4, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   19882:	8a48      	ldrh	r0, [r1, #18]
   19884:	68e1      	ldr	r1, [r4, #12]
}
   19886:	bc10      	pop	{r4}
	after_mstr_offset_get(lll->conn->interval,
   19888:	3310      	adds	r3, #16
   1988a:	f7ea ba6d 	b.w	3d68 <after_mstr_offset_get>
   1988e:	bf00      	nop

00019890 <ull_sched_mfy_win_offset_use>:
{
   19890:	b510      	push	{r4, lr}
   19892:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   19894:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
   19898:	68c1      	ldr	r1, [r0, #12]
   1989a:	f500 7388 	add.w	r3, r0, #272	; 0x110
   1989e:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
   198a0:	f7ea fa62 	bl	3d68 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / 1250;
   198a4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   198a8:	4905      	ldr	r1, [pc, #20]	; (198c0 <ull_sched_mfy_win_offset_use+0x30>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   198aa:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
	win_offset = conn->llcp_cu.win_offset_us / 1250;
   198ae:	fba1 1303 	umull	r1, r3, r1, r3
   198b2:	0a9b      	lsrs	r3, r3, #10
   198b4:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   198b8:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   198ba:	7051      	strb	r1, [r2, #1]
}
   198bc:	bd10      	pop	{r4, pc}
   198be:	bf00      	nop
   198c0:	d1b71759 	.word	0xd1b71759

000198c4 <ull_sched_mfy_free_win_offset_calc>:
{
   198c4:	b500      	push	{lr}
	if (conn->lll.role) {
   198c6:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   198ca:	2b00      	cmp	r3, #0
{
   198cc:	b085      	sub	sp, #20
		conn->llcp_conn_param.ticks_to_offset_next =
   198ce:	bfbc      	itt	lt
   198d0:	f8d0 30e4 	ldrlt.w	r3, [r0, #228]	; 0xe4
   198d4:	f8c0 3194 	strlt.w	r3, [r0, #404]	; 0x194
	uint32_t ticks_to_offset_default = 0U;
   198d8:	f04f 0200 	mov.w	r2, #0
	win_offset_calc(conn, 0, ticks_to_offset_next,
   198dc:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
	uint32_t ticks_to_offset_default = 0U;
   198e0:	9203      	str	r2, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   198e2:	9301      	str	r3, [sp, #4]
	uint8_t offset_max = 6U;
   198e4:	f04f 0206 	mov.w	r2, #6
	win_offset_calc(conn, 0, ticks_to_offset_next,
   198e8:	f10d 030b 	add.w	r3, sp, #11
	uint8_t offset_max = 6U;
   198ec:	f88d 200b 	strb.w	r2, [sp, #11]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   198f0:	9300      	str	r3, [sp, #0]
		ticks_to_offset_next =
   198f2:	bfb8      	it	lt
   198f4:	f500 72ca 	addlt.w	r2, r0, #404	; 0x194
	win_offset_calc(conn, 0, ticks_to_offset_next,
   198f8:	f8b0 3176 	ldrh.w	r3, [r0, #374]	; 0x176
	ticks_to_offset_next = &ticks_to_offset_default;
   198fc:	bfa8      	it	ge
   198fe:	aa03      	addge	r2, sp, #12
	win_offset_calc(conn, 0, ticks_to_offset_next,
   19900:	2100      	movs	r1, #0
   19902:	f7ea f815 	bl	3930 <win_offset_calc>
}
   19906:	b005      	add	sp, #20
   19908:	f85d fb04 	ldr.w	pc, [sp], #4

0001990c <ull_chan_map_get>:

	return 0;
}

uint8_t ull_chan_map_get(uint8_t *const chan_map)
{
   1990c:	b508      	push	{r3, lr}
	memcpy(chan_map, map, sizeof(map));
   1990e:	4903      	ldr	r1, [pc, #12]	; (1991c <ull_chan_map_get+0x10>)
   19910:	2205      	movs	r2, #5
   19912:	f008 ff05 	bl	22720 <memcpy>

	return count;
   19916:	4b02      	ldr	r3, [pc, #8]	; (19920 <ull_chan_map_get+0x14>)
}
   19918:	7818      	ldrb	r0, [r3, #0]
   1991a:	bd08      	pop	{r3, pc}
   1991c:	200005c8 	.word	0x200005c8
   19920:	20000711 	.word	0x20000711

00019924 <ull_chan_map_set>:

void ull_chan_map_set(uint8_t const *const chan_map)
{
   19924:	b510      	push	{r4, lr}
	memcpy(map, chan_map, sizeof(map));
   19926:	4c06      	ldr	r4, [pc, #24]	; (19940 <ull_chan_map_set+0x1c>)
{
   19928:	4601      	mov	r1, r0
	memcpy(map, chan_map, sizeof(map));
   1992a:	2205      	movs	r2, #5
   1992c:	4620      	mov	r0, r4
   1992e:	f008 fef7 	bl	22720 <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   19932:	4620      	mov	r0, r4
   19934:	2105      	movs	r1, #5
   19936:	f7f7 f965 	bl	10c04 <util_ones_count_get>
   1993a:	4b02      	ldr	r3, [pc, #8]	; (19944 <ull_chan_map_set+0x20>)
   1993c:	7018      	strb	r0, [r3, #0]
}
   1993e:	bd10      	pop	{r4, pc}
   19940:	200005c8 	.word	0x200005c8
   19944:	20000711 	.word	0x20000711

00019948 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   19948:	b470      	push	{r4, r5, r6}
   1994a:	4605      	mov	r5, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1994c:	7800      	ldrb	r0, [r0, #0]
   1994e:	4c1b      	ldr	r4, [pc, #108]	; (199bc <lll_chan_sel_1+0x74>)
   19950:	fb02 1101 	mla	r1, r2, r1, r1
   19954:	180a      	adds	r2, r1, r0
   19956:	fb84 0102 	smull	r0, r1, r4, r2
   1995a:	4411      	add	r1, r2
   1995c:	1149      	asrs	r1, r1, #5
   1995e:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   19962:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   19966:	1a51      	subs	r1, r2, r1
   19968:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1996a:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   1996c:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1996e:	5c9c      	ldrb	r4, [r3, r2]
{
   19970:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   19974:	f001 0107 	and.w	r1, r1, #7
   19978:	410c      	asrs	r4, r1
   1997a:	f014 0401 	ands.w	r4, r4, #1
   1997e:	d11b      	bne.n	199b8 <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   19980:	fbb0 f2f5 	udiv	r2, r0, r5
   19984:	fb05 0212 	mls	r2, r5, r2, r0
   19988:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1998a:	1e5d      	subs	r5, r3, #1
   1998c:	1d1e      	adds	r6, r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1998e:	f104 0108 	add.w	r1, r4, #8
   19992:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   19996:	4620      	mov	r0, r4
   19998:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   1999a:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   1999e:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   199a2:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   199a6:	d002      	beq.n	199ae <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   199a8:	b132      	cbz	r2, 199b8 <lll_chan_sel_1+0x70>
				chan_index--;
   199aa:	3a01      	subs	r2, #1
   199ac:	b2d2      	uxtb	r2, r2
			chan_next++;
   199ae:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   199b0:	4284      	cmp	r4, r0
   199b2:	d1f2      	bne.n	1999a <lll_chan_sel_1+0x52>
	while (byte_count--) {
   199b4:	42b5      	cmp	r5, r6
   199b6:	d1ea      	bne.n	1998e <lll_chan_sel_1+0x46>
}
   199b8:	bc70      	pop	{r4, r5, r6}
   199ba:	4770      	bx	lr
   199bc:	dd67c8a7 	.word	0xdd67c8a7

000199c0 <lll_chan_sel_2>:
{
   199c0:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   199c2:	4f2f      	ldr	r7, [pc, #188]	; (19a80 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   199c4:	4e2f      	ldr	r6, [pc, #188]	; (19a84 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   199c6:	ea80 0501 	eor.w	r5, r0, r1
   199ca:	2403      	movs	r4, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   199cc:	0a28      	lsrs	r0, r5, #8
   199ce:	b2ed      	uxtb	r5, r5
   199d0:	eb00 2080 	add.w	r0, r0, r0, lsl #10
   199d4:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   199d8:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   199dc:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
   199e0:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   199e4:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   199e8:	ea4c 0c0e 	orr.w	ip, ip, lr
   199ec:	4328      	orrs	r0, r5
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   199ee:	eb00 2500 	add.w	r5, r0, r0, lsl #8
   199f2:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   199f6:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   199fa:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   199fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   19a02:	f3c0 4007 	ubfx	r0, r0, #16, #8
   19a06:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   19a0a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   19a0e:	3c01      	subs	r4, #1
   19a10:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   19a12:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   19a16:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   19a18:	d1d8      	bne.n	199cc <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
   19a1a:	481b      	ldr	r0, [pc, #108]	; (19a88 <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   19a1c:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
   19a1e:	fba0 5001 	umull	r5, r0, r0, r1
   19a22:	1a0d      	subs	r5, r1, r0
   19a24:	eb00 0055 	add.w	r0, r0, r5, lsr #1
   19a28:	0940      	lsrs	r0, r0, #5
   19a2a:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
   19a2e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   19a32:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   19a34:	f3c0 05c4 	ubfx	r5, r0, #3, #5
   19a38:	f000 0607 	and.w	r6, r0, #7
   19a3c:	5d55      	ldrb	r5, [r2, r5]
   19a3e:	4135      	asrs	r5, r6
   19a40:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
   19a42:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   19a44:	d41a      	bmi.n	19a7c <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   19a46:	fb01 f303 	mul.w	r3, r1, r3
   19a4a:	1e56      	subs	r6, r2, #1
   19a4c:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   19a50:	3204      	adds	r2, #4
		bite = *chan_map;
   19a52:	f104 0508 	add.w	r5, r4, #8
   19a56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   19a5a:	4620      	mov	r0, r4
   19a5c:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
   19a5e:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   19a62:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
   19a66:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   19a6a:	d002      	beq.n	19a72 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   19a6c:	b133      	cbz	r3, 19a7c <lll_chan_sel_2+0xbc>
				chan_index--;
   19a6e:	3b01      	subs	r3, #1
   19a70:	b2db      	uxtb	r3, r3
			chan_next++;
   19a72:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
   19a74:	42a0      	cmp	r0, r4
   19a76:	d1f2      	bne.n	19a5e <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   19a78:	42b2      	cmp	r2, r6
   19a7a:	d1ea      	bne.n	19a52 <lll_chan_sel_2+0x92>
}
   19a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19a7e:	bf00      	nop
   19a80:	00022110 	.word	0x00022110
   19a84:	00088440 	.word	0x00088440
   19a88:	bacf914d 	.word	0xbacf914d

00019a8c <wl_find>:
		wl[i].taken = 0U;
	}
}

static uint8_t wl_find(uint8_t addr_type, uint8_t *addr, uint8_t *free)
{
   19a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19a90:	4688      	mov	r8, r1
	int i;

	if (free) {
   19a92:	4615      	mov	r5, r2
   19a94:	b10a      	cbz	r2, 19a9a <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   19a96:	23ff      	movs	r3, #255	; 0xff
   19a98:	7013      	strb	r3, [r2, #0]
   19a9a:	4e17      	ldr	r6, [pc, #92]	; (19af8 <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19a9c:	f000 0701 	and.w	r7, r0, #1
   19aa0:	f106 0902 	add.w	r9, r6, #2
{
   19aa4:	2400      	movs	r4, #0
   19aa6:	e004      	b.n	19ab2 <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19aa8:	42ba      	cmp	r2, r7
   19aaa:	d014      	beq.n	19ad6 <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   19aac:	3401      	adds	r4, #1
   19aae:	2c08      	cmp	r4, #8
   19ab0:	d00e      	beq.n	19ad0 <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19ab2:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   19ab6:	07d9      	lsls	r1, r3, #31
   19ab8:	f3c3 0240 	ubfx	r2, r3, #1, #1
   19abc:	d4f4      	bmi.n	19aa8 <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   19abe:	2d00      	cmp	r5, #0
   19ac0:	d0f4      	beq.n	19aac <wl_find+0x20>
   19ac2:	782b      	ldrb	r3, [r5, #0]
   19ac4:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   19ac6:	bf08      	it	eq
   19ac8:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   19aca:	3401      	adds	r4, #1
   19acc:	2c08      	cmp	r4, #8
   19ace:	d1f0      	bne.n	19ab2 <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   19ad0:	20ff      	movs	r0, #255	; 0xff
}
   19ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19ad6:	2206      	movs	r2, #6
   19ad8:	4641      	mov	r1, r8
   19ada:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   19ade:	f008 fe0f 	bl	22700 <memcmp>
   19ae2:	b130      	cbz	r0, 19af2 <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   19ae4:	2d00      	cmp	r5, #0
   19ae6:	d0e1      	beq.n	19aac <wl_find+0x20>
   19ae8:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   19aec:	07db      	lsls	r3, r3, #31
   19aee:	d4dd      	bmi.n	19aac <wl_find+0x20>
   19af0:	e7e7      	b.n	19ac2 <wl_find+0x36>
			return i;
   19af2:	b2e0      	uxtb	r0, r4
   19af4:	e7ed      	b.n	19ad2 <wl_find+0x46>
   19af6:	bf00      	nop
   19af8:	20003fbc 	.word	0x20003fbc

00019afc <wl_update>:

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}

static void wl_update(void)
{
   19afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b00:	4f21      	ldr	r7, [pc, #132]	; (19b88 <wl_update+0x8c>)
   19b02:	4d22      	ldr	r5, [pc, #136]	; (19b8c <wl_update+0x90>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19b04:	f8df 9088 	ldr.w	r9, [pc, #136]	; 19b90 <wl_update+0x94>
   19b08:	f8df a088 	ldr.w	sl, [pc, #136]	; 19b94 <wl_update+0x98>
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   19b0c:	f1a7 0802 	sub.w	r8, r7, #2
   19b10:	f1a5 0b02 	sub.w	fp, r5, #2
{
   19b14:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   19b16:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   19b1a:	2601      	movs	r6, #1
		if (!wl[i].taken) {
   19b1c:	f013 0f01 	tst.w	r3, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19b20:	4638      	mov	r0, r7
	filter->enable_bitmask |= BIT(index);
   19b22:	fa06 f604 	lsl.w	r6, r6, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19b26:	4629      	mov	r1, r5
   19b28:	f107 0706 	add.w	r7, r7, #6
   19b2c:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   19b30:	d022      	beq.n	19b78 <wl_update+0x7c>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19b32:	f899 3000 	ldrb.w	r3, [r9]
   19b36:	b163      	cbz	r3, 19b52 <wl_update+0x56>
		j = wl[i].rl_idx;
   19b38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19b3c:	2b07      	cmp	r3, #7
   19b3e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   19b42:	d806      	bhi.n	19b52 <wl_update+0x56>
   19b44:	f81a 303c 	ldrb.w	r3, [sl, ip, lsl #3]
   19b48:	f013 0f04 	tst.w	r3, #4
   19b4c:	d001      	beq.n	19b52 <wl_update+0x56>
   19b4e:	06db      	lsls	r3, r3, #27
   19b50:	d512      	bpl.n	19b78 <wl_update+0x7c>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   19b52:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19b56:	f898 e001 	ldrb.w	lr, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   19b5a:	f898 c000 	ldrb.w	ip, [r8]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   19b5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19b62:	40a3      	lsls	r3, r4
   19b64:	ea4e 0303 	orr.w	r3, lr, r3
	filter->enable_bitmask |= BIT(index);
   19b68:	ea4c 0606 	orr.w	r6, ip, r6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19b6c:	f888 3001 	strb.w	r3, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   19b70:	f888 6000 	strb.w	r6, [r8]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19b74:	f008 fdd4 	bl	22720 <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   19b78:	3401      	adds	r4, #1
   19b7a:	2c08      	cmp	r4, #8
   19b7c:	f105 0508 	add.w	r5, r5, #8
   19b80:	d1c9      	bne.n	19b16 <wl_update+0x1a>
}
   19b82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b86:	bf00      	nop
   19b88:	20003ffe 	.word	0x20003ffe
   19b8c:	20003fbe 	.word	0x20003fbe
   19b90:	2000538b 	.word	0x2000538b
   19b94:	20003e44 	.word	0x20003e44

00019b98 <rl_update>:
{
   19b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b9c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 19c00 <rl_update+0x68>
	filter->enable_bitmask |= BIT(index);
   19ba0:	4d16      	ldr	r5, [pc, #88]	; (19bfc <rl_update+0x64>)
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19ba2:	f108 0701 	add.w	r7, r8, #1
   19ba6:	1cae      	adds	r6, r5, #2
{
   19ba8:	2400      	movs	r4, #0
   19baa:	e002      	b.n	19bb2 <rl_update+0x1a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19bac:	3401      	adds	r4, #1
   19bae:	2c08      	cmp	r4, #8
   19bb0:	d021      	beq.n	19bf6 <rl_update+0x5e>
		if (rl[i].taken) {
   19bb2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19bb6:	00d9      	lsls	r1, r3, #3
   19bb8:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   19bbc:	07da      	lsls	r2, r3, #31
   19bbe:	d5f5      	bpl.n	19bac <rl_update+0x14>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19bc0:	786a      	ldrb	r2, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   19bc2:	f895 c000 	ldrb.w	ip, [r5]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   19bc6:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   19bca:	f04f 0e01 	mov.w	lr, #1
   19bce:	fa0e fe04 	lsl.w	lr, lr, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19bd2:	40a3      	lsls	r3, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19bd4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19bd8:	4313      	orrs	r3, r2
	filter->enable_bitmask |= BIT(index);
   19bda:	ea4c 0c0e 	orr.w	ip, ip, lr
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19bde:	4439      	add	r1, r7
   19be0:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   19be4:	2206      	movs	r2, #6
   19be6:	3401      	adds	r4, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19be8:	706b      	strb	r3, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   19bea:	f885 c000 	strb.w	ip, [r5]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19bee:	f008 fd97 	bl	22720 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19bf2:	2c08      	cmp	r4, #8
   19bf4:	d1dd      	bne.n	19bb2 <rl_update+0x1a>
}
   19bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19bfa:	bf00      	nop
   19bfc:	20003f84 	.word	0x20003f84
   19c00:	20003e44 	.word	0x20003e44

00019c04 <rl_access_check.part.0>:
static int rl_access_check(bool check_ar)
   19c04:	b508      	push	{r3, lr}
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   19c06:	2000      	movs	r0, #0
   19c08:	f7fc f8aa 	bl	15d60 <ull_scan_is_enabled>
}
   19c0c:	fab0 f080 	clz	r0, r0
   19c10:	0940      	lsrs	r0, r0, #5
   19c12:	bd08      	pop	{r3, pc}

00019c14 <ll_wl_size_get>:
}
   19c14:	2008      	movs	r0, #8
   19c16:	4770      	bx	lr

00019c18 <ll_wl_clear>:
{
   19c18:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   19c1a:	2000      	movs	r0, #0
   19c1c:	f7fb fe94 	bl	15948 <ull_adv_filter_pol_get>
   19c20:	bb00      	cbnz	r0, 19c64 <ll_wl_clear+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   19c22:	f7fc f8b5 	bl	15d90 <ull_scan_filter_pol_get>
   19c26:	f010 0001 	ands.w	r0, r0, #1
   19c2a:	d11b      	bne.n	19c64 <ll_wl_clear+0x4c>
   19c2c:	4a0e      	ldr	r2, [pc, #56]	; (19c68 <ll_wl_clear+0x50>)
			rl[j].wl = 0U;
   19c2e:	4c0f      	ldr	r4, [pc, #60]	; (19c6c <ll_wl_clear+0x54>)
		uint8_t j = wl[i].rl_idx;
   19c30:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   19c34:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   19c36:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   19c38:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   19c3c:	d805      	bhi.n	19c4a <ll_wl_clear+0x32>
			rl[j].wl = 0U;
   19c3e:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   19c42:	f36f 1345 	bfc	r3, #5, #1
   19c46:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   19c4a:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   19c4e:	f36f 0300 	bfc	r3, #0, #1
   19c52:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   19c56:	3001      	adds	r0, #1
   19c58:	2808      	cmp	r0, #8
   19c5a:	d1e9      	bne.n	19c30 <ll_wl_clear+0x18>
	wl_anon = 0U;
   19c5c:	4b04      	ldr	r3, [pc, #16]	; (19c70 <ll_wl_clear+0x58>)
   19c5e:	2000      	movs	r0, #0
   19c60:	7018      	strb	r0, [r3, #0]
}
   19c62:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19c64:	200c      	movs	r0, #12
}
   19c66:	bd10      	pop	{r4, pc}
   19c68:	20003fbc 	.word	0x20003fbc
   19c6c:	20003e44 	.word	0x20003e44
   19c70:	2000538c 	.word	0x2000538c

00019c74 <ll_wl_remove>:
{
   19c74:	b538      	push	{r3, r4, r5, lr}
   19c76:	4604      	mov	r4, r0
	if (ull_adv_filter_pol_get(0)) {
   19c78:	2000      	movs	r0, #0
   19c7a:	f7fb fe65 	bl	15948 <ull_adv_filter_pol_get>
   19c7e:	b978      	cbnz	r0, 19ca0 <ll_wl_remove+0x2c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   19c80:	f7fc f886 	bl	15d90 <ull_scan_filter_pol_get>
   19c84:	f010 0501 	ands.w	r5, r0, #1
   19c88:	d10a      	bne.n	19ca0 <ll_wl_remove+0x2c>
	if (addr->type == ADDR_TYPE_ANON) {
   19c8a:	7820      	ldrb	r0, [r4, #0]
   19c8c:	28ff      	cmp	r0, #255	; 0xff
   19c8e:	d009      	beq.n	19ca4 <ll_wl_remove+0x30>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   19c90:	1c61      	adds	r1, r4, #1
   19c92:	462a      	mov	r2, r5
   19c94:	f7ff fefa 	bl	19a8c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   19c98:	2807      	cmp	r0, #7
   19c9a:	d907      	bls.n	19cac <ll_wl_remove+0x38>
   19c9c:	2002      	movs	r0, #2
}
   19c9e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19ca0:	200c      	movs	r0, #12
}
   19ca2:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   19ca4:	4b0d      	ldr	r3, [pc, #52]	; (19cdc <ll_wl_remove+0x68>)
   19ca6:	701d      	strb	r5, [r3, #0]
		return 0;
   19ca8:	4628      	mov	r0, r5
}
   19caa:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = wl[i].rl_idx;
   19cac:	4a0c      	ldr	r2, [pc, #48]	; (19ce0 <ll_wl_remove+0x6c>)
   19cae:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   19cb2:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   19cb4:	2b07      	cmp	r3, #7
   19cb6:	d808      	bhi.n	19cca <ll_wl_remove+0x56>
			rl[j].wl = 0U;
   19cb8:	490a      	ldr	r1, [pc, #40]	; (19ce4 <ll_wl_remove+0x70>)
   19cba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   19cbe:	f811 4033 	ldrb.w	r4, [r1, r3, lsl #3]
   19cc2:	f365 1445 	bfi	r4, r5, #5, #1
   19cc6:	f801 4033 	strb.w	r4, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   19cca:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   19cce:	f36f 0300 	bfc	r3, #0, #1
   19cd2:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   19cd6:	2000      	movs	r0, #0
}
   19cd8:	bd38      	pop	{r3, r4, r5, pc}
   19cda:	bf00      	nop
   19cdc:	2000538c 	.word	0x2000538c
   19ce0:	20003fbc 	.word	0x20003fbc
   19ce4:	20003e44 	.word	0x20003e44

00019ce8 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19ce8:	2807      	cmp	r0, #7
{
   19cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19cee:	4604      	mov	r4, r0
   19cf0:	460d      	mov	r5, r1
   19cf2:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19cf4:	d817      	bhi.n	19d26 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   19cf6:	4e19      	ldr	r6, [pc, #100]	; (19d5c <ll_rl_id_addr_get+0x74>)
   19cf8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19cfc:	00a7      	lsls	r7, r4, #2
   19cfe:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   19d02:	07db      	lsls	r3, r3, #31
   19d04:	d51c      	bpl.n	19d40 <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   19d06:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19d08:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   19d0a:	f816 3037 	ldrb.w	r3, [r6, r7, lsl #3]
   19d0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19d12:	fb01 6104 	mla	r1, r1, r4, r6
	*id_addr_type = rl[rl_idx].id_addr_type;
   19d16:	702b      	strb	r3, [r5, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19d18:	4640      	mov	r0, r8
   19d1a:	3101      	adds	r1, #1
}
   19d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19d20:	2206      	movs	r2, #6
   19d22:	f008 bcfd 	b.w	22720 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19d26:	4a0e      	ldr	r2, [pc, #56]	; (19d60 <ll_rl_id_addr_get+0x78>)
   19d28:	490e      	ldr	r1, [pc, #56]	; (19d64 <ll_rl_id_addr_get+0x7c>)
   19d2a:	480f      	ldr	r0, [pc, #60]	; (19d68 <ll_rl_id_addr_get+0x80>)
   19d2c:	23e7      	movs	r3, #231	; 0xe7
   19d2e:	f006 fc87 	bl	20640 <printk>
   19d32:	4040      	eors	r0, r0
   19d34:	f380 8811 	msr	BASEPRI, r0
   19d38:	f04f 0003 	mov.w	r0, #3
   19d3c:	df02      	svc	2
   19d3e:	e7da      	b.n	19cf6 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   19d40:	4a07      	ldr	r2, [pc, #28]	; (19d60 <ll_rl_id_addr_get+0x78>)
   19d42:	490a      	ldr	r1, [pc, #40]	; (19d6c <ll_rl_id_addr_get+0x84>)
   19d44:	4808      	ldr	r0, [pc, #32]	; (19d68 <ll_rl_id_addr_get+0x80>)
   19d46:	23e8      	movs	r3, #232	; 0xe8
   19d48:	f006 fc7a 	bl	20640 <printk>
   19d4c:	4040      	eors	r0, r0
   19d4e:	f380 8811 	msr	BASEPRI, r0
   19d52:	f04f 0003 	mov.w	r0, #3
   19d56:	df02      	svc	2
   19d58:	e7d5      	b.n	19d06 <ll_rl_id_addr_get+0x1e>
   19d5a:	bf00      	nop
   19d5c:	20003e44 	.word	0x20003e44
   19d60:	00027784 	.word	0x00027784
   19d64:	000277c8 	.word	0x000277c8
   19d68:	00026ecc 	.word	0x00026ecc
   19d6c:	000277d4 	.word	0x000277d4

00019d70 <ll_rl_size_get>:
   19d70:	2008      	movs	r0, #8
   19d72:	4770      	bx	lr

00019d74 <ll_rl_clear>:
{
   19d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19d76:	2000      	movs	r0, #0
   19d78:	f7fb fdda 	bl	15930 <ull_adv_is_enabled>
		? 0 : 1;
   19d7c:	b108      	cbz	r0, 19d82 <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19d7e:	200c      	movs	r0, #12
}
   19d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19d82:	4604      	mov	r4, r0
   19d84:	f7ff ff3e 	bl	19c04 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
   19d88:	2800      	cmp	r0, #0
   19d8a:	d0f8      	beq.n	19d7e <ll_rl_clear+0xa>
		rl[i].taken = 0U;
   19d8c:	4b1a      	ldr	r3, [pc, #104]	; (19df8 <ll_rl_clear+0x84>)
	peer_irk_count = 0U;
   19d8e:	491b      	ldr	r1, [pc, #108]	; (19dfc <ll_rl_clear+0x88>)
		rl[i].taken = 0U;
   19d90:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   19d94:	f893 c000 	ldrb.w	ip, [r3]
   19d98:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   19d9c:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   19da0:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   19da4:	f893 00c8 	ldrb.w	r0, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   19da8:	700c      	strb	r4, [r1, #0]
		rl[i].taken = 0U;
   19daa:	f364 0200 	bfi	r2, r4, #0, #1
   19dae:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   19db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   19db6:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   19dba:	f364 0000 	bfi	r0, r4, #0, #1
   19dbe:	f364 0c00 	bfi	ip, r4, #0, #1
   19dc2:	f364 0700 	bfi	r7, r4, #0, #1
   19dc6:	f364 0600 	bfi	r6, r4, #0, #1
   19dca:	f364 0500 	bfi	r5, r4, #0, #1
   19dce:	f364 0100 	bfi	r1, r4, #0, #1
   19dd2:	f364 0200 	bfi	r2, r4, #0, #1
   19dd6:	f883 00c8 	strb.w	r0, [r3, #200]	; 0xc8
   19dda:	f883 c000 	strb.w	ip, [r3]
   19dde:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   19de2:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   19de6:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   19dea:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   19dee:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	return 0;
   19df2:	4620      	mov	r0, r4
}
   19df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19df6:	bf00      	nop
   19df8:	20003e44 	.word	0x20003e44
   19dfc:	2000538a 	.word	0x2000538a

00019e00 <ll_rl_enable>:
{
   19e00:	b538      	push	{r3, r4, r5, lr}
   19e02:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19e04:	2000      	movs	r0, #0
   19e06:	f7fb fd93 	bl	15930 <ull_adv_is_enabled>
		? 0 : 1;
   19e0a:	b108      	cbz	r0, 19e10 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19e0c:	200c      	movs	r0, #12
}
   19e0e:	bd38      	pop	{r3, r4, r5, pc}
   19e10:	4604      	mov	r4, r0
   19e12:	f7ff fef7 	bl	19c04 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
   19e16:	2800      	cmp	r0, #0
   19e18:	d0f8      	beq.n	19e0c <ll_rl_enable+0xc>
	switch (enable) {
   19e1a:	b13d      	cbz	r5, 19e2c <ll_rl_enable+0x2c>
   19e1c:	2d01      	cmp	r5, #1
   19e1e:	d001      	beq.n	19e24 <ll_rl_enable+0x24>
   19e20:	2012      	movs	r0, #18
}
   19e22:	bd38      	pop	{r3, r4, r5, pc}
		rl_enable = 1U;
   19e24:	4b03      	ldr	r3, [pc, #12]	; (19e34 <ll_rl_enable+0x34>)
   19e26:	701d      	strb	r5, [r3, #0]
	return 0;
   19e28:	4620      	mov	r0, r4
}
   19e2a:	bd38      	pop	{r3, r4, r5, pc}
		rl_enable = 0U;
   19e2c:	4b01      	ldr	r3, [pc, #4]	; (19e34 <ll_rl_enable+0x34>)
   19e2e:	701d      	strb	r5, [r3, #0]
	return 0;
   19e30:	4628      	mov	r0, r5
}
   19e32:	bd38      	pop	{r3, r4, r5, pc}
   19e34:	2000538b 	.word	0x2000538b

00019e38 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   19e38:	4a03      	ldr	r2, [pc, #12]	; (19e48 <ll_rl_timeout_set+0x10>)
   19e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19e3e:	fb03 f300 	mul.w	r3, r3, r0
   19e42:	6013      	str	r3, [r2, #0]
}
   19e44:	4770      	bx	lr
   19e46:	bf00      	nop
   19e48:	20003fb8 	.word	0x20003fb8

00019e4c <ull_filter_adv_scan_state_cb>:
	if (bm) {
   19e4c:	b1b0      	cbz	r0, 19e7c <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   19e4e:	4b0d      	ldr	r3, [pc, #52]	; (19e84 <ull_filter_adv_scan_state_cb+0x38>)
   19e50:	681a      	ldr	r2, [r3, #0]
{
   19e52:	b510      	push	{r4, lr}
   19e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   19e58:	f240 30e7 	movw	r0, #999	; 0x3e7
   19e5c:	2100      	movs	r1, #0
   19e5e:	fbe3 0102 	umlal	r0, r1, r3, r2
   19e62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19e66:	2300      	movs	r3, #0
   19e68:	f7e6 f94a 	bl	100 <__aeabi_uldivmod>
}
   19e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19e70:	4602      	mov	r2, r0
   19e72:	460b      	mov	r3, r1
   19e74:	4804      	ldr	r0, [pc, #16]	; (19e88 <ull_filter_adv_scan_state_cb+0x3c>)
   19e76:	4905      	ldr	r1, [pc, #20]	; (19e8c <ull_filter_adv_scan_state_cb+0x40>)
   19e78:	f006 b82e 	b.w	1fed8 <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   19e7c:	4803      	ldr	r0, [pc, #12]	; (19e8c <ull_filter_adv_scan_state_cb+0x40>)
   19e7e:	f00c b86d 	b.w	25f5c <k_delayed_work_cancel>
   19e82:	bf00      	nop
   19e84:	20003fb8 	.word	0x20003fb8
   19e88:	20001510 	.word	0x20001510
   19e8c:	200013e0 	.word	0x200013e0

00019e90 <ull_filter_adv_update>:
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   19e90:	4a0d      	ldr	r2, [pc, #52]	; (19ec8 <ull_filter_adv_update+0x38>)
{
   19e92:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   19e94:	2300      	movs	r3, #0
   19e96:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
   19e98:	b970      	cbnz	r0, 19eb8 <ull_filter_adv_update+0x28>
	if (rl_enable &&
   19e9a:	4b0c      	ldr	r3, [pc, #48]	; (19ecc <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
   19e9c:	4a0c      	ldr	r2, [pc, #48]	; (19ed0 <ull_filter_adv_update+0x40>)
	if (rl_enable &&
   19e9e:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   19ea0:	2000      	movs	r0, #0
   19ea2:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   19ea4:	b903      	cbnz	r3, 19ea8 <ull_filter_adv_update+0x18>
}
   19ea6:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
   19ea8:	f7fb ff5a 	bl	15d60 <ull_scan_is_enabled>
	if (rl_enable &&
   19eac:	2800      	cmp	r0, #0
   19eae:	d1fa      	bne.n	19ea6 <ull_filter_adv_update+0x16>
}
   19eb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   19eb4:	f7ff be70 	b.w	19b98 <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
   19eb8:	4618      	mov	r0, r3
   19eba:	f7fb ff69 	bl	15d90 <ull_scan_filter_pol_get>
	if (adv_fp &&
   19ebe:	07c3      	lsls	r3, r0, #31
   19ec0:	d4eb      	bmi.n	19e9a <ull_filter_adv_update+0xa>
		wl_update();
   19ec2:	f7ff fe1b 	bl	19afc <wl_update>
   19ec6:	e7e8      	b.n	19e9a <ull_filter_adv_update+0xa>
   19ec8:	20003ffc 	.word	0x20003ffc
   19ecc:	2000538b 	.word	0x2000538b
   19ed0:	20003f84 	.word	0x20003f84

00019ed4 <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   19ed4:	4a0e      	ldr	r2, [pc, #56]	; (19f10 <ull_filter_scan_update+0x3c>)
{
   19ed6:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   19ed8:	2300      	movs	r3, #0
   19eda:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
   19edc:	07c2      	lsls	r2, r0, #31
   19ede:	d40e      	bmi.n	19efe <ull_filter_scan_update+0x2a>
	if (rl_enable &&
   19ee0:	4b0c      	ldr	r3, [pc, #48]	; (19f14 <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
   19ee2:	4a0d      	ldr	r2, [pc, #52]	; (19f18 <ull_filter_scan_update+0x44>)
	if (rl_enable &&
   19ee4:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   19ee6:	2000      	movs	r0, #0
   19ee8:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   19eea:	b903      	cbnz	r3, 19eee <ull_filter_scan_update+0x1a>
}
   19eec:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
   19eee:	f7fb fd1f 	bl	15930 <ull_adv_is_enabled>
	if (rl_enable &&
   19ef2:	2800      	cmp	r0, #0
   19ef4:	d1fa      	bne.n	19eec <ull_filter_scan_update+0x18>
}
   19ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   19efa:	f7ff be4d 	b.w	19b98 <rl_update>
	     !ull_adv_filter_pol_get(0))) {
   19efe:	4618      	mov	r0, r3
   19f00:	f7fb fd22 	bl	15948 <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   19f04:	2800      	cmp	r0, #0
   19f06:	d1eb      	bne.n	19ee0 <ull_filter_scan_update+0xc>
		wl_update();
   19f08:	f7ff fdf8 	bl	19afc <wl_update>
   19f0c:	e7e8      	b.n	19ee0 <ull_filter_scan_update+0xc>
   19f0e:	bf00      	nop
   19f10:	20003ffc 	.word	0x20003ffc
   19f14:	2000538b 	.word	0x2000538b
   19f18:	20003f84 	.word	0x20003f84

00019f1c <ull_filter_adv_pdu_update>:
{
   19f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t idx = adv->lll.rl_idx;
   19f20:	f890 702a 	ldrb.w	r7, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   19f24:	2f07      	cmp	r7, #7
{
   19f26:	4605      	mov	r5, r0
   19f28:	460c      	mov	r4, r1
   19f2a:	f101 0602 	add.w	r6, r1, #2
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   19f2e:	d845      	bhi.n	19fbc <ull_filter_adv_pdu_update+0xa0>
   19f30:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 1a024 <ull_filter_adv_pdu_update+0x108>
   19f34:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   19f38:	ea4f 0987 	mov.w	r9, r7, lsl #2
   19f3c:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   19f40:	0719      	lsls	r1, r3, #28
   19f42:	d529      	bpl.n	19f98 <ull_filter_adv_pdu_update+0x7c>
		LL_ASSERT(rl[idx].rpas_ready);
   19f44:	079a      	lsls	r2, r3, #30
   19f46:	d559      	bpl.n	19ffc <ull_filter_adv_pdu_update+0xe0>
		pdu->tx_addr = 1;
   19f48:	7822      	ldrb	r2, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   19f4a:	eb09 0307 	add.w	r3, r9, r7
   19f4e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
		pdu->tx_addr = 1;
   19f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   19f56:	6a59      	ldr	r1, [r3, #36]	; 0x24
		pdu->tx_addr = 1;
   19f58:	7022      	strb	r2, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   19f5a:	4630      	mov	r0, r6
   19f5c:	2206      	movs	r2, #6
   19f5e:	f008 fbdf 	bl	22720 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19f62:	7823      	ldrb	r3, [r4, #0]
   19f64:	f003 030f 	and.w	r3, r3, #15
   19f68:	2b01      	cmp	r3, #1
   19f6a:	d125      	bne.n	19fb8 <ull_filter_adv_pdu_update+0x9c>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   19f6c:	44b9      	add	r9, r7
   19f6e:	f104 0008 	add.w	r0, r4, #8
   19f72:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   19f76:	075b      	lsls	r3, r3, #29
   19f78:	d433      	bmi.n	19fe2 <ull_filter_adv_pdu_update+0xc6>
			pdu->rx_addr = adv->id_addr_type;
   19f7a:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
   19f7e:	7822      	ldrb	r2, [r4, #0]
   19f80:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   19f84:	f363 12c7 	bfi	r2, r3, #7, #1
   19f88:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   19f8a:	f105 01d7 	add.w	r1, r5, #215	; 0xd7
   19f8e:	2206      	movs	r2, #6
}
   19f90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   19f94:	f008 bbc4 	b.w	22720 <memcpy>
		pdu->tx_addr = adv->own_addr_type & 0x1;
   19f98:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
   19f9c:	7823      	ldrb	r3, [r4, #0]
   19f9e:	f3c0 0040 	ubfx	r0, r0, #1, #1
   19fa2:	f360 1386 	bfi	r3, r0, #6, #1
   19fa6:	7023      	strb	r3, [r4, #0]
			ll_addr_get(pdu->tx_addr, adva);
   19fa8:	4631      	mov	r1, r6
   19faa:	f7f8 f9d7 	bl	1235c <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19fae:	7823      	ldrb	r3, [r4, #0]
   19fb0:	f003 030f 	and.w	r3, r3, #15
   19fb4:	2b01      	cmp	r3, #1
   19fb6:	d0d9      	beq.n	19f6c <ull_filter_adv_pdu_update+0x50>
}
   19fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = adv->own_addr_type & 0x1;
   19fbc:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
   19fc0:	780b      	ldrb	r3, [r1, #0]
   19fc2:	f3c0 0040 	ubfx	r0, r0, #1, #1
   19fc6:	f360 1386 	bfi	r3, r0, #6, #1
   19fca:	7023      	strb	r3, [r4, #0]
			ll_addr_get(pdu->tx_addr, adva);
   19fcc:	4631      	mov	r1, r6
   19fce:	f7f8 f9c5 	bl	1235c <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19fd2:	7823      	ldrb	r3, [r4, #0]
   19fd4:	f003 030f 	and.w	r3, r3, #15
   19fd8:	2b01      	cmp	r3, #1
   19fda:	d1ed      	bne.n	19fb8 <ull_filter_adv_pdu_update+0x9c>
   19fdc:	f104 0008 	add.w	r0, r4, #8
   19fe0:	e7cb      	b.n	19f7a <ull_filter_adv_pdu_update+0x5e>
			pdu->rx_addr = 1;
   19fe2:	7823      	ldrb	r3, [r4, #0]
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   19fe4:	2128      	movs	r1, #40	; 0x28
			pdu->rx_addr = 1;
   19fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   19fea:	fb01 8107 	mla	r1, r1, r7, r8
			pdu->rx_addr = 1;
   19fee:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   19ff0:	311e      	adds	r1, #30
}
   19ff2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   19ff6:	2206      	movs	r2, #6
   19ff8:	f008 bb92 	b.w	22720 <memcpy>
		LL_ASSERT(rl[idx].rpas_ready);
   19ffc:	4a06      	ldr	r2, [pc, #24]	; (1a018 <ull_filter_adv_pdu_update+0xfc>)
   19ffe:	4907      	ldr	r1, [pc, #28]	; (1a01c <ull_filter_adv_pdu_update+0x100>)
   1a000:	4807      	ldr	r0, [pc, #28]	; (1a020 <ull_filter_adv_pdu_update+0x104>)
   1a002:	f240 234a 	movw	r3, #586	; 0x24a
   1a006:	f006 fb1b 	bl	20640 <printk>
   1a00a:	4040      	eors	r0, r0
   1a00c:	f380 8811 	msr	BASEPRI, r0
   1a010:	f04f 0003 	mov.w	r0, #3
   1a014:	df02      	svc	2
   1a016:	e797      	b.n	19f48 <ull_filter_adv_pdu_update+0x2c>
   1a018:	00027784 	.word	0x00027784
   1a01c:	000277e8 	.word	0x000277e8
   1a020:	00026ecc 	.word	0x00026ecc
   1a024:	20003e44 	.word	0x20003e44

0001a028 <ull_filter_rpa_update>:
{
   1a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a02c:	4682      	mov	sl, r0
   1a02e:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   1a030:	f00b ffed 	bl	2600e <z_impl_k_uptime_ticks>
   1a034:	014b      	lsls	r3, r1, #5
   1a036:	0142      	lsls	r2, r0, #5
   1a038:	ebb2 0800 	subs.w	r8, r2, r0
   1a03c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   1a040:	eb63 0301 	sbc.w	r3, r3, r1
   1a044:	009b      	lsls	r3, r3, #2
   1a046:	ea4f 0288 	mov.w	r2, r8, lsl #2
   1a04a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
   1a04e:	eb12 0800 	adds.w	r8, r2, r0
   1a052:	eb43 0101 	adc.w	r1, r3, r1
   1a056:	00c9      	lsls	r1, r1, #3
   1a058:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
   1a05c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   1a060:	ea4f 38d3 	mov.w	r8, r3, lsr #15
   1a064:	0bce      	lsrs	r6, r1, #15
   1a066:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   1a06a:	9601      	str	r6, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   1a06c:	f1ba 0f00 	cmp.w	sl, #0
   1a070:	d117      	bne.n	1a0a2 <ull_filter_rpa_update+0x7a>
   1a072:	4b71      	ldr	r3, [pc, #452]	; (1a238 <ull_filter_rpa_update+0x210>)
   1a074:	e9d3 0100 	ldrd	r0, r1, [r3]
   1a078:	1c4c      	adds	r4, r1, #1
   1a07a:	bf08      	it	eq
   1a07c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1a080:	d00f      	beq.n	1a0a2 <ull_filter_rpa_update+0x7a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1a082:	4b6e      	ldr	r3, [pc, #440]	; (1a23c <ull_filter_rpa_update+0x214>)
   1a084:	681a      	ldr	r2, [r3, #0]
   1a086:	ebb8 0400 	subs.w	r4, r8, r0
   1a08a:	eb66 0501 	sbc.w	r5, r6, r1
   1a08e:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   1a090:	4294      	cmp	r4, r2
   1a092:	eb75 0303 	sbcs.w	r3, r5, r3
   1a096:	bfac      	ite	ge
   1a098:	f04f 0901 	movge.w	r9, #1
   1a09c:	f04f 0900 	movlt.w	r9, #0
   1a0a0:	e001      	b.n	1a0a6 <ull_filter_rpa_update+0x7e>
   1a0a2:	f04f 0901 	mov.w	r9, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a0a6:	4e66      	ldr	r6, [pc, #408]	; (1a240 <ull_filter_rpa_update+0x218>)
				LL_ASSERT(!err);
   1a0a8:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 1a254 <ull_filter_rpa_update+0x22c>
   1a0ac:	f1a6 0724 	sub.w	r7, r6, #36	; 0x24
	bool all = timeout || (rpa_last_ms == -1) ||
   1a0b0:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1a0b2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a0b6:	00a5      	lsls	r5, r4, #2
   1a0b8:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1a0bc:	07da      	lsls	r2, r3, #31
   1a0be:	d515      	bpl.n	1a0ec <ull_filter_rpa_update+0xc4>
   1a0c0:	f1b9 0f00 	cmp.w	r9, #0
   1a0c4:	d101      	bne.n	1a0ca <ull_filter_rpa_update+0xa2>
   1a0c6:	0798      	lsls	r0, r3, #30
   1a0c8:	d410      	bmi.n	1a0ec <ull_filter_rpa_update+0xc4>
			if (rl[i].pirk) {
   1a0ca:	192b      	adds	r3, r5, r4
   1a0cc:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1a0d0:	0759      	lsls	r1, r3, #29
   1a0d2:	d434      	bmi.n	1a13e <ull_filter_rpa_update+0x116>
			if (rl[i].lirk) {
   1a0d4:	192b      	adds	r3, r5, r4
   1a0d6:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1a0da:	071a      	lsls	r2, r3, #28
   1a0dc:	d419      	bmi.n	1a112 <ull_filter_rpa_update+0xea>
			rl[i].rpas_ready = 1U;
   1a0de:	4425      	add	r5, r4
   1a0e0:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   1a0e4:	f043 0302 	orr.w	r3, r3, #2
   1a0e8:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a0ec:	3401      	adds	r4, #1
   1a0ee:	2c08      	cmp	r4, #8
   1a0f0:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1a0f4:	d1dd      	bne.n	1a0b2 <ull_filter_rpa_update+0x8a>
	if (all) {
   1a0f6:	f1b9 0f00 	cmp.w	r9, #0
   1a0fa:	d004      	beq.n	1a106 <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   1a0fc:	4b4e      	ldr	r3, [pc, #312]	; (1a238 <ull_filter_rpa_update+0x210>)
   1a0fe:	9a01      	ldr	r2, [sp, #4]
   1a100:	f8c3 8000 	str.w	r8, [r3]
   1a104:	605a      	str	r2, [r3, #4]
	if (timeout) {
   1a106:	f1ba 0f00 	cmp.w	sl, #0
   1a10a:	d13c      	bne.n	1a186 <ull_filter_rpa_update+0x15e>
}
   1a10c:	b007      	add	sp, #28
   1a10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1a112:	a902      	add	r1, sp, #8
   1a114:	f1a6 001d 	sub.w	r0, r6, #29
   1a118:	f008 fb85 	bl	22826 <bt_rpa_create>
				LL_ASSERT(!err);
   1a11c:	2800      	cmp	r0, #0
   1a11e:	d170      	bne.n	1a202 <ull_filter_rpa_update+0x1da>
				rl[i].local_rpa = &rpa;
   1a120:	4a48      	ldr	r2, [pc, #288]	; (1a244 <ull_filter_rpa_update+0x21c>)
   1a122:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1a126:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	memcpy(dst, src, sizeof(*dst));
   1a12a:	a902      	add	r1, sp, #8
   1a12c:	4618      	mov	r0, r3
   1a12e:	2206      	movs	r2, #6
   1a130:	6031      	str	r1, [r6, #0]
   1a132:	9300      	str	r3, [sp, #0]
   1a134:	f008 faf4 	bl	22720 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1a138:	9b00      	ldr	r3, [sp, #0]
   1a13a:	6033      	str	r3, [r6, #0]
   1a13c:	e7cf      	b.n	1a0de <ull_filter_rpa_update+0xb6>
	psrc += length - 1;
   1a13e:	f816 3c0d 	ldrb.w	r3, [r6, #-13]
   1a142:	4a41      	ldr	r2, [pc, #260]	; (1a248 <ull_filter_rpa_update+0x220>)
   1a144:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1a148:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   1a14a:	f10d 0307 	add.w	r3, sp, #7
   1a14e:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   1a152:	f812 1901 	ldrb.w	r1, [r2], #-1
   1a156:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1a15a:	4283      	cmp	r3, r0
   1a15c:	d1f9      	bne.n	1a152 <ull_filter_rpa_update+0x12a>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1a15e:	1fb1      	subs	r1, r6, #6
   1a160:	a802      	add	r0, sp, #8
   1a162:	f008 fb60 	bl	22826 <bt_rpa_create>
				LL_ASSERT(!err);
   1a166:	2800      	cmp	r0, #0
   1a168:	d0b4      	beq.n	1a0d4 <ull_filter_rpa_update+0xac>
   1a16a:	4938      	ldr	r1, [pc, #224]	; (1a24c <ull_filter_rpa_update+0x224>)
   1a16c:	4838      	ldr	r0, [pc, #224]	; (1a250 <ull_filter_rpa_update+0x228>)
   1a16e:	f44f 7305 	mov.w	r3, #532	; 0x214
   1a172:	465a      	mov	r2, fp
   1a174:	f006 fa64 	bl	20640 <printk>
   1a178:	4040      	eors	r0, r0
   1a17a:	f380 8811 	msr	BASEPRI, r0
   1a17e:	f04f 0003 	mov.w	r0, #3
   1a182:	df02      	svc	2
   1a184:	e7a6      	b.n	1a0d4 <ull_filter_rpa_update+0xac>
		adv = ull_adv_is_enabled_get(0);
   1a186:	2000      	movs	r0, #0
   1a188:	f7fb fbc4 	bl	15914 <ull_adv_is_enabled_get>
		if (adv) {
   1a18c:	4604      	mov	r4, r0
   1a18e:	2800      	cmp	r0, #0
   1a190:	d0bc      	beq.n	1a10c <ull_filter_rpa_update+0xe4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1a192:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
   1a196:	075b      	lsls	r3, r3, #29
   1a198:	d5b8      	bpl.n	1a10c <ull_filter_rpa_update+0xe4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   1a19a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   1a19e:	2b07      	cmp	r3, #7
   1a1a0:	d8b4      	bhi.n	1a10c <ull_filter_rpa_update+0xe4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1a1a2:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
	if (pdu->first == pdu->last) {
   1a1a6:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
   1a1aa:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a1ae:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1a1b2:	f102 0311 	add.w	r3, r2, #17
   1a1b6:	301c      	adds	r0, #28
	if (pdu->first == pdu->last) {
   1a1b8:	42a9      	cmp	r1, r5
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1a1ba:	eb00 0603 	add.w	r6, r0, r3
	if (pdu->first == pdu->last) {
   1a1be:	d02e      	beq.n	1a21e <ull_filter_rpa_update+0x1f6>
   1a1c0:	3202      	adds	r2, #2
	return (void *)pdu->pdu[last];
   1a1c2:	f104 012b 	add.w	r1, r4, #43	; 0x2b
		pdu->chan_sel = prev->chan_sel;
   1a1c6:	5cc3      	ldrb	r3, [r0, r3]
	pdu->type = prev->type;
   1a1c8:	5c88      	ldrb	r0, [r1, r2]
		pdu->chan_sel = prev->chan_sel;
   1a1ca:	f3c3 1740 	ubfx	r7, r3, #5, #1
	pdu->type = prev->type;
   1a1ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
   1a1d2:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   1a1d6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   1a1da:	4303      	orrs	r3, r0
   1a1dc:	188f      	adds	r7, r1, r2
   1a1de:	548b      	strb	r3, [r1, r2]
	ull_filter_adv_pdu_update(adv, pdu);
   1a1e0:	4620      	mov	r0, r4
   1a1e2:	4639      	mov	r1, r7
   1a1e4:	f7ff fe9a 	bl	19f1c <ull_filter_adv_pdu_update>
	       prev->len - BDADDR_SIZE);
   1a1e8:	7872      	ldrb	r2, [r6, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   1a1ea:	f107 0008 	add.w	r0, r7, #8
   1a1ee:	3a06      	subs	r2, #6
   1a1f0:	f106 0108 	add.w	r1, r6, #8
   1a1f4:	f008 fa94 	bl	22720 <memcpy>
	pdu->len = prev->len;
   1a1f8:	7873      	ldrb	r3, [r6, #1]
   1a1fa:	707b      	strb	r3, [r7, #1]
	pdu->last = idx;
   1a1fc:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
   1a200:	e784      	b.n	1a10c <ull_filter_rpa_update+0xe4>
				LL_ASSERT(!err);
   1a202:	4912      	ldr	r1, [pc, #72]	; (1a24c <ull_filter_rpa_update+0x224>)
   1a204:	4812      	ldr	r0, [pc, #72]	; (1a250 <ull_filter_rpa_update+0x228>)
   1a206:	f240 2321 	movw	r3, #545	; 0x221
   1a20a:	465a      	mov	r2, fp
   1a20c:	f006 fa18 	bl	20640 <printk>
   1a210:	4040      	eors	r0, r0
   1a212:	f380 8811 	msr	BASEPRI, r0
   1a216:	f04f 0003 	mov.w	r0, #3
   1a21a:	df02      	svc	2
   1a21c:	e780      	b.n	1a120 <ull_filter_rpa_update+0xf8>
		last = pdu->last + 1;
   1a21e:	3501      	adds	r5, #1
   1a220:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1a222:	2d02      	cmp	r5, #2
   1a224:	d004      	beq.n	1a230 <ull_filter_rpa_update+0x208>
   1a226:	2127      	movs	r1, #39	; 0x27
   1a228:	2202      	movs	r2, #2
   1a22a:	fb11 2205 	smlabb	r2, r1, r5, r2
   1a22e:	e7c8      	b.n	1a1c2 <ull_filter_rpa_update+0x19a>
   1a230:	462a      	mov	r2, r5
			last = 0U;
   1a232:	2500      	movs	r5, #0
   1a234:	e7c5      	b.n	1a1c2 <ull_filter_rpa_update+0x19a>
   1a236:	bf00      	nop
   1a238:	200013d8 	.word	0x200013d8
   1a23c:	20003fb8 	.word	0x20003fb8
   1a240:	20003e68 	.word	0x20003e68
   1a244:	20003d8c 	.word	0x20003d8c
   1a248:	20003dc4 	.word	0x20003dc4
   1a24c:	0002717c 	.word	0x0002717c
   1a250:	00026ecc 	.word	0x00026ecc
   1a254:	00027784 	.word	0x00027784

0001a258 <rpa_timeout>:
{
   1a258:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   1a25a:	2001      	movs	r0, #1
   1a25c:	f7ff fee4 	bl	1a028 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   1a260:	4b0a      	ldr	r3, [pc, #40]	; (1a28c <rpa_timeout+0x34>)
   1a262:	681a      	ldr	r2, [r3, #0]
   1a264:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a26c:	2100      	movs	r1, #0
   1a26e:	fbe3 0102 	umlal	r0, r1, r3, r2
   1a272:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a276:	2300      	movs	r3, #0
   1a278:	f7e5 ff42 	bl	100 <__aeabi_uldivmod>
}
   1a27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a280:	4602      	mov	r2, r0
   1a282:	460b      	mov	r3, r1
   1a284:	4802      	ldr	r0, [pc, #8]	; (1a290 <rpa_timeout+0x38>)
   1a286:	4903      	ldr	r1, [pc, #12]	; (1a294 <rpa_timeout+0x3c>)
   1a288:	f005 be26 	b.w	1fed8 <k_delayed_work_submit_to_queue>
   1a28c:	20003fb8 	.word	0x20003fb8
   1a290:	20001510 	.word	0x20001510
   1a294:	200013e0 	.word	0x200013e0

0001a298 <ull_filter_rl_find>:
{
   1a298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a29c:	468b      	mov	fp, r1
	if (free) {
   1a29e:	4616      	mov	r6, r2
   1a2a0:	b10a      	cbz	r2, 1a2a6 <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1a2a2:	23ff      	movs	r3, #255	; 0xff
   1a2a4:	7013      	strb	r3, [r2, #0]
   1a2a6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1a30c <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a2aa:	f000 0901 	and.w	r9, r0, #1
   1a2ae:	f108 0a01 	add.w	sl, r8, #1
{
   1a2b2:	2400      	movs	r4, #0
   1a2b4:	e004      	b.n	1a2c0 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a2b6:	454a      	cmp	r2, r9
   1a2b8:	d019      	beq.n	1a2ee <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a2ba:	3401      	adds	r4, #1
   1a2bc:	2c08      	cmp	r4, #8
   1a2be:	d012      	beq.n	1a2e6 <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a2c0:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1a2c4:	00e8      	lsls	r0, r5, #3
   1a2c6:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1a2ca:	07d9      	lsls	r1, r3, #31
   1a2cc:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1a2d0:	b2e7      	uxtb	r7, r4
   1a2d2:	d4f0      	bmi.n	1a2b6 <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1a2d4:	2e00      	cmp	r6, #0
   1a2d6:	d0f0      	beq.n	1a2ba <ull_filter_rl_find+0x22>
   1a2d8:	7833      	ldrb	r3, [r6, #0]
   1a2da:	3401      	adds	r4, #1
   1a2dc:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1a2de:	bf08      	it	eq
   1a2e0:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a2e2:	2c08      	cmp	r4, #8
   1a2e4:	d1ec      	bne.n	1a2c0 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   1a2e6:	27ff      	movs	r7, #255	; 0xff
}
   1a2e8:	4638      	mov	r0, r7
   1a2ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a2ee:	4450      	add	r0, sl
   1a2f0:	2206      	movs	r2, #6
   1a2f2:	4659      	mov	r1, fp
   1a2f4:	f008 fa04 	bl	22700 <memcmp>
   1a2f8:	2800      	cmp	r0, #0
   1a2fa:	d0f5      	beq.n	1a2e8 <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1a2fc:	2e00      	cmp	r6, #0
   1a2fe:	d0dc      	beq.n	1a2ba <ull_filter_rl_find+0x22>
   1a300:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1a304:	07db      	lsls	r3, r3, #31
   1a306:	d4d8      	bmi.n	1a2ba <ull_filter_rl_find+0x22>
   1a308:	e7e6      	b.n	1a2d8 <ull_filter_rl_find+0x40>
   1a30a:	bf00      	nop
   1a30c:	20003e44 	.word	0x20003e44

0001a310 <ll_wl_add>:
{
   1a310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a314:	4605      	mov	r5, r0
   1a316:	b082      	sub	sp, #8
	if (ull_adv_filter_pol_get(0)) {
   1a318:	2000      	movs	r0, #0
   1a31a:	f7fb fb15 	bl	15948 <ull_adv_filter_pol_get>
   1a31e:	2800      	cmp	r0, #0
   1a320:	d140      	bne.n	1a3a4 <ll_wl_add+0x94>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1a322:	f7fb fd35 	bl	15d90 <ull_scan_filter_pol_get>
   1a326:	f010 0401 	ands.w	r4, r0, #1
   1a32a:	d13b      	bne.n	1a3a4 <ll_wl_add+0x94>
	if (addr->type == ADDR_TYPE_ANON) {
   1a32c:	7828      	ldrb	r0, [r5, #0]
   1a32e:	28ff      	cmp	r0, #255	; 0xff
   1a330:	d03c      	beq.n	1a3ac <ll_wl_add+0x9c>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1a332:	f105 0801 	add.w	r8, r5, #1
   1a336:	4641      	mov	r1, r8
   1a338:	f10d 0207 	add.w	r2, sp, #7
   1a33c:	f7ff fba6 	bl	19a8c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1a340:	2807      	cmp	r0, #7
   1a342:	d92b      	bls.n	1a39c <ll_wl_add+0x8c>
	} else if (j >= ARRAY_SIZE(wl)) {
   1a344:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1a348:	2e07      	cmp	r6, #7
   1a34a:	d836      	bhi.n	1a3ba <ll_wl_add+0xaa>
	wl[i].id_addr_type = id_addr->type & 0x1;
   1a34c:	4f1e      	ldr	r7, [pc, #120]	; (1a3c8 <ll_wl_add+0xb8>)
   1a34e:	782a      	ldrb	r2, [r5, #0]
   1a350:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   1a354:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   1a358:	f362 0341 	bfi	r3, r2, #1, #1
   1a35c:	4641      	mov	r1, r8
   1a35e:	2206      	movs	r2, #6
   1a360:	3002      	adds	r0, #2
   1a362:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
   1a366:	f008 f9db 	bl	22720 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a36a:	7828      	ldrb	r0, [r5, #0]
   1a36c:	4622      	mov	r2, r4
   1a36e:	4641      	mov	r1, r8
   1a370:	f7ff ff92 	bl	1a298 <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   1a374:	2807      	cmp	r0, #7
   1a376:	d822      	bhi.n	1a3be <ll_wl_add+0xae>
		rl[j].wl = 1U;
   1a378:	4914      	ldr	r1, [pc, #80]	; (1a3cc <ll_wl_add+0xbc>)
   1a37a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   1a37e:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   1a382:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   1a386:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   1a388:	f043 0320 	orr.w	r3, r3, #32
   1a38c:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
	wl[i].taken = 1U;
   1a390:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   1a394:	f043 0301 	orr.w	r3, r3, #1
   1a398:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   1a39c:	2000      	movs	r0, #0
}
   1a39e:	b002      	add	sp, #8
   1a3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a3a4:	200c      	movs	r0, #12
}
   1a3a6:	b002      	add	sp, #8
   1a3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   1a3ac:	4b08      	ldr	r3, [pc, #32]	; (1a3d0 <ll_wl_add+0xc0>)
   1a3ae:	2201      	movs	r2, #1
		return 0;
   1a3b0:	4620      	mov	r0, r4
		wl_anon = 1U;
   1a3b2:	701a      	strb	r2, [r3, #0]
}
   1a3b4:	b002      	add	sp, #8
   1a3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a3ba:	2007      	movs	r0, #7
	return wl_add(addr);
   1a3bc:	e7f3      	b.n	1a3a6 <ll_wl_add+0x96>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1a3be:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   1a3c2:	22ff      	movs	r2, #255	; 0xff
   1a3c4:	705a      	strb	r2, [r3, #1]
   1a3c6:	e7e3      	b.n	1a390 <ll_wl_add+0x80>
   1a3c8:	20003fbc 	.word	0x20003fbc
   1a3cc:	20003e44 	.word	0x20003e44
   1a3d0:	2000538c 	.word	0x2000538c

0001a3d4 <ll_rl_add>:
{
   1a3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3d8:	4606      	mov	r6, r0
   1a3da:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a3dc:	2000      	movs	r0, #0
{
   1a3de:	460d      	mov	r5, r1
   1a3e0:	4614      	mov	r4, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a3e2:	f7fb faa5 	bl	15930 <ull_adv_is_enabled>
		? 0 : 1;
   1a3e6:	b118      	cbz	r0, 1a3f0 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a3e8:	200c      	movs	r0, #12
}
   1a3ea:	b005      	add	sp, #20
   1a3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3f0:	f7ff fc08 	bl	19c04 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
   1a3f4:	2800      	cmp	r0, #0
   1a3f6:	d0f7      	beq.n	1a3e8 <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   1a3f8:	46b1      	mov	r9, r6
   1a3fa:	f10d 020f 	add.w	r2, sp, #15
   1a3fe:	f819 0b01 	ldrb.w	r0, [r9], #1
   1a402:	4649      	mov	r1, r9
   1a404:	f7ff ff48 	bl	1a298 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a408:	2807      	cmp	r0, #7
   1a40a:	f240 8086 	bls.w	1a51a <ll_rl_add+0x146>
	} else if (j >= ARRAY_SIZE(rl)) {
   1a40e:	f89d 800f 	ldrb.w	r8, [sp, #15]
   1a412:	f1b8 0f07 	cmp.w	r8, #7
   1a416:	d879      	bhi.n	1a50c <ll_rl_add+0x138>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1a418:	eb08 0388 	add.w	r3, r8, r8, lsl #2
   1a41c:	4f47      	ldr	r7, [pc, #284]	; (1a53c <ll_rl_add+0x168>)
   1a41e:	00db      	lsls	r3, r3, #3
   1a420:	1c58      	adds	r0, r3, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a422:	eb08 0a88 	add.w	sl, r8, r8, lsl #2
   1a426:	2206      	movs	r2, #6
   1a428:	4649      	mov	r1, r9
   1a42a:	4438      	add	r0, r7
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1a42c:	9301      	str	r3, [sp, #4]
   1a42e:	f008 f977 	bl	22720 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a432:	7831      	ldrb	r1, [r6, #0]
   1a434:	f817 203a 	ldrb.w	r2, [r7, sl, lsl #3]
   1a438:	ea4f 0bca 	mov.w	fp, sl, lsl #3
   1a43c:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a440:	4628      	mov	r0, r5
   1a442:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a444:	f807 200b 	strb.w	r2, [r7, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a448:	f7f6 fa58 	bl	108fc <mem_nz>
   1a44c:	f817 200b 	ldrb.w	r2, [r7, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1a450:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a452:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1a456:	4620      	mov	r0, r4
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a458:	f807 200b 	strb.w	r2, [r7, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1a45c:	f7f6 fa4e 	bl	108fc <mem_nz>
   1a460:	f817 200b 	ldrb.w	r2, [r7, fp]
	if (rl[i].pirk) {
   1a464:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1a466:	f000 0001 	and.w	r0, r0, #1
   1a46a:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   1a46e:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1a472:	f807 200b 	strb.w	r2, [r7, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a476:	eb07 0aca 	add.w	sl, r7, sl, lsl #3
   1a47a:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
   1a47e:	d01a      	beq.n	1a4b6 <ll_rl_add+0xe2>
		rl[i].pirk_idx = peer_irk_count;
   1a480:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 1a548 <ll_rl_add+0x174>
		peer_irk_rl_ids[peer_irk_count] = i;
   1a484:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 1a54c <ll_rl_add+0x178>
		rl[i].pirk_idx = peer_irk_count;
   1a488:	f89e 1000 	ldrb.w	r1, [lr]
   1a48c:	4a2c      	ldr	r2, [pc, #176]	; (1a540 <ll_rl_add+0x16c>)
		peer_irk_rl_ids[peer_irk_count] = i;
   1a48e:	f80c 8001 	strb.w	r8, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   1a492:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   1a496:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   1a49a:	3101      	adds	r1, #1
   1a49c:	f88e 1000 	strb.w	r1, [lr]
	psrc += length - 1;
   1a4a0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1a4a4:	f105 020f 	add.w	r2, r5, #15
	for (; length > 0; length--) {
   1a4a8:	1e69      	subs	r1, r5, #1
		*pdst++ = *psrc--;
   1a4aa:	f812 5901 	ldrb.w	r5, [r2], #-1
   1a4ae:	f80c 5f01 	strb.w	r5, [ip, #1]!
	for (; length > 0; length--) {
   1a4b2:	428a      	cmp	r2, r1
   1a4b4:	d1f9      	bne.n	1a4aa <ll_rl_add+0xd6>
	if (rl[i].lirk) {
   1a4b6:	bb90      	cbnz	r0, 1a51e <ll_rl_add+0x14a>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1a4b8:	f103 0018 	add.w	r0, r3, #24
   1a4bc:	2206      	movs	r2, #6
   1a4be:	2100      	movs	r1, #0
   1a4c0:	4438      	add	r0, r7
   1a4c2:	f008 f958 	bl	22776 <memset>
	rl[i].dev = 0U;
   1a4c6:	eb0b 0308 	add.w	r3, fp, r8
   1a4ca:	00dc      	lsls	r4, r3, #3
	rl[i].rpas_ready = 0U;
   1a4cc:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1a4d0:	f023 0312 	bic.w	r3, r3, #18
   1a4d4:	553b      	strb	r3, [r7, r4]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a4d6:	4649      	mov	r1, r9
   1a4d8:	7830      	ldrb	r0, [r6, #0]
   1a4da:	2200      	movs	r2, #0
   1a4dc:	f7ff fad6 	bl	19a8c <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1a4e0:	2807      	cmp	r0, #7
   1a4e2:	d815      	bhi.n	1a510 <ll_rl_add+0x13c>
		rl[i].wl = 1U;
   1a4e4:	5d3b      	ldrb	r3, [r7, r4]
		wl[j].rl_idx = i;
   1a4e6:	4a17      	ldr	r2, [pc, #92]	; (1a544 <ll_rl_add+0x170>)
		rl[i].wl = 1U;
   1a4e8:	f043 0320 	orr.w	r3, r3, #32
		wl[j].rl_idx = i;
   1a4ec:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   1a4f0:	553b      	strb	r3, [r7, r4]
		wl[j].rl_idx = i;
   1a4f2:	f880 8001 	strb.w	r8, [r0, #1]
	rl[i].taken = 1U;
   1a4f6:	44d8      	add	r8, fp
	return 0;
   1a4f8:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1a4fa:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   1a4fe:	f043 0301 	orr.w	r3, r3, #1
   1a502:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
}
   1a506:	b005      	add	sp, #20
   1a508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1a50c:	2007      	movs	r0, #7
   1a50e:	e76c      	b.n	1a3ea <ll_rl_add+0x16>
		rl[i].wl = 0U;
   1a510:	5d3b      	ldrb	r3, [r7, r4]
   1a512:	f36f 1345 	bfc	r3, #5, #1
   1a516:	553b      	strb	r3, [r7, r4]
   1a518:	e7ed      	b.n	1a4f6 <ll_rl_add+0x122>
		return BT_HCI_ERR_INVALID_PARAM;
   1a51a:	2012      	movs	r0, #18
   1a51c:	e765      	b.n	1a3ea <ll_rl_add+0x16>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1a51e:	1dd8      	adds	r0, r3, #7
   1a520:	4621      	mov	r1, r4
   1a522:	2210      	movs	r2, #16
   1a524:	4438      	add	r0, r7
   1a526:	9301      	str	r3, [sp, #4]
   1a528:	f008 f8fa 	bl	22720 <memcpy>
		rl[i].local_rpa = NULL;
   1a52c:	eb0b 0208 	add.w	r2, fp, r8
   1a530:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   1a534:	2100      	movs	r1, #0
   1a536:	9b01      	ldr	r3, [sp, #4]
   1a538:	6251      	str	r1, [r2, #36]	; 0x24
   1a53a:	e7bd      	b.n	1a4b8 <ll_rl_add+0xe4>
   1a53c:	20003e44 	.word	0x20003e44
   1a540:	20003dc4 	.word	0x20003dc4
   1a544:	20003fbc 	.word	0x20003fbc
   1a548:	2000538a 	.word	0x2000538a
   1a54c:	20003dbc 	.word	0x20003dbc

0001a550 <ll_rl_remove>:
{
   1a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a554:	4605      	mov	r5, r0
   1a556:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a558:	2000      	movs	r0, #0
   1a55a:	f7fb f9e9 	bl	15930 <ull_adv_is_enabled>
		? 0 : 1;
   1a55e:	b118      	cbz	r0, 1a568 <ll_rl_remove+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a560:	200c      	movs	r0, #12
}
   1a562:	b003      	add	sp, #12
   1a564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a568:	4604      	mov	r4, r0
   1a56a:	f7ff fb4b 	bl	19c04 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
   1a56e:	2800      	cmp	r0, #0
   1a570:	d0f6      	beq.n	1a560 <ll_rl_remove+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a572:	462f      	mov	r7, r5
   1a574:	4622      	mov	r2, r4
   1a576:	f817 0b01 	ldrb.w	r0, [r7], #1
   1a57a:	4639      	mov	r1, r7
   1a57c:	f7ff fe8c 	bl	1a298 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a580:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a582:	4606      	mov	r6, r0
	if (i < ARRAY_SIZE(rl)) {
   1a584:	d903      	bls.n	1a58e <ll_rl_remove+0x3e>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a586:	2002      	movs	r0, #2
}
   1a588:	b003      	add	sp, #12
   1a58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   1a58e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1a64c <ll_rl_remove+0xfc>
   1a592:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a596:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   1a59a:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   1a59e:	075b      	lsls	r3, r3, #29
   1a5a0:	ea4f 0980 	mov.w	r9, r0, lsl #2
   1a5a4:	d52e      	bpl.n	1a604 <ll_rl_remove+0xb4>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1a5a6:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1a650 <ll_rl_remove+0x100>
   1a5aa:	f89a 2000 	ldrb.w	r2, [sl]
   1a5ae:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   1a5b0:	f012 0bff 	ands.w	fp, r2, #255	; 0xff
   1a5b4:	d023      	beq.n	1a5fe <ll_rl_remove+0xae>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1a5b6:	7dcb      	ldrb	r3, [r1, #23]
			if (pj && pi != pj) {
   1a5b8:	455b      	cmp	r3, fp
   1a5ba:	d021      	beq.n	1a600 <ll_rl_remove+0xb0>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   1a5bc:	4820      	ldr	r0, [pc, #128]	; (1a640 <ll_rl_remove+0xf0>)
   1a5be:	9301      	str	r3, [sp, #4]
   1a5c0:	eb00 110b 	add.w	r1, r0, fp, lsl #4
   1a5c4:	2210      	movs	r2, #16
   1a5c6:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   1a5ca:	f008 f8a9 	bl	22720 <memcpy>
   1a5ce:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   1a5d0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a5d4:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   1a5d8:	f818 2032 	ldrb.w	r2, [r8, r2, lsl #3]
   1a5dc:	f012 0f01 	tst.w	r2, #1
   1a5e0:	b2e0      	uxtb	r0, r4
   1a5e2:	f104 0401 	add.w	r4, r4, #1
   1a5e6:	d004      	beq.n	1a5f2 <ll_rl_remove+0xa2>
   1a5e8:	0752      	lsls	r2, r2, #29
   1a5ea:	d502      	bpl.n	1a5f2 <ll_rl_remove+0xa2>
   1a5ec:	7dca      	ldrb	r2, [r1, #23]
   1a5ee:	455a      	cmp	r2, fp
   1a5f0:	d01f      	beq.n	1a632 <ll_rl_remove+0xe2>
				for (k = 0U;
   1a5f2:	2c08      	cmp	r4, #8
   1a5f4:	d1ec      	bne.n	1a5d0 <ll_rl_remove+0x80>
   1a5f6:	f89a 2000 	ldrb.w	r2, [sl]
   1a5fa:	3a01      	subs	r2, #1
   1a5fc:	e000      	b.n	1a600 <ll_rl_remove+0xb0>
   1a5fe:	465a      	mov	r2, fp
			peer_irk_count--;
   1a600:	f88a 2000 	strb.w	r2, [sl]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a604:	7828      	ldrb	r0, [r5, #0]
   1a606:	4639      	mov	r1, r7
   1a608:	2200      	movs	r2, #0
   1a60a:	f7ff fa3f 	bl	19a8c <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1a60e:	2807      	cmp	r0, #7
   1a610:	d804      	bhi.n	1a61c <ll_rl_remove+0xcc>
			wl[j].rl_idx = FILTER_IDX_NONE;
   1a612:	4b0c      	ldr	r3, [pc, #48]	; (1a644 <ll_rl_remove+0xf4>)
   1a614:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a618:	23ff      	movs	r3, #255	; 0xff
   1a61a:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   1a61c:	444e      	add	r6, r9
		return 0;
   1a61e:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   1a620:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
   1a624:	f36f 0300 	bfc	r3, #0, #1
   1a628:	f808 3036 	strb.w	r3, [r8, r6, lsl #3]
}
   1a62c:	b003      	add	sp, #12
   1a62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						peer_irk_rl_ids[pi] = k;
   1a632:	4c05      	ldr	r4, [pc, #20]	; (1a648 <ll_rl_remove+0xf8>)
   1a634:	f89a 2000 	ldrb.w	r2, [sl]
   1a638:	54e0      	strb	r0, [r4, r3]
						rl[k].pirk_idx = pi;
   1a63a:	75cb      	strb	r3, [r1, #23]
						break;
   1a63c:	3a01      	subs	r2, #1
   1a63e:	e7df      	b.n	1a600 <ll_rl_remove+0xb0>
   1a640:	20003dc4 	.word	0x20003dc4
   1a644:	20003fbc 	.word	0x20003fbc
   1a648:	20003dbc 	.word	0x20003dbc
   1a64c:	20003e44 	.word	0x20003e44
   1a650:	2000538a 	.word	0x2000538a

0001a654 <ll_rl_crpa_set>:
{
   1a654:	b538      	push	{r3, r4, r5, lr}
   1a656:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   1a658:	795b      	ldrb	r3, [r3, #5]
   1a65a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a65e:	2b40      	cmp	r3, #64	; 0x40
   1a660:	d000      	beq.n	1a664 <ll_rl_crpa_set+0x10>
}
   1a662:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   1a664:	b119      	cbz	r1, 1a66e <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   1a666:	2200      	movs	r2, #0
   1a668:	f7ff fe16 	bl	1a298 <ull_filter_rl_find>
   1a66c:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1a66e:	2a07      	cmp	r2, #7
   1a670:	d8f7      	bhi.n	1a662 <ll_rl_crpa_set+0xe>
   1a672:	4b09      	ldr	r3, [pc, #36]	; (1a698 <ll_rl_crpa_set+0x44>)
   1a674:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1a678:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   1a67c:	07c9      	lsls	r1, r1, #31
   1a67e:	d5f0      	bpl.n	1a662 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1a680:	2118      	movs	r1, #24
   1a682:	2028      	movs	r0, #40	; 0x28
   1a684:	fb10 1002 	smlabb	r0, r0, r2, r1
   1a688:	4418      	add	r0, r3
   1a68a:	4621      	mov	r1, r4
   1a68c:	2206      	movs	r2, #6
}
   1a68e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1a692:	f008 b845 	b.w	22720 <memcpy>
   1a696:	bf00      	nop
   1a698:	20003e44 	.word	0x20003e44

0001a69c <ll_rl_crpa_get>:
{
   1a69c:	b538      	push	{r3, r4, r5, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a69e:	4603      	mov	r3, r0
{
   1a6a0:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a6a2:	f813 0b01 	ldrb.w	r0, [r3], #1
   1a6a6:	2200      	movs	r2, #0
   1a6a8:	4619      	mov	r1, r3
   1a6aa:	f7ff fdf5 	bl	1a298 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1a6ae:	2807      	cmp	r0, #7
   1a6b0:	d901      	bls.n	1a6b6 <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a6b2:	2002      	movs	r0, #2
}
   1a6b4:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1a6b6:	4c09      	ldr	r4, [pc, #36]	; (1a6dc <ll_rl_crpa_get+0x40>)
   1a6b8:	2328      	movs	r3, #40	; 0x28
   1a6ba:	2218      	movs	r2, #24
   1a6bc:	fb13 2000 	smlabb	r0, r3, r0, r2
   1a6c0:	4404      	add	r4, r0
   1a6c2:	4620      	mov	r0, r4
   1a6c4:	2106      	movs	r1, #6
   1a6c6:	f7f6 f919 	bl	108fc <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1a6ca:	2800      	cmp	r0, #0
   1a6cc:	d0f1      	beq.n	1a6b2 <ll_rl_crpa_get+0x16>
   1a6ce:	4621      	mov	r1, r4
   1a6d0:	4628      	mov	r0, r5
   1a6d2:	2206      	movs	r2, #6
   1a6d4:	f008 f824 	bl	22720 <memcpy>
		return 0;
   1a6d8:	2000      	movs	r0, #0
}
   1a6da:	bd38      	pop	{r3, r4, r5, pc}
   1a6dc:	20003e44 	.word	0x20003e44

0001a6e0 <ll_rl_lrpa_get>:
{
   1a6e0:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a6e2:	4603      	mov	r3, r0
{
   1a6e4:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a6e6:	f813 0b01 	ldrb.w	r0, [r3], #1
   1a6ea:	2200      	movs	r2, #0
   1a6ec:	4619      	mov	r1, r3
   1a6ee:	f7ff fdd3 	bl	1a298 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a6f2:	2807      	cmp	r0, #7
   1a6f4:	d901      	bls.n	1a6fa <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a6f6:	2002      	movs	r0, #2
}
   1a6f8:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1a6fa:	4b06      	ldr	r3, [pc, #24]	; (1a714 <ll_rl_lrpa_get+0x34>)
   1a6fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a700:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1a704:	2206      	movs	r2, #6
   1a706:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a708:	4620      	mov	r0, r4
   1a70a:	f008 f809 	bl	22720 <memcpy>
		return 0;
   1a70e:	2000      	movs	r0, #0
}
   1a710:	bd10      	pop	{r4, pc}
   1a712:	bf00      	nop
   1a714:	20003e44 	.word	0x20003e44

0001a718 <ll_priv_mode_set>:
{
   1a718:	b570      	push	{r4, r5, r6, lr}
   1a71a:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a71c:	2000      	movs	r0, #0
{
   1a71e:	460e      	mov	r6, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a720:	f7fb f906 	bl	15930 <ull_adv_is_enabled>
		? 0 : 1;
   1a724:	b108      	cbz	r0, 1a72a <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a726:	200c      	movs	r0, #12
}
   1a728:	bd70      	pop	{r4, r5, r6, pc}
   1a72a:	4604      	mov	r4, r0
   1a72c:	f7ff fa6a 	bl	19c04 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
   1a730:	2800      	cmp	r0, #0
   1a732:	d0f8      	beq.n	1a726 <ll_priv_mode_set+0xe>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a734:	4629      	mov	r1, r5
   1a736:	4622      	mov	r2, r4
   1a738:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a73c:	f7ff fdac 	bl	1a298 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a740:	2807      	cmp	r0, #7
   1a742:	d81a      	bhi.n	1a77a <ll_priv_mode_set+0x62>
		switch (mode) {
   1a744:	b176      	cbz	r6, 1a764 <ll_priv_mode_set+0x4c>
   1a746:	2e01      	cmp	r6, #1
   1a748:	d10a      	bne.n	1a760 <ll_priv_mode_set+0x48>
			rl[i].dev = 1U;
   1a74a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a74e:	490c      	ldr	r1, [pc, #48]	; (1a780 <ll_priv_mode_set+0x68>)
   1a750:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   1a754:	f042 0210 	orr.w	r2, r2, #16
   1a758:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   1a75c:	4620      	mov	r0, r4
}
   1a75e:	bd70      	pop	{r4, r5, r6, pc}
		switch (mode) {
   1a760:	2012      	movs	r0, #18
}
   1a762:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   1a764:	4b06      	ldr	r3, [pc, #24]	; (1a780 <ll_priv_mode_set+0x68>)
   1a766:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a76a:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   1a76e:	f366 1204 	bfi	r2, r6, #4, #1
   1a772:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   1a776:	4630      	mov	r0, r6
}
   1a778:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a77a:	2002      	movs	r0, #2
}
   1a77c:	bd70      	pop	{r4, r5, r6, pc}
   1a77e:	bf00      	nop
   1a780:	20003e44 	.word	0x20003e44

0001a784 <ull_filter_reset>:
	wl_anon = 0U;
   1a784:	4a31      	ldr	r2, [pc, #196]	; (1a84c <ull_filter_reset+0xc8>)
   1a786:	4932      	ldr	r1, [pc, #200]	; (1a850 <ull_filter_reset+0xcc>)
{
   1a788:	b4f0      	push	{r4, r5, r6, r7}
	wl_anon = 0U;
   1a78a:	2300      	movs	r3, #0
   1a78c:	4c31      	ldr	r4, [pc, #196]	; (1a854 <ull_filter_reset+0xd0>)
   1a78e:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   1a790:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1a794:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1a796:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   1a798:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1a79c:	d805      	bhi.n	1a7aa <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   1a79e:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
   1a7a2:	f36f 1245 	bfc	r2, #5, #1
   1a7a6:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
		wl[i].taken = 0U;
   1a7aa:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1a7ae:	f36f 0200 	bfc	r2, #0, #1
   1a7b2:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1a7b6:	3301      	adds	r3, #1
   1a7b8:	2b08      	cmp	r3, #8
   1a7ba:	d1e9      	bne.n	1a790 <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   1a7bc:	780f      	ldrb	r7, [r1, #0]
   1a7be:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
   1a7c2:	f891 4050 	ldrb.w	r4, [r1, #80]	; 0x50
   1a7c6:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   1a7ca:	f891 60a0 	ldrb.w	r6, [r1, #160]	; 0xa0
	rl_enable = 0U;
   1a7ce:	2300      	movs	r3, #0
		rl[i].taken = 0U;
   1a7d0:	f363 0700 	bfi	r7, r3, #0, #1
   1a7d4:	700f      	strb	r7, [r1, #0]
	rl_enable = 0U;
   1a7d6:	4f20      	ldr	r7, [pc, #128]	; (1a858 <ull_filter_reset+0xd4>)
		rl[i].taken = 0U;
   1a7d8:	f363 0500 	bfi	r5, r3, #0, #1
   1a7dc:	f363 0400 	bfi	r4, r3, #0, #1
   1a7e0:	f363 0200 	bfi	r2, r3, #0, #1
	rl_enable = 0U;
   1a7e4:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   1a7e6:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
	peer_irk_count = 0U;
   1a7ea:	4f1c      	ldr	r7, [pc, #112]	; (1a85c <ull_filter_reset+0xd8>)
		rl[i].taken = 0U;
   1a7ec:	f891 50c8 	ldrb.w	r5, [r1, #200]	; 0xc8
   1a7f0:	f881 4050 	strb.w	r4, [r1, #80]	; 0x50
   1a7f4:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   1a7f8:	f891 40f0 	ldrb.w	r4, [r1, #240]	; 0xf0
   1a7fc:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   1a800:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   1a802:	f363 0600 	bfi	r6, r3, #0, #1
   1a806:	f363 0500 	bfi	r5, r3, #0, #1
   1a80a:	f363 0400 	bfi	r4, r3, #0, #1
   1a80e:	f363 0200 	bfi	r2, r3, #0, #1
   1a812:	f881 60a0 	strb.w	r6, [r1, #160]	; 0xa0
	rpa_last_ms = -1;
   1a816:	4b12      	ldr	r3, [pc, #72]	; (1a860 <ull_filter_reset+0xdc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a818:	4e12      	ldr	r6, [pc, #72]	; (1a864 <ull_filter_reset+0xe0>)
   1a81a:	4f13      	ldr	r7, [pc, #76]	; (1a868 <ull_filter_reset+0xe4>)
		rl[i].taken = 0U;
   1a81c:	f881 50c8 	strb.w	r5, [r1, #200]	; 0xc8
   1a820:	f881 40f0 	strb.w	r4, [r1, #240]	; 0xf0
	rpa_last_ms = -1;
   1a824:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a828:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a82c:	e9c3 4500 	strd	r4, r5, [r3]
		rl[i].taken = 0U;
   1a830:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a834:	6037      	str	r7, [r6, #0]
	if (init) {
   1a836:	b120      	cbz	r0, 1a842 <ull_filter_reset+0xbe>
}
   1a838:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1a83a:	490c      	ldr	r1, [pc, #48]	; (1a86c <ull_filter_reset+0xe8>)
   1a83c:	480c      	ldr	r0, [pc, #48]	; (1a870 <ull_filter_reset+0xec>)
   1a83e:	f00b bb85 	b.w	25f4c <k_delayed_work_init>
}
   1a842:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_cancel(&rpa_work);
   1a844:	480a      	ldr	r0, [pc, #40]	; (1a870 <ull_filter_reset+0xec>)
   1a846:	f00b bb89 	b.w	25f5c <k_delayed_work_cancel>
   1a84a:	bf00      	nop
   1a84c:	2000538c 	.word	0x2000538c
   1a850:	20003e44 	.word	0x20003e44
   1a854:	20003fbc 	.word	0x20003fbc
   1a858:	2000538b 	.word	0x2000538b
   1a85c:	2000538a 	.word	0x2000538a
   1a860:	200013d8 	.word	0x200013d8
   1a864:	20003fb8 	.word	0x20003fb8
   1a868:	000dbba0 	.word	0x000dbba0
   1a86c:	0001a259 	.word	0x0001a259
   1a870:	200013e0 	.word	0x200013e0

0001a874 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   1a874:	2807      	cmp	r0, #7
   1a876:	d807      	bhi.n	1a888 <ull_filter_lll_lrpa_used+0x14>
   1a878:	4b04      	ldr	r3, [pc, #16]	; (1a88c <ull_filter_lll_lrpa_used+0x18>)
   1a87a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a87e:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   1a882:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1a886:	4770      	bx	lr
   1a888:	2000      	movs	r0, #0
}
   1a88a:	4770      	bx	lr
   1a88c:	20003e44 	.word	0x20003e44

0001a890 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1a890:	2807      	cmp	r0, #7
   1a892:	d80d      	bhi.n	1a8b0 <ull_filter_lll_lrpa_get+0x20>
   1a894:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a898:	4906      	ldr	r1, [pc, #24]	; (1a8b4 <ull_filter_lll_lrpa_get+0x24>)
   1a89a:	f811 3030 	ldrb.w	r3, [r1, r0, lsl #3]
   1a89e:	071a      	lsls	r2, r3, #28
   1a8a0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
   1a8a4:	d504      	bpl.n	1a8b0 <ull_filter_lll_lrpa_get+0x20>
   1a8a6:	079b      	lsls	r3, r3, #30
   1a8a8:	d502      	bpl.n	1a8b0 <ull_filter_lll_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   1a8aa:	4408      	add	r0, r1
   1a8ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1a8ae:	4770      	bx	lr
		return NULL;
   1a8b0:	2000      	movs	r0, #0
   1a8b2:	4770      	bx	lr
   1a8b4:	20003e44 	.word	0x20003e44

0001a8b8 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1a8b8:	4b02      	ldr	r3, [pc, #8]	; (1a8c4 <ull_filter_lll_irks_get+0xc>)
   1a8ba:	781b      	ldrb	r3, [r3, #0]
   1a8bc:	7003      	strb	r3, [r0, #0]
}
   1a8be:	4802      	ldr	r0, [pc, #8]	; (1a8c8 <ull_filter_lll_irks_get+0x10>)
   1a8c0:	4770      	bx	lr
   1a8c2:	bf00      	nop
   1a8c4:	2000538a 	.word	0x2000538a
   1a8c8:	20003dc4 	.word	0x20003dc4

0001a8cc <ull_filter_lll_rl_idx>:
{
   1a8cc:	b538      	push	{r3, r4, r5, lr}
   1a8ce:	460c      	mov	r4, r1
	if (whitelist) {
   1a8d0:	b150      	cbz	r0, 1a8e8 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1a8d2:	2907      	cmp	r1, #7
   1a8d4:	d822      	bhi.n	1a91c <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(wl[devmatch_id].taken);
   1a8d6:	4d2a      	ldr	r5, [pc, #168]	; (1a980 <ull_filter_lll_rl_idx+0xb4>)
   1a8d8:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1a8dc:	07da      	lsls	r2, r3, #31
   1a8de:	d52f      	bpl.n	1a940 <ull_filter_lll_rl_idx+0x74>
		i = wl[devmatch_id].rl_idx;
   1a8e0:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1a8e4:	7860      	ldrb	r0, [r4, #1]
}
   1a8e6:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1a8e8:	2907      	cmp	r1, #7
   1a8ea:	d83a      	bhi.n	1a962 <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   1a8ec:	4b25      	ldr	r3, [pc, #148]	; (1a984 <ull_filter_lll_rl_idx+0xb8>)
   1a8ee:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a8f2:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1a8f6:	07db      	lsls	r3, r3, #31
   1a8f8:	d501      	bpl.n	1a8fe <ull_filter_lll_rl_idx+0x32>
   1a8fa:	4620      	mov	r0, r4
}
   1a8fc:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   1a8fe:	4a22      	ldr	r2, [pc, #136]	; (1a988 <ull_filter_lll_rl_idx+0xbc>)
   1a900:	4922      	ldr	r1, [pc, #136]	; (1a98c <ull_filter_lll_rl_idx+0xc0>)
   1a902:	4823      	ldr	r0, [pc, #140]	; (1a990 <ull_filter_lll_rl_idx+0xc4>)
   1a904:	f240 23bb 	movw	r3, #699	; 0x2bb
   1a908:	f005 fe9a 	bl	20640 <printk>
   1a90c:	4040      	eors	r0, r0
   1a90e:	f380 8811 	msr	BASEPRI, r0
   1a912:	f04f 0003 	mov.w	r0, #3
   1a916:	df02      	svc	2
   1a918:	4620      	mov	r0, r4
}
   1a91a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1a91c:	4a1a      	ldr	r2, [pc, #104]	; (1a988 <ull_filter_lll_rl_idx+0xbc>)
   1a91e:	491d      	ldr	r1, [pc, #116]	; (1a994 <ull_filter_lll_rl_idx+0xc8>)
   1a920:	481b      	ldr	r0, [pc, #108]	; (1a990 <ull_filter_lll_rl_idx+0xc4>)
   1a922:	f240 23b5 	movw	r3, #693	; 0x2b5
   1a926:	f005 fe8b 	bl	20640 <printk>
   1a92a:	4040      	eors	r0, r0
   1a92c:	f380 8811 	msr	BASEPRI, r0
   1a930:	f04f 0003 	mov.w	r0, #3
   1a934:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   1a936:	4d12      	ldr	r5, [pc, #72]	; (1a980 <ull_filter_lll_rl_idx+0xb4>)
   1a938:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1a93c:	07da      	lsls	r2, r3, #31
   1a93e:	d4cf      	bmi.n	1a8e0 <ull_filter_lll_rl_idx+0x14>
   1a940:	4a11      	ldr	r2, [pc, #68]	; (1a988 <ull_filter_lll_rl_idx+0xbc>)
   1a942:	4915      	ldr	r1, [pc, #84]	; (1a998 <ull_filter_lll_rl_idx+0xcc>)
   1a944:	4812      	ldr	r0, [pc, #72]	; (1a990 <ull_filter_lll_rl_idx+0xc4>)
   1a946:	f240 23b6 	movw	r3, #694	; 0x2b6
   1a94a:	f005 fe79 	bl	20640 <printk>
   1a94e:	4040      	eors	r0, r0
   1a950:	f380 8811 	msr	BASEPRI, r0
   1a954:	f04f 0003 	mov.w	r0, #3
   1a958:	df02      	svc	2
		i = wl[devmatch_id].rl_idx;
   1a95a:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1a95e:	7860      	ldrb	r0, [r4, #1]
   1a960:	e7c1      	b.n	1a8e6 <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1a962:	4a09      	ldr	r2, [pc, #36]	; (1a988 <ull_filter_lll_rl_idx+0xbc>)
   1a964:	490d      	ldr	r1, [pc, #52]	; (1a99c <ull_filter_lll_rl_idx+0xd0>)
   1a966:	480a      	ldr	r0, [pc, #40]	; (1a990 <ull_filter_lll_rl_idx+0xc4>)
   1a968:	f240 23b9 	movw	r3, #697	; 0x2b9
   1a96c:	f005 fe68 	bl	20640 <printk>
   1a970:	4040      	eors	r0, r0
   1a972:	f380 8811 	msr	BASEPRI, r0
   1a976:	f04f 0003 	mov.w	r0, #3
   1a97a:	df02      	svc	2
   1a97c:	e7b6      	b.n	1a8ec <ull_filter_lll_rl_idx+0x20>
   1a97e:	bf00      	nop
   1a980:	20003fbc 	.word	0x20003fbc
   1a984:	20003e44 	.word	0x20003e44
   1a988:	00027784 	.word	0x00027784
   1a98c:	0002795c 	.word	0x0002795c
   1a990:	00026ecc 	.word	0x00026ecc
   1a994:	000277fc 	.word	0x000277fc
   1a998:	000278a0 	.word	0x000278a0
   1a99c:	000278b8 	.word	0x000278b8

0001a9a0 <ull_filter_lll_rl_irk_idx>:
{
   1a9a0:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1a9a2:	4b20      	ldr	r3, [pc, #128]	; (1aa24 <ull_filter_lll_rl_irk_idx+0x84>)
   1a9a4:	781b      	ldrb	r3, [r3, #0]
   1a9a6:	4283      	cmp	r3, r0
{
   1a9a8:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1a9aa:	d90c      	bls.n	1a9c6 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1a9ac:	4b1e      	ldr	r3, [pc, #120]	; (1aa28 <ull_filter_lll_rl_irk_idx+0x88>)
   1a9ae:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1a9b0:	2c07      	cmp	r4, #7
   1a9b2:	d819      	bhi.n	1a9e8 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1a9b4:	4b1d      	ldr	r3, [pc, #116]	; (1aa2c <ull_filter_lll_rl_irk_idx+0x8c>)
   1a9b6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a9ba:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1a9be:	07db      	lsls	r3, r3, #31
   1a9c0:	d520      	bpl.n	1aa04 <ull_filter_lll_rl_irk_idx+0x64>
}
   1a9c2:	4620      	mov	r0, r4
   1a9c4:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1a9c6:	4a1a      	ldr	r2, [pc, #104]	; (1aa30 <ull_filter_lll_rl_irk_idx+0x90>)
   1a9c8:	491a      	ldr	r1, [pc, #104]	; (1aa34 <ull_filter_lll_rl_irk_idx+0x94>)
   1a9ca:	481b      	ldr	r0, [pc, #108]	; (1aa38 <ull_filter_lll_rl_irk_idx+0x98>)
   1a9cc:	f240 23c5 	movw	r3, #709	; 0x2c5
   1a9d0:	f005 fe36 	bl	20640 <printk>
   1a9d4:	4040      	eors	r0, r0
   1a9d6:	f380 8811 	msr	BASEPRI, r0
   1a9da:	f04f 0003 	mov.w	r0, #3
   1a9de:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1a9e0:	4b11      	ldr	r3, [pc, #68]	; (1aa28 <ull_filter_lll_rl_irk_idx+0x88>)
   1a9e2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1a9e4:	2c07      	cmp	r4, #7
   1a9e6:	d9e5      	bls.n	1a9b4 <ull_filter_lll_rl_irk_idx+0x14>
   1a9e8:	4a11      	ldr	r2, [pc, #68]	; (1aa30 <ull_filter_lll_rl_irk_idx+0x90>)
   1a9ea:	4914      	ldr	r1, [pc, #80]	; (1aa3c <ull_filter_lll_rl_irk_idx+0x9c>)
   1a9ec:	4812      	ldr	r0, [pc, #72]	; (1aa38 <ull_filter_lll_rl_irk_idx+0x98>)
   1a9ee:	f240 23c7 	movw	r3, #711	; 0x2c7
   1a9f2:	f005 fe25 	bl	20640 <printk>
   1a9f6:	4040      	eors	r0, r0
   1a9f8:	f380 8811 	msr	BASEPRI, r0
   1a9fc:	f04f 0003 	mov.w	r0, #3
   1aa00:	df02      	svc	2
   1aa02:	e7d7      	b.n	1a9b4 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1aa04:	4a0a      	ldr	r2, [pc, #40]	; (1aa30 <ull_filter_lll_rl_irk_idx+0x90>)
   1aa06:	490e      	ldr	r1, [pc, #56]	; (1aa40 <ull_filter_lll_rl_irk_idx+0xa0>)
   1aa08:	480b      	ldr	r0, [pc, #44]	; (1aa38 <ull_filter_lll_rl_irk_idx+0x98>)
   1aa0a:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   1aa0e:	f005 fe17 	bl	20640 <printk>
   1aa12:	4040      	eors	r0, r0
   1aa14:	f380 8811 	msr	BASEPRI, r0
   1aa18:	f04f 0003 	mov.w	r0, #3
   1aa1c:	df02      	svc	2
}
   1aa1e:	4620      	mov	r0, r4
   1aa20:	bd10      	pop	{r4, pc}
   1aa22:	bf00      	nop
   1aa24:	2000538a 	.word	0x2000538a
   1aa28:	20003dbc 	.word	0x20003dbc
   1aa2c:	20003e44 	.word	0x20003e44
   1aa30:	00027784 	.word	0x00027784
   1aa34:	00027968 	.word	0x00027968
   1aa38:	00026ecc 	.word	0x00026ecc
   1aa3c:	00027988 	.word	0x00027988
   1aa40:	0002795c 	.word	0x0002795c

0001aa44 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1aa44:	2807      	cmp	r0, #7
   1aa46:	d823      	bhi.n	1aa90 <ull_filter_lll_irk_whitelisted+0x4c>
{
   1aa48:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   1aa4a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1aa4e:	4e11      	ldr	r6, [pc, #68]	; (1aa94 <ull_filter_lll_irk_whitelisted+0x50>)
   1aa50:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1aa54:	07db      	lsls	r3, r3, #31
   1aa56:	4604      	mov	r4, r0
   1aa58:	ea4f 0580 	mov.w	r5, r0, lsl #2
   1aa5c:	d505      	bpl.n	1aa6a <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   1aa5e:	442c      	add	r4, r5
   1aa60:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1aa64:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1aa68:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1aa6a:	4a0b      	ldr	r2, [pc, #44]	; (1aa98 <ull_filter_lll_irk_whitelisted+0x54>)
   1aa6c:	490b      	ldr	r1, [pc, #44]	; (1aa9c <ull_filter_lll_irk_whitelisted+0x58>)
   1aa6e:	480c      	ldr	r0, [pc, #48]	; (1aaa0 <ull_filter_lll_irk_whitelisted+0x5c>)
   1aa70:	f240 23d3 	movw	r3, #723	; 0x2d3
   1aa74:	f005 fde4 	bl	20640 <printk>
   1aa78:	4040      	eors	r0, r0
   1aa7a:	f380 8811 	msr	BASEPRI, r0
   1aa7e:	f04f 0003 	mov.w	r0, #3
   1aa82:	df02      	svc	2
	return rl[rl_idx].wl;
   1aa84:	442c      	add	r4, r5
   1aa86:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1aa8a:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1aa8e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1aa90:	2000      	movs	r0, #0
}
   1aa92:	4770      	bx	lr
   1aa94:	20003e44 	.word	0x20003e44
   1aa98:	00027784 	.word	0x00027784
   1aa9c:	000277d4 	.word	0x000277d4
   1aaa0:	00026ecc 	.word	0x00026ecc

0001aaa4 <ull_filter_lll_get>:
		return &wl_filter;
   1aaa4:	4a03      	ldr	r2, [pc, #12]	; (1aab4 <ull_filter_lll_get+0x10>)
   1aaa6:	4b04      	ldr	r3, [pc, #16]	; (1aab8 <ull_filter_lll_get+0x14>)
}
   1aaa8:	2800      	cmp	r0, #0
   1aaaa:	bf0c      	ite	eq
   1aaac:	4610      	moveq	r0, r2
   1aaae:	4618      	movne	r0, r3
   1aab0:	4770      	bx	lr
   1aab2:	bf00      	nop
   1aab4:	20003f84 	.word	0x20003f84
   1aab8:	20003ffc 	.word	0x20003ffc

0001aabc <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1aabc:	4b14      	ldr	r3, [pc, #80]	; (1ab10 <ull_filter_lll_rl_idx_allowed+0x54>)
   1aabe:	781b      	ldrb	r3, [r3, #0]
   1aac0:	b19b      	cbz	r3, 1aaea <ull_filter_lll_rl_idx_allowed+0x2e>
   1aac2:	2907      	cmp	r1, #7
{
   1aac4:	b570      	push	{r4, r5, r6, lr}
   1aac6:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1aac8:	d80d      	bhi.n	1aae6 <ull_filter_lll_rl_idx_allowed+0x2a>
   1aaca:	b960      	cbnz	r0, 1aae6 <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   1aacc:	4e11      	ldr	r6, [pc, #68]	; (1ab14 <ull_filter_lll_rl_idx_allowed+0x58>)
   1aace:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   1aad2:	008d      	lsls	r5, r1, #2
   1aad4:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1aad8:	07da      	lsls	r2, r3, #31
   1aada:	d50b      	bpl.n	1aaf4 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1aadc:	442c      	add	r4, r5
   1aade:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1aae2:	0743      	lsls	r3, r0, #29
   1aae4:	d403      	bmi.n	1aaee <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   1aae6:	2001      	movs	r0, #1
}
   1aae8:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   1aaea:	2001      	movs	r0, #1
}
   1aaec:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1aaee:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   1aaf2:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1aaf4:	4a08      	ldr	r2, [pc, #32]	; (1ab18 <ull_filter_lll_rl_idx_allowed+0x5c>)
   1aaf6:	4909      	ldr	r1, [pc, #36]	; (1ab1c <ull_filter_lll_rl_idx_allowed+0x60>)
   1aaf8:	4809      	ldr	r0, [pc, #36]	; (1ab20 <ull_filter_lll_rl_idx_allowed+0x64>)
   1aafa:	f240 23fb 	movw	r3, #763	; 0x2fb
   1aafe:	f005 fd9f 	bl	20640 <printk>
   1ab02:	4040      	eors	r0, r0
   1ab04:	f380 8811 	msr	BASEPRI, r0
   1ab08:	f04f 0003 	mov.w	r0, #3
   1ab0c:	df02      	svc	2
   1ab0e:	e7e5      	b.n	1aadc <ull_filter_lll_rl_idx_allowed+0x20>
   1ab10:	2000538b 	.word	0x2000538b
   1ab14:	20003e44 	.word	0x20003e44
   1ab18:	00027784 	.word	0x00027784
   1ab1c:	000277d4 	.word	0x000277d4
   1ab20:	00026ecc 	.word	0x00026ecc

0001ab24 <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1ab24:	4b1c      	ldr	r3, [pc, #112]	; (1ab98 <ull_filter_lll_rl_addr_allowed+0x74>)
   1ab26:	781b      	ldrb	r3, [r3, #0]
   1ab28:	b1fb      	cbz	r3, 1ab6a <ull_filter_lll_rl_addr_allowed+0x46>
   1ab2a:	7813      	ldrb	r3, [r2, #0]
   1ab2c:	2bff      	cmp	r3, #255	; 0xff
   1ab2e:	d11c      	bne.n	1ab6a <ull_filter_lll_rl_addr_allowed+0x46>
{
   1ab30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ab34:	4d19      	ldr	r5, [pc, #100]	; (1ab9c <ull_filter_lll_rl_addr_allowed+0x78>)
   1ab36:	4606      	mov	r6, r0
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1ab38:	2300      	movs	r3, #0
   1ab3a:	1faf      	subs	r7, r5, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1ab3c:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   1ab40:	fa5f fe83 	uxtb.w	lr, r3
   1ab44:	f817 4034 	ldrb.w	r4, [r7, r4, lsl #3]
   1ab48:	f014 0001 	ands.w	r0, r4, #1
   1ab4c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   1ab50:	d003      	beq.n	1ab5a <ull_filter_lll_rl_addr_allowed+0x36>
   1ab52:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1ab56:	42b4      	cmp	r4, r6
   1ab58:	d009      	beq.n	1ab6e <ull_filter_lll_rl_addr_allowed+0x4a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ab5a:	3301      	adds	r3, #1
   1ab5c:	2b08      	cmp	r3, #8
   1ab5e:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1ab62:	d1eb      	bne.n	1ab3c <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
   1ab64:	2001      	movs	r0, #1
}
   1ab66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   1ab6a:	2001      	movs	r0, #1
}
   1ab6c:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1ab6e:	1fac      	subs	r4, r5, #6
   1ab70:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
				if (addr[j] != id_addr[j]) {
   1ab74:	f814 af01 	ldrb.w	sl, [r4, #1]!
   1ab78:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1ab7c:	45ca      	cmp	sl, r9
   1ab7e:	d1ec      	bne.n	1ab5a <ull_filter_lll_rl_addr_allowed+0x36>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1ab80:	42ac      	cmp	r4, r5
   1ab82:	d1f7      	bne.n	1ab74 <ull_filter_lll_rl_addr_allowed+0x50>
				return !rl[i].pirk || rl[i].dev;
   1ab84:	4463      	add	r3, ip
				*rl_idx = i;
   1ab86:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   1ab8a:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1ab8e:	075a      	lsls	r2, r3, #29
   1ab90:	d5e9      	bpl.n	1ab66 <ull_filter_lll_rl_addr_allowed+0x42>
   1ab92:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1ab96:	e7e6      	b.n	1ab66 <ull_filter_lll_rl_addr_allowed+0x42>
   1ab98:	2000538b 	.word	0x2000538b
   1ab9c:	20003e4a 	.word	0x20003e4a

0001aba0 <ull_filter_lll_rl_addr_resolve>:
{
   1aba0:	b430      	push	{r4, r5}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1aba2:	4b0e      	ldr	r3, [pc, #56]	; (1abdc <ull_filter_lll_rl_addr_resolve+0x3c>)
   1aba4:	781c      	ldrb	r4, [r3, #0]
   1aba6:	b174      	cbz	r4, 1abc6 <ull_filter_lll_rl_addr_resolve+0x26>
   1aba8:	2a07      	cmp	r2, #7
   1abaa:	d80c      	bhi.n	1abc6 <ull_filter_lll_rl_addr_resolve+0x26>
   1abac:	4c0c      	ldr	r4, [pc, #48]	; (1abe0 <ull_filter_lll_rl_addr_resolve+0x40>)
   1abae:	eb02 0582 	add.w	r5, r2, r2, lsl #2
   1abb2:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
   1abb6:	072b      	lsls	r3, r5, #28
   1abb8:	d505      	bpl.n	1abc6 <ull_filter_lll_rl_addr_resolve+0x26>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   1abba:	b120      	cbz	r0, 1abc6 <ull_filter_lll_rl_addr_resolve+0x26>
   1abbc:	794b      	ldrb	r3, [r1, #5]
   1abbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1abc2:	2b40      	cmp	r3, #64	; 0x40
   1abc4:	d002      	beq.n	1abcc <ull_filter_lll_rl_addr_resolve+0x2c>
}
   1abc6:	2000      	movs	r0, #0
   1abc8:	bc30      	pop	{r4, r5}
   1abca:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1abcc:	2028      	movs	r0, #40	; 0x28
   1abce:	fb00 4002 	mla	r0, r0, r2, r4
   1abd2:	3007      	adds	r0, #7
}
   1abd4:	bc30      	pop	{r4, r5}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1abd6:	f007 be13 	b.w	22800 <bt_rpa_irk_matches>
   1abda:	bf00      	nop
   1abdc:	2000538b 	.word	0x2000538b
   1abe0:	20003e44 	.word	0x20003e44

0001abe4 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   1abe4:	4b02      	ldr	r3, [pc, #8]	; (1abf0 <ull_filter_lll_rl_enabled+0xc>)
   1abe6:	7818      	ldrb	r0, [r3, #0]
}
   1abe8:	3800      	subs	r0, #0
   1abea:	bf18      	it	ne
   1abec:	2001      	movne	r0, #1
   1abee:	4770      	bx	lr
   1abf0:	2000538b 	.word	0x2000538b

0001abf4 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1abf4:	4668      	mov	r0, sp
   1abf6:	f020 0107 	bic.w	r1, r0, #7
   1abfa:	468d      	mov	sp, r1
   1abfc:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	isr_radio();
   1abfe:	f002 fb03 	bl	1d208 <isr_radio>

	ISR_DIRECT_PM();
   1ac02:	f7eb fe7d 	bl	6900 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1ac06:	f7ec f977 	bl	6ef8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1ac0a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1ac0e:	4685      	mov	sp, r0
   1ac10:	4770      	bx	lr
   1ac12:	bf00      	nop

0001ac14 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   1ac14:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1ac16:	4b09      	ldr	r3, [pc, #36]	; (1ac3c <rtc0_nrf5_isr+0x28>)
   1ac18:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1ac1c:	b93a      	cbnz	r2, 1ac2e <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1ac1e:	2001      	movs	r0, #1
   1ac20:	f7f5 ff4e 	bl	10ac0 <mayfly_run>
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
#endif

	DEBUG_TICKER_ISR(0);
}
   1ac24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1ac28:	2002      	movs	r0, #2
   1ac2a:	f7f5 bf49 	b.w	10ac0 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1ac2e:	2000      	movs	r0, #0
   1ac30:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1ac34:	f7f7 fa0e 	bl	12054 <ticker_trigger>
   1ac38:	e7f1      	b.n	1ac1e <rtc0_nrf5_isr+0xa>
   1ac3a:	bf00      	nop
   1ac3c:	4000b000 	.word	0x4000b000

0001ac40 <swi_lll_nrf5_isr>:

static void swi_lll_nrf5_isr(void *arg)
{
	DEBUG_RADIO_ISR(1);

	mayfly_run(TICKER_USER_ID_LLL);
   1ac40:	2000      	movs	r0, #0
   1ac42:	f7f5 bf3d 	b.w	10ac0 <mayfly_run>
   1ac46:	bf00      	nop

0001ac48 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   1ac48:	f002 bc1a 	b.w	1d480 <radio_status_reset>

0001ac4c <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1ac4c:	2801      	cmp	r0, #1
   1ac4e:	d800      	bhi.n	1ac52 <ticker_stop_op_cb+0x6>
   1ac50:	4770      	bx	lr
{
   1ac52:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1ac54:	4a06      	ldr	r2, [pc, #24]	; (1ac70 <ticker_stop_op_cb+0x24>)
   1ac56:	4907      	ldr	r1, [pc, #28]	; (1ac74 <ticker_stop_op_cb+0x28>)
   1ac58:	4807      	ldr	r0, [pc, #28]	; (1ac78 <ticker_stop_op_cb+0x2c>)
   1ac5a:	f44f 731b 	mov.w	r3, #620	; 0x26c
   1ac5e:	f005 fcef 	bl	20640 <printk>
   1ac62:	4040      	eors	r0, r0
   1ac64:	f380 8811 	msr	BASEPRI, r0
   1ac68:	f04f 0003 	mov.w	r0, #3
   1ac6c:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1ac6e:	bd08      	pop	{r3, pc}
   1ac70:	000279a4 	.word	0x000279a4
   1ac74:	000279ec 	.word	0x000279ec
   1ac78:	00026ecc 	.word	0x00026ecc

0001ac7c <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1ac7c:	2801      	cmp	r0, #1
   1ac7e:	d800      	bhi.n	1ac82 <ticker_start_op_cb+0x6>
   1ac80:	4770      	bx	lr
{
   1ac82:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1ac84:	4a06      	ldr	r2, [pc, #24]	; (1aca0 <ticker_start_op_cb+0x24>)
   1ac86:	4907      	ldr	r1, [pc, #28]	; (1aca4 <ticker_start_op_cb+0x28>)
   1ac88:	4807      	ldr	r0, [pc, #28]	; (1aca8 <ticker_start_op_cb+0x2c>)
   1ac8a:	f240 2377 	movw	r3, #631	; 0x277
   1ac8e:	f005 fcd7 	bl	20640 <printk>
   1ac92:	4040      	eors	r0, r0
   1ac94:	f380 8811 	msr	BASEPRI, r0
   1ac98:	f04f 0003 	mov.w	r0, #3
   1ac9c:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1ac9e:	bd08      	pop	{r3, pc}
   1aca0:	000279a4 	.word	0x000279a4
   1aca4:	000279ec 	.word	0x000279ec
   1aca8:	00026ecc 	.word	0x00026ecc

0001acac <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1acac:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1acae:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1acb0:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
   1acb2:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1acb4:	4c15      	ldr	r4, [pc, #84]	; (1ad0c <preempt_ticker_start.isra.0+0x60>)
   1acb6:	4916      	ldr	r1, [pc, #88]	; (1ad10 <preempt_ticker_start.isra.0+0x64>)
   1acb8:	9208      	str	r2, [sp, #32]
   1acba:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1acbe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1acc2:	9206      	str	r2, [sp, #24]
   1acc4:	9407      	str	r4, [sp, #28]
   1acc6:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
   1acc8:	e9d3 5400 	ldrd	r5, r4, [r3]
   1accc:	6899      	ldr	r1, [r3, #8]
   1acce:	42a5      	cmp	r5, r4
   1acd0:	bf2c      	ite	cs
   1acd2:	ebc1 0105 	rsbcs	r1, r1, r5
   1acd6:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1acda:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1acdc:	9100      	str	r1, [sp, #0]
   1acde:	4610      	mov	r0, r2
   1ace0:	4611      	mov	r1, r2
   1ace2:	f7f7 fa25 	bl	12130 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1ace6:	2802      	cmp	r0, #2
   1ace8:	d801      	bhi.n	1acee <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   1acea:	b00b      	add	sp, #44	; 0x2c
   1acec:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1acee:	4a09      	ldr	r2, [pc, #36]	; (1ad14 <preempt_ticker_start.isra.0+0x68>)
   1acf0:	4909      	ldr	r1, [pc, #36]	; (1ad18 <preempt_ticker_start.isra.0+0x6c>)
   1acf2:	480a      	ldr	r0, [pc, #40]	; (1ad1c <preempt_ticker_start.isra.0+0x70>)
   1acf4:	f240 2395 	movw	r3, #661	; 0x295
   1acf8:	f005 fca2 	bl	20640 <printk>
   1acfc:	4040      	eors	r0, r0
   1acfe:	f380 8811 	msr	BASEPRI, r0
   1ad02:	f04f 0003 	mov.w	r0, #3
   1ad06:	df02      	svc	2
}
   1ad08:	b00b      	add	sp, #44	; 0x2c
   1ad0a:	bd30      	pop	{r4, r5, pc}
   1ad0c:	0001ac7d 	.word	0x0001ac7d
   1ad10:	0001af75 	.word	0x0001af75
   1ad14:	000279a4 	.word	0x000279a4
   1ad18:	00027a0c 	.word	0x00027a0c
   1ad1c:	00026ecc 	.word	0x00026ecc

0001ad20 <prepare>:
{
   1ad20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ad24:	b085      	sub	sp, #20
   1ad26:	4604      	mov	r4, r0
	uint8_t idx = UINT8_MAX;
   1ad28:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   1ad2c:	f10d 000f 	add.w	r0, sp, #15
{
   1ad30:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1ad34:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	uint8_t idx = UINT8_MAX;
   1ad38:	f88d c00f 	strb.w	ip, [sp, #15]
{
   1ad3c:	460d      	mov	r5, r1
   1ad3e:	4616      	mov	r6, r2
   1ad40:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   1ad42:	f7fa fa45 	bl	151d0 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1ad46:	b918      	cbnz	r0, 1ad50 <prepare+0x30>
   1ad48:	e01e      	b.n	1ad88 <prepare+0x68>
		p = ull_prepare_dequeue_iter(&idx);
   1ad4a:	f7fa fa41 	bl	151d0 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1ad4e:	b1d8      	cbz	r0, 1ad88 <prepare+0x68>
   1ad50:	f890 3020 	ldrb.w	r3, [r0, #32]
   1ad54:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   1ad56:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1ad5a:	d1f6      	bne.n	1ad4a <prepare+0x2a>
	if (event.curr.abort_cb || (p && is_resume)) {
   1ad5c:	4b2d      	ldr	r3, [pc, #180]	; (1ae14 <prepare+0xf4>)
   1ad5e:	689a      	ldr	r2, [r3, #8]
   1ad60:	b9aa      	cbnz	r2, 1ad8e <prepare+0x6e>
   1ad62:	f1b9 0f00 	cmp.w	r9, #0
   1ad66:	d036      	beq.n	1add6 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1ad68:	2201      	movs	r2, #1
   1ad6a:	9201      	str	r2, [sp, #4]
   1ad6c:	9700      	str	r7, [sp, #0]
   1ad6e:	4633      	mov	r3, r6
   1ad70:	4629      	mov	r1, r5
   1ad72:	4620      	mov	r0, r4
   1ad74:	4642      	mov	r2, r8
   1ad76:	f7fa f9e5 	bl	15144 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1ad7a:	b9d8      	cbnz	r0, 1adb4 <prepare+0x94>
		return -EINPROGRESS;
   1ad7c:	f06f 0443 	mvn.w	r4, #67	; 0x43
}
   1ad80:	4620      	mov	r0, r4
   1ad82:	b005      	add	sp, #20
   1ad84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   1ad88:	4b22      	ldr	r3, [pc, #136]	; (1ae14 <prepare+0xf4>)
   1ad8a:	689a      	ldr	r2, [r3, #8]
   1ad8c:	b31a      	cbz	r2, 1add6 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1ad8e:	e9cd 7900 	strd	r7, r9, [sp]
   1ad92:	4633      	mov	r3, r6
   1ad94:	4629      	mov	r1, r5
   1ad96:	4620      	mov	r0, r4
   1ad98:	4642      	mov	r2, r8
   1ad9a:	f7fa f9d3 	bl	15144 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1ad9e:	b948      	cbnz	r0, 1adb4 <prepare+0x94>
		if (is_resume) {
   1ada0:	f1b9 0f00 	cmp.w	r9, #0
   1ada4:	d1ea      	bne.n	1ad7c <prepare+0x5c>
		preempt_ticker_start(prepare_param);
   1ada6:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1adaa:	f8d8 0000 	ldr.w	r0, [r8]
   1adae:	f7ff ff7d 	bl	1acac <preempt_ticker_start.isra.0>
   1adb2:	e7e3      	b.n	1ad7c <prepare+0x5c>
		LL_ASSERT(!err);
   1adb4:	4a18      	ldr	r2, [pc, #96]	; (1ae18 <prepare+0xf8>)
   1adb6:	4919      	ldr	r1, [pc, #100]	; (1ae1c <prepare+0xfc>)
   1adb8:	4819      	ldr	r0, [pc, #100]	; (1ae20 <prepare+0x100>)
   1adba:	f240 2311 	movw	r3, #529	; 0x211
   1adbe:	f005 fc3f 	bl	20640 <printk>
   1adc2:	4040      	eors	r0, r0
   1adc4:	f380 8811 	msr	BASEPRI, r0
   1adc8:	f04f 0003 	mov.w	r0, #3
   1adcc:	df02      	svc	2
		if (is_resume) {
   1adce:	f1b9 0f00 	cmp.w	r9, #0
   1add2:	d1d3      	bne.n	1ad7c <prepare+0x5c>
   1add4:	e7e7      	b.n	1ada6 <prepare+0x86>
	event.curr.param = prepare_param->param;
   1add6:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1adda:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   1addc:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   1ade0:	4640      	mov	r0, r8
   1ade2:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1ade4:	2200      	movs	r2, #0
   1ade6:	4b0f      	ldr	r3, [pc, #60]	; (1ae24 <prepare+0x104>)
   1ade8:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   1adea:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1adec:	4611      	mov	r1, r2
   1adee:	4610      	mov	r0, r2
   1adf0:	f7f7 fa0a 	bl	12208 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1adf4:	2802      	cmp	r0, #2
   1adf6:	d9c3      	bls.n	1ad80 <prepare+0x60>
   1adf8:	4a07      	ldr	r2, [pc, #28]	; (1ae18 <prepare+0xf8>)
   1adfa:	490b      	ldr	r1, [pc, #44]	; (1ae28 <prepare+0x108>)
   1adfc:	4808      	ldr	r0, [pc, #32]	; (1ae20 <prepare+0x100>)
   1adfe:	f240 234b 	movw	r3, #587	; 0x24b
   1ae02:	f005 fc1d 	bl	20640 <printk>
   1ae06:	4040      	eors	r0, r0
   1ae08:	f380 8811 	msr	BASEPRI, r0
   1ae0c:	f04f 0003 	mov.w	r0, #3
   1ae10:	df02      	svc	2
   1ae12:	e7b5      	b.n	1ad80 <prepare+0x60>
   1ae14:	20004034 	.word	0x20004034
   1ae18:	000279a4 	.word	0x000279a4
   1ae1c:	0002717c 	.word	0x0002717c
   1ae20:	00026ecc 	.word	0x00026ecc
   1ae24:	0001ac4d 	.word	0x0001ac4d
   1ae28:	00027a0c 	.word	0x00027a0c

0001ae2c <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   1ae2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll_prepare_cb_t resume_cb;
	uint8_t idx = UINT8_MAX;
	int resume_prio;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1ae2e:	4e4c      	ldr	r6, [pc, #304]	; (1af60 <preempt+0x134>)
{
   1ae30:	b08b      	sub	sp, #44	; 0x2c
	struct lll_event *next = ull_prepare_dequeue_get();
   1ae32:	f7fa f9bf 	bl	151b4 <ull_prepare_dequeue_get>
	if (!event.curr.abort_cb || !event.curr.param) {
   1ae36:	68b3      	ldr	r3, [r6, #8]
	uint8_t idx = UINT8_MAX;
   1ae38:	22ff      	movs	r2, #255	; 0xff
   1ae3a:	f88d 200e 	strb.w	r2, [sp, #14]
	if (!event.curr.abort_cb || !event.curr.param) {
   1ae3e:	b19b      	cbz	r3, 1ae68 <preempt+0x3c>
   1ae40:	6833      	ldr	r3, [r6, #0]
   1ae42:	b18b      	cbz	r3, 1ae68 <preempt+0x3c>
		return;
	}

	next = ull_prepare_dequeue_iter(&idx);
   1ae44:	f10d 000e 	add.w	r0, sp, #14
   1ae48:	f7fa f9c2 	bl	151d0 <ull_prepare_dequeue_iter>
	if (!next) {
   1ae4c:	4604      	mov	r4, r0
   1ae4e:	b158      	cbz	r0, 1ae68 <preempt+0x3c>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   1ae50:	f894 3020 	ldrb.w	r3, [r4, #32]
   1ae54:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   1ae58:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   1ae5c:	d006      	beq.n	1ae6c <preempt+0x40>
		next = ull_prepare_dequeue_iter(&idx);
   1ae5e:	f7fa f9b7 	bl	151d0 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1ae62:	4604      	mov	r4, r0
   1ae64:	2800      	cmp	r0, #0
   1ae66:	d1f3      	bne.n	1ae50 <preempt+0x24>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   1ae68:	b00b      	add	sp, #44	; 0x2c
   1ae6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   1ae6c:	ab05      	add	r3, sp, #20
   1ae6e:	e9d6 2700 	ldrd	r2, r7, [r6]
   1ae72:	69e1      	ldr	r1, [r4, #28]
   1ae74:	68e0      	ldr	r0, [r4, #12]
   1ae76:	9300      	str	r3, [sp, #0]
   1ae78:	ab04      	add	r3, sp, #16
   1ae7a:	47b8      	blx	r7
	if (!ret) {
   1ae7c:	4607      	mov	r7, r0
   1ae7e:	2800      	cmp	r0, #0
   1ae80:	d062      	beq.n	1af48 <preempt+0x11c>
	event.curr.abort_cb(NULL, event.curr.param);
   1ae82:	68b3      	ldr	r3, [r6, #8]
   1ae84:	6831      	ldr	r1, [r6, #0]
   1ae86:	4628      	mov	r0, r5
   1ae88:	4798      	blx	r3
	if (ret == -EAGAIN) {
   1ae8a:	f117 0f0b 	cmn.w	r7, #11
   1ae8e:	d01a      	beq.n	1aec6 <preempt+0x9a>
		LL_ASSERT(ret == -ECANCELED);
   1ae90:	3748      	adds	r7, #72	; 0x48
   1ae92:	d011      	beq.n	1aeb8 <preempt+0x8c>
   1ae94:	4a33      	ldr	r2, [pc, #204]	; (1af64 <preempt+0x138>)
   1ae96:	4934      	ldr	r1, [pc, #208]	; (1af68 <preempt+0x13c>)
   1ae98:	4834      	ldr	r0, [pc, #208]	; (1af6c <preempt+0x140>)
   1ae9a:	f240 23df 	movw	r3, #735	; 0x2df
   1ae9e:	f005 fbcf 	bl	20640 <printk>
   1aea2:	4040      	eors	r0, r0
   1aea4:	f380 8811 	msr	BASEPRI, r0
   1aea8:	f04f 0003 	mov.w	r0, #3
   1aeac:	df02      	svc	2
   1aeae:	e003      	b.n	1aeb8 <preempt+0x8c>
	} while (next->is_aborted || next->is_resume);
   1aeb0:	f890 3020 	ldrb.w	r3, [r0, #32]
   1aeb4:	079b      	lsls	r3, r3, #30
   1aeb6:	d041      	beq.n	1af3c <preempt+0x110>
		next = ull_prepare_dequeue_iter(&idx);
   1aeb8:	f10d 000e 	add.w	r0, sp, #14
   1aebc:	f7fa f988 	bl	151d0 <ull_prepare_dequeue_iter>
		if (!next) {
   1aec0:	2800      	cmp	r0, #0
   1aec2:	d1f5      	bne.n	1aeb0 <preempt+0x84>
   1aec4:	e7d0      	b.n	1ae68 <preempt+0x3c>
		uint8_t iter_idx = UINT8_MAX;
   1aec6:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1aec8:	f10d 000f 	add.w	r0, sp, #15
		uint8_t iter_idx = UINT8_MAX;
   1aecc:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1aed0:	f7fa f97e 	bl	151d0 <ull_prepare_dequeue_iter>
		while (iter) {
   1aed4:	bb48      	cbnz	r0, 1af2a <preempt+0xfe>
	prepare_param.param = event.curr.param;
   1aed6:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   1aed8:	9b05      	ldr	r3, [sp, #20]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1aeda:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   1aedc:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1aede:	2301      	movs	r3, #1
	event.curr.param = NULL;
   1aee0:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1aee2:	9301      	str	r3, [sp, #4]
	event.curr.param = NULL;
   1aee4:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1aee6:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1aeea:	9b04      	ldr	r3, [sp, #16]
   1aeec:	aa06      	add	r2, sp, #24
   1aeee:	f7fa f929 	bl	15144 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   1aef2:	2800      	cmp	r0, #0
   1aef4:	d0e0      	beq.n	1aeb8 <preempt+0x8c>
   1aef6:	4a1b      	ldr	r2, [pc, #108]	; (1af64 <preempt+0x138>)
   1aef8:	491d      	ldr	r1, [pc, #116]	; (1af70 <preempt+0x144>)
   1aefa:	481c      	ldr	r0, [pc, #112]	; (1af6c <preempt+0x140>)
   1aefc:	f240 23dd 	movw	r3, #733	; 0x2dd
   1af00:	f005 fb9e 	bl	20640 <printk>
   1af04:	4040      	eors	r0, r0
   1af06:	f380 8811 	msr	BASEPRI, r0
   1af0a:	f04f 0003 	mov.w	r0, #3
   1af0e:	df02      	svc	2
   1af10:	e7d2      	b.n	1aeb8 <preempt+0x8c>
				iter->is_aborted = 1;
   1af12:	f043 0302 	orr.w	r3, r3, #2
   1af16:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   1af1a:	6983      	ldr	r3, [r0, #24]
   1af1c:	4798      	blx	r3
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1af1e:	f10d 000f 	add.w	r0, sp, #15
   1af22:	f7fa f955 	bl	151d0 <ull_prepare_dequeue_iter>
		while (iter) {
   1af26:	2800      	cmp	r0, #0
   1af28:	d0d5      	beq.n	1aed6 <preempt+0xaa>
			if (!iter->is_aborted &&
   1af2a:	f890 3020 	ldrb.w	r3, [r0, #32]
   1af2e:	079a      	lsls	r2, r3, #30
   1af30:	d4f5      	bmi.n	1af1e <preempt+0xf2>
			    event.curr.param == iter->prepare_param.param) {
   1af32:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1af34:	6831      	ldr	r1, [r6, #0]
   1af36:	4291      	cmp	r1, r2
   1af38:	d1f1      	bne.n	1af1e <preempt+0xf2>
   1af3a:	e7ea      	b.n	1af12 <preempt+0xe6>
	preempt_ticker_start(&next->prepare_param);
   1af3c:	68c1      	ldr	r1, [r0, #12]
   1af3e:	6800      	ldr	r0, [r0, #0]
   1af40:	f7ff feb4 	bl	1acac <preempt_ticker_start.isra.0>
}
   1af44:	b00b      	add	sp, #44	; 0x2c
   1af46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   1af48:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1af4c:	69a2      	ldr	r2, [r4, #24]
   1af4e:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   1af50:	f043 0302 	orr.w	r3, r3, #2
   1af54:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1af58:	4620      	mov	r0, r4
   1af5a:	4790      	blx	r2
		goto preempt_next;
   1af5c:	e7ac      	b.n	1aeb8 <preempt+0x8c>
   1af5e:	bf00      	nop
   1af60:	20004034 	.word	0x20004034
   1af64:	000279a4 	.word	0x000279a4
   1af68:	00027a34 	.word	0x00027a34
   1af6c:	00026ecc 	.word	0x00026ecc
   1af70:	00027188 	.word	0x00027188

0001af74 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1af74:	2200      	movs	r2, #0
{
   1af76:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1af78:	4611      	mov	r1, r2
   1af7a:	4b0a      	ldr	r3, [pc, #40]	; (1afa4 <preempt_ticker_cb+0x30>)
   1af7c:	2001      	movs	r0, #1
   1af7e:	f7f5 fd4b 	bl	10a18 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1af82:	b900      	cbnz	r0, 1af86 <preempt_ticker_cb+0x12>
}
   1af84:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1af86:	4a08      	ldr	r2, [pc, #32]	; (1afa8 <preempt_ticker_cb+0x34>)
   1af88:	4908      	ldr	r1, [pc, #32]	; (1afac <preempt_ticker_cb+0x38>)
   1af8a:	4809      	ldr	r0, [pc, #36]	; (1afb0 <preempt_ticker_cb+0x3c>)
   1af8c:	f240 23a3 	movw	r3, #675	; 0x2a3
   1af90:	f005 fb56 	bl	20640 <printk>
   1af94:	4040      	eors	r0, r0
   1af96:	f380 8811 	msr	BASEPRI, r0
   1af9a:	f04f 0003 	mov.w	r0, #3
   1af9e:	df02      	svc	2
}
   1afa0:	bd08      	pop	{r3, pc}
   1afa2:	bf00      	nop
   1afa4:	200005d0 	.word	0x200005d0
   1afa8:	000279a4 	.word	0x000279a4
   1afac:	00027188 	.word	0x00027188
   1afb0:	00026ecc 	.word	0x00026ecc

0001afb4 <lll_init>:
{
   1afb4:	b510      	push	{r4, lr}
   1afb6:	4815      	ldr	r0, [pc, #84]	; (1b00c <lll_init+0x58>)
   1afb8:	f003 ffdc 	bl	1ef74 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1afbc:	4b14      	ldr	r3, [pc, #80]	; (1b010 <lll_init+0x5c>)
   1afbe:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1afc0:	b300      	cbz	r0, 1b004 <lll_init+0x50>
	event.curr.abort_cb = NULL;
   1afc2:	4b14      	ldr	r3, [pc, #80]	; (1b014 <lll_init+0x60>)
   1afc4:	2200      	movs	r2, #0
   1afc6:	609a      	str	r2, [r3, #8]
	err = lll_clock_init();
   1afc8:	f000 f9fe 	bl	1b3c8 <lll_clock_init>
	if (err) {
   1afcc:	4604      	mov	r4, r0
   1afce:	b9b8      	cbnz	r0, 1b000 <lll_init+0x4c>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1afd0:	4602      	mov	r2, r0
   1afd2:	4601      	mov	r1, r0
   1afd4:	2001      	movs	r0, #1
   1afd6:	f7eb fc7b 	bl	68d0 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1afda:	4622      	mov	r2, r4
   1afdc:	4621      	mov	r1, r4
   1afde:	200b      	movs	r0, #11
   1afe0:	f7eb fc76 	bl	68d0 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1afe4:	4622      	mov	r2, r4
   1afe6:	4621      	mov	r1, r4
   1afe8:	2018      	movs	r0, #24
   1afea:	f7eb fc71 	bl	68d0 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1afee:	2001      	movs	r0, #1
   1aff0:	f7eb fc3c 	bl	686c <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1aff4:	200b      	movs	r0, #11
   1aff6:	f7eb fc39 	bl	686c <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1affa:	2018      	movs	r0, #24
   1affc:	f7eb fc36 	bl	686c <arch_irq_enable>
}
   1b000:	4620      	mov	r0, r4
   1b002:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1b004:	f06f 0412 	mvn.w	r4, #18
   1b008:	e7fa      	b.n	1b000 <lll_init+0x4c>
   1b00a:	bf00      	nop
   1b00c:	00027a40 	.word	0x00027a40
   1b010:	20004030 	.word	0x20004030
   1b014:	20004034 	.word	0x20004034

0001b018 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1b018:	4a04      	ldr	r2, [pc, #16]	; (1b02c <lll_csrand_get+0x14>)
{
   1b01a:	b410      	push	{r4}
   1b01c:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1b01e:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1b020:	6884      	ldr	r4, [r0, #8]
   1b022:	b28a      	uxth	r2, r1
   1b024:	4619      	mov	r1, r3
   1b026:	6823      	ldr	r3, [r4, #0]
}
   1b028:	bc10      	pop	{r4}
   1b02a:	4718      	bx	r3
   1b02c:	20004030 	.word	0x20004030

0001b030 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1b030:	4b08      	ldr	r3, [pc, #32]	; (1b054 <lll_csrand_isr_get+0x24>)
   1b032:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
   1b034:	689a      	ldr	r2, [r3, #8]
{
   1b036:	b410      	push	{r4}
   1b038:	6854      	ldr	r4, [r2, #4]
   1b03a:	b134      	cbz	r4, 1b04a <lll_csrand_isr_get+0x1a>
   1b03c:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1b03e:	46a4      	mov	ip, r4
   1b040:	4601      	mov	r1, r0
}
   1b042:	bc10      	pop	{r4}
   1b044:	4618      	mov	r0, r3
   1b046:	2300      	movs	r3, #0
   1b048:	4760      	bx	ip
   1b04a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1b04e:	bc10      	pop	{r4}
   1b050:	4770      	bx	lr
   1b052:	bf00      	nop
   1b054:	20004030 	.word	0x20004030

0001b058 <lll_rand_isr_get>:
   1b058:	f7ff bfea 	b.w	1b030 <lll_csrand_isr_get>

0001b05c <lll_reset>:
}
   1b05c:	2000      	movs	r0, #0
   1b05e:	4770      	bx	lr

0001b060 <lll_prepare>:
{
   1b060:	b510      	push	{r4, lr}
   1b062:	b082      	sub	sp, #8
   1b064:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   1b066:	9400      	str	r4, [sp, #0]
   1b068:	2400      	movs	r4, #0
   1b06a:	9401      	str	r4, [sp, #4]
   1b06c:	f7ff fe58 	bl	1ad20 <prepare>
}
   1b070:	b002      	add	sp, #8
   1b072:	bd10      	pop	{r4, pc}

0001b074 <lll_resume>:
{
   1b074:	b510      	push	{r4, lr}
   1b076:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1b078:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   1b07a:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1b07e:	69c3      	ldr	r3, [r0, #28]
   1b080:	6902      	ldr	r2, [r0, #16]
   1b082:	f004 0401 	and.w	r4, r4, #1
   1b086:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   1b08a:	9401      	str	r4, [sp, #4]
   1b08c:	f7ff fe48 	bl	1ad20 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1b090:	b108      	cbz	r0, 1b096 <lll_resume+0x22>
   1b092:	3044      	adds	r0, #68	; 0x44
   1b094:	d101      	bne.n	1b09a <lll_resume+0x26>
}
   1b096:	b002      	add	sp, #8
   1b098:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1b09a:	4a07      	ldr	r2, [pc, #28]	; (1b0b8 <lll_resume+0x44>)
   1b09c:	4907      	ldr	r1, [pc, #28]	; (1b0bc <lll_resume+0x48>)
   1b09e:	4808      	ldr	r0, [pc, #32]	; (1b0c0 <lll_resume+0x4c>)
   1b0a0:	23e4      	movs	r3, #228	; 0xe4
   1b0a2:	f005 facd 	bl	20640 <printk>
   1b0a6:	4040      	eors	r0, r0
   1b0a8:	f380 8811 	msr	BASEPRI, r0
   1b0ac:	f04f 0003 	mov.w	r0, #3
   1b0b0:	df02      	svc	2
}
   1b0b2:	b002      	add	sp, #8
   1b0b4:	bd10      	pop	{r4, pc}
   1b0b6:	bf00      	nop
   1b0b8:	000279a4 	.word	0x000279a4
   1b0bc:	00027a44 	.word	0x00027a44
   1b0c0:	00026ecc 	.word	0x00026ecc

0001b0c4 <lll_disable>:
{
   1b0c4:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   1b0c6:	4604      	mov	r4, r0
{
   1b0c8:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   1b0ca:	2800      	cmp	r0, #0
   1b0cc:	d035      	beq.n	1b13a <lll_disable+0x76>
   1b0ce:	4b26      	ldr	r3, [pc, #152]	; (1b168 <lll_disable+0xa4>)
   1b0d0:	681a      	ldr	r2, [r3, #0]
   1b0d2:	4282      	cmp	r2, r0
   1b0d4:	d02b      	beq.n	1b12e <lll_disable+0x6a>
		uint8_t idx = UINT8_MAX;
   1b0d6:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1b0d8:	f10d 0007 	add.w	r0, sp, #7
		uint8_t idx = UINT8_MAX;
   1b0dc:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1b0e0:	f7fa f876 	bl	151d0 <ull_prepare_dequeue_iter>
		while (next) {
   1b0e4:	4603      	mov	r3, r0
   1b0e6:	b940      	cbnz	r0, 1b0fa <lll_disable+0x36>
   1b0e8:	e01f      	b.n	1b12a <lll_disable+0x66>
			    (!param || (param == next->prepare_param.param))) {
   1b0ea:	4294      	cmp	r4, r2
   1b0ec:	d00e      	beq.n	1b10c <lll_disable+0x48>
			next = ull_prepare_dequeue_iter(&idx);
   1b0ee:	f10d 0007 	add.w	r0, sp, #7
   1b0f2:	f7fa f86d 	bl	151d0 <ull_prepare_dequeue_iter>
		while (next) {
   1b0f6:	4603      	mov	r3, r0
   1b0f8:	b1b8      	cbz	r0, 1b12a <lll_disable+0x66>
			if (!next->is_aborted &&
   1b0fa:	f893 2020 	ldrb.w	r2, [r3, #32]
   1b0fe:	0792      	lsls	r2, r2, #30
   1b100:	d4f5      	bmi.n	1b0ee <lll_disable+0x2a>
				next->is_aborted = 1;
   1b102:	68da      	ldr	r2, [r3, #12]
				next->abort_cb(&next->prepare_param,
   1b104:	4618      	mov	r0, r3
   1b106:	4611      	mov	r1, r2
			if (!next->is_aborted &&
   1b108:	2c00      	cmp	r4, #0
   1b10a:	d1ee      	bne.n	1b0ea <lll_disable+0x26>
				next->is_aborted = 1;
   1b10c:	f893 2020 	ldrb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   1b110:	699d      	ldr	r5, [r3, #24]
				next->is_aborted = 1;
   1b112:	f042 0202 	orr.w	r2, r2, #2
   1b116:	f883 2020 	strb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   1b11a:	47a8      	blx	r5
			next = ull_prepare_dequeue_iter(&idx);
   1b11c:	f10d 0007 	add.w	r0, sp, #7
   1b120:	f7fa f856 	bl	151d0 <ull_prepare_dequeue_iter>
		while (next) {
   1b124:	4603      	mov	r3, r0
   1b126:	2800      	cmp	r0, #0
   1b128:	d1e7      	bne.n	1b0fa <lll_disable+0x36>
}
   1b12a:	b003      	add	sp, #12
   1b12c:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   1b12e:	689b      	ldr	r3, [r3, #8]
   1b130:	b16b      	cbz	r3, 1b14e <lll_disable+0x8a>
   1b132:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1b134:	2000      	movs	r0, #0
   1b136:	4798      	blx	r3
   1b138:	e7cd      	b.n	1b0d6 <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   1b13a:	4a0b      	ldr	r2, [pc, #44]	; (1b168 <lll_disable+0xa4>)
   1b13c:	6893      	ldr	r3, [r2, #8]
   1b13e:	2b00      	cmp	r3, #0
   1b140:	d0c9      	beq.n	1b0d6 <lll_disable+0x12>
   1b142:	6811      	ldr	r1, [r2, #0]
   1b144:	2900      	cmp	r1, #0
   1b146:	d0c6      	beq.n	1b0d6 <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   1b148:	2000      	movs	r0, #0
   1b14a:	4798      	blx	r3
   1b14c:	e7c3      	b.n	1b0d6 <lll_disable+0x12>
			LL_ASSERT(!param);
   1b14e:	4a07      	ldr	r2, [pc, #28]	; (1b16c <lll_disable+0xa8>)
   1b150:	4907      	ldr	r1, [pc, #28]	; (1b170 <lll_disable+0xac>)
   1b152:	4808      	ldr	r0, [pc, #32]	; (1b174 <lll_disable+0xb0>)
   1b154:	23ee      	movs	r3, #238	; 0xee
   1b156:	f005 fa73 	bl	20640 <printk>
   1b15a:	4040      	eors	r0, r0
   1b15c:	f380 8811 	msr	BASEPRI, r0
   1b160:	f04f 0003 	mov.w	r0, #3
   1b164:	df02      	svc	2
   1b166:	e7b6      	b.n	1b0d6 <lll_disable+0x12>
   1b168:	20004034 	.word	0x20004034
   1b16c:	000279a4 	.word	0x000279a4
   1b170:	00027a58 	.word	0x00027a58
   1b174:	00026ecc 	.word	0x00026ecc

0001b178 <lll_prepare_done>:
}
   1b178:	2000      	movs	r0, #0
   1b17a:	4770      	bx	lr

0001b17c <lll_done>:
{
   1b17c:	b510      	push	{r4, lr}
   1b17e:	4604      	mov	r4, r0
	struct lll_event *next = ull_prepare_dequeue_get();
   1b180:	f7fa f818 	bl	151b4 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1b184:	b13c      	cbz	r4, 1b196 <lll_done+0x1a>
   1b186:	b320      	cbz	r0, 1b1d2 <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1b188:	6820      	ldr	r0, [r4, #0]
   1b18a:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1b18c:	f7fa f84e 	bl	1522c <ull_event_done>
	LL_ASSERT(evdone);
   1b190:	b180      	cbz	r0, 1b1b4 <lll_done+0x38>
}
   1b192:	2000      	movs	r0, #0
   1b194:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   1b196:	4c1d      	ldr	r4, [pc, #116]	; (1b20c <lll_done+0x90>)
   1b198:	68a3      	ldr	r3, [r4, #8]
   1b19a:	b343      	cbz	r3, 1b1ee <lll_done+0x72>
		param = event.curr.param;
   1b19c:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   1b19e:	2300      	movs	r3, #0
   1b1a0:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1b1a2:	6023      	str	r3, [r4, #0]
		if (param) {
   1b1a4:	2800      	cmp	r0, #0
   1b1a6:	d0f1      	beq.n	1b18c <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1b1a8:	6800      	ldr	r0, [r0, #0]
   1b1aa:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1b1ac:	f7fa f83e 	bl	1522c <ull_event_done>
	LL_ASSERT(evdone);
   1b1b0:	2800      	cmp	r0, #0
   1b1b2:	d1ee      	bne.n	1b192 <lll_done+0x16>
   1b1b4:	4a16      	ldr	r2, [pc, #88]	; (1b210 <lll_done+0x94>)
   1b1b6:	4917      	ldr	r1, [pc, #92]	; (1b214 <lll_done+0x98>)
   1b1b8:	4817      	ldr	r0, [pc, #92]	; (1b218 <lll_done+0x9c>)
   1b1ba:	f44f 739e 	mov.w	r3, #316	; 0x13c
   1b1be:	f005 fa3f 	bl	20640 <printk>
   1b1c2:	4040      	eors	r0, r0
   1b1c4:	f380 8811 	msr	BASEPRI, r0
   1b1c8:	f04f 0003 	mov.w	r0, #3
   1b1cc:	df02      	svc	2
}
   1b1ce:	2000      	movs	r0, #0
   1b1d0:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   1b1d2:	4a0f      	ldr	r2, [pc, #60]	; (1b210 <lll_done+0x94>)
   1b1d4:	4911      	ldr	r1, [pc, #68]	; (1b21c <lll_done+0xa0>)
   1b1d6:	4810      	ldr	r0, [pc, #64]	; (1b218 <lll_done+0x9c>)
   1b1d8:	f240 131f 	movw	r3, #287	; 0x11f
   1b1dc:	f005 fa30 	bl	20640 <printk>
   1b1e0:	4040      	eors	r0, r0
   1b1e2:	f380 8811 	msr	BASEPRI, r0
   1b1e6:	f04f 0003 	mov.w	r0, #3
   1b1ea:	df02      	svc	2
   1b1ec:	e7cc      	b.n	1b188 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   1b1ee:	4a08      	ldr	r2, [pc, #32]	; (1b210 <lll_done+0x94>)
   1b1f0:	490b      	ldr	r1, [pc, #44]	; (1b220 <lll_done+0xa4>)
   1b1f2:	4809      	ldr	r0, [pc, #36]	; (1b218 <lll_done+0x9c>)
   1b1f4:	f44f 7392 	mov.w	r3, #292	; 0x124
   1b1f8:	f005 fa22 	bl	20640 <printk>
   1b1fc:	4040      	eors	r0, r0
   1b1fe:	f380 8811 	msr	BASEPRI, r0
   1b202:	f04f 0003 	mov.w	r0, #3
   1b206:	df02      	svc	2
   1b208:	e7c8      	b.n	1b19c <lll_done+0x20>
   1b20a:	bf00      	nop
   1b20c:	20004034 	.word	0x20004034
   1b210:	000279a4 	.word	0x000279a4
   1b214:	00027a84 	.word	0x00027a84
   1b218:	00026ecc 	.word	0x00026ecc
   1b21c:	00027a60 	.word	0x00027a60
   1b220:	00027a70 	.word	0x00027a70

0001b224 <lll_is_done>:
	return !event.curr.abort_cb;
   1b224:	4b02      	ldr	r3, [pc, #8]	; (1b230 <lll_is_done+0xc>)
   1b226:	6898      	ldr	r0, [r3, #8]
}
   1b228:	fab0 f080 	clz	r0, r0
   1b22c:	0940      	lsrs	r0, r0, #5
   1b22e:	4770      	bx	lr
   1b230:	20004034 	.word	0x20004034

0001b234 <lll_is_abort_cb>:
}
   1b234:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1b238:	4770      	bx	lr
   1b23a:	bf00      	nop

0001b23c <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   1b23c:	e9d0 2300 	ldrd	r2, r3, [r0]
   1b240:	2a00      	cmp	r2, #0
   1b242:	db04      	blt.n	1b24e <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   1b244:	429a      	cmp	r2, r3
   1b246:	bf38      	it	cc
   1b248:	461a      	movcc	r2, r3
   1b24a:	4610      	mov	r0, r2
}
   1b24c:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   1b24e:	6880      	ldr	r0, [r0, #8]
   1b250:	4298      	cmp	r0, r3
   1b252:	bf38      	it	cc
   1b254:	4618      	movcc	r0, r3
   1b256:	4770      	bx	lr

0001b258 <lll_preempt_calc>:
{
   1b258:	b510      	push	{r4, lr}
   1b25a:	4614      	mov	r4, r2
	uint32_t ticks_now = ticker_ticks_now_get();
   1b25c:	f7f7 f878 	bl	12350 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   1b260:	4621      	mov	r1, r4
   1b262:	f7f7 f877 	bl	12354 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1b266:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   1b268:	0203      	lsls	r3, r0, #8
   1b26a:	d404      	bmi.n	1b276 <lll_preempt_calc+0x1e>
   1b26c:	2809      	cmp	r0, #9
   1b26e:	bf94      	ite	ls
   1b270:	2000      	movls	r0, #0
   1b272:	2001      	movhi	r0, #1
}
   1b274:	bd10      	pop	{r4, pc}
	return 0;
   1b276:	2000      	movs	r0, #0
}
   1b278:	bd10      	pop	{r4, pc}
   1b27a:	bf00      	nop

0001b27c <lll_chan_set>:
	switch (chan) {
   1b27c:	2826      	cmp	r0, #38	; 0x26
{
   1b27e:	b510      	push	{r4, lr}
   1b280:	4604      	mov	r4, r0
	switch (chan) {
   1b282:	d01c      	beq.n	1b2be <lll_chan_set+0x42>
   1b284:	2827      	cmp	r0, #39	; 0x27
   1b286:	d012      	beq.n	1b2ae <lll_chan_set+0x32>
   1b288:	2825      	cmp	r0, #37	; 0x25
   1b28a:	d008      	beq.n	1b29e <lll_chan_set+0x22>
		if (chan < 11) {
   1b28c:	280a      	cmp	r0, #10
   1b28e:	d91e      	bls.n	1b2ce <lll_chan_set+0x52>
		} else if (chan < 40) {
   1b290:	2827      	cmp	r0, #39	; 0x27
   1b292:	d821      	bhi.n	1b2d8 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1b294:	3003      	adds	r0, #3
   1b296:	0040      	lsls	r0, r0, #1
   1b298:	f002 f83e 	bl	1d318 <radio_freq_chan_set>
   1b29c:	e002      	b.n	1b2a4 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1b29e:	2002      	movs	r0, #2
   1b2a0:	f002 f83a 	bl	1d318 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1b2a4:	4620      	mov	r0, r4
}
   1b2a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1b2aa:	f002 b83b 	b.w	1d324 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1b2ae:	2050      	movs	r0, #80	; 0x50
   1b2b0:	f002 f832 	bl	1d318 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1b2b4:	4620      	mov	r0, r4
}
   1b2b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1b2ba:	f002 b833 	b.w	1d324 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1b2be:	201a      	movs	r0, #26
   1b2c0:	f002 f82a 	bl	1d318 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1b2c4:	4620      	mov	r0, r4
}
   1b2c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1b2ca:	f002 b82b 	b.w	1d324 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1b2ce:	3002      	adds	r0, #2
   1b2d0:	0040      	lsls	r0, r0, #1
   1b2d2:	f002 f821 	bl	1d318 <radio_freq_chan_set>
   1b2d6:	e7e5      	b.n	1b2a4 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1b2d8:	4a06      	ldr	r2, [pc, #24]	; (1b2f4 <lll_chan_set+0x78>)
   1b2da:	4907      	ldr	r1, [pc, #28]	; (1b2f8 <lll_chan_set+0x7c>)
   1b2dc:	4807      	ldr	r0, [pc, #28]	; (1b2fc <lll_chan_set+0x80>)
   1b2de:	f44f 73c3 	mov.w	r3, #390	; 0x186
   1b2e2:	f005 f9ad 	bl	20640 <printk>
   1b2e6:	4040      	eors	r0, r0
   1b2e8:	f380 8811 	msr	BASEPRI, r0
   1b2ec:	f04f 0003 	mov.w	r0, #3
   1b2f0:	df02      	svc	2
   1b2f2:	e7d7      	b.n	1b2a4 <lll_chan_set+0x28>
   1b2f4:	000279a4 	.word	0x000279a4
   1b2f8:	00026f3c 	.word	0x00026f3c
   1b2fc:	00026ecc 	.word	0x00026ecc

0001b300 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   1b300:	f002 b87e 	b.w	1d400 <radio_tx_ready_delay_get>

0001b304 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1b304:	f002 b888 	b.w	1d418 <radio_rx_ready_delay_get>

0001b308 <lll_isr_tx_status_reset>:
{
   1b308:	b508      	push	{r3, lr}
	radio_status_reset();
   1b30a:	f002 f8b9 	bl	1d480 <radio_status_reset>
}
   1b30e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1b312:	f002 b985 	b.w	1d620 <radio_tmr_status_reset>
   1b316:	bf00      	nop

0001b318 <lll_isr_rx_status_reset>:
{
   1b318:	b508      	push	{r3, lr}
	radio_status_reset();
   1b31a:	f002 f8b1 	bl	1d480 <radio_status_reset>
	radio_tmr_status_reset();
   1b31e:	f002 f97f 	bl	1d620 <radio_tmr_status_reset>
}
   1b322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1b326:	f002 b92b 	b.w	1d580 <radio_rssi_status_reset>
   1b32a:	bf00      	nop

0001b32c <lll_isr_status_reset>:
{
   1b32c:	b508      	push	{r3, lr}
	radio_status_reset();
   1b32e:	f002 f8a7 	bl	1d480 <radio_status_reset>
	radio_tmr_status_reset();
   1b332:	f002 f975 	bl	1d620 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1b336:	f002 f95b 	bl	1d5f0 <radio_filter_status_reset>
	radio_ar_status_reset();
   1b33a:	f002 fb7b 	bl	1da34 <radio_ar_status_reset>
}
   1b33e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1b342:	f002 b91d 	b.w	1d580 <radio_rssi_status_reset>
   1b346:	bf00      	nop

0001b348 <lll_isr_cleanup>:
{
   1b348:	b508      	push	{r3, lr}
   1b34a:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1b34c:	4813      	ldr	r0, [pc, #76]	; (1b39c <lll_isr_cleanup+0x54>)
   1b34e:	f001 ff6b 	bl	1d228 <radio_isr_set>
	if (!radio_is_idle()) {
   1b352:	f002 f8b5 	bl	1d4c0 <radio_is_idle>
   1b356:	b1e8      	cbz	r0, 1b394 <lll_isr_cleanup+0x4c>
	radio_tmr_stop();
   1b358:	f002 fa2a 	bl	1d7b0 <radio_tmr_stop>
	err = lll_hfclock_off();
   1b35c:	f000 f87c 	bl	1b458 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   1b360:	b108      	cbz	r0, 1b366 <lll_isr_cleanup+0x1e>
   1b362:	3010      	adds	r0, #16
   1b364:	d104      	bne.n	1b370 <lll_isr_cleanup+0x28>
}
   1b366:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1b36a:	2000      	movs	r0, #0
   1b36c:	f7ff bf06 	b.w	1b17c <lll_done>
	LL_ASSERT(!err || err == -EBUSY);
   1b370:	4a0b      	ldr	r2, [pc, #44]	; (1b3a0 <lll_isr_cleanup+0x58>)
   1b372:	490c      	ldr	r1, [pc, #48]	; (1b3a4 <lll_isr_cleanup+0x5c>)
   1b374:	480c      	ldr	r0, [pc, #48]	; (1b3a8 <lll_isr_cleanup+0x60>)
   1b376:	f240 13e9 	movw	r3, #489	; 0x1e9
   1b37a:	f005 f961 	bl	20640 <printk>
   1b37e:	4040      	eors	r0, r0
   1b380:	f380 8811 	msr	BASEPRI, r0
   1b384:	f04f 0003 	mov.w	r0, #3
   1b388:	df02      	svc	2
	lll_done(NULL);
   1b38a:	2000      	movs	r0, #0
}
   1b38c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1b390:	f7ff bef4 	b.w	1b17c <lll_done>
		radio_disable();
   1b394:	f002 f85c 	bl	1d450 <radio_disable>
   1b398:	e7de      	b.n	1b358 <lll_isr_cleanup+0x10>
   1b39a:	bf00      	nop
   1b39c:	0001ac49 	.word	0x0001ac49
   1b3a0:	000279a4 	.word	0x000279a4
   1b3a4:	00027a8c 	.word	0x00027a8c
   1b3a8:	00026ecc 	.word	0x00026ecc

0001b3ac <lll_isr_abort>:
{
   1b3ac:	b510      	push	{r4, lr}
   1b3ae:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1b3b0:	f7ff ffbc 	bl	1b32c <lll_isr_status_reset>
	lll_isr_cleanup(param);
   1b3b4:	4620      	mov	r0, r4
}
   1b3b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1b3ba:	f7ff bfc5 	b.w	1b348 <lll_isr_cleanup>
   1b3be:	bf00      	nop

0001b3c0 <clock_ready>:
	return err;
}

static void clock_ready(struct device *dev, clock_control_subsys_t subsys,
			void *user_data)
{
   1b3c0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1b3c2:	f004 bc4b 	b.w	1fc5c <z_impl_k_sem_give>
   1b3c6:	bf00      	nop

0001b3c8 <lll_clock_init>:
{
   1b3c8:	b510      	push	{r4, lr}
   1b3ca:	4807      	ldr	r0, [pc, #28]	; (1b3e8 <lll_clock_init+0x20>)
   1b3cc:	f003 fdd2 	bl	1ef74 <z_impl_device_get_binding>
	dev = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
   1b3d0:	4a06      	ldr	r2, [pc, #24]	; (1b3ec <lll_clock_init+0x24>)
   1b3d2:	6010      	str	r0, [r2, #0]
	if (!dev) {
   1b3d4:	b128      	cbz	r0, 1b3e2 <lll_clock_init+0x1a>
   1b3d6:	6883      	ldr	r3, [r0, #8]
}
   1b3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b3dc:	681b      	ldr	r3, [r3, #0]
   1b3de:	2101      	movs	r1, #1
   1b3e0:	4718      	bx	r3
   1b3e2:	f06f 0012 	mvn.w	r0, #18
   1b3e6:	bd10      	pop	{r4, pc}
   1b3e8:	00027aac 	.word	0x00027aac
   1b3ec:	20004048 	.word	0x20004048

0001b3f0 <lll_clock_wait>:
	if (done) {
   1b3f0:	4b12      	ldr	r3, [pc, #72]	; (1b43c <lll_clock_wait+0x4c>)
   1b3f2:	7819      	ldrb	r1, [r3, #0]
   1b3f4:	b109      	cbz	r1, 1b3fa <lll_clock_wait+0xa>
		return 0;
   1b3f6:	2000      	movs	r0, #0
}
   1b3f8:	4770      	bx	lr
{
   1b3fa:	b530      	push	{r4, r5, lr}
	struct clock_control_async_data async_data = {
   1b3fc:	4a10      	ldr	r2, [pc, #64]	; (1b440 <lll_clock_wait+0x50>)
{
   1b3fe:	b08b      	sub	sp, #44	; 0x2c
	done = true;
   1b400:	2401      	movs	r4, #1
	struct clock_control_async_data async_data = {
   1b402:	ad04      	add	r5, sp, #16
   1b404:	e9cd 2502 	strd	r2, r5, [sp, #8]
   1b408:	9101      	str	r1, [sp, #4]
	done = true;
   1b40a:	701c      	strb	r4, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b40c:	4622      	mov	r2, r4
   1b40e:	4628      	mov	r0, r5
   1b410:	f00a fd19 	bl	25e46 <z_impl_k_sem_init>
	err = clock_control_async_on(dev, CLOCK_CONTROL_NRF_SUBSYS_LF,
   1b414:	4b0b      	ldr	r3, [pc, #44]	; (1b444 <lll_clock_wait+0x54>)
   1b416:	6818      	ldr	r0, [r3, #0]
					 struct clock_control_async_data *data)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	if (!api->async_on) {
   1b418:	6883      	ldr	r3, [r0, #8]
   1b41a:	689b      	ldr	r3, [r3, #8]
   1b41c:	b15b      	cbz	r3, 1b436 <lll_clock_wait+0x46>
		return -ENOTSUP;
	}

	return api->async_on(dev, sys, data);
   1b41e:	4621      	mov	r1, r4
   1b420:	aa01      	add	r2, sp, #4
   1b422:	4798      	blx	r3
	if (err) {
   1b424:	b928      	cbnz	r0, 1b432 <lll_clock_wait+0x42>
	return z_impl_k_sem_take(sem, timeout);
   1b426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1b42a:	2300      	movs	r3, #0
   1b42c:	4628      	mov	r0, r5
   1b42e:	f004 fc3b 	bl	1fca8 <z_impl_k_sem_take>
}
   1b432:	b00b      	add	sp, #44	; 0x2c
   1b434:	bd30      	pop	{r4, r5, pc}
		return -ENOTSUP;
   1b436:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1b43a:	e7fa      	b.n	1b432 <lll_clock_wait+0x42>
   1b43c:	2000538d 	.word	0x2000538d
   1b440:	0001b3c1 	.word	0x0001b3c1
   1b444:	20004048 	.word	0x20004048

0001b448 <lll_hfclock_on>:
	err = clock_control_on(dev, CLOCK_CONTROL_NRF_SUBSYS_HF);
   1b448:	4b02      	ldr	r3, [pc, #8]	; (1b454 <lll_hfclock_on+0xc>)
   1b44a:	6818      	ldr	r0, [r3, #0]
	return api->on(dev, sys);
   1b44c:	6883      	ldr	r3, [r0, #8]
   1b44e:	2100      	movs	r1, #0
   1b450:	681b      	ldr	r3, [r3, #0]
   1b452:	4718      	bx	r3
   1b454:	20004048 	.word	0x20004048

0001b458 <lll_hfclock_off>:
	err = clock_control_off(dev, CLOCK_CONTROL_NRF_SUBSYS_HF);
   1b458:	4b02      	ldr	r3, [pc, #8]	; (1b464 <lll_hfclock_off+0xc>)
   1b45a:	6818      	ldr	r0, [r3, #0]
	return api->off(dev, sys);
   1b45c:	6883      	ldr	r3, [r0, #8]
   1b45e:	2100      	movs	r1, #0
   1b460:	685b      	ldr	r3, [r3, #4]
   1b462:	4718      	bx	r3
   1b464:	20004048 	.word	0x20004048

0001b468 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   1b468:	b510      	push	{r4, lr}
   1b46a:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   1b46c:	f7ff ff5e 	bl	1b32c <lll_isr_status_reset>

	radio_filter_disable();
   1b470:	f002 f8b4 	bl	1d5dc <radio_filter_disable>

	lll_isr_cleanup(param);
   1b474:	4620      	mov	r0, r4
}
   1b476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1b47a:	f7ff bf65 	b.w	1b348 <lll_isr_cleanup>
   1b47e:	bf00      	nop

0001b480 <isr_tx>:
{
   1b480:	b530      	push	{r4, r5, lr}
   1b482:	b083      	sub	sp, #12
   1b484:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1b486:	f7ff ff3f 	bl	1b308 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b48a:	2096      	movs	r0, #150	; 0x96
   1b48c:	f002 f8d8 	bl	1d640 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1b490:	2300      	movs	r3, #0
   1b492:	461a      	mov	r2, r3
   1b494:	4619      	mov	r1, r3
   1b496:	4618      	mov	r0, r3
   1b498:	f002 f848 	bl	1d52c <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   1b49c:	f002 f834 	bl	1d508 <radio_pkt_scratch_get>
   1b4a0:	f001 ffa2 	bl	1d3e8 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1b4a4:	f001 fff8 	bl	1d498 <radio_is_ready>
   1b4a8:	b9d8      	cbnz	r0, 1b4e2 <isr_tx+0x62>
	radio_isr_set(isr_rx, param);
   1b4aa:	481d      	ldr	r0, [pc, #116]	; (1b520 <isr_tx+0xa0>)
   1b4ac:	4621      	mov	r1, r4
   1b4ae:	f001 febb 	bl	1d228 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1b4b2:	f7ff fb97 	bl	1abe4 <ull_filter_lll_rl_enabled>
   1b4b6:	bb48      	cbnz	r0, 1b50c <isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b4b8:	f002 f9d6 	bl	1d868 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1b4bc:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b4be:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1b4c0:	4608      	mov	r0, r1
   1b4c2:	f001 ffab 	bl	1d41c <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1b4c6:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1b4c8:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1b4ca:	4608      	mov	r0, r1
   1b4cc:	f001 ffa2 	bl	1d414 <radio_tx_chain_delay_get>
   1b4d0:	442c      	add	r4, r5
   1b4d2:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1b4d4:	1a20      	subs	r0, r4, r0
   1b4d6:	f002 f97f 	bl	1d7d8 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   1b4da:	f002 f9b7 	bl	1d84c <radio_tmr_end_capture>
}
   1b4de:	b003      	add	sp, #12
   1b4e0:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!radio_is_ready());
   1b4e2:	4a10      	ldr	r2, [pc, #64]	; (1b524 <isr_tx+0xa4>)
   1b4e4:	4910      	ldr	r1, [pc, #64]	; (1b528 <isr_tx+0xa8>)
   1b4e6:	4811      	ldr	r0, [pc, #68]	; (1b52c <isr_tx+0xac>)
   1b4e8:	f240 1351 	movw	r3, #337	; 0x151
   1b4ec:	f005 f8a8 	bl	20640 <printk>
   1b4f0:	4040      	eors	r0, r0
   1b4f2:	f380 8811 	msr	BASEPRI, r0
   1b4f6:	f04f 0003 	mov.w	r0, #3
   1b4fa:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   1b4fc:	4808      	ldr	r0, [pc, #32]	; (1b520 <isr_tx+0xa0>)
   1b4fe:	4621      	mov	r1, r4
   1b500:	f001 fe92 	bl	1d228 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1b504:	f7ff fb6e 	bl	1abe4 <ull_filter_lll_rl_enabled>
   1b508:	2800      	cmp	r0, #0
   1b50a:	d0d5      	beq.n	1b4b8 <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b50c:	f10d 0007 	add.w	r0, sp, #7
   1b510:	f7ff f9d2 	bl	1a8b8 <ull_filter_lll_irks_get>
   1b514:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   1b516:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1b51a:	f002 fa51 	bl	1d9c0 <radio_ar_configure>
   1b51e:	e7cb      	b.n	1b4b8 <isr_tx+0x38>
   1b520:	0001b8b9 	.word	0x0001b8b9
   1b524:	00027ac8 	.word	0x00027ac8
   1b528:	00027b14 	.word	0x00027b14
   1b52c:	00026ecc 	.word	0x00026ecc

0001b530 <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t upd = 0U;
	uint8_t chan;

	chan = find_lsb_set(lll->chan_map_curr);
   1b530:	7b03      	ldrb	r3, [r0, #12]
   1b532:	f3c3 1302 	ubfx	r3, r3, #4, #3
{
   1b536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b53a:	2b00      	cmp	r3, #0
   1b53c:	4604      	mov	r4, r0
   1b53e:	fa93 f0a3 	rbit	r0, r3
   1b542:	fab0 f080 	clz	r0, r0
   1b546:	bf08      	it	eq
   1b548:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   1b54c:	1c45      	adds	r5, r0, #1
   1b54e:	d051      	beq.n	1b5f4 <chan_prepare+0xc4>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1b550:	7b22      	ldrb	r2, [r4, #12]
   1b552:	1e59      	subs	r1, r3, #1
   1b554:	400b      	ands	r3, r1
   1b556:	f363 1206 	bfi	r2, r3, #4, #3
   1b55a:	7322      	strb	r2, [r4, #12]

	lll_chan_set(36 + chan);
   1b55c:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1b560:	f7ff fe8c 	bl	1b27c <lll_chan_set>
static inline struct pdu_adv *lll_adv_pdu_latest_get(struct lll_adv_pdu *pdu,
						     uint8_t *is_modified)
{
	uint8_t first;

	first = pdu->first;
   1b564:	7be3      	ldrb	r3, [r4, #15]
	if (first != pdu->last) {
   1b566:	7c22      	ldrb	r2, [r4, #16]
   1b568:	4293      	cmp	r3, r2
   1b56a:	d03d      	beq.n	1b5e8 <chan_prepare+0xb8>
		first += 1U;
   1b56c:	3301      	adds	r3, #1
   1b56e:	b2da      	uxtb	r2, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   1b570:	2a02      	cmp	r2, #2
   1b572:	d036      	beq.n	1b5e2 <chan_prepare+0xb2>
   1b574:	2327      	movs	r3, #39	; 0x27
   1b576:	2502      	movs	r5, #2
   1b578:	fb13 5502 	smlabb	r5, r3, r2, r5
			first = 0U;
		}
		pdu->first = first;
   1b57c:	73e2      	strb	r2, [r4, #15]
		*is_modified = 1U;
   1b57e:	2701      	movs	r7, #1
	}

	return (void *)pdu->pdu[first];
   1b580:	f104 080f 	add.w	r8, r4, #15
   1b584:	eb08 0605 	add.w	r6, r8, r5

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   1b588:	4630      	mov	r0, r6
   1b58a:	f001 ff33 	bl	1d3f4 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1b58e:	f818 3005 	ldrb.w	r3, [r8, r5]
   1b592:	f003 030f 	and.w	r3, r3, #15
   1b596:	2b02      	cmp	r3, #2
   1b598:	d044      	beq.n	1b624 <chan_prepare+0xf4>
	first = pdu->first;
   1b59a:	4620      	mov	r0, r4
	if (first != pdu->last) {
   1b59c:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	first = pdu->first;
   1b5a0:	f810 3f5f 	ldrb.w	r3, [r0, #95]!
	if (first != pdu->last) {
   1b5a4:	429a      	cmp	r2, r3
   1b5a6:	d036      	beq.n	1b616 <chan_prepare+0xe6>
		first += 1U;
   1b5a8:	3301      	adds	r3, #1
   1b5aa:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   1b5ac:	2b02      	cmp	r3, #2
   1b5ae:	d042      	beq.n	1b636 <chan_prepare+0x106>
   1b5b0:	2227      	movs	r2, #39	; 0x27
   1b5b2:	2102      	movs	r1, #2
   1b5b4:	fb12 1203 	smlabb	r2, r2, r3, r1
		pdu->first = first;
   1b5b8:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
	return (void *)pdu->pdu[first];
   1b5bc:	4410      	add	r0, r2
#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
			/* Copy the address from the adv packet we will send
			 * into the scan response.
			 */
			memcpy(&scan_pdu->scan_rsp.addr[0],
   1b5be:	3002      	adds	r0, #2
   1b5c0:	2206      	movs	r2, #6
   1b5c2:	1cb1      	adds	r1, r6, #2
   1b5c4:	f007 f8ac 	bl	22720 <memcpy>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1b5c8:	4621      	mov	r1, r4
   1b5ca:	481c      	ldr	r0, [pc, #112]	; (1b63c <chan_prepare+0x10c>)
   1b5cc:	f001 fe2c 	bl	1d228 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1b5d0:	2096      	movs	r0, #150	; 0x96
   1b5d2:	f002 f835 	bl	1d640 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1b5d6:	2000      	movs	r0, #0
   1b5d8:	f001 ff9a 	bl	1d510 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1b5dc:	4630      	mov	r0, r6
   1b5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b5e2:	4615      	mov	r5, r2
			first = 0U;
   1b5e4:	2200      	movs	r2, #0
   1b5e6:	e7c9      	b.n	1b57c <chan_prepare+0x4c>
   1b5e8:	2527      	movs	r5, #39	; 0x27
   1b5ea:	2202      	movs	r2, #2
   1b5ec:	fb15 2503 	smlabb	r5, r5, r3, r2
	uint8_t upd = 0U;
   1b5f0:	2700      	movs	r7, #0
   1b5f2:	e7c5      	b.n	1b580 <chan_prepare+0x50>
	LL_ASSERT(chan);
   1b5f4:	4a12      	ldr	r2, [pc, #72]	; (1b640 <chan_prepare+0x110>)
   1b5f6:	4913      	ldr	r1, [pc, #76]	; (1b644 <chan_prepare+0x114>)
   1b5f8:	4813      	ldr	r0, [pc, #76]	; (1b648 <chan_prepare+0x118>)
   1b5fa:	f240 2341 	movw	r3, #577	; 0x241
   1b5fe:	f005 f81f 	bl	20640 <printk>
   1b602:	4040      	eors	r0, r0
   1b604:	f380 8811 	msr	BASEPRI, r0
   1b608:	f04f 0003 	mov.w	r0, #3
   1b60c:	df02      	svc	2
   1b60e:	7b23      	ldrb	r3, [r4, #12]
   1b610:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1b614:	e79c      	b.n	1b550 <chan_prepare+0x20>
		if (upd) {
   1b616:	2f00      	cmp	r7, #0
   1b618:	d0d6      	beq.n	1b5c8 <chan_prepare+0x98>
	return (void *)pdu->pdu[first];
   1b61a:	2327      	movs	r3, #39	; 0x27
   1b61c:	fb03 0002 	mla	r0, r3, r2, r0
   1b620:	3002      	adds	r0, #2
   1b622:	e7cc      	b.n	1b5be <chan_prepare+0x8e>
		radio_isr_set(isr_done, lll);
   1b624:	4809      	ldr	r0, [pc, #36]	; (1b64c <chan_prepare+0x11c>)
   1b626:	4621      	mov	r1, r4
   1b628:	f001 fdfe 	bl	1d228 <radio_isr_set>
		radio_switch_complete_and_disable();
   1b62c:	f001 ff8a 	bl	1d544 <radio_switch_complete_and_disable>
}
   1b630:	4630      	mov	r0, r6
   1b632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b636:	461a      	mov	r2, r3
			first = 0U;
   1b638:	2300      	movs	r3, #0
   1b63a:	e7bd      	b.n	1b5b8 <chan_prepare+0x88>
   1b63c:	0001b481 	.word	0x0001b481
   1b640:	00027ac8 	.word	0x00027ac8
   1b644:	0002777c 	.word	0x0002777c
   1b648:	00026ecc 	.word	0x00026ecc
   1b64c:	0001b875 	.word	0x0001b875

0001b650 <prepare_cb>:
{
   1b650:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_adv *lll = prepare_param->param;
   1b652:	68c5      	ldr	r5, [r0, #12]
	uint32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1b654:	4b43      	ldr	r3, [pc, #268]	; (1b764 <prepare_cb+0x114>)

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   1b656:	792c      	ldrb	r4, [r5, #4]
{
   1b658:	b083      	sub	sp, #12
	if (lll_is_stop(lll)) {
   1b65a:	f014 0401 	ands.w	r4, r4, #1
	uint32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1b65e:	9301      	str	r3, [sp, #4]
	if (lll_is_stop(lll)) {
   1b660:	d153      	bne.n	1b70a <prepare_cb+0xba>
	radio_reset();
   1b662:	4606      	mov	r6, r0
   1b664:	f001 fe00 	bl	1d268 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1b668:	4620      	mov	r0, r4
   1b66a:	f001 fe4f 	bl	1d30c <radio_tx_power_set>
	radio_phy_set(0, 0);
   1b66e:	4621      	mov	r1, r4
   1b670:	4620      	mov	r0, r4
   1b672:	f001 fe1f 	bl	1d2b4 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   1b676:	4622      	mov	r2, r4
   1b678:	2125      	movs	r1, #37	; 0x25
   1b67a:	2008      	movs	r0, #8
   1b67c:	f001 fe7e 	bl	1d37c <radio_pkt_configure>
	radio_aa_set((uint8_t *)&aa);
   1b680:	a801      	add	r0, sp, #4
   1b682:	f001 fe61 	bl	1d348 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1b686:	4938      	ldr	r1, [pc, #224]	; (1b768 <prepare_cb+0x118>)
   1b688:	f240 605b 	movw	r0, #1627	; 0x65b
   1b68c:	f001 ff22 	bl	1d4d4 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1b690:	7b2b      	ldrb	r3, [r5, #12]
   1b692:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1b696:	f362 1306 	bfi	r3, r2, #4, #3
   1b69a:	732b      	strb	r3, [r5, #12]
	pdu = chan_prepare(lll);
   1b69c:	4628      	mov	r0, r5
   1b69e:	f7ff ff47 	bl	1b530 <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   1b6a2:	f7ff fa9f 	bl	1abe4 <ull_filter_lll_rl_enabled>
   1b6a6:	bb18      	cbnz	r0, 1b6f0 <prepare_cb+0xa0>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1b6a8:	7b6b      	ldrb	r3, [r5, #13]
   1b6aa:	079b      	lsls	r3, r3, #30
   1b6ac:	d158      	bne.n	1b760 <prepare_cb+0x110>
	evt = HDR_LLL2EVT(lll);
   1b6ae:	682f      	ldr	r7, [r5, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   1b6b0:	6834      	ldr	r4, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1b6b2:	4638      	mov	r0, r7
   1b6b4:	f7ff fdc2 	bl	1b23c <lll_evt_offset_get>
   1b6b8:	4404      	add	r4, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1b6ba:	6872      	ldr	r2, [r6, #4]
   1b6bc:	f104 0109 	add.w	r1, r4, #9
   1b6c0:	2001      	movs	r0, #1
   1b6c2:	f001 ffc9 	bl	1d658 <radio_tmr_start>
	radio_tmr_end_capture();
   1b6c6:	f002 f8c1 	bl	1d84c <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1b6ca:	4628      	mov	r0, r5
   1b6cc:	f7fa f914 	bl	158f8 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   1b6d0:	1c81      	adds	r1, r0, #2
   1b6d2:	4622      	mov	r2, r4
   1b6d4:	b2c9      	uxtb	r1, r1
   1b6d6:	4638      	mov	r0, r7
   1b6d8:	f7ff fdbe 	bl	1b258 <lll_preempt_calc>
   1b6dc:	b360      	cbz	r0, 1b738 <prepare_cb+0xe8>
		radio_isr_set(isr_abort, lll);
   1b6de:	4823      	ldr	r0, [pc, #140]	; (1b76c <prepare_cb+0x11c>)
   1b6e0:	4629      	mov	r1, r5
   1b6e2:	f001 fda1 	bl	1d228 <radio_isr_set>
		radio_disable();
   1b6e6:	f001 feb3 	bl	1d450 <radio_disable>
}
   1b6ea:	2000      	movs	r0, #0
   1b6ec:	b003      	add	sp, #12
   1b6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
   1b6f0:	7b68      	ldrb	r0, [r5, #13]
   1b6f2:	f010 0003 	ands.w	r0, r0, #3
   1b6f6:	bf18      	it	ne
   1b6f8:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   1b6fa:	f7ff f9d3 	bl	1aaa4 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1b6fe:	7841      	ldrb	r1, [r0, #1]
   1b700:	1c82      	adds	r2, r0, #2
   1b702:	7800      	ldrb	r0, [r0, #0]
   1b704:	f001 ff4e 	bl	1d5a4 <radio_filter_configure>
   1b708:	e7d1      	b.n	1b6ae <prepare_cb+0x5e>
		err = lll_hfclock_off();
   1b70a:	f7ff fea5 	bl	1b458 <lll_hfclock_off>
		LL_ASSERT(!err || err == -EBUSY);
   1b70e:	b168      	cbz	r0, 1b72c <prepare_cb+0xdc>
   1b710:	3010      	adds	r0, #16
   1b712:	d00b      	beq.n	1b72c <prepare_cb+0xdc>
   1b714:	4a16      	ldr	r2, [pc, #88]	; (1b770 <prepare_cb+0x120>)
   1b716:	4917      	ldr	r1, [pc, #92]	; (1b774 <prepare_cb+0x124>)
   1b718:	4817      	ldr	r0, [pc, #92]	; (1b778 <prepare_cb+0x128>)
   1b71a:	238e      	movs	r3, #142	; 0x8e
   1b71c:	f004 ff90 	bl	20640 <printk>
   1b720:	4040      	eors	r0, r0
   1b722:	f380 8811 	msr	BASEPRI, r0
   1b726:	f04f 0003 	mov.w	r0, #3
   1b72a:	df02      	svc	2
		lll_done(NULL);
   1b72c:	2000      	movs	r0, #0
   1b72e:	f7ff fd25 	bl	1b17c <lll_done>
}
   1b732:	2000      	movs	r0, #0
   1b734:	b003      	add	sp, #12
   1b736:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = lll_prepare_done(lll);
   1b738:	4628      	mov	r0, r5
   1b73a:	f7ff fd1d 	bl	1b178 <lll_prepare_done>
		LL_ASSERT(!ret);
   1b73e:	2800      	cmp	r0, #0
   1b740:	d0d3      	beq.n	1b6ea <prepare_cb+0x9a>
   1b742:	4a0b      	ldr	r2, [pc, #44]	; (1b770 <prepare_cb+0x120>)
   1b744:	490d      	ldr	r1, [pc, #52]	; (1b77c <prepare_cb+0x12c>)
   1b746:	480c      	ldr	r0, [pc, #48]	; (1b778 <prepare_cb+0x128>)
   1b748:	23eb      	movs	r3, #235	; 0xeb
   1b74a:	f004 ff79 	bl	20640 <printk>
   1b74e:	4040      	eors	r0, r0
   1b750:	f380 8811 	msr	BASEPRI, r0
   1b754:	f04f 0003 	mov.w	r0, #3
   1b758:	df02      	svc	2
}
   1b75a:	2000      	movs	r0, #0
   1b75c:	b003      	add	sp, #12
   1b75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *wl = ull_filter_lll_get(true);
   1b760:	2001      	movs	r0, #1
   1b762:	e7ca      	b.n	1b6fa <prepare_cb+0xaa>
   1b764:	8e89bed6 	.word	0x8e89bed6
   1b768:	00555555 	.word	0x00555555
   1b76c:	0001b469 	.word	0x0001b469
   1b770:	00027ac8 	.word	0x00027ac8
   1b774:	00027a8c 	.word	0x00027a8c
   1b778:	00026ecc 	.word	0x00026ecc
   1b77c:	00027188 	.word	0x00027188

0001b780 <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   1b780:	68c3      	ldr	r3, [r0, #12]
{
   1b782:	b570      	push	{r4, r5, r6, lr}
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   1b784:	681e      	ldr	r6, [r3, #0]
{
   1b786:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1b788:	f7f6 fde2 	bl	12350 <ticker_ticks_now_get>
   1b78c:	4605      	mov	r5, r0
   1b78e:	4630      	mov	r0, r6
   1b790:	f7ff fd54 	bl	1b23c <lll_evt_offset_get>
	p->remainder = 0;
   1b794:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1b796:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1b798:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1b79c:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1b79e:	4620      	mov	r0, r4
}
   1b7a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1b7a4:	f7ff bf54 	b.w	1b650 <prepare_cb>

0001b7a8 <is_abort_cb>:
	if (next != curr) {
   1b7a8:	4282      	cmp	r2, r0
{
   1b7aa:	b508      	push	{r3, lr}
	if (next != curr) {
   1b7ac:	d01f      	beq.n	1b7ee <is_abort_cb+0x46>
		} else if (lll->is_hdcd) {
   1b7ae:	7b12      	ldrb	r2, [r2, #12]
   1b7b0:	07d2      	lsls	r2, r2, #31
   1b7b2:	d402      	bmi.n	1b7ba <is_abort_cb+0x12>
			return -ECANCELED;
   1b7b4:	f06f 0047 	mvn.w	r0, #71	; 0x47
}
   1b7b8:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1b7ba:	4a15      	ldr	r2, [pc, #84]	; (1b810 <is_abort_cb+0x68>)
   1b7bc:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1b7be:	9a02      	ldr	r2, [sp, #8]
   1b7c0:	2300      	movs	r3, #0
   1b7c2:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   1b7c4:	f7ff fe40 	bl	1b448 <lll_hfclock_on>
			LL_ASSERT(!err || err == -EINPROGRESS);
   1b7c8:	b1f0      	cbz	r0, 1b808 <is_abort_cb+0x60>
   1b7ca:	3044      	adds	r0, #68	; 0x44
   1b7cc:	d01c      	beq.n	1b808 <is_abort_cb+0x60>
   1b7ce:	4a11      	ldr	r2, [pc, #68]	; (1b814 <is_abort_cb+0x6c>)
   1b7d0:	4911      	ldr	r1, [pc, #68]	; (1b818 <is_abort_cb+0x70>)
   1b7d2:	4812      	ldr	r0, [pc, #72]	; (1b81c <is_abort_cb+0x74>)
   1b7d4:	f240 1315 	movw	r3, #277	; 0x115
   1b7d8:	f004 ff32 	bl	20640 <printk>
   1b7dc:	4040      	eors	r0, r0
   1b7de:	f380 8811 	msr	BASEPRI, r0
   1b7e2:	f04f 0003 	mov.w	r0, #3
   1b7e6:	df02      	svc	2
   1b7e8:	f06f 000a 	mvn.w	r0, #10
}
   1b7ec:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1b7ee:	7bd3      	ldrb	r3, [r2, #15]
   1b7f0:	2127      	movs	r1, #39	; 0x27
   1b7f2:	fb01 2203 	mla	r2, r1, r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1b7f6:	7c53      	ldrb	r3, [r2, #17]
   1b7f8:	f003 030f 	and.w	r3, r3, #15
   1b7fc:	2b01      	cmp	r3, #1
		return 0;
   1b7fe:	bf14      	ite	ne
   1b800:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   1b804:	2000      	moveq	r0, #0
}
   1b806:	bd08      	pop	{r3, pc}
   1b808:	f06f 000a 	mvn.w	r0, #10
   1b80c:	bd08      	pop	{r3, pc}
   1b80e:	bf00      	nop
   1b810:	0001b781 	.word	0x0001b781
   1b814:	00027ac8 	.word	0x00027ac8
   1b818:	00027b28 	.word	0x00027b28
   1b81c:	00026ecc 	.word	0x00026ecc

0001b820 <abort_cb>:
{
   1b820:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1b822:	b1b8      	cbz	r0, 1b854 <abort_cb+0x34>
	err = lll_hfclock_off();
   1b824:	460c      	mov	r4, r1
   1b826:	f7ff fe17 	bl	1b458 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   1b82a:	b170      	cbz	r0, 1b84a <abort_cb+0x2a>
   1b82c:	3010      	adds	r0, #16
   1b82e:	d00c      	beq.n	1b84a <abort_cb+0x2a>
   1b830:	4a0c      	ldr	r2, [pc, #48]	; (1b864 <abort_cb+0x44>)
   1b832:	490d      	ldr	r1, [pc, #52]	; (1b868 <abort_cb+0x48>)
   1b834:	480d      	ldr	r0, [pc, #52]	; (1b86c <abort_cb+0x4c>)
   1b836:	f240 133b 	movw	r3, #315	; 0x13b
   1b83a:	f004 ff01 	bl	20640 <printk>
   1b83e:	4040      	eors	r0, r0
   1b840:	f380 8811 	msr	BASEPRI, r0
   1b844:	f04f 0003 	mov.w	r0, #3
   1b848:	df02      	svc	2
	lll_done(param);
   1b84a:	4620      	mov	r0, r4
}
   1b84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b850:	f7ff bc94 	b.w	1b17c <lll_done>
		radio_isr_set(isr_abort, param);
   1b854:	4806      	ldr	r0, [pc, #24]	; (1b870 <abort_cb+0x50>)
   1b856:	f001 fce7 	bl	1d228 <radio_isr_set>
}
   1b85a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1b85e:	f001 bdf7 	b.w	1d450 <radio_disable>
   1b862:	bf00      	nop
   1b864:	00027ac8 	.word	0x00027ac8
   1b868:	00027a8c 	.word	0x00027a8c
   1b86c:	00026ecc 	.word	0x00026ecc
   1b870:	0001b469 	.word	0x0001b469

0001b874 <isr_done>:
{
   1b874:	b510      	push	{r4, lr}
   1b876:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1b878:	f7ff fd58 	bl	1b32c <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   1b87c:	7b23      	ldrb	r3, [r4, #12]
   1b87e:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1b882:	2a01      	cmp	r2, #1
   1b884:	d105      	bne.n	1b892 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1b886:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1b88a:	f362 1306 	bfi	r3, r2, #4, #3
   1b88e:	7323      	strb	r3, [r4, #12]
   1b890:	b2db      	uxtb	r3, r3
	if (lll->chan_map_curr) {
   1b892:	f013 0f70 	tst.w	r3, #112	; 0x70
   1b896:	d106      	bne.n	1b8a6 <isr_done+0x32>
	radio_filter_disable();
   1b898:	f001 fea0 	bl	1d5dc <radio_filter_disable>
	lll_isr_cleanup(param);
   1b89c:	4620      	mov	r0, r4
}
   1b89e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1b8a2:	f7ff bd51 	b.w	1b348 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   1b8a6:	4620      	mov	r0, r4
   1b8a8:	f7ff fe42 	bl	1b530 <chan_prepare>
		radio_tx_enable();
   1b8ac:	f001 fdca 	bl	1d444 <radio_tx_enable>
}
   1b8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1b8b4:	f001 bfca 	b.w	1d84c <radio_tmr_end_capture>

0001b8b8 <isr_rx>:
{
   1b8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8bc:	b083      	sub	sp, #12
   1b8be:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1b8c0:	f001 fdf4 	bl	1d4ac <radio_is_done>
	if (trx_done) {
   1b8c4:	f010 0fff 	tst.w	r0, #255	; 0xff
   1b8c8:	d10a      	bne.n	1b8e0 <isr_rx+0x28>
	lll_isr_status_reset();
   1b8ca:	f7ff fd2f 	bl	1b32c <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   1b8ce:	48c7      	ldr	r0, [pc, #796]	; (1bbec <isr_rx+0x334>)
   1b8d0:	4621      	mov	r1, r4
   1b8d2:	f001 fca9 	bl	1d228 <radio_isr_set>
	radio_disable();
   1b8d6:	f001 fdbb 	bl	1d450 <radio_disable>
}
   1b8da:	b003      	add	sp, #12
   1b8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		crc_ok = radio_crc_is_valid();
   1b8e0:	f001 fe04 	bl	1d4ec <radio_crc_is_valid>
   1b8e4:	4607      	mov	r7, r0
		devmatch_ok = radio_filter_has_match();
   1b8e6:	f001 fe8b 	bl	1d600 <radio_filter_has_match>
   1b8ea:	4605      	mov	r5, r0
		devmatch_id = radio_filter_match_get();
   1b8ec:	f001 fe92 	bl	1d614 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1b8f0:	f002 f8ac 	bl	1da4c <radio_ar_has_match>
   1b8f4:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   1b8f6:	f002 f897 	bl	1da28 <radio_ar_match_get>
   1b8fa:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   1b8fc:	f001 fe48 	bl	1d590 <radio_rssi_is_ready>
	lll_isr_status_reset();
   1b900:	f7ff fd14 	bl	1b32c <lll_isr_status_reset>
	if (crc_ok) {
   1b904:	f017 0fff 	tst.w	r7, #255	; 0xff
   1b908:	d0e1      	beq.n	1b8ce <isr_rx+0x16>
{
	struct pdu_adv *pdu_rx, *pdu_adv;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1b90a:	f016 07ff 	ands.w	r7, r6, #255	; 0xff
   1b90e:	f040 8085 	bne.w	1ba1c <isr_rx+0x164>
   1b912:	20ff      	movs	r0, #255	; 0xff
   1b914:	f88d 0007 	strb.w	r0, [sp, #7]
				    FILTER_IDX_NONE;
#else
	uint8_t rl_idx = FILTER_IDX_NONE;
#endif /* CONFIG_BT_CTLR_PRIVACY */

	pdu_rx = (void *)radio_pkt_scratch_get();
   1b918:	f001 fdf6 	bl	1d508 <radio_pkt_scratch_get>
   1b91c:	4606      	mov	r6, r0
	pdu_adv = lll_adv_data_curr_get(lll);

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1b91e:	7800      	ldrb	r0, [r0, #0]
   1b920:	7be1      	ldrb	r1, [r4, #15]
   1b922:	f04f 0827 	mov.w	r8, #39	; 0x27
   1b926:	2211      	movs	r2, #17
   1b928:	f000 030f 	and.w	r3, r0, #15
   1b92c:	fb18 2801 	smlabb	r8, r8, r1, r2
   1b930:	2b03      	cmp	r3, #3
		devmatch_ok = radio_filter_has_match();
   1b932:	b2ed      	uxtb	r5, r5
   1b934:	eb04 0908 	add.w	r9, r4, r8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1b938:	f000 8083 	beq.w	1ba42 <isr_rx+0x18a>
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */
		return 0;

#if defined(CONFIG_BT_PERIPHERAL)
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1b93c:	2b05      	cmp	r3, #5
   1b93e:	d1c6      	bne.n	1b8ce <isr_rx+0x16>
   1b940:	7873      	ldrb	r3, [r6, #1]
   1b942:	2b22      	cmp	r3, #34	; 0x22
   1b944:	d1c3      	bne.n	1b8ce <isr_rx+0x16>
static inline bool isr_rx_ci_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *ci, uint8_t devmatch_ok,
				   uint8_t *rl_idx)
{
	/* LL 4.3.2: filter policy shall be ignored for directed adv */
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1b946:	f814 3008 	ldrb.w	r3, [r4, r8]
   1b94a:	f003 030f 	and.w	r3, r3, #15
   1b94e:	2b01      	cmp	r3, #1
   1b950:	f000 80c7 	beq.w	1bae2 <isr_rx+0x22a>
		       isr_rx_ci_adva_check(adv, ci) &&
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	return ((((lll->filter_policy & 0x02) == 0) &&
   1b954:	7b63      	ldrb	r3, [r4, #13]
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						ci->connect_ind.init_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x02) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b956:	0799      	lsls	r1, r3, #30
   1b958:	d565      	bpl.n	1ba26 <isr_rx+0x16e>
		(((lll->filter_policy & 0x02) != 0) &&
   1b95a:	2d00      	cmp	r5, #0
   1b95c:	f000 80b9 	beq.w	1bad2 <isr_rx+0x21a>
}

static inline bool isr_rx_ci_adva_check(struct pdu_adv *adv,
					struct pdu_adv *ci)
{
	return (adv->tx_addr == ci->rx_addr) &&
   1b960:	f814 3008 	ldrb.w	r3, [r4, r8]
   1b964:	7831      	ldrb	r1, [r6, #0]
   1b966:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1b96a:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   1b96e:	d1ae      	bne.n	1b8ce <isr_rx+0x16>
   1b970:	f003 030f 	and.w	r3, r3, #15
   1b974:	2b01      	cmp	r3, #1
   1b976:	f109 0902 	add.w	r9, r9, #2
   1b97a:	f106 0508 	add.w	r5, r6, #8
   1b97e:	f000 80df 	beq.w	1bb40 <isr_rx+0x288>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
			 BDADDR_SIZE)) ||
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   1b982:	4629      	mov	r1, r5
   1b984:	4648      	mov	r0, r9
   1b986:	2206      	movs	r2, #6
   1b988:	f006 feba 	bl	22700 <memcmp>
			 BDADDR_SIZE)) ||
   1b98c:	fab0 f080 	clz	r0, r0
   1b990:	0940      	lsrs	r0, r0, #5
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1b992:	2800      	cmp	r0, #0
   1b994:	d09b      	beq.n	1b8ce <isr_rx+0x16>
				   &rl_idx) &&
   1b996:	68a3      	ldr	r3, [r4, #8]
   1b998:	2b00      	cmp	r3, #0
   1b99a:	d098      	beq.n	1b8ce <isr_rx+0x16>
			rx = ull_pdu_rx_alloc_peek(4);
   1b99c:	2004      	movs	r0, #4
   1b99e:	f7f9 fb83 	bl	150a8 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   1b9a2:	2800      	cmp	r0, #0
   1b9a4:	d093      	beq.n	1b8ce <isr_rx+0x16>
		radio_isr_set(isr_abort, lll);
   1b9a6:	4892      	ldr	r0, [pc, #584]	; (1bbf0 <isr_rx+0x338>)
   1b9a8:	4621      	mov	r1, r4
   1b9aa:	f001 fc3d 	bl	1d228 <radio_isr_set>
		radio_disable();
   1b9ae:	f001 fd4f 	bl	1d450 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1b9b2:	f001 fd71 	bl	1d498 <radio_is_ready>
   1b9b6:	2800      	cmp	r0, #0
   1b9b8:	d17d      	bne.n	1bab6 <isr_rx+0x1fe>
	int ret = !!hdr->is_stop;
   1b9ba:	7923      	ldrb	r3, [r4, #4]
	hdr->is_stop = 1U;
   1b9bc:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   1b9c0:	07db      	lsls	r3, r3, #31
   1b9c2:	7122      	strb	r2, [r4, #4]
   1b9c4:	d469      	bmi.n	1ba9a <isr_rx+0x1e2>
		rx = ull_pdu_rx_alloc();
   1b9c6:	f7f9 fb8d 	bl	150e4 <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
   1b9ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx = ull_pdu_rx_alloc();
   1b9ce:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1b9d0:	2209      	movs	r2, #9
		rx->hdr.handle = 0xffff;
   1b9d2:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1b9d4:	4631      	mov	r1, r6
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1b9d6:	7102      	strb	r2, [r0, #4]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1b9d8:	2224      	movs	r2, #36	; 0x24
   1b9da:	301c      	adds	r0, #28
   1b9dc:	f006 fea0 	bl	22720 <memcpy>
		ftr->param = lll;
   1b9e0:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1b9e2:	f001 fedf 	bl	1d7a4 <radio_tmr_start_get>
   1b9e6:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1b9e8:	f001 ff38 	bl	1d85c <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   1b9ec:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1b9ee:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   1b9f0:	4608      	mov	r0, r1
   1b9f2:	f001 fd0f 	bl	1d414 <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1b9f6:	1a24      	subs	r4, r4, r0
   1b9f8:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1b9fa:	2f00      	cmp	r7, #0
   1b9fc:	d04b      	beq.n	1ba96 <isr_rx+0x1de>
   1b9fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ba02:	76ab      	strb	r3, [r5, #26]
			ftr->extra = ull_pdu_rx_alloc();
   1ba04:	f7f9 fb6e 	bl	150e4 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   1ba08:	4629      	mov	r1, r5
			ftr->extra = ull_pdu_rx_alloc();
   1ba0a:	60e8      	str	r0, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   1ba0c:	6828      	ldr	r0, [r5, #0]
   1ba0e:	f7f9 fb81 	bl	15114 <ull_rx_put>
		ull_rx_sched();
   1ba12:	f7f9 fb8f 	bl	15134 <ull_rx_sched>
}
   1ba16:	b003      	add	sp, #12
   1ba18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1ba1c:	fa5f f088 	uxtb.w	r0, r8
   1ba20:	f7fe ffbe 	bl	1a9a0 <ull_filter_lll_rl_irk_idx>
   1ba24:	e776      	b.n	1b914 <isr_rx+0x5c>
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1ba26:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1ba2a:	f10d 0207 	add.w	r2, sp, #7
   1ba2e:	1cb1      	adds	r1, r6, #2
   1ba30:	f7ff f878 	bl	1ab24 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1ba34:	2800      	cmp	r0, #0
   1ba36:	d193      	bne.n	1b960 <isr_rx+0xa8>
		(((lll->filter_policy & 0x02) != 0) &&
   1ba38:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   1ba3a:	079a      	lsls	r2, r3, #30
   1ba3c:	f57f af47 	bpl.w	1b8ce <isr_rx+0x16>
   1ba40:	e78b      	b.n	1b95a <isr_rx+0xa2>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1ba42:	7873      	ldrb	r3, [r6, #1]
   1ba44:	2b0c      	cmp	r3, #12
   1ba46:	f47f af42 	bne.w	1b8ce <isr_rx+0x16>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   1ba4a:	f814 3008 	ldrb.w	r3, [r4, r8]
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1ba4e:	f003 030f 	and.w	r3, r3, #15
   1ba52:	2b01      	cmp	r3, #1
   1ba54:	f43f af3b 	beq.w	1b8ce <isr_rx+0x16>
	return ((((lll->filter_policy & 0x01) == 0) &&
   1ba58:	7b63      	ldrb	r3, [r4, #13]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1ba5a:	07da      	lsls	r2, r3, #31
   1ba5c:	d50d      	bpl.n	1ba7a <isr_rx+0x1c2>
		(((lll->filter_policy & 0x01) != 0) &&
   1ba5e:	2d00      	cmp	r5, #0
   1ba60:	d077      	beq.n	1bb52 <isr_rx+0x29a>
	return (adv->tx_addr == sr->rx_addr) &&
   1ba62:	f814 3008 	ldrb.w	r3, [r4, r8]
   1ba66:	7830      	ldrb	r0, [r6, #0]
   1ba68:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1ba6c:	ebb3 1fd0 	cmp.w	r3, r0, lsr #7
   1ba70:	f000 8089 	beq.w	1bb86 <isr_rx+0x2ce>
   1ba74:	f000 030f 	and.w	r3, r0, #15
   1ba78:	e760      	b.n	1b93c <isr_rx+0x84>
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   1ba7a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1ba7e:	f10d 0207 	add.w	r2, sp, #7
   1ba82:	1cb1      	adds	r1, r6, #2
   1ba84:	f7ff f84e 	bl	1ab24 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   1ba88:	2800      	cmp	r0, #0
   1ba8a:	d1ea      	bne.n	1ba62 <isr_rx+0x1aa>
		(((lll->filter_policy & 0x01) != 0) &&
   1ba8c:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   1ba8e:	07db      	lsls	r3, r3, #31
   1ba90:	d4e5      	bmi.n	1ba5e <isr_rx+0x1a6>
   1ba92:	7830      	ldrb	r0, [r6, #0]
   1ba94:	e7ee      	b.n	1ba74 <isr_rx+0x1bc>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1ba96:	23ff      	movs	r3, #255	; 0xff
   1ba98:	e7b3      	b.n	1ba02 <isr_rx+0x14a>
		LL_ASSERT(!ret);
   1ba9a:	4a56      	ldr	r2, [pc, #344]	; (1bbf4 <isr_rx+0x33c>)
   1ba9c:	4956      	ldr	r1, [pc, #344]	; (1bbf8 <isr_rx+0x340>)
   1ba9e:	4857      	ldr	r0, [pc, #348]	; (1bbfc <isr_rx+0x344>)
   1baa0:	f44f 7334 	mov.w	r3, #720	; 0x2d0
   1baa4:	f004 fdcc 	bl	20640 <printk>
   1baa8:	4040      	eors	r0, r0
   1baaa:	f380 8811 	msr	BASEPRI, r0
   1baae:	f04f 0003 	mov.w	r0, #3
   1bab2:	df02      	svc	2
   1bab4:	e787      	b.n	1b9c6 <isr_rx+0x10e>
		LL_ASSERT(!radio_is_ready());
   1bab6:	4a4f      	ldr	r2, [pc, #316]	; (1bbf4 <isr_rx+0x33c>)
   1bab8:	4951      	ldr	r1, [pc, #324]	; (1bc00 <isr_rx+0x348>)
   1baba:	4850      	ldr	r0, [pc, #320]	; (1bbfc <isr_rx+0x344>)
   1babc:	f240 23c2 	movw	r3, #706	; 0x2c2
   1bac0:	f004 fdbe 	bl	20640 <printk>
   1bac4:	4040      	eors	r0, r0
   1bac6:	f380 8811 	msr	BASEPRI, r0
   1baca:	f04f 0003 	mov.w	r0, #3
   1bace:	df02      	svc	2
   1bad0:	e773      	b.n	1b9ba <isr_rx+0x102>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1bad2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1bad6:	f7fe ffb5 	bl	1aa44 <ull_filter_lll_irk_whitelisted>
   1bada:	2800      	cmp	r0, #0
   1badc:	f47f af40 	bne.w	1b960 <isr_rx+0xa8>
   1bae0:	e6f5      	b.n	1b8ce <isr_rx+0x16>
						      ci->connect_ind.init_addr,
   1bae2:	1cb5      	adds	r5, r6, #2
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1bae4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1bae8:	4629      	mov	r1, r5
   1baea:	f10d 0207 	add.w	r2, sp, #7
   1baee:	f7ff f819 	bl	1ab24 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(adv, ci) &&
   1baf2:	2800      	cmp	r0, #0
   1baf4:	f43f aeeb 	beq.w	1b8ce <isr_rx+0x16>
	return (adv->tx_addr == ci->rx_addr) &&
   1baf8:	f814 3008 	ldrb.w	r3, [r4, r8]
   1bafc:	7831      	ldrb	r1, [r6, #0]
   1bafe:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1bb02:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   1bb06:	f47f aee2 	bne.w	1b8ce <isr_rx+0x16>
   1bb0a:	f003 030f 	and.w	r3, r3, #15
   1bb0e:	2b01      	cmp	r3, #1
   1bb10:	f109 0b02 	add.w	fp, r9, #2
   1bb14:	f106 0a08 	add.w	sl, r6, #8
   1bb18:	d060      	beq.n	1bbdc <isr_rx+0x324>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   1bb1a:	4651      	mov	r1, sl
   1bb1c:	4658      	mov	r0, fp
   1bb1e:	2206      	movs	r2, #6
   1bb20:	f006 fdee 	bl	22700 <memcmp>
			 BDADDR_SIZE)) ||
   1bb24:	2800      	cmp	r0, #0
   1bb26:	f47f aed2 	bne.w	1b8ce <isr_rx+0x16>
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
   1bb2a:	f89d 0007 	ldrb.w	r0, [sp, #7]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1bb2e:	28ff      	cmp	r0, #255	; 0xff
   1bb30:	d016      	beq.n	1bb60 <isr_rx+0x2a8>
   1bb32:	7ba3      	ldrb	r3, [r4, #14]
   1bb34:	2bff      	cmp	r3, #255	; 0xff
   1bb36:	d013      	beq.n	1bb60 <isr_rx+0x2a8>
		return rl_idx == lll->rl_idx;
   1bb38:	1ac5      	subs	r5, r0, r3
   1bb3a:	4268      	negs	r0, r5
   1bb3c:	4168      	adcs	r0, r5
   1bb3e:	e728      	b.n	1b992 <isr_rx+0xda>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1bb40:	2206      	movs	r2, #6
   1bb42:	4629      	mov	r1, r5
   1bb44:	4648      	mov	r0, r9
   1bb46:	f006 fddb 	bl	22700 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1bb4a:	2800      	cmp	r0, #0
   1bb4c:	f43f af23 	beq.w	1b996 <isr_rx+0xde>
   1bb50:	e717      	b.n	1b982 <isr_rx+0xca>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1bb52:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1bb56:	f7fe ff75 	bl	1aa44 <ull_filter_lll_irk_whitelisted>
   1bb5a:	2800      	cmp	r0, #0
   1bb5c:	d181      	bne.n	1ba62 <isr_rx+0x1aa>
   1bb5e:	e798      	b.n	1ba92 <isr_rx+0x1da>
	return (adv->rx_addr == ci->tx_addr) &&
   1bb60:	7833      	ldrb	r3, [r6, #0]
   1bb62:	f814 2008 	ldrb.w	r2, [r4, r8]
   1bb66:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1bb6a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1bb6e:	f47f aeae 	bne.w	1b8ce <isr_rx+0x16>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   1bb72:	4629      	mov	r1, r5
   1bb74:	f109 0008 	add.w	r0, r9, #8
   1bb78:	2206      	movs	r2, #6
   1bb7a:	f006 fdc1 	bl	22700 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   1bb7e:	fab0 f080 	clz	r0, r0
   1bb82:	0940      	lsrs	r0, r0, #5
		       isr_rx_ci_adva_check(adv, ci) &&
   1bb84:	e705      	b.n	1b992 <isr_rx+0xda>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1bb86:	2206      	movs	r2, #6
   1bb88:	f106 0108 	add.w	r1, r6, #8
   1bb8c:	f109 0002 	add.w	r0, r9, #2
   1bb90:	f006 fdb6 	bl	22700 <memcmp>
	return (adv->tx_addr == sr->rx_addr) &&
   1bb94:	2800      	cmp	r0, #0
   1bb96:	f47f af7c 	bne.w	1ba92 <isr_rx+0x1da>
		radio_isr_set(isr_done, lll);
   1bb9a:	4814      	ldr	r0, [pc, #80]	; (1bbec <isr_rx+0x334>)
   1bb9c:	4621      	mov	r1, r4
   1bb9e:	f001 fb43 	bl	1d228 <radio_isr_set>
		radio_switch_complete_and_disable();
   1bba2:	f001 fccf 	bl	1d544 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1bba6:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
   1bbaa:	2327      	movs	r3, #39	; 0x27
   1bbac:	fb03 4000 	mla	r0, r3, r0, r4
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1bbb0:	3061      	adds	r0, #97	; 0x61
   1bbb2:	f001 fc1f 	bl	1d3f4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1bbb6:	f001 fc6f 	bl	1d498 <radio_is_ready>
   1bbba:	2800      	cmp	r0, #0
   1bbbc:	f43f ae8d 	beq.w	1b8da <isr_rx+0x22>
   1bbc0:	4a0c      	ldr	r2, [pc, #48]	; (1bbf4 <isr_rx+0x33c>)
   1bbc2:	490f      	ldr	r1, [pc, #60]	; (1bc00 <isr_rx+0x348>)
   1bbc4:	480d      	ldr	r0, [pc, #52]	; (1bbfc <isr_rx+0x344>)
   1bbc6:	f240 2386 	movw	r3, #646	; 0x286
   1bbca:	f004 fd39 	bl	20640 <printk>
   1bbce:	4040      	eors	r0, r0
   1bbd0:	f380 8811 	msr	BASEPRI, r0
   1bbd4:	f04f 0003 	mov.w	r0, #3
   1bbd8:	df02      	svc	2
		if (!err) {
   1bbda:	e67e      	b.n	1b8da <isr_rx+0x22>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1bbdc:	2206      	movs	r2, #6
   1bbde:	4651      	mov	r1, sl
   1bbe0:	4658      	mov	r0, fp
   1bbe2:	f006 fd8d 	bl	22700 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1bbe6:	2800      	cmp	r0, #0
   1bbe8:	d09f      	beq.n	1bb2a <isr_rx+0x272>
   1bbea:	e796      	b.n	1bb1a <isr_rx+0x262>
   1bbec:	0001b875 	.word	0x0001b875
   1bbf0:	0001b469 	.word	0x0001b469
   1bbf4:	00027ac8 	.word	0x00027ac8
   1bbf8:	00027188 	.word	0x00027188
   1bbfc:	00026ecc 	.word	0x00026ecc
   1bc00:	00027b14 	.word	0x00027b14

0001bc04 <lll_adv_init>:
}
   1bc04:	2000      	movs	r0, #0
   1bc06:	4770      	bx	lr

0001bc08 <lll_adv_reset>:
   1bc08:	2000      	movs	r0, #0
   1bc0a:	4770      	bx	lr

0001bc0c <lll_adv_prepare>:
{
   1bc0c:	b510      	push	{r4, lr}
   1bc0e:	b082      	sub	sp, #8
   1bc10:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1bc12:	f7ff fc19 	bl	1b448 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1bc16:	b108      	cbz	r0, 1bc1c <lll_adv_prepare+0x10>
   1bc18:	3044      	adds	r0, #68	; 0x44
   1bc1a:	d119      	bne.n	1bc50 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
   1bc1c:	4a13      	ldr	r2, [pc, #76]	; (1bc6c <lll_adv_prepare+0x60>)
   1bc1e:	4914      	ldr	r1, [pc, #80]	; (1bc70 <lll_adv_prepare+0x64>)
   1bc20:	4814      	ldr	r0, [pc, #80]	; (1bc74 <lll_adv_prepare+0x68>)
   1bc22:	9400      	str	r4, [sp, #0]
   1bc24:	2300      	movs	r3, #0
   1bc26:	f7ff fa1b 	bl	1b060 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1bc2a:	b108      	cbz	r0, 1bc30 <lll_adv_prepare+0x24>
   1bc2c:	3044      	adds	r0, #68	; 0x44
   1bc2e:	d101      	bne.n	1bc34 <lll_adv_prepare+0x28>
}
   1bc30:	b002      	add	sp, #8
   1bc32:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1bc34:	4a10      	ldr	r2, [pc, #64]	; (1bc78 <lll_adv_prepare+0x6c>)
   1bc36:	4911      	ldr	r1, [pc, #68]	; (1bc7c <lll_adv_prepare+0x70>)
   1bc38:	4811      	ldr	r0, [pc, #68]	; (1bc80 <lll_adv_prepare+0x74>)
   1bc3a:	2373      	movs	r3, #115	; 0x73
   1bc3c:	f004 fd00 	bl	20640 <printk>
   1bc40:	4040      	eors	r0, r0
   1bc42:	f380 8811 	msr	BASEPRI, r0
   1bc46:	f04f 0003 	mov.w	r0, #3
   1bc4a:	df02      	svc	2
}
   1bc4c:	b002      	add	sp, #8
   1bc4e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1bc50:	4a09      	ldr	r2, [pc, #36]	; (1bc78 <lll_adv_prepare+0x6c>)
   1bc52:	490a      	ldr	r1, [pc, #40]	; (1bc7c <lll_adv_prepare+0x70>)
   1bc54:	480a      	ldr	r0, [pc, #40]	; (1bc80 <lll_adv_prepare+0x74>)
   1bc56:	2370      	movs	r3, #112	; 0x70
   1bc58:	f004 fcf2 	bl	20640 <printk>
   1bc5c:	4040      	eors	r0, r0
   1bc5e:	f380 8811 	msr	BASEPRI, r0
   1bc62:	f04f 0003 	mov.w	r0, #3
   1bc66:	df02      	svc	2
   1bc68:	e7d8      	b.n	1bc1c <lll_adv_prepare+0x10>
   1bc6a:	bf00      	nop
   1bc6c:	0001b651 	.word	0x0001b651
   1bc70:	0001b821 	.word	0x0001b821
   1bc74:	0001b7a9 	.word	0x0001b7a9
   1bc78:	00027ac8 	.word	0x00027ac8
   1bc7c:	00027b28 	.word	0x00027b28
   1bc80:	00026ecc 	.word	0x00026ecc

0001bc84 <ticker_stop_cb>:
{
   1bc84:	b508      	push	{r3, lr}
	radio_isr_set(isr_cleanup, param);
   1bc86:	4619      	mov	r1, r3
   1bc88:	4803      	ldr	r0, [pc, #12]	; (1bc98 <ticker_stop_cb+0x14>)
   1bc8a:	f001 facd 	bl	1d228 <radio_isr_set>
}
   1bc8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   1bc92:	f001 bbdd 	b.w	1d450 <radio_disable>
   1bc96:	bf00      	nop
   1bc98:	0001c1b1 	.word	0x0001c1b1

0001bc9c <prepare_cb>:
{
   1bc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_scan *lll = p->param;
   1bc9e:	68c4      	ldr	r4, [r0, #12]
	uint32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1bca0:	4b83      	ldr	r3, [pc, #524]	; (1beb0 <prepare_cb+0x214>)
   1bca2:	7925      	ldrb	r5, [r4, #4]
{
   1bca4:	b08d      	sub	sp, #52	; 0x34
	if (lll_is_stop(lll)) {
   1bca6:	f015 0501 	ands.w	r5, r5, #1
	uint32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1bcaa:	930b      	str	r3, [sp, #44]	; 0x2c
	if (lll_is_stop(lll)) {
   1bcac:	f040 808a 	bne.w	1bdc4 <prepare_cb+0x128>
	lll->state = 0U;
   1bcb0:	7da3      	ldrb	r3, [r4, #22]
   1bcb2:	f365 0300 	bfi	r3, r5, #0, #1
   1bcb6:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   1bcb8:	4606      	mov	r6, r0
   1bcba:	f001 fad5 	bl	1d268 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1bcbe:	4628      	mov	r0, r5
   1bcc0:	f001 fb24 	bl	1d30c <radio_tx_power_set>
	radio_phy_set(0, 0);
   1bcc4:	4629      	mov	r1, r5
   1bcc6:	4628      	mov	r0, r5
   1bcc8:	f001 faf4 	bl	1d2b4 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   1bccc:	462a      	mov	r2, r5
   1bcce:	2125      	movs	r1, #37	; 0x25
   1bcd0:	2008      	movs	r0, #8
   1bcd2:	f001 fb53 	bl	1d37c <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1bcd6:	2001      	movs	r0, #1
   1bcd8:	f7f9 f9e6 	bl	150a8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1bcdc:	4605      	mov	r5, r0
   1bcde:	2800      	cmp	r0, #0
   1bce0:	f000 80d9 	beq.w	1be96 <prepare_cb+0x1fa>
	radio_pkt_rx_set(node_rx->pdu);
   1bce4:	f105 001c 	add.w	r0, r5, #28
   1bce8:	f001 fb7e 	bl	1d3e8 <radio_pkt_rx_set>
	radio_aa_set((uint8_t *)&aa);
   1bcec:	a80b      	add	r0, sp, #44	; 0x2c
   1bcee:	f001 fb2b 	bl	1d348 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1bcf2:	4970      	ldr	r1, [pc, #448]	; (1beb4 <prepare_cb+0x218>)
   1bcf4:	f240 605b 	movw	r0, #1627	; 0x65b
   1bcf8:	f001 fbec 	bl	1d4d4 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1bcfc:	7da0      	ldrb	r0, [r4, #22]
   1bcfe:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1bd02:	3025      	adds	r0, #37	; 0x25
   1bd04:	f7ff faba 	bl	1b27c <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1bd08:	4621      	mov	r1, r4
   1bd0a:	486b      	ldr	r0, [pc, #428]	; (1beb8 <prepare_cb+0x21c>)
   1bd0c:	f001 fa8c 	bl	1d228 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1bd10:	2096      	movs	r0, #150	; 0x96
   1bd12:	f001 fc95 	bl	1d640 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1bd16:	2300      	movs	r3, #0
   1bd18:	461a      	mov	r2, r3
   1bd1a:	4619      	mov	r1, r3
   1bd1c:	4618      	mov	r0, r3
   1bd1e:	f001 fc05 	bl	1d52c <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   1bd22:	f7fe ff5f 	bl	1abe4 <ull_filter_lll_rl_enabled>
   1bd26:	2800      	cmp	r0, #0
   1bd28:	d136      	bne.n	1bd98 <prepare_cb+0xfc>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1bd2a:	7da3      	ldrb	r3, [r4, #22]
   1bd2c:	f013 0f18 	tst.w	r3, #24
   1bd30:	f040 80a8 	bne.w	1be84 <prepare_cb+0x1e8>
	evt = HDR_LLL2EVT(lll);
   1bd34:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1bd36:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1bd38:	4638      	mov	r0, r7
   1bd3a:	f7ff fa7f 	bl	1b23c <lll_evt_offset_get>
   1bd3e:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1bd40:	6872      	ldr	r2, [r6, #4]
   1bd42:	f105 0109 	add.w	r1, r5, #9
   1bd46:	2000      	movs	r0, #0
   1bd48:	f001 fc86 	bl	1d658 <radio_tmr_start>
	radio_tmr_end_capture();
   1bd4c:	f001 fd7e 	bl	1d84c <radio_tmr_end_capture>
	radio_rssi_measure();
   1bd50:	f001 fc06 	bl	1d560 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1bd54:	4620      	mov	r0, r4
   1bd56:	f7f9 ffdb 	bl	15d10 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_SCAN_BASE +
   1bd5a:	1d01      	adds	r1, r0, #4
   1bd5c:	b2c9      	uxtb	r1, r1
   1bd5e:	4638      	mov	r0, r7
   1bd60:	462a      	mov	r2, r5
   1bd62:	f7ff fa79 	bl	1b258 <lll_preempt_calc>
   1bd66:	4601      	mov	r1, r0
   1bd68:	2800      	cmp	r0, #0
   1bd6a:	d142      	bne.n	1bdf2 <prepare_cb+0x156>
		if (lll->ticks_window) {
   1bd6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1bd6e:	2b00      	cmp	r3, #0
   1bd70:	d166      	bne.n	1be40 <prepare_cb+0x1a4>
		if (lll->conn) {
   1bd72:	68a3      	ldr	r3, [r4, #8]
   1bd74:	b143      	cbz	r3, 1bd88 <prepare_cb+0xec>
			mfy_after_mstr_offset_get.param = p;
   1bd76:	4b51      	ldr	r3, [pc, #324]	; (1bebc <prepare_cb+0x220>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1bd78:	2201      	movs	r2, #1
   1bd7a:	2102      	movs	r1, #2
   1bd7c:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   1bd7e:	609e      	str	r6, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1bd80:	f7f4 fe4a 	bl	10a18 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1bd84:	2800      	cmp	r0, #0
   1bd86:	d13d      	bne.n	1be04 <prepare_cb+0x168>
		ret = lll_prepare_done(lll);
   1bd88:	4620      	mov	r0, r4
   1bd8a:	f7ff f9f5 	bl	1b178 <lll_prepare_done>
		LL_ASSERT(!ret);
   1bd8e:	2800      	cmp	r0, #0
   1bd90:	d146      	bne.n	1be20 <prepare_cb+0x184>
}
   1bd92:	2000      	movs	r0, #0
   1bd94:	b00d      	add	sp, #52	; 0x34
   1bd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy & 0x1));
   1bd98:	7da0      	ldrb	r0, [r4, #22]
   1bd9a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1bd9e:	f7fe fe81 	bl	1aaa4 <ull_filter_lll_get>
   1bda2:	4605      	mov	r5, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1bda4:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   1bda8:	f7fe fd86 	bl	1a8b8 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   1bdac:	7869      	ldrb	r1, [r5, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1bdae:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
   1bdb0:	1caa      	adds	r2, r5, #2
   1bdb2:	7828      	ldrb	r0, [r5, #0]
   1bdb4:	f001 fbf6 	bl	1d5a4 <radio_filter_configure>
		radio_ar_configure(count, irks);
   1bdb8:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1bdbc:	4639      	mov	r1, r7
   1bdbe:	f001 fdff 	bl	1d9c0 <radio_ar_configure>
   1bdc2:	e7b7      	b.n	1bd34 <prepare_cb+0x98>
		err = lll_hfclock_off();
   1bdc4:	f7ff fb48 	bl	1b458 <lll_hfclock_off>
		LL_ASSERT(!err || err == -EBUSY);
   1bdc8:	b168      	cbz	r0, 1bde6 <prepare_cb+0x14a>
   1bdca:	3010      	adds	r0, #16
   1bdcc:	d00b      	beq.n	1bde6 <prepare_cb+0x14a>
   1bdce:	4a3c      	ldr	r2, [pc, #240]	; (1bec0 <prepare_cb+0x224>)
   1bdd0:	493c      	ldr	r1, [pc, #240]	; (1bec4 <prepare_cb+0x228>)
   1bdd2:	483d      	ldr	r0, [pc, #244]	; (1bec8 <prepare_cb+0x22c>)
   1bdd4:	238b      	movs	r3, #139	; 0x8b
   1bdd6:	f004 fc33 	bl	20640 <printk>
   1bdda:	4040      	eors	r0, r0
   1bddc:	f380 8811 	msr	BASEPRI, r0
   1bde0:	f04f 0003 	mov.w	r0, #3
   1bde4:	df02      	svc	2
		lll_done(NULL);
   1bde6:	2000      	movs	r0, #0
   1bde8:	f7ff f9c8 	bl	1b17c <lll_done>
}
   1bdec:	2000      	movs	r0, #0
   1bdee:	b00d      	add	sp, #52	; 0x34
   1bdf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1bdf2:	4836      	ldr	r0, [pc, #216]	; (1becc <prepare_cb+0x230>)
   1bdf4:	4621      	mov	r1, r4
   1bdf6:	f001 fa17 	bl	1d228 <radio_isr_set>
		radio_disable();
   1bdfa:	f001 fb29 	bl	1d450 <radio_disable>
}
   1bdfe:	2000      	movs	r0, #0
   1be00:	b00d      	add	sp, #52	; 0x34
   1be02:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LL_ASSERT(!retval);
   1be04:	4a2e      	ldr	r2, [pc, #184]	; (1bec0 <prepare_cb+0x224>)
   1be06:	4932      	ldr	r1, [pc, #200]	; (1bed0 <prepare_cb+0x234>)
   1be08:	482f      	ldr	r0, [pc, #188]	; (1bec8 <prepare_cb+0x22c>)
   1be0a:	f240 1319 	movw	r3, #281	; 0x119
   1be0e:	f004 fc17 	bl	20640 <printk>
   1be12:	4040      	eors	r0, r0
   1be14:	f380 8811 	msr	BASEPRI, r0
   1be18:	f04f 0003 	mov.w	r0, #3
   1be1c:	df02      	svc	2
   1be1e:	e7b3      	b.n	1bd88 <prepare_cb+0xec>
		LL_ASSERT(!ret);
   1be20:	4a27      	ldr	r2, [pc, #156]	; (1bec0 <prepare_cb+0x224>)
   1be22:	492c      	ldr	r1, [pc, #176]	; (1bed4 <prepare_cb+0x238>)
   1be24:	4828      	ldr	r0, [pc, #160]	; (1bec8 <prepare_cb+0x22c>)
   1be26:	f44f 738f 	mov.w	r3, #286	; 0x11e
   1be2a:	f004 fc09 	bl	20640 <printk>
   1be2e:	4040      	eors	r0, r0
   1be30:	f380 8811 	msr	BASEPRI, r0
   1be34:	f04f 0003 	mov.w	r0, #3
   1be38:	df02      	svc	2
}
   1be3a:	2000      	movs	r0, #0
   1be3c:	b00d      	add	sp, #52	; 0x34
   1be3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1be40:	f44f 7282 	mov.w	r2, #260	; 0x104
   1be44:	9300      	str	r3, [sp, #0]
   1be46:	9208      	str	r2, [sp, #32]
   1be48:	4b23      	ldr	r3, [pc, #140]	; (1bed8 <prepare_cb+0x23c>)
   1be4a:	4a24      	ldr	r2, [pc, #144]	; (1bedc <prepare_cb+0x240>)
   1be4c:	9307      	str	r3, [sp, #28]
   1be4e:	9205      	str	r2, [sp, #20]
   1be50:	462b      	mov	r3, r5
   1be52:	e9cd 0003 	strd	r0, r0, [sp, #12]
   1be56:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1be5a:	9406      	str	r4, [sp, #24]
   1be5c:	2203      	movs	r2, #3
   1be5e:	f7f6 f967 	bl	12130 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1be62:	f030 0302 	bics.w	r3, r0, #2
   1be66:	d084      	beq.n	1bd72 <prepare_cb+0xd6>
   1be68:	4a15      	ldr	r2, [pc, #84]	; (1bec0 <prepare_cb+0x224>)
   1be6a:	491d      	ldr	r1, [pc, #116]	; (1bee0 <prepare_cb+0x244>)
   1be6c:	4816      	ldr	r0, [pc, #88]	; (1bec8 <prepare_cb+0x22c>)
   1be6e:	f240 1305 	movw	r3, #261	; 0x105
   1be72:	f004 fbe5 	bl	20640 <printk>
   1be76:	4040      	eors	r0, r0
   1be78:	f380 8811 	msr	BASEPRI, r0
   1be7c:	f04f 0003 	mov.w	r0, #3
   1be80:	df02      	svc	2
   1be82:	e776      	b.n	1bd72 <prepare_cb+0xd6>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1be84:	2001      	movs	r0, #1
   1be86:	f7fe fe0d 	bl	1aaa4 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1be8a:	7841      	ldrb	r1, [r0, #1]
   1be8c:	1c82      	adds	r2, r0, #2
   1be8e:	7800      	ldrb	r0, [r0, #0]
   1be90:	f001 fb88 	bl	1d5a4 <radio_filter_configure>
   1be94:	e74e      	b.n	1bd34 <prepare_cb+0x98>
	LL_ASSERT(node_rx);
   1be96:	4a0a      	ldr	r2, [pc, #40]	; (1bec0 <prepare_cb+0x224>)
   1be98:	4912      	ldr	r1, [pc, #72]	; (1bee4 <prepare_cb+0x248>)
   1be9a:	480b      	ldr	r0, [pc, #44]	; (1bec8 <prepare_cb+0x22c>)
   1be9c:	23a9      	movs	r3, #169	; 0xa9
   1be9e:	f004 fbcf 	bl	20640 <printk>
   1bea2:	4040      	eors	r0, r0
   1bea4:	f380 8811 	msr	BASEPRI, r0
   1bea8:	f04f 0003 	mov.w	r0, #3
   1beac:	df02      	svc	2
   1beae:	e719      	b.n	1bce4 <prepare_cb+0x48>
   1beb0:	8e89bed6 	.word	0x8e89bed6
   1beb4:	00555555 	.word	0x00555555
   1beb8:	00003f31 	.word	0x00003f31
   1bebc:	200005e0 	.word	0x200005e0
   1bec0:	00027b4c 	.word	0x00027b4c
   1bec4:	00027a8c 	.word	0x00027a8c
   1bec8:	00026ecc 	.word	0x00026ecc
   1becc:	0001c1e9 	.word	0x0001c1e9
   1bed0:	000271b0 	.word	0x000271b0
   1bed4:	00027188 	.word	0x00027188
   1bed8:	0001c0a1 	.word	0x0001c0a1
   1bedc:	0001bc85 	.word	0x0001bc85
   1bee0:	000272f4 	.word	0x000272f4
   1bee4:	00027b98 	.word	0x00027b98

0001bee8 <isr_common_done>:
{
   1bee8:	b530      	push	{r4, r5, lr}
   1beea:	b083      	sub	sp, #12
   1beec:	4605      	mov	r5, r0
	lll_isr_status_reset();
   1beee:	f7ff fa1d 	bl	1b32c <lll_isr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1bef2:	2096      	movs	r0, #150	; 0x96
   1bef4:	f001 fba4 	bl	1d640 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1bef8:	2300      	movs	r3, #0
   1befa:	4618      	mov	r0, r3
   1befc:	461a      	mov	r2, r3
   1befe:	4619      	mov	r1, r3
   1bf00:	f001 fb14 	bl	1d52c <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1bf04:	2001      	movs	r0, #1
   1bf06:	f7f9 f8cf 	bl	150a8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1bf0a:	4604      	mov	r4, r0
   1bf0c:	b1c0      	cbz	r0, 1bf40 <isr_common_done+0x58>
	radio_pkt_rx_set(node_rx->pdu);
   1bf0e:	f104 001c 	add.w	r0, r4, #28
   1bf12:	f001 fa69 	bl	1d3e8 <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   1bf16:	f7fe fe65 	bl	1abe4 <ull_filter_lll_rl_enabled>
   1bf1a:	b938      	cbnz	r0, 1bf2c <isr_common_done+0x44>
	radio_rssi_measure();
   1bf1c:	f001 fb20 	bl	1d560 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1bf20:	480e      	ldr	r0, [pc, #56]	; (1bf5c <isr_common_done+0x74>)
   1bf22:	4629      	mov	r1, r5
   1bf24:	f001 f980 	bl	1d228 <radio_isr_set>
}
   1bf28:	b003      	add	sp, #12
   1bf2a:	bd30      	pop	{r4, r5, pc}
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1bf2c:	f10d 0007 	add.w	r0, sp, #7
   1bf30:	f7fe fcc2 	bl	1a8b8 <ull_filter_lll_irks_get>
   1bf34:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   1bf36:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1bf3a:	f001 fd41 	bl	1d9c0 <radio_ar_configure>
   1bf3e:	e7ed      	b.n	1bf1c <isr_common_done+0x34>
	LL_ASSERT(node_rx);
   1bf40:	4a07      	ldr	r2, [pc, #28]	; (1bf60 <isr_common_done+0x78>)
   1bf42:	4908      	ldr	r1, [pc, #32]	; (1bf64 <isr_common_done+0x7c>)
   1bf44:	4808      	ldr	r0, [pc, #32]	; (1bf68 <isr_common_done+0x80>)
   1bf46:	f240 13fb 	movw	r3, #507	; 0x1fb
   1bf4a:	f004 fb79 	bl	20640 <printk>
   1bf4e:	4040      	eors	r0, r0
   1bf50:	f380 8811 	msr	BASEPRI, r0
   1bf54:	f04f 0003 	mov.w	r0, #3
   1bf58:	df02      	svc	2
   1bf5a:	e7d8      	b.n	1bf0e <isr_common_done+0x26>
   1bf5c:	00003f31 	.word	0x00003f31
   1bf60:	00027b4c 	.word	0x00027b4c
   1bf64:	00027b98 	.word	0x00027b98
   1bf68:	00026ecc 	.word	0x00026ecc

0001bf6c <isr_done>:
{
   1bf6c:	b510      	push	{r4, lr}
   1bf6e:	4604      	mov	r4, r0
	isr_common_done(param);
   1bf70:	f7ff ffba 	bl	1bee8 <isr_common_done>
	lll->state = 0U;
   1bf74:	7da3      	ldrb	r3, [r4, #22]
   1bf76:	f36f 0300 	bfc	r3, #0, #1
   1bf7a:	75a3      	strb	r3, [r4, #22]
	radio_rx_enable();
   1bf7c:	f001 fa5c 	bl	1d438 <radio_rx_enable>
}
   1bf80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_tmr_end_capture();
   1bf84:	f001 bc62 	b.w	1d84c <radio_tmr_end_capture>

0001bf88 <isr_tx>:
{
   1bf88:	b570      	push	{r4, r5, r6, lr}
   1bf8a:	b082      	sub	sp, #8
   1bf8c:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1bf8e:	f7ff f9bb 	bl	1b308 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1bf92:	2096      	movs	r0, #150	; 0x96
   1bf94:	f001 fb54 	bl	1d640 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1bf98:	2300      	movs	r3, #0
   1bf9a:	4618      	mov	r0, r3
   1bf9c:	461a      	mov	r2, r3
   1bf9e:	4619      	mov	r1, r3
   1bfa0:	f001 fac4 	bl	1d52c <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1bfa4:	2001      	movs	r0, #1
   1bfa6:	f7f9 f87f 	bl	150a8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1bfaa:	4604      	mov	r4, r0
   1bfac:	2800      	cmp	r0, #0
   1bfae:	d03d      	beq.n	1c02c <isr_tx+0xa4>
	radio_pkt_rx_set(node_rx->pdu);
   1bfb0:	f104 001c 	add.w	r0, r4, #28
   1bfb4:	f001 fa18 	bl	1d3e8 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1bfb8:	f001 fa6e 	bl	1d498 <radio_is_ready>
   1bfbc:	b9d8      	cbnz	r0, 1bff6 <isr_tx+0x6e>
	if (ull_filter_lll_rl_enabled()) {
   1bfbe:	f7fe fe11 	bl	1abe4 <ull_filter_lll_rl_enabled>
   1bfc2:	bb48      	cbnz	r0, 1c018 <isr_tx+0x90>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1bfc4:	f001 fc50 	bl	1d868 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1bfc8:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1bfca:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1bfcc:	4608      	mov	r0, r1
   1bfce:	f001 fa25 	bl	1d41c <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1bfd2:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1bfd4:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1bfd6:	4608      	mov	r0, r1
   1bfd8:	f001 fa1c 	bl	1d414 <radio_tx_chain_delay_get>
   1bfdc:	4434      	add	r4, r6
   1bfde:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1bfe0:	1a20      	subs	r0, r4, r0
   1bfe2:	f001 fbf9 	bl	1d7d8 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1bfe6:	f001 fabb 	bl	1d560 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1bfea:	4817      	ldr	r0, [pc, #92]	; (1c048 <isr_tx+0xc0>)
   1bfec:	4629      	mov	r1, r5
   1bfee:	f001 f91b 	bl	1d228 <radio_isr_set>
}
   1bff2:	b002      	add	sp, #8
   1bff4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!radio_is_ready());
   1bff6:	4a15      	ldr	r2, [pc, #84]	; (1c04c <isr_tx+0xc4>)
   1bff8:	4915      	ldr	r1, [pc, #84]	; (1c050 <isr_tx+0xc8>)
   1bffa:	4816      	ldr	r0, [pc, #88]	; (1c054 <isr_tx+0xcc>)
   1bffc:	f240 13d1 	movw	r3, #465	; 0x1d1
   1c000:	f004 fb1e 	bl	20640 <printk>
   1c004:	4040      	eors	r0, r0
   1c006:	f380 8811 	msr	BASEPRI, r0
   1c00a:	f04f 0003 	mov.w	r0, #3
   1c00e:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   1c010:	f7fe fde8 	bl	1abe4 <ull_filter_lll_rl_enabled>
   1c014:	2800      	cmp	r0, #0
   1c016:	d0d5      	beq.n	1bfc4 <isr_tx+0x3c>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1c018:	f10d 0007 	add.w	r0, sp, #7
   1c01c:	f7fe fc4c 	bl	1a8b8 <ull_filter_lll_irks_get>
   1c020:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   1c022:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1c026:	f001 fccb 	bl	1d9c0 <radio_ar_configure>
   1c02a:	e7cb      	b.n	1bfc4 <isr_tx+0x3c>
	LL_ASSERT(node_rx);
   1c02c:	4a07      	ldr	r2, [pc, #28]	; (1c04c <isr_tx+0xc4>)
   1c02e:	490a      	ldr	r1, [pc, #40]	; (1c058 <isr_tx+0xd0>)
   1c030:	4808      	ldr	r0, [pc, #32]	; (1c054 <isr_tx+0xcc>)
   1c032:	f240 13cd 	movw	r3, #461	; 0x1cd
   1c036:	f004 fb03 	bl	20640 <printk>
   1c03a:	4040      	eors	r0, r0
   1c03c:	f380 8811 	msr	BASEPRI, r0
   1c040:	f04f 0003 	mov.w	r0, #3
   1c044:	df02      	svc	2
   1c046:	e7b3      	b.n	1bfb0 <isr_tx+0x28>
   1c048:	00003f31 	.word	0x00003f31
   1c04c:	00027b4c 	.word	0x00027b4c
   1c050:	00027b14 	.word	0x00027b14
   1c054:	00026ecc 	.word	0x00026ecc
   1c058:	00027b98 	.word	0x00027b98

0001c05c <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   1c05c:	68c3      	ldr	r3, [r0, #12]
{
   1c05e:	b570      	push	{r4, r5, r6, lr}
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   1c060:	681e      	ldr	r6, [r3, #0]
{
   1c062:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1c064:	f7f6 f974 	bl	12350 <ticker_ticks_now_get>
   1c068:	4605      	mov	r5, r0
   1c06a:	4630      	mov	r0, r6
   1c06c:	f7ff f8e6 	bl	1b23c <lll_evt_offset_get>
	p->remainder = 0;
   1c070:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1c072:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1c074:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1c078:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1c07a:	4620      	mov	r0, r4
}
   1c07c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1c080:	f7ff be0c 	b.w	1bc9c <prepare_cb>

0001c084 <isr_window>:
{
   1c084:	b508      	push	{r3, lr}
	isr_common_done(param);
   1c086:	f7ff ff2f 	bl	1bee8 <isr_common_done>
	ticks_at_start = ticker_ticks_now_get() +
   1c08a:	f7f6 f961 	bl	12350 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   1c08e:	1cc1      	adds	r1, r0, #3
   1c090:	2000      	movs	r0, #0
   1c092:	f001 fb4d 	bl	1d730 <radio_tmr_start_tick>
}
   1c096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   1c09a:	f001 bbd7 	b.w	1d84c <radio_tmr_end_capture>
   1c09e:	bf00      	nop

0001c0a0 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1c0a0:	b900      	cbnz	r0, 1c0a4 <ticker_op_start_cb+0x4>
   1c0a2:	4770      	bx	lr
{
   1c0a4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1c0a6:	4a07      	ldr	r2, [pc, #28]	; (1c0c4 <ticker_op_start_cb+0x24>)
   1c0a8:	4907      	ldr	r1, [pc, #28]	; (1c0c8 <ticker_op_start_cb+0x28>)
   1c0aa:	4808      	ldr	r0, [pc, #32]	; (1c0cc <ticker_op_start_cb+0x2c>)
   1c0ac:	f44f 73bd 	mov.w	r3, #378	; 0x17a
   1c0b0:	f004 fac6 	bl	20640 <printk>
   1c0b4:	4040      	eors	r0, r0
   1c0b6:	f380 8811 	msr	BASEPRI, r0
   1c0ba:	f04f 0003 	mov.w	r0, #3
   1c0be:	df02      	svc	2
}
   1c0c0:	bd08      	pop	{r3, pc}
   1c0c2:	bf00      	nop
   1c0c4:	00027b4c 	.word	0x00027b4c
   1c0c8:	00027468 	.word	0x00027468
   1c0cc:	00026ecc 	.word	0x00026ecc

0001c0d0 <abort_cb>:
{
   1c0d0:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1c0d2:	b1b8      	cbz	r0, 1c104 <abort_cb+0x34>
	err = lll_hfclock_off();
   1c0d4:	460c      	mov	r4, r1
   1c0d6:	f7ff f9bf 	bl	1b458 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   1c0da:	b170      	cbz	r0, 1c0fa <abort_cb+0x2a>
   1c0dc:	3010      	adds	r0, #16
   1c0de:	d00c      	beq.n	1c0fa <abort_cb+0x2a>
   1c0e0:	4a0c      	ldr	r2, [pc, #48]	; (1c114 <abort_cb+0x44>)
   1c0e2:	490d      	ldr	r1, [pc, #52]	; (1c118 <abort_cb+0x48>)
   1c0e4:	480d      	ldr	r0, [pc, #52]	; (1c11c <abort_cb+0x4c>)
   1c0e6:	f44f 73b5 	mov.w	r3, #362	; 0x16a
   1c0ea:	f004 faa9 	bl	20640 <printk>
   1c0ee:	4040      	eors	r0, r0
   1c0f0:	f380 8811 	msr	BASEPRI, r0
   1c0f4:	f04f 0003 	mov.w	r0, #3
   1c0f8:	df02      	svc	2
	lll_done(param);
   1c0fa:	4620      	mov	r0, r4
}
   1c0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1c100:	f7ff b83c 	b.w	1b17c <lll_done>
			radio_isr_set(isr_abort, param);
   1c104:	4806      	ldr	r0, [pc, #24]	; (1c120 <abort_cb+0x50>)
   1c106:	f001 f88f 	bl	1d228 <radio_isr_set>
}
   1c10a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1c10e:	f001 b99f 	b.w	1d450 <radio_disable>
   1c112:	bf00      	nop
   1c114:	00027b4c 	.word	0x00027b4c
   1c118:	00027a8c 	.word	0x00027a8c
   1c11c:	00026ecc 	.word	0x00026ecc
   1c120:	0001c1e9 	.word	0x0001c1e9

0001c124 <is_abort_cb>:
	if (next != curr) {
   1c124:	4282      	cmp	r2, r0
{
   1c126:	b510      	push	{r4, lr}
	if (next != curr) {
   1c128:	d11b      	bne.n	1c162 <is_abort_cb+0x3e>
	radio_isr_set(isr_window, lll);
   1c12a:	4614      	mov	r4, r2
   1c12c:	481b      	ldr	r0, [pc, #108]	; (1c19c <is_abort_cb+0x78>)
   1c12e:	4611      	mov	r1, r2
   1c130:	f001 f87a 	bl	1d228 <radio_isr_set>
	radio_disable();
   1c134:	f001 f98c 	bl	1d450 <radio_disable>
	if (++lll->chan == 3U) {
   1c138:	7da3      	ldrb	r3, [r4, #22]
   1c13a:	f3c3 0041 	ubfx	r0, r3, #1, #2
   1c13e:	3001      	adds	r0, #1
   1c140:	f000 0003 	and.w	r0, r0, #3
   1c144:	2803      	cmp	r0, #3
   1c146:	d007      	beq.n	1c158 <is_abort_cb+0x34>
   1c148:	f360 0342 	bfi	r3, r0, #1, #2
   1c14c:	75a3      	strb	r3, [r4, #22]
   1c14e:	3025      	adds	r0, #37	; 0x25
	lll_chan_set(37 + lll->chan);
   1c150:	f7ff f894 	bl	1b27c <lll_chan_set>
	return 0;
   1c154:	2000      	movs	r0, #0
}
   1c156:	bd10      	pop	{r4, pc}
		lll->chan = 0U;
   1c158:	f36f 0342 	bfc	r3, #1, #2
   1c15c:	75a3      	strb	r3, [r4, #22]
   1c15e:	2025      	movs	r0, #37	; 0x25
   1c160:	e7f6      	b.n	1c150 <is_abort_cb+0x2c>
		*resume_cb = resume_prepare_cb;
   1c162:	4a0f      	ldr	r2, [pc, #60]	; (1c1a0 <is_abort_cb+0x7c>)
   1c164:	601a      	str	r2, [r3, #0]
		*resume_prio = 0; /* TODO: */
   1c166:	9a02      	ldr	r2, [sp, #8]
   1c168:	2300      	movs	r3, #0
   1c16a:	6013      	str	r3, [r2, #0]
		err = lll_hfclock_on();
   1c16c:	f7ff f96c 	bl	1b448 <lll_hfclock_on>
		LL_ASSERT(!err || err == -EINPROGRESS);
   1c170:	b188      	cbz	r0, 1c196 <is_abort_cb+0x72>
   1c172:	3044      	adds	r0, #68	; 0x44
   1c174:	d00f      	beq.n	1c196 <is_abort_cb+0x72>
   1c176:	4a0b      	ldr	r2, [pc, #44]	; (1c1a4 <is_abort_cb+0x80>)
   1c178:	490b      	ldr	r1, [pc, #44]	; (1c1a8 <is_abort_cb+0x84>)
   1c17a:	480c      	ldr	r0, [pc, #48]	; (1c1ac <is_abort_cb+0x88>)
   1c17c:	f44f 73a0 	mov.w	r3, #320	; 0x140
   1c180:	f004 fa5e 	bl	20640 <printk>
   1c184:	4040      	eors	r0, r0
   1c186:	f380 8811 	msr	BASEPRI, r0
   1c18a:	f04f 0003 	mov.w	r0, #3
   1c18e:	df02      	svc	2
   1c190:	f06f 000a 	mvn.w	r0, #10
}
   1c194:	bd10      	pop	{r4, pc}
   1c196:	f06f 000a 	mvn.w	r0, #10
   1c19a:	bd10      	pop	{r4, pc}
   1c19c:	0001c085 	.word	0x0001c085
   1c1a0:	0001c05d 	.word	0x0001c05d
   1c1a4:	00027b4c 	.word	0x00027b4c
   1c1a8:	00027b28 	.word	0x00027b28
   1c1ac:	00026ecc 	.word	0x00026ecc

0001c1b0 <isr_cleanup>:
{
   1c1b0:	b538      	push	{r3, r4, r5, lr}
   1c1b2:	4604      	mov	r4, r0
	if (lll_is_done(param)) {
   1c1b4:	f7ff f836 	bl	1b224 <lll_is_done>
   1c1b8:	b100      	cbz	r0, 1c1bc <isr_cleanup+0xc>
}
   1c1ba:	bd38      	pop	{r3, r4, r5, pc}
	radio_filter_disable();
   1c1bc:	4605      	mov	r5, r0
   1c1be:	f001 fa0d 	bl	1d5dc <radio_filter_disable>
	if (++lll->chan == 3U) {
   1c1c2:	7da2      	ldrb	r2, [r4, #22]
   1c1c4:	f3c2 0341 	ubfx	r3, r2, #1, #2
   1c1c8:	3301      	adds	r3, #1
   1c1ca:	f003 0303 	and.w	r3, r3, #3
   1c1ce:	2b03      	cmp	r3, #3
   1c1d0:	bf14      	ite	ne
   1c1d2:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   1c1d6:	f365 0242 	bfieq	r2, r5, #1, #2
   1c1da:	75a2      	strb	r2, [r4, #22]
	lll_isr_cleanup(param);
   1c1dc:	4620      	mov	r0, r4
}
   1c1de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   1c1e2:	f7ff b8b1 	b.w	1b348 <lll_isr_cleanup>
   1c1e6:	bf00      	nop

0001c1e8 <isr_abort>:
{
   1c1e8:	b510      	push	{r4, lr}
   1c1ea:	b082      	sub	sp, #8
   1c1ec:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1c1ee:	f7ff f89d 	bl	1b32c <lll_isr_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1c1f2:	2300      	movs	r3, #0
   1c1f4:	9300      	str	r3, [sp, #0]
   1c1f6:	4619      	mov	r1, r3
   1c1f8:	4618      	mov	r0, r3
   1c1fa:	2203      	movs	r2, #3
   1c1fc:	f7f6 f804 	bl	12208 <ticker_stop>
	radio_disable();
   1c200:	f001 f926 	bl	1d450 <radio_disable>
	isr_cleanup(param);
   1c204:	4620      	mov	r0, r4
}
   1c206:	b002      	add	sp, #8
   1c208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   1c20c:	f7ff bfd0 	b.w	1c1b0 <isr_cleanup>

0001c210 <isr_rx_scan_report.isra.0>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1c210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c212:	4607      	mov	r7, r0
				uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
   1c214:	2003      	movs	r0, #3
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1c216:	460e      	mov	r6, r1
   1c218:	4615      	mov	r5, r2
	node_rx = ull_pdu_rx_alloc_peek(3);
   1c21a:	f7f8 ff45 	bl	150a8 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   1c21e:	b1c8      	cbz	r0, 1c254 <isr_rx_scan_report.isra.0+0x44>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   1c220:	4604      	mov	r4, r0
   1c222:	f7f8 ff5f 	bl	150e4 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   1c226:	f64f 72ff 	movw	r2, #65535	; 0xffff
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1c22a:	2304      	movs	r3, #4
	node_rx->hdr.handle = 0xffff;
   1c22c:	80e2      	strh	r2, [r4, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1c22e:	7123      	strb	r3, [r4, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   1c230:	b95f      	cbnz	r7, 1c24a <isr_rx_scan_report.isra.0+0x3a>
   1c232:	207f      	movs	r0, #127	; 0x7f
   1c234:	7620      	strb	r0, [r4, #24]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   1c236:	4621      	mov	r1, r4
   1c238:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.rl_idx = rl_idx;
   1c23a:	76a6      	strb	r6, [r4, #26]
	node_rx->hdr.rx_ftr.direct = dir_report;
   1c23c:	76e5      	strb	r5, [r4, #27]
	ull_rx_put(node_rx->hdr.link, node_rx);
   1c23e:	f7f8 ff69 	bl	15114 <ull_rx_put>
	ull_rx_sched();
   1c242:	f7f8 ff77 	bl	15134 <ull_rx_sched>

	return 0;
   1c246:	2000      	movs	r0, #0
}
   1c248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				   (radio_rssi_get() & 0x7f)
   1c24a:	f001 f993 	bl	1d574 <radio_rssi_get>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   1c24e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1c252:	e7ef      	b.n	1c234 <isr_rx_scan_report.isra.0+0x24>
		return -ENOBUFS;
   1c254:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1c258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c25a:	bf00      	nop

0001c25c <lll_scan_init>:
}
   1c25c:	2000      	movs	r0, #0
   1c25e:	4770      	bx	lr

0001c260 <lll_scan_reset>:
   1c260:	2000      	movs	r0, #0
   1c262:	4770      	bx	lr

0001c264 <lll_scan_prepare>:
{
   1c264:	b510      	push	{r4, lr}
   1c266:	b082      	sub	sp, #8
   1c268:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1c26a:	f7ff f8ed 	bl	1b448 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c26e:	b108      	cbz	r0, 1c274 <lll_scan_prepare+0x10>
   1c270:	3044      	adds	r0, #68	; 0x44
   1c272:	d119      	bne.n	1c2a8 <lll_scan_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
   1c274:	4a13      	ldr	r2, [pc, #76]	; (1c2c4 <lll_scan_prepare+0x60>)
   1c276:	4914      	ldr	r1, [pc, #80]	; (1c2c8 <lll_scan_prepare+0x64>)
   1c278:	4814      	ldr	r0, [pc, #80]	; (1c2cc <lll_scan_prepare+0x68>)
   1c27a:	9400      	str	r4, [sp, #0]
   1c27c:	2300      	movs	r3, #0
   1c27e:	f7fe feef 	bl	1b060 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c282:	b108      	cbz	r0, 1c288 <lll_scan_prepare+0x24>
   1c284:	3044      	adds	r0, #68	; 0x44
   1c286:	d101      	bne.n	1c28c <lll_scan_prepare+0x28>
}
   1c288:	b002      	add	sp, #8
   1c28a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c28c:	4a10      	ldr	r2, [pc, #64]	; (1c2d0 <lll_scan_prepare+0x6c>)
   1c28e:	4911      	ldr	r1, [pc, #68]	; (1c2d4 <lll_scan_prepare+0x70>)
   1c290:	4811      	ldr	r0, [pc, #68]	; (1c2d8 <lll_scan_prepare+0x74>)
   1c292:	2370      	movs	r3, #112	; 0x70
   1c294:	f004 f9d4 	bl	20640 <printk>
   1c298:	4040      	eors	r0, r0
   1c29a:	f380 8811 	msr	BASEPRI, r0
   1c29e:	f04f 0003 	mov.w	r0, #3
   1c2a2:	df02      	svc	2
}
   1c2a4:	b002      	add	sp, #8
   1c2a6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c2a8:	4a09      	ldr	r2, [pc, #36]	; (1c2d0 <lll_scan_prepare+0x6c>)
   1c2aa:	490a      	ldr	r1, [pc, #40]	; (1c2d4 <lll_scan_prepare+0x70>)
   1c2ac:	480a      	ldr	r0, [pc, #40]	; (1c2d8 <lll_scan_prepare+0x74>)
   1c2ae:	236d      	movs	r3, #109	; 0x6d
   1c2b0:	f004 f9c6 	bl	20640 <printk>
   1c2b4:	4040      	eors	r0, r0
   1c2b6:	f380 8811 	msr	BASEPRI, r0
   1c2ba:	f04f 0003 	mov.w	r0, #3
   1c2be:	df02      	svc	2
   1c2c0:	e7d8      	b.n	1c274 <lll_scan_prepare+0x10>
   1c2c2:	bf00      	nop
   1c2c4:	0001bc9d 	.word	0x0001bc9d
   1c2c8:	0001c0d1 	.word	0x0001c0d1
   1c2cc:	0001c125 	.word	0x0001c125
   1c2d0:	00027b4c 	.word	0x00027b4c
   1c2d4:	00027b28 	.word	0x00027b28
   1c2d8:	00026ecc 	.word	0x00026ecc

0001c2dc <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1c2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c2de:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1c2e0:	f7ff f824 	bl	1b32c <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1c2e4:	f7f8 ff92 	bl	1520c <ull_event_done_extra_get>
	LL_ASSERT(e);
   1c2e8:	4604      	mov	r4, r0
   1c2ea:	2800      	cmp	r0, #0
   1c2ec:	d033      	beq.n	1c356 <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   1c2ee:	4b21      	ldr	r3, [pc, #132]	; (1c374 <isr_done+0x98>)
	e->crc_valid = crc_valid;
   1c2f0:	4921      	ldr	r1, [pc, #132]	; (1c378 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1c2f2:	4a22      	ldr	r2, [pc, #136]	; (1c37c <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   1c2f4:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1c2f6:	7808      	ldrb	r0, [r1, #0]
	e->mic_state = mic_state;
   1c2f8:	7811      	ldrb	r1, [r2, #0]
	e->trx_cnt = trx_cnt;
   1c2fa:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1c2fc:	2201      	movs	r2, #1
	e->crc_valid = crc_valid;
   1c2fe:	71a0      	strb	r0, [r4, #6]
	e->mic_state = mic_state;
   1c300:	71e1      	strb	r1, [r4, #7]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1c302:	7022      	strb	r2, [r4, #0]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1c304:	b11b      	cbz	r3, 1c30e <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   1c306:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   1c30a:	2b00      	cmp	r3, #0
   1c30c:	db04      	blt.n	1c318 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1c30e:	4628      	mov	r0, r5
}
   1c310:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1c314:	f7ff b818 	b.w	1b348 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   1c318:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   1c31c:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1c320:	2b02      	cmp	r3, #2
   1c322:	d016      	beq.n	1c352 <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1c324:	2b04      	cmp	r3, #4
   1c326:	bf14      	ite	ne
   1c328:	2728      	movne	r7, #40	; 0x28
   1c32a:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1c32e:	f001 fa81 	bl	1d834 <radio_tmr_aa_restore>
   1c332:	4606      	mov	r6, r0
   1c334:	f001 fa84 	bl	1d840 <radio_tmr_ready_get>
			e->slave.window_widening_event_us =
   1c338:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1c33a:	1a36      	subs	r6, r6, r0
			lll->slave.window_widening_event_us = 0;
   1c33c:	2300      	movs	r3, #0
			e->slave.preamble_to_addr_us = preamble_to_addr_us;
   1c33e:	e9c4 2703 	strd	r2, r7, [r4, #12]
			e->slave.start_to_address_actual_us =
   1c342:	60a6      	str	r6, [r4, #8]
	lll_isr_cleanup(param);
   1c344:	4628      	mov	r0, r5
			lll->slave.window_widening_event_us = 0;
   1c346:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   1c348:	63eb      	str	r3, [r5, #60]	; 0x3c
}
   1c34a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1c34e:	f7fe bffb 	b.w	1b348 <lll_isr_cleanup>
	switch (phy) {
   1c352:	2718      	movs	r7, #24
   1c354:	e7eb      	b.n	1c32e <isr_done+0x52>
	LL_ASSERT(e);
   1c356:	4a0a      	ldr	r2, [pc, #40]	; (1c380 <isr_done+0xa4>)
   1c358:	490a      	ldr	r1, [pc, #40]	; (1c384 <isr_done+0xa8>)
   1c35a:	480b      	ldr	r0, [pc, #44]	; (1c388 <isr_done+0xac>)
   1c35c:	f240 2332 	movw	r3, #562	; 0x232
   1c360:	f004 f96e 	bl	20640 <printk>
   1c364:	4040      	eors	r0, r0
   1c366:	f380 8811 	msr	BASEPRI, r0
   1c36a:	f04f 0003 	mov.w	r0, #3
   1c36e:	df02      	svc	2
   1c370:	e7bd      	b.n	1c2ee <isr_done+0x12>
   1c372:	bf00      	nop
   1c374:	20004cec 	.word	0x20004cec
   1c378:	2000538f 	.word	0x2000538f
   1c37c:	20005390 	.word	0x20005390
   1c380:	00027bb4 	.word	0x00027bb4
   1c384:	000272d4 	.word	0x000272d4
   1c388:	00026ecc 	.word	0x00026ecc

0001c38c <empty_tx_enqueue>:

	return 0;
}

static struct pdu_data *empty_tx_enqueue(struct lll_conn *lll)
{
   1c38c:	b538      	push	{r3, r4, r5, lr}
	struct pdu_data *p;

	lll->empty = 1;
   1c38e:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
   1c392:	f043 0304 	orr.w	r3, r3, #4
   1c396:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
{
   1c39a:	4605      	mov	r5, r0

	p = (void *)radio_pkt_empty_get();
   1c39c:	f001 f8b0 	bl	1d500 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1c3a0:	7803      	ldrb	r3, [r0, #0]
	p->len = 0;
   1c3a2:	2200      	movs	r2, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1c3a4:	2101      	movs	r1, #1
   1c3a6:	f361 0301 	bfi	r3, r1, #0, #2
	p->len = 0;
   1c3aa:	7042      	strb	r2, [r0, #1]
	p = (void *)radio_pkt_empty_get();
   1c3ac:	4604      	mov	r4, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1c3ae:	7003      	strb	r3, [r0, #0]
	if (memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL)) {
   1c3b0:	e9d5 0113 	ldrd	r0, r1, [r5, #76]	; 0x4c
   1c3b4:	f7f4 fac4 	bl	10940 <memq_peek>
   1c3b8:	7823      	ldrb	r3, [r4, #0]
   1c3ba:	3800      	subs	r0, #0
   1c3bc:	bf18      	it	ne
   1c3be:	2001      	movne	r0, #1
   1c3c0:	f360 1304 	bfi	r3, r0, #4, #1
   1c3c4:	7023      	strb	r3, [r4, #0]
	} else {
		p->md = 0;
	}

	return p;
}
   1c3c6:	4620      	mov	r0, r4
   1c3c8:	bd38      	pop	{r3, r4, r5, pc}
   1c3ca:	bf00      	nop

0001c3cc <lll_conn_init>:
}
   1c3cc:	2000      	movs	r0, #0
   1c3ce:	4770      	bx	lr

0001c3d0 <lll_conn_reset>:
   1c3d0:	2000      	movs	r0, #0
   1c3d2:	4770      	bx	lr

0001c3d4 <lll_conn_sca_local_get>:
}
   1c3d4:	2007      	movs	r0, #7
   1c3d6:	4770      	bx	lr

0001c3d8 <lll_conn_ppm_local_get>:
}
   1c3d8:	2014      	movs	r0, #20
   1c3da:	4770      	bx	lr

0001c3dc <lll_conn_ppm_get>:
	return sca_ppm_lut[sca];
   1c3dc:	4b01      	ldr	r3, [pc, #4]	; (1c3e4 <lll_conn_ppm_get+0x8>)
}
   1c3de:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1c3e2:	4770      	bx	lr
   1c3e4:	00027c34 	.word	0x00027c34

0001c3e8 <lll_conn_prepare_reset>:
	crc_expire = 0U;
   1c3e8:	4805      	ldr	r0, [pc, #20]	; (1c400 <lll_conn_prepare_reset+0x18>)
	crc_valid = 0U;
   1c3ea:	4906      	ldr	r1, [pc, #24]	; (1c404 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1c3ec:	4a06      	ldr	r2, [pc, #24]	; (1c408 <lll_conn_prepare_reset+0x20>)
{
   1c3ee:	b410      	push	{r4}
	trx_cnt = 0U;
   1c3f0:	2300      	movs	r3, #0
   1c3f2:	4c06      	ldr	r4, [pc, #24]	; (1c40c <lll_conn_prepare_reset+0x24>)
	crc_expire = 0U;
   1c3f4:	7003      	strb	r3, [r0, #0]
	crc_valid = 0U;
   1c3f6:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1c3f8:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1c3fa:	8023      	strh	r3, [r4, #0]
}
   1c3fc:	bc10      	pop	{r4}
   1c3fe:	4770      	bx	lr
   1c400:	2000538e 	.word	0x2000538e
   1c404:	2000538f 	.word	0x2000538f
   1c408:	20005390 	.word	0x20005390
   1c40c:	20004cec 	.word	0x20004cec

0001c410 <lll_conn_abort_cb>:
{
   1c410:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1c412:	b1b0      	cbz	r0, 1c442 <lll_conn_abort_cb+0x32>
	err = lll_hfclock_off();
   1c414:	460c      	mov	r4, r1
   1c416:	f7ff f81f 	bl	1b458 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   1c41a:	b168      	cbz	r0, 1c438 <lll_conn_abort_cb+0x28>
   1c41c:	3010      	adds	r0, #16
   1c41e:	d00b      	beq.n	1c438 <lll_conn_abort_cb+0x28>
   1c420:	4a0b      	ldr	r2, [pc, #44]	; (1c450 <lll_conn_abort_cb+0x40>)
   1c422:	490c      	ldr	r1, [pc, #48]	; (1c454 <lll_conn_abort_cb+0x44>)
   1c424:	480c      	ldr	r0, [pc, #48]	; (1c458 <lll_conn_abort_cb+0x48>)
   1c426:	237a      	movs	r3, #122	; 0x7a
   1c428:	f004 f90a 	bl	20640 <printk>
   1c42c:	4040      	eors	r0, r0
   1c42e:	f380 8811 	msr	BASEPRI, r0
   1c432:	f04f 0003 	mov.w	r0, #3
   1c436:	df02      	svc	2
	lll_done(param);
   1c438:	4620      	mov	r0, r4
}
   1c43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1c43e:	f7fe be9d 	b.w	1b17c <lll_done>
		radio_isr_set(isr_done, param);
   1c442:	4806      	ldr	r0, [pc, #24]	; (1c45c <lll_conn_abort_cb+0x4c>)
   1c444:	f000 fef0 	bl	1d228 <radio_isr_set>
}
   1c448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1c44c:	f001 b800 	b.w	1d450 <radio_disable>
   1c450:	00027bb4 	.word	0x00027bb4
   1c454:	00027a8c 	.word	0x00027a8c
   1c458:	00026ecc 	.word	0x00026ecc
   1c45c:	0001c2dd 	.word	0x0001c2dd

0001c460 <lll_conn_rx_pkt_set>:
{
   1c460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c462:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c464:	2001      	movs	r0, #1
   1c466:	f7f8 fe1f 	bl	150a8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1c46a:	4604      	mov	r4, r0
   1c46c:	b350      	cbz	r0, 1c4c4 <lll_conn_rx_pkt_set+0x64>
	phy = lll->phy_rx;
   1c46e:	f895 6049 	ldrb.w	r6, [r5, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   1c472:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
	phy = lll->phy_rx;
   1c476:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   1c47a:	4630      	mov	r0, r6
   1c47c:	2100      	movs	r1, #0
   1c47e:	f000 ff19 	bl	1d2b4 <radio_phy_set>
	} else if (lll->enc_rx) {
   1c482:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   1c486:	0072      	lsls	r2, r6, #1
   1c488:	071b      	lsls	r3, r3, #28
   1c48a:	f104 041c 	add.w	r4, r4, #28
   1c48e:	f042 0201 	orr.w	r2, r2, #1
   1c492:	d50e      	bpl.n	1c4b2 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1c494:	1d39      	adds	r1, r7, #4
   1c496:	b2c9      	uxtb	r1, r1
   1c498:	2008      	movs	r0, #8
   1c49a:	f000 ff6f 	bl	1d37c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1c49e:	4622      	mov	r2, r4
   1c4a0:	4631      	mov	r1, r6
   1c4a2:	f105 0063 	add.w	r0, r5, #99	; 0x63
   1c4a6:	f001 f9e5 	bl	1d874 <radio_ccm_rx_pkt_set>
}
   1c4aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1c4ae:	f000 bf9b 	b.w	1d3e8 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1c4b2:	b2f9      	uxtb	r1, r7
   1c4b4:	2008      	movs	r0, #8
   1c4b6:	f000 ff61 	bl	1d37c <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1c4ba:	4620      	mov	r0, r4
}
   1c4bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1c4c0:	f000 bf92 	b.w	1d3e8 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1c4c4:	4a06      	ldr	r2, [pc, #24]	; (1c4e0 <lll_conn_rx_pkt_set+0x80>)
   1c4c6:	4907      	ldr	r1, [pc, #28]	; (1c4e4 <lll_conn_rx_pkt_set+0x84>)
   1c4c8:	4807      	ldr	r0, [pc, #28]	; (1c4e8 <lll_conn_rx_pkt_set+0x88>)
   1c4ca:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   1c4ce:	f004 f8b7 	bl	20640 <printk>
   1c4d2:	4040      	eors	r0, r0
   1c4d4:	f380 8811 	msr	BASEPRI, r0
   1c4d8:	f04f 0003 	mov.w	r0, #3
   1c4dc:	df02      	svc	2
   1c4de:	e7c6      	b.n	1c46e <lll_conn_rx_pkt_set+0xe>
   1c4e0:	00027bb4 	.word	0x00027bb4
   1c4e4:	00027b98 	.word	0x00027b98
   1c4e8:	00026ecc 	.word	0x00026ecc

0001c4ec <lll_conn_isr_tx>:
{
   1c4ec:	b538      	push	{r3, r4, r5, lr}
   1c4ee:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1c4f0:	f7fe ff0a 	bl	1b308 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1c4f4:	2096      	movs	r0, #150	; 0x96
   1c4f6:	f001 f8a3 	bl	1d640 <radio_tmr_tifs_set>
				     lll->phy_flags);
   1c4fa:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   1c4fe:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c502:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1c506:	f000 0007 	and.w	r0, r0, #7
   1c50a:	f002 0207 	and.w	r2, r2, #7
   1c50e:	2100      	movs	r1, #0
   1c510:	f001 f80c 	bl	1d52c <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1c514:	4620      	mov	r0, r4
   1c516:	f7ff ffa3 	bl	1c460 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1c51a:	f000 ffbd 	bl	1d498 <radio_is_ready>
   1c51e:	bb58      	cbnz	r0, 1c578 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1c520:	f001 f9a2 	bl	1d868 <radio_tmr_tifs_base_get>
   1c524:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1c526:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c52a:	2101      	movs	r1, #1
   1c52c:	f000 0007 	and.w	r0, r0, #7
   1c530:	f000 ff74 	bl	1d41c <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1c534:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1c538:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1c53c:	4405      	add	r5, r0
   1c53e:	2b02      	cmp	r3, #2
   1c540:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1c544:	d016      	beq.n	1c574 <lll_conn_isr_tx+0x88>
		return 376;
   1c546:	2b04      	cmp	r3, #4
   1c548:	bf14      	ite	ne
   1c54a:	2328      	movne	r3, #40	; 0x28
   1c54c:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1c550:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   1c554:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1c558:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1c55c:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1c55e:	f000 ff59 	bl	1d414 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1c562:	1a28      	subs	r0, r5, r0
   1c564:	f001 f938 	bl	1d7d8 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1c568:	4621      	mov	r1, r4
   1c56a:	480a      	ldr	r0, [pc, #40]	; (1c594 <lll_conn_isr_tx+0xa8>)
}
   1c56c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1c570:	f000 be5a 	b.w	1d228 <radio_isr_set>
	switch (phy) {
   1c574:	2318      	movs	r3, #24
   1c576:	e7eb      	b.n	1c550 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1c578:	4a07      	ldr	r2, [pc, #28]	; (1c598 <lll_conn_isr_tx+0xac>)
   1c57a:	4908      	ldr	r1, [pc, #32]	; (1c59c <lll_conn_isr_tx+0xb0>)
   1c57c:	4808      	ldr	r0, [pc, #32]	; (1c5a0 <lll_conn_isr_tx+0xb4>)
   1c57e:	f44f 73ba 	mov.w	r3, #372	; 0x174
   1c582:	f004 f85d 	bl	20640 <printk>
   1c586:	4040      	eors	r0, r0
   1c588:	f380 8811 	msr	BASEPRI, r0
   1c58c:	f04f 0003 	mov.w	r0, #3
   1c590:	df02      	svc	2
   1c592:	e7c5      	b.n	1c520 <lll_conn_isr_tx+0x34>
   1c594:	0001c6a5 	.word	0x0001c6a5
   1c598:	00027bb4 	.word	0x00027bb4
   1c59c:	00027b14 	.word	0x00027b14
   1c5a0:	00026ecc 	.word	0x00026ecc

0001c5a4 <lll_conn_tx_pkt_set>:
{
   1c5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c5a6:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   1c5a8:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   1c5ac:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   1c5b0:	f001 0407 	and.w	r4, r1, #7
{
   1c5b4:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1c5b6:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1c5ba:	4620      	mov	r0, r4
   1c5bc:	f000 fe7a 	bl	1d2b4 <radio_phy_set>
	} else if (lll->enc_tx) {
   1c5c0:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   1c5c4:	0062      	lsls	r2, r4, #1
   1c5c6:	06db      	lsls	r3, r3, #27
   1c5c8:	f042 0201 	orr.w	r2, r2, #1
   1c5cc:	b2f1      	uxtb	r1, r6
   1c5ce:	d50d      	bpl.n	1c5ec <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   1c5d0:	3104      	adds	r1, #4
   1c5d2:	b2c9      	uxtb	r1, r1
   1c5d4:	2008      	movs	r0, #8
   1c5d6:	f000 fed1 	bl	1d37c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1c5da:	4639      	mov	r1, r7
   1c5dc:	f105 0084 	add.w	r0, r5, #132	; 0x84
   1c5e0:	f001 f998 	bl	1d914 <radio_ccm_tx_pkt_set>
}
   1c5e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1c5e8:	f000 bf04 	b.w	1d3f4 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1c5ec:	2008      	movs	r0, #8
   1c5ee:	f000 fec5 	bl	1d37c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1c5f2:	4638      	mov	r0, r7
}
   1c5f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1c5f8:	f000 befc 	b.w	1d3f4 <radio_pkt_tx_set>

0001c5fc <lll_conn_pdu_tx_prep>:
{
   1c5fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (lll->empty) {
   1c600:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
   1c604:	075b      	lsls	r3, r3, #29
{
   1c606:	b083      	sub	sp, #12
   1c608:	4688      	mov	r8, r1
	if (lll->empty) {
   1c60a:	d43e      	bmi.n	1c68a <lll_conn_pdu_tx_prep+0x8e>
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1c60c:	4604      	mov	r4, r0
   1c60e:	aa01      	add	r2, sp, #4
   1c610:	e9d0 0113 	ldrd	r0, r1, [r0, #76]	; 0x4c
   1c614:	f7f4 f994 	bl	10940 <memq_peek>
	if (!link) {
   1c618:	4681      	mov	r9, r0
   1c61a:	2800      	cmp	r0, #0
   1c61c:	d03c      	beq.n	1c698 <lll_conn_pdu_tx_prep+0x9c>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1c61e:	9f01      	ldr	r7, [sp, #4]
   1c620:	f894 6061 	ldrb.w	r6, [r4, #97]	; 0x61
		if (!lll->packet_tx_head_len) {
   1c624:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1c628:	3704      	adds	r7, #4
   1c62a:	19bd      	adds	r5, r7, r6
		if (!lll->packet_tx_head_len) {
   1c62c:	b913      	cbnz	r3, 1c634 <lll_conn_pdu_tx_prep+0x38>
			lll->packet_tx_head_len = p->len;
   1c62e:	786b      	ldrb	r3, [r5, #1]
   1c630:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   1c634:	b126      	cbz	r6, 1c640 <lll_conn_pdu_tx_prep+0x44>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1c636:	5dba      	ldrb	r2, [r7, r6]
   1c638:	2101      	movs	r1, #1
   1c63a:	f361 0201 	bfi	r2, r1, #0, #2
   1c63e:	55ba      	strb	r2, [r7, r6]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1c640:	1b9b      	subs	r3, r3, r6
   1c642:	706b      	strb	r3, [r5, #1]
		p->md = 0;
   1c644:	5dbb      	ldrb	r3, [r7, r6]
   1c646:	f36f 1304 	bfc	r3, #4, #1
   1c64a:	55bb      	strb	r3, [r7, r6]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1c64c:	4620      	mov	r0, r4
   1c64e:	f7fc fca7 	bl	18fa0 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1c652:	786b      	ldrb	r3, [r5, #1]
   1c654:	4283      	cmp	r3, r0
   1c656:	d904      	bls.n	1c662 <lll_conn_pdu_tx_prep+0x66>
			p->len = max_tx_octets;
   1c658:	7068      	strb	r0, [r5, #1]
			p->md = 1;
   1c65a:	5dbb      	ldrb	r3, [r7, r6]
   1c65c:	f043 0310 	orr.w	r3, r3, #16
   1c660:	55bb      	strb	r3, [r7, r6]
		if (link->next != lll->memq_tx.tail) {
   1c662:	f8d9 2000 	ldr.w	r2, [r9]
   1c666:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1c668:	429a      	cmp	r2, r3
   1c66a:	d003      	beq.n	1c674 <lll_conn_pdu_tx_prep+0x78>
			p->md = 1;
   1c66c:	5dbb      	ldrb	r3, [r7, r6]
   1c66e:	f043 0310 	orr.w	r3, r3, #16
   1c672:	55bb      	strb	r3, [r7, r6]
	p->rfu = 0U;
   1c674:	782b      	ldrb	r3, [r5, #0]
	p->resv = 0U;
   1c676:	2200      	movs	r2, #0
	p->rfu = 0U;
   1c678:	f36f 1347 	bfc	r3, #5, #3
   1c67c:	702b      	strb	r3, [r5, #0]
	p->resv = 0U;
   1c67e:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   1c680:	f8c8 5000 	str.w	r5, [r8]
}
   1c684:	b003      	add	sp, #12
   1c686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*pdu_data_tx = empty_tx_enqueue(lll);
   1c68a:	f7ff fe7f 	bl	1c38c <empty_tx_enqueue>
   1c68e:	f8c8 0000 	str.w	r0, [r8]
}
   1c692:	b003      	add	sp, #12
   1c694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		p = empty_tx_enqueue(lll);
   1c698:	4620      	mov	r0, r4
   1c69a:	f7ff fe77 	bl	1c38c <empty_tx_enqueue>
   1c69e:	4605      	mov	r5, r0
   1c6a0:	e7e8      	b.n	1c674 <lll_conn_pdu_tx_prep+0x78>
   1c6a2:	bf00      	nop

0001c6a4 <lll_conn_isr_rx>:
{
   1c6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c6a8:	b082      	sub	sp, #8
   1c6aa:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1c6ac:	f000 fefe 	bl	1d4ac <radio_is_done>
	if (trx_done) {
   1c6b0:	f010 0fff 	tst.w	r0, #255	; 0xff
   1c6b4:	d10a      	bne.n	1c6cc <lll_conn_isr_rx+0x28>
	lll_isr_rx_status_reset();
   1c6b6:	f7fe fe2f 	bl	1b318 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1c6ba:	48b3      	ldr	r0, [pc, #716]	; (1c988 <lll_conn_isr_rx+0x2e4>)
   1c6bc:	4621      	mov	r1, r4
   1c6be:	f000 fdb3 	bl	1d228 <radio_isr_set>
		radio_disable();
   1c6c2:	f000 fec5 	bl	1d450 <radio_disable>
}
   1c6c6:	b002      	add	sp, #8
   1c6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		crc_ok = radio_crc_is_valid();
   1c6cc:	f000 ff0e 	bl	1d4ec <radio_crc_is_valid>
   1c6d0:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1c6d2:	f000 ff5d 	bl	1d590 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1c6d6:	f7fe fe1f 	bl	1b318 <lll_isr_rx_status_reset>
	trx_cnt++;
   1c6da:	4aac      	ldr	r2, [pc, #688]	; (1c98c <lll_conn_isr_rx+0x2e8>)
   1c6dc:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c6de:	2001      	movs	r0, #1
	trx_cnt++;
   1c6e0:	4403      	add	r3, r0
   1c6e2:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c6e4:	f7f8 fce0 	bl	150a8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1c6e8:	4607      	mov	r7, r0
   1c6ea:	2800      	cmp	r0, #0
   1c6ec:	f000 80be 	beq.w	1c86c <lll_conn_isr_rx+0x1c8>
	if (crc_ok) {
   1c6f0:	2d00      	cmp	r5, #0
   1c6f2:	d156      	bne.n	1c7a2 <lll_conn_isr_rx+0xfe>
		if (crc_expire == 0U) {
   1c6f4:	4aa6      	ldr	r2, [pc, #664]	; (1c990 <lll_conn_isr_rx+0x2ec>)
   1c6f6:	7816      	ldrb	r6, [r2, #0]
   1c6f8:	2e00      	cmp	r6, #0
   1c6fa:	f040 8091 	bne.w	1c820 <lll_conn_isr_rx+0x17c>
		crc_expire--;
   1c6fe:	2301      	movs	r3, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c700:	a901      	add	r1, sp, #4
   1c702:	4620      	mov	r0, r4
		crc_expire--;
   1c704:	7013      	strb	r3, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c706:	f7ff ff79 	bl	1c5fc <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1c70a:	2096      	movs	r0, #150	; 0x96
   1c70c:	f000 ff98 	bl	1d640 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1c710:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c714:	f000 0007 	and.w	r0, r0, #7
   1c718:	f000 fefa 	bl	1d510 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1c71c:	489d      	ldr	r0, [pc, #628]	; (1c994 <lll_conn_isr_rx+0x2f0>)
   1c71e:	4621      	mov	r1, r4
   1c720:	f000 fd82 	bl	1d228 <radio_isr_set>
		radio_tmr_end_capture();
   1c724:	f001 f892 	bl	1d84c <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1c728:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   1c72c:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   1c72e:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1c732:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   1c734:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1c738:	009b      	lsls	r3, r3, #2
   1c73a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1c73e:	f020 020c 	bic.w	r2, r0, #12
   1c742:	4313      	orrs	r3, r2
   1c744:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1c746:	4620      	mov	r0, r4
   1c748:	f7ff ff2c 	bl	1c5a4 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1c74c:	f000 fea4 	bl	1d498 <radio_is_ready>
   1c750:	2800      	cmp	r0, #0
   1c752:	f040 809d 	bne.w	1c890 <lll_conn_isr_rx+0x1ec>
	if (!radio_tmr_aa_restore()) {
   1c756:	f001 f86d 	bl	1d834 <radio_tmr_aa_restore>
   1c75a:	b178      	cbz	r0, 1c77c <lll_conn_isr_rx+0xd8>
	if (tx_release) {
   1c75c:	b1a5      	cbz	r5, 1c788 <lll_conn_isr_rx+0xe4>
		LL_ASSERT(lll->handle != 0xFFFF);
   1c75e:	8a20      	ldrh	r0, [r4, #16]
   1c760:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c764:	4298      	cmp	r0, r3
   1c766:	f000 80a1 	beq.w	1c8ac <lll_conn_isr_rx+0x208>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1c76a:	4629      	mov	r1, r5
   1c76c:	f7fc fa26 	bl	18bbc <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1c770:	b966      	cbnz	r6, 1c78c <lll_conn_isr_rx+0xe8>
		ull_rx_sched();
   1c772:	f7f8 fcdf 	bl	15134 <ull_rx_sched>
}
   1c776:	b002      	add	sp, #8
   1c778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1c77c:	f001 f84e 	bl	1d81c <radio_tmr_aa_get>
   1c780:	f001 f852 	bl	1d828 <radio_tmr_aa_save>
	if (tx_release) {
   1c784:	2d00      	cmp	r5, #0
   1c786:	d1ea      	bne.n	1c75e <lll_conn_isr_rx+0xba>
	if (is_rx_enqueue) {
   1c788:	2e00      	cmp	r6, #0
   1c78a:	d09c      	beq.n	1c6c6 <lll_conn_isr_rx+0x22>
		ull_pdu_rx_alloc();
   1c78c:	f7f8 fcaa 	bl	150e4 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1c790:	2302      	movs	r3, #2
   1c792:	713b      	strb	r3, [r7, #4]
		node_rx->hdr.handle = lll->handle;
   1c794:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1c796:	6838      	ldr	r0, [r7, #0]
		node_rx->hdr.handle = lll->handle;
   1c798:	80fb      	strh	r3, [r7, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1c79a:	4639      	mov	r1, r7
   1c79c:	f7f8 fcba 	bl	15114 <ull_rx_put>
	if (is_ull_rx) {
   1c7a0:	e7e7      	b.n	1c772 <lll_conn_isr_rx+0xce>
	if (pdu_data_rx->nesn != lll->sn) {
   1c7a2:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c7a6:	7f3a      	ldrb	r2, [r7, #28]
   1c7a8:	f003 0101 	and.w	r1, r3, #1
   1c7ac:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1c7b0:	4288      	cmp	r0, r1
   1c7b2:	d06b      	beq.n	1c88c <lll_conn_isr_rx+0x1e8>
		if (lll->role) {
   1c7b4:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
		lll->sn++;
   1c7b8:	f081 0101 	eor.w	r1, r1, #1
   1c7bc:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   1c7c0:	2800      	cmp	r0, #0
		lll->sn++;
   1c7c2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (lll->role) {
   1c7c6:	da05      	bge.n	1c7d4 <lll_conn_isr_rx+0x130>
			lll->slave.latency_enabled = 1;
   1c7c8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1c7cc:	f043 0301 	orr.w	r3, r3, #1
   1c7d0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (!lll->empty) {
   1c7d4:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c7d8:	075d      	lsls	r5, r3, #29
   1c7da:	d576      	bpl.n	1c8ca <lll_conn_isr_rx+0x226>
			lll->empty = 0;
   1c7dc:	f36f 0382 	bfc	r3, #2, #1
   1c7e0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	struct node_tx *tx_release = NULL;
   1c7e4:	2500      	movs	r5, #0
   1c7e6:	b2db      	uxtb	r3, r3
	if ((pdu_data_rx->sn == lll->nesn) &&
   1c7e8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1c7ec:	f3c3 0140 	ubfx	r1, r3, #1, #1
   1c7f0:	428a      	cmp	r2, r1
   1c7f2:	f000 8090 	beq.w	1c916 <lll_conn_isr_rx+0x272>
	uint8_t is_rx_enqueue = 0U;
   1c7f6:	2600      	movs	r6, #0
		crc_expire = 0U;
   1c7f8:	4965      	ldr	r1, [pc, #404]	; (1c990 <lll_conn_isr_rx+0x2ec>)
		crc_valid = 1U;
   1c7fa:	4a67      	ldr	r2, [pc, #412]	; (1c998 <lll_conn_isr_rx+0x2f4>)
		crc_expire = 0U;
   1c7fc:	2000      	movs	r0, #0
   1c7fe:	7008      	strb	r0, [r1, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1c800:	f3c3 0880 	ubfx	r8, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c804:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1c806:	2301      	movs	r3, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c808:	4620      	mov	r0, r4
		crc_valid = 1U;
   1c80a:	7013      	strb	r3, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c80c:	f7ff fef6 	bl	1c5fc <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c810:	7f3b      	ldrb	r3, [r7, #28]
   1c812:	06db      	lsls	r3, r3, #27
   1c814:	f53f af79 	bmi.w	1c70a <lll_conn_isr_rx+0x66>
				     (pdu_data_tx->len == 0));
   1c818:	9b01      	ldr	r3, [sp, #4]
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c81a:	785b      	ldrb	r3, [r3, #1]
   1c81c:	b173      	cbz	r3, 1c83c <lll_conn_isr_rx+0x198>
   1c81e:	e774      	b.n	1c70a <lll_conn_isr_rx+0x66>
	is_empty_pdu_tx_retry = lll->empty;
   1c820:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
		crc_expire--;
   1c824:	3e01      	subs	r6, #1
   1c826:	b2f6      	uxtb	r6, r6
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c828:	a901      	add	r1, sp, #4
   1c82a:	4620      	mov	r0, r4
		crc_expire--;
   1c82c:	7016      	strb	r6, [r2, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1c82e:	f3c3 0880 	ubfx	r8, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c832:	f7ff fee3 	bl	1c5fc <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c836:	2e00      	cmp	r6, #0
   1c838:	f040 8108 	bne.w	1ca4c <lll_conn_isr_rx+0x3a8>
		radio_isr_set(isr_done, param);
   1c83c:	4852      	ldr	r0, [pc, #328]	; (1c988 <lll_conn_isr_rx+0x2e4>)
   1c83e:	4621      	mov	r1, r4
   1c840:	f000 fcf2 	bl	1d228 <radio_isr_set>
		} else if (!lll->role) {
   1c844:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1c848:	2b00      	cmp	r3, #0
   1c84a:	da02      	bge.n	1c852 <lll_conn_isr_rx+0x1ae>
			radio_switch_complete_and_disable();
   1c84c:	f000 fe7a 	bl	1d544 <radio_switch_complete_and_disable>
   1c850:	e76a      	b.n	1c728 <lll_conn_isr_rx+0x84>
			radio_disable();
   1c852:	f000 fdfd 	bl	1d450 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   1c856:	f000 fe1f 	bl	1d498 <radio_is_ready>
   1c85a:	2800      	cmp	r0, #0
   1c85c:	d16d      	bne.n	1c93a <lll_conn_isr_rx+0x296>
			lll->empty = is_empty_pdu_tx_retry;
   1c85e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c862:	f368 0382 	bfi	r3, r8, #2, #1
   1c866:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			goto lll_conn_isr_rx_exit;
   1c86a:	e774      	b.n	1c756 <lll_conn_isr_rx+0xb2>
	LL_ASSERT(node_rx);
   1c86c:	4a4b      	ldr	r2, [pc, #300]	; (1c99c <lll_conn_isr_rx+0x2f8>)
   1c86e:	494c      	ldr	r1, [pc, #304]	; (1c9a0 <lll_conn_isr_rx+0x2fc>)
   1c870:	484c      	ldr	r0, [pc, #304]	; (1c9a4 <lll_conn_isr_rx+0x300>)
   1c872:	23aa      	movs	r3, #170	; 0xaa
   1c874:	f003 fee4 	bl	20640 <printk>
   1c878:	4040      	eors	r0, r0
   1c87a:	f380 8811 	msr	BASEPRI, r0
   1c87e:	f04f 0003 	mov.w	r0, #3
   1c882:	df02      	svc	2
	if (crc_ok) {
   1c884:	2d00      	cmp	r5, #0
   1c886:	f43f af35 	beq.w	1c6f4 <lll_conn_isr_rx+0x50>
   1c88a:	e78a      	b.n	1c7a2 <lll_conn_isr_rx+0xfe>
	struct node_tx *tx_release = NULL;
   1c88c:	2500      	movs	r5, #0
   1c88e:	e7ab      	b.n	1c7e8 <lll_conn_isr_rx+0x144>
	LL_ASSERT(!radio_is_ready());
   1c890:	4a42      	ldr	r2, [pc, #264]	; (1c99c <lll_conn_isr_rx+0x2f8>)
   1c892:	4945      	ldr	r1, [pc, #276]	; (1c9a8 <lll_conn_isr_rx+0x304>)
   1c894:	4843      	ldr	r0, [pc, #268]	; (1c9a4 <lll_conn_isr_rx+0x300>)
   1c896:	f44f 738a 	mov.w	r3, #276	; 0x114
   1c89a:	f003 fed1 	bl	20640 <printk>
   1c89e:	4040      	eors	r0, r0
   1c8a0:	f380 8811 	msr	BASEPRI, r0
   1c8a4:	f04f 0003 	mov.w	r0, #3
   1c8a8:	df02      	svc	2
   1c8aa:	e754      	b.n	1c756 <lll_conn_isr_rx+0xb2>
		LL_ASSERT(lll->handle != 0xFFFF);
   1c8ac:	4a3b      	ldr	r2, [pc, #236]	; (1c99c <lll_conn_isr_rx+0x2f8>)
   1c8ae:	493f      	ldr	r1, [pc, #252]	; (1c9ac <lll_conn_isr_rx+0x308>)
   1c8b0:	483c      	ldr	r0, [pc, #240]	; (1c9a4 <lll_conn_isr_rx+0x300>)
   1c8b2:	f240 1321 	movw	r3, #289	; 0x121
   1c8b6:	f003 fec3 	bl	20640 <printk>
   1c8ba:	4040      	eors	r0, r0
   1c8bc:	f380 8811 	msr	BASEPRI, r0
   1c8c0:	f04f 0003 	mov.w	r0, #3
   1c8c4:	df02      	svc	2
   1c8c6:	8a20      	ldrh	r0, [r4, #16]
   1c8c8:	e74f      	b.n	1c76a <lll_conn_isr_rx+0xc6>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1c8ca:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   1c8ce:	aa01      	add	r2, sp, #4
   1c8d0:	f7f4 f836 	bl	10940 <memq_peek>
		if (link) {
   1c8d4:	4606      	mov	r6, r0
   1c8d6:	2800      	cmp	r0, #0
   1c8d8:	d03f      	beq.n	1c95a <lll_conn_isr_rx+0x2b6>
					       lll->packet_tx_head_offset);
   1c8da:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
			pdu_data_tx_len = pdu_data_tx->len;
   1c8de:	9b01      	ldr	r3, [sp, #4]
   1c8e0:	4413      	add	r3, r2
   1c8e2:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   1c8e4:	b151      	cbz	r1, 1c8fc <lll_conn_isr_rx+0x258>
				if (lll->enc_tx) {
   1c8e6:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c8ea:	06d8      	lsls	r0, r3, #27
   1c8ec:	d506      	bpl.n	1c8fc <lll_conn_isr_rx+0x258>
					lll->ccm_tx.counter++;
   1c8ee:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1c8f2:	3301      	adds	r3, #1
   1c8f4:	f140 0000 	adc.w	r0, r0, #0
   1c8f8:	e9c4 3025 	strd	r3, r0, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   1c8fc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1c900:	440a      	add	r2, r1
   1c902:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1c904:	429a      	cmp	r2, r3
   1c906:	d22d      	bcs.n	1c964 <lll_conn_isr_rx+0x2c0>
				lll->packet_tx_head_offset = offset;
   1c908:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
   1c90c:	7f3a      	ldrb	r2, [r7, #28]
   1c90e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
	struct node_tx *tx_release = NULL;
   1c912:	2500      	movs	r5, #0
   1c914:	e768      	b.n	1c7e8 <lll_conn_isr_rx+0x144>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1c916:	2003      	movs	r0, #3
   1c918:	f7f8 fbc6 	bl	150a8 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1c91c:	b1d0      	cbz	r0, 1c954 <lll_conn_isr_rx+0x2b0>
		lll->nesn++;
   1c91e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c922:	f083 0302 	eor.w	r3, r3, #2
   1c926:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (pdu_data_rx->len != 0) {
   1c92a:	7f7b      	ldrb	r3, [r7, #29]
   1c92c:	b193      	cbz	r3, 1c954 <lll_conn_isr_rx+0x2b0>
			if (lll->enc_rx) {
   1c92e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c932:	071a      	lsls	r2, r3, #28
   1c934:	d43c      	bmi.n	1c9b0 <lll_conn_isr_rx+0x30c>
			*is_rx_enqueue = 1U;
   1c936:	2601      	movs	r6, #1
   1c938:	e75e      	b.n	1c7f8 <lll_conn_isr_rx+0x154>
			LL_ASSERT(!radio_is_ready());
   1c93a:	4a18      	ldr	r2, [pc, #96]	; (1c99c <lll_conn_isr_rx+0x2f8>)
   1c93c:	491a      	ldr	r1, [pc, #104]	; (1c9a8 <lll_conn_isr_rx+0x304>)
   1c93e:	4819      	ldr	r0, [pc, #100]	; (1c9a4 <lll_conn_isr_rx+0x300>)
   1c940:	23da      	movs	r3, #218	; 0xda
   1c942:	f003 fe7d 	bl	20640 <printk>
   1c946:	4040      	eors	r0, r0
   1c948:	f380 8811 	msr	BASEPRI, r0
   1c94c:	f04f 0003 	mov.w	r0, #3
   1c950:	df02      	svc	2
   1c952:	e784      	b.n	1c85e <lll_conn_isr_rx+0x1ba>
   1c954:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c958:	e74d      	b.n	1c7f6 <lll_conn_isr_rx+0x152>
   1c95a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c95e:	7f3a      	ldrb	r2, [r7, #28]
	struct node_tx *tx_release = NULL;
   1c960:	2500      	movs	r5, #0
   1c962:	e741      	b.n	1c7e8 <lll_conn_isr_rx+0x144>
			} else if (offset == lll->packet_tx_head_len) {
   1c964:	d1f9      	bne.n	1c95a <lll_conn_isr_rx+0x2b6>
				lll->packet_tx_head_len = 0;
   1c966:	2200      	movs	r2, #0
   1c968:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				memq_dequeue(lll->memq_tx.tail,
   1c96c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1c96e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1c972:	f7f3 ffed 	bl	10950 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1c976:	9d01      	ldr	r5, [sp, #4]
   1c978:	7f3a      	ldrb	r2, [r7, #28]
   1c97a:	682b      	ldr	r3, [r5, #0]
   1c97c:	6033      	str	r3, [r6, #0]
				tx->next = link;
   1c97e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c982:	602e      	str	r6, [r5, #0]
				*tx_release = tx;
   1c984:	e730      	b.n	1c7e8 <lll_conn_isr_rx+0x144>
   1c986:	bf00      	nop
   1c988:	0001c2dd 	.word	0x0001c2dd
   1c98c:	20004cec 	.word	0x20004cec
   1c990:	2000538e 	.word	0x2000538e
   1c994:	0001c4ed 	.word	0x0001c4ed
   1c998:	2000538f 	.word	0x2000538f
   1c99c:	00027bb4 	.word	0x00027bb4
   1c9a0:	00027b98 	.word	0x00027b98
   1c9a4:	00026ecc 	.word	0x00026ecc
   1c9a8:	00027b14 	.word	0x00027b14
   1c9ac:	00027c08 	.word	0x00027c08
				done = radio_ccm_is_done();
   1c9b0:	f000 ffda 	bl	1d968 <radio_ccm_is_done>
				LL_ASSERT(done);
   1c9b4:	2800      	cmp	r0, #0
   1c9b6:	d03b      	beq.n	1ca30 <lll_conn_isr_rx+0x38c>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1c9b8:	f000 fff8 	bl	1d9ac <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1c9bc:	bb30      	cbnz	r0, 1ca0c <lll_conn_isr_rx+0x368>
				    lll->ccm_rx.counter == 0 &&
   1c9be:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   1c9c2:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   1c9c6:	4313      	orrs	r3, r2
   1c9c8:	d104      	bne.n	1c9d4 <lll_conn_isr_rx+0x330>
				    (pdu_data_rx->ll_id ==
   1c9ca:	7f3b      	ldrb	r3, [r7, #28]
				    lll->ccm_rx.counter == 0 &&
   1c9cc:	f003 0303 	and.w	r3, r3, #3
   1c9d0:	2b03      	cmp	r3, #3
   1c9d2:	d004      	beq.n	1c9de <lll_conn_isr_rx+0x33a>
					mic_state = LLL_CONN_MIC_FAIL;
   1c9d4:	4b1e      	ldr	r3, [pc, #120]	; (1ca50 <lll_conn_isr_rx+0x3ac>)
   1c9d6:	2202      	movs	r2, #2
   1c9d8:	701a      	strb	r2, [r3, #0]
	uint8_t is_rx_enqueue = 0U;
   1c9da:	2600      	movs	r6, #0
   1c9dc:	e6bb      	b.n	1c756 <lll_conn_isr_rx+0xb2>
						radio_pkt_scratch_get();
   1c9de:	f000 fd93 	bl	1d508 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1c9e2:	7842      	ldrb	r2, [r0, #1]
   1c9e4:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   1c9e6:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1c9e8:	d8f4      	bhi.n	1c9d4 <lll_conn_isr_rx+0x330>
						memcpy(pdu_data_rx,
   1c9ea:	3203      	adds	r2, #3
   1c9ec:	f107 001c 	add.w	r0, r7, #28
   1c9f0:	f005 fe96 	bl	22720 <memcpy>
						lll->ccm_rx.counter--;
   1c9f4:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1c9f8:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   1c9fc:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   1ca00:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   1ca04:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   1ca08:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77
				lll->ccm_rx.counter++;
   1ca0c:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1ca10:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
				mic_state = LLL_CONN_MIC_PASS;
   1ca14:	490e      	ldr	r1, [pc, #56]	; (1ca50 <lll_conn_isr_rx+0x3ac>)
				lll->ccm_rx.counter++;
   1ca16:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   1ca18:	f104 0073 	add.w	r0, r4, #115	; 0x73
				lll->ccm_rx.counter++;
   1ca1c:	f142 0200 	adc.w	r2, r2, #0
   1ca20:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   1ca24:	2601      	movs	r6, #1
				lll->ccm_rx.counter++;
   1ca26:	6042      	str	r2, [r0, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1ca28:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1ca2c:	700e      	strb	r6, [r1, #0]
		if (err) {
   1ca2e:	e6e3      	b.n	1c7f8 <lll_conn_isr_rx+0x154>
				LL_ASSERT(done);
   1ca30:	4a08      	ldr	r2, [pc, #32]	; (1ca54 <lll_conn_isr_rx+0x3b0>)
   1ca32:	4909      	ldr	r1, [pc, #36]	; (1ca58 <lll_conn_isr_rx+0x3b4>)
   1ca34:	4809      	ldr	r0, [pc, #36]	; (1ca5c <lll_conn_isr_rx+0x3b8>)
   1ca36:	f240 23c3 	movw	r3, #707	; 0x2c3
   1ca3a:	f003 fe01 	bl	20640 <printk>
   1ca3e:	4040      	eors	r0, r0
   1ca40:	f380 8811 	msr	BASEPRI, r0
   1ca44:	f04f 0003 	mov.w	r0, #3
   1ca48:	df02      	svc	2
   1ca4a:	e7b5      	b.n	1c9b8 <lll_conn_isr_rx+0x314>
	uint8_t is_rx_enqueue = 0U;
   1ca4c:	462e      	mov	r6, r5
   1ca4e:	e65c      	b.n	1c70a <lll_conn_isr_rx+0x66>
   1ca50:	20005390 	.word	0x20005390
   1ca54:	00027bb4 	.word	0x00027bb4
   1ca58:	00027c00 	.word	0x00027c00
   1ca5c:	00026ecc 	.word	0x00026ecc

0001ca60 <lll_conn_flush>:

void lll_conn_flush(uint16_t handle, struct lll_conn *lll)
{
	/* Nothing to be flushed */
}
   1ca60:	4770      	bx	lr
   1ca62:	bf00      	nop

0001ca64 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *prepare_param)
{
   1ca64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct lll_conn *lll = prepare_param->param;
   1ca68:	68c4      	ldr	r4, [r0, #12]
{
   1ca6a:	b082      	sub	sp, #8
   1ca6c:	4605      	mov	r5, r0
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1ca6e:	f7ff fcbb 	bl	1c3e8 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1ca72:	8ae1      	ldrh	r1, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1ca74:	8b66      	ldrh	r6, [r4, #26]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1ca76:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1ca7a:	1e48      	subs	r0, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1ca7c:	4431      	add	r1, r6
	lll->latency_prepare = 0;
   1ca7e:	2200      	movs	r2, #0
	lll->latency_event = lll->latency_prepare - 1;
   1ca80:	b280      	uxth	r0, r0
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1ca82:	8361      	strh	r1, [r4, #26]
	if (lll->data_chan_sel) {
   1ca84:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   1ca86:	82e2      	strh	r2, [r4, #22]
	lll->latency_event = lll->latency_prepare - 1;
   1ca88:	8320      	strh	r0, [r4, #24]
	if (lll->data_chan_sel) {
   1ca8a:	f104 021c 	add.w	r2, r4, #28
   1ca8e:	f140 8089 	bpl.w	1cba4 <prepare_cb+0x140>
	event_counter = lll->event_counter + lll->latency_event;
   1ca92:	4430      	add	r0, r6
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1ca94:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   1ca96:	b280      	uxth	r0, r0
   1ca98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ca9c:	f7fc ff90 	bl	199c0 <lll_chan_sel_2>
   1caa0:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   1caa2:	e9d4 610c 	ldrd	r6, r1, [r4, #48]	; 0x30
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   1caa6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   1caa8:	e9d4 030e 	ldrd	r0, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_event_us +=
   1caac:	4431      	add	r1, r6
		lll->slave.window_widening_event_us =
   1caae:	428a      	cmp	r2, r1
   1cab0:	bf28      	it	cs
   1cab2:	460a      	movcs	r2, r1
	lll->slave.window_size_event_us +=
   1cab4:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   1cab6:	2600      	movs	r6, #0
		lll->slave.window_widening_event_us =
   1cab8:	6362      	str	r2, [r4, #52]	; 0x34
	lll->slave.window_size_event_us +=
   1caba:	63e3      	str	r3, [r4, #60]	; 0x3c
	lll->slave.window_widening_prepare_us = 0;
   1cabc:	6326      	str	r6, [r4, #48]	; 0x30
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   1cabe:	63a6      	str	r6, [r4, #56]	; 0x38

	/* Start setting up Radio h/w */
	radio_reset();
   1cac0:	f000 fbd2 	bl	1d268 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1cac4:	4630      	mov	r0, r6
   1cac6:	f000 fc21 	bl	1d30c <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   1caca:	4620      	mov	r0, r4
   1cacc:	f7ff fcc8 	bl	1c460 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1cad0:	f104 0008 	add.w	r0, r4, #8
   1cad4:	f000 fc38 	bl	1d348 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   1cad8:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1cada:	7ba2      	ldrb	r2, [r4, #14]
			     ((uint32_t)lll->crc_init[0])));
   1cadc:	7b21      	ldrb	r1, [r4, #12]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1cade:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1cae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1cae4:	4319      	orrs	r1, r3
   1cae6:	f240 605b 	movw	r0, #1627	; 0x65b
   1caea:	f000 fcf3 	bl	1d4d4 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   1caee:	4638      	mov	r0, r7
   1caf0:	f7fe fbc4 	bl	1b27c <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1caf4:	4621      	mov	r1, r4
   1caf6:	4840      	ldr	r0, [pc, #256]	; (1cbf8 <prepare_cb+0x194>)
   1caf8:	f000 fb96 	bl	1d228 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1cafc:	2096      	movs	r0, #150	; 0x96
   1cafe:	f000 fd9f 	bl	1d640 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   1cb02:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   1cb06:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1cb0a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1cb0e:	4631      	mov	r1, r6
   1cb10:	f002 0207 	and.w	r2, r2, #7
   1cb14:	f000 0007 	and.w	r0, r0, #7
   1cb18:	f000 fd08 	bl	1d52c <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = prepare_param->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   1cb1c:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = prepare_param->ticks_at_expire;
   1cb20:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1cb22:	4640      	mov	r0, r8
   1cb24:	f7fe fb8a 	bl	1b23c <lll_evt_offset_get>
   1cb28:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = prepare_param->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1cb2a:	686a      	ldr	r2, [r5, #4]
   1cb2c:	f107 0109 	add.w	r1, r7, #9
   1cb30:	4630      	mov	r0, r6
   1cb32:	f000 fd91 	bl	1d658 <radio_tmr_start>
   1cb36:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   1cb38:	f000 fe5c 	bl	1d7f4 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1cb3c:	4630      	mov	r0, r6
   1cb3e:	f000 fe73 	bl	1d828 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1cb42:	6b62      	ldr	r2, [r4, #52]	; 0x34
	hcto = remainder_us +
   1cb44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1cb46:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1cb4a:	3230      	adds	r2, #48	; 0x30
	hcto = remainder_us +
   1cb4c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1cb50:	f000 0007 	and.w	r0, r0, #7
   1cb54:	2101      	movs	r1, #1
	hcto = remainder_us +
   1cb56:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1cb58:	f000 fc5e 	bl	1d418 <radio_rx_ready_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1cb5c:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
   1cb60:	f002 0207 	and.w	r2, r2, #7
   1cb64:	2a02      	cmp	r2, #2
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1cb66:	4405      	add	r5, r0
   1cb68:	d033      	beq.n	1cbd2 <prepare_cb+0x16e>
		return 40;
   1cb6a:	2a04      	cmp	r2, #4
   1cb6c:	bf0c      	ite	eq
   1cb6e:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1cb72:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1cb74:	4610      	mov	r0, r2
   1cb76:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   1cb78:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1cb7a:	f000 fc4f 	bl	1d41c <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1cb7e:	4428      	add	r0, r5
   1cb80:	f000 fe2a 	bl	1d7d8 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1cb84:	7c21      	ldrb	r1, [r4, #16]
   1cb86:	3105      	adds	r1, #5
   1cb88:	463a      	mov	r2, r7
   1cb8a:	4640      	mov	r0, r8
   1cb8c:	b2c9      	uxtb	r1, r1
   1cb8e:	f7fe fb63 	bl	1b258 <lll_preempt_calc>
   1cb92:	b9a0      	cbnz	r0, 1cbbe <prepare_cb+0x15a>
	} else
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
	{
		uint32_t ret;

		ret = lll_prepare_done(lll);
   1cb94:	4620      	mov	r0, r4
   1cb96:	f7fe faef 	bl	1b178 <lll_prepare_done>
		LL_ASSERT(!ret);
   1cb9a:	b9e0      	cbnz	r0, 1cbd6 <prepare_cb+0x172>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1cb9c:	2000      	movs	r0, #0
   1cb9e:	b002      	add	sp, #8
   1cba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1cba4:	f003 063f 	and.w	r6, r3, #63	; 0x3f
   1cba8:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1cbac:	9600      	str	r6, [sp, #0]
   1cbae:	4613      	mov	r3, r2
   1cbb0:	4602      	mov	r2, r0
   1cbb2:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1cbb6:	f7fc fec7 	bl	19948 <lll_chan_sel_1>
   1cbba:	4607      	mov	r7, r0
   1cbbc:	e771      	b.n	1caa2 <prepare_cb+0x3e>
		radio_isr_set(lll_isr_abort, lll);
   1cbbe:	480f      	ldr	r0, [pc, #60]	; (1cbfc <prepare_cb+0x198>)
   1cbc0:	4621      	mov	r1, r4
   1cbc2:	f000 fb31 	bl	1d228 <radio_isr_set>
		radio_disable();
   1cbc6:	f000 fc43 	bl	1d450 <radio_disable>
}
   1cbca:	2000      	movs	r0, #0
   1cbcc:	b002      	add	sp, #8
   1cbce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   1cbd2:	2318      	movs	r3, #24
   1cbd4:	e7ce      	b.n	1cb74 <prepare_cb+0x110>
		LL_ASSERT(!ret);
   1cbd6:	4a0a      	ldr	r2, [pc, #40]	; (1cc00 <prepare_cb+0x19c>)
   1cbd8:	490a      	ldr	r1, [pc, #40]	; (1cc04 <prepare_cb+0x1a0>)
   1cbda:	480b      	ldr	r0, [pc, #44]	; (1cc08 <prepare_cb+0x1a4>)
   1cbdc:	23fe      	movs	r3, #254	; 0xfe
   1cbde:	f003 fd2f 	bl	20640 <printk>
   1cbe2:	4040      	eors	r0, r0
   1cbe4:	f380 8811 	msr	BASEPRI, r0
   1cbe8:	f04f 0003 	mov.w	r0, #3
   1cbec:	df02      	svc	2
}
   1cbee:	2000      	movs	r0, #0
   1cbf0:	b002      	add	sp, #8
   1cbf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cbf6:	bf00      	nop
   1cbf8:	0001c6a5 	.word	0x0001c6a5
   1cbfc:	0001b3ad 	.word	0x0001b3ad
   1cc00:	00027c44 	.word	0x00027c44
   1cc04:	00027188 	.word	0x00027188
   1cc08:	00026ecc 	.word	0x00026ecc

0001cc0c <lll_slave_prepare>:
{
   1cc0c:	b530      	push	{r4, r5, lr}
   1cc0e:	b083      	sub	sp, #12
	struct lll_conn *lll = p->param;
   1cc10:	68c4      	ldr	r4, [r0, #12]
{
   1cc12:	4605      	mov	r5, r0
	err = lll_hfclock_on();
   1cc14:	f7fe fc18 	bl	1b448 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1cc18:	b108      	cbz	r0, 1cc1e <lll_slave_prepare+0x12>
   1cc1a:	3044      	adds	r0, #68	; 0x44
   1cc1c:	d128      	bne.n	1cc70 <lll_slave_prepare+0x64>
	elapsed = p->lazy + 1;
   1cc1e:	892b      	ldrh	r3, [r5, #8]
	    lll->slave.window_widening_periodic_us * elapsed;
   1cc20:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	    lll->slave.window_widening_max_us) {
   1cc22:	e9d4 200b 	ldrd	r2, r0, [r4, #44]	; 0x2c
	elapsed = p->lazy + 1;
   1cc26:	3301      	adds	r3, #1
   1cc28:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   1cc2a:	fb01 0103 	mla	r1, r1, r3, r0
	lll->latency_prepare += elapsed;
   1cc2e:	8ae0      	ldrh	r0, [r4, #22]
		lll->slave.window_widening_prepare_us =
   1cc30:	428a      	cmp	r2, r1
   1cc32:	bf28      	it	cs
   1cc34:	460a      	movcs	r2, r1
	lll->latency_prepare += elapsed;
   1cc36:	4403      	add	r3, r0
		lll->slave.window_widening_prepare_us =
   1cc38:	6322      	str	r2, [r4, #48]	; 0x30
	lll->latency_prepare += elapsed;
   1cc3a:	82e3      	strh	r3, [r4, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1cc3c:	4a13      	ldr	r2, [pc, #76]	; (1cc8c <lll_slave_prepare+0x80>)
   1cc3e:	4914      	ldr	r1, [pc, #80]	; (1cc90 <lll_slave_prepare+0x84>)
   1cc40:	4814      	ldr	r0, [pc, #80]	; (1cc94 <lll_slave_prepare+0x88>)
   1cc42:	9500      	str	r5, [sp, #0]
   1cc44:	2300      	movs	r3, #0
   1cc46:	f7fe fa0b 	bl	1b060 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1cc4a:	b108      	cbz	r0, 1cc50 <lll_slave_prepare+0x44>
   1cc4c:	3044      	adds	r0, #68	; 0x44
   1cc4e:	d101      	bne.n	1cc54 <lll_slave_prepare+0x48>
}
   1cc50:	b003      	add	sp, #12
   1cc52:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1cc54:	4a10      	ldr	r2, [pc, #64]	; (1cc98 <lll_slave_prepare+0x8c>)
   1cc56:	4911      	ldr	r1, [pc, #68]	; (1cc9c <lll_slave_prepare+0x90>)
   1cc58:	4811      	ldr	r0, [pc, #68]	; (1cca0 <lll_slave_prepare+0x94>)
   1cc5a:	235b      	movs	r3, #91	; 0x5b
   1cc5c:	f003 fcf0 	bl	20640 <printk>
   1cc60:	4040      	eors	r0, r0
   1cc62:	f380 8811 	msr	BASEPRI, r0
   1cc66:	f04f 0003 	mov.w	r0, #3
   1cc6a:	df02      	svc	2
}
   1cc6c:	b003      	add	sp, #12
   1cc6e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1cc70:	4a09      	ldr	r2, [pc, #36]	; (1cc98 <lll_slave_prepare+0x8c>)
   1cc72:	490a      	ldr	r1, [pc, #40]	; (1cc9c <lll_slave_prepare+0x90>)
   1cc74:	480a      	ldr	r0, [pc, #40]	; (1cca0 <lll_slave_prepare+0x94>)
   1cc76:	2348      	movs	r3, #72	; 0x48
   1cc78:	f003 fce2 	bl	20640 <printk>
   1cc7c:	4040      	eors	r0, r0
   1cc7e:	f380 8811 	msr	BASEPRI, r0
   1cc82:	f04f 0003 	mov.w	r0, #3
   1cc86:	df02      	svc	2
   1cc88:	e7c9      	b.n	1cc1e <lll_slave_prepare+0x12>
   1cc8a:	bf00      	nop
   1cc8c:	0001ca65 	.word	0x0001ca65
   1cc90:	0001c411 	.word	0x0001c411
   1cc94:	0001b235 	.word	0x0001b235
   1cc98:	00027c44 	.word	0x00027c44
   1cc9c:	00027b28 	.word	0x00027b28
   1cca0:	00026ecc 	.word	0x00026ecc

0001cca4 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *prepare_param)
{
   1cca4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_conn *lll = prepare_param->param;
   1cca6:	68c4      	ldr	r4, [r0, #12]
{
   1cca8:	b085      	sub	sp, #20
   1ccaa:	4605      	mov	r5, r0
	uint32_t remainder;

	DEBUG_RADIO_START_M(1);

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1ccac:	f7ff fb9c 	bl	1c3e8 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1ccb0:	8ae1      	ldrh	r1, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1ccb2:	8b66      	ldrh	r6, [r4, #26]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1ccb4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1ccb8:	1e48      	subs	r0, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1ccba:	4431      	add	r1, r6
	lll->latency_prepare = 0;
   1ccbc:	2200      	movs	r2, #0
	lll->latency_event = lll->latency_prepare - 1;
   1ccbe:	b280      	uxth	r0, r0
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1ccc0:	8361      	strh	r1, [r4, #26]
	if (lll->data_chan_sel) {
   1ccc2:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   1ccc4:	82e2      	strh	r2, [r4, #22]
	lll->latency_event = lll->latency_prepare - 1;
   1ccc6:	8320      	strh	r0, [r4, #24]
	if (lll->data_chan_sel) {
   1ccc8:	f104 021c 	add.w	r2, r4, #28
   1cccc:	d561      	bpl.n	1cd92 <prepare_cb+0xee>
	event_counter = lll->event_counter + lll->latency_event;
   1ccce:	4430      	add	r0, r6
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1ccd0:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   1ccd2:	b280      	uxth	r0, r0
   1ccd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ccd8:	f7fc fe72 	bl	199c0 <lll_chan_sel_2>
   1ccdc:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1ccde:	a903      	add	r1, sp, #12
   1cce0:	4620      	mov	r0, r4
   1cce2:	f7ff fc8b 	bl	1c5fc <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   1cce6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   1ccea:	9803      	ldr	r0, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   1ccec:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1ccf0:	7801      	ldrb	r1, [r0, #0]
	pdu_data_tx->sn = lll->sn;
   1ccf2:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1ccf6:	009b      	lsls	r3, r3, #2
   1ccf8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1ccfc:	f021 020c 	bic.w	r2, r1, #12
   1cd00:	4313      	orrs	r3, r2
   1cd02:	7003      	strb	r3, [r0, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   1cd04:	f000 fab0 	bl	1d268 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1cd08:	2000      	movs	r0, #0
   1cd0a:	f000 faff 	bl	1d30c <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   1cd0e:	f104 0008 	add.w	r0, r4, #8
   1cd12:	f000 fb19 	bl	1d348 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   1cd16:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1cd18:	7ba2      	ldrb	r2, [r4, #14]
			     ((uint32_t)lll->crc_init[0])));
   1cd1a:	7b21      	ldrb	r1, [r4, #12]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1cd1c:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1cd1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1cd22:	4319      	orrs	r1, r3
   1cd24:	f240 605b 	movw	r0, #1627	; 0x65b
   1cd28:	f000 fbd4 	bl	1d4d4 <radio_crc_configure>
	lll_chan_set(data_chan_use);
   1cd2c:	4630      	mov	r0, r6
   1cd2e:	f7fe faa5 	bl	1b27c <lll_chan_set>

	/* setup the radio tx packet buffer */
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1cd32:	9903      	ldr	r1, [sp, #12]
   1cd34:	4620      	mov	r0, r4
   1cd36:	f7ff fc35 	bl	1c5a4 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   1cd3a:	4621      	mov	r1, r4
   1cd3c:	4825      	ldr	r0, [pc, #148]	; (1cdd4 <prepare_cb+0x130>)
   1cd3e:	f000 fa73 	bl	1d228 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1cd42:	2096      	movs	r0, #150	; 0x96
   1cd44:	f000 fc7c 	bl	1d640 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   1cd48:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1cd4c:	f000 0007 	and.w	r0, r0, #7
   1cd50:	f000 fbde 	bl	1d510 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = prepare_param->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   1cd54:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   1cd56:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1cd58:	4638      	mov	r0, r7
   1cd5a:	f7fe fa6f 	bl	1b23c <lll_evt_offset_get>
   1cd5e:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = prepare_param->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   1cd60:	686a      	ldr	r2, [r5, #4]
   1cd62:	f106 0109 	add.w	r1, r6, #9
   1cd66:	2001      	movs	r0, #1
   1cd68:	f000 fc76 	bl	1d658 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   1cd6c:	f000 fd6e 	bl	1d84c <radio_tmr_end_capture>
#endif /* !CONFIG_BT_CTLR_GPIO_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1cd70:	7c21      	ldrb	r1, [r4, #16]
   1cd72:	3105      	adds	r1, #5
   1cd74:	4632      	mov	r2, r6
   1cd76:	4638      	mov	r0, r7
   1cd78:	b2c9      	uxtb	r1, r1
   1cd7a:	f7fe fa6d 	bl	1b258 <lll_preempt_calc>
   1cd7e:	b1a8      	cbz	r0, 1cdac <prepare_cb+0x108>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1cd80:	4815      	ldr	r0, [pc, #84]	; (1cdd8 <prepare_cb+0x134>)
   1cd82:	4621      	mov	r1, r4
   1cd84:	f000 fa50 	bl	1d228 <radio_isr_set>
		radio_disable();
   1cd88:	f000 fb62 	bl	1d450 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   1cd8c:	2000      	movs	r0, #0
   1cd8e:	b005      	add	sp, #20
   1cd90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1cd92:	f003 063f 	and.w	r6, r3, #63	; 0x3f
   1cd96:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1cd9a:	9600      	str	r6, [sp, #0]
   1cd9c:	4613      	mov	r3, r2
   1cd9e:	4602      	mov	r2, r0
   1cda0:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1cda4:	f7fc fdd0 	bl	19948 <lll_chan_sel_1>
   1cda8:	4606      	mov	r6, r0
   1cdaa:	e798      	b.n	1ccde <prepare_cb+0x3a>
		ret = lll_prepare_done(lll);
   1cdac:	4620      	mov	r0, r4
   1cdae:	f7fe f9e3 	bl	1b178 <lll_prepare_done>
		LL_ASSERT(!ret);
   1cdb2:	2800      	cmp	r0, #0
   1cdb4:	d0ea      	beq.n	1cd8c <prepare_cb+0xe8>
   1cdb6:	4a09      	ldr	r2, [pc, #36]	; (1cddc <prepare_cb+0x138>)
   1cdb8:	4909      	ldr	r1, [pc, #36]	; (1cde0 <prepare_cb+0x13c>)
   1cdba:	480a      	ldr	r0, [pc, #40]	; (1cde4 <prepare_cb+0x140>)
   1cdbc:	23d3      	movs	r3, #211	; 0xd3
   1cdbe:	f003 fc3f 	bl	20640 <printk>
   1cdc2:	4040      	eors	r0, r0
   1cdc4:	f380 8811 	msr	BASEPRI, r0
   1cdc8:	f04f 0003 	mov.w	r0, #3
   1cdcc:	df02      	svc	2
}
   1cdce:	2000      	movs	r0, #0
   1cdd0:	b005      	add	sp, #20
   1cdd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cdd4:	0001c4ed 	.word	0x0001c4ed
   1cdd8:	0001b3ad 	.word	0x0001b3ad
   1cddc:	00027ca4 	.word	0x00027ca4
   1cde0:	00027188 	.word	0x00027188
   1cde4:	00026ecc 	.word	0x00026ecc

0001cde8 <lll_master_prepare>:
{
   1cde8:	b530      	push	{r4, r5, lr}
   1cdea:	b083      	sub	sp, #12
	struct lll_conn *lll = p->param;
   1cdec:	68c5      	ldr	r5, [r0, #12]
{
   1cdee:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1cdf0:	f7fe fb2a 	bl	1b448 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1cdf4:	b108      	cbz	r0, 1cdfa <lll_master_prepare+0x12>
   1cdf6:	3044      	adds	r0, #68	; 0x44
   1cdf8:	d11e      	bne.n	1ce38 <lll_master_prepare+0x50>
	elapsed = p->lazy + 1;
   1cdfa:	8923      	ldrh	r3, [r4, #8]
	lll->latency_prepare += elapsed;
   1cdfc:	8ae8      	ldrh	r0, [r5, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1cdfe:	4a15      	ldr	r2, [pc, #84]	; (1ce54 <lll_master_prepare+0x6c>)
   1ce00:	4915      	ldr	r1, [pc, #84]	; (1ce58 <lll_master_prepare+0x70>)
	elapsed = p->lazy + 1;
   1ce02:	3301      	adds	r3, #1
	lll->latency_prepare += elapsed;
   1ce04:	4403      	add	r3, r0
   1ce06:	82eb      	strh	r3, [r5, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1ce08:	4814      	ldr	r0, [pc, #80]	; (1ce5c <lll_master_prepare+0x74>)
   1ce0a:	9400      	str	r4, [sp, #0]
   1ce0c:	2300      	movs	r3, #0
   1ce0e:	f7fe f927 	bl	1b060 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1ce12:	b108      	cbz	r0, 1ce18 <lll_master_prepare+0x30>
   1ce14:	3044      	adds	r0, #68	; 0x44
   1ce16:	d101      	bne.n	1ce1c <lll_master_prepare+0x34>
}
   1ce18:	b003      	add	sp, #12
   1ce1a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1ce1c:	4a10      	ldr	r2, [pc, #64]	; (1ce60 <lll_master_prepare+0x78>)
   1ce1e:	4911      	ldr	r1, [pc, #68]	; (1ce64 <lll_master_prepare+0x7c>)
   1ce20:	4811      	ldr	r0, [pc, #68]	; (1ce68 <lll_master_prepare+0x80>)
   1ce22:	2352      	movs	r3, #82	; 0x52
   1ce24:	f003 fc0c 	bl	20640 <printk>
   1ce28:	4040      	eors	r0, r0
   1ce2a:	f380 8811 	msr	BASEPRI, r0
   1ce2e:	f04f 0003 	mov.w	r0, #3
   1ce32:	df02      	svc	2
}
   1ce34:	b003      	add	sp, #12
   1ce36:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1ce38:	4a09      	ldr	r2, [pc, #36]	; (1ce60 <lll_master_prepare+0x78>)
   1ce3a:	490a      	ldr	r1, [pc, #40]	; (1ce64 <lll_master_prepare+0x7c>)
   1ce3c:	480a      	ldr	r0, [pc, #40]	; (1ce68 <lll_master_prepare+0x80>)
   1ce3e:	2348      	movs	r3, #72	; 0x48
   1ce40:	f003 fbfe 	bl	20640 <printk>
   1ce44:	4040      	eors	r0, r0
   1ce46:	f380 8811 	msr	BASEPRI, r0
   1ce4a:	f04f 0003 	mov.w	r0, #3
   1ce4e:	df02      	svc	2
   1ce50:	e7d3      	b.n	1cdfa <lll_master_prepare+0x12>
   1ce52:	bf00      	nop
   1ce54:	0001cca5 	.word	0x0001cca5
   1ce58:	0001c411 	.word	0x0001c411
   1ce5c:	0001b235 	.word	0x0001b235
   1ce60:	00027ca4 	.word	0x00027ca4
   1ce64:	00027b28 	.word	0x00027b28
   1ce68:	00026ecc 	.word	0x00026ecc

0001ce6c <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1ce6c:	4b05      	ldr	r3, [pc, #20]	; (1ce84 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1ce6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ce72:	2100      	movs	r1, #0
   1ce74:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1ce78:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1ce7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1ce80:	4770      	bx	lr
   1ce82:	bf00      	nop
   1ce84:	4000b000 	.word	0x4000b000

0001ce88 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1ce88:	4b05      	ldr	r3, [pc, #20]	; (1cea0 <cntr_start+0x18>)
   1ce8a:	7818      	ldrb	r0, [r3, #0]
   1ce8c:	1c42      	adds	r2, r0, #1
   1ce8e:	701a      	strb	r2, [r3, #0]
   1ce90:	b918      	cbnz	r0, 1ce9a <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1ce92:	4b04      	ldr	r3, [pc, #16]	; (1cea4 <cntr_start+0x1c>)
   1ce94:	2201      	movs	r2, #1
   1ce96:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1ce98:	4770      	bx	lr
		return 1;
   1ce9a:	2001      	movs	r0, #1
}
   1ce9c:	4770      	bx	lr
   1ce9e:	bf00      	nop
   1cea0:	20005391 	.word	0x20005391
   1cea4:	4000b000 	.word	0x4000b000

0001cea8 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1cea8:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1ceaa:	4c0d      	ldr	r4, [pc, #52]	; (1cee0 <cntr_stop+0x38>)
   1ceac:	7820      	ldrb	r0, [r4, #0]
   1ceae:	b148      	cbz	r0, 1cec4 <cntr_stop+0x1c>

	if (--_refcount) {
   1ceb0:	3801      	subs	r0, #1
   1ceb2:	b2c0      	uxtb	r0, r0
   1ceb4:	7020      	strb	r0, [r4, #0]
   1ceb6:	b918      	cbnz	r0, 1cec0 <cntr_stop+0x18>
   1ceb8:	4b0a      	ldr	r3, [pc, #40]	; (1cee4 <cntr_stop+0x3c>)
   1ceba:	2201      	movs	r2, #1
   1cebc:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1cebe:	bd10      	pop	{r4, pc}
		return 1;
   1cec0:	2001      	movs	r0, #1
}
   1cec2:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1cec4:	4a08      	ldr	r2, [pc, #32]	; (1cee8 <cntr_stop+0x40>)
   1cec6:	4909      	ldr	r1, [pc, #36]	; (1ceec <cntr_stop+0x44>)
   1cec8:	4809      	ldr	r0, [pc, #36]	; (1cef0 <cntr_stop+0x48>)
   1ceca:	232e      	movs	r3, #46	; 0x2e
   1cecc:	f003 fbb8 	bl	20640 <printk>
   1ced0:	4040      	eors	r0, r0
   1ced2:	f380 8811 	msr	BASEPRI, r0
   1ced6:	f04f 0003 	mov.w	r0, #3
   1ceda:	df02      	svc	2
   1cedc:	7820      	ldrb	r0, [r4, #0]
   1cede:	e7e7      	b.n	1ceb0 <cntr_stop+0x8>
   1cee0:	20005391 	.word	0x20005391
   1cee4:	4000b004 	.word	0x4000b004
   1cee8:	00027d08 	.word	0x00027d08
   1ceec:	00027d54 	.word	0x00027d54
   1cef0:	00026ecc 	.word	0x00026ecc

0001cef4 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1cef4:	4b01      	ldr	r3, [pc, #4]	; (1cefc <cntr_cnt_get+0x8>)
   1cef6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1cefa:	4770      	bx	lr
   1cefc:	4000b000 	.word	0x4000b000

0001cf00 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1cf00:	4b02      	ldr	r3, [pc, #8]	; (1cf0c <cntr_cmp_set+0xc>)
   1cf02:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1cf06:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1cf0a:	4770      	bx	lr
   1cf0c:	4000b000 	.word	0x4000b000

0001cf10 <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1cf10:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1cf12:	4b12      	ldr	r3, [pc, #72]	; (1cf5c <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cf14:	4d12      	ldr	r5, [pc, #72]	; (1cf60 <do_ecb+0x50>)
   1cf16:	2601      	movs	r6, #1
   1cf18:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   1cf1a:	2100      	movs	r1, #0
   1cf1c:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1cf1e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1cf22:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1cf26:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1cf2a:	601c      	str	r4, [r3, #0]
}
   1cf2c:	e005      	b.n	1cf3a <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1cf2e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1cf32:	b932      	cbnz	r2, 1cf42 <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1cf34:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1cf38:	b11a      	cbz	r2, 1cf42 <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1cf3a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1cf3e:	2a00      	cmp	r2, #0
   1cf40:	d0f5      	beq.n	1cf2e <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cf42:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1cf44:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1cf48:	2a00      	cmp	r2, #0
   1cf4a:	d1e7      	bne.n	1cf1c <do_ecb+0xc>
   1cf4c:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   1cf50:	2f00      	cmp	r7, #0
   1cf52:	d0e3      	beq.n	1cf1c <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   1cf54:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   1cf56:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1cf5a:	4770      	bx	lr
   1cf5c:	4000e000 	.word	0x4000e000
   1cf60:	4000e004 	.word	0x4000e004

0001cf64 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1cf64:	b570      	push	{r4, r5, r6, lr}
   1cf66:	b08c      	sub	sp, #48	; 0x30
   1cf68:	460e      	mov	r6, r1
   1cf6a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1cf6c:	4601      	mov	r1, r0
   1cf6e:	2210      	movs	r2, #16
   1cf70:	4668      	mov	r0, sp
{
   1cf72:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1cf74:	f7f3 fcb4 	bl	108e0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1cf78:	2210      	movs	r2, #16
   1cf7a:	eb0d 0002 	add.w	r0, sp, r2
   1cf7e:	4631      	mov	r1, r6
   1cf80:	f7f3 fcae 	bl	108e0 <mem_rcopy>

	do_ecb(&ecb);
   1cf84:	4668      	mov	r0, sp
   1cf86:	f7ff ffc3 	bl	1cf10 <do_ecb>

	if (cipher_text_le) {
   1cf8a:	b125      	cbz	r5, 1cf96 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1cf8c:	4628      	mov	r0, r5
   1cf8e:	2210      	movs	r2, #16
   1cf90:	a908      	add	r1, sp, #32
   1cf92:	f7f3 fca5 	bl	108e0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1cf96:	b124      	cbz	r4, 1cfa2 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1cf98:	4620      	mov	r0, r4
   1cf9a:	2210      	movs	r2, #16
   1cf9c:	a908      	add	r1, sp, #32
   1cf9e:	f005 fbbf 	bl	22720 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1cfa2:	b00c      	add	sp, #48	; 0x30
   1cfa4:	bd70      	pop	{r4, r5, r6, pc}
   1cfa6:	bf00      	nop

0001cfa8 <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   1cfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1cfac:	f8df 824c 	ldr.w	r8, [pc, #588]	; 1d1fc <sw_switch.isra.0+0x254>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cfb0:	f8df a23c 	ldr.w	sl, [pc, #572]	; 1d1f0 <sw_switch.isra.0+0x248>
   1cfb4:	f998 7000 	ldrsb.w	r7, [r8]
   1cfb8:	4b88      	ldr	r3, [pc, #544]	; (1d1dc <sw_switch.isra.0+0x234>)
   1cfba:	f898 6000 	ldrb.w	r6, [r8]
   1cfbe:	f8ca 3560 	str.w	r3, [sl, #1376]	; 0x560
   1cfc2:	f107 030b 	add.w	r3, r7, #11
   1cfc6:	b2db      	uxtb	r3, r3
   1cfc8:	00db      	lsls	r3, r3, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1cfca:	4c85      	ldr	r4, [pc, #532]	; (1d1e0 <sw_switch.isra.0+0x238>)
   1cfcc:	f8df e230 	ldr.w	lr, [pc, #560]	; 1d200 <sw_switch.isra.0+0x258>
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1cfd0:	ea4f 09c6 	mov.w	r9, r6, lsl #3
   1cfd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cfd8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1cfdc:	f109 4c80 	add.w	ip, r9, #1073741824	; 0x40000000
   1cfe0:	f50c 3cf8 	add.w	ip, ip, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1cfe4:	eb04 0b86 	add.w	fp, r4, r6, lsl #2
   1cfe8:	f107 0508 	add.w	r5, r7, #8
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cfec:	f107 0410 	add.w	r4, r7, #16
   1cff0:	f8ca c564 	str.w	ip, [sl, #1380]	; 0x564

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cff4:	44ce      	add	lr, r9
   1cff6:	f8c3 b510 	str.w	fp, [r3, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   1cffa:	b2e4      	uxtb	r4, r4
   1cffc:	b2ed      	uxtb	r5, r5
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1cffe:	fa0f fc86 	sxth.w	ip, r6
   1d002:	b1e8      	cbz	r0, 1d040 <sw_switch.isra.0+0x98>
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1d004:	2a02      	cmp	r2, #2
   1d006:	ea4f 0a86 	mov.w	sl, r6, lsl #2
   1d00a:	d04d      	beq.n	1d0a8 <sw_switch.isra.0+0x100>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
   1d00c:	f24a 593c 	movw	r9, #42300	; 0xa53c
   1d010:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   1d014:	2a04      	cmp	r2, #4
   1d016:	bf18      	it	ne
   1d018:	4681      	movne	r9, r0
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1d01a:	2902      	cmp	r1, #2
   1d01c:	f000 80b1 	beq.w	1d182 <sw_switch.isra.0+0x1da>
   1d020:	2904      	cmp	r1, #4
   1d022:	f040 80a4 	bne.w	1d16e <sw_switch.isra.0+0x1c6>
   1d026:	486f      	ldr	r0, [pc, #444]	; (1d1e4 <sw_switch.isra.0+0x23c>)
   1d028:	f509 49eb 	add.w	r9, r9, #30080	; 0x7580
   1d02c:	f109 0914 	add.w	r9, r9, #20
   1d030:	fba0 0909 	umull	r0, r9, r0, r9
   1d034:	ea4f 1999 	mov.w	r9, r9, lsr #6

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d038:	486b      	ldr	r0, [pc, #428]	; (1d1e8 <sw_switch.isra.0+0x240>)
   1d03a:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
		uint8_t ppi_dis =
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
			    sw_tifs_toggle);

		if (phy_curr & BIT(2)) {
   1d03e:	e040      	b.n	1d0c2 <sw_switch.isra.0+0x11a>
   1d040:	00e4      	lsls	r4, r4, #3
   1d042:	00ed      	lsls	r5, r5, #3
   1d044:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1d048:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   1d04c:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1d050:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
   1d054:	4a65      	ldr	r2, [pc, #404]	; (1d1ec <sw_switch.isra.0+0x244>)
   1d056:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	} else {
		/* RX */
		delay = HAL_RADIO_NS2US_CEIL(
   1d05a:	f04f 0928 	mov.w	r9, #40	; 0x28
static inline void hal_radio_sw_switch_coded_config_clear(uint8_t ppi_en,
	uint8_t ppi_dis, uint8_t cc_reg, uint8_t group_index)
{
	/* Invalidate PPI used when RXing on LE Coded PHY. */
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
		ppi_en) = 0;
   1d05e:	f8c4 0510 	str.w	r0, [r4, #1296]	; 0x510
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(
		ppi_en) = 0;
   1d062:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514

	/* Wire the Group task disable to the default EVENTS_COMPARE. */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		ppi_dis) =
   1d066:	f8c5 b510 	str.w	fp, [r5, #1296]	; 0x510
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_reg);
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		ppi_dis) =
   1d06a:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1d06e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   1d072:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1d076:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   1d07a:	3601      	adds	r6, #1
		SW_SWITCH_TIMER->CC[cc]) {
   1d07c:	f8dc 3540 	ldr.w	r3, [ip, #1344]	; 0x540
	if (delay <
   1d080:	454b      	cmp	r3, r9
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1d082:	bf8a      	itet	hi
   1d084:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1d088:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1d08a:	eba3 0309 	subhi.w	r3, r3, r9
   1d08e:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
    p_reg->CHENSET = mask;
   1d092:	4b57      	ldr	r3, [pc, #348]	; (1d1f0 <sw_switch.isra.0+0x248>)
	sw_tifs_toggle &= 1;
   1d094:	f006 0601 	and.w	r6, r6, #1
   1d098:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1d09c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1d0a0:	f888 6000 	strb.w	r6, [r8]
}
   1d0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0a8:	2902      	cmp	r1, #2
   1d0aa:	f000 8090 	beq.w	1d1ce <sw_switch.isra.0+0x226>
   1d0ae:	2904      	cmp	r1, #4
   1d0b0:	f000 808a 	beq.w	1d1c8 <sw_switch.isra.0+0x220>
   1d0b4:	f04f 0931 	mov.w	r9, #49	; 0x31
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d0b8:	484b      	ldr	r0, [pc, #300]	; (1d1e8 <sw_switch.isra.0+0x240>)
   1d0ba:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		if (phy_curr & BIT(2)) {
   1d0be:	074b      	lsls	r3, r1, #29
   1d0c0:	d56b      	bpl.n	1d19a <sw_switch.isra.0+0x1f2>
	switch (phy) {
   1d0c2:	2a02      	cmp	r2, #2
   1d0c4:	d07d      	beq.n	1d1c2 <sw_switch.isra.0+0x21a>
   1d0c6:	f24a 10b8 	movw	r0, #41400	; 0xa1b8
   1d0ca:	f24a 7330 	movw	r3, #42800	; 0xa730
   1d0ce:	2a04      	cmp	r2, #4
   1d0d0:	bf14      	ite	ne
   1d0d2:	4602      	movne	r2, r0
   1d0d4:	461a      	moveq	r2, r3
			    SW_SWITCH_TIMER_S2_EVTS_COMP(sw_tifs_toggle);
   1d0d6:	3702      	adds	r7, #2
   1d0d8:	b2ff      	uxtb	r7, r7
   1d0da:	00b8      	lsls	r0, r7, #2
				SW_SWITCH_TIMER->CC[cc];
   1d0dc:	f8df b124 	ldr.w	fp, [pc, #292]	; 1d204 <sw_switch.isra.0+0x25c>
   1d0e0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1d0e4:	f506 73a8 	add.w	r3, r6, #336	; 0x150
   1d0e8:	f500 4010 	add.w	r0, r0, #36864	; 0x9000
   1d0ec:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
			SW_SWITCH_TIMER->CC[cc_s2] =
   1d0f0:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
#if defined(CONFIG_BT_CTLR_PHY_CODED)
	case BIT(2):
		if (flags & 0x01) {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S8_NS;
		} else {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_NS;
   1d0f4:	f246 0b18 	movw	fp, #24600	; 0x6018
   1d0f8:	f242 43b8 	movw	r3, #9400	; 0x24b8
   1d0fc:	2904      	cmp	r1, #4
   1d0fe:	bf14      	ite	ne
   1d100:	4619      	movne	r1, r3
   1d102:	4659      	moveq	r1, fp
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1d104:	440a      	add	r2, r1
   1d106:	4937      	ldr	r1, [pc, #220]	; (1d1e4 <sw_switch.isra.0+0x23c>)
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   1d108:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1d10c:	fba1 1202 	umull	r1, r2, r1, r2
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   1d110:	ebb3 1f92 	cmp.w	r3, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   1d114:	bf88      	it	hi
   1d116:	f8d0 3540 	ldrhi.w	r3, [r0, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1d11a:	ea4f 1192 	mov.w	r1, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   1d11e:	bf8c      	ite	hi
   1d120:	1a5b      	subhi	r3, r3, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   1d122:	2301      	movls	r3, #1
   1d124:	00e4      	lsls	r4, r4, #3
   1d126:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
   1d12a:	00ed      	lsls	r5, r5, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   1d12c:	4b2c      	ldr	r3, [pc, #176]	; (1d1e0 <sw_switch.isra.0+0x238>)
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   1d12e:	4931      	ldr	r1, [pc, #196]	; (1d1f4 <sw_switch.isra.0+0x24c>)
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1d130:	4a2f      	ldr	r2, [pc, #188]	; (1d1f0 <sw_switch.isra.0+0x248>)
   1d132:	4831      	ldr	r0, [pc, #196]	; (1d1f8 <sw_switch.isra.0+0x250>)
   1d134:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1d138:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1d13c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   1d140:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   1d144:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1d148:	4b27      	ldr	r3, [pc, #156]	; (1d1e8 <sw_switch.isra.0+0x240>)
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   1d14a:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   1d14e:	4451      	add	r1, sl
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1d150:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1d154:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	    ppi_dis)	=
   1d158:	f8c5 7510 	str.w	r7, [r5, #1296]	; 0x510
	    ppi_dis) =
   1d15c:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1d160:	f8c2 05a0 	str.w	r0, [r2, #1440]	; 0x5a0
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
   1d164:	f8c2 15a4 	str.w	r1, [r2, #1444]	; 0x5a4
   1d168:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1d16c:	e77f      	b.n	1d06e <sw_switch.isra.0+0xc6>
   1d16e:	481d      	ldr	r0, [pc, #116]	; (1d1e4 <sw_switch.isra.0+0x23c>)
   1d170:	f509 591a 	add.w	r9, r9, #9856	; 0x2680
   1d174:	f109 092c 	add.w	r9, r9, #44	; 0x2c
   1d178:	fba0 0909 	umull	r0, r9, r0, r9
   1d17c:	ea4f 1999 	mov.w	r9, r9, lsr #6
   1d180:	e79a      	b.n	1d0b8 <sw_switch.isra.0+0x110>
		delay = HAL_RADIO_NS2US_ROUND(
   1d182:	4a18      	ldr	r2, [pc, #96]	; (1d1e4 <sw_switch.isra.0+0x23c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d184:	4918      	ldr	r1, [pc, #96]	; (1d1e8 <sw_switch.isra.0+0x240>)
   1d186:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   1d18a:	f509 59ab 	add.w	r9, r9, #5472	; 0x1560
   1d18e:	f109 091c 	add.w	r9, r9, #28
   1d192:	fba2 3909 	umull	r3, r9, r2, r9
   1d196:	ea4f 1999 	mov.w	r9, r9, lsr #6
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
   1d19a:	00e4      	lsls	r4, r4, #3
   1d19c:	00ed      	lsls	r5, r5, #3
   1d19e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1d1a2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   1d1a6:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1d1aa:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		ppi_en) = 0;
   1d1ae:	2300      	movs	r3, #0
   1d1b0:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
		ppi_en) = 0;
   1d1b4:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
		ppi_dis) =
   1d1b8:	f8c5 b510 	str.w	fp, [r5, #1296]	; 0x510
		ppi_dis) =
   1d1bc:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
			group_index);
}
   1d1c0:	e755      	b.n	1d06e <sw_switch.isra.0+0xc6>
	switch (phy) {
   1d1c2:	f649 6234 	movw	r2, #40500	; 0x9e34
   1d1c6:	e786      	b.n	1d0d6 <sw_switch.isra.0+0x12e>
	switch (phy) {
   1d1c8:	f04f 0946 	mov.w	r9, #70	; 0x46
   1d1cc:	e734      	b.n	1d038 <sw_switch.isra.0+0x90>
   1d1ce:	4a06      	ldr	r2, [pc, #24]	; (1d1e8 <sw_switch.isra.0+0x240>)
   1d1d0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
   1d1d4:	f04f 092d 	mov.w	r9, #45	; 0x2d
   1d1d8:	e7df      	b.n	1d19a <sw_switch.isra.0+0x1f2>
   1d1da:	bf00      	nop
   1d1dc:	4000110c 	.word	0x4000110c
   1d1e0:	40009140 	.word	0x40009140
   1d1e4:	10624dd3 	.word	0x10624dd3
   1d1e8:	40001000 	.word	0x40001000
   1d1ec:	40001004 	.word	0x40001004
   1d1f0:	4001f000 	.word	0x4001f000
   1d1f4:	40009040 	.word	0x40009040
   1d1f8:	40001150 	.word	0x40001150
   1d1fc:	20005392 	.word	0x20005392
   1d200:	4001f004 	.word	0x4001f004
   1d204:	40009000 	.word	0x40009000

0001d208 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1d208:	4b04      	ldr	r3, [pc, #16]	; (1d21c <isr_radio+0x14>)
   1d20a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1d20e:	b123      	cbz	r3, 1d21a <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1d210:	4a03      	ldr	r2, [pc, #12]	; (1d220 <isr_radio+0x18>)
   1d212:	4b04      	ldr	r3, [pc, #16]	; (1d224 <isr_radio+0x1c>)
   1d214:	6810      	ldr	r0, [r2, #0]
   1d216:	681b      	ldr	r3, [r3, #0]
   1d218:	4718      	bx	r3
}
   1d21a:	4770      	bx	lr
   1d21c:	40001000 	.word	0x40001000
   1d220:	20004270 	.word	0x20004270
   1d224:	2000426c 	.word	0x2000426c

0001d228 <radio_isr_set>:
{
   1d228:	b538      	push	{r3, r4, r5, lr}
   1d22a:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1d22c:	2001      	movs	r0, #1
{
   1d22e:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1d230:	f7e9 fb2c 	bl	688c <arch_irq_disable>
	isr_cb_param = param;
   1d234:	4a08      	ldr	r2, [pc, #32]	; (1d258 <radio_isr_set+0x30>)
	isr_cb = cb;
   1d236:	4809      	ldr	r0, [pc, #36]	; (1d25c <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d238:	4b09      	ldr	r3, [pc, #36]	; (1d260 <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d23a:	490a      	ldr	r1, [pc, #40]	; (1d264 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1d23c:	6015      	str	r5, [r2, #0]
   1d23e:	2510      	movs	r5, #16
   1d240:	2202      	movs	r2, #2
	isr_cb = cb;
   1d242:	6004      	str	r4, [r0, #0]
   1d244:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   1d248:	2001      	movs	r0, #1
   1d24a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1d24e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1d252:	f7e9 bb0b 	b.w	686c <arch_irq_enable>
   1d256:	bf00      	nop
   1d258:	20004270 	.word	0x20004270
   1d25c:	2000426c 	.word	0x2000426c
   1d260:	e000e100 	.word	0xe000e100
   1d264:	40001000 	.word	0x40001000

0001d268 <radio_reset>:
{
   1d268:	b538      	push	{r3, r4, r5, lr}
	irq_disable(RADIO_IRQn);
   1d26a:	2001      	movs	r0, #1
   1d26c:	f7e9 fb0e 	bl	688c <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1d270:	4b0b      	ldr	r3, [pc, #44]	; (1d2a0 <radio_reset+0x38>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1d272:	490c      	ldr	r1, [pc, #48]	; (1d2a4 <radio_reset+0x3c>)
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_1_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_1_INCLUDE;
#else
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1d274:	4a0c      	ldr	r2, [pc, #48]	; (1d2a8 <radio_reset+0x40>)
   1d276:	4c0d      	ldr	r4, [pc, #52]	; (1d2ac <radio_reset+0x44>)
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE |
		HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1d278:	480d      	ldr	r0, [pc, #52]	; (1d2b0 <radio_reset+0x48>)
   1d27a:	2500      	movs	r5, #0
   1d27c:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   1d280:	2501      	movs	r5, #1
   1d282:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   1d286:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   1d288:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1d28c:	f023 0301 	bic.w	r3, r3, #1
   1d290:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1d294:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1d296:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1d29a:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   1d29e:	bd38      	pop	{r3, r4, r5, pc}
   1d2a0:	40001000 	.word	0x40001000
   1d2a4:	40001774 	.word	0x40001774
   1d2a8:	4001f000 	.word	0x4001f000
   1d2ac:	00010900 	.word	0x00010900
   1d2b0:	00021200 	.word	0x00021200

0001d2b4 <radio_phy_set>:
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1d2b4:	4a13      	ldr	r2, [pc, #76]	; (1d304 <radio_phy_set+0x50>)
	switch (phy) {
   1d2b6:	2802      	cmp	r0, #2
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1d2b8:	6813      	ldr	r3, [r2, #0]
	switch (phy) {
   1d2ba:	d00f      	beq.n	1d2dc <radio_phy_set+0x28>
   1d2bc:	2804      	cmp	r0, #4
   1d2be:	d012      	beq.n	1d2e6 <radio_phy_set+0x32>
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1d2c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1d2c4:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1d2c6:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1d2c8:	4b0f      	ldr	r3, [pc, #60]	; (1d308 <radio_phy_set+0x54>)
   1d2ca:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1d2ce:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1d2d2:	f042 0201 	orr.w	r2, r2, #1
   1d2d6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1d2da:	4770      	bx	lr
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1d2dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1d2e0:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1d2e2:	2104      	movs	r1, #4
		break;
   1d2e4:	e7f0      	b.n	1d2c8 <radio_phy_set+0x14>
		*(volatile uint32_t *)0x4000173c |= 0x80000000;
   1d2e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d2ea:	6013      	str	r3, [r2, #0]
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   1d2ec:	6813      	ldr	r3, [r2, #0]
   1d2ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
		if (flags & 0x01) {
   1d2f2:	f001 0101 	and.w	r1, r1, #1
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   1d2f6:	f043 035c 	orr.w	r3, r3, #92	; 0x5c
		if (flags & 0x01) {
   1d2fa:	f1c1 0106 	rsb	r1, r1, #6
		*(volatile uint32_t *)0x4000173c =
   1d2fe:	6013      	str	r3, [r2, #0]
		break;
   1d300:	e7e2      	b.n	1d2c8 <radio_phy_set+0x14>
   1d302:	bf00      	nop
   1d304:	4000173c 	.word	0x4000173c
   1d308:	40001000 	.word	0x40001000

0001d30c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1d30c:	4b01      	ldr	r3, [pc, #4]	; (1d314 <radio_tx_power_set+0x8>)
   1d30e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1d312:	4770      	bx	lr
   1d314:	40001000 	.word	0x40001000

0001d318 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1d318:	4b01      	ldr	r3, [pc, #4]	; (1d320 <radio_freq_chan_set+0x8>)
   1d31a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1d31e:	4770      	bx	lr
   1d320:	40001000 	.word	0x40001000

0001d324 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1d324:	4b07      	ldr	r3, [pc, #28]	; (1d344 <radio_whiten_iv_set+0x20>)
   1d326:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1d32a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1d32e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1d332:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1d336:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1d33a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1d33e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1d342:	4770      	bx	lr
   1d344:	40001000 	.word	0x40001000

0001d348 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1d348:	4a0b      	ldr	r2, [pc, #44]	; (1d378 <radio_aa_set+0x30>)
   1d34a:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1d34c:	2301      	movs	r3, #1
{
   1d34e:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   1d350:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1d354:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1d358:	78c3      	ldrb	r3, [r0, #3]
   1d35a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1d35e:	7843      	ldrb	r3, [r0, #1]
   1d360:	7884      	ldrb	r4, [r0, #2]
   1d362:	7801      	ldrb	r1, [r0, #0]
   1d364:	041b      	lsls	r3, r3, #16
   1d366:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   1d36a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1d36e:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1d370:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1d374:	4770      	bx	lr
   1d376:	bf00      	nop
   1d378:	40001000 	.word	0x40001000

0001d37c <radio_pkt_configure>:
	phy = (flags >> 1) & 0x07; /* phy */
   1d37c:	f3c2 0342 	ubfx	r3, r2, #1, #3
	switch (phy) {
   1d380:	2b02      	cmp	r3, #2
{
   1d382:	b410      	push	{r4}
	uint8_t dc = flags & 0x01; /* Adv or Data channel */
   1d384:	f002 0201 	and.w	r2, r2, #1
	switch (phy) {
   1d388:	d024      	beq.n	1d3d4 <radio_pkt_configure+0x58>
		extra |= (3UL << RADIO_PCNF0_TERMLEN_Pos) &
   1d38a:	2b04      	cmp	r3, #4
   1d38c:	bf14      	ite	ne
   1d38e:	2400      	movne	r4, #0
   1d390:	f04f 44c7 	moveq.w	r4, #1669332992	; 0x63800000
	if (dc) {
   1d394:	b10a      	cbz	r2, 1d39a <radio_pkt_configure+0x1e>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1d396:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1d39a:	f1c0 0308 	rsb	r3, r0, #8
   1d39e:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1d3a0:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1d3a4:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1d3a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1d3aa:	4a0d      	ldr	r2, [pc, #52]	; (1d3e0 <radio_pkt_configure+0x64>)
}
   1d3ac:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   1d3ae:	4303      	orrs	r3, r0
   1d3b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1d3b4:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1d3b8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1d3bc:	4809      	ldr	r0, [pc, #36]	; (1d3e4 <radio_pkt_configure+0x68>)
   1d3be:	4018      	ands	r0, r3
   1d3c0:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1d3c4:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1d3c8:	4319      	orrs	r1, r3
   1d3ca:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1d3ce:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1d3d2:	4770      	bx	lr
	switch (phy) {
   1d3d4:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	if (dc) {
   1d3d8:	2a00      	cmp	r2, #0
   1d3da:	d0de      	beq.n	1d39a <radio_pkt_configure+0x1e>
   1d3dc:	e7db      	b.n	1d396 <radio_pkt_configure+0x1a>
   1d3de:	bf00      	nop
   1d3e0:	40001000 	.word	0x40001000
   1d3e4:	fef80000 	.word	0xfef80000

0001d3e8 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1d3e8:	4b01      	ldr	r3, [pc, #4]	; (1d3f0 <radio_pkt_rx_set+0x8>)
   1d3ea:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1d3ee:	4770      	bx	lr
   1d3f0:	40001000 	.word	0x40001000

0001d3f4 <radio_pkt_tx_set>:
   1d3f4:	4b01      	ldr	r3, [pc, #4]	; (1d3fc <radio_pkt_tx_set+0x8>)
   1d3f6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1d3fa:	4770      	bx	lr
   1d3fc:	40001000 	.word	0x40001000

0001d400 <radio_tx_ready_delay_get>:
	switch (phy) {
   1d400:	2802      	cmp	r0, #2
   1d402:	d004      	beq.n	1d40e <radio_tx_ready_delay_get+0xe>
   1d404:	2804      	cmp	r0, #4
			return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_S8_US;
   1d406:	bf14      	ite	ne
   1d408:	2029      	movne	r0, #41	; 0x29
   1d40a:	202a      	moveq	r0, #42	; 0x2a
   1d40c:	4770      	bx	lr
	switch (phy) {
   1d40e:	2028      	movs	r0, #40	; 0x28
}
   1d410:	4770      	bx	lr
   1d412:	bf00      	nop

0001d414 <radio_tx_chain_delay_get>:
}
   1d414:	2001      	movs	r0, #1
   1d416:	4770      	bx	lr

0001d418 <radio_rx_ready_delay_get>:
}
   1d418:	2029      	movs	r0, #41	; 0x29
   1d41a:	4770      	bx	lr

0001d41c <radio_rx_chain_delay_get>:
	switch (phy) {
   1d41c:	2802      	cmp	r0, #2
   1d41e:	d009      	beq.n	1d434 <radio_rx_chain_delay_get+0x18>
   1d420:	2804      	cmp	r0, #4
   1d422:	d105      	bne.n	1d430 <radio_rx_chain_delay_get+0x14>
		if (flags & 0x01) {
   1d424:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
   1d428:	bf14      	ite	ne
   1d42a:	201e      	movne	r0, #30
   1d42c:	2019      	moveq	r0, #25
   1d42e:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   1d430:	200a      	movs	r0, #10
}
   1d432:	4770      	bx	lr
	switch (phy) {
   1d434:	2005      	movs	r0, #5
   1d436:	4770      	bx	lr

0001d438 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d438:	4b01      	ldr	r3, [pc, #4]	; (1d440 <radio_rx_enable+0x8>)
   1d43a:	2201      	movs	r2, #1
   1d43c:	601a      	str	r2, [r3, #0]
}
   1d43e:	4770      	bx	lr
   1d440:	40001004 	.word	0x40001004

0001d444 <radio_tx_enable>:
   1d444:	4b01      	ldr	r3, [pc, #4]	; (1d44c <radio_tx_enable+0x8>)
   1d446:	2201      	movs	r2, #1
   1d448:	601a      	str	r2, [r3, #0]
}
   1d44a:	4770      	bx	lr
   1d44c:	40001000 	.word	0x40001000

0001d450 <radio_disable>:
{
   1d450:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   1d452:	4a08      	ldr	r2, [pc, #32]	; (1d474 <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   1d454:	4808      	ldr	r0, [pc, #32]	; (1d478 <radio_disable+0x28>)
   1d456:	4909      	ldr	r1, [pc, #36]	; (1d47c <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1d458:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1d45a:	f44f 6590 	mov.w	r5, #1152	; 0x480
   1d45e:	2400      	movs	r4, #0
   1d460:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1d464:	6053      	str	r3, [r2, #4]
   1d466:	60d3      	str	r3, [r2, #12]
   1d468:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   1d46c:	bc30      	pop	{r4, r5}
   1d46e:	600b      	str	r3, [r1, #0]
   1d470:	4770      	bx	lr
   1d472:	bf00      	nop
   1d474:	4001f000 	.word	0x4001f000
   1d478:	40001000 	.word	0x40001000
   1d47c:	40001010 	.word	0x40001010

0001d480 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1d480:	4b04      	ldr	r3, [pc, #16]	; (1d494 <radio_status_reset+0x14>)
   1d482:	2200      	movs	r2, #0
   1d484:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1d488:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1d48c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1d490:	4770      	bx	lr
   1d492:	bf00      	nop
   1d494:	40001000 	.word	0x40001000

0001d498 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1d498:	4b03      	ldr	r3, [pc, #12]	; (1d4a8 <radio_is_ready+0x10>)
   1d49a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1d49e:	3800      	subs	r0, #0
   1d4a0:	bf18      	it	ne
   1d4a2:	2001      	movne	r0, #1
   1d4a4:	4770      	bx	lr
   1d4a6:	bf00      	nop
   1d4a8:	40001000 	.word	0x40001000

0001d4ac <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1d4ac:	4b03      	ldr	r3, [pc, #12]	; (1d4bc <radio_is_done+0x10>)
   1d4ae:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1d4b2:	3800      	subs	r0, #0
   1d4b4:	bf18      	it	ne
   1d4b6:	2001      	movne	r0, #1
   1d4b8:	4770      	bx	lr
   1d4ba:	bf00      	nop
   1d4bc:	40001000 	.word	0x40001000

0001d4c0 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1d4c0:	4b03      	ldr	r3, [pc, #12]	; (1d4d0 <radio_is_idle+0x10>)
   1d4c2:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1d4c6:	fab0 f080 	clz	r0, r0
   1d4ca:	0940      	lsrs	r0, r0, #5
   1d4cc:	4770      	bx	lr
   1d4ce:	bf00      	nop
   1d4d0:	40001000 	.word	0x40001000

0001d4d4 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1d4d4:	4b04      	ldr	r3, [pc, #16]	; (1d4e8 <radio_crc_configure+0x14>)
   1d4d6:	f240 1203 	movw	r2, #259	; 0x103
   1d4da:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1d4de:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1d4e2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1d4e6:	4770      	bx	lr
   1d4e8:	40001000 	.word	0x40001000

0001d4ec <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1d4ec:	4b03      	ldr	r3, [pc, #12]	; (1d4fc <radio_crc_is_valid+0x10>)
   1d4ee:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1d4f2:	3800      	subs	r0, #0
   1d4f4:	bf18      	it	ne
   1d4f6:	2001      	movne	r0, #1
   1d4f8:	4770      	bx	lr
   1d4fa:	bf00      	nop
   1d4fc:	40001000 	.word	0x40001000

0001d500 <radio_pkt_empty_get>:
}
   1d500:	4800      	ldr	r0, [pc, #0]	; (1d504 <radio_pkt_empty_get+0x4>)
   1d502:	4770      	bx	lr
   1d504:	20004164 	.word	0x20004164

0001d508 <radio_pkt_scratch_get>:
}
   1d508:	4800      	ldr	r0, [pc, #0]	; (1d50c <radio_pkt_scratch_get+0x4>)
   1d50a:	4770      	bx	lr
   1d50c:	20004168 	.word	0x20004168

0001d510 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1d510:	4b05      	ldr	r3, [pc, #20]	; (1d528 <radio_switch_complete_and_rx+0x18>)
{
   1d512:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1d514:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1d516:	2403      	movs	r4, #3
{
   1d518:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1d51a:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1d51e:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d520:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   1d522:	f7ff bd41 	b.w	1cfa8 <sw_switch.isra.0>
   1d526:	bf00      	nop
   1d528:	40001000 	.word	0x40001000

0001d52c <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1d52c:	4b04      	ldr	r3, [pc, #16]	; (1d540 <radio_switch_complete_and_tx+0x14>)
{
   1d52e:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1d530:	2403      	movs	r4, #3
{
   1d532:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1d534:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1d538:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d53a:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1d53c:	f7ff bd34 	b.w	1cfa8 <sw_switch.isra.0>
   1d540:	40001000 	.word	0x40001000

0001d544 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1d544:	4904      	ldr	r1, [pc, #16]	; (1d558 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1d546:	4b05      	ldr	r3, [pc, #20]	; (1d55c <radio_switch_complete_and_disable+0x18>)
   1d548:	2003      	movs	r0, #3
   1d54a:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1d54e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1d552:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d556:	4770      	bx	lr
   1d558:	40001000 	.word	0x40001000
   1d55c:	4001f000 	.word	0x4001f000

0001d560 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1d560:	4a03      	ldr	r2, [pc, #12]	; (1d570 <radio_rssi_measure+0x10>)
   1d562:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1d566:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1d56a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1d56e:	4770      	bx	lr
   1d570:	40001000 	.word	0x40001000

0001d574 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1d574:	4b01      	ldr	r3, [pc, #4]	; (1d57c <radio_rssi_get+0x8>)
   1d576:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1d57a:	4770      	bx	lr
   1d57c:	40001000 	.word	0x40001000

0001d580 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1d580:	4b02      	ldr	r3, [pc, #8]	; (1d58c <radio_rssi_status_reset+0xc>)
   1d582:	2200      	movs	r2, #0
   1d584:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1d588:	4770      	bx	lr
   1d58a:	bf00      	nop
   1d58c:	40001000 	.word	0x40001000

0001d590 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1d590:	4b03      	ldr	r3, [pc, #12]	; (1d5a0 <radio_rssi_is_ready+0x10>)
   1d592:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1d596:	3800      	subs	r0, #0
   1d598:	bf18      	it	ne
   1d59a:	2001      	movne	r0, #1
   1d59c:	4770      	bx	lr
   1d59e:	bf00      	nop
   1d5a0:	40001000 	.word	0x40001000

0001d5a4 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1d5a4:	b430      	push	{r4, r5}
   1d5a6:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1d5a8:	00a3      	lsls	r3, r4, #2
   1d5aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1d5b2:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1d5b4:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1d5b8:	3401      	adds	r4, #1
   1d5ba:	8895      	ldrh	r5, [r2, #4]
   1d5bc:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1d5c0:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1d5c2:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1d5c6:	d1ef      	bne.n	1d5a8 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1d5c8:	4b03      	ldr	r3, [pc, #12]	; (1d5d8 <radio_filter_configure+0x34>)
   1d5ca:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   1d5ce:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1d5d0:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1d5d4:	4770      	bx	lr
   1d5d6:	bf00      	nop
   1d5d8:	40001000 	.word	0x40001000

0001d5dc <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1d5dc:	4a03      	ldr	r2, [pc, #12]	; (1d5ec <radio_filter_disable+0x10>)
   1d5de:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1d5e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1d5e6:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1d5ea:	4770      	bx	lr
   1d5ec:	40001000 	.word	0x40001000

0001d5f0 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1d5f0:	4b02      	ldr	r3, [pc, #8]	; (1d5fc <radio_filter_status_reset+0xc>)
   1d5f2:	2200      	movs	r2, #0
   1d5f4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1d5f8:	4770      	bx	lr
   1d5fa:	bf00      	nop
   1d5fc:	40001000 	.word	0x40001000

0001d600 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1d600:	4b03      	ldr	r3, [pc, #12]	; (1d610 <radio_filter_has_match+0x10>)
   1d602:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1d606:	3800      	subs	r0, #0
   1d608:	bf18      	it	ne
   1d60a:	2001      	movne	r0, #1
   1d60c:	4770      	bx	lr
   1d60e:	bf00      	nop
   1d610:	40001000 	.word	0x40001000

0001d614 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1d614:	4b01      	ldr	r3, [pc, #4]	; (1d61c <radio_filter_match_get+0x8>)
   1d616:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1d61a:	4770      	bx	lr
   1d61c:	40001000 	.word	0x40001000

0001d620 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1d620:	4904      	ldr	r1, [pc, #16]	; (1d634 <radio_tmr_status_reset+0x14>)
   1d622:	4b05      	ldr	r3, [pc, #20]	; (1d638 <radio_tmr_status_reset+0x18>)
   1d624:	4a05      	ldr	r2, [pc, #20]	; (1d63c <radio_tmr_status_reset+0x1c>)
   1d626:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1d62a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1d62e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1d632:	4770      	bx	lr
   1d634:	4000b000 	.word	0x4000b000
   1d638:	4001f000 	.word	0x4001f000
   1d63c:	0e742060 	.word	0x0e742060

0001d640 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1d640:	4b03      	ldr	r3, [pc, #12]	; (1d650 <radio_tmr_tifs_set+0x10>)
   1d642:	4a04      	ldr	r2, [pc, #16]	; (1d654 <radio_tmr_tifs_set+0x14>)
   1d644:	781b      	ldrb	r3, [r3, #0]
   1d646:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1d64a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d64e:	4770      	bx	lr
   1d650:	20005392 	.word	0x20005392
   1d654:	40009000 	.word	0x40009000

0001d658 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1d658:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1d65a:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1d65e:	4d2a      	ldr	r5, [pc, #168]	; (1d708 <radio_tmr_start+0xb0>)
   1d660:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1d664:	42ab      	cmp	r3, r5
{
   1d666:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1d668:	d906      	bls.n	1d678 <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   1d66a:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1d66e:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   1d672:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   1d676:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d678:	4d24      	ldr	r5, [pc, #144]	; (1d70c <radio_tmr_start+0xb4>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1d67a:	4b25      	ldr	r3, [pc, #148]	; (1d710 <radio_tmr_start+0xb8>)
	remainder /= 1000000UL;
   1d67c:	4825      	ldr	r0, [pc, #148]	; (1d714 <radio_tmr_start+0xbc>)
   1d67e:	2601      	movs	r6, #1
   1d680:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   1d682:	2600      	movs	r6, #0
   1d684:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   1d688:	4d23      	ldr	r5, [pc, #140]	; (1d718 <radio_tmr_start+0xc0>)
	remainder /= 1000000UL;
   1d68a:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1d68e:	2604      	movs	r6, #4
   1d690:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1d694:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1d696:	2602      	movs	r6, #2
   1d698:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d69c:	4a1f      	ldr	r2, [pc, #124]	; (1d71c <radio_tmr_start+0xc4>)
    p_reg->CC[cc_channel] = cc_value;
   1d69e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1d6a2:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1d6a6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1d6aa:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   1d6ae:	491c      	ldr	r1, [pc, #112]	; (1d720 <radio_tmr_start+0xc8>)
   1d6b0:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538
    p_reg->CHENSET = mask;
   1d6b4:	2120      	movs	r1, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d6b6:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1d6ba:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1d6be:	b1e4      	cbz	r4, 1d6fa <radio_tmr_start+0xa2>
    p_reg->CHENCLR = mask;
   1d6c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1d6c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1d6c8:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1d6cc:	4a13      	ldr	r2, [pc, #76]	; (1d71c <radio_tmr_start+0xc4>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1d6ce:	4b15      	ldr	r3, [pc, #84]	; (1d724 <radio_tmr_start+0xcc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d6d0:	4915      	ldr	r1, [pc, #84]	; (1d728 <radio_tmr_start+0xd0>)
   1d6d2:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   1d6d6:	2500      	movs	r5, #0
   1d6d8:	2401      	movs	r4, #1
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d6da:	4e14      	ldr	r6, [pc, #80]	; (1d72c <radio_tmr_start+0xd4>)
   1d6dc:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1d6de:	2704      	movs	r7, #4
	SW_SWITCH_TIMER->MODE = 0;
   1d6e0:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1d6e4:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1d6e8:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
   1d6ec:	601c      	str	r4, [r3, #0]
   1d6ee:	f8c2 6548 	str.w	r6, [r2, #1352]	; 0x548
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1d6f2:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d6f4:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
   1d6f8:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1d6fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1d6fe:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1d702:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   1d706:	e7e1      	b.n	1d6cc <radio_tmr_start+0x74>
   1d708:	7ff0bdbf 	.word	0x7ff0bdbf
   1d70c:	4000800c 	.word	0x4000800c
   1d710:	40008000 	.word	0x40008000
   1d714:	431bde83 	.word	0x431bde83
   1d718:	4000b000 	.word	0x4000b000
   1d71c:	4001f000 	.word	0x4001f000
   1d720:	4000b148 	.word	0x4000b148
   1d724:	40009000 	.word	0x40009000
   1d728:	4000900c 	.word	0x4000900c
   1d72c:	4000110c 	.word	0x4000110c

0001d730 <radio_tmr_start_tick>:

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1d730:	b4f0      	push	{r4, r5, r6, r7}
    p_reg->CC[cc_channel] = cc_value;
   1d732:	4c16      	ldr	r4, [pc, #88]	; (1d78c <radio_tmr_start_tick+0x5c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d734:	4f16      	ldr	r7, [pc, #88]	; (1d790 <radio_tmr_start_tick+0x60>)
   1d736:	4e17      	ldr	r6, [pc, #92]	; (1d794 <radio_tmr_start_tick+0x64>)
    p_reg->CC[ch] = cc_val;
   1d738:	4d17      	ldr	r5, [pc, #92]	; (1d798 <radio_tmr_start_tick+0x68>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d73a:	4b18      	ldr	r3, [pc, #96]	; (1d79c <radio_tmr_start_tick+0x6c>)
   1d73c:	2201      	movs	r2, #1
   1d73e:	603a      	str	r2, [r7, #0]
   1d740:	6032      	str	r2, [r6, #0]
    p_reg->CC[cc_channel] = cc_value;
   1d742:	f8c4 2540 	str.w	r2, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1d746:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    p_reg->CC[ch] = cc_val;
   1d74a:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1d74e:	f8c5 2344 	str.w	r2, [r5, #836]	; 0x344
   1d752:	4913      	ldr	r1, [pc, #76]	; (1d7a0 <radio_tmr_start_tick+0x70>)
   1d754:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    p_reg->CHENSET = mask;
   1d758:	2220      	movs	r2, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d75a:	f8c3 453c 	str.w	r4, [r3, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1d75e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1d762:	b158      	cbz	r0, 1d77c <radio_tmr_start_tick+0x4c>
    p_reg->CHENCLR = mask;
   1d764:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1d768:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1d76c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1d770:	4a0a      	ldr	r2, [pc, #40]	; (1d79c <radio_tmr_start_tick+0x6c>)
	last_pdu_end_us = 0U;
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1d772:	2001      	movs	r0, #1
   1d774:	bcf0      	pop	{r4, r5, r6, r7}
   1d776:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   1d77a:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1d77c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1d780:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1d784:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1d788:	e7f2      	b.n	1d770 <radio_tmr_start_tick+0x40>
   1d78a:	bf00      	nop
   1d78c:	40008000 	.word	0x40008000
   1d790:	40008004 	.word	0x40008004
   1d794:	4000800c 	.word	0x4000800c
   1d798:	4000b000 	.word	0x4000b000
   1d79c:	4001f000 	.word	0x4001f000
   1d7a0:	4000b148 	.word	0x4000b148

0001d7a4 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1d7a4:	4b01      	ldr	r3, [pc, #4]	; (1d7ac <radio_tmr_start_get+0x8>)
   1d7a6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1d7aa:	4770      	bx	lr
   1d7ac:	4000b000 	.word	0x4000b000

0001d7b0 <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   1d7b0:	b410      	push	{r4}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d7b2:	4805      	ldr	r0, [pc, #20]	; (1d7c8 <radio_tmr_stop+0x18>)
   1d7b4:	4c05      	ldr	r4, [pc, #20]	; (1d7cc <radio_tmr_stop+0x1c>)
   1d7b6:	4906      	ldr	r1, [pc, #24]	; (1d7d0 <radio_tmr_stop+0x20>)
   1d7b8:	4a06      	ldr	r2, [pc, #24]	; (1d7d4 <radio_tmr_stop+0x24>)
   1d7ba:	2301      	movs	r3, #1
   1d7bc:	6023      	str	r3, [r4, #0]
   1d7be:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d7c0:	bc10      	pop	{r4}
   1d7c2:	600b      	str	r3, [r1, #0]
   1d7c4:	6013      	str	r3, [r2, #0]
   1d7c6:	4770      	bx	lr
   1d7c8:	40008010 	.word	0x40008010
   1d7cc:	40008004 	.word	0x40008004
   1d7d0:	40009004 	.word	0x40009004
   1d7d4:	40009010 	.word	0x40009010

0001d7d8 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1d7d8:	4904      	ldr	r1, [pc, #16]	; (1d7ec <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1d7da:	4b05      	ldr	r3, [pc, #20]	; (1d7f0 <radio_tmr_hcto_configure+0x18>)
   1d7dc:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1d7e0:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1d7e4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1d7e8:	4770      	bx	lr
   1d7ea:	bf00      	nop
   1d7ec:	40008000 	.word	0x40008000
   1d7f0:	4001f000 	.word	0x4001f000

0001d7f4 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d7f4:	4b05      	ldr	r3, [pc, #20]	; (1d80c <radio_tmr_aa_capture+0x18>)
   1d7f6:	4806      	ldr	r0, [pc, #24]	; (1d810 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d7f8:	4906      	ldr	r1, [pc, #24]	; (1d814 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   1d7fa:	4a07      	ldr	r2, [pc, #28]	; (1d818 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d7fc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d800:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1d804:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1d808:	4770      	bx	lr
   1d80a:	bf00      	nop
   1d80c:	4001f000 	.word	0x4001f000
   1d810:	40001100 	.word	0x40001100
   1d814:	40008040 	.word	0x40008040
   1d818:	04000040 	.word	0x04000040

0001d81c <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1d81c:	4b01      	ldr	r3, [pc, #4]	; (1d824 <radio_tmr_aa_get+0x8>)
   1d81e:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1d822:	4770      	bx	lr
   1d824:	40008000 	.word	0x40008000

0001d828 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1d828:	4b01      	ldr	r3, [pc, #4]	; (1d830 <radio_tmr_aa_save+0x8>)
   1d82a:	6018      	str	r0, [r3, #0]
}
   1d82c:	4770      	bx	lr
   1d82e:	bf00      	nop
   1d830:	20004274 	.word	0x20004274

0001d834 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1d834:	4b01      	ldr	r3, [pc, #4]	; (1d83c <radio_tmr_aa_restore+0x8>)
}
   1d836:	6818      	ldr	r0, [r3, #0]
   1d838:	4770      	bx	lr
   1d83a:	bf00      	nop
   1d83c:	20004274 	.word	0x20004274

0001d840 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1d840:	4b01      	ldr	r3, [pc, #4]	; (1d848 <radio_tmr_ready_get+0x8>)
   1d842:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1d846:	4770      	bx	lr
   1d848:	40008000 	.word	0x40008000

0001d84c <radio_tmr_end_capture>:
   1d84c:	4b02      	ldr	r3, [pc, #8]	; (1d858 <radio_tmr_end_capture+0xc>)
   1d84e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1d852:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1d856:	4770      	bx	lr
   1d858:	4001f000 	.word	0x4001f000

0001d85c <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1d85c:	4b01      	ldr	r3, [pc, #4]	; (1d864 <radio_tmr_end_get+0x8>)
   1d85e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1d862:	4770      	bx	lr
   1d864:	40008000 	.word	0x40008000

0001d868 <radio_tmr_tifs_base_get>:
   1d868:	4b01      	ldr	r3, [pc, #4]	; (1d870 <radio_tmr_tifs_base_get+0x8>)
   1d86a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1d86e:	4770      	bx	lr
   1d870:	40008000 	.word	0x40008000

0001d874 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   1d874:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d876:	4b1e      	ldr	r3, [pc, #120]	; (1d8f0 <radio_ccm_rx_pkt_set+0x7c>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d878:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d87a:	2500      	movs	r5, #0
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   1d87c:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d87e:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
{
   1d882:	4606      	mov	r6, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d884:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
   1d888:	d02f      	beq.n	1d8ea <radio_ccm_rx_pkt_set+0x76>
   1d88a:	2904      	cmp	r1, #4
   1d88c:	d12b      	bne.n	1d8e6 <radio_ccm_rx_pkt_set+0x72>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d88e:	4819      	ldr	r0, [pc, #100]	; (1d8f4 <radio_ccm_rx_pkt_set+0x80>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d890:	4919      	ldr	r1, [pc, #100]	; (1d8f8 <radio_ccm_rx_pkt_set+0x84>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d892:	4c1a      	ldr	r4, [pc, #104]	; (1d8fc <radio_ccm_rx_pkt_set+0x88>)
	case BIT(2):
		mode |= (CCM_MODE_DATARATE_125Kbps <<
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;

		NRF_CCM->RATEOVERRIDE =
   1d894:	2503      	movs	r5, #3
   1d896:	f8c3 551c 	str.w	r5, [r3, #1308]	; 0x51c
   1d89a:	f8c0 4578 	str.w	r4, [r0, #1400]	; 0x578
    p_reg->CHENSET = mask;
   1d89e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d8a2:	f8c0 157c 	str.w	r1, [r0, #1404]	; 0x57c
		mode |= (CCM_MODE_DATARATE_125Kbps <<
   1d8a6:	4916      	ldr	r1, [pc, #88]	; (1d900 <radio_ccm_rx_pkt_set+0x8c>)
    p_reg->CHENSET = mask;
   1d8a8:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504

	NRF_CCM->MAXPACKETSIZE = max_len;
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   1d8ac:	4b10      	ldr	r3, [pc, #64]	; (1d8f0 <radio_ccm_rx_pkt_set+0x7c>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1d8ae:	4815      	ldr	r0, [pc, #84]	; (1d904 <radio_ccm_rx_pkt_set+0x90>)
   1d8b0:	4c10      	ldr	r4, [pc, #64]	; (1d8f4 <radio_ccm_rx_pkt_set+0x80>)
	NRF_CCM->MODE = mode;
   1d8b2:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1d8b6:	4f14      	ldr	r7, [pc, #80]	; (1d908 <radio_ccm_rx_pkt_set+0x94>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1d8b8:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
	NRF_CCM->SHORTS = 0;
   1d8bc:	2100      	movs	r1, #0
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1d8be:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   1d8c2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1d8c6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d8ca:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1d8cc:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   1d8d0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1d8d4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1d8d8:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1d8dc:	f8c4 5504 	str.w	r5, [r4, #1284]	; 0x504
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1d8e0:	bcf0      	pop	{r4, r5, r6, r7}
   1d8e2:	601a      	str	r2, [r3, #0]
   1d8e4:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1d8e6:	4909      	ldr	r1, [pc, #36]	; (1d90c <radio_ccm_rx_pkt_set+0x98>)
   1d8e8:	e7e0      	b.n	1d8ac <radio_ccm_rx_pkt_set+0x38>
	switch (phy) {
   1d8ea:	4909      	ldr	r1, [pc, #36]	; (1d910 <radio_ccm_rx_pkt_set+0x9c>)
   1d8ec:	e7de      	b.n	1d8ac <radio_ccm_rx_pkt_set+0x38>
   1d8ee:	bf00      	nop
   1d8f0:	4000f000 	.word	0x4000f000
   1d8f4:	4001f000 	.word	0x4001f000
   1d8f8:	4000f00c 	.word	0x4000f00c
   1d8fc:	40001150 	.word	0x40001150
   1d900:	01020001 	.word	0x01020001
   1d904:	20004168 	.word	0x20004168
   1d908:	20004058 	.word	0x20004058
   1d90c:	01000001 	.word	0x01000001
   1d910:	01010001 	.word	0x01010001

0001d914 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   1d914:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d916:	4b10      	ldr	r3, [pc, #64]	; (1d958 <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1d918:	4d10      	ldr	r5, [pc, #64]	; (1d95c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   1d91a:	4e11      	ldr	r6, [pc, #68]	; (1d960 <radio_ccm_tx_pkt_set+0x4c>)
{
   1d91c:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d91e:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d920:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d922:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d926:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   1d92a:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1d92e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1d932:	4e0c      	ldr	r6, [pc, #48]	; (1d964 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1d934:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1d938:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1d93a:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1d93e:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1d940:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1d944:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1d948:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1d94c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1d950:	601c      	str	r4, [r3, #0]
}
   1d952:	bc70      	pop	{r4, r5, r6}
   1d954:	4770      	bx	lr
   1d956:	bf00      	nop
   1d958:	4000f000 	.word	0x4000f000
   1d95c:	20004168 	.word	0x20004168
   1d960:	01010000 	.word	0x01010000
   1d964:	20004058 	.word	0x20004058

0001d968 <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d968:	4a0e      	ldr	r2, [pc, #56]	; (1d9a4 <radio_ccm_is_done+0x3c>)
   1d96a:	2302      	movs	r3, #2
   1d96c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1d970:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1d974:	b933      	cbnz	r3, 1d984 <radio_ccm_is_done+0x1c>
		__WFE();
   1d976:	bf20      	wfe
		__SEV();
   1d978:	bf40      	sev
		__WFE();
   1d97a:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1d97c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1d980:	2b00      	cmp	r3, #0
   1d982:	d0f8      	beq.n	1d976 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1d984:	4b07      	ldr	r3, [pc, #28]	; (1d9a4 <radio_ccm_is_done+0x3c>)
   1d986:	4a08      	ldr	r2, [pc, #32]	; (1d9a8 <radio_ccm_is_done+0x40>)
   1d988:	2002      	movs	r0, #2
   1d98a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d98e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1d992:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1d996:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1d99a:	fab0 f080 	clz	r0, r0
   1d99e:	0940      	lsrs	r0, r0, #5
   1d9a0:	4770      	bx	lr
   1d9a2:	bf00      	nop
   1d9a4:	4000f000 	.word	0x4000f000
   1d9a8:	e000e100 	.word	0xe000e100

0001d9ac <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1d9ac:	4b03      	ldr	r3, [pc, #12]	; (1d9bc <radio_ccm_mic_is_valid+0x10>)
   1d9ae:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1d9b2:	3800      	subs	r0, #0
   1d9b4:	bf18      	it	ne
   1d9b6:	2001      	movne	r0, #1
   1d9b8:	4770      	bx	lr
   1d9ba:	bf00      	nop
   1d9bc:	4000f000 	.word	0x4000f000

0001d9c0 <radio_ar_configure>:

static uint8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(uint32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1d9c0:	4b15      	ldr	r3, [pc, #84]	; (1da18 <radio_ar_configure+0x58>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1d9c2:	4a16      	ldr	r2, [pc, #88]	; (1da1c <radio_ar_configure+0x5c>)
{
   1d9c4:	b430      	push	{r4, r5}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1d9c6:	2403      	movs	r4, #3
   1d9c8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   1d9cc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1d9d0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1d9d4:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1d9d8:	4d11      	ldr	r5, [pc, #68]	; (1da20 <radio_ar_configure+0x60>)
   1d9da:	4c12      	ldr	r4, [pc, #72]	; (1da24 <radio_ar_configure+0x64>)
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1d9dc:	3801      	subs	r0, #1
   1d9de:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	NRF_AAR->EVENTS_END = 0;
   1d9e2:	2100      	movs	r1, #0
    p_reg->BCC = radio_bcc;
   1d9e4:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1d9e6:	f8c3 5514 	str.w	r5, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1d9ea:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1d9ee:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1d9f2:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1d9f6:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1d9fa:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1d9fe:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1da02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1da06:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1da0a:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
   1da0e:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	radio_bc_configure(64);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1da12:	bc30      	pop	{r4, r5}
   1da14:	4770      	bx	lr
   1da16:	bf00      	nop
   1da18:	4000f000 	.word	0x4000f000
   1da1c:	40001000 	.word	0x40001000
   1da20:	20004054 	.word	0x20004054
   1da24:	4001f000 	.word	0x4001f000

0001da28 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1da28:	4b01      	ldr	r3, [pc, #4]	; (1da30 <radio_ar_match_get+0x8>)
   1da2a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1da2e:	4770      	bx	lr
   1da30:	4000f000 	.word	0x4000f000

0001da34 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1da34:	4903      	ldr	r1, [pc, #12]	; (1da44 <radio_ar_status_reset+0x10>)

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1da36:	4a04      	ldr	r2, [pc, #16]	; (1da48 <radio_ar_status_reset+0x14>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1da38:	2300      	movs	r3, #0
   1da3a:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1da3e:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   1da42:	4770      	bx	lr
   1da44:	40001000 	.word	0x40001000
   1da48:	4000f000 	.word	0x4000f000

0001da4c <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1da4c:	4b08      	ldr	r3, [pc, #32]	; (1da70 <radio_ar_has_match+0x24>)
   1da4e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1da52:	b160      	cbz	r0, 1da6e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1da54:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1da58:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1da5c:	b138      	cbz	r0, 1da6e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1da5e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1da62:	b120      	cbz	r0, 1da6e <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1da64:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1da68:	fab0 f080 	clz	r0, r0
   1da6c:	0940      	lsrs	r0, r0, #5
}
   1da6e:	4770      	bx	lr
   1da70:	40001000 	.word	0x40001000

0001da74 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1da74:	2902      	cmp	r1, #2
{
   1da76:	b510      	push	{r4, lr}
   1da78:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1da7a:	d00b      	beq.n	1da94 <mayfly_enable_cb+0x20>
   1da7c:	4a0a      	ldr	r2, [pc, #40]	; (1daa8 <mayfly_enable_cb+0x34>)
   1da7e:	490b      	ldr	r1, [pc, #44]	; (1daac <mayfly_enable_cb+0x38>)
   1da80:	480b      	ldr	r0, [pc, #44]	; (1dab0 <mayfly_enable_cb+0x3c>)
   1da82:	2322      	movs	r3, #34	; 0x22
   1da84:	f002 fddc 	bl	20640 <printk>
   1da88:	4040      	eors	r0, r0
   1da8a:	f380 8811 	msr	BASEPRI, r0
   1da8e:	f04f 0003 	mov.w	r0, #3
   1da92:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1da94:	200b      	movs	r0, #11
	if (enable) {
   1da96:	b11c      	cbz	r4, 1daa0 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1da98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1da9c:	f7e8 bee6 	b.w	686c <arch_irq_enable>
}
   1daa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1daa4:	f7e8 bef2 	b.w	688c <arch_irq_disable>
   1daa8:	00027d84 	.word	0x00027d84
   1daac:	00027dd4 	.word	0x00027dd4
   1dab0:	00026ecc 	.word	0x00026ecc

0001dab4 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1dab4:	b129      	cbz	r1, 1dac2 <mayfly_is_enabled+0xe>
   1dab6:	3901      	subs	r1, #1
   1dab8:	2901      	cmp	r1, #1
   1daba:	d805      	bhi.n	1dac8 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
#endif /* CONFIG_BT_LL_SW_SPLIT */

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1dabc:	200b      	movs	r0, #11
   1dabe:	f7e8 bef9 	b.w	68b4 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1dac2:	2018      	movs	r0, #24
   1dac4:	f7e8 bef6 	b.w	68b4 <arch_irq_is_enabled>
{
   1dac8:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1daca:	4a07      	ldr	r2, [pc, #28]	; (1dae8 <mayfly_is_enabled+0x34>)
   1dacc:	4907      	ldr	r1, [pc, #28]	; (1daec <mayfly_is_enabled+0x38>)
   1dace:	4808      	ldr	r0, [pc, #32]	; (1daf0 <mayfly_is_enabled+0x3c>)
   1dad0:	233c      	movs	r3, #60	; 0x3c
   1dad2:	f002 fdb5 	bl	20640 <printk>
   1dad6:	4040      	eors	r0, r0
   1dad8:	f380 8811 	msr	BASEPRI, r0
   1dadc:	f04f 0003 	mov.w	r0, #3
   1dae0:	df02      	svc	2
		break;
	}

	return 0;
}
   1dae2:	2000      	movs	r0, #0
   1dae4:	bd08      	pop	{r3, pc}
   1dae6:	bf00      	nop
   1dae8:	00027d84 	.word	0x00027d84
   1daec:	00026f3c 	.word	0x00026f3c
   1daf0:	00026ecc 	.word	0x00026ecc

0001daf4 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1daf4:	4288      	cmp	r0, r1
   1daf6:	d013      	beq.n	1db20 <mayfly_prio_is_equal+0x2c>
	return (caller_id == callee_id) ||
   1daf8:	b928      	cbnz	r0, 1db06 <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   1dafa:	1e48      	subs	r0, r1, #1
   1dafc:	2801      	cmp	r0, #1
   1dafe:	bf8c      	ite	hi
   1db00:	2000      	movhi	r0, #0
   1db02:	2001      	movls	r0, #1
   1db04:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1db06:	2801      	cmp	r0, #1
   1db08:	d106      	bne.n	1db18 <mayfly_prio_is_equal+0x24>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1db0a:	b159      	cbz	r1, 1db24 <mayfly_prio_is_equal+0x30>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1db0c:	f1a1 0002 	sub.w	r0, r1, #2
   1db10:	fab0 f080 	clz	r0, r0
   1db14:	0940      	lsrs	r0, r0, #5
   1db16:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1db18:	2802      	cmp	r0, #2
   1db1a:	d004      	beq.n	1db26 <mayfly_prio_is_equal+0x32>
   1db1c:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1db1e:	4770      	bx	lr
   1db20:	2001      	movs	r0, #1
   1db22:	4770      	bx	lr
#endif
#endif
	       0;
}
   1db24:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1db26:	2901      	cmp	r1, #1
   1db28:	bf8c      	ite	hi
   1db2a:	2000      	movhi	r0, #0
   1db2c:	2001      	movls	r0, #1
   1db2e:	4770      	bx	lr

0001db30 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1db30:	2901      	cmp	r1, #1
{
   1db32:	b508      	push	{r3, lr}
	switch (callee_id) {
   1db34:	d00f      	beq.n	1db56 <mayfly_pend+0x26>
   1db36:	2902      	cmp	r1, #2
   1db38:	d00d      	beq.n	1db56 <mayfly_pend+0x26>
   1db3a:	b191      	cbz	r1, 1db62 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1db3c:	4a0c      	ldr	r2, [pc, #48]	; (1db70 <mayfly_pend+0x40>)
   1db3e:	490d      	ldr	r1, [pc, #52]	; (1db74 <mayfly_pend+0x44>)
   1db40:	480d      	ldr	r0, [pc, #52]	; (1db78 <mayfly_pend+0x48>)
   1db42:	2371      	movs	r3, #113	; 0x71
   1db44:	f002 fd7c 	bl	20640 <printk>
   1db48:	4040      	eors	r0, r0
   1db4a:	f380 8811 	msr	BASEPRI, r0
   1db4e:	f04f 0003 	mov.w	r0, #3
   1db52:	df02      	svc	2
		break;
	}
}
   1db54:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1db56:	4b09      	ldr	r3, [pc, #36]	; (1db7c <mayfly_pend+0x4c>)
   1db58:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1db5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1db60:	bd08      	pop	{r3, pc}
   1db62:	4b06      	ldr	r3, [pc, #24]	; (1db7c <mayfly_pend+0x4c>)
   1db64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1db68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1db6c:	bd08      	pop	{r3, pc}
   1db6e:	bf00      	nop
   1db70:	00027d84 	.word	0x00027d84
   1db74:	00026f3c 	.word	0x00026f3c
   1db78:	00026ecc 	.word	0x00026ecc
   1db7c:	e000e100 	.word	0xe000e100

0001db80 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1db80:	2803      	cmp	r0, #3
{
   1db82:	b510      	push	{r4, lr}
   1db84:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1db86:	d804      	bhi.n	1db92 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1db88:	4b11      	ldr	r3, [pc, #68]	; (1dbd0 <hal_ticker_instance0_caller_id_get+0x50>)
   1db8a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1db8c:	b18c      	cbz	r4, 1dbb2 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1db8e:	4620      	mov	r0, r4
   1db90:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1db92:	4a10      	ldr	r2, [pc, #64]	; (1dbd4 <hal_ticker_instance0_caller_id_get+0x54>)
   1db94:	4910      	ldr	r1, [pc, #64]	; (1dbd8 <hal_ticker_instance0_caller_id_get+0x58>)
   1db96:	4811      	ldr	r0, [pc, #68]	; (1dbdc <hal_ticker_instance0_caller_id_get+0x5c>)
   1db98:	232d      	movs	r3, #45	; 0x2d
   1db9a:	f002 fd51 	bl	20640 <printk>
   1db9e:	4040      	eors	r0, r0
   1dba0:	f380 8811 	msr	BASEPRI, r0
   1dba4:	f04f 0003 	mov.w	r0, #3
   1dba8:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1dbaa:	4b09      	ldr	r3, [pc, #36]	; (1dbd0 <hal_ticker_instance0_caller_id_get+0x50>)
   1dbac:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1dbae:	2c00      	cmp	r4, #0
   1dbb0:	d1ed      	bne.n	1db8e <hal_ticker_instance0_caller_id_get+0xe>
   1dbb2:	4a08      	ldr	r2, [pc, #32]	; (1dbd4 <hal_ticker_instance0_caller_id_get+0x54>)
   1dbb4:	490a      	ldr	r1, [pc, #40]	; (1dbe0 <hal_ticker_instance0_caller_id_get+0x60>)
   1dbb6:	4809      	ldr	r0, [pc, #36]	; (1dbdc <hal_ticker_instance0_caller_id_get+0x5c>)
   1dbb8:	2330      	movs	r3, #48	; 0x30
   1dbba:	f002 fd41 	bl	20640 <printk>
   1dbbe:	4040      	eors	r0, r0
   1dbc0:	f380 8811 	msr	BASEPRI, r0
   1dbc4:	f04f 0003 	mov.w	r0, #3
   1dbc8:	df02      	svc	2
}
   1dbca:	4620      	mov	r0, r4
   1dbcc:	bd10      	pop	{r4, pc}
   1dbce:	bf00      	nop
   1dbd0:	00027e8c 	.word	0x00027e8c
   1dbd4:	00027df8 	.word	0x00027df8
   1dbd8:	00027e48 	.word	0x00027e48
   1dbdc:	00026ecc 	.word	0x00026ecc
   1dbe0:	00027e68 	.word	0x00027e68

0001dbe4 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1dbe4:	3801      	subs	r0, #1
{
   1dbe6:	b510      	push	{r4, lr}
   1dbe8:	461c      	mov	r4, r3
   1dbea:	2804      	cmp	r0, #4
   1dbec:	d855      	bhi.n	1dc9a <hal_ticker_instance0_sched+0xb6>
   1dbee:	e8df f000 	tbb	[pc, r0]
   1dbf2:	1a12      	.short	0x1a12
   1dbf4:	1e16      	.short	0x1e16
   1dbf6:	03          	.byte	0x03
   1dbf7:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1dbf8:	2904      	cmp	r1, #4
   1dbfa:	d01e      	beq.n	1dc3a <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1dbfc:	23be      	movs	r3, #190	; 0xbe
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   1dbfe:	4a28      	ldr	r2, [pc, #160]	; (1dca0 <hal_ticker_instance0_sched+0xbc>)
   1dc00:	4928      	ldr	r1, [pc, #160]	; (1dca4 <hal_ticker_instance0_sched+0xc0>)
   1dc02:	4829      	ldr	r0, [pc, #164]	; (1dca8 <hal_ticker_instance0_sched+0xc4>)
   1dc04:	f002 fd1c 	bl	20640 <printk>
   1dc08:	4040      	eors	r0, r0
   1dc0a:	f380 8811 	msr	BASEPRI, r0
   1dc0e:	f04f 0003 	mov.w	r0, #3
   1dc12:	df02      	svc	2
		break;
	}
}
   1dc14:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1dc16:	2904      	cmp	r1, #4
   1dc18:	d01f      	beq.n	1dc5a <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   1dc1a:	2351      	movs	r3, #81	; 0x51
   1dc1c:	e7ef      	b.n	1dbfe <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1dc1e:	2904      	cmp	r1, #4
   1dc20:	d013      	beq.n	1dc4a <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   1dc22:	2380      	movs	r3, #128	; 0x80
   1dc24:	e7eb      	b.n	1dbfe <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1dc26:	2903      	cmp	r1, #3
   1dc28:	d01f      	beq.n	1dc6a <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   1dc2a:	2369      	movs	r3, #105	; 0x69
   1dc2c:	e7e7      	b.n	1dbfe <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1dc2e:	2903      	cmp	r1, #3
   1dc30:	d02b      	beq.n	1dc8a <hal_ticker_instance0_sched+0xa6>
   1dc32:	2904      	cmp	r1, #4
   1dc34:	d021      	beq.n	1dc7a <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   1dc36:	23a6      	movs	r3, #166	; 0xa6
   1dc38:	e7e1      	b.n	1dbfe <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   1dc3a:	4b1c      	ldr	r3, [pc, #112]	; (1dcac <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1dc3c:	2102      	movs	r1, #2
			m.param = instance;
   1dc3e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1dc40:	2003      	movs	r0, #3
}
   1dc42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1dc46:	f7f2 bee7 	b.w	10a18 <mayfly_enqueue>
			m.param = instance;
   1dc4a:	4b19      	ldr	r3, [pc, #100]	; (1dcb0 <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1dc4c:	2102      	movs	r1, #2
			m.param = instance;
   1dc4e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1dc50:	2001      	movs	r0, #1
}
   1dc52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1dc56:	f7f2 bedf 	b.w	10a18 <mayfly_enqueue>
			m.param = instance;
   1dc5a:	4b16      	ldr	r3, [pc, #88]	; (1dcb4 <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1dc5c:	2102      	movs	r1, #2
			m.param = instance;
   1dc5e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1dc60:	2000      	movs	r0, #0
}
   1dc62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1dc66:	f7f2 bed7 	b.w	10a18 <mayfly_enqueue>
			m.param = instance;
   1dc6a:	4b13      	ldr	r3, [pc, #76]	; (1dcb8 <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1dc6c:	2101      	movs	r1, #1
			m.param = instance;
   1dc6e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1dc70:	4608      	mov	r0, r1
}
   1dc72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1dc76:	f7f2 becf 	b.w	10a18 <mayfly_enqueue>
			m.param = instance;
   1dc7a:	4b10      	ldr	r3, [pc, #64]	; (1dcbc <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1dc7c:	2102      	movs	r1, #2
			m.param = instance;
   1dc7e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1dc80:	4608      	mov	r0, r1
}
   1dc82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1dc86:	f7f2 bec7 	b.w	10a18 <mayfly_enqueue>
			m.param = instance;
   1dc8a:	4b0d      	ldr	r3, [pc, #52]	; (1dcc0 <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1dc8c:	2101      	movs	r1, #1
			m.param = instance;
   1dc8e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1dc90:	2002      	movs	r0, #2
}
   1dc92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1dc96:	f7f2 bebf 	b.w	10a18 <mayfly_enqueue>
		LL_ASSERT(0);
   1dc9a:	23c4      	movs	r3, #196	; 0xc4
   1dc9c:	e7af      	b.n	1dbfe <hal_ticker_instance0_sched+0x1a>
   1dc9e:	bf00      	nop
   1dca0:	00027df8 	.word	0x00027df8
   1dca4:	00026f3c 	.word	0x00026f3c
   1dca8:	00026ecc 	.word	0x00026ecc
   1dcac:	20000640 	.word	0x20000640
   1dcb0:	20000610 	.word	0x20000610
   1dcb4:	200005f0 	.word	0x200005f0
   1dcb8:	20000600 	.word	0x20000600
   1dcbc:	20000630 	.word	0x20000630
   1dcc0:	20000620 	.word	0x20000620

0001dcc4 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1dcc4:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1dcc6:	2000      	movs	r0, #0
   1dcc8:	f7ff b91a 	b.w	1cf00 <cntr_cmp_set>

0001dccc <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1dccc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1dcd0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1dcd4:	3201      	adds	r2, #1
   1dcd6:	d008      	beq.n	1dcea <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1dcd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1dcdc:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1dce0:	f013 0301 	ands.w	r3, r3, #1
   1dce4:	d10f      	bne.n	1dd06 <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   1dce6:	2000      	movs	r0, #0
   1dce8:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1dcea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1dcee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1dcf2:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1dcf4:	4293      	cmp	r3, r2
   1dcf6:	d0f6      	beq.n	1dce6 <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1dcf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1dcfc:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1dd00:	f013 0301 	ands.w	r3, r3, #1
   1dd04:	d0ef      	beq.n	1dce6 <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1dd06:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   1dd0a:	0c19      	lsrs	r1, r3, #16
{
   1dd0c:	b510      	push	{r4, lr}
	dst[0] = val;
   1dd0e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1dd10:	0a0c      	lsrs	r4, r1, #8
   1dd12:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1dd16:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1dd18:	70c4      	strb	r4, [r0, #3]
   1dd1a:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1dd1c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1dd20:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1dd22:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1dd26:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1dd2a:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1dd2c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1dd30:	3301      	adds	r3, #1
   1dd32:	d035      	beq.n	1dda0 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1dd34:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1dd38:	3301      	adds	r3, #1
   1dd3a:	d031      	beq.n	1dda0 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1dd3c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1dd40:	3301      	adds	r3, #1
   1dd42:	d02d      	beq.n	1dda0 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1dd44:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1dd48:	3301      	adds	r3, #1
   1dd4a:	d029      	beq.n	1dda0 <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1dd4c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1dd50:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1dd52:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1dd54:	0a0c      	lsrs	r4, r1, #8
   1dd56:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1dd5a:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1dd5c:	7244      	strb	r4, [r0, #9]
   1dd5e:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1dd60:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1dd64:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1dd66:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1dd68:	0a0c      	lsrs	r4, r1, #8
   1dd6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1dd6e:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1dd70:	7344      	strb	r4, [r0, #13]
   1dd72:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1dd74:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1dd78:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1dd7a:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1dd7c:	0a0c      	lsrs	r4, r1, #8
   1dd7e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1dd82:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1dd84:	7444      	strb	r4, [r0, #17]
   1dd86:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1dd88:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1dd8c:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1dd8e:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1dd90:	0a11      	lsrs	r1, r2, #8
   1dd92:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1dd96:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1dd98:	7541      	strb	r1, [r0, #21]
   1dd9a:	74c3      	strb	r3, [r0, #19]
		return 1;
   1dd9c:	2001      	movs	r0, #1
}
   1dd9e:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1dda0:	2210      	movs	r2, #16
   1dda2:	2100      	movs	r1, #0
   1dda4:	3006      	adds	r0, #6
   1dda6:	f004 fce6 	bl	22776 <memset>
		return 1;
   1ddaa:	2001      	movs	r0, #1
}
   1ddac:	bd10      	pop	{r4, pc}
   1ddae:	bf00      	nop

0001ddb0 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1ddb0:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1ddb2:	2210      	movs	r2, #16
{
   1ddb4:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1ddb6:	2100      	movs	r1, #0
   1ddb8:	f004 fcdd 	bl	22776 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1ddbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ddc0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1ddc4:	3201      	adds	r2, #1
   1ddc6:	d034      	beq.n	1de32 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1ddc8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1ddcc:	3201      	adds	r2, #1
   1ddce:	d030      	beq.n	1de32 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1ddd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1ddd4:	3201      	adds	r2, #1
   1ddd6:	d02c      	beq.n	1de32 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1ddd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1dddc:	3201      	adds	r2, #1
   1ddde:	d028      	beq.n	1de32 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1dde0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1dde4:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1dde6:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1dde8:	0a08      	lsrs	r0, r1, #8
   1ddea:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1ddee:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   1ddf0:	70e0      	strb	r0, [r4, #3]
   1ddf2:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1ddf4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   1ddf8:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1ddfa:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1ddfc:	0a08      	lsrs	r0, r1, #8
   1ddfe:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1de02:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   1de04:	71e0      	strb	r0, [r4, #7]
   1de06:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1de08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   1de0c:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1de0e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1de10:	0a08      	lsrs	r0, r1, #8
   1de12:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1de16:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   1de18:	7262      	strb	r2, [r4, #9]
   1de1a:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1de1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   1de20:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1de22:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1de24:	0a11      	lsrs	r1, r2, #8
   1de26:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1de2a:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   1de2c:	73e1      	strb	r1, [r4, #15]
   1de2e:	7363      	strb	r3, [r4, #13]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1de30:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   1de32:	4620      	mov	r0, r4
   1de34:	2210      	movs	r2, #16
}
   1de36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1de3a:	2100      	movs	r1, #0
   1de3c:	f004 bc9b 	b.w	22776 <memset>

0001de40 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1de40:	4b02      	ldr	r3, [pc, #8]	; (1de4c <net_buf_pool_get+0xc>)
   1de42:	2228      	movs	r2, #40	; 0x28
   1de44:	fb02 3000 	mla	r0, r2, r0, r3
   1de48:	4770      	bx	lr
   1de4a:	bf00      	nop
   1de4c:	200008a4 	.word	0x200008a4

0001de50 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1de50:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1de52:	4a05      	ldr	r2, [pc, #20]	; (1de68 <net_buf_id+0x18>)
   1de54:	2128      	movs	r1, #40	; 0x28
   1de56:	fb01 2303 	mla	r3, r1, r3, r2
   1de5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1de5c:	1ac0      	subs	r0, r0, r3
}
   1de5e:	4b03      	ldr	r3, [pc, #12]	; (1de6c <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1de60:	10c0      	asrs	r0, r0, #3
}
   1de62:	4358      	muls	r0, r3
   1de64:	4770      	bx	lr
   1de66:	bf00      	nop
   1de68:	200008a4 	.word	0x200008a4
   1de6c:	aaaaaaab 	.word	0xaaaaaaab

0001de70 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1de70:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1de72:	4a0a      	ldr	r2, [pc, #40]	; (1de9c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1de74:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1de76:	2428      	movs	r4, #40	; 0x28
   1de78:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1de7c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1de7e:	6a1b      	ldr	r3, [r3, #32]
   1de80:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1de82:	6823      	ldr	r3, [r4, #0]
   1de84:	429a      	cmp	r2, r3
   1de86:	bf94      	ite	ls
   1de88:	600a      	strls	r2, [r1, #0]
   1de8a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1de8c:	f7ff ffe0 	bl	1de50 <net_buf_id>
   1de90:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1de94:	fb02 3000 	mla	r0, r2, r0, r3
   1de98:	bd10      	pop	{r4, pc}
   1de9a:	bf00      	nop
   1de9c:	200008a4 	.word	0x200008a4

0001dea0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1dea0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1dea4:	4605      	mov	r5, r0
   1dea6:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1dea8:	4610      	mov	r0, r2
   1deaa:	4619      	mov	r1, r3
{
   1deac:	4616      	mov	r6, r2
   1deae:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1deb0:	f008 f8af 	bl	26012 <z_timeout_end_calc>
   1deb4:	4680      	mov	r8, r0
   1deb6:	4689      	mov	r9, r1
	__asm__ volatile(
   1deb8:	f04f 0320 	mov.w	r3, #32
   1debc:	f3ef 8a11 	mrs	sl, BASEPRI
   1dec0:	f383 8811 	msr	BASEPRI, r3
   1dec4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1dec8:	8b6b      	ldrh	r3, [r5, #26]
   1deca:	2b00      	cmp	r3, #0
   1decc:	d054      	beq.n	1df78 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1dece:	8b2a      	ldrh	r2, [r5, #24]
   1ded0:	429a      	cmp	r2, r3
   1ded2:	d93d      	bls.n	1df50 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   1ded4:	2200      	movs	r2, #0
   1ded6:	2300      	movs	r3, #0
   1ded8:	4628      	mov	r0, r5
   1deda:	f001 fb3b 	bl	1f554 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1dede:	4604      	mov	r4, r0
   1dee0:	2800      	cmp	r0, #0
   1dee2:	d035      	beq.n	1df50 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1dee4:	f38a 8811 	msr	BASEPRI, sl
   1dee8:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1deec:	9b01      	ldr	r3, [sp, #4]
   1deee:	2b00      	cmp	r3, #0
   1def0:	d052      	beq.n	1df98 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1def2:	ea56 0307 	orrs.w	r3, r6, r7
   1def6:	d010      	beq.n	1df1a <net_buf_alloc_len+0x7a>
   1def8:	1c7b      	adds	r3, r7, #1
   1defa:	bf08      	it	eq
   1defc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1df00:	d00b      	beq.n	1df1a <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1df02:	f002 f95d 	bl	201c0 <z_tick_get>
   1df06:	ebb8 0600 	subs.w	r6, r8, r0
   1df0a:	eb69 0701 	sbc.w	r7, r9, r1
   1df0e:	2e00      	cmp	r6, #0
   1df10:	f177 0300 	sbcs.w	r3, r7, #0
   1df14:	bfbc      	itt	lt
   1df16:	2600      	movlt	r6, #0
   1df18:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1df1a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1df1c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1dfb0 <net_buf_alloc_len+0x110>
   1df20:	2228      	movs	r2, #40	; 0x28
   1df22:	fb02 8303 	mla	r3, r2, r3, r8
   1df26:	a901      	add	r1, sp, #4
   1df28:	6a1b      	ldr	r3, [r3, #32]
   1df2a:	681b      	ldr	r3, [r3, #0]
   1df2c:	4632      	mov	r2, r6
   1df2e:	681d      	ldr	r5, [r3, #0]
   1df30:	4620      	mov	r0, r4
   1df32:	463b      	mov	r3, r7
   1df34:	47a8      	blx	r5
   1df36:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1df38:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1df3a:	bb70      	cbnz	r0, 1df9a <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   1df3c:	79a0      	ldrb	r0, [r4, #6]
   1df3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1df42:	4621      	mov	r1, r4
   1df44:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1df48:	f007 fe0f 	bl	25b6a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1df4c:	462c      	mov	r4, r5
}
   1df4e:	e01f      	b.n	1df90 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   1df50:	8b68      	ldrh	r0, [r5, #26]
   1df52:	1e43      	subs	r3, r0, #1
   1df54:	836b      	strh	r3, [r5, #26]
   1df56:	f38a 8811 	msr	BASEPRI, sl
   1df5a:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1df5e:	8b2c      	ldrh	r4, [r5, #24]
   1df60:	1a24      	subs	r4, r4, r0
   1df62:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1df64:	2318      	movs	r3, #24
   1df66:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1df6a:	4811      	ldr	r0, [pc, #68]	; (1dfb0 <net_buf_alloc_len+0x110>)
   1df6c:	4b11      	ldr	r3, [pc, #68]	; (1dfb4 <net_buf_alloc_len+0x114>)
   1df6e:	1a2d      	subs	r5, r5, r0
   1df70:	10ed      	asrs	r5, r5, #3
   1df72:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1df74:	71a5      	strb	r5, [r4, #6]
		goto success;
   1df76:	e7b9      	b.n	1deec <net_buf_alloc_len+0x4c>
   1df78:	f38a 8811 	msr	BASEPRI, sl
   1df7c:	f3bf 8f6f 	isb	sy
   1df80:	4632      	mov	r2, r6
   1df82:	463b      	mov	r3, r7
   1df84:	4628      	mov	r0, r5
   1df86:	f001 fae5 	bl	1f554 <z_impl_k_queue_get>
	if (!buf) {
   1df8a:	4604      	mov	r4, r0
   1df8c:	2800      	cmp	r0, #0
   1df8e:	d1ad      	bne.n	1deec <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   1df90:	4620      	mov	r0, r4
   1df92:	b002      	add	sp, #8
   1df94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1df98:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1df9a:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1df9c:	2201      	movs	r2, #1
	buf->frags = NULL;
   1df9e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1dfa0:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1dfa2:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1dfa4:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1dfa6:	6923      	ldr	r3, [r4, #16]
   1dfa8:	81e2      	strh	r2, [r4, #14]
   1dfaa:	60a3      	str	r3, [r4, #8]
	return buf;
   1dfac:	e7f0      	b.n	1df90 <net_buf_alloc_len+0xf0>
   1dfae:	bf00      	nop
   1dfb0:	200008a4 	.word	0x200008a4
   1dfb4:	cccccccd 	.word	0xcccccccd

0001dfb8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1dfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dfbc:	4d17      	ldr	r5, [pc, #92]	; (1e01c <net_buf_unref+0x64>)
   1dfbe:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1dfc0:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1dfc2:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1dfc4:	b90c      	cbnz	r4, 1dfca <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1dfc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1dfca:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1dfcc:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1dfd0:	3b01      	subs	r3, #1
   1dfd2:	b2db      	uxtb	r3, r3
   1dfd4:	7123      	strb	r3, [r4, #4]
   1dfd6:	2b00      	cmp	r3, #0
   1dfd8:	d1f5      	bne.n	1dfc6 <net_buf_unref+0xe>
		if (buf->__buf) {
   1dfda:	6921      	ldr	r1, [r4, #16]
   1dfdc:	b159      	cbz	r1, 1dff6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1dfde:	7963      	ldrb	r3, [r4, #5]
   1dfe0:	079b      	lsls	r3, r3, #30
   1dfe2:	d407      	bmi.n	1dff4 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1dfe4:	79a3      	ldrb	r3, [r4, #6]
   1dfe6:	fb07 5303 	mla	r3, r7, r3, r5
   1dfea:	4620      	mov	r0, r4
   1dfec:	6a1b      	ldr	r3, [r3, #32]
   1dfee:	681b      	ldr	r3, [r3, #0]
   1dff0:	689b      	ldr	r3, [r3, #8]
   1dff2:	4798      	blx	r3
			buf->__buf = NULL;
   1dff4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1dff6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1dff8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1dffa:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1dffe:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1e000:	69db      	ldr	r3, [r3, #28]
   1e002:	b11b      	cbz	r3, 1e00c <net_buf_unref+0x54>
			pool->destroy(buf);
   1e004:	4620      	mov	r0, r4
   1e006:	4798      	blx	r3
{
   1e008:	4644      	mov	r4, r8
   1e00a:	e7db      	b.n	1dfc4 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1e00c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1e010:	4621      	mov	r1, r4
   1e012:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1e016:	f007 fda8 	bl	25b6a <k_queue_prepend>
}
   1e01a:	e7f5      	b.n	1e008 <net_buf_unref+0x50>
   1e01c:	200008a4 	.word	0x200008a4

0001e020 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
   1e020:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1e022:	4b09      	ldr	r3, [pc, #36]	; (1e048 <gpio_nrfx_init+0x28>)
   1e024:	781a      	ldrb	r2, [r3, #0]
   1e026:	b96a      	cbnz	r2, 1e044 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1e028:	2101      	movs	r1, #1
   1e02a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1e02c:	2006      	movs	r0, #6
   1e02e:	2105      	movs	r1, #5
   1e030:	f7e8 fc4e 	bl	68d0 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1e034:	2006      	movs	r0, #6
   1e036:	f7e8 fc19 	bl	686c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1e03a:	4b04      	ldr	r3, [pc, #16]	; (1e04c <gpio_nrfx_init+0x2c>)
   1e03c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1e040:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1e044:	2000      	movs	r0, #0
   1e046:	bd08      	pop	{r3, pc}
   1e048:	20005393 	.word	0x20005393
   1e04c:	40006000 	.word	0x40006000

0001e050 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e050:	4b2d      	ldr	r3, [pc, #180]	; (1e108 <gpio_nrfx_config+0xb8>)
{
   1e052:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e054:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e056:	482d      	ldr	r0, [pc, #180]	; (1e10c <gpio_nrfx_config+0xbc>)
   1e058:	4013      	ands	r3, r2
   1e05a:	4283      	cmp	r3, r0
   1e05c:	d045      	beq.n	1e0ea <gpio_nrfx_config+0x9a>
   1e05e:	d80d      	bhi.n	1e07c <gpio_nrfx_config+0x2c>
   1e060:	2b06      	cmp	r3, #6
   1e062:	d015      	beq.n	1e090 <gpio_nrfx_config+0x40>
   1e064:	d805      	bhi.n	1e072 <gpio_nrfx_config+0x22>
   1e066:	b19b      	cbz	r3, 1e090 <gpio_nrfx_config+0x40>
   1e068:	2b02      	cmp	r3, #2
   1e06a:	d040      	beq.n	1e0ee <gpio_nrfx_config+0x9e>
   1e06c:	f06f 0015 	mvn.w	r0, #21
   1e070:	e03a      	b.n	1e0e8 <gpio_nrfx_config+0x98>
   1e072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e076:	d1f9      	bne.n	1e06c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1e078:	2301      	movs	r3, #1
   1e07a:	e009      	b.n	1e090 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e07c:	4824      	ldr	r0, [pc, #144]	; (1e110 <gpio_nrfx_config+0xc0>)
   1e07e:	4283      	cmp	r3, r0
   1e080:	d037      	beq.n	1e0f2 <gpio_nrfx_config+0xa2>
   1e082:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1e086:	d036      	beq.n	1e0f6 <gpio_nrfx_config+0xa6>
   1e088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1e08c:	d1ee      	bne.n	1e06c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1e08e:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1e090:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1e092:	bf54      	ite	pl
   1e094:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1e098:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1e09a:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1e09e:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1e0a0:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1e0a4:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1e0a8:	d507      	bpl.n	1e0ba <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1e0aa:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e0ae:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1e0b0:	d023      	beq.n	1e0fa <gpio_nrfx_config+0xaa>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1e0b2:	2201      	movs	r2, #1
   1e0b4:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1e0b6:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1e0ba:	7a32      	ldrb	r2, [r6, #8]
   1e0bc:	f001 011f 	and.w	r1, r1, #31
   1e0c0:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    if (*p_pin < P0_PIN_NUM)
   1e0c4:	291f      	cmp	r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1e0c6:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
        *p_pin = *p_pin & 0x1F;
   1e0ca:	bfc6      	itte	gt
   1e0cc:	f001 011f 	andgt.w	r1, r1, #31
        return NRF_P1;
   1e0d0:	4e10      	ldrgt	r6, [pc, #64]	; (1e114 <gpio_nrfx_config+0xc4>)
        return NRF_P0;
   1e0d2:	f04f 46a0 	movle.w	r6, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1e0d6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e0da:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1e0de:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e0e2:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
	return 0;
   1e0e6:	2000      	movs	r0, #0
}
   1e0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1e0ea:	2307      	movs	r3, #7
   1e0ec:	e7d0      	b.n	1e090 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1e0ee:	2304      	movs	r3, #4
   1e0f0:	e7ce      	b.n	1e090 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1e0f2:	2305      	movs	r3, #5
   1e0f4:	e7cc      	b.n	1e090 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1e0f6:	2303      	movs	r3, #3
   1e0f8:	e7ca      	b.n	1e090 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1e0fa:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1e0fc:	bf42      	ittt	mi
   1e0fe:	2201      	movmi	r2, #1
   1e100:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1e102:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1e106:	e7d8      	b.n	1e0ba <gpio_nrfx_config+0x6a>
   1e108:	00f00006 	.word	0x00f00006
   1e10c:	00100006 	.word	0x00100006
   1e110:	00400002 	.word	0x00400002
   1e114:	50000300 	.word	0x50000300

0001e118 <nrf_gpio_cfg_sense_set>:
    if (*p_pin < P0_PIN_NUM)
   1e118:	281f      	cmp	r0, #31
        return NRF_P1;
   1e11a:	bf8a      	itet	hi
   1e11c:	4b07      	ldrhi	r3, [pc, #28]	; (1e13c <nrf_gpio_cfg_sense_set+0x24>)
        return NRF_P0;
   1e11e:	f04f 43a0 	movls.w	r3, #1342177280	; 0x50000000
        *p_pin = *p_pin & 0x1F;
   1e122:	f000 001f 	andhi.w	r0, r0, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1e126:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1e12a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1e12e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1e132:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1e136:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   1e13a:	4770      	bx	lr
   1e13c:	50000300 	.word	0x50000300

0001e140 <gpio_nrfx_pin_interrupt_configure>:
{
   1e140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e142:	460c      	mov	r4, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1e144:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1e146:	68c6      	ldr	r6, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1e148:	7a08      	ldrb	r0, [r1, #8]
   1e14a:	f004 051f 	and.w	r5, r4, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1e14e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1e152:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
   1e156:	d110      	bne.n	1e17a <gpio_nrfx_pin_interrupt_configure+0x3a>
    if (*p_pin < P0_PIN_NUM)
   1e158:	2d1f      	cmp	r5, #31
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1e15a:	4629      	mov	r1, r5
        *p_pin = *p_pin & 0x1F;
   1e15c:	bfc6      	itte	gt
   1e15e:	f005 011f 	andgt.w	r1, r5, #31
        return NRF_P1;
   1e162:	486d      	ldrgt	r0, [pc, #436]	; (1e318 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
        return NRF_P0;
   1e164:	f04f 40a0 	movle.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1e168:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   1e16c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1e170:	07cf      	lsls	r7, r1, #31
   1e172:	d507      	bpl.n	1e184 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
   1e174:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1e178:	e0c0      	b.n	1e2fc <gpio_nrfx_pin_interrupt_configure+0x1bc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1e17a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1e17e:	68f1      	ldr	r1, [r6, #12]
   1e180:	f000 80ad 	beq.w	1e2de <gpio_nrfx_pin_interrupt_configure+0x19e>
   1e184:	68f0      	ldr	r0, [r6, #12]
   1e186:	2101      	movs	r1, #1
   1e188:	40a1      	lsls	r1, r4
   1e18a:	4301      	orrs	r1, r0
   1e18c:	6970      	ldr	r0, [r6, #20]
   1e18e:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1e190:	2101      	movs	r1, #1
   1e192:	40a1      	lsls	r1, r4
   1e194:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1e198:	69b2      	ldr	r2, [r6, #24]
   1e19a:	bf0c      	ite	eq
   1e19c:	4308      	orreq	r0, r1
   1e19e:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1e1a0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1e1a4:	bf0c      	ite	eq
   1e1a6:	430a      	orreq	r2, r1
   1e1a8:	438a      	bicne	r2, r1
   1e1aa:	61b2      	str	r2, [r6, #24]
   1e1ac:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1e1ae:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1e1b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1e1b4:	bf0c      	ite	eq
   1e1b6:	4311      	orreq	r1, r2
   1e1b8:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1e1bc:	4a57      	ldr	r2, [pc, #348]	; (1e31c <gpio_nrfx_pin_interrupt_configure+0x1dc>)
   1e1be:	6131      	str	r1, [r6, #16]
   1e1c0:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1e1c4:	2300      	movs	r3, #0
   1e1c6:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1e1c8:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1e1cc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   1e1d0:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1e1d4:	4285      	cmp	r5, r0
   1e1d6:	f040 8087 	bne.w	1e2e8 <gpio_nrfx_pin_interrupt_configure+0x1a8>
		    && (intenset & BIT(i))) {
   1e1da:	fa21 f003 	lsr.w	r0, r1, r3
   1e1de:	07c0      	lsls	r0, r0, #31
   1e1e0:	f140 8082 	bpl.w	1e2e8 <gpio_nrfx_pin_interrupt_configure+0x1a8>
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e1e4:	2101      	movs	r1, #1
   1e1e6:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e1e8:	484d      	ldr	r0, [pc, #308]	; (1e320 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   1e1ea:	f3bf 8f5b 	dmb	ish

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e1ee:	43cf      	mvns	r7, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e1f0:	e850 cf00 	ldrex	ip, [r0]
   1e1f4:	ea0c 0c07 	and.w	ip, ip, r7
   1e1f8:	e840 ce00 	strex	lr, ip, [r0]
   1e1fc:	f1be 0f00 	cmp.w	lr, #0
   1e200:	d1f6      	bne.n	1e1f0 <gpio_nrfx_pin_interrupt_configure+0xb0>
   1e202:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1e206:	009b      	lsls	r3, r3, #2
   1e208:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e20c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1e210:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1e214:	f020 0001 	bic.w	r0, r0, #1
   1e218:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   1e21c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1e220:	2100      	movs	r1, #0
   1e222:	4628      	mov	r0, r5
   1e224:	f7ff ff78 	bl	1e118 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1e228:	68f3      	ldr	r3, [r6, #12]
   1e22a:	40e3      	lsrs	r3, r4
   1e22c:	f013 0301 	ands.w	r3, r3, #1
   1e230:	d053      	beq.n	1e2da <gpio_nrfx_pin_interrupt_configure+0x19a>
		if (data->trig_edge & BIT(pin)) {
   1e232:	6973      	ldr	r3, [r6, #20]
   1e234:	40e3      	lsrs	r3, r4
   1e236:	f013 0201 	ands.w	r2, r3, #1
   1e23a:	d061      	beq.n	1e300 <gpio_nrfx_pin_interrupt_configure+0x1c0>
			if (data->double_edge & BIT(pin)) {
   1e23c:	69b3      	ldr	r3, [r6, #24]
   1e23e:	40e3      	lsrs	r3, r4
   1e240:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1e242:	bf5f      	itttt	pl
   1e244:	6931      	ldrpl	r1, [r6, #16]
   1e246:	fa21 f404 	lsrpl.w	r4, r1, r4
   1e24a:	f004 0401 	andpl.w	r4, r4, #1
   1e24e:	f1c4 0402 	rsbpl	r4, r4, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e252:	4933      	ldr	r1, [pc, #204]	; (1e320 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   1e254:	bf54      	ite	pl
   1e256:	b2e4      	uxtbpl	r4, r4
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1e258:	2403      	movmi	r4, #3
   1e25a:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   1e25c:	2701      	movs	r7, #1
   1e25e:	fa07 f602 	lsl.w	r6, r7, r2
   1e262:	f3bf 8f5b 	dmb	ish
   1e266:	e851 0f00 	ldrex	r0, [r1]
   1e26a:	ea40 0306 	orr.w	r3, r0, r6
   1e26e:	e841 3c00 	strex	ip, r3, [r1]
   1e272:	f1bc 0f00 	cmp.w	ip, #0
   1e276:	d1f6      	bne.n	1e266 <gpio_nrfx_pin_interrupt_configure+0x126>
   1e278:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
   1e27c:	40d0      	lsrs	r0, r2
   1e27e:	f010 0301 	ands.w	r3, r0, #1
   1e282:	d136      	bne.n	1e2f2 <gpio_nrfx_pin_interrupt_configure+0x1b2>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1e284:	0091      	lsls	r1, r2, #2
   1e286:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1e28a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
   1e28e:	3240      	adds	r2, #64	; 0x40
   1e290:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   1e294:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1e298:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1e29c:	0092      	lsls	r2, r2, #2
   1e29e:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e2a2:	022d      	lsls	r5, r5, #8
    return ((uint32_t)p_reg + event);
   1e2a4:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e2a6:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   1e2aa:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    return ((uint32_t)p_reg + event);
   1e2ae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e2b2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e2b6:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1e2ba:	4305      	orrs	r5, r0
   1e2bc:	f8c1 5510 	str.w	r5, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e2c0:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1e2c2:	6812      	ldr	r2, [r2, #0]
   1e2c4:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1e2c6:	9a01      	ldr	r2, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1e2c8:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   1e2cc:	f042 0201 	orr.w	r2, r2, #1
   1e2d0:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1e2d4:	4a11      	ldr	r2, [pc, #68]	; (1e31c <gpio_nrfx_pin_interrupt_configure+0x1dc>)
   1e2d6:	f8c2 6304 	str.w	r6, [r2, #772]	; 0x304
	int res = 0;
   1e2da:	4618      	mov	r0, r3
   1e2dc:	e00e      	b.n	1e2fc <gpio_nrfx_pin_interrupt_configure+0x1bc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1e2de:	2001      	movs	r0, #1
   1e2e0:	40a0      	lsls	r0, r4
   1e2e2:	ea21 0100 	bic.w	r1, r1, r0
   1e2e6:	e751      	b.n	1e18c <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1e2e8:	3301      	adds	r3, #1
   1e2ea:	2b08      	cmp	r3, #8
   1e2ec:	f47f af6c 	bne.w	1e1c8 <gpio_nrfx_pin_interrupt_configure+0x88>
   1e2f0:	e796      	b.n	1e220 <gpio_nrfx_pin_interrupt_configure+0xe0>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1e2f2:	3201      	adds	r2, #1
   1e2f4:	2a08      	cmp	r2, #8
   1e2f6:	d1b2      	bne.n	1e25e <gpio_nrfx_pin_interrupt_configure+0x11e>
	return -ENODEV;
   1e2f8:	f06f 0012 	mvn.w	r0, #18
}
   1e2fc:	b003      	add	sp, #12
   1e2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1e300:	6931      	ldr	r1, [r6, #16]
   1e302:	40e1      	lsrs	r1, r4
   1e304:	f001 0101 	and.w	r1, r1, #1
   1e308:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1e30c:	4628      	mov	r0, r5
   1e30e:	b2c9      	uxtb	r1, r1
   1e310:	f7ff ff02 	bl	1e118 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1e314:	4610      	mov	r0, r2
   1e316:	e7f1      	b.n	1e2fc <gpio_nrfx_pin_interrupt_configure+0x1bc>
   1e318:	50000300 	.word	0x50000300
   1e31c:	40006000 	.word	0x40006000
   1e320:	200042e0 	.word	0x200042e0

0001e324 <gpiote_event_handler>:
{
   1e324:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1e326:	2600      	movs	r6, #0
{
   1e328:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1e32a:	e9cd 6602 	strd	r6, r6, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e32e:	4d2a      	ldr	r5, [pc, #168]	; (1e3d8 <gpiote_event_handler+0xb4>)
   1e330:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
   1e332:	b15c      	cbz	r4, 1e34c <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
   1e334:	4829      	ldr	r0, [pc, #164]	; (1e3dc <gpiote_event_handler+0xb8>)
   1e336:	f007 f94e 	bl	255d6 <check_level_trigger_pins>
		fired_triggers[0] =
   1e33a:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
   1e33c:	4828      	ldr	r0, [pc, #160]	; (1e3e0 <gpiote_event_handler+0xbc>)
   1e33e:	f007 f94a 	bl	255d6 <check_level_trigger_pins>
		fired_triggers[1] =
   1e342:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e344:	602e      	str	r6, [r5, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1e346:	682b      	ldr	r3, [r5, #0]
   1e348:	9300      	str	r3, [sp, #0]
    (void)dummy;
   1e34a:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
   1e34c:	4d25      	ldr	r5, [pc, #148]	; (1e3e4 <gpiote_event_handler+0xc0>)
{
   1e34e:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1e350:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e352:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1e354:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1e358:	fa06 f102 	lsl.w	r1, r6, r2
   1e35c:	4219      	tst	r1, r3
   1e35e:	d01d      	beq.n	1e39c <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e360:	0091      	lsls	r1, r2, #2
   1e362:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1e366:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1e36a:	680b      	ldr	r3, [r1, #0]
   1e36c:	b1b3      	cbz	r3, 1e39c <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1e36e:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1e372:	af04      	add	r7, sp, #16
   1e374:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e378:	f8c1 c000 	str.w	ip, [r1]
   1e37c:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1e380:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1e384:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1e388:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1e38c:	fa06 f303 	lsl.w	r3, r6, r3
   1e390:	433b      	orrs	r3, r7
   1e392:	f840 3c08 	str.w	r3, [r0, #-8]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1e396:	680b      	ldr	r3, [r1, #0]
   1e398:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1e39a:	9b01      	ldr	r3, [sp, #4]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1e39c:	3201      	adds	r2, #1
   1e39e:	2a08      	cmp	r2, #8
   1e3a0:	d1d8      	bne.n	1e354 <gpiote_event_handler+0x30>
	if (fired_triggers[0]) {
   1e3a2:	9a02      	ldr	r2, [sp, #8]
   1e3a4:	b122      	cbz	r2, 1e3b0 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
   1e3a6:	490d      	ldr	r1, [pc, #52]	; (1e3dc <gpiote_event_handler+0xb8>)
	sys_slist_t *list = &data->callbacks;
   1e3a8:	68c8      	ldr	r0, [r1, #12]
	gpio_fire_callbacks(list, port, pins);
   1e3aa:	3004      	adds	r0, #4
   1e3ac:	f007 f8a9 	bl	25502 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   1e3b0:	9a03      	ldr	r2, [sp, #12]
   1e3b2:	b12a      	cbz	r2, 1e3c0 <gpiote_event_handler+0x9c>
	gpio_fire_callbacks(list, port, pins);
   1e3b4:	4909      	ldr	r1, [pc, #36]	; (1e3dc <gpiote_event_handler+0xb8>)
	sys_slist_t *list = &data->callbacks;
   1e3b6:	69c8      	ldr	r0, [r1, #28]
	gpio_fire_callbacks(list, port, pins);
   1e3b8:	3110      	adds	r1, #16
   1e3ba:	3004      	adds	r0, #4
   1e3bc:	f007 f8a1 	bl	25502 <gpio_fire_callbacks>
	if (port_event) {
   1e3c0:	b144      	cbz	r4, 1e3d4 <gpiote_event_handler+0xb0>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
   1e3c2:	4806      	ldr	r0, [pc, #24]	; (1e3dc <gpiote_event_handler+0xb8>)
   1e3c4:	f007 f92b 	bl	2561e <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
   1e3c8:	4805      	ldr	r0, [pc, #20]	; (1e3e0 <gpiote_event_handler+0xbc>)
}
   1e3ca:	b005      	add	sp, #20
   1e3cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
   1e3d0:	f007 b925 	b.w	2561e <cfg_level_pins>
}
   1e3d4:	b005      	add	sp, #20
   1e3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e3d8:	4000617c 	.word	0x4000617c
   1e3dc:	20000764 	.word	0x20000764
   1e3e0:	20000774 	.word	0x20000774
   1e3e4:	40006000 	.word	0x40006000

0001e3e8 <event_txdrdy_check>:
#endif
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e3e8:	4b05      	ldr	r3, [pc, #20]	; (1e400 <event_txdrdy_check+0x18>)
   1e3ea:	681b      	ldr	r3, [r3, #0]

static bool event_txdrdy_check(void)
{
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
   1e3ec:	b92b      	cbnz	r3, 1e3fa <event_txdrdy_check+0x12>
   1e3ee:	4b05      	ldr	r3, [pc, #20]	; (1e404 <event_txdrdy_check+0x1c>)
   1e3f0:	7818      	ldrb	r0, [r3, #0]
   1e3f2:	3800      	subs	r0, #0
   1e3f4:	bf18      	it	ne
   1e3f6:	2001      	movne	r0, #1
   1e3f8:	4770      	bx	lr
   1e3fa:	2001      	movs	r0, #1
#endif
	       );
}
   1e3fc:	4770      	bx	lr
   1e3fe:	bf00      	nop
   1e400:	4000211c 	.word	0x4000211c
   1e404:	20005394 	.word	0x20005394

0001e408 <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1e408:	4b02      	ldr	r3, [pc, #8]	; (1e414 <uart_nrfx_err_check+0xc>)
   1e40a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1e40e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   1e412:	4770      	bx	lr
   1e414:	40002000 	.word	0x40002000

0001e418 <uart_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1e418:	4b02      	ldr	r3, [pc, #8]	; (1e424 <uart_nrfx_irq_rx_enable+0xc>)
   1e41a:	2204      	movs	r2, #4
   1e41c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
   1e420:	4770      	bx	lr
   1e422:	bf00      	nop
   1e424:	40002000 	.word	0x40002000

0001e428 <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1e428:	4b02      	ldr	r3, [pc, #8]	; (1e434 <uart_nrfx_irq_rx_disable+0xc>)
   1e42a:	2204      	movs	r2, #4
   1e42c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
   1e430:	4770      	bx	lr
   1e432:	bf00      	nop
   1e434:	40002000 	.word	0x40002000

0001e438 <uart_nrfx_irq_rx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e438:	4b02      	ldr	r3, [pc, #8]	; (1e444 <uart_nrfx_irq_rx_ready+0xc>)
   1e43a:	6818      	ldr	r0, [r3, #0]

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(struct device *dev)
{
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
}
   1e43c:	3800      	subs	r0, #0
   1e43e:	bf18      	it	ne
   1e440:	2001      	movne	r0, #1
   1e442:	4770      	bx	lr
   1e444:	40002108 	.word	0x40002108

0001e448 <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1e448:	4b02      	ldr	r3, [pc, #8]	; (1e454 <uart_nrfx_irq_err_enable+0xc>)
   1e44a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e44e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
   1e452:	4770      	bx	lr
   1e454:	40002000 	.word	0x40002000

0001e458 <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1e458:	4b02      	ldr	r3, [pc, #8]	; (1e464 <uart_nrfx_irq_err_disable+0xc>)
   1e45a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e45e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
   1e462:	4770      	bx	lr
   1e464:	40002000 	.word	0x40002000

0001e468 <uart_nrfx_irq_callback_set>:
static void uart_nrfx_irq_callback_set(struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	(void)dev;
	irq_callback = cb;
   1e468:	4b02      	ldr	r3, [pc, #8]	; (1e474 <uart_nrfx_irq_callback_set+0xc>)
   1e46a:	6019      	str	r1, [r3, #0]
	irq_cb_data = cb_data;
   1e46c:	4b02      	ldr	r3, [pc, #8]	; (1e478 <uart_nrfx_irq_callback_set+0x10>)
   1e46e:	601a      	str	r2, [r3, #0]
}
   1e470:	4770      	bx	lr
   1e472:	bf00      	nop
   1e474:	200042e4 	.word	0x200042e4
   1e478:	200042e8 	.word	0x200042e8

0001e47c <uart_nrfx_irq_tx_disable>:
   1e47c:	4b03      	ldr	r3, [pc, #12]	; (1e48c <uart_nrfx_irq_tx_disable+0x10>)
   1e47e:	2280      	movs	r2, #128	; 0x80
   1e480:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->TXD = txd;
}

NRF_STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e484:	2201      	movs	r2, #1
   1e486:	60da      	str	r2, [r3, #12]
	device_busy_clear(dev);
   1e488:	f007 ba29 	b.w	258de <device_busy_clear>
   1e48c:	40002000 	.word	0x40002000

0001e490 <uart_nrfx_irq_tx_enable>:
{
   1e490:	b508      	push	{r3, lr}
	device_busy_set(dev);
   1e492:	f007 fa23 	bl	258dc <device_busy_set>
   1e496:	4b0d      	ldr	r3, [pc, #52]	; (1e4cc <uart_nrfx_irq_tx_enable+0x3c>)
   1e498:	2201      	movs	r2, #1
   1e49a:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   1e49c:	2280      	movs	r2, #128	; 0x80
   1e49e:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	__asm__ volatile(
   1e4a2:	f04f 0220 	mov.w	r2, #32
   1e4a6:	f3ef 8311 	mrs	r3, BASEPRI
   1e4aa:	f382 8811 	msr	BASEPRI, r2
   1e4ae:	f3bf 8f6f 	isb	sy
	if (uart_sw_event_txdrdy) {
   1e4b2:	4a07      	ldr	r2, [pc, #28]	; (1e4d0 <uart_nrfx_irq_tx_enable+0x40>)
   1e4b4:	7812      	ldrb	r2, [r2, #0]
   1e4b6:	b11a      	cbz	r2, 1e4c0 <uart_nrfx_irq_tx_enable+0x30>
   1e4b8:	4a06      	ldr	r2, [pc, #24]	; (1e4d4 <uart_nrfx_irq_tx_enable+0x44>)
   1e4ba:	2104      	movs	r1, #4
   1e4bc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	__asm__ volatile(
   1e4c0:	f383 8811 	msr	BASEPRI, r3
   1e4c4:	f3bf 8f6f 	isb	sy
}
   1e4c8:	bd08      	pop	{r3, pc}
   1e4ca:	bf00      	nop
   1e4cc:	40002008 	.word	0x40002008
   1e4d0:	20005394 	.word	0x20005394
   1e4d4:	e000e100 	.word	0xe000e100

0001e4d8 <uart_nrfx_irq_is_pending>:
{
   1e4d8:	b508      	push	{r3, lr}
    return p_reg->INTENSET & mask;
   1e4da:	4b0c      	ldr	r3, [pc, #48]	; (1e50c <uart_nrfx_irq_is_pending+0x34>)
   1e4dc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		||
   1e4e0:	f012 0f80 	tst.w	r2, #128	; 0x80
   1e4e4:	461a      	mov	r2, r3
   1e4e6:	d105      	bne.n	1e4f4 <uart_nrfx_irq_is_pending+0x1c>
   1e4e8:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
   1e4ec:	f010 0004 	ands.w	r0, r0, #4
   1e4f0:	d106      	bne.n	1e500 <uart_nrfx_irq_is_pending+0x28>
}
   1e4f2:	bd08      	pop	{r3, pc}
		 event_txdrdy_check())
   1e4f4:	f7ff ff78 	bl	1e3e8 <event_txdrdy_check>
					   NRF_UART_INT_MASK_TXDRDY) &&
   1e4f8:	2800      	cmp	r0, #0
   1e4fa:	d0f5      	beq.n	1e4e8 <uart_nrfx_irq_is_pending+0x10>
		||
   1e4fc:	2001      	movs	r0, #1
   1e4fe:	e7f8      	b.n	1e4f2 <uart_nrfx_irq_is_pending+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e500:	4b03      	ldr	r3, [pc, #12]	; (1e510 <uart_nrfx_irq_is_pending+0x38>)
   1e502:	6818      	ldr	r0, [r3, #0]
					   NRF_UART_INT_MASK_RXDRDY) &&
   1e504:	3800      	subs	r0, #0
   1e506:	bf18      	it	ne
   1e508:	2001      	movne	r0, #1
   1e50a:	e7f2      	b.n	1e4f2 <uart_nrfx_irq_is_pending+0x1a>
   1e50c:	40002000 	.word	0x40002000
   1e510:	40002108 	.word	0x40002108

0001e514 <uart_nrfx_configure>:
{
   1e514:	b570      	push	{r4, r5, r6, lr}
	switch (cfg->stop_bits) {
   1e516:	794b      	ldrb	r3, [r1, #5]
   1e518:	2b01      	cmp	r3, #1
   1e51a:	d024      	beq.n	1e566 <uart_nrfx_configure+0x52>
   1e51c:	2b03      	cmp	r3, #3
   1e51e:	d11f      	bne.n	1e560 <uart_nrfx_configure+0x4c>
		uart_cfg.stop = NRF_UART_STOP_TWO;
   1e520:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e522:	798b      	ldrb	r3, [r1, #6]
   1e524:	2b03      	cmp	r3, #3
   1e526:	d11b      	bne.n	1e560 <uart_nrfx_configure+0x4c>
	switch (cfg->flow_ctrl) {
   1e528:	79cc      	ldrb	r4, [r1, #7]
   1e52a:	b10c      	cbz	r4, 1e530 <uart_nrfx_configure+0x1c>
   1e52c:	2c01      	cmp	r4, #1
   1e52e:	d117      	bne.n	1e560 <uart_nrfx_configure+0x4c>
	switch (cfg->parity) {
   1e530:	790a      	ldrb	r2, [r1, #4]
   1e532:	b112      	cbz	r2, 1e53a <uart_nrfx_configure+0x26>
   1e534:	2a02      	cmp	r2, #2
   1e536:	d113      	bne.n	1e560 <uart_nrfx_configure+0x4c>
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   1e538:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e53a:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1e53c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1e540:	d062      	beq.n	1e608 <uart_nrfx_configure+0xf4>
   1e542:	d82d      	bhi.n	1e5a0 <uart_nrfx_configure+0x8c>
   1e544:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e548:	d060      	beq.n	1e60c <uart_nrfx_configure+0xf8>
   1e54a:	d816      	bhi.n	1e57a <uart_nrfx_configure+0x66>
   1e54c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e550:	d05e      	beq.n	1e610 <uart_nrfx_configure+0xfc>
   1e552:	d80a      	bhi.n	1e56a <uart_nrfx_configure+0x56>
   1e554:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1e558:	d05d      	beq.n	1e616 <uart_nrfx_configure+0x102>
   1e55a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1e55e:	d05d      	beq.n	1e61c <uart_nrfx_configure+0x108>
   1e560:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1e564:	e04f      	b.n	1e606 <uart_nrfx_configure+0xf2>
	switch (cfg->stop_bits) {
   1e566:	2600      	movs	r6, #0
   1e568:	e7db      	b.n	1e522 <uart_nrfx_configure+0xe>
	switch (baudrate) {
   1e56a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e56e:	d058      	beq.n	1e622 <uart_nrfx_configure+0x10e>
   1e570:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e574:	d1f4      	bne.n	1e560 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1e576:	4b35      	ldr	r3, [pc, #212]	; (1e64c <uart_nrfx_configure+0x138>)
   1e578:	e039      	b.n	1e5ee <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1e57a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e57e:	d053      	beq.n	1e628 <uart_nrfx_configure+0x114>
   1e580:	d807      	bhi.n	1e592 <uart_nrfx_configure+0x7e>
   1e582:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e586:	d051      	beq.n	1e62c <uart_nrfx_configure+0x118>
   1e588:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e58c:	d1e8      	bne.n	1e560 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1e58e:	4b30      	ldr	r3, [pc, #192]	; (1e650 <uart_nrfx_configure+0x13c>)
   1e590:	e02d      	b.n	1e5ee <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1e592:	f647 2512 	movw	r5, #31250	; 0x7a12
   1e596:	42ab      	cmp	r3, r5
   1e598:	d1e2      	bne.n	1e560 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1e59a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e59e:	e026      	b.n	1e5ee <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1e5a0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e5a4:	d045      	beq.n	1e632 <uart_nrfx_configure+0x11e>
   1e5a6:	d811      	bhi.n	1e5cc <uart_nrfx_configure+0xb8>
   1e5a8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e5ac:	d043      	beq.n	1e636 <uart_nrfx_configure+0x122>
   1e5ae:	d808      	bhi.n	1e5c2 <uart_nrfx_configure+0xae>
   1e5b0:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1e5b4:	42ab      	cmp	r3, r5
   1e5b6:	d040      	beq.n	1e63a <uart_nrfx_configure+0x126>
   1e5b8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e5bc:	d1d0      	bne.n	1e560 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1e5be:	4b25      	ldr	r3, [pc, #148]	; (1e654 <uart_nrfx_configure+0x140>)
   1e5c0:	e015      	b.n	1e5ee <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1e5c2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e5c6:	d1cb      	bne.n	1e560 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1e5c8:	4b23      	ldr	r3, [pc, #140]	; (1e658 <uart_nrfx_configure+0x144>)
   1e5ca:	e010      	b.n	1e5ee <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1e5cc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e5d0:	d036      	beq.n	1e640 <uart_nrfx_configure+0x12c>
   1e5d2:	d807      	bhi.n	1e5e4 <uart_nrfx_configure+0xd0>
   1e5d4:	4d21      	ldr	r5, [pc, #132]	; (1e65c <uart_nrfx_configure+0x148>)
   1e5d6:	42ab      	cmp	r3, r5
   1e5d8:	d034      	beq.n	1e644 <uart_nrfx_configure+0x130>
   1e5da:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e5de:	d1bf      	bne.n	1e560 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1e5e0:	4b1f      	ldr	r3, [pc, #124]	; (1e660 <uart_nrfx_configure+0x14c>)
   1e5e2:	e004      	b.n	1e5ee <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1e5e4:	4d1f      	ldr	r5, [pc, #124]	; (1e664 <uart_nrfx_configure+0x150>)
   1e5e6:	42ab      	cmp	r3, r5
   1e5e8:	d1ba      	bne.n	1e560 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1e5ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e5ee:	4d1e      	ldr	r5, [pc, #120]	; (1e668 <uart_nrfx_configure+0x154>)
                    | (uint32_t)p_cfg->hwfc;
   1e5f0:	4334      	orrs	r4, r6
   1e5f2:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   1e5f4:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e5f8:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
	get_dev_data(dev)->uart_config = *cfg;
   1e5fc:	68c3      	ldr	r3, [r0, #12]
   1e5fe:	c903      	ldmia	r1, {r0, r1}
   1e600:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1e604:	2000      	movs	r0, #0
}
   1e606:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1e608:	4b18      	ldr	r3, [pc, #96]	; (1e66c <uart_nrfx_configure+0x158>)
   1e60a:	e7f0      	b.n	1e5ee <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1e60c:	4b18      	ldr	r3, [pc, #96]	; (1e670 <uart_nrfx_configure+0x15c>)
   1e60e:	e7ee      	b.n	1e5ee <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1e610:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e614:	e7eb      	b.n	1e5ee <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1e616:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e61a:	e7e8      	b.n	1e5ee <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1e61c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1e620:	e7e5      	b.n	1e5ee <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1e622:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e626:	e7e2      	b.n	1e5ee <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1e628:	4b12      	ldr	r3, [pc, #72]	; (1e674 <uart_nrfx_configure+0x160>)
   1e62a:	e7e0      	b.n	1e5ee <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1e62c:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1e630:	e7dd      	b.n	1e5ee <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1e632:	4b11      	ldr	r3, [pc, #68]	; (1e678 <uart_nrfx_configure+0x164>)
   1e634:	e7db      	b.n	1e5ee <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1e636:	4b11      	ldr	r3, [pc, #68]	; (1e67c <uart_nrfx_configure+0x168>)
   1e638:	e7d9      	b.n	1e5ee <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1e63a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e63e:	e7d6      	b.n	1e5ee <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1e640:	4b0f      	ldr	r3, [pc, #60]	; (1e680 <uart_nrfx_configure+0x16c>)
   1e642:	e7d4      	b.n	1e5ee <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1e644:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e648:	e7d1      	b.n	1e5ee <uart_nrfx_configure+0xda>
   1e64a:	bf00      	nop
   1e64c:	0013b000 	.word	0x0013b000
   1e650:	004ea000 	.word	0x004ea000
   1e654:	00ebf000 	.word	0x00ebf000
   1e658:	01d7e000 	.word	0x01d7e000
   1e65c:	0003d090 	.word	0x0003d090
   1e660:	075f7000 	.word	0x075f7000
   1e664:	000f4240 	.word	0x000f4240
   1e668:	40002000 	.word	0x40002000
   1e66c:	009d5000 	.word	0x009d5000
   1e670:	00275000 	.word	0x00275000
   1e674:	0075f000 	.word	0x0075f000
   1e678:	03afb000 	.word	0x03afb000
   1e67c:	013a9000 	.word	0x013a9000
   1e680:	0ebed000 	.word	0x0ebed000

0001e684 <uart_nrfx_isr>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e684:	4b08      	ldr	r3, [pc, #32]	; (1e6a8 <uart_nrfx_isr+0x24>)
   1e686:	681a      	ldr	r2, [r3, #0]
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
static void uart_nrfx_isr(void *arg)
{
   1e688:	b082      	sub	sp, #8
	ARG_UNUSED(arg);

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
   1e68a:	b122      	cbz	r2, 1e696 <uart_nrfx_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e68c:	2200      	movs	r2, #0
   1e68e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1e690:	681b      	ldr	r3, [r3, #0]
   1e692:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1e694:	9b01      	ldr	r3, [sp, #4]
		nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_ERROR);
	}

	if (irq_callback) {
   1e696:	4b05      	ldr	r3, [pc, #20]	; (1e6ac <uart_nrfx_isr+0x28>)
   1e698:	681b      	ldr	r3, [r3, #0]
   1e69a:	b11b      	cbz	r3, 1e6a4 <uart_nrfx_isr+0x20>
		irq_callback(irq_cb_data);
   1e69c:	4a04      	ldr	r2, [pc, #16]	; (1e6b0 <uart_nrfx_isr+0x2c>)
   1e69e:	6810      	ldr	r0, [r2, #0]
	}
}
   1e6a0:	b002      	add	sp, #8
		irq_callback(irq_cb_data);
   1e6a2:	4718      	bx	r3
}
   1e6a4:	b002      	add	sp, #8
   1e6a6:	4770      	bx	lr
   1e6a8:	40002124 	.word	0x40002124
   1e6ac:	200042e4 	.word	0x200042e4
   1e6b0:	200042e8 	.word	0x200042e8

0001e6b4 <uart_nrfx_fifo_read>:
{
   1e6b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while ((size - num_rx > 0) &&
   1e6b6:	2300      	movs	r3, #0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e6b8:	4c09      	ldr	r4, [pc, #36]	; (1e6e0 <uart_nrfx_fifo_read+0x2c>)
    return p_reg->RXD;
   1e6ba:	4f0a      	ldr	r7, [pc, #40]	; (1e6e4 <uart_nrfx_fifo_read+0x30>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e6bc:	461e      	mov	r6, r3
   1e6be:	b2d8      	uxtb	r0, r3
   1e6c0:	1a15      	subs	r5, r2, r0
   1e6c2:	2d00      	cmp	r5, #0
   1e6c4:	dd02      	ble.n	1e6cc <uart_nrfx_fifo_read+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e6c6:	6825      	ldr	r5, [r4, #0]
   1e6c8:	3301      	adds	r3, #1
   1e6ca:	b90d      	cbnz	r5, 1e6d0 <uart_nrfx_fifo_read+0x1c>
}
   1e6cc:	b003      	add	sp, #12
   1e6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e6d0:	6026      	str	r6, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1e6d2:	6825      	ldr	r5, [r4, #0]
   1e6d4:	9501      	str	r5, [sp, #4]
    (void)dummy;
   1e6d6:	9d01      	ldr	r5, [sp, #4]
    return p_reg->RXD;
   1e6d8:	f8d7 5518 	ldr.w	r5, [r7, #1304]	; 0x518
   1e6dc:	540d      	strb	r5, [r1, r0]
   1e6de:	e7ee      	b.n	1e6be <uart_nrfx_fifo_read+0xa>
   1e6e0:	40002108 	.word	0x40002108
   1e6e4:	40002000 	.word	0x40002000

0001e6e8 <uart_nrfx_poll_out>:
{
   1e6e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e6ea:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   1e6ec:	f007 fbbb 	bl	25e66 <k_is_in_isr>
   1e6f0:	4d1d      	ldr	r5, [pc, #116]	; (1e768 <uart_nrfx_poll_out+0x80>)
   1e6f2:	2800      	cmp	r0, #0
   1e6f4:	d134      	bne.n	1e760 <uart_nrfx_poll_out+0x78>
   1e6f6:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e6f8:	2701      	movs	r7, #1
   1e6fa:	f3bf 8f5b 	dmb	ish
   1e6fe:	e855 3f00 	ldrex	r3, [r5]
   1e702:	2b00      	cmp	r3, #0
   1e704:	d103      	bne.n	1e70e <uart_nrfx_poll_out+0x26>
   1e706:	e845 7200 	strex	r2, r7, [r5]
   1e70a:	2a00      	cmp	r2, #0
   1e70c:	d1f7      	bne.n	1e6fe <uart_nrfx_poll_out+0x16>
   1e70e:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   1e712:	d007      	beq.n	1e724 <uart_nrfx_poll_out+0x3c>
	return z_impl_k_sleep(timeout);
   1e714:	2021      	movs	r0, #33	; 0x21
   1e716:	2100      	movs	r1, #0
   1e718:	3c01      	subs	r4, #1
   1e71a:	f001 fa79 	bl	1fc10 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   1e71e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1e722:	d1ea      	bne.n	1e6fa <uart_nrfx_poll_out+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e724:	4a11      	ldr	r2, [pc, #68]	; (1e76c <uart_nrfx_poll_out+0x84>)
   1e726:	2300      	movs	r3, #0
   1e728:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1e72a:	6812      	ldr	r2, [r2, #0]
   1e72c:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1e72e:	9a01      	ldr	r2, [sp, #4]
	uart_sw_event_txdrdy = 0U;
   1e730:	4a0f      	ldr	r2, [pc, #60]	; (1e770 <uart_nrfx_poll_out+0x88>)
   1e732:	7013      	strb	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e734:	4b0f      	ldr	r3, [pc, #60]	; (1e774 <uart_nrfx_poll_out+0x8c>)
   1e736:	2201      	movs	r2, #1
   1e738:	601a      	str	r2, [r3, #0]
    p_reg->TXD = txd;
   1e73a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e73e:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   1e742:	f7ff fe51 	bl	1e3e8 <event_txdrdy_check>
   1e746:	b920      	cbnz	r0, 1e752 <uart_nrfx_poll_out+0x6a>
   1e748:	2001      	movs	r0, #1
   1e74a:	f007 f8c5 	bl	258d8 <nrfx_busy_wait>
   1e74e:	3c01      	subs	r4, #1
   1e750:	d1f7      	bne.n	1e742 <uart_nrfx_poll_out+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e752:	4b09      	ldr	r3, [pc, #36]	; (1e778 <uart_nrfx_poll_out+0x90>)
   1e754:	2201      	movs	r2, #1
   1e756:	601a      	str	r2, [r3, #0]
	*lock = 0;
   1e758:	2300      	movs	r3, #0
   1e75a:	602b      	str	r3, [r5, #0]
}
   1e75c:	b003      	add	sp, #12
   1e75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*lock = 1;
   1e760:	2301      	movs	r3, #1
   1e762:	602b      	str	r3, [r5, #0]
   1e764:	e7de      	b.n	1e724 <uart_nrfx_poll_out+0x3c>
   1e766:	bf00      	nop
   1e768:	200042ec 	.word	0x200042ec
   1e76c:	4000211c 	.word	0x4000211c
   1e770:	20005394 	.word	0x20005394
   1e774:	40002008 	.word	0x40002008
   1e778:	4000200c 	.word	0x4000200c

0001e77c <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e77c:	4b08      	ldr	r3, [pc, #32]	; (1e7a0 <uart_nrfx_poll_in+0x24>)
   1e77e:	681a      	ldr	r2, [r3, #0]
{
   1e780:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1e782:	b152      	cbz	r2, 1e79a <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e784:	2000      	movs	r0, #0
   1e786:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1e788:	681b      	ldr	r3, [r3, #0]
   1e78a:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1e78c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   1e78e:	4b05      	ldr	r3, [pc, #20]	; (1e7a4 <uart_nrfx_poll_in+0x28>)
   1e790:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1e794:	700b      	strb	r3, [r1, #0]
}
   1e796:	b002      	add	sp, #8
   1e798:	4770      	bx	lr
		return -1;
   1e79a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e79e:	e7fa      	b.n	1e796 <uart_nrfx_poll_in+0x1a>
   1e7a0:	40002108 	.word	0x40002108
   1e7a4:	40002000 	.word	0x40002000

0001e7a8 <uart_nrfx_fifo_fill>:
{
   1e7a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e7ac:	4e0d      	ldr	r6, [pc, #52]	; (1e7e4 <uart_nrfx_fifo_fill+0x3c>)
	uart_sw_event_txdrdy = 0U;
   1e7ae:	4f0e      	ldr	r7, [pc, #56]	; (1e7e8 <uart_nrfx_fifo_fill+0x40>)
    p_reg->TXD = txd;
   1e7b0:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1e7ec <uart_nrfx_fifo_fill+0x44>
	while ((len - num_tx > 0) &&
   1e7b4:	2400      	movs	r4, #0
   1e7b6:	b2e5      	uxtb	r5, r4
   1e7b8:	1b53      	subs	r3, r2, r5
   1e7ba:	2b00      	cmp	r3, #0
   1e7bc:	dd03      	ble.n	1e7c6 <uart_nrfx_fifo_fill+0x1e>
	       event_txdrdy_check()) {
   1e7be:	f7ff fe13 	bl	1e3e8 <event_txdrdy_check>
   1e7c2:	3401      	adds	r4, #1
	while ((len - num_tx > 0) &&
   1e7c4:	b918      	cbnz	r0, 1e7ce <uart_nrfx_fifo_fill+0x26>
}
   1e7c6:	4628      	mov	r0, r5
   1e7c8:	b002      	add	sp, #8
   1e7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e7ce:	2300      	movs	r3, #0
   1e7d0:	6033      	str	r3, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1e7d2:	6830      	ldr	r0, [r6, #0]
   1e7d4:	9001      	str	r0, [sp, #4]
    (void)dummy;
   1e7d6:	9801      	ldr	r0, [sp, #4]
	uart_sw_event_txdrdy = 0U;
   1e7d8:	703b      	strb	r3, [r7, #0]
    p_reg->TXD = txd;
   1e7da:	5d4b      	ldrb	r3, [r1, r5]
   1e7dc:	f8c8 351c 	str.w	r3, [r8, #1308]	; 0x51c
}
   1e7e0:	e7e9      	b.n	1e7b6 <uart_nrfx_fifo_fill+0xe>
   1e7e2:	bf00      	nop
   1e7e4:	4000211c 	.word	0x4000211c
   1e7e8:	20005394 	.word	0x20005394
   1e7ec:	40002000 	.word	0x40002000

0001e7f0 <uart_nrfx_init>:
    p_reg->OUTSET = set_mask;
   1e7f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   1e7f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSEL.RXD = pselrxd;
   1e7f6:	4d1c      	ldr	r5, [pc, #112]	; (1e868 <uart_nrfx_init+0x78>)
   1e7f8:	2240      	movs	r2, #64	; 0x40
   1e7fa:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e7fe:	2103      	movs	r1, #3
   1e800:	2200      	movs	r2, #0
   1e802:	2408      	movs	r4, #8
   1e804:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   1e808:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   1e80c:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
   1e810:	2406      	movs	r4, #6
   1e812:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   1e816:	2420      	movs	r4, #32
   1e818:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e81c:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
   1e820:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSEL.RTS = pselrts;
   1e824:	2305      	movs	r3, #5
   1e826:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1e82a:	2307      	movs	r3, #7
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1e82c:	68c1      	ldr	r1, [r0, #12]
   1e82e:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
   1e832:	f7ff fe6f 	bl	1e514 <uart_nrfx_configure>
	if (err) {
   1e836:	4604      	mov	r4, r0
   1e838:	b990      	cbnz	r0, 1e860 <uart_nrfx_init+0x70>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1e83a:	2304      	movs	r3, #4
   1e83c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e840:	4b0a      	ldr	r3, [pc, #40]	; (1e86c <uart_nrfx_init+0x7c>)
   1e842:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1e844:	681b      	ldr	r3, [r3, #0]
   1e846:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1e848:	9b01      	ldr	r3, [sp, #4]

#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	/* Simulate that the TXDRDY event is set, so that the transmitter status
	 * is indicated correctly.
	 */
	uart_sw_event_txdrdy = 1U;
   1e84a:	4b09      	ldr	r3, [pc, #36]	; (1e870 <uart_nrfx_init+0x80>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e84c:	2101      	movs	r1, #1
   1e84e:	6029      	str	r1, [r5, #0]
#endif

#if defined(CONFIG_UART_0_ASYNC) || defined(CONFIG_UART_0_INTERRUPT_DRIVEN)

	IRQ_CONNECT(IRQN,
   1e850:	4602      	mov	r2, r0
   1e852:	2002      	movs	r0, #2
	uart_sw_event_txdrdy = 1U;
   1e854:	7019      	strb	r1, [r3, #0]
	IRQ_CONNECT(IRQN,
   1e856:	f7e8 f83b 	bl	68d0 <z_arm_irq_priority_set>
		    IRQ_PRIO,
		    uart_nrfx_isr,
		    DEVICE_GET(uart_nrfx_uart0),
		    0);
	irq_enable(IRQN);
   1e85a:	2002      	movs	r0, #2
   1e85c:	f7e8 f806 	bl	686c <arch_irq_enable>
#if HW_FLOW_CONTROL_AVAILABLE
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
   1e860:	4620      	mov	r0, r4
   1e862:	b003      	add	sp, #12
   1e864:	bd30      	pop	{r4, r5, pc}
   1e866:	bf00      	nop
   1e868:	40002000 	.word	0x40002000
   1e86c:	40002108 	.word	0x40002108
   1e870:	20005394 	.word	0x20005394

0001e874 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   1e874:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1e876:	794b      	ldrb	r3, [r1, #5]
   1e878:	2b01      	cmp	r3, #1
   1e87a:	d029      	beq.n	1e8d0 <uarte_nrfx_configure+0x5c>
   1e87c:	2b03      	cmp	r3, #3
   1e87e:	d124      	bne.n	1e8ca <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1e880:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e882:	798b      	ldrb	r3, [r1, #6]
   1e884:	2b03      	cmp	r3, #3
   1e886:	d120      	bne.n	1e8ca <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1e888:	79cc      	ldrb	r4, [r1, #7]
   1e88a:	b124      	cbz	r4, 1e896 <uarte_nrfx_configure+0x22>
   1e88c:	2c01      	cmp	r4, #1
   1e88e:	d11c      	bne.n	1e8ca <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1e890:	6843      	ldr	r3, [r0, #4]
   1e892:	791b      	ldrb	r3, [r3, #4]
   1e894:	b1cb      	cbz	r3, 1e8ca <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1e896:	790a      	ldrb	r2, [r1, #4]
   1e898:	b112      	cbz	r2, 1e8a0 <uarte_nrfx_configure+0x2c>
   1e89a:	2a02      	cmp	r2, #2
   1e89c:	d115      	bne.n	1e8ca <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1e89e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e8a0:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1e8a2:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1e8a4:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1e8a8:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1e8aa:	d064      	beq.n	1e976 <uarte_nrfx_configure+0x102>
   1e8ac:	d82d      	bhi.n	1e90a <uarte_nrfx_configure+0x96>
   1e8ae:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e8b2:	d063      	beq.n	1e97c <uarte_nrfx_configure+0x108>
   1e8b4:	d816      	bhi.n	1e8e4 <uarte_nrfx_configure+0x70>
   1e8b6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e8ba:	d061      	beq.n	1e980 <uarte_nrfx_configure+0x10c>
   1e8bc:	d80a      	bhi.n	1e8d4 <uarte_nrfx_configure+0x60>
   1e8be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1e8c2:	d060      	beq.n	1e986 <uarte_nrfx_configure+0x112>
   1e8c4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1e8c8:	d060      	beq.n	1e98c <uarte_nrfx_configure+0x118>
   1e8ca:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1e8ce:	e051      	b.n	1e974 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1e8d0:	2600      	movs	r6, #0
   1e8d2:	e7d6      	b.n	1e882 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1e8d4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e8d8:	d05b      	beq.n	1e992 <uarte_nrfx_configure+0x11e>
   1e8da:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e8de:	d1f4      	bne.n	1e8ca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e8e0:	4b36      	ldr	r3, [pc, #216]	; (1e9bc <uarte_nrfx_configure+0x148>)
   1e8e2:	e03c      	b.n	1e95e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e8e4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e8e8:	d056      	beq.n	1e998 <uarte_nrfx_configure+0x124>
   1e8ea:	d807      	bhi.n	1e8fc <uarte_nrfx_configure+0x88>
   1e8ec:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e8f0:	d054      	beq.n	1e99c <uarte_nrfx_configure+0x128>
   1e8f2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e8f6:	d1e8      	bne.n	1e8ca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e8f8:	4b31      	ldr	r3, [pc, #196]	; (1e9c0 <uarte_nrfx_configure+0x14c>)
   1e8fa:	e030      	b.n	1e95e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e8fc:	f647 2712 	movw	r7, #31250	; 0x7a12
   1e900:	42bb      	cmp	r3, r7
   1e902:	d1e2      	bne.n	1e8ca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e904:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e908:	e029      	b.n	1e95e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e90a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e90e:	d047      	beq.n	1e9a0 <uarte_nrfx_configure+0x12c>
   1e910:	d813      	bhi.n	1e93a <uarte_nrfx_configure+0xc6>
   1e912:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e916:	d046      	beq.n	1e9a6 <uarte_nrfx_configure+0x132>
   1e918:	d809      	bhi.n	1e92e <uarte_nrfx_configure+0xba>
   1e91a:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1e91e:	42bb      	cmp	r3, r7
   1e920:	d043      	beq.n	1e9aa <uarte_nrfx_configure+0x136>
   1e922:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e926:	d1d0      	bne.n	1e8ca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e928:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e92c:	e017      	b.n	1e95e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e92e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e932:	d1ca      	bne.n	1e8ca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e934:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e938:	e011      	b.n	1e95e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e93a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e93e:	d037      	beq.n	1e9b0 <uarte_nrfx_configure+0x13c>
   1e940:	d808      	bhi.n	1e954 <uarte_nrfx_configure+0xe0>
   1e942:	4f20      	ldr	r7, [pc, #128]	; (1e9c4 <uarte_nrfx_configure+0x150>)
   1e944:	42bb      	cmp	r3, r7
   1e946:	d036      	beq.n	1e9b6 <uarte_nrfx_configure+0x142>
   1e948:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e94c:	d1bd      	bne.n	1e8ca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1e94e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1e952:	e004      	b.n	1e95e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e954:	4f1c      	ldr	r7, [pc, #112]	; (1e9c8 <uarte_nrfx_configure+0x154>)
   1e956:	42bb      	cmp	r3, r7
   1e958:	d1b7      	bne.n	1e8ca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1e95a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e95e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1e962:	68c3      	ldr	r3, [r0, #12]
   1e964:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1e966:	4334      	orrs	r4, r6
   1e968:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e96a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1e96e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1e972:	2000      	movs	r0, #0
}
   1e974:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1e976:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1e97a:	e7f0      	b.n	1e95e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1e97c:	4b13      	ldr	r3, [pc, #76]	; (1e9cc <uarte_nrfx_configure+0x158>)
   1e97e:	e7ee      	b.n	1e95e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1e980:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e984:	e7eb      	b.n	1e95e <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   1e986:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e98a:	e7e8      	b.n	1e95e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e98c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1e990:	e7e5      	b.n	1e95e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1e992:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e996:	e7e2      	b.n	1e95e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1e998:	4b0d      	ldr	r3, [pc, #52]	; (1e9d0 <uarte_nrfx_configure+0x15c>)
   1e99a:	e7e0      	b.n	1e95e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1e99c:	4b0d      	ldr	r3, [pc, #52]	; (1e9d4 <uarte_nrfx_configure+0x160>)
   1e99e:	e7de      	b.n	1e95e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1e9a0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1e9a4:	e7db      	b.n	1e95e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1e9a6:	4b0c      	ldr	r3, [pc, #48]	; (1e9d8 <uarte_nrfx_configure+0x164>)
   1e9a8:	e7d9      	b.n	1e95e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1e9aa:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e9ae:	e7d6      	b.n	1e95e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1e9b0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e9b4:	e7d3      	b.n	1e95e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1e9b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e9ba:	e7d0      	b.n	1e95e <uarte_nrfx_configure+0xea>
   1e9bc:	0013b000 	.word	0x0013b000
   1e9c0:	004ea000 	.word	0x004ea000
   1e9c4:	0003d090 	.word	0x0003d090
   1e9c8:	000f4240 	.word	0x000f4240
   1e9cc:	00275000 	.word	0x00275000
   1e9d0:	0075c000 	.word	0x0075c000
   1e9d4:	003af000 	.word	0x003af000
   1e9d8:	013a9000 	.word	0x013a9000

0001e9dc <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1e9dc:	b570      	push	{r4, r5, r6, lr}
   1e9de:	2200      	movs	r2, #0
   1e9e0:	4605      	mov	r5, r0
   1e9e2:	2101      	movs	r1, #1
   1e9e4:	2028      	movs	r0, #40	; 0x28
   1e9e6:	f7e7 ff73 	bl	68d0 <z_arm_irq_priority_set>
   1e9ea:	2028      	movs	r0, #40	; 0x28
   1e9ec:	f7e7 ff3e 	bl	686c <arch_irq_enable>
	return config->uarte_regs;
   1e9f0:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1e9f2:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   1e9f4:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   1e9f6:	4b1b      	ldr	r3, [pc, #108]	; (1ea64 <uarte_1_init+0x88>)
   1e9f8:	2204      	movs	r2, #4
   1e9fa:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e9fe:	2203      	movs	r2, #3
   1ea00:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
   1ea04:	2200      	movs	r2, #0
   1ea06:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    p_reg->PSEL.TXD = pseltxd;
   1ea0a:	2322      	movs	r3, #34	; 0x22
   1ea0c:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1ea10:	2321      	movs	r3, #33	; 0x21
   1ea12:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.RTS = pselrts;
   1ea16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ea1a:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1ea1e:	4631      	mov	r1, r6
    p_reg->PSEL.CTS = pselcts;
   1ea20:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1ea24:	4628      	mov	r0, r5
   1ea26:	f7ff ff25 	bl	1e874 <uarte_nrfx_configure>
	if (err) {
   1ea2a:	4602      	mov	r2, r0
   1ea2c:	b9b8      	cbnz	r0, 1ea5e <uarte_1_init+0x82>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ea2e:	2308      	movs	r3, #8
   1ea30:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   1ea34:	f44f 7188 	mov.w	r1, #272	; 0x110
   1ea38:	4620      	mov	r0, r4
   1ea3a:	f006 fe20 	bl	2567e <nrf_uarte_event_clear>
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   1ea3e:	68b1      	ldr	r1, [r6, #8]
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1ea40:	f106 0310 	add.w	r3, r6, #16

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1ea44:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ea48:	6889      	ldr	r1, [r1, #8]
    p_reg->RXD.MAXCNT = length;
   1ea4a:	2301      	movs	r3, #1
   1ea4c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ea50:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ea52:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ea56:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ea5a:	60a3      	str	r3, [r4, #8]
   1ea5c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(1);
   1ea5e:	4610      	mov	r0, r2
   1ea60:	bd70      	pop	{r4, r5, r6, pc}
   1ea62:	bf00      	nop
   1ea64:	50000300 	.word	0x50000300

0001ea68 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1ea68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea6a:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1ea6c:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1ea6e:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1ea70:	f04f 0520 	mov.w	r5, #32
   1ea74:	f3ef 8011 	mrs	r0, BASEPRI
   1ea78:	f385 8811 	msr	BASEPRI, r5
   1ea7c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1ea80:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1ea82:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1ea86:	1ba4      	subs	r4, r4, r6
   1ea88:	403c      	ands	r4, r7
	if (available < len) {
   1ea8a:	42a2      	cmp	r2, r4
		len = available;
   1ea8c:	bf88      	it	hi
   1ea8e:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1ea90:	eb06 0c02 	add.w	ip, r6, r2
   1ea94:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1ea98:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1ea9a:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1ea9e:	f380 8811 	msr	BASEPRI, r0
   1eaa2:	f3bf 8f6f 	isb	sy
   1eaa6:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1eaa8:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1eaaa:	4282      	cmp	r2, r0
   1eaac:	d119      	bne.n	1eae2 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1eaae:	4576      	cmp	r6, lr
   1eab0:	d10d      	bne.n	1eace <rng_pool_get+0x66>
	__asm__ volatile(
   1eab2:	f04f 0520 	mov.w	r5, #32
   1eab6:	f3ef 8211 	mrs	r2, BASEPRI
   1eaba:	f385 8811 	msr	BASEPRI, r5
   1eabe:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1eac2:	781d      	ldrb	r5, [r3, #0]
   1eac4:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1eac6:	f382 8811 	msr	BASEPRI, r2
   1eaca:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1eace:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1ead0:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1ead2:	b288      	uxth	r0, r1
	available = available - len;
   1ead4:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1ead6:	428b      	cmp	r3, r1
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)rng_task);
}

NRF_STATIC_INLINE void nrf_rng_task_trigger(NRF_RNG_Type * p_reg, nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ead8:	bf22      	ittt	cs
   1eada:	4b06      	ldrcs	r3, [pc, #24]	; (1eaf4 <rng_pool_get+0x8c>)
   1eadc:	2201      	movcs	r2, #1
   1eade:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1eae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1eae2:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1eae6:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1eae8:	f89c c005 	ldrb.w	ip, [ip, #5]
   1eaec:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1eaf0:	403d      	ands	r5, r7
   1eaf2:	e7da      	b.n	1eaaa <rng_pool_get+0x42>
   1eaf4:	4000d000 	.word	0x4000d000

0001eaf8 <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, uint8_t *buf, uint16_t len)
{
   1eaf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1eafc:	4f13      	ldr	r7, [pc, #76]	; (1eb4c <entropy_nrf5_get_entropy+0x54>)
   1eafe:	460d      	mov	r5, r1
   1eb00:	4614      	mov	r4, r2

	while (len) {
		uint16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1eb02:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1eb06:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1eb0a:	b914      	cbnz	r4, 1eb12 <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   1eb0c:	4620      	mov	r0, r4
   1eb0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1eb12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1eb16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1eb1a:	4638      	mov	r0, r7
   1eb1c:	f001 f8c4 	bl	1fca8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1eb20:	4622      	mov	r2, r4
   1eb22:	4629      	mov	r1, r5
   1eb24:	4640      	mov	r0, r8
   1eb26:	f7ff ff9f 	bl	1ea68 <rng_pool_get>
   1eb2a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1eb2c:	4638      	mov	r0, r7
   1eb2e:	f001 f895 	bl	1fc5c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1eb32:	b93e      	cbnz	r6, 1eb44 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1eb34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1eb38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1eb3c:	4648      	mov	r0, r9
   1eb3e:	f001 f8b3 	bl	1fca8 <z_impl_k_sem_take>
			continue;
   1eb42:	e7e2      	b.n	1eb0a <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1eb44:	1ba4      	subs	r4, r4, r6
   1eb46:	b2a4      	uxth	r4, r4
		buf += bytes;
   1eb48:	4435      	add	r5, r6
   1eb4a:	e7de      	b.n	1eb0a <entropy_nrf5_get_entropy+0x12>
   1eb4c:	200042f0 	.word	0x200042f0

0001eb50 <random_byte_get>:
{
   1eb50:	b082      	sub	sp, #8
	__asm__ volatile(
   1eb52:	f04f 0320 	mov.w	r3, #32
   1eb56:	f3ef 8211 	mrs	r2, BASEPRI
   1eb5a:	f383 8811 	msr	BASEPRI, r3
   1eb5e:	f3bf 8f6f 	isb	sy
#endif
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1eb62:	4b0a      	ldr	r3, [pc, #40]	; (1eb8c <random_byte_get+0x3c>)
   1eb64:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1eb66:	b171      	cbz	r1, 1eb86 <random_byte_get+0x36>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1eb68:	4909      	ldr	r1, [pc, #36]	; (1eb90 <random_byte_get+0x40>)
   1eb6a:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1eb6e:	2100      	movs	r1, #0
   1eb70:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1eb72:	681b      	ldr	r3, [r3, #0]
   1eb74:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1eb76:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1eb78:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1eb7a:	f382 8811 	msr	BASEPRI, r2
   1eb7e:	f3bf 8f6f 	isb	sy
}
   1eb82:	b002      	add	sp, #8
   1eb84:	4770      	bx	lr
	int retval = -EAGAIN;
   1eb86:	f06f 000a 	mvn.w	r0, #10
   1eb8a:	e7f6      	b.n	1eb7a <random_byte_get+0x2a>
   1eb8c:	4000d100 	.word	0x4000d100
   1eb90:	4000d000 	.word	0x4000d000

0001eb94 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1eb94:	43db      	mvns	r3, r3
{
   1eb96:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1eb9a:	f013 0501 	ands.w	r5, r3, #1
{
   1eb9e:	460e      	mov	r6, r1
   1eba0:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1eba2:	d005      	beq.n	1ebb0 <entropy_nrf5_get_entropy_isr+0x1c>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1eba4:	4822      	ldr	r0, [pc, #136]	; (1ec30 <entropy_nrf5_get_entropy_isr+0x9c>)
   1eba6:	f7ff ff5f 	bl	1ea68 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1ebaa:	b002      	add	sp, #8
   1ebac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1ebb0:	2a00      	cmp	r2, #0
   1ebb2:	d035      	beq.n	1ec20 <entropy_nrf5_get_entropy_isr+0x8c>
	__asm__ volatile(
   1ebb4:	f04f 0320 	mov.w	r3, #32
   1ebb8:	f3ef 8811 	mrs	r8, BASEPRI
   1ebbc:	f383 8811 	msr	BASEPRI, r3
   1ebc0:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1ebc4:	200d      	movs	r0, #13
   1ebc6:	f7e7 fe75 	bl	68b4 <arch_irq_is_enabled>
   1ebca:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1ebcc:	200d      	movs	r0, #13
   1ebce:	f7e7 fe5d 	bl	688c <arch_irq_disable>
	__asm__ volatile(
   1ebd2:	f388 8811 	msr	BASEPRI, r8
   1ebd6:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ebda:	4a16      	ldr	r2, [pc, #88]	; (1ec34 <entropy_nrf5_get_entropy_isr+0xa0>)
   1ebdc:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ebde:	6813      	ldr	r3, [r2, #0]
   1ebe0:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1ebe2:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ebe4:	4b14      	ldr	r3, [pc, #80]	; (1ec38 <entropy_nrf5_get_entropy_isr+0xa4>)
   1ebe6:	2101      	movs	r1, #1
   1ebe8:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ebea:	4914      	ldr	r1, [pc, #80]	; (1ec3c <entropy_nrf5_get_entropy_isr+0xa8>)
   1ebec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1ebf0:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1ebf4:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ebf6:	4691      	mov	r9, r2
   1ebf8:	468a      	mov	sl, r1
   1ebfa:	4698      	mov	r8, r3
   1ebfc:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1ec00:	b183      	cbz	r3, 1ec24 <entropy_nrf5_get_entropy_isr+0x90>
			byte = random_byte_get();
   1ec02:	f7ff ffa5 	bl	1eb50 <random_byte_get>
			if (byte < 0) {
   1ec06:	1e03      	subs	r3, r0, #0
   1ec08:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1ec0c:	dbf6      	blt.n	1ebfc <entropy_nrf5_get_entropy_isr+0x68>
   1ec0e:	3d01      	subs	r5, #1
   1ec10:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1ec12:	5573      	strb	r3, [r6, r5]
		} while (len);
   1ec14:	2d00      	cmp	r5, #0
   1ec16:	d1f1      	bne.n	1ebfc <entropy_nrf5_get_entropy_isr+0x68>
		if (irq_enabled) {
   1ec18:	b117      	cbz	r7, 1ec20 <entropy_nrf5_get_entropy_isr+0x8c>
			irq_enable(IRQN);
   1ec1a:	200d      	movs	r0, #13
   1ec1c:	f7e7 fe26 	bl	686c <arch_irq_enable>
	return cnt;
   1ec20:	4620      	mov	r0, r4
   1ec22:	e7c2      	b.n	1ebaa <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1ec24:	f3bf 8f4f 	dsb	sy
				__WFE();
   1ec28:	bf20      	wfe
				__SEV();
   1ec2a:	bf40      	sev
				__WFE();
   1ec2c:	bf20      	wfe
   1ec2e:	e7e5      	b.n	1ebfc <entropy_nrf5_get_entropy_isr+0x68>
   1ec30:	20004320 	.word	0x20004320
   1ec34:	4000d100 	.word	0x4000d100
   1ec38:	4000d000 	.word	0x4000d000
   1ec3c:	e000e100 	.word	0xe000e100

0001ec40 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   1ec40:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ec42:	4c1a      	ldr	r4, [pc, #104]	; (1ecac <entropy_nrf5_init+0x6c>)
   1ec44:	2201      	movs	r2, #1
   1ec46:	4611      	mov	r1, r2
   1ec48:	4620      	mov	r0, r4
   1ec4a:	f007 f8fc 	bl	25e46 <z_impl_k_sem_init>
   1ec4e:	2201      	movs	r2, #1
   1ec50:	2100      	movs	r1, #0
   1ec52:	f104 0018 	add.w	r0, r4, #24
   1ec56:	f007 f8f6 	bl	25e46 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1ec5a:	f240 4307 	movw	r3, #1031	; 0x407
   1ec5e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1ec62:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1ec66:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1ec68:	230c      	movs	r3, #12
   1ec6a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1ec6e:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1ec70:	4b0f      	ldr	r3, [pc, #60]	; (1ecb0 <entropy_nrf5_init+0x70>)
   1ec72:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1ec76:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1ec7a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1ec7e:	f042 0201 	orr.w	r2, r2, #1
   1ec82:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ec86:	4a0b      	ldr	r2, [pc, #44]	; (1ecb4 <entropy_nrf5_init+0x74>)
   1ec88:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ec8a:	6812      	ldr	r2, [r2, #0]
   1ec8c:	9201      	str	r2, [sp, #4]
    p_reg->INTENSET = mask;
   1ec8e:	2101      	movs	r1, #1
    (void)dummy;
   1ec90:	9a01      	ldr	r2, [sp, #4]
    p_reg->INTENSET = mask;
   1ec92:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1ec96:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ec98:	6019      	str	r1, [r3, #0]
   1ec9a:	200d      	movs	r0, #13
   1ec9c:	f7e7 fe18 	bl	68d0 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1eca0:	200d      	movs	r0, #13
   1eca2:	f7e7 fde3 	bl	686c <arch_irq_enable>

	return 0;
}
   1eca6:	4628      	mov	r0, r5
   1eca8:	b003      	add	sp, #12
   1ecaa:	bd30      	pop	{r4, r5, pc}
   1ecac:	200042f0 	.word	0x200042f0
   1ecb0:	4000d000 	.word	0x4000d000
   1ecb4:	4000d100 	.word	0x4000d100

0001ecb8 <isr>:
{
   1ecb8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1ecba:	f7ff ff49 	bl	1eb50 <random_byte_get>
	if (byte < 0) {
   1ecbe:	2800      	cmp	r0, #0
   1ecc0:	db20      	blt.n	1ed04 <isr+0x4c>
	uint8_t last  = rngp->last;
   1ecc2:	4b17      	ldr	r3, [pc, #92]	; (1ed20 <isr+0x68>)
   1ecc4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1ecc8:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1eccc:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1ecd0:	1a51      	subs	r1, r2, r1
   1ecd2:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1ecd6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1ecd8:	d10d      	bne.n	1ecf6 <isr+0x3e>
	uint8_t last  = rngp->last;
   1ecda:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1ecde:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1ece2:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1ece6:	1a51      	subs	r1, r2, r1
   1ece8:	ea34 0101 	bics.w	r1, r4, r1
   1ecec:	d10b      	bne.n	1ed06 <isr+0x4e>
   1ecee:	4b0d      	ldr	r3, [pc, #52]	; (1ed24 <isr+0x6c>)
   1ecf0:	2201      	movs	r2, #1
   1ecf2:	601a      	str	r2, [r3, #0]
}
   1ecf4:	e00e      	b.n	1ed14 <isr+0x5c>
	rngp->buffer[last] = byte;
   1ecf6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ecf8:	3201      	adds	r2, #1
   1ecfa:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ecfc:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1ed00:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1ed04:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1ed06:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ed08:	3201      	adds	r2, #1
   1ed0a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ed0c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1ed10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1ed14:	4804      	ldr	r0, [pc, #16]	; (1ed28 <isr+0x70>)
}
   1ed16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ed1a:	f000 bf9f 	b.w	1fc5c <z_impl_k_sem_give>
   1ed1e:	bf00      	nop
   1ed20:	200042f0 	.word	0x200042f0
   1ed24:	4000d004 	.word	0x4000d004
   1ed28:	20004308 	.word	0x20004308

0001ed2c <nrf52_errata_136>:
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1ed2c:	4b0a      	ldr	r3, [pc, #40]	; (1ed58 <nrf52_errata_136+0x2c>)
   1ed2e:	681b      	ldr	r3, [r3, #0]
   1ed30:	1c5a      	adds	r2, r3, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ed32:	bf05      	ittet	eq
   1ed34:	4b09      	ldreq	r3, [pc, #36]	; (1ed5c <nrf52_errata_136+0x30>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ed36:	4a0a      	ldreq	r2, [pc, #40]	; (1ed60 <nrf52_errata_136+0x34>)
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1ed38:	4a0a      	ldrne	r2, [pc, #40]	; (1ed64 <nrf52_errata_136+0x38>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ed3a:	6810      	ldreq	r0, [r2, #0]
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ed3c:	bf0a      	itet	eq
   1ed3e:	781b      	ldrbeq	r3, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   1ed40:	6810      	ldrne	r0, [r2, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ed42:	f3c0 1003 	ubfxeq	r0, r0, #4, #4
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1ed46:	2b08      	cmp	r3, #8
   1ed48:	d104      	bne.n	1ed54 <nrf52_errata_136+0x28>
            {
                switch(var2)
   1ed4a:	2803      	cmp	r0, #3
   1ed4c:	bf8c      	ite	hi
   1ed4e:	2000      	movhi	r0, #0
   1ed50:	2001      	movls	r0, #1
   1ed52:	4770      	bx	lr
                    case 0x01ul:
                        return true;
                }
            }
        #endif
        return false;
   1ed54:	2000      	movs	r0, #0
    #endif
}
   1ed56:	4770      	bx	lr
   1ed58:	10000130 	.word	0x10000130
   1ed5c:	f0000fe0 	.word	0xf0000fe0
   1ed60:	f0000fe8 	.word	0xf0000fe8
   1ed64:	10000134 	.word	0x10000134

0001ed68 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ed68:	4b06      	ldr	r3, [pc, #24]	; (1ed84 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1ed6a:	681b      	ldr	r3, [r3, #0]
   1ed6c:	2b08      	cmp	r3, #8
   1ed6e:	d106      	bne.n	1ed7e <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1ed70:	4b05      	ldr	r3, [pc, #20]	; (1ed88 <nrf52_errata_103+0x20>)
   1ed72:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1ed74:	2b03      	cmp	r3, #3
   1ed76:	d802      	bhi.n	1ed7e <nrf52_errata_103+0x16>
   1ed78:	4a04      	ldr	r2, [pc, #16]	; (1ed8c <nrf52_errata_103+0x24>)
   1ed7a:	5cd0      	ldrb	r0, [r2, r3]
   1ed7c:	4770      	bx	lr
                    case 0x03ul:
                        return false;
                }
            }
        #endif
        return false;
   1ed7e:	2000      	movs	r0, #0
    #endif
}
   1ed80:	4770      	bx	lr
   1ed82:	bf00      	nop
   1ed84:	10000130 	.word	0x10000130
   1ed88:	10000134 	.word	0x10000134
   1ed8c:	0002a6b9 	.word	0x0002a6b9

0001ed90 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1ed90:	b508      	push	{r3, lr}
        NRF_P1->PIN_CNF[9]  = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
   1ed92:	f7ff ffcb 	bl	1ed2c <nrf52_errata_136>
   1ed96:	b140      	cbz	r0, 1edaa <SystemInit+0x1a>
        NRF_CLOCK->EVENTS_DONE = 0;
   1ed98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ed9c:	2200      	movs	r2, #0
   1ed9e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
   1eda2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   1eda6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }
    
    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
   1edaa:	f7ff ffbf 	bl	1ed2c <nrf52_errata_136>
   1edae:	2800      	cmp	r0, #0
   1edb0:	d046      	beq.n	1ee40 <SystemInit+0xb0>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1edb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1edb6:	4b58      	ldr	r3, [pc, #352]	; (1ef18 <SystemInit+0x188>)
   1edb8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1edbc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1edc0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1edc4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1edc8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1edcc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1edd0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1edd4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1edd8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1eddc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1ede0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1ede4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1ede8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1edec:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1edf0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1edf4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1edf8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1edfc:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1ee00:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1ee04:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1ee08:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1ee0c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1ee10:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1ee14:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1ee18:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1ee1c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1ee20:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1ee24:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1ee28:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1ee2c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1ee30:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1ee34:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1ee38:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1ee3c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }
    
    /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_98()){
   1ee40:	f7ff ff92 	bl	1ed68 <nrf52_errata_103>
   1ee44:	b110      	cbz	r0, 1ee4c <SystemInit+0xbc>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1ee46:	4b35      	ldr	r3, [pc, #212]	; (1ef1c <SystemInit+0x18c>)
   1ee48:	4a35      	ldr	r2, [pc, #212]	; (1ef20 <SystemInit+0x190>)
   1ee4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_103()){
   1ee4c:	f7ff ff8c 	bl	1ed68 <nrf52_errata_103>
   1ee50:	b118      	cbz	r0, 1ee5a <SystemInit+0xca>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1ee52:	4b34      	ldr	r3, [pc, #208]	; (1ef24 <SystemInit+0x194>)
   1ee54:	22fb      	movs	r2, #251	; 0xfb
   1ee56:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    }
    
    /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_115()){
   1ee5a:	f7ff ff85 	bl	1ed68 <nrf52_errata_103>
   1ee5e:	b148      	cbz	r0, 1ee74 <SystemInit+0xe4>
        *(volatile uint32_t *)0x40000EE4ul = (*(volatile uint32_t *)0x40000EE4ul & 0xFFFFFFF0ul) | (*(uint32_t *)0x10000258ul & 0x0000000Ful);
   1ee60:	4931      	ldr	r1, [pc, #196]	; (1ef28 <SystemInit+0x198>)
   1ee62:	4b32      	ldr	r3, [pc, #200]	; (1ef2c <SystemInit+0x19c>)
   1ee64:	680a      	ldr	r2, [r1, #0]
   1ee66:	681b      	ldr	r3, [r3, #0]
   1ee68:	f022 020f 	bic.w	r2, r2, #15
   1ee6c:	f003 030f 	and.w	r3, r3, #15
   1ee70:	4313      	orrs	r3, r2
   1ee72:	600b      	str	r3, [r1, #0]
    }
    
    /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_120()){
   1ee74:	f7ff ff78 	bl	1ed68 <nrf52_errata_103>
   1ee78:	b118      	cbz	r0, 1ee82 <SystemInit+0xf2>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1ee7a:	4b2d      	ldr	r3, [pc, #180]	; (1ef30 <SystemInit+0x1a0>)
   1ee7c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ee80:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
   1ee82:	f7ff ff53 	bl	1ed2c <nrf52_errata_136>
   1ee86:	b148      	cbz	r0, 1ee9c <SystemInit+0x10c>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1ee88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ee8c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1ee90:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1ee92:	bf44      	itt	mi
   1ee94:	f06f 0201 	mvnmi.w	r2, #1
   1ee98:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1ee9c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1eea0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1eea4:	2a00      	cmp	r2, #0
   1eea6:	db03      	blt.n	1eeb0 <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1eea8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1eeac:	2b00      	cmp	r3, #0
   1eeae:	da2f      	bge.n	1ef10 <SystemInit+0x180>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   1eeb0:	4b20      	ldr	r3, [pc, #128]	; (1ef34 <SystemInit+0x1a4>)
   1eeb2:	2201      	movs	r2, #1
   1eeb4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1eeb8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1eebc:	2a00      	cmp	r2, #0
   1eebe:	d0fb      	beq.n	1eeb8 <SystemInit+0x128>
            NRF_UICR->PSELRESET[0] = 18;
   1eec0:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   1eec4:	2112      	movs	r1, #18
   1eec6:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1eeca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1eece:	2a00      	cmp	r2, #0
   1eed0:	d0fb      	beq.n	1eeca <SystemInit+0x13a>
            NRF_UICR->PSELRESET[1] = 18;
   1eed2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1eed6:	2212      	movs	r2, #18
   1eed8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1eedc:	4b15      	ldr	r3, [pc, #84]	; (1ef34 <SystemInit+0x1a4>)
   1eede:	461a      	mov	r2, r3
   1eee0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
   1eee4:	2900      	cmp	r1, #0
   1eee6:	d0fb      	beq.n	1eee0 <SystemInit+0x150>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   1eee8:	2100      	movs	r1, #0
   1eeea:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1eeee:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1eef2:	2b00      	cmp	r3, #0
   1eef4:	d0fb      	beq.n	1eeee <SystemInit+0x15e>
   1eef6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1eefa:	490f      	ldr	r1, [pc, #60]	; (1ef38 <SystemInit+0x1a8>)
   1eefc:	4b0f      	ldr	r3, [pc, #60]	; (1ef3c <SystemInit+0x1ac>)
   1eefe:	68ca      	ldr	r2, [r1, #12]
   1ef00:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1ef04:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1ef06:	60cb      	str	r3, [r1, #12]
   1ef08:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1ef0c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1ef0e:	e7fd      	b.n	1ef0c <SystemInit+0x17c>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1ef10:	4b0b      	ldr	r3, [pc, #44]	; (1ef40 <SystemInit+0x1b0>)
   1ef12:	4a0c      	ldr	r2, [pc, #48]	; (1ef44 <SystemInit+0x1b4>)
   1ef14:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1ef16:	bd08      	pop	{r3, pc}
   1ef18:	4000c000 	.word	0x4000c000
   1ef1c:	4000568c 	.word	0x4000568c
   1ef20:	00038148 	.word	0x00038148
   1ef24:	4000f000 	.word	0x4000f000
   1ef28:	40000ee4 	.word	0x40000ee4
   1ef2c:	10000258 	.word	0x10000258
   1ef30:	40029640 	.word	0x40029640
   1ef34:	4001e000 	.word	0x4001e000
   1ef38:	e000ed00 	.word	0xe000ed00
   1ef3c:	05fa0004 	.word	0x05fa0004
   1ef40:	2000067c 	.word	0x2000067c
   1ef44:	03d09000 	.word	0x03d09000

0001ef48 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1ef48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ef4a:	4b09      	ldr	r3, [pc, #36]	; (1ef70 <z_sys_init_run_level+0x28>)
   1ef4c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1ef50:	3001      	adds	r0, #1
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
   1ef52:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ef54:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1ef58:	42a6      	cmp	r6, r4
   1ef5a:	d800      	bhi.n	1ef5e <z_sys_init_run_level+0x16>
			}
		}
	}
}
   1ef5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
   1ef5e:	e9d4 3500 	ldrd	r3, r5, [r4]
   1ef62:	4628      	mov	r0, r5
   1ef64:	4798      	blx	r3
		if (retval != 0) {
   1ef66:	b108      	cbz	r0, 1ef6c <z_sys_init_run_level+0x24>
			if (dev) {
   1ef68:	b105      	cbz	r5, 1ef6c <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
   1ef6a:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ef6c:	3408      	adds	r4, #8
   1ef6e:	e7f3      	b.n	1ef58 <z_sys_init_run_level+0x10>
   1ef70:	00027f80 	.word	0x00027f80

0001ef74 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1ef74:	4b0f      	ldr	r3, [pc, #60]	; (1efb4 <z_impl_device_get_binding+0x40>)
{
   1ef76:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1ef78:	4c0f      	ldr	r4, [pc, #60]	; (1efb8 <z_impl_device_get_binding+0x44>)
{
   1ef7a:	4605      	mov	r5, r0
   1ef7c:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
   1ef7e:	429c      	cmp	r4, r3
   1ef80:	d104      	bne.n	1ef8c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1ef82:	4c0d      	ldr	r4, [pc, #52]	; (1efb8 <z_impl_device_get_binding+0x44>)
   1ef84:	42b4      	cmp	r4, r6
   1ef86:	d108      	bne.n	1ef9a <z_impl_device_get_binding+0x26>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
   1ef88:	2400      	movs	r4, #0
   1ef8a:	e010      	b.n	1efae <z_impl_device_get_binding+0x3a>
		if (z_device_ready(dev) && (dev->name == name)) {
   1ef8c:	68a2      	ldr	r2, [r4, #8]
   1ef8e:	b112      	cbz	r2, 1ef96 <z_impl_device_get_binding+0x22>
   1ef90:	6822      	ldr	r2, [r4, #0]
   1ef92:	42aa      	cmp	r2, r5
   1ef94:	d00b      	beq.n	1efae <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ef96:	3410      	adds	r4, #16
   1ef98:	e7f1      	b.n	1ef7e <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1ef9a:	68a3      	ldr	r3, [r4, #8]
   1ef9c:	b90b      	cbnz	r3, 1efa2 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ef9e:	3410      	adds	r4, #16
   1efa0:	e7f0      	b.n	1ef84 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1efa2:	6821      	ldr	r1, [r4, #0]
   1efa4:	4628      	mov	r0, r5
   1efa6:	f003 fb9f 	bl	226e8 <strcmp>
   1efaa:	2800      	cmp	r0, #0
   1efac:	d1f7      	bne.n	1ef9e <z_impl_device_get_binding+0x2a>
}
   1efae:	4620      	mov	r0, r4
   1efb0:	bd70      	pop	{r4, r5, r6, pc}
   1efb2:	bf00      	nop
   1efb4:	20000784 	.word	0x20000784
   1efb8:	20000714 	.word	0x20000714

0001efbc <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1efbc:	b510      	push	{r4, lr}
   1efbe:	4604      	mov	r4, r0
	z_impl_log_panic();
   1efc0:	f7e6 fcda 	bl	5978 <z_impl_log_panic>
   1efc4:	4b06      	ldr	r3, [pc, #24]	; (1efe0 <k_sys_fatal_error_handler+0x24>)
   1efc6:	4907      	ldr	r1, [pc, #28]	; (1efe4 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1efc8:	4807      	ldr	r0, [pc, #28]	; (1efe8 <k_sys_fatal_error_handler+0x2c>)
   1efca:	1ac9      	subs	r1, r1, r3
   1efcc:	08c9      	lsrs	r1, r1, #3
   1efce:	0189      	lsls	r1, r1, #6
   1efd0:	f041 0101 	orr.w	r1, r1, #1
   1efd4:	f001 fdf4 	bl	20bc0 <log_0>
	arch_system_halt(reason);
   1efd8:	4620      	mov	r0, r4
   1efda:	f006 fc81 	bl	258e0 <arch_system_halt>
   1efde:	bf00      	nop
   1efe0:	00026544 	.word	0x00026544
   1efe4:	0002667c 	.word	0x0002667c
   1efe8:	0002a6bd 	.word	0x0002a6bd

0001efec <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1efec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1eff0:	4605      	mov	r5, r0
   1eff2:	460f      	mov	r7, r1
	__asm__ volatile(
   1eff4:	f04f 0320 	mov.w	r3, #32
   1eff8:	f3ef 8811 	mrs	r8, BASEPRI
   1effc:	f383 8811 	msr	BASEPRI, r3
   1f000:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1f004:	f000 fe24 	bl	1fc50 <z_impl_k_current_get>
   1f008:	4c21      	ldr	r4, [pc, #132]	; (1f090 <z_fatal_error+0xa4>)
   1f00a:	4b22      	ldr	r3, [pc, #136]	; (1f094 <z_fatal_error+0xa8>)
   1f00c:	1ae4      	subs	r4, r4, r3
   1f00e:	2d04      	cmp	r5, #4
   1f010:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1f014:	bf96      	itet	ls
   1f016:	4a20      	ldrls	r2, [pc, #128]	; (1f098 <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f018:	4a20      	ldrhi	r2, [pc, #128]	; (1f09c <z_fatal_error+0xb0>)
   1f01a:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   1f01e:	01a4      	lsls	r4, r4, #6
   1f020:	f044 0301 	orr.w	r3, r4, #1
   1f024:	4606      	mov	r6, r0
   1f026:	f8ad 3000 	strh.w	r3, [sp]
   1f02a:	481d      	ldr	r0, [pc, #116]	; (1f0a0 <z_fatal_error+0xb4>)
   1f02c:	2300      	movs	r3, #0
   1f02e:	4629      	mov	r1, r5
   1f030:	f001 fe00 	bl	20c34 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f034:	b147      	cbz	r7, 1f048 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f036:	69fb      	ldr	r3, [r7, #28]
   1f038:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f03c:	b123      	cbz	r3, 1f048 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1f03e:	4819      	ldr	r0, [pc, #100]	; (1f0a4 <z_fatal_error+0xb8>)
   1f040:	f044 0101 	orr.w	r1, r4, #1
   1f044:	f001 fdbc 	bl	20bc0 <log_0>
	const char *thread_name = k_thread_name_get(thread);
   1f048:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f04a:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   1f04e:	f006 ff15 	bl	25e7c <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1f052:	b1d0      	cbz	r0, 1f08a <z_fatal_error+0x9e>
   1f054:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1f056:	4b14      	ldr	r3, [pc, #80]	; (1f0a8 <z_fatal_error+0xbc>)
   1f058:	2a00      	cmp	r2, #0
   1f05a:	bf08      	it	eq
   1f05c:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1f05e:	f7e6 fb09 	bl	5674 <log_strdup>
   1f062:	4623      	mov	r3, r4
   1f064:	4602      	mov	r2, r0
   1f066:	4631      	mov	r1, r6
   1f068:	4810      	ldr	r0, [pc, #64]	; (1f0ac <z_fatal_error+0xc0>)
   1f06a:	f001 fdca 	bl	20c02 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1f06e:	4639      	mov	r1, r7
   1f070:	4628      	mov	r0, r5
   1f072:	f7ff ffa3 	bl	1efbc <k_sys_fatal_error_handler>
	__asm__ volatile(
   1f076:	f388 8811 	msr	BASEPRI, r8
   1f07a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f07e:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1f080:	b002      	add	sp, #8
   1f082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f086:	f7e7 bf51 	b.w	6f2c <z_impl_k_thread_abort>
		thread_name = "unknown";
   1f08a:	4807      	ldr	r0, [pc, #28]	; (1f0a8 <z_fatal_error+0xbc>)
   1f08c:	e7e7      	b.n	1f05e <z_fatal_error+0x72>
   1f08e:	bf00      	nop
   1f090:	0002667c 	.word	0x0002667c
   1f094:	00026544 	.word	0x00026544
   1f098:	00027f98 	.word	0x00027f98
   1f09c:	0002a6cc 	.word	0x0002a6cc
   1f0a0:	0002a6da 	.word	0x0002a6da
   1f0a4:	0002a702 	.word	0x0002a702
   1f0a8:	00029049 	.word	0x00029049
   1f0ac:	0002a723 	.word	0x0002a723

0001f0b0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1f0b0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1f0b2:	4d0b      	ldr	r5, [pc, #44]	; (1f0e0 <idle+0x30>)
	__asm__ volatile(
   1f0b4:	f04f 0220 	mov.w	r2, #32
   1f0b8:	f3ef 8311 	mrs	r3, BASEPRI
   1f0bc:	f382 8811 	msr	BASEPRI, r2
   1f0c0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1f0c4:	f006 ff75 	bl	25fb2 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f0c8:	2101      	movs	r1, #1
   1f0ca:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
   1f0cc:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f0ce:	bfd8      	it	le
   1f0d0:	4608      	movle	r0, r1
   1f0d2:	f006 ff7e 	bl	25fd2 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1f0d6:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1f0d8:	f7e7 fc5c 	bl	6994 <arch_cpu_idle>
}
   1f0dc:	e7ea      	b.n	1f0b4 <idle+0x4>
   1f0de:	bf00      	nop
   1f0e0:	20004c80 	.word	0x20004c80

0001f0e4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1f0e4:	4802      	ldr	r0, [pc, #8]	; (1f0f0 <z_bss_zero+0xc>)
   1f0e6:	4a03      	ldr	r2, [pc, #12]	; (1f0f4 <z_bss_zero+0x10>)
   1f0e8:	2100      	movs	r1, #0
   1f0ea:	1a12      	subs	r2, r2, r0
   1f0ec:	f003 bb43 	b.w	22776 <memset>
   1f0f0:	200009e8 	.word	0x200009e8
   1f0f4:	200053b8 	.word	0x200053b8

0001f0f8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1f0f8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1f0fa:	4806      	ldr	r0, [pc, #24]	; (1f114 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1f0fc:	4a06      	ldr	r2, [pc, #24]	; (1f118 <z_data_copy+0x20>)
   1f0fe:	4907      	ldr	r1, [pc, #28]	; (1f11c <z_data_copy+0x24>)
   1f100:	1a12      	subs	r2, r2, r0
   1f102:	f003 fb0d 	bl	22720 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1f106:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1f10a:	4a05      	ldr	r2, [pc, #20]	; (1f120 <z_data_copy+0x28>)
   1f10c:	4905      	ldr	r1, [pc, #20]	; (1f124 <z_data_copy+0x2c>)
   1f10e:	4806      	ldr	r0, [pc, #24]	; (1f128 <z_data_copy+0x30>)
   1f110:	f003 bb06 	b.w	22720 <memcpy>
   1f114:	20000000 	.word	0x20000000
   1f118:	200009e4 	.word	0x200009e4
   1f11c:	0002a7d0 	.word	0x0002a7d0
   1f120:	00000000 	.word	0x00000000
   1f124:	0002a7d0 	.word	0x0002a7d0
   1f128:	20000000 	.word	0x20000000

0001f12c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1f12c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1f12e:	4b0c      	ldr	r3, [pc, #48]	; (1f160 <bg_thread_main+0x34>)
   1f130:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f132:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1f134:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f136:	f7ff ff07 	bl	1ef48 <z_sys_init_run_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   1f13a:	4a0a      	ldr	r2, [pc, #40]	; (1f164 <bg_thread_main+0x38>)
   1f13c:	490a      	ldr	r1, [pc, #40]	; (1f168 <bg_thread_main+0x3c>)
   1f13e:	480b      	ldr	r0, [pc, #44]	; (1f16c <bg_thread_main+0x40>)
   1f140:	f001 fa7e 	bl	20640 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1f144:	2003      	movs	r0, #3
   1f146:	f7ff feff 	bl	1ef48 <z_sys_init_run_level>

	z_init_static_threads();
   1f14a:	f000 fe41 	bl	1fdd0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1f14e:	f7e1 f953 	bl	3f8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f152:	4a07      	ldr	r2, [pc, #28]	; (1f170 <bg_thread_main+0x44>)
   1f154:	7b13      	ldrb	r3, [r2, #12]
   1f156:	f023 0301 	bic.w	r3, r3, #1
   1f15a:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f15c:	bd08      	pop	{r3, pc}
   1f15e:	bf00      	nop
   1f160:	200053b5 	.word	0x200053b5
   1f164:	000288f2 	.word	0x000288f2
   1f168:	0002a785 	.word	0x0002a785
   1f16c:	0002a78c 	.word	0x0002a78c
   1f170:	20001490 	.word	0x20001490

0001f174 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1f174:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1f178:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1f17a:	f7e6 f9d3 	bl	5524 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp = (uint32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
   1f17e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1f274 <z_cstart+0x100>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f182:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1f186:	4d34      	ldr	r5, [pc, #208]	; (1f258 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   1f188:	4e34      	ldr	r6, [pc, #208]	; (1f25c <z_cstart+0xe8>)
   1f18a:	696b      	ldr	r3, [r5, #20]
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1f18c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1f278 <z_cstart+0x104>
   1f190:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 1f27c <z_cstart+0x108>
	z_setup_new_thread(thread, stack,
   1f194:	4f32      	ldr	r7, [pc, #200]	; (1f260 <z_cstart+0xec>)
   1f196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f19a:	2400      	movs	r4, #0
   1f19c:	616b      	str	r3, [r5, #20]
   1f19e:	23e0      	movs	r3, #224	; 0xe0
   1f1a0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1f1a4:	77ec      	strb	r4, [r5, #31]
   1f1a6:	762c      	strb	r4, [r5, #24]
   1f1a8:	766c      	strb	r4, [r5, #25]
   1f1aa:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f1ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1f1ae:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f1b2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f1b4:	f7e7 fe98 	bl	6ee8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f1b8:	f7e7 fbe6 	bl	6988 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f1bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f1c0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f1c2:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
   1f1c4:	4d27      	ldr	r5, [pc, #156]	; (1f264 <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f1c6:	f240 1301 	movw	r3, #257	; 0x101
   1f1ca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1f1ce:	ab06      	add	r3, sp, #24
   1f1d0:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1f1d2:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1f1d4:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   1f1d8:	f7ff feb6 	bl	1ef48 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1f1dc:	2001      	movs	r0, #1
   1f1de:	f7ff feb3 	bl	1ef48 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1f1e2:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1f1e6:	f000 fcb9 	bl	1fb5c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1f1ea:	4b1f      	ldr	r3, [pc, #124]	; (1f268 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   1f1ec:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1f1ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f1f2:	4641      	mov	r1, r8
   1f1f4:	9305      	str	r3, [sp, #20]
   1f1f6:	4630      	mov	r0, r6
   1f1f8:	4653      	mov	r3, sl
   1f1fa:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1f1fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f202:	9400      	str	r4, [sp, #0]
   1f204:	f000 fd92 	bl	1fd2c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f208:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   1f20a:	4630      	mov	r0, r6
   1f20c:	f023 0304 	bic.w	r3, r3, #4
   1f210:	7373      	strb	r3, [r6, #13]
   1f212:	f006 fd65 	bl	25ce0 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1f216:	230f      	movs	r3, #15
   1f218:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1f21c:	4913      	ldr	r1, [pc, #76]	; (1f26c <z_cstart+0xf8>)
   1f21e:	4b14      	ldr	r3, [pc, #80]	; (1f270 <z_cstart+0xfc>)
   1f220:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1f224:	4638      	mov	r0, r7
   1f226:	e9cd b404 	strd	fp, r4, [sp, #16]
   1f22a:	e9cd 4400 	strd	r4, r4, [sp]
   1f22e:	f000 fd7d 	bl	1fd2c <z_setup_new_thread>
   1f232:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1f234:	60ef      	str	r7, [r5, #12]
   1f236:	f023 0304 	bic.w	r3, r3, #4
   1f23a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1f23c:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1f240:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   1f244:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1f246:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1f24a:	4653      	mov	r3, sl
   1f24c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f250:	4641      	mov	r1, r8
   1f252:	4630      	mov	r0, r6
   1f254:	f7e7 fb7c 	bl	6950 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1f258:	e000ed00 	.word	0xe000ed00
   1f25c:	20001490 	.word	0x20001490
   1f260:	20001410 	.word	0x20001410
   1f264:	20004c80 	.word	0x20004c80
   1f268:	0002a7b5 	.word	0x0002a7b5
   1f26c:	20006cf0 	.word	0x20006cf0
   1f270:	0001f0b1 	.word	0x0001f0b1
   1f274:	20007630 	.word	0x20007630
   1f278:	0001f12d 	.word	0x0001f12d
   1f27c:	200068f0 	.word	0x200068f0

0001f280 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
   1f280:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1f282:	4c06      	ldr	r4, [pc, #24]	; (1f29c <statics_init+0x1c>)
   1f284:	4d06      	ldr	r5, [pc, #24]	; (1f2a0 <statics_init+0x20>)
   1f286:	42ac      	cmp	r4, r5
   1f288:	d301      	bcc.n	1f28e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1f28a:	2000      	movs	r0, #0
   1f28c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1f28e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1f292:	4620      	mov	r0, r4
   1f294:	f006 fb2f 	bl	258f6 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1f298:	3414      	adds	r4, #20
   1f29a:	e7f4      	b.n	1f286 <statics_init+0x6>
   1f29c:	200007d8 	.word	0x200007d8
   1f2a0:	200007ec 	.word	0x200007ec

0001f2a4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1f2a4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f2a6:	4b0e      	ldr	r3, [pc, #56]	; (1f2e0 <init_mem_slab_module+0x3c>)
   1f2a8:	4c0e      	ldr	r4, [pc, #56]	; (1f2e4 <init_mem_slab_module+0x40>)
   1f2aa:	42a3      	cmp	r3, r4
   1f2ac:	d301      	bcc.n	1f2b2 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1f2ae:	2000      	movs	r0, #0
	return rc;
}
   1f2b0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1f2b2:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1f2b6:	ea41 0200 	orr.w	r2, r1, r0
   1f2ba:	f012 0203 	ands.w	r2, r2, #3
   1f2be:	d10b      	bne.n	1f2d8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1f2c0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1f2c2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f2c4:	42aa      	cmp	r2, r5
   1f2c6:	d101      	bne.n	1f2cc <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f2c8:	331c      	adds	r3, #28
   1f2ca:	e7ee      	b.n	1f2aa <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1f2cc:	695e      	ldr	r6, [r3, #20]
   1f2ce:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f2d0:	3201      	adds	r2, #1
		slab->free_list = p;
   1f2d2:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1f2d4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1f2d6:	e7f5      	b.n	1f2c4 <init_mem_slab_module+0x20>
		return -EINVAL;
   1f2d8:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1f2dc:	e7e8      	b.n	1f2b0 <init_mem_slab_module+0xc>
   1f2de:	bf00      	nop
   1f2e0:	20000784 	.word	0x20000784
   1f2e4:	200007d8 	.word	0x200007d8

0001f2e8 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1f2e8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1f2ea:	460c      	mov	r4, r1
   1f2ec:	4616      	mov	r6, r2
   1f2ee:	461f      	mov	r7, r3
   1f2f0:	f04f 0320 	mov.w	r3, #32
   1f2f4:	f3ef 8111 	mrs	r1, BASEPRI
   1f2f8:	f383 8811 	msr	BASEPRI, r3
   1f2fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1f300:	6943      	ldr	r3, [r0, #20]
   1f302:	b15b      	cbz	r3, 1f31c <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1f304:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f306:	681b      	ldr	r3, [r3, #0]
   1f308:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1f30a:	6983      	ldr	r3, [r0, #24]
   1f30c:	3301      	adds	r3, #1
   1f30e:	6183      	str	r3, [r0, #24]
		result = 0;
   1f310:	2000      	movs	r0, #0
	__asm__ volatile(
   1f312:	f381 8811 	msr	BASEPRI, r1
   1f316:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1f31a:	e011      	b.n	1f340 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f31c:	ea56 0207 	orrs.w	r2, r6, r7
   1f320:	d103      	bne.n	1f32a <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1f322:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1f324:	f06f 000b 	mvn.w	r0, #11
   1f328:	e7f3      	b.n	1f312 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1f32a:	4602      	mov	r2, r0
   1f32c:	e9cd 6700 	strd	r6, r7, [sp]
   1f330:	4804      	ldr	r0, [pc, #16]	; (1f344 <k_mem_slab_alloc+0x5c>)
   1f332:	f000 fbbb 	bl	1faac <z_pend_curr>
		if (result == 0) {
   1f336:	b918      	cbnz	r0, 1f340 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1f338:	4b03      	ldr	r3, [pc, #12]	; (1f348 <k_mem_slab_alloc+0x60>)
   1f33a:	689b      	ldr	r3, [r3, #8]
   1f33c:	695b      	ldr	r3, [r3, #20]
   1f33e:	6023      	str	r3, [r4, #0]
}
   1f340:	b002      	add	sp, #8
   1f342:	bdd0      	pop	{r4, r6, r7, pc}
   1f344:	200053b6 	.word	0x200053b6
   1f348:	20004c80 	.word	0x20004c80

0001f34c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1f34c:	b570      	push	{r4, r5, r6, lr}
   1f34e:	4604      	mov	r4, r0
   1f350:	460d      	mov	r5, r1
	__asm__ volatile(
   1f352:	f04f 0320 	mov.w	r3, #32
   1f356:	f3ef 8611 	mrs	r6, BASEPRI
   1f35a:	f383 8811 	msr	BASEPRI, r3
   1f35e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1f362:	f006 fd33 	bl	25dcc <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1f366:	b158      	cbz	r0, 1f380 <k_mem_slab_free+0x34>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1f368:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1f36a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1f36c:	2100      	movs	r1, #0
   1f36e:	6781      	str	r1, [r0, #120]	; 0x78
		z_ready_thread(pending_thread);
   1f370:	f006 fcb6 	bl	25ce0 <z_ready_thread>
		z_reschedule(&lock, key);
   1f374:	4631      	mov	r1, r6
   1f376:	4809      	ldr	r0, [pc, #36]	; (1f39c <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1f378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1f37c:	f006 bc68 	b.w	25c50 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1f380:	682b      	ldr	r3, [r5, #0]
   1f382:	6962      	ldr	r2, [r4, #20]
   1f384:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1f386:	682b      	ldr	r3, [r5, #0]
   1f388:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1f38a:	69a3      	ldr	r3, [r4, #24]
   1f38c:	3b01      	subs	r3, #1
   1f38e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1f390:	f386 8811 	msr	BASEPRI, r6
   1f394:	f3bf 8f6f 	isb	sy
}
   1f398:	bd70      	pop	{r4, r5, r6, pc}
   1f39a:	bf00      	nop
   1f39c:	200053b6 	.word	0x200053b6

0001f3a0 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   1f3a0:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1f3a2:	4801      	ldr	r0, [pc, #4]	; (1f3a8 <k_malloc+0x8>)
   1f3a4:	f006 bb47 	b.w	25a36 <k_mem_pool_malloc>
   1f3a8:	20000680 	.word	0x20000680

0001f3ac <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1f3ac:	b510      	push	{r4, lr}
   1f3ae:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1f3b0:	f006 fd59 	bl	25e66 <k_is_in_isr>
   1f3b4:	b948      	cbnz	r0, 1f3ca <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1f3b6:	4b06      	ldr	r3, [pc, #24]	; (1f3d0 <z_thread_malloc+0x24>)
   1f3b8:	689b      	ldr	r3, [r3, #8]
   1f3ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	}

	if (pool) {
   1f3bc:	b13b      	cbz	r3, 1f3ce <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   1f3be:	4621      	mov	r1, r4
   1f3c0:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1f3c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   1f3c6:	f006 bb36 	b.w	25a36 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   1f3ca:	4b02      	ldr	r3, [pc, #8]	; (1f3d4 <z_thread_malloc+0x28>)
   1f3cc:	e7f7      	b.n	1f3be <z_thread_malloc+0x12>
}
   1f3ce:	bd10      	pop	{r4, pc}
   1f3d0:	20004c80 	.word	0x20004c80
   1f3d4:	20000680 	.word	0x20000680

0001f3d8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1f3d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f3dc:	4604      	mov	r4, r0
   1f3de:	4616      	mov	r6, r2
   1f3e0:	461f      	mov	r7, r3
	__asm__ volatile(
   1f3e2:	f04f 0320 	mov.w	r3, #32
   1f3e6:	f3ef 8811 	mrs	r8, BASEPRI
   1f3ea:	f383 8811 	msr	BASEPRI, r3
   1f3ee:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1f3f2:	68c3      	ldr	r3, [r0, #12]
   1f3f4:	4a32      	ldr	r2, [pc, #200]	; (1f4c0 <z_impl_k_mutex_lock+0xe8>)
   1f3f6:	b16b      	cbz	r3, 1f414 <z_impl_k_mutex_lock+0x3c>
   1f3f8:	6880      	ldr	r0, [r0, #8]
   1f3fa:	6891      	ldr	r1, [r2, #8]
   1f3fc:	4288      	cmp	r0, r1
   1f3fe:	d019      	beq.n	1f434 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1f400:	ea56 0307 	orrs.w	r3, r6, r7
   1f404:	d118      	bne.n	1f438 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1f406:	f388 8811 	msr	BASEPRI, r8
   1f40a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1f40e:	f06f 000f 	mvn.w	r0, #15
   1f412:	e00c      	b.n	1f42e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1f414:	6891      	ldr	r1, [r2, #8]
   1f416:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1f41a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1f41c:	3301      	adds	r3, #1
   1f41e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1f420:	6893      	ldr	r3, [r2, #8]
   1f422:	60a3      	str	r3, [r4, #8]
   1f424:	f388 8811 	msr	BASEPRI, r8
   1f428:	f3bf 8f6f 	isb	sy
		return 0;
   1f42c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1f42e:	b002      	add	sp, #8
   1f430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1f434:	6921      	ldr	r1, [r4, #16]
   1f436:	e7f0      	b.n	1f41a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1f438:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f43c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1f440:	4299      	cmp	r1, r3
   1f442:	bfa8      	it	ge
   1f444:	4619      	movge	r1, r3
   1f446:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1f44a:	4299      	cmp	r1, r3
   1f44c:	da2c      	bge.n	1f4a8 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1f44e:	f000 fb41 	bl	1fad4 <z_set_prio>
   1f452:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1f454:	e9cd 6700 	strd	r6, r7, [sp]
   1f458:	481a      	ldr	r0, [pc, #104]	; (1f4c4 <z_impl_k_mutex_lock+0xec>)
   1f45a:	4622      	mov	r2, r4
   1f45c:	4641      	mov	r1, r8
   1f45e:	f000 fb25 	bl	1faac <z_pend_curr>
	if (got_mutex == 0) {
   1f462:	2800      	cmp	r0, #0
   1f464:	d0e3      	beq.n	1f42e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1f466:	f04f 0320 	mov.w	r3, #32
   1f46a:	f3ef 8611 	mrs	r6, BASEPRI
   1f46e:	f383 8811 	msr	BASEPRI, r3
   1f472:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1f476:	6823      	ldr	r3, [r4, #0]
   1f478:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f47a:	42a3      	cmp	r3, r4
   1f47c:	d007      	beq.n	1f48e <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1f47e:	b133      	cbz	r3, 1f48e <z_impl_k_mutex_lock+0xb6>
   1f480:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1f484:	4299      	cmp	r1, r3
   1f486:	bfa8      	it	ge
   1f488:	4619      	movge	r1, r3
   1f48a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1f48e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1f490:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f494:	4299      	cmp	r1, r3
   1f496:	d109      	bne.n	1f4ac <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1f498:	b16d      	cbz	r5, 1f4b6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1f49a:	480a      	ldr	r0, [pc, #40]	; (1f4c4 <z_impl_k_mutex_lock+0xec>)
   1f49c:	4631      	mov	r1, r6
   1f49e:	f006 fbd7 	bl	25c50 <z_reschedule>
	return -EAGAIN;
   1f4a2:	f06f 000a 	mvn.w	r0, #10
   1f4a6:	e7c2      	b.n	1f42e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1f4a8:	2500      	movs	r5, #0
   1f4aa:	e7d3      	b.n	1f454 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1f4ac:	f000 fb12 	bl	1fad4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1f4b0:	2800      	cmp	r0, #0
   1f4b2:	d1f2      	bne.n	1f49a <z_impl_k_mutex_lock+0xc2>
   1f4b4:	e7f0      	b.n	1f498 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1f4b6:	f386 8811 	msr	BASEPRI, r6
   1f4ba:	f3bf 8f6f 	isb	sy
   1f4be:	e7f0      	b.n	1f4a2 <z_impl_k_mutex_lock+0xca>
   1f4c0:	20004c80 	.word	0x20004c80
   1f4c4:	200053b6 	.word	0x200053b6

0001f4c8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1f4c8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1f4ca:	6883      	ldr	r3, [r0, #8]
{
   1f4cc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1f4ce:	2b00      	cmp	r3, #0
   1f4d0:	d036      	beq.n	1f540 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1f4d2:	4a1e      	ldr	r2, [pc, #120]	; (1f54c <z_impl_k_mutex_unlock+0x84>)
   1f4d4:	6892      	ldr	r2, [r2, #8]
   1f4d6:	4293      	cmp	r3, r2
   1f4d8:	d135      	bne.n	1f546 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1f4da:	7bda      	ldrb	r2, [r3, #15]
   1f4dc:	3a01      	subs	r2, #1
   1f4de:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1f4e0:	68c3      	ldr	r3, [r0, #12]
   1f4e2:	2b01      	cmp	r3, #1
   1f4e4:	d005      	beq.n	1f4f2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1f4e6:	3b01      	subs	r3, #1
   1f4e8:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1f4ea:	f000 f8f7 	bl	1f6dc <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1f4ee:	2000      	movs	r0, #0
}
   1f4f0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1f4f2:	f04f 0320 	mov.w	r3, #32
   1f4f6:	f3ef 8511 	mrs	r5, BASEPRI
   1f4fa:	f383 8811 	msr	BASEPRI, r3
   1f4fe:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1f502:	6901      	ldr	r1, [r0, #16]
   1f504:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1f506:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f50a:	4299      	cmp	r1, r3
   1f50c:	d001      	beq.n	1f512 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1f50e:	f000 fae1 	bl	1fad4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1f512:	4620      	mov	r0, r4
   1f514:	f006 fc5a 	bl	25dcc <z_unpend_first_thread>
	mutex->owner = new_owner;
   1f518:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1f51a:	b158      	cbz	r0, 1f534 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1f51c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1f520:	6122      	str	r2, [r4, #16]
   1f522:	2200      	movs	r2, #0
   1f524:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   1f526:	f006 fbdb 	bl	25ce0 <z_ready_thread>
		z_reschedule(&lock, key);
   1f52a:	4809      	ldr	r0, [pc, #36]	; (1f550 <z_impl_k_mutex_unlock+0x88>)
   1f52c:	4629      	mov	r1, r5
   1f52e:	f006 fb8f 	bl	25c50 <z_reschedule>
   1f532:	e7da      	b.n	1f4ea <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1f534:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1f536:	f385 8811 	msr	BASEPRI, r5
   1f53a:	f3bf 8f6f 	isb	sy
   1f53e:	e7d4      	b.n	1f4ea <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1f540:	f06f 0015 	mvn.w	r0, #21
   1f544:	e7d4      	b.n	1f4f0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1f546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f54a:	e7d1      	b.n	1f4f0 <z_impl_k_mutex_unlock+0x28>
   1f54c:	20004c80 	.word	0x20004c80
   1f550:	200053b6 	.word	0x200053b6

0001f554 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1f554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f556:	4616      	mov	r6, r2
   1f558:	461f      	mov	r7, r3
	__asm__ volatile(
   1f55a:	f04f 0320 	mov.w	r3, #32
   1f55e:	f3ef 8511 	mrs	r5, BASEPRI
   1f562:	f383 8811 	msr	BASEPRI, r3
   1f566:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1f56a:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1f56c:	b19c      	cbz	r4, 1f596 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f56e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f570:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f572:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f576:	4294      	cmp	r4, r2
	list->head = node;
   1f578:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1f57a:	bf08      	it	eq
   1f57c:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1f57e:	2101      	movs	r1, #1
   1f580:	4620      	mov	r0, r4
   1f582:	f006 fad5 	bl	25b30 <z_queue_node_peek>
   1f586:	4604      	mov	r4, r0
	__asm__ volatile(
   1f588:	f385 8811 	msr	BASEPRI, r5
   1f58c:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1f590:	4620      	mov	r0, r4
   1f592:	b003      	add	sp, #12
   1f594:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f596:	ea56 0307 	orrs.w	r3, r6, r7
   1f59a:	d0f5      	beq.n	1f588 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f59c:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1f5a0:	e9cd 6700 	strd	r6, r7, [sp]
   1f5a4:	4629      	mov	r1, r5
   1f5a6:	4610      	mov	r0, r2
   1f5a8:	f000 fa80 	bl	1faac <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1f5ac:	2800      	cmp	r0, #0
   1f5ae:	d1ef      	bne.n	1f590 <z_impl_k_queue_get+0x3c>
   1f5b0:	4b01      	ldr	r3, [pc, #4]	; (1f5b8 <z_impl_k_queue_get+0x64>)
   1f5b2:	689b      	ldr	r3, [r3, #8]
   1f5b4:	695c      	ldr	r4, [r3, #20]
   1f5b6:	e7eb      	b.n	1f590 <z_impl_k_queue_get+0x3c>
   1f5b8:	20004c80 	.word	0x20004c80

0001f5bc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1f5bc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1f5be:	4c08      	ldr	r4, [pc, #32]	; (1f5e0 <z_reset_time_slice+0x24>)
   1f5c0:	6823      	ldr	r3, [r4, #0]
   1f5c2:	b15b      	cbz	r3, 1f5dc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1f5c4:	f7e6 feb8 	bl	6338 <z_clock_elapsed>
   1f5c8:	4603      	mov	r3, r0
   1f5ca:	6820      	ldr	r0, [r4, #0]
   1f5cc:	4a05      	ldr	r2, [pc, #20]	; (1f5e4 <z_reset_time_slice+0x28>)
   1f5ce:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1f5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1f5d4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1f5d6:	2100      	movs	r1, #0
   1f5d8:	f006 bcfb 	b.w	25fd2 <z_set_timeout_expiry>
}
   1f5dc:	bd10      	pop	{r4, pc}
   1f5de:	bf00      	nop
   1f5e0:	20004cb8 	.word	0x20004cb8
   1f5e4:	20004c80 	.word	0x20004c80

0001f5e8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1f5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f5ea:	4605      	mov	r5, r0
   1f5ec:	460c      	mov	r4, r1
	__asm__ volatile(
   1f5ee:	f04f 0320 	mov.w	r3, #32
   1f5f2:	f3ef 8611 	mrs	r6, BASEPRI
   1f5f6:	f383 8811 	msr	BASEPRI, r3
   1f5fa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1f5fe:	4b0d      	ldr	r3, [pc, #52]	; (1f634 <k_sched_time_slice_set+0x4c>)
   1f600:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1f602:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1f606:	f240 30e7 	movw	r0, #999	; 0x3e7
   1f60a:	2100      	movs	r1, #0
   1f60c:	611a      	str	r2, [r3, #16]
   1f60e:	fbe7 0105 	umlal	r0, r1, r7, r5
   1f612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f616:	2300      	movs	r3, #0
   1f618:	f7e0 fd72 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1f61c:	4b06      	ldr	r3, [pc, #24]	; (1f638 <k_sched_time_slice_set+0x50>)
   1f61e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1f620:	4b06      	ldr	r3, [pc, #24]	; (1f63c <k_sched_time_slice_set+0x54>)
   1f622:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1f624:	f7ff ffca 	bl	1f5bc <z_reset_time_slice>
	__asm__ volatile(
   1f628:	f386 8811 	msr	BASEPRI, r6
   1f62c:	f3bf 8f6f 	isb	sy
	}
}
   1f630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f632:	bf00      	nop
   1f634:	20004c80 	.word	0x20004c80
   1f638:	20004cb8 	.word	0x20004cb8
   1f63c:	20004cb4 	.word	0x20004cb4

0001f640 <k_sched_lock>:
	__asm__ volatile(
   1f640:	f04f 0320 	mov.w	r3, #32
   1f644:	f3ef 8111 	mrs	r1, BASEPRI
   1f648:	f383 8811 	msr	BASEPRI, r3
   1f64c:	f3bf 8f6f 	isb	sy
   1f650:	4b04      	ldr	r3, [pc, #16]	; (1f664 <k_sched_lock+0x24>)
   1f652:	689a      	ldr	r2, [r3, #8]
   1f654:	7bd3      	ldrb	r3, [r2, #15]
   1f656:	3b01      	subs	r3, #1
   1f658:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1f65a:	f381 8811 	msr	BASEPRI, r1
   1f65e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1f662:	4770      	bx	lr
   1f664:	20004c80 	.word	0x20004c80

0001f668 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1f668:	4b09      	ldr	r3, [pc, #36]	; (1f690 <z_priq_dumb_remove+0x28>)
   1f66a:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1f66e:	4282      	cmp	r2, r0
   1f670:	d105      	bne.n	1f67e <z_priq_dumb_remove+0x16>
   1f672:	689b      	ldr	r3, [r3, #8]
   1f674:	428b      	cmp	r3, r1
   1f676:	d102      	bne.n	1f67e <z_priq_dumb_remove+0x16>
   1f678:	7b4b      	ldrb	r3, [r1, #13]
   1f67a:	06db      	lsls	r3, r3, #27
   1f67c:	d106      	bne.n	1f68c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1f67e:	e9d1 3200 	ldrd	r3, r2, [r1]
   1f682:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1f684:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f686:	2300      	movs	r3, #0
	node->prev = NULL;
   1f688:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1f68c:	4770      	bx	lr
   1f68e:	bf00      	nop
   1f690:	20004c80 	.word	0x20004c80

0001f694 <update_cache>:
{
   1f694:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1f696:	4c10      	ldr	r4, [pc, #64]	; (1f6d8 <update_cache+0x44>)
{
   1f698:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1f69a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1f69e:	f006 fb15 	bl	25ccc <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1f6a2:	68a3      	ldr	r3, [r4, #8]
   1f6a4:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1f6a6:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1f6a8:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1f6aa:	bf44      	itt	mi
   1f6ac:	f041 0108 	orrmi.w	r1, r1, #8
   1f6b0:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1f6b2:	b905      	cbnz	r5, 1f6b6 <update_cache+0x22>
   1f6b4:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1f6b6:	b94e      	cbnz	r6, 1f6cc <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   1f6b8:	7b5a      	ldrb	r2, [r3, #13]
   1f6ba:	06d2      	lsls	r2, r2, #27
   1f6bc:	d106      	bne.n	1f6cc <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1f6be:	69aa      	ldr	r2, [r5, #24]
   1f6c0:	b922      	cbnz	r2, 1f6cc <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   1f6c2:	89da      	ldrh	r2, [r3, #14]
   1f6c4:	2a7f      	cmp	r2, #127	; 0x7f
   1f6c6:	d901      	bls.n	1f6cc <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   1f6c8:	6263      	str	r3, [r4, #36]	; 0x24
}
   1f6ca:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   1f6cc:	42ab      	cmp	r3, r5
   1f6ce:	d001      	beq.n	1f6d4 <update_cache+0x40>
			z_reset_time_slice();
   1f6d0:	f7ff ff74 	bl	1f5bc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1f6d4:	6265      	str	r5, [r4, #36]	; 0x24
}
   1f6d6:	e7f8      	b.n	1f6ca <update_cache+0x36>
   1f6d8:	20004c80 	.word	0x20004c80

0001f6dc <k_sched_unlock>:
{
   1f6dc:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f6de:	f04f 0320 	mov.w	r3, #32
   1f6e2:	f3ef 8411 	mrs	r4, BASEPRI
   1f6e6:	f383 8811 	msr	BASEPRI, r3
   1f6ea:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1f6ee:	4b08      	ldr	r3, [pc, #32]	; (1f710 <k_sched_unlock+0x34>)
   1f6f0:	689a      	ldr	r2, [r3, #8]
   1f6f2:	7bd3      	ldrb	r3, [r2, #15]
   1f6f4:	3301      	adds	r3, #1
   1f6f6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1f6f8:	2000      	movs	r0, #0
   1f6fa:	f7ff ffcb 	bl	1f694 <update_cache>
	__asm__ volatile(
   1f6fe:	f384 8811 	msr	BASEPRI, r4
   1f702:	f3bf 8f6f 	isb	sy
}
   1f706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1f70a:	f006 bab8 	b.w	25c7e <z_reschedule_unlocked>
   1f70e:	bf00      	nop
   1f710:	20004c80 	.word	0x20004c80

0001f714 <ready_thread>:
{
   1f714:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1f716:	7b43      	ldrb	r3, [r0, #13]
   1f718:	06db      	lsls	r3, r3, #27
   1f71a:	d12a      	bne.n	1f772 <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1f71c:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
   1f71e:	bb43      	cbnz	r3, 1f772 <ready_thread+0x5e>
	return list->head == list;
   1f720:	4a15      	ldr	r2, [pc, #84]	; (1f778 <ready_thread+0x64>)
   1f722:	4611      	mov	r1, r2
   1f724:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f728:	428c      	cmp	r4, r1
   1f72a:	bf18      	it	ne
   1f72c:	4623      	movne	r3, r4
   1f72e:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1f730:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
   1f732:	bf38      	it	cc
   1f734:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f736:	b1b3      	cbz	r3, 1f766 <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   1f738:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1f73c:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1f740:	42ae      	cmp	r6, r5
   1f742:	db03      	blt.n	1f74c <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
   1f744:	42a3      	cmp	r3, r4
   1f746:	d00e      	beq.n	1f766 <ready_thread+0x52>
   1f748:	681b      	ldr	r3, [r3, #0]
   1f74a:	e7f4      	b.n	1f736 <ready_thread+0x22>
	node->prev = successor->prev;
   1f74c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1f74e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1f752:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1f754:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1f756:	7b43      	ldrb	r3, [r0, #13]
   1f758:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1f75c:	7343      	strb	r3, [r0, #13]
}
   1f75e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1f760:	2000      	movs	r0, #0
   1f762:	f7ff bf97 	b.w	1f694 <update_cache>
	node->prev = list->tail;
   1f766:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1f76a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1f76c:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1f76e:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   1f770:	e7f1      	b.n	1f756 <ready_thread+0x42>
}
   1f772:	bc70      	pop	{r4, r5, r6}
   1f774:	4770      	bx	lr
   1f776:	bf00      	nop
   1f778:	20004c80 	.word	0x20004c80

0001f77c <z_sched_start>:
{
   1f77c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f77e:	f04f 0220 	mov.w	r2, #32
   1f782:	f3ef 8411 	mrs	r4, BASEPRI
   1f786:	f382 8811 	msr	BASEPRI, r2
   1f78a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1f78e:	7b42      	ldrb	r2, [r0, #13]
   1f790:	0751      	lsls	r1, r2, #29
   1f792:	d404      	bmi.n	1f79e <z_sched_start+0x22>
	__asm__ volatile(
   1f794:	f384 8811 	msr	BASEPRI, r4
   1f798:	f3bf 8f6f 	isb	sy
}
   1f79c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f79e:	f022 0204 	bic.w	r2, r2, #4
   1f7a2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1f7a4:	f7ff ffb6 	bl	1f714 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1f7a8:	4621      	mov	r1, r4
   1f7aa:	4802      	ldr	r0, [pc, #8]	; (1f7b4 <z_sched_start+0x38>)
}
   1f7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1f7b0:	f006 ba4e 	b.w	25c50 <z_reschedule>
   1f7b4:	200053b6 	.word	0x200053b6

0001f7b8 <z_move_thread_to_end_of_prio_q>:
{
   1f7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f7ba:	4601      	mov	r1, r0
	__asm__ volatile(
   1f7bc:	f04f 0320 	mov.w	r3, #32
   1f7c0:	f3ef 8411 	mrs	r4, BASEPRI
   1f7c4:	f383 8811 	msr	BASEPRI, r3
   1f7c8:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1f7cc:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1f7d0:	2b00      	cmp	r3, #0
   1f7d2:	da02      	bge.n	1f7da <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1f7d4:	4819      	ldr	r0, [pc, #100]	; (1f83c <z_move_thread_to_end_of_prio_q+0x84>)
   1f7d6:	f7ff ff47 	bl	1f668 <z_priq_dumb_remove>
	return list->head == list;
   1f7da:	4a19      	ldr	r2, [pc, #100]	; (1f840 <z_move_thread_to_end_of_prio_q+0x88>)
   1f7dc:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1f7de:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return list->head == list;
   1f7e0:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f7e4:	4283      	cmp	r3, r0
   1f7e6:	bf08      	it	eq
   1f7e8:	2300      	moveq	r3, #0
   1f7ea:	2b00      	cmp	r3, #0
   1f7ec:	bf38      	it	cc
   1f7ee:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f7f0:	b1eb      	cbz	r3, 1f82e <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   1f7f2:	f991 700e 	ldrsb.w	r7, [r1, #14]
   1f7f6:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1f7fa:	42b7      	cmp	r7, r6
   1f7fc:	db03      	blt.n	1f806 <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1f7fe:	429d      	cmp	r5, r3
   1f800:	d015      	beq.n	1f82e <z_move_thread_to_end_of_prio_q+0x76>
   1f802:	681b      	ldr	r3, [r3, #0]
   1f804:	e7f4      	b.n	1f7f0 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
   1f806:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1f808:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1f80c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1f80e:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1f810:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
   1f812:	6890      	ldr	r0, [r2, #8]
   1f814:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1f818:	734b      	strb	r3, [r1, #13]
   1f81a:	1a43      	subs	r3, r0, r1
   1f81c:	4258      	negs	r0, r3
   1f81e:	4158      	adcs	r0, r3
   1f820:	f7ff ff38 	bl	1f694 <update_cache>
	__asm__ volatile(
   1f824:	f384 8811 	msr	BASEPRI, r4
   1f828:	f3bf 8f6f 	isb	sy
}
   1f82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   1f82e:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
   1f832:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1f834:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1f836:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1f838:	e7ea      	b.n	1f810 <z_move_thread_to_end_of_prio_q+0x58>
   1f83a:	bf00      	nop
   1f83c:	20004ca8 	.word	0x20004ca8
   1f840:	20004c80 	.word	0x20004c80

0001f844 <z_time_slice>:
{
   1f844:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1f846:	4a15      	ldr	r2, [pc, #84]	; (1f89c <z_time_slice+0x58>)
   1f848:	4b15      	ldr	r3, [pc, #84]	; (1f8a0 <z_time_slice+0x5c>)
   1f84a:	6814      	ldr	r4, [r2, #0]
{
   1f84c:	4601      	mov	r1, r0
	if (pending_current == _current) {
   1f84e:	6898      	ldr	r0, [r3, #8]
   1f850:	42a0      	cmp	r0, r4
   1f852:	461c      	mov	r4, r3
   1f854:	d103      	bne.n	1f85e <z_time_slice+0x1a>
}
   1f856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1f85a:	f7ff beaf 	b.w	1f5bc <z_reset_time_slice>
	pending_current = NULL;
   1f85e:	2500      	movs	r5, #0
   1f860:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1f862:	4a10      	ldr	r2, [pc, #64]	; (1f8a4 <z_time_slice+0x60>)
   1f864:	6812      	ldr	r2, [r2, #0]
   1f866:	b1b2      	cbz	r2, 1f896 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1f868:	89c2      	ldrh	r2, [r0, #14]
   1f86a:	2a7f      	cmp	r2, #127	; 0x7f
   1f86c:	d813      	bhi.n	1f896 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1f86e:	4a0e      	ldr	r2, [pc, #56]	; (1f8a8 <z_time_slice+0x64>)
   1f870:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1f874:	6812      	ldr	r2, [r2, #0]
   1f876:	4295      	cmp	r5, r2
   1f878:	db0d      	blt.n	1f896 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   1f87a:	4a0c      	ldr	r2, [pc, #48]	; (1f8ac <z_time_slice+0x68>)
   1f87c:	4290      	cmp	r0, r2
   1f87e:	d00a      	beq.n	1f896 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1f880:	6982      	ldr	r2, [r0, #24]
   1f882:	b942      	cbnz	r2, 1f896 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1f884:	691a      	ldr	r2, [r3, #16]
   1f886:	428a      	cmp	r2, r1
   1f888:	dc02      	bgt.n	1f890 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1f88a:	f7ff ff95 	bl	1f7b8 <z_move_thread_to_end_of_prio_q>
   1f88e:	e7e2      	b.n	1f856 <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   1f890:	1a52      	subs	r2, r2, r1
   1f892:	611a      	str	r2, [r3, #16]
}
   1f894:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1f896:	2300      	movs	r3, #0
   1f898:	6123      	str	r3, [r4, #16]
   1f89a:	e7fb      	b.n	1f894 <z_time_slice+0x50>
   1f89c:	20004cb0 	.word	0x20004cb0
   1f8a0:	20004c80 	.word	0x20004c80
   1f8a4:	20004cb8 	.word	0x20004cb8
   1f8a8:	20004cb4 	.word	0x20004cb4
   1f8ac:	20001410 	.word	0x20001410

0001f8b0 <z_impl_k_thread_suspend>:
{
   1f8b0:	b570      	push	{r4, r5, r6, lr}
   1f8b2:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1f8b4:	3018      	adds	r0, #24
   1f8b6:	f006 fb66 	bl	25f86 <z_abort_timeout>
	__asm__ volatile(
   1f8ba:	f04f 0320 	mov.w	r3, #32
   1f8be:	f3ef 8611 	mrs	r6, BASEPRI
   1f8c2:	f383 8811 	msr	BASEPRI, r3
   1f8c6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1f8ca:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1f8ce:	2b00      	cmp	r3, #0
   1f8d0:	da07      	bge.n	1f8e2 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1f8d2:	480f      	ldr	r0, [pc, #60]	; (1f910 <z_impl_k_thread_suspend+0x60>)
   1f8d4:	4621      	mov	r1, r4
   1f8d6:	f7ff fec7 	bl	1f668 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1f8da:	7b63      	ldrb	r3, [r4, #13]
   1f8dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f8e0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1f8e2:	4d0c      	ldr	r5, [pc, #48]	; (1f914 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1f8e4:	7b63      	ldrb	r3, [r4, #13]
   1f8e6:	68a8      	ldr	r0, [r5, #8]
   1f8e8:	f043 0310 	orr.w	r3, r3, #16
   1f8ec:	7363      	strb	r3, [r4, #13]
   1f8ee:	1b03      	subs	r3, r0, r4
   1f8f0:	4258      	negs	r0, r3
   1f8f2:	4158      	adcs	r0, r3
   1f8f4:	f7ff fece 	bl	1f694 <update_cache>
	__asm__ volatile(
   1f8f8:	f386 8811 	msr	BASEPRI, r6
   1f8fc:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1f900:	68ab      	ldr	r3, [r5, #8]
   1f902:	42a3      	cmp	r3, r4
   1f904:	d103      	bne.n	1f90e <z_impl_k_thread_suspend+0x5e>
}
   1f906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1f90a:	f006 b9b8 	b.w	25c7e <z_reschedule_unlocked>
}
   1f90e:	bd70      	pop	{r4, r5, r6, pc}
   1f910:	20004ca8 	.word	0x20004ca8
   1f914:	20004c80 	.word	0x20004c80

0001f918 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1f918:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   1f91a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f91e:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1f920:	b103      	cbz	r3, 1f924 <z_thread_single_abort+0xc>
		thread->fn_abort();
   1f922:	4798      	blx	r3
   1f924:	f104 0018 	add.w	r0, r4, #24
   1f928:	f006 fb2d 	bl	25f86 <z_abort_timeout>
	__asm__ volatile(
   1f92c:	f04f 0320 	mov.w	r3, #32
   1f930:	f3ef 8611 	mrs	r6, BASEPRI
   1f934:	f383 8811 	msr	BASEPRI, r3
   1f938:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1f93c:	7b63      	ldrb	r3, [r4, #13]
   1f93e:	06d8      	lsls	r0, r3, #27
   1f940:	d123      	bne.n	1f98a <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   1f942:	69a2      	ldr	r2, [r4, #24]
   1f944:	bb0a      	cbnz	r2, 1f98a <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   1f946:	0619      	lsls	r1, r3, #24
   1f948:	d507      	bpl.n	1f95a <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   1f94a:	481f      	ldr	r0, [pc, #124]	; (1f9c8 <z_thread_single_abort+0xb0>)
   1f94c:	4621      	mov	r1, r4
   1f94e:	f7ff fe8b 	bl	1f668 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1f952:	7b63      	ldrb	r3, [r4, #13]
   1f954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f958:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1f95a:	4b1c      	ldr	r3, [pc, #112]	; (1f9cc <z_thread_single_abort+0xb4>)
   1f95c:	6898      	ldr	r0, [r3, #8]
   1f95e:	1b02      	subs	r2, r0, r4
   1f960:	4250      	negs	r0, r2
   1f962:	4150      	adcs	r0, r2
   1f964:	f7ff fe96 	bl	1f694 <update_cache>
		thread->base.thread_state |= mask;
   1f968:	7b63      	ldrb	r3, [r4, #13]
   1f96a:	f043 0308 	orr.w	r3, r3, #8
   1f96e:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1f970:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1f974:	2700      	movs	r7, #0
	return list->head == list;
   1f976:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f978:	4545      	cmp	r5, r8
   1f97a:	d000      	beq.n	1f97e <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1f97c:	b995      	cbnz	r5, 1f9a4 <z_thread_single_abort+0x8c>
	__asm__ volatile(
   1f97e:	f386 8811 	msr	BASEPRI, r6
   1f982:	f3bf 8f6f 	isb	sy
}
   1f986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   1f98a:	079b      	lsls	r3, r3, #30
   1f98c:	d5ec      	bpl.n	1f968 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1f98e:	68a0      	ldr	r0, [r4, #8]
   1f990:	4621      	mov	r1, r4
   1f992:	f7ff fe69 	bl	1f668 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1f996:	7b63      	ldrb	r3, [r4, #13]
   1f998:	f023 0302 	bic.w	r3, r3, #2
   1f99c:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1f99e:	2300      	movs	r3, #0
   1f9a0:	60a3      	str	r3, [r4, #8]
   1f9a2:	e7e1      	b.n	1f968 <z_thread_single_abort+0x50>
   1f9a4:	f105 0018 	add.w	r0, r5, #24
   1f9a8:	f006 faed 	bl	25f86 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1f9ac:	68a8      	ldr	r0, [r5, #8]
   1f9ae:	4629      	mov	r1, r5
   1f9b0:	f7ff fe5a 	bl	1f668 <z_priq_dumb_remove>
   1f9b4:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1f9b6:	60af      	str	r7, [r5, #8]
   1f9b8:	f023 0302 	bic.w	r3, r3, #2
   1f9bc:	736b      	strb	r3, [r5, #13]
   1f9be:	67af      	str	r7, [r5, #120]	; 0x78
			ready_thread(waiter);
   1f9c0:	4628      	mov	r0, r5
   1f9c2:	f7ff fea7 	bl	1f714 <ready_thread>
   1f9c6:	e7d6      	b.n	1f976 <z_thread_single_abort+0x5e>
   1f9c8:	20004ca8 	.word	0x20004ca8
   1f9cc:	20004c80 	.word	0x20004c80

0001f9d0 <unready_thread>:
{
   1f9d0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1f9d2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1f9d6:	2b00      	cmp	r3, #0
{
   1f9d8:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1f9da:	da06      	bge.n	1f9ea <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1f9dc:	4807      	ldr	r0, [pc, #28]	; (1f9fc <unready_thread+0x2c>)
   1f9de:	f7ff fe43 	bl	1f668 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1f9e2:	7b4b      	ldrb	r3, [r1, #13]
   1f9e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f9e8:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1f9ea:	4b05      	ldr	r3, [pc, #20]	; (1fa00 <unready_thread+0x30>)
   1f9ec:	6898      	ldr	r0, [r3, #8]
   1f9ee:	1a43      	subs	r3, r0, r1
   1f9f0:	4258      	negs	r0, r3
   1f9f2:	4158      	adcs	r0, r3
}
   1f9f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1f9f8:	f7ff be4c 	b.w	1f694 <update_cache>
   1f9fc:	20004ca8 	.word	0x20004ca8
   1fa00:	20004c80 	.word	0x20004c80

0001fa04 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   1fa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fa06:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   1fa08:	f006 fafd 	bl	26006 <z_tick_get_32>
   1fa0c:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1fa0e:	f04f 0320 	mov.w	r3, #32
   1fa12:	f3ef 8711 	mrs	r7, BASEPRI
   1fa16:	f383 8811 	msr	BASEPRI, r3
   1fa1a:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1fa1e:	4e0d      	ldr	r6, [pc, #52]	; (1fa54 <z_tick_sleep.part.0+0x50>)
   1fa20:	4b0d      	ldr	r3, [pc, #52]	; (1fa58 <z_tick_sleep.part.0+0x54>)
   1fa22:	68b0      	ldr	r0, [r6, #8]
   1fa24:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1fa26:	f006 f996 	bl	25d56 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
   1fa2a:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1fa2c:	490b      	ldr	r1, [pc, #44]	; (1fa5c <z_tick_sleep.part.0+0x58>)
   1fa2e:	462a      	mov	r2, r5
   1fa30:	17eb      	asrs	r3, r5, #31
   1fa32:	3018      	adds	r0, #24
   1fa34:	f000 face 	bl	1ffd4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1fa38:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1fa3a:	7b53      	ldrb	r3, [r2, #13]
   1fa3c:	f043 0310 	orr.w	r3, r3, #16
   1fa40:	7353      	strb	r3, [r2, #13]
	ret = arch_swap(key);
   1fa42:	4638      	mov	r0, r7
   1fa44:	f7e6 fec4 	bl	67d0 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1fa48:	f006 fadd 	bl	26006 <z_tick_get_32>
   1fa4c:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1fa4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1fa52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fa54:	20004c80 	.word	0x20004c80
   1fa58:	20004cb0 	.word	0x20004cb0
   1fa5c:	00025d01 	.word	0x00025d01

0001fa60 <pend>:
{
   1fa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa64:	4606      	mov	r6, r0
   1fa66:	4614      	mov	r4, r2
   1fa68:	461d      	mov	r5, r3
   1fa6a:	f04f 0320 	mov.w	r3, #32
   1fa6e:	f3ef 8711 	mrs	r7, BASEPRI
   1fa72:	f383 8811 	msr	BASEPRI, r3
   1fa76:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1fa7a:	f006 f97c 	bl	25d76 <add_to_waitq_locked>
	__asm__ volatile(
   1fa7e:	f387 8811 	msr	BASEPRI, r7
   1fa82:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fa86:	1c6b      	adds	r3, r5, #1
   1fa88:	bf08      	it	eq
   1fa8a:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1fa8e:	d008      	beq.n	1faa2 <pend+0x42>
   1fa90:	4622      	mov	r2, r4
   1fa92:	462b      	mov	r3, r5
   1fa94:	f106 0018 	add.w	r0, r6, #24
   1fa98:	4903      	ldr	r1, [pc, #12]	; (1faa8 <pend+0x48>)
}
   1fa9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fa9e:	f000 ba99 	b.w	1ffd4 <z_add_timeout>
   1faa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1faa6:	bf00      	nop
   1faa8:	00025d01 	.word	0x00025d01

0001faac <z_pend_curr>:
{
   1faac:	b510      	push	{r4, lr}
	pending_current = _current;
   1faae:	4b07      	ldr	r3, [pc, #28]	; (1facc <z_pend_curr+0x20>)
   1fab0:	6898      	ldr	r0, [r3, #8]
   1fab2:	4b07      	ldr	r3, [pc, #28]	; (1fad0 <z_pend_curr+0x24>)
{
   1fab4:	460c      	mov	r4, r1
	pending_current = _current;
   1fab6:	6018      	str	r0, [r3, #0]
{
   1fab8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1faba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1fabe:	f7ff ffcf 	bl	1fa60 <pend>
   1fac2:	4620      	mov	r0, r4
}
   1fac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fac8:	f7e6 be82 	b.w	67d0 <arch_swap>
   1facc:	20004c80 	.word	0x20004c80
   1fad0:	20004cb0 	.word	0x20004cb0

0001fad4 <z_set_prio>:
{
   1fad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fad8:	4604      	mov	r4, r0
	__asm__ volatile(
   1fada:	f04f 0320 	mov.w	r3, #32
   1fade:	f3ef 8811 	mrs	r8, BASEPRI
   1fae2:	f383 8811 	msr	BASEPRI, r3
   1fae6:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1faea:	7b43      	ldrb	r3, [r0, #13]
   1faec:	06db      	lsls	r3, r3, #27
   1faee:	b24e      	sxtb	r6, r1
   1faf0:	d12e      	bne.n	1fb50 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1faf2:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1faf4:	bb65      	cbnz	r5, 1fb50 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1faf6:	4f18      	ldr	r7, [pc, #96]	; (1fb58 <z_set_prio+0x84>)
   1faf8:	4621      	mov	r1, r4
   1fafa:	f107 0028 	add.w	r0, r7, #40	; 0x28
   1fafe:	f7ff fdb3 	bl	1f668 <z_priq_dumb_remove>
	return list->head == list;
   1fb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1fb04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
				thread->base.prio = prio;
   1fb06:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fb08:	4283      	cmp	r3, r0
   1fb0a:	bf18      	it	ne
   1fb0c:	461d      	movne	r5, r3
   1fb0e:	2d00      	cmp	r5, #0
   1fb10:	bf38      	it	cc
   1fb12:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fb14:	b1b5      	cbz	r5, 1fb44 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1fb16:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1fb1a:	42b1      	cmp	r1, r6
   1fb1c:	dc03      	bgt.n	1fb26 <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   1fb1e:	42aa      	cmp	r2, r5
   1fb20:	d010      	beq.n	1fb44 <z_set_prio+0x70>
   1fb22:	682d      	ldr	r5, [r5, #0]
   1fb24:	e7f6      	b.n	1fb14 <z_set_prio+0x40>
	node->prev = successor->prev;
   1fb26:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   1fb28:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   1fb2c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1fb2e:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1fb30:	2001      	movs	r0, #1
   1fb32:	f7ff fdaf 	bl	1f694 <update_cache>
   1fb36:	2001      	movs	r0, #1
	__asm__ volatile(
   1fb38:	f388 8811 	msr	BASEPRI, r8
   1fb3c:	f3bf 8f6f 	isb	sy
}
   1fb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1fb44:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   1fb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1fb4a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1fb4c:	62fc      	str	r4, [r7, #44]	; 0x2c
}
   1fb4e:	e7ef      	b.n	1fb30 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1fb50:	73a6      	strb	r6, [r4, #14]
   1fb52:	2000      	movs	r0, #0
   1fb54:	e7f0      	b.n	1fb38 <z_set_prio+0x64>
   1fb56:	bf00      	nop
   1fb58:	20004c80 	.word	0x20004c80

0001fb5c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1fb5c:	4b04      	ldr	r3, [pc, #16]	; (1fb70 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1fb5e:	2100      	movs	r1, #0
   1fb60:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1fb64:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1fb68:	4608      	mov	r0, r1
   1fb6a:	f7ff bd3d 	b.w	1f5e8 <k_sched_time_slice_set>
   1fb6e:	bf00      	nop
   1fb70:	20004c80 	.word	0x20004c80

0001fb74 <z_impl_k_yield>:
{
   1fb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1fb76:	4c24      	ldr	r4, [pc, #144]	; (1fc08 <z_impl_k_yield+0x94>)
   1fb78:	4b24      	ldr	r3, [pc, #144]	; (1fc0c <z_impl_k_yield+0x98>)
   1fb7a:	68a2      	ldr	r2, [r4, #8]
   1fb7c:	429a      	cmp	r2, r3
   1fb7e:	d030      	beq.n	1fbe2 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   1fb80:	f04f 0320 	mov.w	r3, #32
   1fb84:	f3ef 8511 	mrs	r5, BASEPRI
   1fb88:	f383 8811 	msr	BASEPRI, r3
   1fb8c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1fb90:	68a1      	ldr	r1, [r4, #8]
   1fb92:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1fb96:	f7ff fd67 	bl	1f668 <z_priq_dumb_remove>
	return list->head == list;
   1fb9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1fb9c:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1fb9e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fba0:	4283      	cmp	r3, r0
   1fba2:	bf08      	it	eq
   1fba4:	2300      	moveq	r3, #0
   1fba6:	2b00      	cmp	r3, #0
   1fba8:	bf38      	it	cc
   1fbaa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fbac:	b32b      	cbz	r3, 1fbfa <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1fbae:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1fbb2:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1fbb6:	42b7      	cmp	r7, r6
   1fbb8:	db03      	blt.n	1fbc2 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1fbba:	428b      	cmp	r3, r1
   1fbbc:	d01d      	beq.n	1fbfa <z_impl_k_yield+0x86>
   1fbbe:	681b      	ldr	r3, [r3, #0]
   1fbc0:	e7f4      	b.n	1fbac <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1fbc2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1fbc4:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1fbc8:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1fbca:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1fbcc:	7b53      	ldrb	r3, [r2, #13]
   1fbce:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1fbd2:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   1fbd4:	2001      	movs	r0, #1
   1fbd6:	f7ff fd5d 	bl	1f694 <update_cache>
	__asm__ volatile(
   1fbda:	f385 8811 	msr	BASEPRI, r5
   1fbde:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1fbe2:	f04f 0320 	mov.w	r3, #32
   1fbe6:	f3ef 8011 	mrs	r0, BASEPRI
   1fbea:	f383 8811 	msr	BASEPRI, r3
   1fbee:	f3bf 8f6f 	isb	sy
}
   1fbf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1fbf6:	f7e6 bdeb 	b.w	67d0 <arch_swap>
	node->prev = list->tail;
   1fbfa:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1fbfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1fc00:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1fc02:	62e2      	str	r2, [r4, #44]	; 0x2c
}
   1fc04:	e7e2      	b.n	1fbcc <z_impl_k_yield+0x58>
   1fc06:	bf00      	nop
   1fc08:	20004c80 	.word	0x20004c80
   1fc0c:	20001410 	.word	0x20001410

0001fc10 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1fc10:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fc12:	3301      	adds	r3, #1
   1fc14:	bf08      	it	eq
   1fc16:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1fc1a:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fc1c:	d106      	bne.n	1fc2c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1fc1e:	4b0b      	ldr	r3, [pc, #44]	; (1fc4c <z_impl_k_sleep+0x3c>)
   1fc20:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1fc22:	f7ff fe45 	bl	1f8b0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1fc26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1fc2a:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   1fc2c:	4604      	mov	r4, r0
	if (ticks == 0) {
   1fc2e:	b948      	cbnz	r0, 1fc44 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   1fc30:	f7ff ffa0 	bl	1fb74 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   1fc34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1fc38:	fb84 3400 	smull	r3, r4, r4, r0
   1fc3c:	0bd8      	lsrs	r0, r3, #15
   1fc3e:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1fc42:	e7f2      	b.n	1fc2a <z_impl_k_sleep+0x1a>
   1fc44:	f7ff fede 	bl	1fa04 <z_tick_sleep.part.0>
   1fc48:	4604      	mov	r4, r0
   1fc4a:	e7f3      	b.n	1fc34 <z_impl_k_sleep+0x24>
   1fc4c:	20004c80 	.word	0x20004c80

0001fc50 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1fc50:	4b01      	ldr	r3, [pc, #4]	; (1fc58 <z_impl_k_current_get+0x8>)
   1fc52:	6898      	ldr	r0, [r3, #8]
   1fc54:	4770      	bx	lr
   1fc56:	bf00      	nop
   1fc58:	20004c80 	.word	0x20004c80

0001fc5c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1fc5c:	b538      	push	{r3, r4, r5, lr}
   1fc5e:	4604      	mov	r4, r0
   1fc60:	f04f 0320 	mov.w	r3, #32
   1fc64:	f3ef 8511 	mrs	r5, BASEPRI
   1fc68:	f383 8811 	msr	BASEPRI, r3
   1fc6c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1fc70:	f006 f8ac 	bl	25dcc <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   1fc74:	b148      	cbz	r0, 1fc8a <z_impl_k_sem_give+0x2e>
   1fc76:	2200      	movs	r2, #0
   1fc78:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1fc7a:	f006 f831 	bl	25ce0 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1fc7e:	4629      	mov	r1, r5
   1fc80:	4808      	ldr	r0, [pc, #32]	; (1fca4 <z_impl_k_sem_give+0x48>)
}
   1fc82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1fc86:	f005 bfe3 	b.w	25c50 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1fc8a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1fc8e:	429a      	cmp	r2, r3
   1fc90:	bf18      	it	ne
   1fc92:	3301      	addne	r3, #1
   1fc94:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1fc96:	2102      	movs	r1, #2
   1fc98:	f104 0010 	add.w	r0, r4, #16
   1fc9c:	f006 fb20 	bl	262e0 <z_handle_obj_poll_events>
}
   1fca0:	e7ed      	b.n	1fc7e <z_impl_k_sem_give+0x22>
   1fca2:	bf00      	nop
   1fca4:	200053b6 	.word	0x200053b6

0001fca8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1fca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fcaa:	4614      	mov	r4, r2
   1fcac:	461d      	mov	r5, r3
   1fcae:	f04f 0320 	mov.w	r3, #32
   1fcb2:	f3ef 8111 	mrs	r1, BASEPRI
   1fcb6:	f383 8811 	msr	BASEPRI, r3
   1fcba:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1fcbe:	6883      	ldr	r3, [r0, #8]
   1fcc0:	b143      	cbz	r3, 1fcd4 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1fcc2:	3b01      	subs	r3, #1
   1fcc4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1fcc6:	f381 8811 	msr	BASEPRI, r1
   1fcca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1fcce:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1fcd0:	b003      	add	sp, #12
   1fcd2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fcd4:	ea54 0305 	orrs.w	r3, r4, r5
   1fcd8:	d106      	bne.n	1fce8 <z_impl_k_sem_take+0x40>
   1fcda:	f381 8811 	msr	BASEPRI, r1
   1fcde:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1fce2:	f06f 000f 	mvn.w	r0, #15
   1fce6:	e7f3      	b.n	1fcd0 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1fce8:	4602      	mov	r2, r0
   1fcea:	e9cd 4500 	strd	r4, r5, [sp]
   1fcee:	4802      	ldr	r0, [pc, #8]	; (1fcf8 <z_impl_k_sem_take+0x50>)
   1fcf0:	f7ff fedc 	bl	1faac <z_pend_curr>
	return ret;
   1fcf4:	e7ec      	b.n	1fcd0 <z_impl_k_sem_take+0x28>
   1fcf6:	bf00      	nop
   1fcf8:	200053b6 	.word	0x200053b6

0001fcfc <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1fcfc:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1fcfe:	4c08      	ldr	r4, [pc, #32]	; (1fd20 <k_sys_work_q_init+0x24>)
   1fd00:	4908      	ldr	r1, [pc, #32]	; (1fd24 <k_sys_work_q_init+0x28>)
   1fd02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fd06:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1fd0a:	4620      	mov	r0, r4
   1fd0c:	f000 f8be 	bl	1fe8c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1fd10:	4905      	ldr	r1, [pc, #20]	; (1fd28 <k_sys_work_q_init+0x2c>)
   1fd12:	f104 0018 	add.w	r0, r4, #24
   1fd16:	f006 f8ae 	bl	25e76 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1fd1a:	2000      	movs	r0, #0
   1fd1c:	bd10      	pop	{r4, pc}
   1fd1e:	bf00      	nop
   1fd20:	20001510 	.word	0x20001510
   1fd24:	20007630 	.word	0x20007630
   1fd28:	0002a7bd 	.word	0x0002a7bd

0001fd2c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, uint32_t options, const char *name)
{
   1fd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd2e:	b087      	sub	sp, #28
   1fd30:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	sys_dlist_init(&w->waitq);
   1fd34:	f100 0530 	add.w	r5, r0, #48	; 0x30
#endif
#endif
	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fd38:	e9cd 6703 	strd	r6, r7, [sp, #12]
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   1fd3c:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fd3e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1fd40:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   1fd42:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
   1fd46:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1fd48:	9601      	str	r6, [sp, #4]
	thread_base->thread_state = (uint8_t)initial_state;
   1fd4a:	2504      	movs	r5, #4
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fd4c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->thread_state = (uint8_t)initial_state;
   1fd4e:	7345      	strb	r5, [r0, #13]

	thread_base->sched_locked = 0U;
   1fd50:	2500      	movs	r5, #0
	node->prev = NULL;
   1fd52:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->user_options = (uint8_t)options;
   1fd56:	7307      	strb	r7, [r0, #12]
	thread_base->sched_locked = 0U;
   1fd58:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fd5a:	9600      	str	r6, [sp, #0]
{
   1fd5c:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fd5e:	f7e6 fddd 	bl	691c <arch_new_thread>
	if (!_current) {
   1fd62:	4b04      	ldr	r3, [pc, #16]	; (1fd74 <z_setup_new_thread+0x48>)
   1fd64:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   1fd66:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1fd6a:	b103      	cbz	r3, 1fd6e <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
   1fd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1fd6e:	6723      	str	r3, [r4, #112]	; 0x70
}
   1fd70:	b007      	add	sp, #28
   1fd72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fd74:	20004c80 	.word	0x20004c80

0001fd78 <z_impl_k_thread_create>:
{
   1fd78:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd7a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fd7c:	2500      	movs	r5, #0
   1fd7e:	9505      	str	r5, [sp, #20]
   1fd80:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1fd82:	9504      	str	r5, [sp, #16]
   1fd84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1fd86:	9503      	str	r5, [sp, #12]
   1fd88:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1fd8a:	9502      	str	r5, [sp, #8]
{
   1fd8c:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fd90:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1fd92:	9501      	str	r5, [sp, #4]
   1fd94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1fd96:	9500      	str	r5, [sp, #0]
{
   1fd98:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fd9a:	f7ff ffc7 	bl	1fd2c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1fd9e:	1c7b      	adds	r3, r7, #1
   1fda0:	bf08      	it	eq
   1fda2:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1fda6:	d005      	beq.n	1fdb4 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fda8:	ea56 0307 	orrs.w	r3, r6, r7
   1fdac:	d105      	bne.n	1fdba <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1fdae:	4620      	mov	r0, r4
   1fdb0:	f7ff fce4 	bl	1f77c <z_sched_start>
}
   1fdb4:	4620      	mov	r0, r4
   1fdb6:	b007      	add	sp, #28
   1fdb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1fdba:	4904      	ldr	r1, [pc, #16]	; (1fdcc <z_impl_k_thread_create+0x54>)
   1fdbc:	4632      	mov	r2, r6
   1fdbe:	463b      	mov	r3, r7
   1fdc0:	f104 0018 	add.w	r0, r4, #24
   1fdc4:	f000 f906 	bl	1ffd4 <z_add_timeout>
   1fdc8:	e7f4      	b.n	1fdb4 <z_impl_k_thread_create+0x3c>
   1fdca:	bf00      	nop
   1fdcc:	00025d01 	.word	0x00025d01

0001fdd0 <z_init_static_threads>:
{
   1fdd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1fdd4:	4e2a      	ldr	r6, [pc, #168]	; (1fe80 <z_init_static_threads+0xb0>)
   1fdd6:	4d2b      	ldr	r5, [pc, #172]	; (1fe84 <z_init_static_threads+0xb4>)
{
   1fdd8:	b086      	sub	sp, #24
   1fdda:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1fddc:	42b5      	cmp	r5, r6
   1fdde:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1fde2:	d310      	bcc.n	1fe06 <z_init_static_threads+0x36>
	k_sched_lock();
   1fde4:	f7ff fc2c 	bl	1f640 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1fde8:	4c26      	ldr	r4, [pc, #152]	; (1fe84 <z_init_static_threads+0xb4>)
   1fdea:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1fe88 <z_init_static_threads+0xb8>
   1fdee:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1fdf2:	f240 36e7 	movw	r6, #999	; 0x3e7
   1fdf6:	2700      	movs	r7, #0
   1fdf8:	4544      	cmp	r4, r8
   1fdfa:	d321      	bcc.n	1fe40 <z_init_static_threads+0x70>
}
   1fdfc:	b006      	add	sp, #24
   1fdfe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1fe02:	f7ff bc6b 	b.w	1f6dc <k_sched_unlock>
		z_setup_new_thread(
   1fe06:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1fe0a:	9305      	str	r3, [sp, #20]
   1fe0c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1fe10:	9304      	str	r3, [sp, #16]
   1fe12:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1fe16:	9303      	str	r3, [sp, #12]
   1fe18:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1fe1c:	9302      	str	r3, [sp, #8]
   1fe1e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1fe22:	9301      	str	r3, [sp, #4]
   1fe24:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1fe28:	9300      	str	r3, [sp, #0]
   1fe2a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1fe2e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1fe32:	f7ff ff7b 	bl	1fd2c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1fe36:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1fe3a:	65dd      	str	r5, [r3, #92]	; 0x5c
   1fe3c:	4625      	mov	r5, r4
   1fe3e:	e7cd      	b.n	1fddc <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1fe40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fe42:	1c5a      	adds	r2, r3, #1
   1fe44:	d00d      	beq.n	1fe62 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1fe46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1fe4a:	4630      	mov	r0, r6
   1fe4c:	4639      	mov	r1, r7
   1fe4e:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fe52:	42b9      	cmp	r1, r7
   1fe54:	bf08      	it	eq
   1fe56:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1fe58:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fe5a:	d104      	bne.n	1fe66 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1fe5c:	4628      	mov	r0, r5
   1fe5e:	f7ff fc8d 	bl	1f77c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1fe62:	3430      	adds	r4, #48	; 0x30
   1fe64:	e7c8      	b.n	1fdf8 <z_init_static_threads+0x28>
   1fe66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fe6a:	2300      	movs	r3, #0
   1fe6c:	f7e0 f948 	bl	100 <__aeabi_uldivmod>
   1fe70:	4602      	mov	r2, r0
   1fe72:	460b      	mov	r3, r1
   1fe74:	f105 0018 	add.w	r0, r5, #24
   1fe78:	4651      	mov	r1, sl
   1fe7a:	f000 f8ab 	bl	1ffd4 <z_add_timeout>
   1fe7e:	e7f0      	b.n	1fe62 <z_init_static_threads+0x92>
   1fe80:	20000784 	.word	0x20000784
   1fe84:	20000784 	.word	0x20000784
   1fe88:	00025d01 	.word	0x00025d01

0001fe8c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1fe8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe90:	4604      	mov	r4, r0
   1fe92:	b088      	sub	sp, #32
   1fe94:	460d      	mov	r5, r1
   1fe96:	4616      	mov	r6, r2
   1fe98:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1fe9a:	f005 fe55 	bl	25b48 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1fe9e:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1fea2:	2200      	movs	r2, #0
   1fea4:	2300      	movs	r3, #0
   1fea6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1feaa:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1feae:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1feb2:	4b07      	ldr	r3, [pc, #28]	; (1fed0 <k_work_q_start+0x44>)
   1feb4:	9400      	str	r4, [sp, #0]
   1feb6:	4632      	mov	r2, r6
   1feb8:	4629      	mov	r1, r5
   1feba:	4640      	mov	r0, r8
   1febc:	f7ff ff5c 	bl	1fd78 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1fec0:	4904      	ldr	r1, [pc, #16]	; (1fed4 <k_work_q_start+0x48>)
   1fec2:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1fec4:	b008      	add	sp, #32
   1fec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1feca:	f005 bfd4 	b.w	25e76 <z_impl_k_thread_name_set>
   1fece:	bf00      	nop
   1fed0:	00020689 	.word	0x00020689
   1fed4:	0002a7c6 	.word	0x0002a7c6

0001fed8 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1fed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fedc:	4606      	mov	r6, r0
   1fede:	460d      	mov	r5, r1
   1fee0:	4690      	mov	r8, r2
   1fee2:	4699      	mov	r9, r3
	__asm__ volatile(
   1fee4:	f04f 0320 	mov.w	r3, #32
   1fee8:	f3ef 8711 	mrs	r7, BASEPRI
   1feec:	f383 8811 	msr	BASEPRI, r3
   1fef0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1fef4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1fef6:	b17b      	cbz	r3, 1ff18 <k_delayed_work_submit_to_queue+0x40>
   1fef8:	4283      	cmp	r3, r0
   1fefa:	d128      	bne.n	1ff4e <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1fefc:	4628      	mov	r0, r5
   1fefe:	f005 ffdc 	bl	25eba <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   1ff02:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1ff06:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1ff08:	d008      	beq.n	1ff1c <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1ff0a:	2800      	cmp	r0, #0
   1ff0c:	da07      	bge.n	1ff1e <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1ff0e:	f387 8811 	msr	BASEPRI, r7
   1ff12:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1ff16:	e00f      	b.n	1ff38 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1ff18:	2800      	cmp	r0, #0
   1ff1a:	d0ef      	beq.n	1fefc <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1ff1c:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ff1e:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1ff22:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ff24:	d10b      	bne.n	1ff3e <k_delayed_work_submit_to_queue+0x66>
   1ff26:	f387 8811 	msr	BASEPRI, r7
   1ff2a:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1ff2e:	4629      	mov	r1, r5
   1ff30:	4630      	mov	r0, r6
   1ff32:	f005 ffa5 	bl	25e80 <k_work_submit_to_queue>
		return 0;
   1ff36:	2400      	movs	r4, #0
}
   1ff38:	4620      	mov	r0, r4
   1ff3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1ff3e:	4905      	ldr	r1, [pc, #20]	; (1ff54 <k_delayed_work_submit_to_queue+0x7c>)
   1ff40:	4642      	mov	r2, r8
   1ff42:	464b      	mov	r3, r9
   1ff44:	f105 0010 	add.w	r0, r5, #16
   1ff48:	f000 f844 	bl	1ffd4 <z_add_timeout>
   1ff4c:	e7df      	b.n	1ff0e <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1ff4e:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1ff52:	e7dc      	b.n	1ff0e <k_delayed_work_submit_to_queue+0x36>
   1ff54:	00025eb1 	.word	0x00025eb1

0001ff58 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1ff58:	4b03      	ldr	r3, [pc, #12]	; (1ff68 <elapsed+0x10>)
   1ff5a:	681b      	ldr	r3, [r3, #0]
   1ff5c:	b90b      	cbnz	r3, 1ff62 <elapsed+0xa>
   1ff5e:	f7e6 b9eb 	b.w	6338 <z_clock_elapsed>
}
   1ff62:	2000      	movs	r0, #0
   1ff64:	4770      	bx	lr
   1ff66:	bf00      	nop
   1ff68:	20004cbc 	.word	0x20004cbc

0001ff6c <remove_timeout>:
{
   1ff6c:	b530      	push	{r4, r5, lr}
   1ff6e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ff70:	b168      	cbz	r0, 1ff8e <remove_timeout+0x22>
   1ff72:	4a0a      	ldr	r2, [pc, #40]	; (1ff9c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1ff74:	6852      	ldr	r2, [r2, #4]
   1ff76:	4290      	cmp	r0, r2
   1ff78:	d009      	beq.n	1ff8e <remove_timeout+0x22>
	if (next(t) != NULL) {
   1ff7a:	b143      	cbz	r3, 1ff8e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1ff7c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1ff80:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1ff84:	1912      	adds	r2, r2, r4
   1ff86:	eb45 0101 	adc.w	r1, r5, r1
   1ff8a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1ff8e:	6842      	ldr	r2, [r0, #4]
   1ff90:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1ff92:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ff94:	2300      	movs	r3, #0
	node->prev = NULL;
   1ff96:	e9c0 3300 	strd	r3, r3, [r0]
}
   1ff9a:	bd30      	pop	{r4, r5, pc}
   1ff9c:	20000684 	.word	0x20000684

0001ffa0 <next_timeout>:
	return list->head == list;
   1ffa0:	4b0a      	ldr	r3, [pc, #40]	; (1ffcc <next_timeout+0x2c>)

static int32_t next_timeout(void)
{
   1ffa2:	b510      	push	{r4, lr}
   1ffa4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ffa6:	429c      	cmp	r4, r3
   1ffa8:	bf08      	it	eq
   1ffaa:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1ffac:	f7ff ffd4 	bl	1ff58 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1ffb0:	b144      	cbz	r4, 1ffc4 <next_timeout+0x24>
   1ffb2:	6923      	ldr	r3, [r4, #16]
   1ffb4:	1a18      	subs	r0, r3, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1ffb6:	4b06      	ldr	r3, [pc, #24]	; (1ffd0 <next_timeout+0x30>)
   1ffb8:	691b      	ldr	r3, [r3, #16]
   1ffba:	b113      	cbz	r3, 1ffc2 <next_timeout+0x22>
   1ffbc:	4298      	cmp	r0, r3
   1ffbe:	bfa8      	it	ge
   1ffc0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1ffc2:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1ffc4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ffc8:	e7f5      	b.n	1ffb6 <next_timeout+0x16>
   1ffca:	bf00      	nop
   1ffcc:	20000684 	.word	0x20000684
   1ffd0:	20004c80 	.word	0x20004c80

0001ffd4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1ffd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffd8:	9101      	str	r1, [sp, #4]
   1ffda:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ffdc:	1c4b      	adds	r3, r1, #1
   1ffde:	bf08      	it	eq
   1ffe0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1ffe4:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ffe6:	d06c      	beq.n	200c2 <z_add_timeout+0xee>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   1ffe8:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1ffea:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1ffee:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1fff2:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1fff6:	ebb3 0804 	subs.w	r8, r3, r4
   1fffa:	eb6b 0905 	sbc.w	r9, fp, r5
   1fffe:	f1b8 0f00 	cmp.w	r8, #0
   20002:	f179 0300 	sbcs.w	r3, r9, #0
   20006:	db0f      	blt.n	20028 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   20008:	f7ff ffa6 	bl	1ff58 <elapsed>
   2000c:	4a33      	ldr	r2, [pc, #204]	; (200dc <z_add_timeout+0x108>)
   2000e:	e9d2 1c00 	ldrd	r1, ip, [r2]
   20012:	f06f 0301 	mvn.w	r3, #1
   20016:	1a5b      	subs	r3, r3, r1
   20018:	eb6b 020c 	sbc.w	r2, fp, ip
   2001c:	1b1e      	subs	r6, r3, r4
   2001e:	eb62 0705 	sbc.w	r7, r2, r5
   20022:	1a34      	subs	r4, r6, r0
   20024:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   20028:	9b01      	ldr	r3, [sp, #4]
   2002a:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   2002e:	f04f 0320 	mov.w	r3, #32
   20032:	f3ef 8611 	mrs	r6, BASEPRI
   20036:	f383 8811 	msr	BASEPRI, r3
   2003a:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   2003e:	f7ff ff8b 	bl	1ff58 <elapsed>
	ticks = MAX(1, ticks);
   20042:	2c01      	cmp	r4, #1
   20044:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   20048:	4b25      	ldr	r3, [pc, #148]	; (200e0 <z_add_timeout+0x10c>)
   2004a:	bfb8      	it	lt
   2004c:	2401      	movlt	r4, #1
   2004e:	681a      	ldr	r2, [r3, #0]
   20050:	bfb8      	it	lt
   20052:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   20054:	1824      	adds	r4, r4, r0
   20056:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2005a:	429a      	cmp	r2, r3
   2005c:	e9ca 4504 	strd	r4, r5, [sl, #16]
   20060:	d001      	beq.n	20066 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20062:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   20064:	b952      	cbnz	r2, 2007c <z_add_timeout+0xa8>
	node->prev = list->tail;
   20066:	685a      	ldr	r2, [r3, #4]
   20068:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   2006c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   2006e:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   20072:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   20076:	f8c3 a004 	str.w	sl, [r3, #4]
}
   2007a:	e014      	b.n	200a6 <z_add_timeout+0xd2>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   2007c:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   20080:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   20084:	454d      	cmp	r5, r9
   20086:	bf08      	it	eq
   20088:	4544      	cmpeq	r4, r8
   2008a:	d21d      	bcs.n	200c8 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
   2008c:	ebb8 0004 	subs.w	r0, r8, r4
   20090:	eb69 0105 	sbc.w	r1, r9, r5
   20094:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   20098:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2009a:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   2009e:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   200a2:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   200a6:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   200a8:	429a      	cmp	r2, r3
   200aa:	d006      	beq.n	200ba <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   200ac:	4592      	cmp	sl, r2
   200ae:	d104      	bne.n	200ba <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
   200b0:	f7ff ff76 	bl	1ffa0 <next_timeout>
   200b4:	2100      	movs	r1, #0
   200b6:	f7e6 f8e1 	bl	627c <z_clock_set_timeout>
	__asm__ volatile(
   200ba:	f386 8811 	msr	BASEPRI, r6
   200be:	f3bf 8f6f 	isb	sy
		}
	}
}
   200c2:	b003      	add	sp, #12
   200c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   200c8:	ebb4 0008 	subs.w	r0, r4, r8
   200cc:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   200d0:	42ba      	cmp	r2, r7
   200d2:	e9ca 0104 	strd	r0, r1, [sl, #16]
   200d6:	d0c6      	beq.n	20066 <z_add_timeout+0x92>
   200d8:	6812      	ldr	r2, [r2, #0]
   200da:	e7c3      	b.n	20064 <z_add_timeout+0x90>
   200dc:	200015a8 	.word	0x200015a8
   200e0:	20000684 	.word	0x20000684

000200e4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   200e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200e8:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   200ea:	f7ff fbab 	bl	1f844 <z_time_slice>
	__asm__ volatile(
   200ee:	f04f 0320 	mov.w	r3, #32
   200f2:	f3ef 8411 	mrs	r4, BASEPRI
   200f6:	f383 8811 	msr	BASEPRI, r3
   200fa:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   200fe:	4d2d      	ldr	r5, [pc, #180]	; (201b4 <z_clock_announce+0xd0>)
   20100:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 201b8 <z_clock_announce+0xd4>
	return list->head == list;
   20104:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 201bc <z_clock_announce+0xd8>
   20108:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   2010a:	4651      	mov	r1, sl
   2010c:	f8d5 c000 	ldr.w	ip, [r5]
   20110:	f8db 0000 	ldr.w	r0, [fp]
   20114:	4662      	mov	r2, ip
   20116:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20118:	4558      	cmp	r0, fp
   2011a:	e9cd 2300 	strd	r2, r3, [sp]
   2011e:	e9da 8900 	ldrd	r8, r9, [sl]
   20122:	d00e      	beq.n	20142 <z_clock_announce+0x5e>
   20124:	b168      	cbz	r0, 20142 <z_clock_announce+0x5e>
   20126:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   2012a:	42bb      	cmp	r3, r7
   2012c:	bf08      	it	eq
   2012e:	45b4      	cmpeq	ip, r6
   20130:	d21e      	bcs.n	20170 <z_clock_announce+0x8c>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   20132:	9b00      	ldr	r3, [sp, #0]
   20134:	ebb6 0c03 	subs.w	ip, r6, r3
   20138:	9b01      	ldr	r3, [sp, #4]
   2013a:	eb67 0603 	sbc.w	r6, r7, r3
   2013e:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   20142:	9b00      	ldr	r3, [sp, #0]
   20144:	eb13 0208 	adds.w	r2, r3, r8
   20148:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   2014a:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   2014e:	eb43 0309 	adc.w	r3, r3, r9
   20152:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   20156:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   20158:	f7ff ff22 	bl	1ffa0 <next_timeout>
   2015c:	4631      	mov	r1, r6
   2015e:	f7e6 f88d 	bl	627c <z_clock_set_timeout>
	__asm__ volatile(
   20162:	f384 8811 	msr	BASEPRI, r4
   20166:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2016a:	b003      	add	sp, #12
   2016c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   20170:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   20174:	f04f 0200 	mov.w	r2, #0
   20178:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   2017c:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   20180:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   20184:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   20188:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   2018c:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   2018e:	f7ff feed 	bl	1ff6c <remove_timeout>
   20192:	f384 8811 	msr	BASEPRI, r4
   20196:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2019a:	6883      	ldr	r3, [r0, #8]
   2019c:	4798      	blx	r3
	__asm__ volatile(
   2019e:	f04f 0320 	mov.w	r3, #32
   201a2:	f3ef 8411 	mrs	r4, BASEPRI
   201a6:	f383 8811 	msr	BASEPRI, r3
   201aa:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   201ae:	4902      	ldr	r1, [pc, #8]	; (201b8 <z_clock_announce+0xd4>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   201b0:	e7ac      	b.n	2010c <z_clock_announce+0x28>
   201b2:	bf00      	nop
   201b4:	20004cbc 	.word	0x20004cbc
   201b8:	200015a8 	.word	0x200015a8
   201bc:	20000684 	.word	0x20000684

000201c0 <z_tick_get>:

int64_t z_tick_get(void)
{
   201c0:	b510      	push	{r4, lr}
   201c2:	f04f 0320 	mov.w	r3, #32
   201c6:	f3ef 8411 	mrs	r4, BASEPRI
   201ca:	f383 8811 	msr	BASEPRI, r3
   201ce:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   201d2:	f7e6 f8b1 	bl	6338 <z_clock_elapsed>
   201d6:	4b06      	ldr	r3, [pc, #24]	; (201f0 <z_tick_get+0x30>)
   201d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   201dc:	1812      	adds	r2, r2, r0
   201de:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   201e2:	f384 8811 	msr	BASEPRI, r4
   201e6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   201ea:	4610      	mov	r0, r2
   201ec:	4619      	mov	r1, r3
   201ee:	bd10      	pop	{r4, pc}
   201f0:	200015a8 	.word	0x200015a8

000201f4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   201f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   201f6:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   201fa:	1c56      	adds	r6, r2, #1
   201fc:	f143 0700 	adc.w	r7, r3, #0
   20200:	2f00      	cmp	r7, #0
   20202:	bf08      	it	eq
   20204:	2e02      	cmpeq	r6, #2
{
   20206:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   20208:	d302      	bcc.n	20210 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2020a:	490c      	ldr	r1, [pc, #48]	; (2023c <z_timer_expiration_handler+0x48>)
   2020c:	f7ff fee2 	bl	1ffd4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   20210:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20212:	3301      	adds	r3, #1
   20214:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   20216:	6a23      	ldr	r3, [r4, #32]
   20218:	b10b      	cbz	r3, 2021e <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   2021a:	4620      	mov	r0, r4
   2021c:	4798      	blx	r3
	return list->head == list;
   2021e:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20222:	42a5      	cmp	r5, r4
   20224:	d008      	beq.n	20238 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   20226:	b13d      	cbz	r5, 20238 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   20228:	4628      	mov	r0, r5
   2022a:	f005 fcf8 	bl	25c1e <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   2022e:	4628      	mov	r0, r5
   20230:	f005 fd56 	bl	25ce0 <z_ready_thread>
   20234:	2300      	movs	r3, #0
   20236:	67ab      	str	r3, [r5, #120]	; 0x78

	arch_thread_return_value_set(thread, 0);
}
   20238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2023a:	bf00      	nop
   2023c:	000201f5 	.word	0x000201f5

00020240 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   20240:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   20244:	4619      	mov	r1, r3
   20246:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   20248:	1c4c      	adds	r4, r1, #1
{
   2024a:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2024c:	bf08      	it	eq
   2024e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   20252:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   20256:	4680      	mov	r8, r0
   20258:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2025a:	d047      	beq.n	202ec <z_impl_k_timer_start+0xac>
   2025c:	4614      	mov	r4, r2
   2025e:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   20260:	ea54 0305 	orrs.w	r3, r4, r5
   20264:	d016      	beq.n	20294 <z_impl_k_timer_start+0x54>
   20266:	f06f 0301 	mvn.w	r3, #1
   2026a:	ebb3 0a02 	subs.w	sl, r3, r2
   2026e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20272:	eb63 0b05 	sbc.w	fp, r3, r5
   20276:	f1ba 0f00 	cmp.w	sl, #0
   2027a:	f17b 0300 	sbcs.w	r3, fp, #0
   2027e:	da09      	bge.n	20294 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   20280:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   20284:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   20288:	2c01      	cmp	r4, #1
   2028a:	f175 0300 	sbcs.w	r3, r5, #0
   2028e:	bfbc      	itt	lt
   20290:	2401      	movlt	r4, #1
   20292:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   20294:	f06f 0301 	mvn.w	r3, #1
   20298:	1a1b      	subs	r3, r3, r0
   2029a:	9300      	str	r3, [sp, #0]
   2029c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   202a0:	eb63 0301 	sbc.w	r3, r3, r1
   202a4:	9301      	str	r3, [sp, #4]
   202a6:	e9dd 2300 	ldrd	r2, r3, [sp]
   202aa:	2a00      	cmp	r2, #0
   202ac:	f173 0300 	sbcs.w	r3, r3, #0
   202b0:	da0c      	bge.n	202cc <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   202b2:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   202b6:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   202ba:	f1b8 0f00 	cmp.w	r8, #0
   202be:	f179 0300 	sbcs.w	r3, r9, #0
   202c2:	bfbc      	itt	lt
   202c4:	f04f 0800 	movlt.w	r8, #0
   202c8:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   202cc:	4630      	mov	r0, r6
   202ce:	f005 fe5a 	bl	25f86 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   202d2:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   202d4:	4907      	ldr	r1, [pc, #28]	; (202f4 <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
   202d6:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   202d8:	4642      	mov	r2, r8
   202da:	464b      	mov	r3, r9
   202dc:	4630      	mov	r0, r6
	timer->period = period;
   202de:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   202e2:	b002      	add	sp, #8
   202e4:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   202e8:	f7ff be74 	b.w	1ffd4 <z_add_timeout>
}
   202ec:	b002      	add	sp, #8
   202ee:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   202f2:	bf00      	nop
   202f4:	000201f5 	.word	0x000201f5

000202f8 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   202f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   202fc:	b089      	sub	sp, #36	; 0x24
   202fe:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   20300:	2301      	movs	r3, #1
   20302:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   20306:	4b29      	ldr	r3, [pc, #164]	; (203ac <z_impl_k_poll+0xb4>)
	struct _poller poller = { .is_polling = true,
   20308:	689b      	ldr	r3, [r3, #8]
   2030a:	9306      	str	r3, [sp, #24]
   2030c:	4b28      	ldr	r3, [pc, #160]	; (203b0 <z_impl_k_poll+0xb8>)
   2030e:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   20310:	ea52 0307 	orrs.w	r3, r2, r7
{
   20314:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, &poller,
   20316:	bf0c      	ite	eq
   20318:	2301      	moveq	r3, #1
   2031a:	2300      	movne	r3, #0
   2031c:	aa05      	add	r2, sp, #20
{
   2031e:	4605      	mov	r5, r0
	events_registered = register_events(events, num_events, &poller,
   20320:	f005 ff6e 	bl	26200 <register_events>
   20324:	4680      	mov	r8, r0
	__asm__ volatile(
   20326:	f04f 0320 	mov.w	r3, #32
   2032a:	f3ef 8911 	mrs	r9, BASEPRI
   2032e:	f383 8811 	msr	BASEPRI, r3
   20332:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   20336:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2033a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   2033e:	b963      	cbnz	r3, 2035a <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
   20340:	4601      	mov	r1, r0
   20342:	464a      	mov	r2, r9
   20344:	4628      	mov	r0, r5
   20346:	f005 febb 	bl	260c0 <clear_event_registrations>
	__asm__ volatile(
   2034a:	f389 8811 	msr	BASEPRI, r9
   2034e:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   20352:	4620      	mov	r0, r4
   20354:	b009      	add	sp, #36	; 0x24
   20356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
   2035a:	2300      	movs	r3, #0
   2035c:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20360:	ea56 0307 	orrs.w	r3, r6, r7
   20364:	d106      	bne.n	20374 <z_impl_k_poll+0x7c>
   20366:	f389 8811 	msr	BASEPRI, r9
   2036a:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2036e:	f06f 040a 	mvn.w	r4, #10
   20372:	e7ee      	b.n	20352 <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   20374:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20376:	e9cd 6700 	strd	r6, r7, [sp]
   2037a:	4649      	mov	r1, r9
   2037c:	480d      	ldr	r0, [pc, #52]	; (203b4 <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2037e:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20382:	f7ff fb93 	bl	1faac <z_pend_curr>
   20386:	4604      	mov	r4, r0
	__asm__ volatile(
   20388:	f04f 0320 	mov.w	r3, #32
   2038c:	f3ef 8611 	mrs	r6, BASEPRI
   20390:	f383 8811 	msr	BASEPRI, r3
   20394:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   20398:	4632      	mov	r2, r6
   2039a:	4641      	mov	r1, r8
   2039c:	4628      	mov	r0, r5
   2039e:	f005 fe8f 	bl	260c0 <clear_event_registrations>
	__asm__ volatile(
   203a2:	f386 8811 	msr	BASEPRI, r6
   203a6:	f3bf 8f6f 	isb	sy
	return swap_rc;
   203aa:	e7d2      	b.n	20352 <z_impl_k_poll+0x5a>
   203ac:	20004c80 	.word	0x20004c80
   203b0:	0002614d 	.word	0x0002614d
   203b4:	200053b6 	.word	0x200053b6

000203b8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   203b8:	b538      	push	{r3, r4, r5, lr}
   203ba:	4603      	mov	r3, r0
	__asm__ volatile(
   203bc:	f04f 0220 	mov.w	r2, #32
   203c0:	f3ef 8511 	mrs	r5, BASEPRI
   203c4:	f382 8811 	msr	BASEPRI, r2
   203c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   203cc:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   203ce:	2101      	movs	r1, #1
   203d0:	6081      	str	r1, [r0, #8]
	return list->head == list;
   203d2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   203d4:	4283      	cmp	r3, r0
   203d6:	d106      	bne.n	203e6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   203d8:	f385 8811 	msr	BASEPRI, r5
   203dc:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   203e0:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   203e2:	4620      	mov	r0, r4
   203e4:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   203e6:	e9d0 3200 	ldrd	r3, r2, [r0]
   203ea:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   203ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   203ee:	2300      	movs	r3, #0
	node->prev = NULL;
   203f0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   203f4:	f005 fe8f 	bl	26116 <signal_poll_event>
	z_reschedule(&lock, key);
   203f8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   203fa:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   203fc:	4801      	ldr	r0, [pc, #4]	; (20404 <z_impl_k_poll_signal_raise+0x4c>)
   203fe:	f005 fc27 	bl	25c50 <z_reschedule>
	return rc;
   20402:	e7ee      	b.n	203e2 <z_impl_k_poll_signal_raise+0x2a>
   20404:	200053b6 	.word	0x200053b6

00020408 <attr_find_by_handle>:
{
   20408:	b570      	push	{r4, r5, r6, lr}
   2040a:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   2040c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   20410:	b1a8      	cbz	r0, 2043e <attr_find_by_handle+0x36>
	ssize_t upper = dm->cur_attr_id - 1;
   20412:	3801      	subs	r0, #1
	ssize_t lower = 0;
   20414:	2600      	movs	r6, #0
	while (upper >= lower) {
   20416:	4286      	cmp	r6, r0
   20418:	dd01      	ble.n	2041e <attr_find_by_handle+0x16>
		return NULL;
   2041a:	2000      	movs	r0, #0
   2041c:	e00f      	b.n	2043e <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   2041e:	1832      	adds	r2, r6, r0
   20420:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   20424:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   20426:	1cd5      	adds	r5, r2, #3
   20428:	00eb      	lsls	r3, r5, #3
   2042a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   2042e:	892d      	ldrh	r5, [r5, #8]
   20430:	428d      	cmp	r5, r1
   20432:	d201      	bcs.n	20438 <attr_find_by_handle+0x30>
			lower = m + 1;
   20434:	1c56      	adds	r6, r2, #1
   20436:	e7ee      	b.n	20416 <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   20438:	d802      	bhi.n	20440 <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   2043a:	3304      	adds	r3, #4
   2043c:	18e0      	adds	r0, r4, r3
}
   2043e:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   20440:	1e50      	subs	r0, r2, #1
   20442:	e7e8      	b.n	20416 <attr_find_by_handle+0xe>

00020444 <bt_gatt_dm_attr_service_val>:
{
   20444:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   20446:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2044a:	6801      	ldr	r1, [r0, #0]
   2044c:	f8ad 3002 	strh.w	r3, [sp, #2]
{
   20450:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   20452:	2400      	movs	r4, #0
   20454:	4668      	mov	r0, sp
   20456:	f88d 4000 	strb.w	r4, [sp]
   2045a:	f002 fa30 	bl	228be <bt_uuid_cmp>
   2045e:	b918      	cbnz	r0, 20468 <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   20460:	6828      	ldr	r0, [r5, #0]
   20462:	3808      	subs	r0, #8
}
   20464:	b003      	add	sp, #12
   20466:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   20468:	f642 0301 	movw	r3, #10241	; 0x2801
   2046c:	6829      	ldr	r1, [r5, #0]
   2046e:	f88d 4004 	strb.w	r4, [sp, #4]
   20472:	a801      	add	r0, sp, #4
   20474:	f8ad 3006 	strh.w	r3, [sp, #6]
   20478:	f002 fa21 	bl	228be <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   2047c:	2800      	cmp	r0, #0
   2047e:	d0ef      	beq.n	20460 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   20480:	4620      	mov	r0, r4
   20482:	e7ef      	b.n	20464 <bt_gatt_dm_attr_service_val+0x20>

00020484 <bt_gatt_dm_attr_chrc_val>:
{
   20484:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   20486:	f642 0303 	movw	r3, #10243	; 0x2803
   2048a:	6801      	ldr	r1, [r0, #0]
   2048c:	f8ad 3006 	strh.w	r3, [sp, #6]
{
   20490:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   20492:	2400      	movs	r4, #0
   20494:	a801      	add	r0, sp, #4
   20496:	f88d 4004 	strb.w	r4, [sp, #4]
   2049a:	f002 fa10 	bl	228be <bt_uuid_cmp>
   2049e:	b918      	cbnz	r0, 204a8 <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   204a0:	6828      	ldr	r0, [r5, #0]
   204a2:	3808      	subs	r0, #8
}
   204a4:	b003      	add	sp, #12
   204a6:	bd30      	pop	{r4, r5, pc}
	return NULL;
   204a8:	4620      	mov	r0, r4
   204aa:	e7fb      	b.n	204a4 <bt_gatt_dm_attr_chrc_val+0x20>

000204ac <bt_gatt_dm_conn_get>:
}
   204ac:	6800      	ldr	r0, [r0, #0]
   204ae:	4770      	bx	lr

000204b0 <bt_gatt_dm_service_get>:
}
   204b0:	301c      	adds	r0, #28
   204b2:	4770      	bx	lr

000204b4 <bt_gatt_dm_char_next>:
{
   204b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   204b6:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   204ba:	b131      	cbz	r1, 204ca <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   204bc:	42a9      	cmp	r1, r5
   204be:	d203      	bcs.n	204c8 <bt_gatt_dm_char_next+0x14>
	return NULL;
   204c0:	2500      	movs	r5, #0
}
   204c2:	4628      	mov	r0, r5
   204c4:	b003      	add	sp, #12
   204c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   204c8:	460d      	mov	r5, r1
		const struct bt_gatt_dm_attr *const end =
   204ca:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   204ce:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   204d2:	f100 041c 	add.w	r4, r0, #28
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   204d6:	2600      	movs	r6, #0
   204d8:	f642 0703 	movw	r7, #10243	; 0x2803
		while (++prev < end) {
   204dc:	3508      	adds	r5, #8
   204de:	42ac      	cmp	r4, r5
   204e0:	d9ee      	bls.n	204c0 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   204e2:	6829      	ldr	r1, [r5, #0]
   204e4:	f88d 6004 	strb.w	r6, [sp, #4]
   204e8:	a801      	add	r0, sp, #4
   204ea:	f8ad 7006 	strh.w	r7, [sp, #6]
   204ee:	f002 f9e6 	bl	228be <bt_uuid_cmp>
   204f2:	2800      	cmp	r0, #0
   204f4:	d1f2      	bne.n	204dc <bt_gatt_dm_char_next+0x28>
   204f6:	e7e4      	b.n	204c2 <bt_gatt_dm_char_next+0xe>

000204f8 <bt_gatt_dm_char_by_uuid>:
{
   204f8:	b570      	push	{r4, r5, r6, lr}
   204fa:	4605      	mov	r5, r0
   204fc:	460e      	mov	r6, r1
	const struct bt_gatt_dm_attr *curr = NULL;
   204fe:	2400      	movs	r4, #0
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
   20500:	4621      	mov	r1, r4
   20502:	4628      	mov	r0, r5
   20504:	f7ff ffd6 	bl	204b4 <bt_gatt_dm_char_next>
   20508:	4604      	mov	r4, r0
   2050a:	b138      	cbz	r0, 2051c <bt_gatt_dm_char_by_uuid+0x24>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
   2050c:	f7ff ffba 	bl	20484 <bt_gatt_dm_attr_chrc_val>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
   20510:	6801      	ldr	r1, [r0, #0]
   20512:	4630      	mov	r0, r6
   20514:	f002 f9d3 	bl	228be <bt_uuid_cmp>
   20518:	2800      	cmp	r0, #0
   2051a:	d1f1      	bne.n	20500 <bt_gatt_dm_char_by_uuid+0x8>
}
   2051c:	4620      	mov	r0, r4
   2051e:	bd70      	pop	{r4, r5, r6, pc}

00020520 <bt_gatt_dm_attr_next>:
{
   20520:	4602      	mov	r2, r0
   20522:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   20526:	b111      	cbz	r1, 2052e <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   20528:	4299      	cmp	r1, r3
   2052a:	d30b      	bcc.n	20544 <bt_gatt_dm_attr_next+0x24>
   2052c:	460b      	mov	r3, r1
		if (++prev < end) {
   2052e:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   20532:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   20536:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2053a:	321c      	adds	r2, #28
	return NULL;
   2053c:	4290      	cmp	r0, r2
   2053e:	bf28      	it	cs
   20540:	2000      	movcs	r0, #0
   20542:	4770      	bx	lr
   20544:	2000      	movs	r0, #0
}
   20546:	4770      	bx	lr

00020548 <bt_gatt_dm_desc_next>:
{
   20548:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   2054a:	f7ff ffe9 	bl	20520 <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   2054e:	4604      	mov	r4, r0
   20550:	b158      	cbz	r0, 2056a <bt_gatt_dm_desc_next+0x22>
   20552:	2300      	movs	r3, #0
   20554:	f88d 3004 	strb.w	r3, [sp, #4]
   20558:	6801      	ldr	r1, [r0, #0]
   2055a:	f642 0303 	movw	r3, #10243	; 0x2803
   2055e:	a801      	add	r0, sp, #4
   20560:	f8ad 3006 	strh.w	r3, [sp, #6]
   20564:	f002 f9ab 	bl	228be <bt_uuid_cmp>
   20568:	b900      	cbnz	r0, 2056c <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   2056a:	2400      	movs	r4, #0
}
   2056c:	4620      	mov	r0, r4
   2056e:	b002      	add	sp, #8
   20570:	bd10      	pop	{r4, pc}

00020572 <bt_gatt_dm_desc_by_uuid>:
{
   20572:	b570      	push	{r4, r5, r6, lr}
   20574:	4605      	mov	r5, r0
   20576:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   20578:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   2057a:	4621      	mov	r1, r4
   2057c:	4628      	mov	r0, r5
   2057e:	f7ff ffe3 	bl	20548 <bt_gatt_dm_desc_next>
   20582:	4604      	mov	r4, r0
   20584:	b128      	cbz	r0, 20592 <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   20586:	6821      	ldr	r1, [r4, #0]
   20588:	4630      	mov	r0, r6
   2058a:	f002 f998 	bl	228be <bt_uuid_cmp>
   2058e:	2800      	cmp	r0, #0
   20590:	d1f3      	bne.n	2057a <bt_gatt_dm_desc_by_uuid+0x8>
}
   20592:	4620      	mov	r0, r4
   20594:	bd70      	pop	{r4, r5, r6, pc}

00020596 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   20596:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   20598:	f500 749c 	add.w	r4, r0, #312	; 0x138
   2059c:	f3bf 8f5b 	dmb	ish
   205a0:	e854 3f00 	ldrex	r3, [r4]
   205a4:	f023 0202 	bic.w	r2, r3, #2
   205a8:	e844 2100 	strex	r1, r2, [r4]
   205ac:	2900      	cmp	r1, #0
   205ae:	d1f7      	bne.n	205a0 <bt_gatt_dm_data_release+0xa>
   205b0:	f3bf 8f5b 	dmb	ish
   205b4:	079b      	lsls	r3, r3, #30
   205b6:	d50f      	bpl.n	205d8 <bt_gatt_dm_data_release+0x42>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   205b8:	f7e3 fffa 	bl	45b0 <svc_attr_memory_release>
   205bc:	f3bf 8f5b 	dmb	ish
   205c0:	e854 3f00 	ldrex	r3, [r4]
   205c4:	f023 0301 	bic.w	r3, r3, #1
   205c8:	e844 3200 	strex	r2, r3, [r4]
   205cc:	2a00      	cmp	r2, #0
   205ce:	d1f7      	bne.n	205c0 <bt_gatt_dm_data_release+0x2a>
   205d0:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   205d4:	2000      	movs	r0, #0
}
   205d6:	bd10      	pop	{r4, pc}
		return -EALREADY;
   205d8:	f06f 0044 	mvn.w	r0, #68	; 0x44
   205dc:	e7fb      	b.n	205d6 <bt_gatt_dm_data_release+0x40>

000205de <le_param_req>:
}
   205de:	2001      	movs	r0, #1
   205e0:	4770      	bx	lr

000205e2 <k_uptime_get_32>:
{
   205e2:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   205e4:	f005 fd13 	bl	2600e <z_impl_k_uptime_ticks>
   205e8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   205ec:	fba0 2304 	umull	r2, r3, r0, r4
   205f0:	fb04 3301 	mla	r3, r4, r1, r3
   205f4:	0bd0      	lsrs	r0, r2, #15
}
   205f6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   205fa:	bd10      	pop	{r4, pc}

000205fc <bt_gatt_throughput_write>:

int bt_gatt_throughput_write(struct bt_gatt_throughput *throughput,
			     const uint8_t *data, uint16_t len)
{
   205fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 */
static inline int bt_gatt_write_without_response(struct bt_conn *conn,
						 uint16_t handle, const void *data,
						 uint16_t length, bool sign)
{
	return bt_gatt_write_without_response_cb(conn, handle, data, length,
   205fe:	2400      	movs	r4, #0
   20600:	e9cd 4401 	strd	r4, r4, [sp, #4]
   20604:	9400      	str	r4, [sp, #0]
   20606:	4613      	mov	r3, r2
   20608:	460a      	mov	r2, r1
   2060a:	8801      	ldrh	r1, [r0, #0]
   2060c:	6980      	ldr	r0, [r0, #24]
   2060e:	f7ee f9b9 	bl	e984 <bt_gatt_write_without_response_cb>
	return bt_gatt_write_without_response(throughput->conn,
					      throughput->char_handle,
					      data, len, false);
}
   20612:	b004      	add	sp, #16
   20614:	bd10      	pop	{r4, pc}

00020616 <arch_printk_char_out>:
}
   20616:	2000      	movs	r0, #0
   20618:	4770      	bx	lr

0002061a <str_out>:
{
   2061a:	b530      	push	{r4, r5, lr}
   2061c:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2061e:	680c      	ldr	r4, [r1, #0]
   20620:	1c55      	adds	r5, r2, #1
   20622:	b114      	cbz	r4, 2062a <str_out+0x10>
   20624:	684b      	ldr	r3, [r1, #4]
   20626:	4293      	cmp	r3, r2
   20628:	dc01      	bgt.n	2062e <str_out+0x14>
		ctx->count++;
   2062a:	608d      	str	r5, [r1, #8]
}
   2062c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2062e:	3b01      	subs	r3, #1
   20630:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   20632:	bf08      	it	eq
   20634:	2200      	moveq	r2, #0
   20636:	608d      	str	r5, [r1, #8]
   20638:	bf0c      	ite	eq
   2063a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2063c:	54a0      	strbne	r0, [r4, r2]
   2063e:	e7f5      	b.n	2062c <str_out+0x12>

00020640 <printk>:
{
   20640:	b40f      	push	{r0, r1, r2, r3}
   20642:	b507      	push	{r0, r1, r2, lr}
   20644:	a904      	add	r1, sp, #16
   20646:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2064a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   2064c:	f7e4 ff14 	bl	5478 <vprintk>
}
   20650:	b003      	add	sp, #12
   20652:	f85d eb04 	ldr.w	lr, [sp], #4
   20656:	b004      	add	sp, #16
   20658:	4770      	bx	lr

0002065a <snprintk>:
{
   2065a:	b40c      	push	{r2, r3}
   2065c:	b507      	push	{r0, r1, r2, lr}
   2065e:	ab04      	add	r3, sp, #16
   20660:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   20664:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   20666:	f7e4 ff15 	bl	5494 <vsnprintk>
}
   2066a:	b003      	add	sp, #12
   2066c:	f85d eb04 	ldr.w	lr, [sp], #4
   20670:	b002      	add	sp, #8
   20672:	4770      	bx	lr

00020674 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   20674:	4604      	mov	r4, r0
   20676:	b508      	push	{r3, lr}
   20678:	4608      	mov	r0, r1
   2067a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2067c:	461a      	mov	r2, r3
   2067e:	47a0      	blx	r4
	return z_impl_k_current_get();
   20680:	f7ff fae6 	bl	1fc50 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   20684:	f7e6 fc52 	bl	6f2c <z_impl_k_thread_abort>

00020688 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   20688:	b510      	push	{r4, lr}
   2068a:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   2068c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20694:	4620      	mov	r0, r4
   20696:	f7fe ff5d 	bl	1f554 <z_impl_k_queue_get>
   2069a:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   2069c:	2800      	cmp	r0, #0
   2069e:	d0f5      	beq.n	2068c <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   206a0:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   206a2:	6842      	ldr	r2, [r0, #4]
   206a4:	f3bf 8f5b 	dmb	ish
   206a8:	e853 1f00 	ldrex	r1, [r3]
   206ac:	f021 0c01 	bic.w	ip, r1, #1
   206b0:	e843 ce00 	strex	lr, ip, [r3]
   206b4:	f1be 0f00 	cmp.w	lr, #0
   206b8:	d1f6      	bne.n	206a8 <z_work_q_main+0x20>
   206ba:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   206be:	07cb      	lsls	r3, r1, #31
   206c0:	d500      	bpl.n	206c4 <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   206c2:	4790      	blx	r2
	z_impl_k_yield();
   206c4:	f7ff fa56 	bl	1fb74 <z_impl_k_yield>
   206c8:	e7e0      	b.n	2068c <z_work_q_main+0x4>

000206ca <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   206ca:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   206cc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   206d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   206d4:	bf2c      	ite	cs
   206d6:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   206da:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   206de:	4770      	bx	lr

000206e0 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   206e0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   206e4:	6880      	ldr	r0, [r0, #8]
   206e6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   206ea:	bf2c      	ite	cs
   206ec:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   206f0:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   206f4:	4770      	bx	lr

000206f6 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   206f6:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   206f8:	2201      	movs	r2, #1
   206fa:	f7ff ffe6 	bl	206ca <chunk_field>
}
   206fe:	0840      	lsrs	r0, r0, #1
   20700:	bd08      	pop	{r3, pc}

00020702 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   20702:	6883      	ldr	r3, [r0, #8]
   20704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   20708:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2070c:	d308      	bcc.n	20720 <set_chunk_used+0x1e>
		if (used) {
   2070e:	684b      	ldr	r3, [r1, #4]
   20710:	b11a      	cbz	r2, 2071a <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   20712:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   20716:	604b      	str	r3, [r1, #4]
   20718:	4770      	bx	lr
   2071a:	f023 0301 	bic.w	r3, r3, #1
   2071e:	e7fa      	b.n	20716 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   20720:	884b      	ldrh	r3, [r1, #2]
   20722:	b11a      	cbz	r2, 2072c <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   20724:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   20728:	804b      	strh	r3, [r1, #2]
		}
	}
}
   2072a:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   2072c:	f023 0301 	bic.w	r3, r3, #1
   20730:	e7fa      	b.n	20728 <set_chunk_used+0x26>

00020732 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   20732:	0053      	lsls	r3, r2, #1
   20734:	2201      	movs	r2, #1
   20736:	f7ff bfd3 	b.w	206e0 <chunk_set>

0002073a <bucket_idx>:
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   2073a:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   2073c:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2073e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   20742:	bf2c      	ite	cs
   20744:	2002      	movcs	r0, #2
   20746:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   20748:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   2074a:	fab0 f080 	clz	r0, r0
}
   2074e:	f1c0 001f 	rsb	r0, r0, #31
   20752:	4770      	bx	lr

00020754 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   20754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20758:	4616      	mov	r6, r2
   2075a:	4604      	mov	r4, r0
   2075c:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2075e:	f7ff ffca 	bl	206f6 <chunk_size>
   20762:	4631      	mov	r1, r6
   20764:	4605      	mov	r5, r0
   20766:	4620      	mov	r0, r4
   20768:	f7ff ffc5 	bl	206f6 <chunk_size>
   2076c:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   2076e:	462a      	mov	r2, r5
   20770:	4639      	mov	r1, r7
   20772:	4620      	mov	r0, r4
   20774:	f7ff ffdd 	bl	20732 <set_chunk_size>
	return c + chunk_size(h, c);
   20778:	4631      	mov	r1, r6
   2077a:	4620      	mov	r0, r4
   2077c:	f7ff ffbb 	bl	206f6 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   20780:	462b      	mov	r3, r5
   20782:	1831      	adds	r1, r6, r0
   20784:	2200      	movs	r2, #0
   20786:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   20788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2078c:	f7ff bfa8 	b.w	206e0 <chunk_set>

00020790 <split_chunks>:
{
   20790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20794:	4614      	mov	r4, r2
   20796:	4605      	mov	r5, r0
   20798:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   2079a:	f7ff ffac 	bl	206f6 <chunk_size>
	size_t lsz = rc - lc;
   2079e:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   207a2:	1b37      	subs	r7, r6, r4
   207a4:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   207a6:	4642      	mov	r2, r8
   207a8:	4631      	mov	r1, r6
   207aa:	4628      	mov	r0, r5
   207ac:	f7ff ffc1 	bl	20732 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   207b0:	463a      	mov	r2, r7
   207b2:	4621      	mov	r1, r4
   207b4:	4628      	mov	r0, r5
   207b6:	f7ff ffbc 	bl	20732 <set_chunk_size>
   207ba:	4643      	mov	r3, r8
   207bc:	2200      	movs	r2, #0
   207be:	4621      	mov	r1, r4
   207c0:	4628      	mov	r0, r5
   207c2:	f7ff ff8d 	bl	206e0 <chunk_set>
	return c + chunk_size(h, c);
   207c6:	4621      	mov	r1, r4
   207c8:	4628      	mov	r0, r5
   207ca:	f7ff ff94 	bl	206f6 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   207ce:	463b      	mov	r3, r7
   207d0:	1821      	adds	r1, r4, r0
   207d2:	2200      	movs	r2, #0
   207d4:	4628      	mov	r0, r5
}
   207d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   207da:	f7ff bf81 	b.w	206e0 <chunk_set>

000207de <free_list_remove>:
{
   207de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   207e2:	4616      	mov	r6, r2
   207e4:	460f      	mov	r7, r1
	return chunk_field(h, c, FREE_NEXT);
   207e6:	2203      	movs	r2, #3
   207e8:	4631      	mov	r1, r6
   207ea:	4604      	mov	r4, r0
   207ec:	f7ff ff6d 	bl	206ca <chunk_field>
	if (next_free_chunk(h, c) == c) {
   207f0:	4286      	cmp	r6, r0
   207f2:	4605      	mov	r5, r0
   207f4:	f107 0804 	add.w	r8, r7, #4
   207f8:	d10b      	bne.n	20812 <free_list_remove+0x34>
		h->avail_buckets &= ~(1 << bidx);
   207fa:	2301      	movs	r3, #1
   207fc:	fa03 f707 	lsl.w	r7, r3, r7
   20800:	68e3      	ldr	r3, [r4, #12]
   20802:	ea23 0307 	bic.w	r3, r3, r7
   20806:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   20808:	2300      	movs	r3, #0
   2080a:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   2080e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   20812:	4631      	mov	r1, r6
   20814:	2202      	movs	r2, #2
   20816:	4620      	mov	r0, r4
   20818:	f7ff ff57 	bl	206ca <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   2081c:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   2081e:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   20820:	4601      	mov	r1, r0
		b->next = second;
   20822:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   20826:	4620      	mov	r0, r4
   20828:	2203      	movs	r2, #3
   2082a:	f7ff ff59 	bl	206e0 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2082e:	4633      	mov	r3, r6
   20830:	4629      	mov	r1, r5
   20832:	4620      	mov	r0, r4
   20834:	2202      	movs	r2, #2
}
   20836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2083a:	f7ff bf51 	b.w	206e0 <chunk_set>

0002083e <free_list_add>:
{
   2083e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20842:	4604      	mov	r4, r0
   20844:	460d      	mov	r5, r1
	int bi = bucket_idx(h, chunk_size(h, c));
   20846:	f7ff ff56 	bl	206f6 <chunk_size>
   2084a:	4601      	mov	r1, r0
   2084c:	4620      	mov	r0, r4
   2084e:	f7ff ff74 	bl	2073a <bucket_idx>
	if (h->buckets[bi].next == 0) {
   20852:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   20856:	6916      	ldr	r6, [r2, #16]
   20858:	b99e      	cbnz	r6, 20882 <free_list_add+0x44>
		h->avail_buckets |= (1 << bi);
   2085a:	2301      	movs	r3, #1
   2085c:	fa03 f000 	lsl.w	r0, r3, r0
   20860:	68e3      	ldr	r3, [r4, #12]
   20862:	4303      	orrs	r3, r0
   20864:	60e3      	str	r3, [r4, #12]
   20866:	4629      	mov	r1, r5
		h->buckets[bi].next = c;
   20868:	6115      	str	r5, [r2, #16]
   2086a:	462b      	mov	r3, r5
   2086c:	2202      	movs	r2, #2
   2086e:	4620      	mov	r0, r4
   20870:	f7ff ff36 	bl	206e0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   20874:	2203      	movs	r2, #3
   20876:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   20878:	4620      	mov	r0, r4
}
   2087a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2087e:	f7ff bf2f 	b.w	206e0 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   20882:	2202      	movs	r2, #2
   20884:	4631      	mov	r1, r6
   20886:	4620      	mov	r0, r4
   20888:	f7ff ff1f 	bl	206ca <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   2088c:	2202      	movs	r2, #2
   2088e:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   20890:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   20892:	4629      	mov	r1, r5
   20894:	4620      	mov	r0, r4
   20896:	f7ff ff23 	bl	206e0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2089a:	4633      	mov	r3, r6
   2089c:	2203      	movs	r2, #3
   2089e:	4629      	mov	r1, r5
   208a0:	4620      	mov	r0, r4
   208a2:	f7ff ff1d 	bl	206e0 <chunk_set>
   208a6:	2203      	movs	r2, #3
   208a8:	4639      	mov	r1, r7
   208aa:	462b      	mov	r3, r5
   208ac:	4620      	mov	r0, r4
   208ae:	f7ff ff17 	bl	206e0 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   208b2:	2202      	movs	r2, #2
   208b4:	4631      	mov	r1, r6
   208b6:	e7df      	b.n	20878 <free_list_add+0x3a>

000208b8 <split_alloc>:
static chunkid_t split_alloc(struct z_heap *h, int bidx, size_t sz)
{
	CHECK(h->buckets[bidx].next != 0
	      && sz <= chunk_size(h, h->buckets[bidx].next));

	chunkid_t c = h->buckets[bidx].next;
   208b8:	1d0b      	adds	r3, r1, #4
{
   208ba:	b570      	push	{r4, r5, r6, lr}
	chunkid_t c = h->buckets[bidx].next;
   208bc:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
{
   208c0:	4604      	mov	r4, r0
   208c2:	4615      	mov	r5, r2

	free_list_remove(h, bidx, c);
   208c4:	4632      	mov	r2, r6
   208c6:	f7ff ff8a 	bl	207de <free_list_remove>

	/* Split off remainder if it's usefully large */
	if ((chunk_size(h, c) - sz) >= (big_heap(h) ? 2 : 1)) {
   208ca:	4631      	mov	r1, r6
   208cc:	4620      	mov	r0, r4
   208ce:	f7ff ff12 	bl	206f6 <chunk_size>
   208d2:	68a3      	ldr	r3, [r4, #8]
   208d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   208d8:	eba0 0005 	sub.w	r0, r0, r5
   208dc:	bf2c      	ite	cs
   208de:	2302      	movcs	r3, #2
   208e0:	2301      	movcc	r3, #1
   208e2:	4298      	cmp	r0, r3
   208e4:	d309      	bcc.n	208fa <split_alloc+0x42>
		split_chunks(h, c, c + sz);
   208e6:	4435      	add	r5, r6
   208e8:	4631      	mov	r1, r6
   208ea:	4620      	mov	r0, r4
   208ec:	462a      	mov	r2, r5
   208ee:	f7ff ff4f 	bl	20790 <split_chunks>
		free_list_add(h, c + sz);
   208f2:	4629      	mov	r1, r5
   208f4:	4620      	mov	r0, r4
   208f6:	f7ff ffa2 	bl	2083e <free_list_add>
	}

	set_chunk_used(h, c, true);
   208fa:	4620      	mov	r0, r4
   208fc:	2201      	movs	r2, #1
   208fe:	4631      	mov	r1, r6
   20900:	f7ff feff 	bl	20702 <set_chunk_used>
	return c;
}
   20904:	4630      	mov	r0, r6
   20906:	bd70      	pop	{r4, r5, r6, pc}

00020908 <alloc_chunks>:

	free_chunks(h, c);
}

static chunkid_t alloc_chunks(struct z_heap *h, size_t sz)
{
   20908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2090c:	4604      	mov	r4, r0
   2090e:	460e      	mov	r6, r1
	int bi = bucket_idx(h, sz);
   20910:	f7ff ff13 	bl	2073a <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   20914:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   20916:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   20918:	4620      	mov	r0, r4
   2091a:	f7ff ff0e 	bl	2073a <bucket_idx>
   2091e:	42a8      	cmp	r0, r5
   20920:	db2f      	blt.n	20982 <alloc_chunks+0x7a>
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   20922:	eb04 0885 	add.w	r8, r4, r5, lsl #2
   20926:	f8d8 9010 	ldr.w	r9, [r8, #16]
   2092a:	f1b9 0f00 	cmp.w	r9, #0
   2092e:	d01a      	beq.n	20966 <alloc_chunks+0x5e>
   20930:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			if (chunk_size(h, b->next) >= sz) {
   20932:	f8d8 a010 	ldr.w	sl, [r8, #16]
   20936:	4620      	mov	r0, r4
   20938:	4651      	mov	r1, sl
   2093a:	f7ff fedc 	bl	206f6 <chunk_size>
   2093e:	42b0      	cmp	r0, r6
   20940:	d306      	bcc.n	20950 <alloc_chunks+0x48>
				return split_alloc(h, bi, sz);
   20942:	4632      	mov	r2, r6
   20944:	4629      	mov	r1, r5
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);

	if ((bmask & h->avail_buckets) != 0) {
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);

		return split_alloc(h, minbucket, sz);
   20946:	4620      	mov	r0, r4
	}

	return 0;
}
   20948:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return split_alloc(h, minbucket, sz);
   2094c:	f7ff bfb4 	b.w	208b8 <split_alloc>
	return chunk_field(h, c, FREE_NEXT);
   20950:	2203      	movs	r2, #3
   20952:	4651      	mov	r1, sl
   20954:	4620      	mov	r0, r4
   20956:	f7ff feb8 	bl	206ca <chunk_field>
		} while (--i && b->next != first);
   2095a:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, b->next);
   2095c:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   20960:	d001      	beq.n	20966 <alloc_chunks+0x5e>
   20962:	4581      	cmp	r9, r0
   20964:	d1e5      	bne.n	20932 <alloc_chunks+0x2a>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   20966:	68e1      	ldr	r1, [r4, #12]
   20968:	3501      	adds	r5, #1
   2096a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2096e:	fa03 f505 	lsl.w	r5, r3, r5
	if ((bmask & h->avail_buckets) != 0) {
   20972:	4029      	ands	r1, r5
   20974:	d005      	beq.n	20982 <alloc_chunks+0x7a>
		return split_alloc(h, minbucket, sz);
   20976:	fa91 f1a1 	rbit	r1, r1
   2097a:	4632      	mov	r2, r6
   2097c:	fab1 f181 	clz	r1, r1
   20980:	e7e1      	b.n	20946 <alloc_chunks+0x3e>
}
   20982:	2000      	movs	r0, #0
   20984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00020988 <free_chunks>:
{
   20988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	set_chunk_used(h, c, false);
   2098a:	2200      	movs	r2, #0
{
   2098c:	460d      	mov	r5, r1
   2098e:	4604      	mov	r4, r0
	set_chunk_used(h, c, false);
   20990:	f7ff feb7 	bl	20702 <set_chunk_used>
	return c + chunk_size(h, c);
   20994:	4629      	mov	r1, r5
   20996:	f7ff feae 	bl	206f6 <chunk_size>
   2099a:	182e      	adds	r6, r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   2099c:	2201      	movs	r2, #1
   2099e:	4631      	mov	r1, r6
   209a0:	4620      	mov	r0, r4
   209a2:	f7ff fe92 	bl	206ca <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   209a6:	07c3      	lsls	r3, r0, #31
   209a8:	d415      	bmi.n	209d6 <free_chunks+0x4e>
		int bi = bucket_idx(h, chunk_size(h, right_chunk(h, c)));
   209aa:	4631      	mov	r1, r6
   209ac:	4620      	mov	r0, r4
   209ae:	f7ff fea2 	bl	206f6 <chunk_size>
   209b2:	4601      	mov	r1, r0
   209b4:	4620      	mov	r0, r4
   209b6:	f7ff fec0 	bl	2073a <bucket_idx>
		free_list_remove(h, bi, right_chunk(h, c));
   209ba:	4632      	mov	r2, r6
		int bi = bucket_idx(h, chunk_size(h, right_chunk(h, c)));
   209bc:	4601      	mov	r1, r0
		free_list_remove(h, bi, right_chunk(h, c));
   209be:	4620      	mov	r0, r4
   209c0:	f7ff ff0d 	bl	207de <free_list_remove>
	return c + chunk_size(h, c);
   209c4:	4629      	mov	r1, r5
   209c6:	4620      	mov	r0, r4
   209c8:	f7ff fe95 	bl	206f6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   209cc:	4629      	mov	r1, r5
   209ce:	182a      	adds	r2, r5, r0
   209d0:	4620      	mov	r0, r4
   209d2:	f7ff febf 	bl	20754 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   209d6:	2200      	movs	r2, #0
   209d8:	4629      	mov	r1, r5
   209da:	4620      	mov	r0, r4
   209dc:	f7ff fe75 	bl	206ca <chunk_field>
   209e0:	1a2f      	subs	r7, r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   209e2:	2201      	movs	r2, #1
   209e4:	4639      	mov	r1, r7
   209e6:	4620      	mov	r0, r4
   209e8:	f7ff fe6f 	bl	206ca <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   209ec:	f010 0601 	ands.w	r6, r0, #1
   209f0:	d11c      	bne.n	20a2c <free_chunks+0xa4>
		int bi = bucket_idx(h, chunk_size(h, left_chunk(h, c)));
   209f2:	4639      	mov	r1, r7
   209f4:	4620      	mov	r0, r4
   209f6:	f7ff fe7e 	bl	206f6 <chunk_size>
   209fa:	4601      	mov	r1, r0
   209fc:	4620      	mov	r0, r4
   209fe:	f7ff fe9c 	bl	2073a <bucket_idx>
		free_list_remove(h, bi, left_chunk(h, c));
   20a02:	463a      	mov	r2, r7
		int bi = bucket_idx(h, chunk_size(h, left_chunk(h, c)));
   20a04:	4601      	mov	r1, r0
		free_list_remove(h, bi, left_chunk(h, c));
   20a06:	4620      	mov	r0, r4
   20a08:	f7ff fee9 	bl	207de <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   20a0c:	4629      	mov	r1, r5
   20a0e:	4632      	mov	r2, r6
   20a10:	4620      	mov	r0, r4
   20a12:	f7ff fe5a 	bl	206ca <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   20a16:	462a      	mov	r2, r5
   20a18:	1a29      	subs	r1, r5, r0
   20a1a:	4620      	mov	r0, r4
   20a1c:	f7ff fe9a 	bl	20754 <merge_chunks>
   20a20:	4629      	mov	r1, r5
   20a22:	4632      	mov	r2, r6
   20a24:	4620      	mov	r0, r4
   20a26:	f7ff fe50 	bl	206ca <chunk_field>
   20a2a:	1a2d      	subs	r5, r5, r0
	free_list_add(h, c);
   20a2c:	4629      	mov	r1, r5
   20a2e:	4620      	mov	r0, r4
}
   20a30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   20a34:	f7ff bf03 	b.w	2083e <free_list_add>

00020a38 <sys_heap_free>:
	if (mem == NULL) {
   20a38:	b169      	cbz	r1, 20a56 <sys_heap_free+0x1e>
	struct z_heap *h = heap->heap;
   20a3a:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   20a3c:	6883      	ldr	r3, [r0, #8]
   20a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20a42:	bf2c      	ite	cs
   20a44:	2308      	movcs	r3, #8
   20a46:	2304      	movcc	r3, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   20a48:	1ac9      	subs	r1, r1, r3
   20a4a:	1a09      	subs	r1, r1, r0
   20a4c:	bf48      	it	mi
   20a4e:	3107      	addmi	r1, #7
	free_chunks(h, c);
   20a50:	10c9      	asrs	r1, r1, #3
   20a52:	f7ff bf99 	b.w	20988 <free_chunks>
}
   20a56:	4770      	bx	lr

00020a58 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   20a58:	b510      	push	{r4, lr}
   20a5a:	4604      	mov	r4, r0
	if (bytes == 0) {
   20a5c:	b909      	cbnz	r1, 20a62 <sys_heap_alloc+0xa>
		return NULL;
   20a5e:	2000      	movs	r0, #0
	}
	size_t chunksz = bytes_to_chunksz(heap->heap, bytes);
	chunkid_t c = alloc_chunks(heap->heap, chunksz);

	return chunk_mem(heap->heap, c);
}
   20a60:	bd10      	pop	{r4, pc}
	size_t chunksz = bytes_to_chunksz(heap->heap, bytes);
   20a62:	6800      	ldr	r0, [r0, #0]
   20a64:	6883      	ldr	r3, [r0, #8]
   20a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20a6a:	bf2c      	ite	cs
   20a6c:	2308      	movcs	r3, #8
   20a6e:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   20a70:	3107      	adds	r1, #7
   20a72:	4419      	add	r1, r3
	chunkid_t c = alloc_chunks(heap->heap, chunksz);
   20a74:	08c9      	lsrs	r1, r1, #3
   20a76:	f7ff ff47 	bl	20908 <alloc_chunks>
	return chunk_mem(heap->heap, c);
   20a7a:	6823      	ldr	r3, [r4, #0]
	if (c == 0) {
   20a7c:	2800      	cmp	r0, #0
   20a7e:	d0ee      	beq.n	20a5e <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   20a80:	689a      	ldr	r2, [r3, #8]
   20a82:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   20a86:	bf2c      	ite	cs
   20a88:	2208      	movcs	r2, #8
   20a8a:	2204      	movcc	r2, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   20a8c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
   20a90:	4418      	add	r0, r3
	return ret;
   20a92:	e7e5      	b.n	20a60 <sys_heap_alloc+0x8>

00020a94 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   20a94:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000

	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   20a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20a9a:	bf2c      	ite	cs
   20a9c:	2508      	movcs	r5, #8
   20a9e:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   20aa0:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   20aa2:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   20aa4:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   20aa6:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   20aaa:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   20aae:	2200      	movs	r2, #0
   20ab0:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   20ab2:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   20ab4:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   20ab6:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   20ab8:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   20abc:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   20abe:	4629      	mov	r1, r5
	h->len = buf_sz;
   20ac0:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   20ac2:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   20ac4:	4620      	mov	r0, r4
   20ac6:	f7ff fe38 	bl	2073a <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   20aca:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   20acc:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   20ace:	1c41      	adds	r1, r0, #1
   20ad0:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   20ad2:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   20ad6:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   20ad8:	428b      	cmp	r3, r1
   20ada:	db29      	blt.n	20b30 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   20adc:	4632      	mov	r2, r6
   20ade:	4620      	mov	r0, r4
   20ae0:	2100      	movs	r1, #0
   20ae2:	f7ff fe26 	bl	20732 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   20ae6:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   20ae8:	4620      	mov	r0, r4
   20aea:	2201      	movs	r2, #1
   20aec:	2100      	movs	r1, #0
   20aee:	f7ff fe08 	bl	20702 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   20af2:	463a      	mov	r2, r7
   20af4:	4631      	mov	r1, r6
   20af6:	f7ff fe1c 	bl	20732 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   20afa:	4633      	mov	r3, r6
   20afc:	4631      	mov	r1, r6
   20afe:	4620      	mov	r0, r4
   20b00:	2200      	movs	r2, #0
   20b02:	f7ff fded 	bl	206e0 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   20b06:	4629      	mov	r1, r5
   20b08:	4620      	mov	r0, r4
   20b0a:	2200      	movs	r2, #0
   20b0c:	f7ff fe11 	bl	20732 <set_chunk_size>
   20b10:	463b      	mov	r3, r7
   20b12:	4629      	mov	r1, r5
   20b14:	4620      	mov	r0, r4
   20b16:	2200      	movs	r2, #0
   20b18:	f7ff fde2 	bl	206e0 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   20b1c:	4629      	mov	r1, r5
   20b1e:	4620      	mov	r0, r4
   20b20:	2201      	movs	r2, #1
   20b22:	f7ff fdee 	bl	20702 <set_chunk_used>

	free_list_add(h, chunk0_size);
   20b26:	4631      	mov	r1, r6
}
   20b28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   20b2c:	f7ff be87 	b.w	2083e <free_list_add>
		h->buckets[i].next = 0;
   20b30:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   20b34:	3301      	adds	r3, #1
   20b36:	e7cf      	b.n	20ad8 <sys_heap_init+0x44>

00020b38 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   20b38:	4770      	bx	lr

00020b3a <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   20b3a:	2300      	movs	r3, #0
	list->head = NULL;
   20b3c:	e9c0 3300 	strd	r3, r3, [r0]
}
   20b40:	4770      	bx	lr

00020b42 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   20b42:	6803      	ldr	r3, [r0, #0]
   20b44:	b923      	cbnz	r3, 20b50 <log_list_add_tail+0xe>
		list->head = msg;
   20b46:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   20b48:	2300      	movs	r3, #0
	list->tail = msg;
   20b4a:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   20b4c:	600b      	str	r3, [r1, #0]
}
   20b4e:	4770      	bx	lr
		list->tail->next = msg;
   20b50:	6843      	ldr	r3, [r0, #4]
   20b52:	6019      	str	r1, [r3, #0]
   20b54:	e7f8      	b.n	20b48 <log_list_add_tail+0x6>

00020b56 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   20b56:	6800      	ldr	r0, [r0, #0]
   20b58:	4770      	bx	lr

00020b5a <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   20b5a:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   20b5c:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   20b5e:	b108      	cbz	r0, 20b64 <log_list_head_get+0xa>
		list->head = list->head->next;
   20b60:	6802      	ldr	r2, [r0, #0]
   20b62:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   20b64:	4770      	bx	lr

00020b66 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   20b66:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   20b68:	f7e4 ff66 	bl	5a38 <log_msg_chunk_alloc>

	if (msg != NULL) {
   20b6c:	b118      	cbz	r0, 20b76 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   20b6e:	2301      	movs	r3, #1
   20b70:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   20b72:	2300      	movs	r3, #0
   20b74:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   20b76:	bd08      	pop	{r3, pc}

00020b78 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   20b78:	f7e5 bbf8 	b.w	636c <z_timer_cycle_get_32>

00020b7c <dummy_timestamp>:
   20b7c:	2000      	movs	r0, #0
   20b7e:	4770      	bx	lr

00020b80 <z_log_get_s_mask>:
{
   20b80:	b5f0      	push	{r4, r5, r6, r7, lr}
   20b82:	4605      	mov	r5, r0
	uint32_t mask = 0;
   20b84:	2000      	movs	r0, #0
	uint32_t arg = 0;
   20b86:	4603      	mov	r3, r0
	bool arm = false;
   20b88:	4602      	mov	r2, r0
				mask |= BIT(arg);
   20b8a:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   20b8c:	f815 4b01 	ldrb.w	r4, [r5], #1
   20b90:	b10c      	cbz	r4, 20b96 <z_log_get_s_mask+0x16>
   20b92:	428b      	cmp	r3, r1
   20b94:	d300      	bcc.n	20b98 <z_log_get_s_mask+0x18>
}
   20b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   20b98:	2c25      	cmp	r4, #37	; 0x25
   20b9a:	d102      	bne.n	20ba2 <z_log_get_s_mask+0x22>
			arm = !arm;
   20b9c:	f082 0201 	eor.w	r2, r2, #1
   20ba0:	e7f4      	b.n	20b8c <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   20ba2:	2a00      	cmp	r2, #0
   20ba4:	d0f2      	beq.n	20b8c <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   20ba6:	f044 0620 	orr.w	r6, r4, #32
   20baa:	3e61      	subs	r6, #97	; 0x61
   20bac:	2e19      	cmp	r6, #25
   20bae:	d8ed      	bhi.n	20b8c <z_log_get_s_mask+0xc>
			if (curr == 's') {
   20bb0:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   20bb2:	bf04      	itt	eq
   20bb4:	fa07 f203 	lsleq.w	r2, r7, r3
   20bb8:	4310      	orreq	r0, r2
			arg++;
   20bba:	3301      	adds	r3, #1
			arm = false;
   20bbc:	2200      	movs	r2, #0
   20bbe:	e7e5      	b.n	20b8c <z_log_get_s_mask+0xc>

00020bc0 <log_0>:
{
   20bc0:	b538      	push	{r3, r4, r5, lr}
   20bc2:	4605      	mov	r5, r0
   20bc4:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   20bc6:	f7ff ffce 	bl	20b66 <z_log_msg_std_alloc>

	if (msg != NULL) {
   20bca:	b128      	cbz	r0, 20bd8 <log_0+0x18>
		msg->str = str;
   20bcc:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   20bce:	4621      	mov	r1, r4
}
   20bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   20bd4:	f7e4 be4a 	b.w	586c <msg_finalize>
}
   20bd8:	bd38      	pop	{r3, r4, r5, pc}

00020bda <log_1>:
{
   20bda:	b570      	push	{r4, r5, r6, lr}
   20bdc:	4606      	mov	r6, r0
   20bde:	460d      	mov	r5, r1
   20be0:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   20be2:	f7ff ffc0 	bl	20b66 <z_log_msg_std_alloc>

	if (msg != NULL) {
   20be6:	b158      	cbz	r0, 20c00 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   20be8:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   20bea:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   20bec:	2101      	movs	r1, #1
   20bee:	f361 1207 	bfi	r2, r1, #4, #4
   20bf2:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   20bf4:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   20bf6:	4621      	mov	r1, r4
}
   20bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   20bfc:	f7e4 be36 	b.w	586c <msg_finalize>
}
   20c00:	bd70      	pop	{r4, r5, r6, pc}

00020c02 <log_2>:
{
   20c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c06:	4680      	mov	r8, r0
   20c08:	460f      	mov	r7, r1
   20c0a:	4616      	mov	r6, r2
   20c0c:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   20c0e:	f7ff ffaa 	bl	20b66 <z_log_msg_std_alloc>

	if (msg != NULL) {
   20c12:	b168      	cbz	r0, 20c30 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   20c14:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   20c16:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   20c1a:	2202      	movs	r2, #2
   20c1c:	f362 1307 	bfi	r3, r2, #4, #4
   20c20:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   20c22:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   20c26:	4629      	mov	r1, r5
}
   20c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   20c2c:	f7e4 be1e 	b.w	586c <msg_finalize>
}
   20c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020c34 <log_3>:
{
   20c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20c38:	4680      	mov	r8, r0
   20c3a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   20c3e:	460f      	mov	r7, r1
   20c40:	4616      	mov	r6, r2
   20c42:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   20c44:	f7ff ff8f 	bl	20b66 <z_log_msg_std_alloc>

	if (msg != NULL) {
   20c48:	b170      	cbz	r0, 20c68 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   20c4a:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   20c4c:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   20c50:	2203      	movs	r2, #3
   20c52:	f362 1307 	bfi	r3, r2, #4, #4
   20c56:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   20c58:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   20c5c:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   20c5e:	4649      	mov	r1, r9
}
   20c60:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   20c64:	f7e4 be02 	b.w	586c <msg_finalize>
}
   20c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020c6c <log_n>:
{
   20c6c:	b510      	push	{r4, lr}
   20c6e:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   20c70:	f000 f89f 	bl	20db2 <log_msg_create_n>
		if (msg == NULL) {
   20c74:	b120      	cbz	r0, 20c80 <log_n+0x14>
		msg_finalize(msg, src_level);
   20c76:	4621      	mov	r1, r4
}
   20c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   20c7c:	f7e4 bdf6 	b.w	586c <msg_finalize>
}
   20c80:	bd10      	pop	{r4, pc}

00020c82 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   20c82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20c86:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   20c88:	8903      	ldrh	r3, [r0, #8]
{
   20c8a:	f89d 8020 	ldrb.w	r8, [sp, #32]
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   20c8e:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
{
   20c92:	460e      	mov	r6, r1
   20c94:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   20c96:	ea4f 0293 	mov.w	r2, r3, lsr #2
	if (offset >= available_len) {
   20c9a:	d303      	bcc.n	20ca4 <log_msg_hexdump_data_op+0x22>
		*length = 0;
   20c9c:	2300      	movs	r3, #0
   20c9e:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   20ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   20ca4:	680b      	ldr	r3, [r1, #0]
   20ca6:	4423      	add	r3, r4
   20ca8:	4293      	cmp	r3, r2
		*length = available_len - offset;
   20caa:	bf84      	itt	hi
   20cac:	1b13      	subhi	r3, r2, r4
   20cae:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   20cb0:	2a0c      	cmp	r2, #12
	req_len = *length;
   20cb2:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   20cb6:	d929      	bls.n	20d0c <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   20cb8:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   20cba:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
   20cbc:	d82c      	bhi.n	20d18 <log_msg_hexdump_data_op+0x96>
		head_data = msg->payload.ext.data.bytes;
   20cbe:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   20cc0:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   20cc2:	454a      	cmp	r2, r9
   20cc4:	bf28      	it	cs
   20cc6:	464a      	movcs	r2, r9
   20cc8:	4615      	mov	r5, r2
		if (put_op) {
   20cca:	4420      	add	r0, r4
   20ccc:	f1b8 0f00 	cmp.w	r8, #0
   20cd0:	d01f      	beq.n	20d12 <log_msg_hexdump_data_op+0x90>
			(void)memcpy(&head_data[offset], data, cpy_len);
   20cd2:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   20cd4:	f001 fd24 	bl	22720 <memcpy>
		req_len -= cpy_len;
   20cd8:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   20cdc:	442e      	add	r6, r5
	while (req_len > 0) {
   20cde:	f1b9 0f00 	cmp.w	r9, #0
   20ce2:	d0dd      	beq.n	20ca0 <log_msg_hexdump_data_op+0x1e>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   20ce4:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   20ce8:	454d      	cmp	r5, r9
   20cea:	bf28      	it	cs
   20cec:	464d      	movcs	r5, r9
		if (put_op) {
   20cee:	1d20      	adds	r0, r4, #4
   20cf0:	4438      	add	r0, r7
			(void)memcpy(&cont->payload.bytes[offset],
   20cf2:	462a      	mov	r2, r5
		if (put_op) {
   20cf4:	f1b8 0f00 	cmp.w	r8, #0
   20cf8:	d014      	beq.n	20d24 <log_msg_hexdump_data_op+0xa2>
			(void)memcpy(&cont->payload.bytes[offset],
   20cfa:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   20cfc:	f001 fd10 	bl	22720 <memcpy>
		req_len -= cpy_len;
   20d00:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   20d04:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
   20d06:	442e      	add	r6, r5
		offset = 0;
   20d08:	2400      	movs	r4, #0
   20d0a:	e7e8      	b.n	20cde <log_msg_hexdump_data_op+0x5c>
		head_data = msg->payload.single.bytes;
   20d0c:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   20d0e:	2700      	movs	r7, #0
   20d10:	e7d7      	b.n	20cc2 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   20d12:	4601      	mov	r1, r0
   20d14:	4630      	mov	r0, r6
   20d16:	e7dd      	b.n	20cd4 <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
   20d18:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   20d1a:	2c1b      	cmp	r4, #27
   20d1c:	d9df      	bls.n	20cde <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
   20d1e:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
   20d20:	3c1c      	subs	r4, #28
   20d22:	e7fa      	b.n	20d1a <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   20d24:	4601      	mov	r1, r0
   20d26:	4630      	mov	r0, r6
   20d28:	e7e8      	b.n	20cfc <log_msg_hexdump_data_op+0x7a>

00020d2a <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20d2a:	3004      	adds	r0, #4
   20d2c:	f3bf 8f5b 	dmb	ish
   20d30:	e850 3f00 	ldrex	r3, [r0]
   20d34:	3301      	adds	r3, #1
   20d36:	e840 3200 	strex	r2, r3, [r0]
   20d3a:	2a00      	cmp	r2, #0
   20d3c:	d1f8      	bne.n	20d30 <log_msg_get+0x6>
   20d3e:	f3bf 8f5b 	dmb	ish
}
   20d42:	4770      	bx	lr

00020d44 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   20d44:	7a40      	ldrb	r0, [r0, #9]
}
   20d46:	0900      	lsrs	r0, r0, #4
   20d48:	4770      	bx	lr

00020d4a <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   20d4a:	7a43      	ldrb	r3, [r0, #9]
   20d4c:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   20d50:	ea4f 1213 	mov.w	r2, r3, lsr #4
   20d54:	d216      	bcs.n	20d84 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   20d56:	2a03      	cmp	r2, #3
   20d58:	d803      	bhi.n	20d62 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   20d5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   20d5e:	6948      	ldr	r0, [r1, #20]
   20d60:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   20d62:	2901      	cmp	r1, #1
   20d64:	d803      	bhi.n	20d6e <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   20d66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   20d6a:	6988      	ldr	r0, [r1, #24]
   20d6c:	4770      	bx	lr
	cont = msg->payload.ext.next;
   20d6e:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   20d70:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   20d72:	2906      	cmp	r1, #6
   20d74:	d803      	bhi.n	20d7e <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   20d76:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   20d7a:	6848      	ldr	r0, [r1, #4]
   20d7c:	4770      	bx	lr
		cont = cont->next;
   20d7e:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   20d80:	3907      	subs	r1, #7
		cont = cont->next;
   20d82:	e7f6      	b.n	20d72 <log_msg_arg_get+0x28>
		return 0;
   20d84:	2000      	movs	r0, #0
}
   20d86:	4770      	bx	lr

00020d88 <log_msg_put>:
{
   20d88:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20d8a:	1d02      	adds	r2, r0, #4
   20d8c:	f3bf 8f5b 	dmb	ish
   20d90:	e852 1f00 	ldrex	r1, [r2]
   20d94:	3901      	subs	r1, #1
   20d96:	e842 1c00 	strex	ip, r1, [r2]
   20d9a:	f1bc 0f00 	cmp.w	ip, #0
   20d9e:	d1f7      	bne.n	20d90 <log_msg_put+0x8>
   20da0:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   20da4:	685b      	ldr	r3, [r3, #4]
   20da6:	b90b      	cbnz	r3, 20dac <log_msg_put+0x24>
		msg_free(msg);
   20da8:	f7e4 be5a 	b.w	5a60 <msg_free>
}
   20dac:	4770      	bx	lr

00020dae <log_msg_str_get>:
}
   20dae:	6900      	ldr	r0, [r0, #16]
   20db0:	4770      	bx	lr

00020db2 <log_msg_create_n>:
{
   20db2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20db6:	4681      	mov	r9, r0
   20db8:	4688      	mov	r8, r1
   20dba:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   20dbc:	f7e4 fe3c 	bl	5a38 <log_msg_chunk_alloc>
	if (msg != NULL) {
   20dc0:	4604      	mov	r4, r0
   20dc2:	b330      	cbz	r0, 20e12 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   20dc4:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   20dc6:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   20dc8:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   20dca:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   20dcc:	8107      	strh	r7, [r0, #8]
   20dce:	d909      	bls.n	20de4 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   20dd0:	2202      	movs	r2, #2
   20dd2:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   20dd4:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   20dd8:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   20ddc:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   20dde:	f1ba 0f00 	cmp.w	sl, #0
   20de2:	dc0e      	bgt.n	20e02 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   20de4:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   20de6:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   20dea:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   20dee:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   20df0:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   20df2:	d818      	bhi.n	20e26 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   20df4:	00aa      	lsls	r2, r5, #2
   20df6:	4641      	mov	r1, r8
   20df8:	f104 0014 	add.w	r0, r4, #20
   20dfc:	f001 fc90 	bl	22720 <memcpy>
	while (nargs != 0U) {
   20e00:	e007      	b.n	20e12 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   20e02:	f7e4 fe19 	bl	5a38 <log_msg_chunk_alloc>
		if (cont == NULL) {
   20e06:	4606      	mov	r6, r0
   20e08:	b930      	cbnz	r0, 20e18 <log_msg_create_n+0x66>
			msg_free(msg);
   20e0a:	4620      	mov	r0, r4
   20e0c:	f7e4 fe28 	bl	5a60 <msg_free>
			return NULL;
   20e10:	4634      	mov	r4, r6
}
   20e12:	4620      	mov	r0, r4
   20e14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   20e18:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   20e1c:	f1aa 0a07 	sub.w	sl, sl, #7
   20e20:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   20e22:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   20e24:	e7db      	b.n	20dde <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   20e26:	4641      	mov	r1, r8
   20e28:	2208      	movs	r2, #8
   20e2a:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   20e2e:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   20e30:	f001 fc76 	bl	22720 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   20e34:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   20e36:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   20e3a:	2d07      	cmp	r5, #7
   20e3c:	462e      	mov	r6, r5
   20e3e:	bf28      	it	cs
   20e40:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   20e42:	ea4f 0986 	mov.w	r9, r6, lsl #2
   20e46:	4641      	mov	r1, r8
   20e48:	1d38      	adds	r0, r7, #4
   20e4a:	464a      	mov	r2, r9
   20e4c:	f001 fc68 	bl	22720 <memcpy>
	while (nargs != 0U) {
   20e50:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   20e52:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   20e54:	44c8      	add	r8, r9
	while (nargs != 0U) {
   20e56:	d1f0      	bne.n	20e3a <log_msg_create_n+0x88>
   20e58:	e7db      	b.n	20e12 <log_msg_create_n+0x60>

00020e5a <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   20e5a:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   20e5c:	2400      	movs	r4, #0
   20e5e:	9400      	str	r4, [sp, #0]
   20e60:	f7ff ff0f 	bl	20c82 <log_msg_hexdump_data_op>
}
   20e64:	b002      	add	sp, #8
   20e66:	bd10      	pop	{r4, pc}

00020e68 <buffer_write>:
{
   20e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20e6a:	4606      	mov	r6, r0
   20e6c:	460d      	mov	r5, r1
   20e6e:	4614      	mov	r4, r2
   20e70:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   20e72:	4621      	mov	r1, r4
   20e74:	4628      	mov	r0, r5
   20e76:	463a      	mov	r2, r7
   20e78:	47b0      	blx	r6
	} while (len != 0);
   20e7a:	1a24      	subs	r4, r4, r0
		buf += processed;
   20e7c:	4405      	add	r5, r0
	} while (len != 0);
   20e7e:	d1f8      	bne.n	20e72 <buffer_write+0xa>
}
   20e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020e82 <std_print>:
{
   20e82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20e86:	b08e      	sub	sp, #56	; 0x38
   20e88:	af0e      	add	r7, sp, #56	; 0x38
   20e8a:	4680      	mov	r8, r0
   20e8c:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   20e8e:	f7ff ff8e 	bl	20dae <log_msg_str_get>
   20e92:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   20e94:	4640      	mov	r0, r8
   20e96:	f7ff ff55 	bl	20d44 <log_msg_nargs_get>
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   20e9a:	0083      	lsls	r3, r0, #2
   20e9c:	3307      	adds	r3, #7
   20e9e:	f023 0307 	bic.w	r3, r3, #7
   20ea2:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   20ea6:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   20ea8:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   20eaa:	f04f 0900 	mov.w	r9, #0
   20eae:	45d1      	cmp	r9, sl
   20eb0:	d116      	bne.n	20ee0 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   20eb2:	4640      	mov	r0, r8
   20eb4:	f7ff ff46 	bl	20d44 <log_msg_nargs_get>
   20eb8:	280f      	cmp	r0, #15
   20eba:	d81e      	bhi.n	20efa <std_print+0x78>
   20ebc:	e8df f010 	tbh	[pc, r0, lsl #1]
   20ec0:	00200019 	.word	0x00200019
   20ec4:	002d0026 	.word	0x002d0026
   20ec8:	00410036 	.word	0x00410036
   20ecc:	005d004e 	.word	0x005d004e
   20ed0:	0081006e 	.word	0x0081006e
   20ed4:	00ad0096 	.word	0x00ad0096
   20ed8:	00e100c6 	.word	0x00e100c6
   20edc:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   20ee0:	4649      	mov	r1, r9
   20ee2:	4640      	mov	r0, r8
   20ee4:	f7ff ff31 	bl	20d4a <log_msg_arg_get>
   20ee8:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   20eec:	f109 0901 	add.w	r9, r9, #1
   20ef0:	e7dd      	b.n	20eae <std_print+0x2c>
		print_formatted(log_output, str);
   20ef2:	4631      	mov	r1, r6
   20ef4:	4628      	mov	r0, r5
   20ef6:	f7e4 fdf1 	bl	5adc <print_formatted>
}
   20efa:	46bd      	mov	sp, r7
   20efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   20f00:	6822      	ldr	r2, [r4, #0]
   20f02:	4631      	mov	r1, r6
   20f04:	4628      	mov	r0, r5
   20f06:	f7e4 fde9 	bl	5adc <print_formatted>
		break;
   20f0a:	e7f6      	b.n	20efa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   20f0c:	e9d4 2300 	ldrd	r2, r3, [r4]
   20f10:	4631      	mov	r1, r6
   20f12:	4628      	mov	r0, r5
   20f14:	f7e4 fde2 	bl	5adc <print_formatted>
		break;
   20f18:	e7ef      	b.n	20efa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   20f1a:	68a3      	ldr	r3, [r4, #8]
   20f1c:	9300      	str	r3, [sp, #0]
   20f1e:	e9d4 2300 	ldrd	r2, r3, [r4]
   20f22:	4631      	mov	r1, r6
   20f24:	4628      	mov	r0, r5
   20f26:	f7e4 fdd9 	bl	5adc <print_formatted>
		break;
   20f2a:	e7e6      	b.n	20efa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   20f2c:	68e3      	ldr	r3, [r4, #12]
   20f2e:	9301      	str	r3, [sp, #4]
   20f30:	68a3      	ldr	r3, [r4, #8]
   20f32:	9300      	str	r3, [sp, #0]
   20f34:	e9d4 2300 	ldrd	r2, r3, [r4]
   20f38:	4631      	mov	r1, r6
   20f3a:	4628      	mov	r0, r5
   20f3c:	f7e4 fdce 	bl	5adc <print_formatted>
		break;
   20f40:	e7db      	b.n	20efa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   20f42:	6923      	ldr	r3, [r4, #16]
   20f44:	9302      	str	r3, [sp, #8]
   20f46:	68e3      	ldr	r3, [r4, #12]
   20f48:	9301      	str	r3, [sp, #4]
   20f4a:	68a3      	ldr	r3, [r4, #8]
   20f4c:	9300      	str	r3, [sp, #0]
   20f4e:	e9d4 2300 	ldrd	r2, r3, [r4]
   20f52:	4631      	mov	r1, r6
   20f54:	4628      	mov	r0, r5
   20f56:	f7e4 fdc1 	bl	5adc <print_formatted>
		break;
   20f5a:	e7ce      	b.n	20efa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   20f5c:	6963      	ldr	r3, [r4, #20]
   20f5e:	9303      	str	r3, [sp, #12]
   20f60:	6923      	ldr	r3, [r4, #16]
   20f62:	9302      	str	r3, [sp, #8]
   20f64:	68e3      	ldr	r3, [r4, #12]
   20f66:	9301      	str	r3, [sp, #4]
   20f68:	68a3      	ldr	r3, [r4, #8]
   20f6a:	9300      	str	r3, [sp, #0]
   20f6c:	e9d4 2300 	ldrd	r2, r3, [r4]
   20f70:	4631      	mov	r1, r6
   20f72:	4628      	mov	r0, r5
   20f74:	f7e4 fdb2 	bl	5adc <print_formatted>
		break;
   20f78:	e7bf      	b.n	20efa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   20f7a:	69a3      	ldr	r3, [r4, #24]
   20f7c:	9304      	str	r3, [sp, #16]
   20f7e:	6963      	ldr	r3, [r4, #20]
   20f80:	9303      	str	r3, [sp, #12]
   20f82:	6923      	ldr	r3, [r4, #16]
   20f84:	9302      	str	r3, [sp, #8]
   20f86:	68e3      	ldr	r3, [r4, #12]
   20f88:	9301      	str	r3, [sp, #4]
   20f8a:	68a3      	ldr	r3, [r4, #8]
   20f8c:	9300      	str	r3, [sp, #0]
   20f8e:	e9d4 2300 	ldrd	r2, r3, [r4]
   20f92:	4631      	mov	r1, r6
   20f94:	4628      	mov	r0, r5
   20f96:	f7e4 fda1 	bl	5adc <print_formatted>
		break;
   20f9a:	e7ae      	b.n	20efa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   20f9c:	69e3      	ldr	r3, [r4, #28]
   20f9e:	9305      	str	r3, [sp, #20]
   20fa0:	69a3      	ldr	r3, [r4, #24]
   20fa2:	9304      	str	r3, [sp, #16]
   20fa4:	6963      	ldr	r3, [r4, #20]
   20fa6:	9303      	str	r3, [sp, #12]
   20fa8:	6923      	ldr	r3, [r4, #16]
   20faa:	9302      	str	r3, [sp, #8]
   20fac:	68e3      	ldr	r3, [r4, #12]
   20fae:	9301      	str	r3, [sp, #4]
   20fb0:	68a3      	ldr	r3, [r4, #8]
   20fb2:	9300      	str	r3, [sp, #0]
   20fb4:	e9d4 2300 	ldrd	r2, r3, [r4]
   20fb8:	4631      	mov	r1, r6
   20fba:	4628      	mov	r0, r5
   20fbc:	f7e4 fd8e 	bl	5adc <print_formatted>
		break;
   20fc0:	e79b      	b.n	20efa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   20fc2:	6a23      	ldr	r3, [r4, #32]
   20fc4:	9306      	str	r3, [sp, #24]
   20fc6:	69e3      	ldr	r3, [r4, #28]
   20fc8:	9305      	str	r3, [sp, #20]
   20fca:	69a3      	ldr	r3, [r4, #24]
   20fcc:	9304      	str	r3, [sp, #16]
   20fce:	6963      	ldr	r3, [r4, #20]
   20fd0:	9303      	str	r3, [sp, #12]
   20fd2:	6923      	ldr	r3, [r4, #16]
   20fd4:	9302      	str	r3, [sp, #8]
   20fd6:	68e3      	ldr	r3, [r4, #12]
   20fd8:	9301      	str	r3, [sp, #4]
   20fda:	68a3      	ldr	r3, [r4, #8]
   20fdc:	9300      	str	r3, [sp, #0]
   20fde:	e9d4 2300 	ldrd	r2, r3, [r4]
   20fe2:	4631      	mov	r1, r6
   20fe4:	4628      	mov	r0, r5
   20fe6:	f7e4 fd79 	bl	5adc <print_formatted>
		break;
   20fea:	e786      	b.n	20efa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   20fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20fee:	9307      	str	r3, [sp, #28]
   20ff0:	6a23      	ldr	r3, [r4, #32]
   20ff2:	9306      	str	r3, [sp, #24]
   20ff4:	69e3      	ldr	r3, [r4, #28]
   20ff6:	9305      	str	r3, [sp, #20]
   20ff8:	69a3      	ldr	r3, [r4, #24]
   20ffa:	9304      	str	r3, [sp, #16]
   20ffc:	6963      	ldr	r3, [r4, #20]
   20ffe:	9303      	str	r3, [sp, #12]
   21000:	6923      	ldr	r3, [r4, #16]
   21002:	9302      	str	r3, [sp, #8]
   21004:	68e3      	ldr	r3, [r4, #12]
   21006:	9301      	str	r3, [sp, #4]
   21008:	68a3      	ldr	r3, [r4, #8]
   2100a:	9300      	str	r3, [sp, #0]
   2100c:	e9d4 2300 	ldrd	r2, r3, [r4]
   21010:	4631      	mov	r1, r6
   21012:	4628      	mov	r0, r5
   21014:	f7e4 fd62 	bl	5adc <print_formatted>
		break;
   21018:	e76f      	b.n	20efa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2101a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2101c:	9308      	str	r3, [sp, #32]
   2101e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21020:	9307      	str	r3, [sp, #28]
   21022:	6a23      	ldr	r3, [r4, #32]
   21024:	9306      	str	r3, [sp, #24]
   21026:	69e3      	ldr	r3, [r4, #28]
   21028:	9305      	str	r3, [sp, #20]
   2102a:	69a3      	ldr	r3, [r4, #24]
   2102c:	9304      	str	r3, [sp, #16]
   2102e:	6963      	ldr	r3, [r4, #20]
   21030:	9303      	str	r3, [sp, #12]
   21032:	6923      	ldr	r3, [r4, #16]
   21034:	9302      	str	r3, [sp, #8]
   21036:	68e3      	ldr	r3, [r4, #12]
   21038:	9301      	str	r3, [sp, #4]
   2103a:	68a3      	ldr	r3, [r4, #8]
   2103c:	9300      	str	r3, [sp, #0]
   2103e:	e9d4 2300 	ldrd	r2, r3, [r4]
   21042:	4631      	mov	r1, r6
   21044:	4628      	mov	r0, r5
   21046:	f7e4 fd49 	bl	5adc <print_formatted>
		break;
   2104a:	e756      	b.n	20efa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2104c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2104e:	9309      	str	r3, [sp, #36]	; 0x24
   21050:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21052:	9308      	str	r3, [sp, #32]
   21054:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21056:	9307      	str	r3, [sp, #28]
   21058:	6a23      	ldr	r3, [r4, #32]
   2105a:	9306      	str	r3, [sp, #24]
   2105c:	69e3      	ldr	r3, [r4, #28]
   2105e:	9305      	str	r3, [sp, #20]
   21060:	69a3      	ldr	r3, [r4, #24]
   21062:	9304      	str	r3, [sp, #16]
   21064:	6963      	ldr	r3, [r4, #20]
   21066:	9303      	str	r3, [sp, #12]
   21068:	6923      	ldr	r3, [r4, #16]
   2106a:	9302      	str	r3, [sp, #8]
   2106c:	68e3      	ldr	r3, [r4, #12]
   2106e:	9301      	str	r3, [sp, #4]
   21070:	68a3      	ldr	r3, [r4, #8]
   21072:	9300      	str	r3, [sp, #0]
   21074:	e9d4 2300 	ldrd	r2, r3, [r4]
   21078:	4631      	mov	r1, r6
   2107a:	4628      	mov	r0, r5
   2107c:	f7e4 fd2e 	bl	5adc <print_formatted>
		break;
   21080:	e73b      	b.n	20efa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21082:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21084:	930a      	str	r3, [sp, #40]	; 0x28
   21086:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21088:	9309      	str	r3, [sp, #36]	; 0x24
   2108a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2108c:	9308      	str	r3, [sp, #32]
   2108e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21090:	9307      	str	r3, [sp, #28]
   21092:	6a23      	ldr	r3, [r4, #32]
   21094:	9306      	str	r3, [sp, #24]
   21096:	69e3      	ldr	r3, [r4, #28]
   21098:	9305      	str	r3, [sp, #20]
   2109a:	69a3      	ldr	r3, [r4, #24]
   2109c:	9304      	str	r3, [sp, #16]
   2109e:	6963      	ldr	r3, [r4, #20]
   210a0:	9303      	str	r3, [sp, #12]
   210a2:	6923      	ldr	r3, [r4, #16]
   210a4:	9302      	str	r3, [sp, #8]
   210a6:	68e3      	ldr	r3, [r4, #12]
   210a8:	9301      	str	r3, [sp, #4]
   210aa:	68a3      	ldr	r3, [r4, #8]
   210ac:	9300      	str	r3, [sp, #0]
   210ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   210b2:	4631      	mov	r1, r6
   210b4:	4628      	mov	r0, r5
   210b6:	f7e4 fd11 	bl	5adc <print_formatted>
		break;
   210ba:	e71e      	b.n	20efa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   210bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   210be:	930b      	str	r3, [sp, #44]	; 0x2c
   210c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   210c2:	930a      	str	r3, [sp, #40]	; 0x28
   210c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   210c6:	9309      	str	r3, [sp, #36]	; 0x24
   210c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   210ca:	9308      	str	r3, [sp, #32]
   210cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   210ce:	9307      	str	r3, [sp, #28]
   210d0:	6a23      	ldr	r3, [r4, #32]
   210d2:	9306      	str	r3, [sp, #24]
   210d4:	69e3      	ldr	r3, [r4, #28]
   210d6:	9305      	str	r3, [sp, #20]
   210d8:	69a3      	ldr	r3, [r4, #24]
   210da:	9304      	str	r3, [sp, #16]
   210dc:	6963      	ldr	r3, [r4, #20]
   210de:	9303      	str	r3, [sp, #12]
   210e0:	6923      	ldr	r3, [r4, #16]
   210e2:	9302      	str	r3, [sp, #8]
   210e4:	68e3      	ldr	r3, [r4, #12]
   210e6:	9301      	str	r3, [sp, #4]
   210e8:	68a3      	ldr	r3, [r4, #8]
   210ea:	9300      	str	r3, [sp, #0]
   210ec:	e9d4 2300 	ldrd	r2, r3, [r4]
   210f0:	4631      	mov	r1, r6
   210f2:	4628      	mov	r0, r5
   210f4:	f7e4 fcf2 	bl	5adc <print_formatted>
		break;
   210f8:	e6ff      	b.n	20efa <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   210fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   210fc:	930c      	str	r3, [sp, #48]	; 0x30
   210fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   21100:	930b      	str	r3, [sp, #44]	; 0x2c
   21102:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21104:	930a      	str	r3, [sp, #40]	; 0x28
   21106:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21108:	9309      	str	r3, [sp, #36]	; 0x24
   2110a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2110c:	9308      	str	r3, [sp, #32]
   2110e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21110:	9307      	str	r3, [sp, #28]
   21112:	6a23      	ldr	r3, [r4, #32]
   21114:	9306      	str	r3, [sp, #24]
   21116:	69e3      	ldr	r3, [r4, #28]
   21118:	9305      	str	r3, [sp, #20]
   2111a:	69a3      	ldr	r3, [r4, #24]
   2111c:	9304      	str	r3, [sp, #16]
   2111e:	6963      	ldr	r3, [r4, #20]
   21120:	9303      	str	r3, [sp, #12]
   21122:	6923      	ldr	r3, [r4, #16]
   21124:	9302      	str	r3, [sp, #8]
   21126:	68e3      	ldr	r3, [r4, #12]
   21128:	9301      	str	r3, [sp, #4]
   2112a:	68a3      	ldr	r3, [r4, #8]
   2112c:	9300      	str	r3, [sp, #0]
   2112e:	e9d4 2300 	ldrd	r2, r3, [r4]
   21132:	4631      	mov	r1, r6
   21134:	4628      	mov	r0, r5
   21136:	f7e4 fcd1 	bl	5adc <print_formatted>
}
   2113a:	e6de      	b.n	20efa <std_print+0x78>

0002113c <log_output_flush>:
		     log_output->control_block->offset,
   2113c:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   2113e:	6881      	ldr	r1, [r0, #8]
{
   21140:	b510      	push	{r4, lr}
   21142:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   21144:	e9d2 2300 	ldrd	r2, r3, [r2]
   21148:	6800      	ldr	r0, [r0, #0]
   2114a:	f7ff fe8d 	bl	20e68 <buffer_write>
	log_output->control_block->offset = 0;
   2114e:	6863      	ldr	r3, [r4, #4]
   21150:	2200      	movs	r2, #0
   21152:	601a      	str	r2, [r3, #0]
}
   21154:	bd10      	pop	{r4, pc}

00021156 <out_func>:
{
   21156:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   21158:	684b      	ldr	r3, [r1, #4]
   2115a:	681a      	ldr	r2, [r3, #0]
   2115c:	68cb      	ldr	r3, [r1, #12]
   2115e:	429a      	cmp	r2, r3
{
   21160:	4605      	mov	r5, r0
   21162:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   21164:	d102      	bne.n	2116c <out_func+0x16>
		log_output_flush(out_ctx);
   21166:	4608      	mov	r0, r1
   21168:	f7ff ffe8 	bl	2113c <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2116c:	6863      	ldr	r3, [r4, #4]
   2116e:	f3bf 8f5b 	dmb	ish
   21172:	e853 2f00 	ldrex	r2, [r3]
   21176:	1c51      	adds	r1, r2, #1
   21178:	e843 1000 	strex	r0, r1, [r3]
   2117c:	2800      	cmp	r0, #0
   2117e:	d1f8      	bne.n	21172 <out_func+0x1c>
   21180:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   21184:	68a3      	ldr	r3, [r4, #8]
   21186:	549d      	strb	r5, [r3, r2]
}
   21188:	2000      	movs	r0, #0
   2118a:	bd38      	pop	{r3, r4, r5, pc}

0002118c <char_out>:
{
   2118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2118e:	460d      	mov	r5, r1
   21190:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   21192:	4604      	mov	r4, r0
   21194:	1847      	adds	r7, r0, r1
   21196:	42bc      	cmp	r4, r7
   21198:	d101      	bne.n	2119e <char_out+0x12>
}
   2119a:	4628      	mov	r0, r5
   2119c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   2119e:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   211a2:	68b3      	ldr	r3, [r6, #8]
   211a4:	4630      	mov	r0, r6
   211a6:	685b      	ldr	r3, [r3, #4]
   211a8:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   211aa:	e7f4      	b.n	21196 <char_out+0xa>

000211ac <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
   211ac:	6883      	ldr	r3, [r0, #8]
   211ae:	6a1b      	ldr	r3, [r3, #32]
   211b0:	b103      	cbz	r3, 211b4 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   211b2:	4718      	bx	r3
}
   211b4:	4770      	bx	lr

000211b6 <tty_putchar>:
{
   211b6:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   211ba:	4604      	mov	r4, r0
   211bc:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
   211be:	f100 062c 	add.w	r6, r0, #44	; 0x2c
			 k_is_in_isr() ? K_NO_WAIT :
   211c2:	f004 fe50 	bl	25e66 <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
   211c6:	bba8      	cbnz	r0, 21234 <tty_putchar+0x7e>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   211c8:	6d21      	ldr	r1, [r4, #80]	; 0x50
	res = k_sem_take(&tty->tx_sem,
   211ca:	1c4b      	adds	r3, r1, #1
   211cc:	d035      	beq.n	2123a <tty_putchar+0x84>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   211ce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   211d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   211d6:	f240 38e7 	movw	r8, #999	; 0x3e7
   211da:	f04f 0900 	mov.w	r9, #0
   211de:	fbc0 8901 	smlal	r8, r9, r0, r1
   211e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   211e6:	2300      	movs	r3, #0
   211e8:	4640      	mov	r0, r8
   211ea:	4649      	mov	r1, r9
   211ec:	f7de ff88 	bl	100 <__aeabi_uldivmod>
   211f0:	4602      	mov	r2, r0
   211f2:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   211f4:	4630      	mov	r0, r6
   211f6:	f7fe fd57 	bl	1fca8 <z_impl_k_sem_take>
	if (res < 0) {
   211fa:	2800      	cmp	r0, #0
   211fc:	db18      	blt.n	21230 <tty_putchar+0x7a>
	__asm__ volatile(
   211fe:	f04f 0320 	mov.w	r3, #32
   21202:	f3ef 8211 	mrs	r2, BASEPRI
   21206:	f383 8811 	msr	BASEPRI, r3
   2120a:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
   2120e:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
	if (tx_next >= tty->tx_ringbuf_sz) {
   21212:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	tx_next = tty->tx_put + 1;
   21214:	1c4b      	adds	r3, r1, #1
		tx_next = 0;
   21216:	4298      	cmp	r0, r3
   21218:	bf98      	it	ls
   2121a:	2300      	movls	r3, #0
	if (tx_next == tty->tx_get) {
   2121c:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
   21220:	4298      	cmp	r0, r3
   21222:	d10d      	bne.n	21240 <tty_putchar+0x8a>
	__asm__ volatile(
   21224:	f382 8811 	msr	BASEPRI, r2
   21228:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
   2122c:	f06f 001b 	mvn.w	r0, #27
}
   21230:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	res = k_sem_take(&tty->tx_sem,
   21234:	2200      	movs	r2, #0
   21236:	4613      	mov	r3, r2
   21238:	e7dc      	b.n	211f4 <tty_putchar+0x3e>
   2123a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2123e:	e7fa      	b.n	21236 <tty_putchar+0x80>
	tty->tx_ringbuf[tty->tx_put] = c;
   21240:	6c60      	ldr	r0, [r4, #68]	; 0x44
   21242:	5445      	strb	r5, [r0, r1]
	tty->tx_put = tx_next;
   21244:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
   21248:	f382 8811 	msr	BASEPRI, r2
   2124c:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
   21250:	6820      	ldr	r0, [r4, #0]
	if (api->irq_tx_enable) {
   21252:	6883      	ldr	r3, [r0, #8]
   21254:	69db      	ldr	r3, [r3, #28]
   21256:	b113      	cbz	r3, 2125e <tty_putchar+0xa8>
		api->irq_tx_enable(dev);
   21258:	4798      	blx	r3
	return 0;
   2125a:	2000      	movs	r0, #0
   2125c:	e7e8      	b.n	21230 <tty_putchar+0x7a>
   2125e:	4618      	mov	r0, r3
   21260:	e7e6      	b.n	21230 <tty_putchar+0x7a>

00021262 <tty_uart_isr>:
{
   21262:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct device *dev = tty->uart_dev;
   21264:	6805      	ldr	r5, [r0, #0]
{
   21266:	4604      	mov	r4, r0
	if (api->irq_update) {
   21268:	68ab      	ldr	r3, [r5, #8]
   2126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2126c:	b10b      	cbz	r3, 21272 <tty_uart_isr+0x10>
		return api->irq_update(dev);
   2126e:	4628      	mov	r0, r5
   21270:	4798      	blx	r3
	if (api->irq_rx_ready) {
   21272:	68ab      	ldr	r3, [r5, #8]
   21274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   21276:	b31b      	cbz	r3, 212c0 <tty_uart_isr+0x5e>
		return api->irq_rx_ready(dev);
   21278:	4628      	mov	r0, r5
   2127a:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   2127c:	b300      	cbz	r0, 212c0 <tty_uart_isr+0x5e>
	k_sem_give(&tty->rx_sem);
   2127e:	1d26      	adds	r6, r4, #4
	if (api->fifo_read) {
   21280:	68ab      	ldr	r3, [r5, #8]
   21282:	699b      	ldr	r3, [r3, #24]
   21284:	b1e3      	cbz	r3, 212c0 <tty_uart_isr+0x5e>
		return api->fifo_read(dev, rx_data, size);
   21286:	2201      	movs	r2, #1
   21288:	f10d 0107 	add.w	r1, sp, #7
   2128c:	4628      	mov	r0, r5
   2128e:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
   21290:	b1b0      	cbz	r0, 212c0 <tty_uart_isr+0x5e>
	int rx_next = tty->rx_put + 1;
   21292:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
	if (rx_next >= tty->rx_ringbuf_sz) {
   21294:	6a21      	ldr	r1, [r4, #32]
	int rx_next = tty->rx_put + 1;
   21296:	1c53      	adds	r3, r2, #1
		rx_next = 0;
   21298:	4299      	cmp	r1, r3
   2129a:	bf98      	it	ls
   2129c:	2300      	movls	r3, #0
	if (rx_next == tty->rx_get) {
   2129e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   212a0:	4299      	cmp	r1, r3
   212a2:	d104      	bne.n	212ae <tty_uart_isr+0x4c>
		tty_putchar(tty, '~');
   212a4:	217e      	movs	r1, #126	; 0x7e
   212a6:	4620      	mov	r0, r4
   212a8:	f7ff ff85 	bl	211b6 <tty_putchar>
		return 1;
   212ac:	e7e8      	b.n	21280 <tty_uart_isr+0x1e>
	tty->rx_ringbuf[tty->rx_put] = c;
   212ae:	69e1      	ldr	r1, [r4, #28]
			tty_irq_input_hook(tty, c);
   212b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
	tty->rx_ringbuf[tty->rx_put] = c;
   212b4:	5488      	strb	r0, [r1, r2]
	tty->rx_put = rx_next;
   212b6:	84e3      	strh	r3, [r4, #38]	; 0x26
	z_impl_k_sem_give(sem);
   212b8:	4630      	mov	r0, r6
   212ba:	f7fe fccf 	bl	1fc5c <z_impl_k_sem_give>
}
   212be:	e7df      	b.n	21280 <tty_uart_isr+0x1e>
	if (api->irq_tx_ready) {
   212c0:	68ab      	ldr	r3, [r5, #8]
   212c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   212c4:	b15b      	cbz	r3, 212de <tty_uart_isr+0x7c>
		return api->irq_tx_ready(dev);
   212c6:	4628      	mov	r0, r5
   212c8:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   212ca:	b140      	cbz	r0, 212de <tty_uart_isr+0x7c>
		if (tty->tx_get == tty->tx_put) {
   212cc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   212d0:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
   212d4:	429a      	cmp	r2, r3
   212d6:	d104      	bne.n	212e2 <tty_uart_isr+0x80>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
   212d8:	4628      	mov	r0, r5
   212da:	f7ff ff67 	bl	211ac <z_impl_uart_irq_tx_disable>
}
   212de:	b002      	add	sp, #8
   212e0:	bd70      	pop	{r4, r5, r6, pc}
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
   212e2:	1c5a      	adds	r2, r3, #1
   212e4:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
	if (api->fifo_fill) {
   212e8:	68aa      	ldr	r2, [r5, #8]
   212ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
   212ec:	6956      	ldr	r6, [r2, #20]
   212ee:	b11e      	cbz	r6, 212f8 <tty_uart_isr+0x96>
		return api->fifo_fill(dev, tx_data, size);
   212f0:	2201      	movs	r2, #1
   212f2:	4419      	add	r1, r3
   212f4:	4628      	mov	r0, r5
   212f6:	47b0      	blx	r6
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
   212f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   212fa:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   212fe:	429a      	cmp	r2, r3
				tty->tx_get = 0U;
   21300:	bf24      	itt	cs
   21302:	2300      	movcs	r3, #0
   21304:	f8a4 304c 	strhcs.w	r3, [r4, #76]	; 0x4c
	z_impl_k_sem_give(sem);
   21308:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   2130c:	f7fe fca6 	bl	1fc5c <z_impl_k_sem_give>
}
   21310:	e7e5      	b.n	212de <tty_uart_isr+0x7c>

00021312 <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   21312:	b570      	push	{r4, r5, r6, lr}
   21314:	4604      	mov	r4, r0
   21316:	460e      	mov	r6, r1
	uart_irq_rx_disable(tty->uart_dev);
   21318:	6800      	ldr	r0, [r0, #0]
{
   2131a:	4615      	mov	r5, r2
	if (api->irq_rx_disable) {
   2131c:	6883      	ldr	r3, [r0, #8]
   2131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21320:	b103      	cbz	r3, 21324 <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
   21322:	4798      	blx	r3

	tty->rx_ringbuf = buf;
	tty->rx_ringbuf_sz = size;
   21324:	e9c4 6507 	strd	r6, r5, [r4, #28]

	if (size > 0) {
   21328:	b155      	cbz	r5, 21340 <tty_set_rx_buf+0x2e>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2132a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2132e:	2100      	movs	r1, #0
   21330:	1d20      	adds	r0, r4, #4
   21332:	f004 fd88 	bl	25e46 <z_impl_k_sem_init>
		k_sem_init(&tty->rx_sem, 0, UINT_MAX);
		uart_irq_rx_enable(tty->uart_dev);
   21336:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable) {
   21338:	6883      	ldr	r3, [r0, #8]
   2133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2133c:	b103      	cbz	r3, 21340 <tty_set_rx_buf+0x2e>
		api->irq_rx_enable(dev);
   2133e:	4798      	blx	r3
	}

	return 0;
}
   21340:	2000      	movs	r0, #0
   21342:	bd70      	pop	{r4, r5, r6, pc}

00021344 <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   21344:	b570      	push	{r4, r5, r6, lr}
   21346:	4604      	mov	r4, r0
   21348:	460e      	mov	r6, r1
   2134a:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
   2134c:	6800      	ldr	r0, [r0, #0]
   2134e:	f7ff ff2d 	bl	211ac <z_impl_uart_irq_tx_disable>

	tty->tx_ringbuf = buf;
	tty->tx_ringbuf_sz = size;
   21352:	e9c4 6511 	strd	r6, r5, [r4, #68]	; 0x44
   21356:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2135a:	18a9      	adds	r1, r5, r2
   2135c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   21360:	f004 fd71 	bl	25e46 <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
   21364:	2000      	movs	r0, #0
   21366:	bd70      	pop	{r4, r5, r6, pc}

00021368 <uart_poll_out>:
	api->poll_out(dev, out_char);
   21368:	6883      	ldr	r3, [r0, #8]
   2136a:	685b      	ldr	r3, [r3, #4]
   2136c:	4718      	bx	r3

0002136e <debug_hook_out_nop>:
}
   2136e:	2000      	movs	r0, #0
   21370:	4770      	bx	lr

00021372 <get_status>:
	data = get_sub_data(dev, type);
   21372:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
   21374:	b2c9      	uxtb	r1, r1
	if (data->started) {
   21376:	220c      	movs	r2, #12
   21378:	fb02 3101 	mla	r1, r2, r1, r3
   2137c:	7a4b      	ldrb	r3, [r1, #9]
   2137e:	b923      	cbnz	r3, 2138a <get_status+0x18>
	if (data->ref > 0) {
   21380:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   21382:	fab0 f080 	clz	r0, r0
   21386:	0940      	lsrs	r0, r0, #5
   21388:	4770      	bx	lr
   2138a:	2002      	movs	r0, #2
}
   2138c:	4770      	bx	lr

0002138e <clock_stop>:
{
   2138e:	b570      	push	{r4, r5, r6, lr}
   21390:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
   21392:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
   21394:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
   21396:	f04f 0320 	mov.w	r3, #32
   2139a:	f3ef 8611 	mrs	r6, BASEPRI
   2139e:	f383 8811 	msr	BASEPRI, r3
   213a2:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   213a6:	220c      	movs	r2, #12
   213a8:	434a      	muls	r2, r1
   213aa:	18ab      	adds	r3, r5, r2
   213ac:	7a18      	ldrb	r0, [r3, #8]
   213ae:	b190      	cbz	r0, 213d6 <clock_stop+0x48>
	data->ref--;
   213b0:	3801      	subs	r0, #1
   213b2:	b2c0      	uxtb	r0, r0
   213b4:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
   213b6:	b988      	cbnz	r0, 213dc <clock_stop+0x4e>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   213b8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	list->head = NULL;
   213bc:	50a8      	str	r0, [r5, r2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   213be:	78ca      	ldrb	r2, [r1, #3]
	list->tail = NULL;
   213c0:	6058      	str	r0, [r3, #4]
   213c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   213c6:	2101      	movs	r1, #1
   213c8:	6011      	str	r1, [r2, #0]
		data->started = false;
   213ca:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
   213cc:	f386 8811 	msr	BASEPRI, r6
   213d0:	f3bf 8f6f 	isb	sy
}
   213d4:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   213d6:	f06f 0044 	mvn.w	r0, #68	; 0x44
   213da:	e7f7      	b.n	213cc <clock_stop+0x3e>
	int err = 0;
   213dc:	2000      	movs	r0, #0
   213de:	e7f5      	b.n	213cc <clock_stop+0x3e>

000213e0 <clock_async_start>:
{
   213e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	config = get_sub_config(dev, type);
   213e4:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
   213e6:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   213ea:	b2cf      	uxtb	r7, r1
	if ((data != NULL)
   213ec:	b14a      	cbz	r2, 21402 <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
   213ee:	230c      	movs	r3, #12
   213f0:	437b      	muls	r3, r7
   213f2:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
   213f6:	429a      	cmp	r2, r3
   213f8:	d052      	beq.n	214a0 <clock_async_start+0xc0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   213fa:	b113      	cbz	r3, 21402 <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   213fc:	681b      	ldr	r3, [r3, #0]
	} while (item);
   213fe:	2b00      	cmp	r3, #0
   21400:	d1f9      	bne.n	213f6 <clock_async_start+0x16>
	__asm__ volatile(
   21402:	f04f 0320 	mov.w	r3, #32
   21406:	f3ef 8c11 	mrs	ip, BASEPRI
   2140a:	f383 8811 	msr	BASEPRI, r3
   2140e:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   21412:	250c      	movs	r5, #12
   21414:	437d      	muls	r5, r7
   21416:	eb0e 0305 	add.w	r3, lr, r5
   2141a:	7a1c      	ldrb	r4, [r3, #8]
   2141c:	3401      	adds	r4, #1
   2141e:	b2e4      	uxtb	r4, r4
   21420:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
   21422:	f38c 8811 	msr	BASEPRI, ip
   21426:	f3bf 8f6f 	isb	sy
	if (data) {
   2142a:	b35a      	cbz	r2, 21484 <clock_async_start+0xa4>
    p_reg->INTENCLR = mask;
   2142c:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
   21430:	f04f 0803 	mov.w	r8, #3
   21434:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		already_started = clk_data->started;
   21438:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
   2143c:	f1bc 0f00 	cmp.w	ip, #0
   21440:	d115      	bne.n	2146e <clock_async_start+0x8e>
	__asm__ volatile(
   21442:	f04f 0820 	mov.w	r8, #32
   21446:	f3ef 8911 	mrs	r9, BASEPRI
   2144a:	f388 8811 	msr	BASEPRI, r8
   2144e:	f3bf 8f6f 	isb	sy
	parent->next = child;
   21452:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_APPEND(slist, snode)
   21456:	f8d3 8004 	ldr.w	r8, [r3, #4]
   2145a:	f1b8 0f00 	cmp.w	r8, #0
   2145e:	d11b      	bne.n	21498 <clock_async_start+0xb8>
	list->tail = node;
   21460:	605a      	str	r2, [r3, #4]
	list->head = node;
   21462:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
   21466:	f389 8811 	msr	BASEPRI, r9
   2146a:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   2146e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21472:	2503      	movs	r5, #3
   21474:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		if (already_started) {
   21478:	f1bc 0f00 	cmp.w	ip, #0
   2147c:	d002      	beq.n	21484 <clock_async_start+0xa4>
			data->cb(dev, subsys, data->user_data);
   2147e:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
   21482:	4798      	blx	r3
	if (ref == 1) {
   21484:	2c01      	cmp	r4, #1
   21486:	d105      	bne.n	21494 <clock_async_start+0xb4>
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
   21488:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2148c:	78b3      	ldrb	r3, [r6, #2]
   2148e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21492:	601c      	str	r4, [r3, #0]
	return 0;
   21494:	2000      	movs	r0, #0
   21496:	e005      	b.n	214a4 <clock_async_start+0xc4>
	parent->next = child;
   21498:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
   2149c:	605a      	str	r2, [r3, #4]
}
   2149e:	e7e2      	b.n	21466 <clock_async_start+0x86>
		return -EBUSY;
   214a0:	f06f 000f 	mvn.w	r0, #15
}
   214a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000214a8 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   214a8:	2200      	movs	r2, #0
   214aa:	f7ff bf99 	b.w	213e0 <clock_async_start>

000214ae <clk_init>:
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   214ae:	2200      	movs	r2, #0
{
   214b0:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   214b2:	2101      	movs	r1, #1
{
   214b4:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   214b6:	4610      	mov	r0, r2
   214b8:	f7e5 fa0a 	bl	68d0 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
   214bc:	2000      	movs	r0, #0
   214be:	f7e5 f9d5 	bl	686c <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   214c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   214c6:	2201      	movs	r2, #1
   214c8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   214cc:	2203      	movs	r2, #3
   214ce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
   214d2:	68e3      	ldr	r3, [r4, #12]
	list->head = NULL;
   214d4:	2000      	movs	r0, #0
	list->tail = NULL;
   214d6:	e9c3 0000 	strd	r0, r0, [r3]
   214da:	68e3      	ldr	r3, [r4, #12]
   214dc:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
   214e0:	bd10      	pop	{r4, pc}

000214e2 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   214e2:	4770      	bx	lr

000214e4 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   214e4:	4770      	bx	lr

000214e6 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   214e6:	f7e4 bf5b 	b.w	63a0 <_DoInit>

000214ea <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   214ea:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   214ec:	f7ff fffb 	bl	214e6 <SEGGER_RTT_Init>

	return 0;
}
   214f0:	2000      	movs	r0, #0
   214f2:	bd08      	pop	{r3, pc}

000214f4 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   214f4:	b538      	push	{r3, r4, r5, lr}
   214f6:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   214f8:	42ab      	cmp	r3, r5
{
   214fa:	4611      	mov	r1, r2
   214fc:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   214fe:	d804      	bhi.n	2150a <_copy+0x16>
		(void)memcpy(to, from, from_len);
   21500:	461a      	mov	r2, r3
   21502:	f001 f90d 	bl	22720 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   21506:	4620      	mov	r0, r4
   21508:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2150a:	2400      	movs	r4, #0
   2150c:	e7fb      	b.n	21506 <_copy+0x12>

0002150e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2150e:	f001 b932 	b.w	22776 <memset>

00021512 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   21512:	09c3      	lsrs	r3, r0, #7
   21514:	005a      	lsls	r2, r3, #1
   21516:	4413      	add	r3, r2
   21518:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2151c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   21520:	b2c0      	uxtb	r0, r0
   21522:	4770      	bx	lr

00021524 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   21524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21528:	4606      	mov	r6, r0
   2152a:	b0a9      	sub	sp, #164	; 0xa4
   2152c:	4688      	mov	r8, r1
   2152e:	4614      	mov	r4, r2
   21530:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   21532:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   21536:	f7e4 ffb9 	bl	64ac <uECC_get_rng>
		if (!rng_function ||
   2153a:	4603      	mov	r3, r0
   2153c:	2800      	cmp	r0, #0
   2153e:	d03e      	beq.n	215be <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   21540:	2140      	movs	r1, #64	; 0x40
   21542:	a808      	add	r0, sp, #32
   21544:	4798      	blx	r3
		if (!rng_function ||
   21546:	b3d0      	cbz	r0, 215be <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   21548:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   2154c:	f112 031f 	adds.w	r3, r2, #31
   21550:	bf48      	it	mi
   21552:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   21556:	466d      	mov	r5, sp
   21558:	464a      	mov	r2, r9
   2155a:	a908      	add	r1, sp, #32
   2155c:	4628      	mov	r0, r5
   2155e:	f343 1347 	sbfx	r3, r3, #5, #8
   21562:	f000 fa03 	bl	2196c <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   21566:	4622      	mov	r2, r4
   21568:	4629      	mov	r1, r5
   2156a:	a818      	add	r0, sp, #96	; 0x60
   2156c:	f000 fe19 	bl	221a2 <EccPoint_compute_public_key>
   21570:	b318      	cbz	r0, 215ba <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   21572:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   21576:	1dd9      	adds	r1, r3, #7
   21578:	bf48      	it	mi
   2157a:	f103 010e 	addmi.w	r1, r3, #14
   2157e:	462a      	mov	r2, r5
   21580:	4640      	mov	r0, r8
   21582:	10c9      	asrs	r1, r1, #3
   21584:	f000 fe35 	bl	221f2 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   21588:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2158c:	aa18      	add	r2, sp, #96	; 0x60
   2158e:	4630      	mov	r0, r6
   21590:	f000 fe2f 	bl	221f2 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   21594:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   21598:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2159c:	ab18      	add	r3, sp, #96	; 0x60
   2159e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   215a2:	1870      	adds	r0, r6, r1
   215a4:	f000 fe25 	bl	221f2 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   215a8:	2220      	movs	r2, #32
   215aa:	2100      	movs	r1, #0
   215ac:	4628      	mov	r0, r5
   215ae:	f001 f8e2 	bl	22776 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   215b2:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   215b4:	b029      	add	sp, #164	; 0xa4
   215b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   215ba:	3f01      	subs	r7, #1
   215bc:	d1bb      	bne.n	21536 <uECC_make_key+0x12>
        		return 0;
   215be:	2000      	movs	r0, #0
   215c0:	e7f8      	b.n	215b4 <uECC_make_key+0x90>

000215c2 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   215c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   215c6:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   215c8:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   215cc:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   215d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   215d4:	b0a4      	sub	sp, #144	; 0x90
   215d6:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   215d8:	1dda      	adds	r2, r3, #7
   215da:	bf48      	it	mi
   215dc:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   215e0:	ad04      	add	r5, sp, #16
{
   215e2:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   215e4:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   215e6:	4628      	mov	r0, r5
   215e8:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   215ea:	9502      	str	r5, [sp, #8]
   215ec:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   215ee:	f000 fe14 	bl	2221a <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   215f2:	463a      	mov	r2, r7
   215f4:	4649      	mov	r1, r9
   215f6:	a814      	add	r0, sp, #80	; 0x50
   215f8:	f000 fe0f 	bl	2221a <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   215fc:	ab14      	add	r3, sp, #80	; 0x50
   215fe:	eb09 0107 	add.w	r1, r9, r7
   21602:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   21606:	463a      	mov	r2, r7
   21608:	f000 fe07 	bl	2221a <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   2160c:	4623      	mov	r3, r4
   2160e:	4632      	mov	r2, r6
   21610:	4629      	mov	r1, r5
   21612:	4628      	mov	r0, r5
   21614:	f000 fd99 	bl	2214a <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   21618:	fab0 f080 	clz	r0, r0
   2161c:	9401      	str	r4, [sp, #4]
   2161e:	ab24      	add	r3, sp, #144	; 0x90
   21620:	0940      	lsrs	r0, r0, #5
   21622:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   21626:	8863      	ldrh	r3, [r4, #2]
   21628:	3301      	adds	r3, #1
   2162a:	b21b      	sxth	r3, r3
   2162c:	9300      	str	r3, [sp, #0]
   2162e:	a914      	add	r1, sp, #80	; 0x50
   21630:	2300      	movs	r3, #0
   21632:	f850 2c88 	ldr.w	r2, [r0, #-136]
   21636:	4608      	mov	r0, r1
   21638:	f000 fcb8 	bl	21fac <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   2163c:	aa14      	add	r2, sp, #80	; 0x50
   2163e:	4639      	mov	r1, r7
   21640:	4640      	mov	r0, r8
   21642:	f000 fdd6 	bl	221f2 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   21646:	4621      	mov	r1, r4
   21648:	a814      	add	r0, sp, #80	; 0x50
   2164a:	f000 fc24 	bl	21e96 <EccPoint_isZero>
   2164e:	af02      	add	r7, sp, #8
   21650:	4604      	mov	r4, r0
   21652:	2208      	movs	r2, #8
   21654:	2100      	movs	r1, #0
   21656:	4638      	mov	r0, r7
   21658:	f001 f88d 	bl	22776 <memset>
   2165c:	2220      	movs	r2, #32
   2165e:	2100      	movs	r1, #0
   21660:	4630      	mov	r0, r6
   21662:	f001 f888 	bl	22776 <memset>
   21666:	2220      	movs	r2, #32
   21668:	2100      	movs	r1, #0
   2166a:	4628      	mov	r0, r5
   2166c:	f001 f883 	bl	22776 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   21670:	fab4 f084 	clz	r0, r4
   21674:	0940      	lsrs	r0, r0, #5
   21676:	b024      	add	sp, #144	; 0x90
   21678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002167c <uECC_vli_add>:
{
   2167c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   2167e:	2400      	movs	r4, #0
{
   21680:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   21682:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   21684:	b265      	sxtb	r5, r4
   21686:	42ab      	cmp	r3, r5
   21688:	dc00      	bgt.n	2168c <uECC_vli_add+0x10>
}
   2168a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   2168c:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   21690:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   21694:	443d      	add	r5, r7
   21696:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   21698:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   2169a:	bf8c      	ite	hi
   2169c:	2701      	movhi	r7, #1
   2169e:	2700      	movls	r7, #0
		result[i] = sum;
   216a0:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   216a4:	bf18      	it	ne
   216a6:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   216a8:	3401      	adds	r4, #1
   216aa:	e7eb      	b.n	21684 <uECC_vli_add+0x8>

000216ac <uECC_vli_rshift1>:
	vli += num_words;
   216ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   216b0:	2300      	movs	r3, #0
	while (vli-- > end) {
   216b2:	4288      	cmp	r0, r1
   216b4:	d300      	bcc.n	216b8 <uECC_vli_rshift1+0xc>
}
   216b6:	4770      	bx	lr
		uECC_word_t temp = *vli;
   216b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   216bc:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   216c0:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   216c2:	07d3      	lsls	r3, r2, #31
   216c4:	e7f5      	b.n	216b2 <uECC_vli_rshift1+0x6>

000216c6 <vli_modInv_update>:
	if (!EVEN(uv)) {
   216c6:	6803      	ldr	r3, [r0, #0]
{
   216c8:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   216ca:	f013 0601 	ands.w	r6, r3, #1
{
   216ce:	4605      	mov	r5, r0
   216d0:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   216d2:	d005      	beq.n	216e0 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   216d4:	4613      	mov	r3, r2
   216d6:	460a      	mov	r2, r1
   216d8:	4601      	mov	r1, r0
   216da:	f7ff ffcf 	bl	2167c <uECC_vli_add>
   216de:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   216e0:	4621      	mov	r1, r4
   216e2:	4628      	mov	r0, r5
   216e4:	f7ff ffe2 	bl	216ac <uECC_vli_rshift1>
	if (carry) {
   216e8:	b146      	cbz	r6, 216fc <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   216ea:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   216ee:	3a01      	subs	r2, #1
   216f0:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   216f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   216f8:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   216fc:	bd70      	pop	{r4, r5, r6, pc}

000216fe <uECC_vli_mult>:
{
   216fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   21702:	2500      	movs	r5, #0
{
   21704:	b087      	sub	sp, #28
   21706:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   2170a:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   2170c:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   2170e:	fa4f f885 	sxtb.w	r8, r5
   21712:	4543      	cmp	r3, r8
   21714:	dc16      	bgt.n	21744 <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   21716:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2171a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   2171e:	9502      	str	r5, [sp, #8]
   21720:	f04f 0a00 	mov.w	sl, #0
   21724:	9e02      	ldr	r6, [sp, #8]
   21726:	fa53 fe8a 	uxtab	lr, r3, sl
   2172a:	fa4f fe8e 	sxtb.w	lr, lr
   2172e:	45b6      	cmp	lr, r6
   21730:	fa5f f58a 	uxtb.w	r5, sl
   21734:	db2d      	blt.n	21792 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   21736:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2173a:	f840 2c04 	str.w	r2, [r0, #-4]
}
   2173e:	b007      	add	sp, #28
   21740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21744:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   21746:	f04f 0c00 	mov.w	ip, #0
   2174a:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   2174e:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   21750:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   21754:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   21756:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   2175a:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   2175e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   21762:	fba7 ab06 	umull	sl, fp, r7, r6
   21766:	eb1a 0601 	adds.w	r6, sl, r1
   2176a:	f10c 0c01 	add.w	ip, ip, #1
   2176e:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   21772:	fa4f fa8c 	sxtb.w	sl, ip
   21776:	bf2c      	ite	cs
   21778:	2201      	movcs	r2, #1
   2177a:	2200      	movcc	r2, #0
   2177c:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   2177e:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   21780:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   21782:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   21784:	dde4      	ble.n	21750 <uECC_vli_mult+0x52>
		result[k] = r0;
   21786:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   2178a:	463a      	mov	r2, r7
   2178c:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   2178e:	4674      	mov	r4, lr
   21790:	e7bd      	b.n	2170e <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   21792:	3501      	adds	r5, #1
   21794:	9900      	ldr	r1, [sp, #0]
   21796:	9e01      	ldr	r6, [sp, #4]
   21798:	fa4f fc85 	sxtb.w	ip, r5
   2179c:	ebae 0b0c 	sub.w	fp, lr, ip
   217a0:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   217a4:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   217a8:	4621      	mov	r1, r4
   217aa:	2400      	movs	r4, #0
   217ac:	459c      	cmp	ip, r3
   217ae:	db05      	blt.n	217bc <uECC_vli_mult+0xbe>
		result[k] = r0;
   217b0:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   217b4:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   217b8:	460a      	mov	r2, r1
   217ba:	e7b3      	b.n	21724 <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   217bc:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   217c0:	f855 7b04 	ldr.w	r7, [r5], #4
   217c4:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   217c8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   217cc:	fba7 6706 	umull	r6, r7, r7, r6
   217d0:	eb16 0801 	adds.w	r8, r6, r1
   217d4:	eb57 0902 	adcs.w	r9, r7, r2
   217d8:	bf2c      	ite	cs
   217da:	2201      	movcs	r2, #1
   217dc:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   217de:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   217e2:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   217e4:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   217e6:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   217e8:	fa4f fc8c 	sxtb.w	ip, ip
   217ec:	e7de      	b.n	217ac <uECC_vli_mult+0xae>

000217ee <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   217ee:	2300      	movs	r3, #0
{
   217f0:	b510      	push	{r4, lr}
		 vli[i] = 0;
   217f2:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   217f4:	b25a      	sxtb	r2, r3
   217f6:	4291      	cmp	r1, r2
   217f8:	dc00      	bgt.n	217fc <uECC_vli_clear+0xe>
}
   217fa:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   217fc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   21800:	3301      	adds	r3, #1
   21802:	e7f7      	b.n	217f4 <uECC_vli_clear+0x6>

00021804 <uECC_vli_isZero>:
{
   21804:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   21806:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   21808:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   2180a:	b25c      	sxtb	r4, r3
   2180c:	42a1      	cmp	r1, r4
   2180e:	dc03      	bgt.n	21818 <uECC_vli_isZero+0x14>
}
   21810:	fab2 f082 	clz	r0, r2
   21814:	0940      	lsrs	r0, r0, #5
   21816:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   21818:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2181c:	3301      	adds	r3, #1
   2181e:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   21820:	e7f3      	b.n	2180a <uECC_vli_isZero+0x6>

00021822 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   21822:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   21824:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   21826:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2182a:	f001 011f 	and.w	r1, r1, #31
   2182e:	fa03 f101 	lsl.w	r1, r3, r1
}
   21832:	4008      	ands	r0, r1
   21834:	4770      	bx	lr

00021836 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   21836:	3901      	subs	r1, #1
   21838:	b24b      	sxtb	r3, r1
{
   2183a:	4602      	mov	r2, r0
   2183c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   21840:	2b00      	cmp	r3, #0
   21842:	da03      	bge.n	2184c <uECC_vli_numBits+0x16>
	return (i + 1);
   21844:	3301      	adds	r3, #1
   21846:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   21848:	b938      	cbnz	r0, 2185a <uECC_vli_numBits+0x24>
   2184a:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2184c:	f851 0904 	ldr.w	r0, [r1], #-4
   21850:	2800      	cmp	r0, #0
   21852:	d1f7      	bne.n	21844 <uECC_vli_numBits+0xe>
   21854:	3b01      	subs	r3, #1
   21856:	b25b      	sxtb	r3, r3
   21858:	e7f2      	b.n	21840 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   2185a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2185e:	3b01      	subs	r3, #1
   21860:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   21864:	2300      	movs	r3, #0
   21866:	b922      	cbnz	r2, 21872 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   21868:	3801      	subs	r0, #1
   2186a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   2186e:	b200      	sxth	r0, r0
}
   21870:	4770      	bx	lr
		digit >>= 1;
   21872:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   21874:	3301      	adds	r3, #1
   21876:	e7f6      	b.n	21866 <uECC_vli_numBits+0x30>

00021878 <uECC_vli_set>:
{
   21878:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   2187a:	2300      	movs	r3, #0
   2187c:	b25c      	sxtb	r4, r3
   2187e:	42a2      	cmp	r2, r4
   21880:	dc00      	bgt.n	21884 <uECC_vli_set+0xc>
}
   21882:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   21884:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   21888:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2188c:	3301      	adds	r3, #1
   2188e:	e7f5      	b.n	2187c <uECC_vli_set+0x4>

00021890 <uECC_vli_cmp_unsafe>:
{
   21890:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   21892:	3a01      	subs	r2, #1
   21894:	b253      	sxtb	r3, r2
   21896:	009a      	lsls	r2, r3, #2
   21898:	2b00      	cmp	r3, #0
   2189a:	da01      	bge.n	218a0 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   2189c:	2000      	movs	r0, #0
}
   2189e:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   218a0:	5885      	ldr	r5, [r0, r2]
   218a2:	588c      	ldr	r4, [r1, r2]
   218a4:	42a5      	cmp	r5, r4
   218a6:	d805      	bhi.n	218b4 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   218a8:	f1a2 0204 	sub.w	r2, r2, #4
   218ac:	d304      	bcc.n	218b8 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   218ae:	3b01      	subs	r3, #1
   218b0:	b25b      	sxtb	r3, r3
   218b2:	e7f1      	b.n	21898 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   218b4:	2001      	movs	r0, #1
   218b6:	e7f2      	b.n	2189e <uECC_vli_cmp_unsafe+0xe>
			return -1;
   218b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   218bc:	e7ef      	b.n	2189e <uECC_vli_cmp_unsafe+0xe>

000218be <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   218be:	3a01      	subs	r2, #1
   218c0:	b253      	sxtb	r3, r2
{
   218c2:	b570      	push	{r4, r5, r6, lr}
   218c4:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   218c6:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   218c8:	2b00      	cmp	r3, #0
   218ca:	da03      	bge.n	218d4 <uECC_vli_equal+0x16>
}
   218cc:	1e20      	subs	r0, r4, #0
   218ce:	bf18      	it	ne
   218d0:	2001      	movne	r0, #1
   218d2:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   218d4:	5885      	ldr	r5, [r0, r2]
   218d6:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   218d8:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   218da:	4075      	eors	r5, r6
   218dc:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   218de:	b25b      	sxtb	r3, r3
   218e0:	3a04      	subs	r2, #4
   218e2:	e7f1      	b.n	218c8 <uECC_vli_equal+0xa>

000218e4 <uECC_vli_sub>:
{
   218e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   218e6:	2400      	movs	r4, #0
{
   218e8:	4606      	mov	r6, r0
   218ea:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   218ec:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   218ee:	b265      	sxtb	r5, r4
   218f0:	45ac      	cmp	ip, r5
   218f2:	dc00      	bgt.n	218f6 <uECC_vli_sub+0x12>
}
   218f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   218f6:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   218fa:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   218fe:	1a3d      	subs	r5, r7, r0
   21900:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   21902:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   21904:	bf34      	ite	cc
   21906:	2701      	movcc	r7, #1
   21908:	2700      	movcs	r7, #0
		result[i] = diff;
   2190a:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2190e:	bf18      	it	ne
   21910:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   21912:	3401      	adds	r4, #1
   21914:	e7eb      	b.n	218ee <uECC_vli_sub+0xa>

00021916 <uECC_vli_modAdd>:
{
   21916:	b570      	push	{r4, r5, r6, lr}
   21918:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   2191c:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2191e:	4633      	mov	r3, r6
{
   21920:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   21922:	f7ff feab 	bl	2167c <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   21926:	b930      	cbnz	r0, 21936 <uECC_vli_modAdd+0x20>
   21928:	4632      	mov	r2, r6
   2192a:	4621      	mov	r1, r4
   2192c:	4628      	mov	r0, r5
   2192e:	f7ff ffaf 	bl	21890 <uECC_vli_cmp_unsafe>
   21932:	2801      	cmp	r0, #1
   21934:	d007      	beq.n	21946 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   21936:	4633      	mov	r3, r6
   21938:	462a      	mov	r2, r5
   2193a:	4621      	mov	r1, r4
   2193c:	4620      	mov	r0, r4
}
   2193e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   21942:	f7ff bfcf 	b.w	218e4 <uECC_vli_sub>
}
   21946:	bd70      	pop	{r4, r5, r6, pc}

00021948 <uECC_vli_modSub>:
{
   21948:	b570      	push	{r4, r5, r6, lr}
   2194a:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   2194e:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   21950:	4633      	mov	r3, r6
{
   21952:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   21954:	f7ff ffc6 	bl	218e4 <uECC_vli_sub>
	if (l_borrow) {
   21958:	b138      	cbz	r0, 2196a <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   2195a:	4633      	mov	r3, r6
   2195c:	462a      	mov	r2, r5
   2195e:	4621      	mov	r1, r4
   21960:	4620      	mov	r0, r4
}
   21962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   21966:	f7ff be89 	b.w	2167c <uECC_vli_add>
}
   2196a:	bd70      	pop	{r4, r5, r6, pc}

0002196c <uECC_vli_mmod>:
{
   2196c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21970:	b0a5      	sub	sp, #148	; 0x94
   21972:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   21974:	ab14      	add	r3, sp, #80	; 0x50
   21976:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   2197a:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   2197c:	4629      	mov	r1, r5
   2197e:	4610      	mov	r0, r2
{
   21980:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   21982:	f7ff ff58 	bl	21836 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   21986:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   2198a:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2198c:	2c00      	cmp	r4, #0
   2198e:	4621      	mov	r1, r4
   21990:	bfb8      	it	lt
   21992:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   21996:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   21998:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2199c:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   219a0:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   219a2:	f004 071f 	and.w	r7, r4, #31
   219a6:	bf58      	it	pl
   219a8:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   219aa:	f7ff ff20 	bl	217ee <uECC_vli_clear>
	if (bit_shift > 0) {
   219ae:	2f00      	cmp	r7, #0
   219b0:	b208      	sxth	r0, r1
   219b2:	dd2b      	ble.n	21a0c <uECC_vli_mmod+0xa0>
   219b4:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   219b6:	2200      	movs	r2, #0
   219b8:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   219bc:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   219c0:	4613      	mov	r3, r2
   219c2:	429d      	cmp	r5, r3
   219c4:	d817      	bhi.n	219f6 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   219c6:	006b      	lsls	r3, r5, #1
   219c8:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   219ca:	ab04      	add	r3, sp, #16
   219cc:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   219d0:	1e6f      	subs	r7, r5, #1
   219d2:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   219d4:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   219d6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   219da:	2c00      	cmp	r4, #0
   219dc:	da54      	bge.n	21a88 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   219de:	ab24      	add	r3, sp, #144	; 0x90
   219e0:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   219e4:	462a      	mov	r2, r5
   219e6:	f856 1c88 	ldr.w	r1, [r6, #-136]
   219ea:	4640      	mov	r0, r8
   219ec:	f7ff ff44 	bl	21878 <uECC_vli_set>
}
   219f0:	b025      	add	sp, #148	; 0x94
   219f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   219f6:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   219fa:	fa0c f007 	lsl.w	r0, ip, r7
   219fe:	4302      	orrs	r2, r0
   21a00:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   21a04:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   21a06:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   21a0a:	e7da      	b.n	219c2 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   21a0c:	ab04      	add	r3, sp, #16
   21a0e:	462a      	mov	r2, r5
   21a10:	4631      	mov	r1, r6
   21a12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   21a16:	f7ff ff2f 	bl	21878 <uECC_vli_set>
   21a1a:	e7d4      	b.n	219c6 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   21a1c:	fa0f fe82 	sxth.w	lr, r2
   21a20:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   21a24:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   21a28:	ab24      	add	r3, sp, #144	; 0x90
   21a2a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   21a2e:	3001      	adds	r0, #1
   21a30:	f852 3c80 	ldr.w	r3, [r2, #-128]
   21a34:	440b      	add	r3, r1
   21a36:	ebbb 0303 	subs.w	r3, fp, r3
   21a3a:	bf34      	ite	cc
   21a3c:	2201      	movcc	r2, #1
   21a3e:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   21a40:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   21a42:	bf18      	it	ne
   21a44:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   21a46:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   21a4a:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   21a4e:	9b01      	ldr	r3, [sp, #4]
   21a50:	b242      	sxtb	r2, r0
   21a52:	429a      	cmp	r2, r3
   21a54:	dbe2      	blt.n	21a1c <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   21a56:	1a73      	subs	r3, r6, r1
   21a58:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   21a5a:	4629      	mov	r1, r5
   21a5c:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   21a5e:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   21a60:	f7ff fe24 	bl	216ac <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   21a64:	ab24      	add	r3, sp, #144	; 0x90
   21a66:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   21a6a:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   21a6c:	f853 2c80 	ldr.w	r2, [r3, #-128]
   21a70:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   21a74:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   21a76:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   21a7a:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   21a7c:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   21a80:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   21a82:	f7ff fe13 	bl	216ac <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   21a86:	e7a8      	b.n	219da <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   21a88:	ab24      	add	r3, sp, #144	; 0x90
   21a8a:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   21a8c:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   21a90:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   21a92:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   21a96:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   21a9a:	e7d8      	b.n	21a4e <uECC_vli_mmod+0xe2>

00021a9c <uECC_vli_modMult_fast>:
{
   21a9c:	b530      	push	{r4, r5, lr}
   21a9e:	461c      	mov	r4, r3
   21aa0:	b091      	sub	sp, #68	; 0x44
   21aa2:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   21aa4:	f993 3000 	ldrsb.w	r3, [r3]
   21aa8:	4668      	mov	r0, sp
   21aaa:	f7ff fe28 	bl	216fe <uECC_vli_mult>
	curve->mmod_fast(result, product);
   21aae:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   21ab2:	4669      	mov	r1, sp
   21ab4:	4628      	mov	r0, r5
   21ab6:	4798      	blx	r3
}
   21ab8:	b011      	add	sp, #68	; 0x44
   21aba:	bd30      	pop	{r4, r5, pc}

00021abc <uECC_vli_modSquare_fast>:
{
   21abc:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   21abe:	460a      	mov	r2, r1
   21ac0:	f7ff bfec 	b.w	21a9c <uECC_vli_modMult_fast>

00021ac4 <double_jacobian_default>:
{
   21ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   21ac8:	f993 6000 	ldrsb.w	r6, [r3]
{
   21acc:	b092      	sub	sp, #72	; 0x48
   21ace:	4604      	mov	r4, r0
   21ad0:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   21ad2:	4610      	mov	r0, r2
   21ad4:	4631      	mov	r1, r6
{
   21ad6:	4615      	mov	r5, r2
   21ad8:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   21ada:	f7ff fe93 	bl	21804 <uECC_vli_isZero>
   21ade:	2800      	cmp	r0, #0
   21ae0:	f040 8091 	bne.w	21c06 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   21ae4:	463a      	mov	r2, r7
   21ae6:	4649      	mov	r1, r9
   21ae8:	a802      	add	r0, sp, #8
   21aea:	f7ff ffe7 	bl	21abc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   21aee:	463b      	mov	r3, r7
   21af0:	aa02      	add	r2, sp, #8
   21af2:	4621      	mov	r1, r4
   21af4:	a80a      	add	r0, sp, #40	; 0x28
   21af6:	f7ff ffd1 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   21afa:	a902      	add	r1, sp, #8
   21afc:	4608      	mov	r0, r1
   21afe:	463a      	mov	r2, r7
   21b00:	f7ff ffdc 	bl	21abc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   21b04:	463b      	mov	r3, r7
   21b06:	462a      	mov	r2, r5
   21b08:	4649      	mov	r1, r9
   21b0a:	4648      	mov	r0, r9
   21b0c:	f7ff ffc6 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   21b10:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   21b14:	463a      	mov	r2, r7
   21b16:	4629      	mov	r1, r5
   21b18:	4628      	mov	r0, r5
   21b1a:	f7ff ffcf 	bl	21abc <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   21b1e:	4643      	mov	r3, r8
   21b20:	462a      	mov	r2, r5
   21b22:	4621      	mov	r1, r4
   21b24:	4620      	mov	r0, r4
   21b26:	9600      	str	r6, [sp, #0]
   21b28:	f7ff fef5 	bl	21916 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   21b2c:	4643      	mov	r3, r8
   21b2e:	462a      	mov	r2, r5
   21b30:	4629      	mov	r1, r5
   21b32:	4628      	mov	r0, r5
   21b34:	9600      	str	r6, [sp, #0]
   21b36:	f7ff feee 	bl	21916 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   21b3a:	4643      	mov	r3, r8
   21b3c:	462a      	mov	r2, r5
   21b3e:	4621      	mov	r1, r4
   21b40:	4628      	mov	r0, r5
   21b42:	9600      	str	r6, [sp, #0]
   21b44:	f7ff ff00 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   21b48:	463b      	mov	r3, r7
   21b4a:	462a      	mov	r2, r5
   21b4c:	4621      	mov	r1, r4
   21b4e:	4620      	mov	r0, r4
   21b50:	f7ff ffa4 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   21b54:	4643      	mov	r3, r8
   21b56:	4622      	mov	r2, r4
   21b58:	4621      	mov	r1, r4
   21b5a:	4628      	mov	r0, r5
   21b5c:	9600      	str	r6, [sp, #0]
   21b5e:	f7ff feda 	bl	21916 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   21b62:	4643      	mov	r3, r8
   21b64:	9600      	str	r6, [sp, #0]
   21b66:	462a      	mov	r2, r5
   21b68:	4621      	mov	r1, r4
   21b6a:	4620      	mov	r0, r4
   21b6c:	f7ff fed3 	bl	21916 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   21b70:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   21b72:	07db      	lsls	r3, r3, #31
   21b74:	d54a      	bpl.n	21c0c <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   21b76:	4633      	mov	r3, r6
   21b78:	4642      	mov	r2, r8
   21b7a:	4621      	mov	r1, r4
   21b7c:	4620      	mov	r0, r4
   21b7e:	f7ff fd7d 	bl	2167c <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   21b82:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   21b84:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   21b86:	4620      	mov	r0, r4
   21b88:	f7ff fd90 	bl	216ac <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   21b8c:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   21b90:	3b01      	subs	r3, #1
   21b92:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   21b96:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   21b9a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   21b9e:	463a      	mov	r2, r7
   21ba0:	4621      	mov	r1, r4
   21ba2:	4628      	mov	r0, r5
   21ba4:	f7ff ff8a 	bl	21abc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   21ba8:	4643      	mov	r3, r8
   21baa:	aa0a      	add	r2, sp, #40	; 0x28
   21bac:	4629      	mov	r1, r5
   21bae:	4628      	mov	r0, r5
   21bb0:	9600      	str	r6, [sp, #0]
   21bb2:	f7ff fec9 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   21bb6:	4643      	mov	r3, r8
   21bb8:	aa0a      	add	r2, sp, #40	; 0x28
   21bba:	4629      	mov	r1, r5
   21bbc:	4628      	mov	r0, r5
   21bbe:	9600      	str	r6, [sp, #0]
   21bc0:	f7ff fec2 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   21bc4:	a90a      	add	r1, sp, #40	; 0x28
   21bc6:	4608      	mov	r0, r1
   21bc8:	4643      	mov	r3, r8
   21bca:	462a      	mov	r2, r5
   21bcc:	9600      	str	r6, [sp, #0]
   21bce:	f7ff febb 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   21bd2:	463b      	mov	r3, r7
   21bd4:	aa0a      	add	r2, sp, #40	; 0x28
   21bd6:	4621      	mov	r1, r4
   21bd8:	4620      	mov	r0, r4
   21bda:	f7ff ff5f 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   21bde:	aa02      	add	r2, sp, #8
   21be0:	4643      	mov	r3, r8
   21be2:	4610      	mov	r0, r2
   21be4:	4621      	mov	r1, r4
   21be6:	9600      	str	r6, [sp, #0]
   21be8:	f7ff feae 	bl	21948 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   21bec:	4632      	mov	r2, r6
   21bee:	4629      	mov	r1, r5
   21bf0:	4620      	mov	r0, r4
   21bf2:	f7ff fe41 	bl	21878 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   21bf6:	4649      	mov	r1, r9
   21bf8:	4628      	mov	r0, r5
   21bfa:	f7ff fe3d 	bl	21878 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   21bfe:	a902      	add	r1, sp, #8
   21c00:	4648      	mov	r0, r9
   21c02:	f7ff fe39 	bl	21878 <uECC_vli_set>
}
   21c06:	b012      	add	sp, #72	; 0x48
   21c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   21c0c:	4631      	mov	r1, r6
   21c0e:	4620      	mov	r0, r4
   21c10:	f7ff fd4c 	bl	216ac <uECC_vli_rshift1>
   21c14:	e7c3      	b.n	21b9e <double_jacobian_default+0xda>

00021c16 <x_side_default>:
{
   21c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c1a:	4615      	mov	r5, r2
   21c1c:	b08a      	sub	sp, #40	; 0x28
   21c1e:	4604      	mov	r4, r0
   21c20:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   21c22:	221c      	movs	r2, #28
   21c24:	2100      	movs	r1, #0
   21c26:	a803      	add	r0, sp, #12
   21c28:	f000 fda5 	bl	22776 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   21c2c:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   21c2e:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   21c32:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   21c34:	462a      	mov	r2, r5
   21c36:	4631      	mov	r1, r6
   21c38:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   21c3a:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   21c3c:	f7ff ff3e 	bl	21abc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   21c40:	463b      	mov	r3, r7
   21c42:	aa02      	add	r2, sp, #8
   21c44:	4621      	mov	r1, r4
   21c46:	4620      	mov	r0, r4
   21c48:	f8cd 8000 	str.w	r8, [sp]
   21c4c:	f7ff fe7c 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   21c50:	462b      	mov	r3, r5
   21c52:	4632      	mov	r2, r6
   21c54:	4621      	mov	r1, r4
   21c56:	4620      	mov	r0, r4
   21c58:	f7ff ff20 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   21c5c:	f8cd 8000 	str.w	r8, [sp]
   21c60:	463b      	mov	r3, r7
   21c62:	f105 0284 	add.w	r2, r5, #132	; 0x84
   21c66:	4621      	mov	r1, r4
   21c68:	4620      	mov	r0, r4
   21c6a:	f7ff fe54 	bl	21916 <uECC_vli_modAdd>
}
   21c6e:	b00a      	add	sp, #40	; 0x28
   21c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021c74 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   21c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21c78:	b09a      	sub	sp, #104	; 0x68
   21c7a:	4616      	mov	r6, r2
   21c7c:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   21c80:	4644      	mov	r4, r8
{
   21c82:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   21c84:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   21c88:	9500      	str	r5, [sp, #0]
{
   21c8a:	4607      	mov	r7, r0
   21c8c:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   21c8e:	4623      	mov	r3, r4
   21c90:	4602      	mov	r2, r0
   21c92:	4631      	mov	r1, r6
   21c94:	a802      	add	r0, sp, #8
   21c96:	f7ff fe57 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   21c9a:	a902      	add	r1, sp, #8
   21c9c:	4642      	mov	r2, r8
   21c9e:	4608      	mov	r0, r1
   21ca0:	f7ff ff0c 	bl	21abc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   21ca4:	4643      	mov	r3, r8
   21ca6:	aa02      	add	r2, sp, #8
   21ca8:	4639      	mov	r1, r7
   21caa:	4638      	mov	r0, r7
   21cac:	f7ff fef6 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   21cb0:	4643      	mov	r3, r8
   21cb2:	aa02      	add	r2, sp, #8
   21cb4:	4631      	mov	r1, r6
   21cb6:	4630      	mov	r0, r6
   21cb8:	f7ff fef0 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   21cbc:	4623      	mov	r3, r4
   21cbe:	4652      	mov	r2, sl
   21cc0:	4649      	mov	r1, r9
   21cc2:	a802      	add	r0, sp, #8
   21cc4:	9500      	str	r5, [sp, #0]
   21cc6:	f7ff fe26 	bl	21916 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   21cca:	4623      	mov	r3, r4
   21ccc:	4652      	mov	r2, sl
   21cce:	4649      	mov	r1, r9
   21cd0:	4648      	mov	r0, r9
   21cd2:	9500      	str	r5, [sp, #0]
   21cd4:	f7ff fe38 	bl	21948 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   21cd8:	4623      	mov	r3, r4
   21cda:	463a      	mov	r2, r7
   21cdc:	4631      	mov	r1, r6
   21cde:	a80a      	add	r0, sp, #40	; 0x28
   21ce0:	9500      	str	r5, [sp, #0]
   21ce2:	f7ff fe31 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   21ce6:	4643      	mov	r3, r8
   21ce8:	aa0a      	add	r2, sp, #40	; 0x28
   21cea:	4651      	mov	r1, sl
   21cec:	4650      	mov	r0, sl
   21cee:	f7ff fed5 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   21cf2:	4623      	mov	r3, r4
   21cf4:	4632      	mov	r2, r6
   21cf6:	4639      	mov	r1, r7
   21cf8:	a80a      	add	r0, sp, #40	; 0x28
   21cfa:	9500      	str	r5, [sp, #0]
   21cfc:	f7ff fe0b 	bl	21916 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   21d00:	4642      	mov	r2, r8
   21d02:	4649      	mov	r1, r9
   21d04:	4630      	mov	r0, r6
   21d06:	f7ff fed9 	bl	21abc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   21d0a:	4623      	mov	r3, r4
   21d0c:	aa0a      	add	r2, sp, #40	; 0x28
   21d0e:	4631      	mov	r1, r6
   21d10:	4630      	mov	r0, r6
   21d12:	9500      	str	r5, [sp, #0]
   21d14:	f7ff fe18 	bl	21948 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   21d18:	4623      	mov	r3, r4
   21d1a:	4632      	mov	r2, r6
   21d1c:	4639      	mov	r1, r7
   21d1e:	a812      	add	r0, sp, #72	; 0x48
   21d20:	9500      	str	r5, [sp, #0]
   21d22:	f7ff fe11 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   21d26:	4643      	mov	r3, r8
   21d28:	aa12      	add	r2, sp, #72	; 0x48
   21d2a:	4649      	mov	r1, r9
   21d2c:	4648      	mov	r0, r9
   21d2e:	f7ff feb5 	bl	21a9c <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   21d32:	4623      	mov	r3, r4
   21d34:	4652      	mov	r2, sl
   21d36:	4649      	mov	r1, r9
   21d38:	4648      	mov	r0, r9
   21d3a:	9500      	str	r5, [sp, #0]
   21d3c:	f7ff fe04 	bl	21948 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   21d40:	4642      	mov	r2, r8
   21d42:	a902      	add	r1, sp, #8
   21d44:	a812      	add	r0, sp, #72	; 0x48
   21d46:	f7ff feb9 	bl	21abc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   21d4a:	a912      	add	r1, sp, #72	; 0x48
   21d4c:	4623      	mov	r3, r4
   21d4e:	aa0a      	add	r2, sp, #40	; 0x28
   21d50:	4608      	mov	r0, r1
   21d52:	9500      	str	r5, [sp, #0]
   21d54:	f7ff fdf8 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   21d58:	4623      	mov	r3, r4
   21d5a:	463a      	mov	r2, r7
   21d5c:	a912      	add	r1, sp, #72	; 0x48
   21d5e:	a80a      	add	r0, sp, #40	; 0x28
   21d60:	9500      	str	r5, [sp, #0]
   21d62:	f7ff fdf1 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   21d66:	a90a      	add	r1, sp, #40	; 0x28
   21d68:	4643      	mov	r3, r8
   21d6a:	aa02      	add	r2, sp, #8
   21d6c:	4608      	mov	r0, r1
   21d6e:	f7ff fe95 	bl	21a9c <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   21d72:	4623      	mov	r3, r4
   21d74:	4652      	mov	r2, sl
   21d76:	a90a      	add	r1, sp, #40	; 0x28
   21d78:	4650      	mov	r0, sl
   21d7a:	9500      	str	r5, [sp, #0]
   21d7c:	f7ff fde4 	bl	21948 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   21d80:	462a      	mov	r2, r5
   21d82:	a912      	add	r1, sp, #72	; 0x48
   21d84:	4638      	mov	r0, r7
   21d86:	f7ff fd77 	bl	21878 <uECC_vli_set>
}
   21d8a:	b01a      	add	sp, #104	; 0x68
   21d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021d90 <uECC_vli_modInv>:
{
   21d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d92:	460f      	mov	r7, r1
   21d94:	b0a1      	sub	sp, #132	; 0x84
   21d96:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   21d98:	4619      	mov	r1, r3
   21d9a:	4638      	mov	r0, r7
{
   21d9c:	4615      	mov	r5, r2
   21d9e:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   21da0:	f7ff fd30 	bl	21804 <uECC_vli_isZero>
   21da4:	b120      	cbz	r0, 21db0 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   21da6:	4630      	mov	r0, r6
   21da8:	f7ff fd21 	bl	217ee <uECC_vli_clear>
}
   21dac:	b021      	add	sp, #132	; 0x84
   21dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   21db0:	4622      	mov	r2, r4
   21db2:	4639      	mov	r1, r7
   21db4:	4668      	mov	r0, sp
   21db6:	f7ff fd5f 	bl	21878 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   21dba:	4629      	mov	r1, r5
   21dbc:	a808      	add	r0, sp, #32
   21dbe:	f7ff fd5b 	bl	21878 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   21dc2:	a810      	add	r0, sp, #64	; 0x40
   21dc4:	4621      	mov	r1, r4
   21dc6:	f7ff fd12 	bl	217ee <uECC_vli_clear>
	u[0] = 1;
   21dca:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   21dcc:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   21dce:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   21dd0:	f7ff fd0d 	bl	217ee <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   21dd4:	4622      	mov	r2, r4
   21dd6:	a908      	add	r1, sp, #32
   21dd8:	4668      	mov	r0, sp
   21dda:	f7ff fd59 	bl	21890 <uECC_vli_cmp_unsafe>
   21dde:	b928      	cbnz	r0, 21dec <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   21de0:	4622      	mov	r2, r4
   21de2:	a910      	add	r1, sp, #64	; 0x40
   21de4:	4630      	mov	r0, r6
   21de6:	f7ff fd47 	bl	21878 <uECC_vli_set>
   21dea:	e7df      	b.n	21dac <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   21dec:	9b00      	ldr	r3, [sp, #0]
   21dee:	07da      	lsls	r2, r3, #31
   21df0:	d409      	bmi.n	21e06 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   21df2:	4621      	mov	r1, r4
   21df4:	4668      	mov	r0, sp
   21df6:	f7ff fc59 	bl	216ac <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   21dfa:	4622      	mov	r2, r4
   21dfc:	4629      	mov	r1, r5
   21dfe:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   21e00:	f7ff fc61 	bl	216c6 <vli_modInv_update>
   21e04:	e7e6      	b.n	21dd4 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   21e06:	9b08      	ldr	r3, [sp, #32]
   21e08:	07db      	lsls	r3, r3, #31
   21e0a:	d407      	bmi.n	21e1c <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   21e0c:	4621      	mov	r1, r4
   21e0e:	a808      	add	r0, sp, #32
   21e10:	f7ff fc4c 	bl	216ac <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   21e14:	4622      	mov	r2, r4
   21e16:	4629      	mov	r1, r5
   21e18:	a818      	add	r0, sp, #96	; 0x60
   21e1a:	e7f1      	b.n	21e00 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   21e1c:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   21e1e:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   21e20:	dd1c      	ble.n	21e5c <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   21e22:	aa08      	add	r2, sp, #32
   21e24:	4669      	mov	r1, sp
   21e26:	4668      	mov	r0, sp
   21e28:	f7ff fd5c 	bl	218e4 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   21e2c:	4621      	mov	r1, r4
   21e2e:	4668      	mov	r0, sp
   21e30:	f7ff fc3c 	bl	216ac <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   21e34:	4622      	mov	r2, r4
   21e36:	a918      	add	r1, sp, #96	; 0x60
   21e38:	a810      	add	r0, sp, #64	; 0x40
   21e3a:	f7ff fd29 	bl	21890 <uECC_vli_cmp_unsafe>
   21e3e:	2800      	cmp	r0, #0
   21e40:	da05      	bge.n	21e4e <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   21e42:	a910      	add	r1, sp, #64	; 0x40
   21e44:	4623      	mov	r3, r4
   21e46:	462a      	mov	r2, r5
   21e48:	4608      	mov	r0, r1
   21e4a:	f7ff fc17 	bl	2167c <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   21e4e:	a910      	add	r1, sp, #64	; 0x40
   21e50:	4623      	mov	r3, r4
   21e52:	aa18      	add	r2, sp, #96	; 0x60
   21e54:	4608      	mov	r0, r1
   21e56:	f7ff fd45 	bl	218e4 <uECC_vli_sub>
   21e5a:	e7ce      	b.n	21dfa <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   21e5c:	a908      	add	r1, sp, #32
   21e5e:	466a      	mov	r2, sp
   21e60:	4608      	mov	r0, r1
   21e62:	f7ff fd3f 	bl	218e4 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   21e66:	4621      	mov	r1, r4
   21e68:	a808      	add	r0, sp, #32
   21e6a:	f7ff fc1f 	bl	216ac <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   21e6e:	4622      	mov	r2, r4
   21e70:	a910      	add	r1, sp, #64	; 0x40
   21e72:	a818      	add	r0, sp, #96	; 0x60
   21e74:	f7ff fd0c 	bl	21890 <uECC_vli_cmp_unsafe>
   21e78:	2800      	cmp	r0, #0
   21e7a:	da05      	bge.n	21e88 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   21e7c:	a918      	add	r1, sp, #96	; 0x60
   21e7e:	4623      	mov	r3, r4
   21e80:	462a      	mov	r2, r5
   21e82:	4608      	mov	r0, r1
   21e84:	f7ff fbfa 	bl	2167c <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   21e88:	a918      	add	r1, sp, #96	; 0x60
   21e8a:	4623      	mov	r3, r4
   21e8c:	aa10      	add	r2, sp, #64	; 0x40
   21e8e:	4608      	mov	r0, r1
   21e90:	f7ff fd28 	bl	218e4 <uECC_vli_sub>
   21e94:	e7be      	b.n	21e14 <uECC_vli_modInv+0x84>

00021e96 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   21e96:	7809      	ldrb	r1, [r1, #0]
   21e98:	0049      	lsls	r1, r1, #1
   21e9a:	b249      	sxtb	r1, r1
   21e9c:	f7ff bcb2 	b.w	21804 <uECC_vli_isZero>

00021ea0 <apply_z>:
{
   21ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
   21ea2:	4615      	mov	r5, r2
   21ea4:	b089      	sub	sp, #36	; 0x24
   21ea6:	461c      	mov	r4, r3
   21ea8:	4607      	mov	r7, r0
   21eaa:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   21eac:	461a      	mov	r2, r3
   21eae:	4629      	mov	r1, r5
   21eb0:	4668      	mov	r0, sp
   21eb2:	f7ff fe03 	bl	21abc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   21eb6:	4623      	mov	r3, r4
   21eb8:	466a      	mov	r2, sp
   21eba:	4639      	mov	r1, r7
   21ebc:	4638      	mov	r0, r7
   21ebe:	f7ff fded 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   21ec2:	4623      	mov	r3, r4
   21ec4:	462a      	mov	r2, r5
   21ec6:	4669      	mov	r1, sp
   21ec8:	4668      	mov	r0, sp
   21eca:	f7ff fde7 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   21ece:	4623      	mov	r3, r4
   21ed0:	466a      	mov	r2, sp
   21ed2:	4631      	mov	r1, r6
   21ed4:	4630      	mov	r0, r6
   21ed6:	f7ff fde1 	bl	21a9c <uECC_vli_modMult_fast>
}
   21eda:	b009      	add	sp, #36	; 0x24
   21edc:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021ede <XYcZ_add>:
{
   21ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21ee2:	b08a      	sub	sp, #40	; 0x28
   21ee4:	4614      	mov	r4, r2
   21ee6:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   21eea:	4655      	mov	r5, sl
{
   21eec:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   21eee:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   21ef2:	9600      	str	r6, [sp, #0]
{
   21ef4:	4680      	mov	r8, r0
   21ef6:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   21ef8:	462b      	mov	r3, r5
   21efa:	4602      	mov	r2, r0
   21efc:	4621      	mov	r1, r4
   21efe:	a802      	add	r0, sp, #8
   21f00:	f7ff fd22 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   21f04:	a902      	add	r1, sp, #8
   21f06:	4652      	mov	r2, sl
   21f08:	4608      	mov	r0, r1
   21f0a:	f7ff fdd7 	bl	21abc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   21f0e:	4653      	mov	r3, sl
   21f10:	aa02      	add	r2, sp, #8
   21f12:	4641      	mov	r1, r8
   21f14:	4640      	mov	r0, r8
   21f16:	f7ff fdc1 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   21f1a:	4653      	mov	r3, sl
   21f1c:	aa02      	add	r2, sp, #8
   21f1e:	4621      	mov	r1, r4
   21f20:	4620      	mov	r0, r4
   21f22:	f7ff fdbb 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   21f26:	462b      	mov	r3, r5
   21f28:	464a      	mov	r2, r9
   21f2a:	4639      	mov	r1, r7
   21f2c:	4638      	mov	r0, r7
   21f2e:	9600      	str	r6, [sp, #0]
   21f30:	f7ff fd0a 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   21f34:	4652      	mov	r2, sl
   21f36:	4639      	mov	r1, r7
   21f38:	a802      	add	r0, sp, #8
   21f3a:	f7ff fdbf 	bl	21abc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   21f3e:	a902      	add	r1, sp, #8
   21f40:	462b      	mov	r3, r5
   21f42:	4642      	mov	r2, r8
   21f44:	4608      	mov	r0, r1
   21f46:	9600      	str	r6, [sp, #0]
   21f48:	f7ff fcfe 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   21f4c:	a902      	add	r1, sp, #8
   21f4e:	462b      	mov	r3, r5
   21f50:	4622      	mov	r2, r4
   21f52:	4608      	mov	r0, r1
   21f54:	9600      	str	r6, [sp, #0]
   21f56:	f7ff fcf7 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   21f5a:	462b      	mov	r3, r5
   21f5c:	4642      	mov	r2, r8
   21f5e:	4621      	mov	r1, r4
   21f60:	4620      	mov	r0, r4
   21f62:	9600      	str	r6, [sp, #0]
   21f64:	f7ff fcf0 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   21f68:	4653      	mov	r3, sl
   21f6a:	4622      	mov	r2, r4
   21f6c:	4649      	mov	r1, r9
   21f6e:	4648      	mov	r0, r9
   21f70:	f7ff fd94 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   21f74:	462b      	mov	r3, r5
   21f76:	aa02      	add	r2, sp, #8
   21f78:	4641      	mov	r1, r8
   21f7a:	4620      	mov	r0, r4
   21f7c:	9600      	str	r6, [sp, #0]
   21f7e:	f7ff fce3 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   21f82:	4653      	mov	r3, sl
   21f84:	4622      	mov	r2, r4
   21f86:	4639      	mov	r1, r7
   21f88:	4638      	mov	r0, r7
   21f8a:	f7ff fd87 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   21f8e:	462b      	mov	r3, r5
   21f90:	464a      	mov	r2, r9
   21f92:	4639      	mov	r1, r7
   21f94:	4638      	mov	r0, r7
   21f96:	9600      	str	r6, [sp, #0]
   21f98:	f7ff fcd6 	bl	21948 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   21f9c:	4632      	mov	r2, r6
   21f9e:	a902      	add	r1, sp, #8
   21fa0:	4620      	mov	r0, r4
   21fa2:	f7ff fc69 	bl	21878 <uECC_vli_set>
}
   21fa6:	b00a      	add	sp, #40	; 0x28
   21fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021fac <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   21fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21fb0:	b0b1      	sub	sp, #196	; 0xc4
   21fb2:	e9cd 0103 	strd	r0, r1, [sp, #12]
   21fb6:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   21fb8:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   21fbc:	a818      	add	r0, sp, #96	; 0x60
{
   21fbe:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   21fc0:	463a      	mov	r2, r7
{
   21fc2:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   21fc4:	f7ff fc58 	bl	21878 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   21fc8:	00bb      	lsls	r3, r7, #2
   21fca:	9305      	str	r3, [sp, #20]
   21fcc:	9b04      	ldr	r3, [sp, #16]
   21fce:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   21fd2:	4619      	mov	r1, r3
   21fd4:	a828      	add	r0, sp, #160	; 0xa0
   21fd6:	9302      	str	r3, [sp, #8]
   21fd8:	f7ff fc4e 	bl	21878 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   21fdc:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   21fe0:	2e00      	cmp	r6, #0
   21fe2:	f000 8088 	beq.w	220f6 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   21fe6:	462a      	mov	r2, r5
   21fe8:	4631      	mov	r1, r6
   21fea:	a808      	add	r0, sp, #32
   21fec:	f7ff fc44 	bl	21878 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   21ff0:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   21ff4:	462a      	mov	r2, r5
   21ff6:	a918      	add	r1, sp, #96	; 0x60
   21ff8:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   21ffa:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   21ffe:	f7ff fc3b 	bl	21878 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   22002:	a928      	add	r1, sp, #160	; 0xa0
   22004:	4648      	mov	r0, r9
   22006:	f7ff fc37 	bl	21878 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   2200a:	4623      	mov	r3, r4
   2200c:	aa08      	add	r2, sp, #32
   2200e:	a928      	add	r1, sp, #160	; 0xa0
   22010:	a818      	add	r0, sp, #96	; 0x60
   22012:	f7ff ff45 	bl	21ea0 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   22016:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   2201a:	4623      	mov	r3, r4
   2201c:	aa08      	add	r2, sp, #32
   2201e:	a928      	add	r1, sp, #160	; 0xa0
   22020:	a818      	add	r0, sp, #96	; 0x60
   22022:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   22024:	4623      	mov	r3, r4
   22026:	aa08      	add	r2, sp, #32
   22028:	4649      	mov	r1, r9
   2202a:	4640      	mov	r0, r8
   2202c:	f7ff ff38 	bl	21ea0 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   22030:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   22034:	3d02      	subs	r5, #2
   22036:	b22d      	sxth	r5, r5
   22038:	2d00      	cmp	r5, #0
   2203a:	dc63      	bgt.n	22104 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2203c:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   22040:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   22042:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   22046:	ab10      	add	r3, sp, #64	; 0x40
   22048:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   2204c:	43ed      	mvns	r5, r5
   2204e:	ab20      	add	r3, sp, #128	; 0x80
   22050:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   22054:	f005 0501 	and.w	r5, r5, #1
   22058:	ab10      	add	r3, sp, #64	; 0x40
   2205a:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   2205e:	ab20      	add	r3, sp, #128	; 0x80
   22060:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   22064:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   22068:	462b      	mov	r3, r5
   2206a:	464a      	mov	r2, r9
   2206c:	4631      	mov	r1, r6
   2206e:	4640      	mov	r0, r8
   22070:	f7ff fe00 	bl	21c74 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   22074:	4653      	mov	r3, sl
   22076:	aa10      	add	r2, sp, #64	; 0x40
   22078:	a918      	add	r1, sp, #96	; 0x60
   2207a:	a808      	add	r0, sp, #32
   2207c:	9700      	str	r7, [sp, #0]
   2207e:	f7ff fc63 	bl	21948 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   22082:	a908      	add	r1, sp, #32
   22084:	4623      	mov	r3, r4
   22086:	4632      	mov	r2, r6
   22088:	4608      	mov	r0, r1
   2208a:	f7ff fd07 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   2208e:	a908      	add	r1, sp, #32
   22090:	9a04      	ldr	r2, [sp, #16]
   22092:	4623      	mov	r3, r4
   22094:	4608      	mov	r0, r1
   22096:	f7ff fd01 	bl	21a9c <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2209a:	a908      	add	r1, sp, #32
   2209c:	463b      	mov	r3, r7
   2209e:	4652      	mov	r2, sl
   220a0:	4608      	mov	r0, r1
   220a2:	f7ff fe75 	bl	21d90 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   220a6:	a908      	add	r1, sp, #32
   220a8:	9a02      	ldr	r2, [sp, #8]
   220aa:	4623      	mov	r3, r4
   220ac:	4608      	mov	r0, r1
   220ae:	f7ff fcf5 	bl	21a9c <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   220b2:	a908      	add	r1, sp, #32
   220b4:	4623      	mov	r3, r4
   220b6:	4642      	mov	r2, r8
   220b8:	4608      	mov	r0, r1
   220ba:	f7ff fcef 	bl	21a9c <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   220be:	9400      	str	r4, [sp, #0]
   220c0:	4633      	mov	r3, r6
   220c2:	4642      	mov	r2, r8
   220c4:	4629      	mov	r1, r5
   220c6:	4648      	mov	r0, r9
   220c8:	f7ff ff09 	bl	21ede <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   220cc:	4623      	mov	r3, r4
   220ce:	aa08      	add	r2, sp, #32
   220d0:	a920      	add	r1, sp, #128	; 0x80
   220d2:	a810      	add	r0, sp, #64	; 0x40
   220d4:	f7ff fee4 	bl	21ea0 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   220d8:	9803      	ldr	r0, [sp, #12]
   220da:	463a      	mov	r2, r7
   220dc:	a910      	add	r1, sp, #64	; 0x40
   220de:	f7ff fbcb 	bl	21878 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   220e2:	9b03      	ldr	r3, [sp, #12]
   220e4:	9c05      	ldr	r4, [sp, #20]
   220e6:	4423      	add	r3, r4
   220e8:	a920      	add	r1, sp, #128	; 0x80
   220ea:	4618      	mov	r0, r3
   220ec:	f7ff fbc4 	bl	21878 <uECC_vli_set>
}
   220f0:	b031      	add	sp, #196	; 0xc4
   220f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   220f6:	4629      	mov	r1, r5
   220f8:	a808      	add	r0, sp, #32
   220fa:	f7ff fb78 	bl	217ee <uECC_vli_clear>
		z[0] = 1;
   220fe:	2301      	movs	r3, #1
   22100:	9308      	str	r3, [sp, #32]
   22102:	e775      	b.n	21ff0 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   22104:	4629      	mov	r1, r5
   22106:	4650      	mov	r0, sl
   22108:	f7ff fb8b 	bl	21822 <uECC_vli_testBit>
   2210c:	fab0 f680 	clz	r6, r0
   22110:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   22112:	f1c6 0101 	rsb	r1, r6, #1
   22116:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   2211a:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   2211e:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   22122:	4633      	mov	r3, r6
   22124:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   22128:	465a      	mov	r2, fp
   2212a:	9400      	str	r4, [sp, #0]
   2212c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   22130:	f7ff fda0 	bl	21c74 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   22134:	9907      	ldr	r1, [sp, #28]
   22136:	9806      	ldr	r0, [sp, #24]
   22138:	9400      	str	r4, [sp, #0]
   2213a:	460b      	mov	r3, r1
   2213c:	4602      	mov	r2, r0
   2213e:	4631      	mov	r1, r6
   22140:	4658      	mov	r0, fp
   22142:	f7ff fecc 	bl	21ede <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   22146:	3d01      	subs	r5, #1
   22148:	e775      	b.n	22036 <EccPoint_mult+0x8a>

0002214a <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   2214a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2214e:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   22152:	f119 081f 	adds.w	r8, r9, #31
{
   22156:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   22158:	bf48      	it	mi
   2215a:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   2215e:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   22160:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   22164:	3524      	adds	r5, #36	; 0x24
   22166:	4601      	mov	r1, r0
{
   22168:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2216a:	4643      	mov	r3, r8
   2216c:	462a      	mov	r2, r5
   2216e:	4630      	mov	r0, r6
   22170:	f7ff fa84 	bl	2167c <uECC_vli_add>
   22174:	4604      	mov	r4, r0
   22176:	b990      	cbnz	r0, 2219e <regularize_k+0x54>
   22178:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   2217c:	da06      	bge.n	2218c <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   2217e:	4649      	mov	r1, r9
   22180:	4630      	mov	r0, r6
   22182:	f7ff fb4e 	bl	21822 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   22186:	1e04      	subs	r4, r0, #0
   22188:	bf18      	it	ne
   2218a:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2218c:	4643      	mov	r3, r8
   2218e:	462a      	mov	r2, r5
   22190:	4631      	mov	r1, r6
   22192:	4638      	mov	r0, r7
   22194:	f7ff fa72 	bl	2167c <uECC_vli_add>

	return carry;
}
   22198:	4620      	mov	r0, r4
   2219a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2219e:	2401      	movs	r4, #1
   221a0:	e7f4      	b.n	2218c <regularize_k+0x42>

000221a2 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   221a2:	b530      	push	{r4, r5, lr}
   221a4:	4614      	mov	r4, r2
   221a6:	b095      	sub	sp, #84	; 0x54
   221a8:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   221aa:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   221ac:	4623      	mov	r3, r4
{
   221ae:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   221b0:	a904      	add	r1, sp, #16
   221b2:	9102      	str	r1, [sp, #8]
   221b4:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   221b6:	f7ff ffc8 	bl	2214a <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   221ba:	fab0 f380 	clz	r3, r0
   221be:	095b      	lsrs	r3, r3, #5
   221c0:	aa14      	add	r2, sp, #80	; 0x50
   221c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   221c6:	8863      	ldrh	r3, [r4, #2]
   221c8:	9401      	str	r4, [sp, #4]
   221ca:	3301      	adds	r3, #1
   221cc:	b21b      	sxth	r3, r3
   221ce:	9300      	str	r3, [sp, #0]
   221d0:	f852 2c48 	ldr.w	r2, [r2, #-72]
   221d4:	2300      	movs	r3, #0
   221d6:	f104 0144 	add.w	r1, r4, #68	; 0x44
   221da:	4628      	mov	r0, r5
   221dc:	f7ff fee6 	bl	21fac <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   221e0:	4621      	mov	r1, r4
   221e2:	4628      	mov	r0, r5
   221e4:	f7ff fe57 	bl	21e96 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   221e8:	fab0 f080 	clz	r0, r0
   221ec:	0940      	lsrs	r0, r0, #5
   221ee:	b015      	add	sp, #84	; 0x54
   221f0:	bd30      	pop	{r4, r5, pc}

000221f2 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   221f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   221f4:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   221f6:	1e4f      	subs	r7, r1, #1
   221f8:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   221fa:	428c      	cmp	r4, r1
   221fc:	f105 0501 	add.w	r5, r5, #1
   22200:	db00      	blt.n	22204 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   22202:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   22204:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   22206:	f023 0603 	bic.w	r6, r3, #3
   2220a:	f003 0303 	and.w	r3, r3, #3
   2220e:	5996      	ldr	r6, [r2, r6]
   22210:	00db      	lsls	r3, r3, #3
   22212:	fa26 f303 	lsr.w	r3, r6, r3
   22216:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   22218:	e7ee      	b.n	221f8 <uECC_vli_nativeToBytes+0x6>

0002221a <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   2221a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2221c:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2221e:	1cd1      	adds	r1, r2, #3
   22220:	bf48      	it	mi
   22222:	1d91      	addmi	r1, r2, #6
   22224:	f341 0187 	sbfx	r1, r1, #2, #8
{
   22228:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2222a:	f7ff fae0 	bl	217ee <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   2222e:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   22230:	1e67      	subs	r7, r4, #1
   22232:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   22234:	42a2      	cmp	r2, r4
   22236:	f105 0501 	add.w	r5, r5, #1
   2223a:	db00      	blt.n	2223e <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   2223c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2223e:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   22240:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   22244:	5cb2      	ldrb	r2, [r6, r2]
   22246:	f003 0303 	and.w	r3, r3, #3
   2224a:	00db      	lsls	r3, r3, #3
   2224c:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   22250:	5842      	ldr	r2, [r0, r1]
   22252:	431a      	orrs	r2, r3
   22254:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   22256:	e7ec      	b.n	22232 <uECC_vli_bytesToNative+0x18>

00022258 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   22258:	b5f0      	push	{r4, r5, r6, r7, lr}
   2225a:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2225c:	f991 6000 	ldrsb.w	r6, [r1]
{
   22260:	4605      	mov	r5, r0
   22262:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   22264:	f7ff fe17 	bl	21e96 <EccPoint_isZero>
   22268:	bb28      	cbnz	r0, 222b6 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2226a:	1d27      	adds	r7, r4, #4
   2226c:	4632      	mov	r2, r6
   2226e:	4629      	mov	r1, r5
   22270:	4638      	mov	r0, r7
   22272:	f7ff fb0d 	bl	21890 <uECC_vli_cmp_unsafe>
   22276:	2801      	cmp	r0, #1
   22278:	d120      	bne.n	222bc <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   2227a:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   2227e:	4632      	mov	r2, r6
   22280:	4638      	mov	r0, r7
   22282:	f7ff fb05 	bl	21890 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   22286:	2801      	cmp	r0, #1
   22288:	d118      	bne.n	222bc <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   2228a:	4622      	mov	r2, r4
   2228c:	4668      	mov	r0, sp
   2228e:	f7ff fc15 	bl	21abc <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   22292:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   22296:	4622      	mov	r2, r4
   22298:	4629      	mov	r1, r5
   2229a:	a808      	add	r0, sp, #32
   2229c:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   2229e:	4632      	mov	r2, r6
   222a0:	a908      	add	r1, sp, #32
   222a2:	4668      	mov	r0, sp
   222a4:	f7ff fb0b 	bl	218be <uECC_vli_equal>
   222a8:	2800      	cmp	r0, #0
		return -3;
   222aa:	bf0c      	ite	eq
   222ac:	2000      	moveq	r0, #0
   222ae:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   222b2:	b011      	add	sp, #68	; 0x44
   222b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   222b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   222ba:	e7fa      	b.n	222b2 <uECC_valid_point+0x5a>
		return -2;
   222bc:	f06f 0001 	mvn.w	r0, #1
   222c0:	e7f7      	b.n	222b2 <uECC_valid_point+0x5a>

000222c2 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   222c2:	b570      	push	{r4, r5, r6, lr}
   222c4:	460c      	mov	r4, r1
   222c6:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   222c8:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   222ca:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   222ce:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   222d0:	4601      	mov	r1, r0
   222d2:	4668      	mov	r0, sp
   222d4:	f7ff ffa1 	bl	2221a <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   222d8:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   222dc:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   222e0:	18a9      	adds	r1, r5, r2
   222e2:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   222e6:	f7ff ff98 	bl	2221a <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   222ea:	2210      	movs	r2, #16
   222ec:	4631      	mov	r1, r6
   222ee:	4668      	mov	r0, sp
   222f0:	f7ff face 	bl	21890 <uECC_vli_cmp_unsafe>
   222f4:	b128      	cbz	r0, 22302 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   222f6:	4621      	mov	r1, r4
   222f8:	4668      	mov	r0, sp
   222fa:	f7ff ffad 	bl	22258 <uECC_valid_point>
}
   222fe:	b010      	add	sp, #64	; 0x40
   22300:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   22302:	f06f 0003 	mvn.w	r0, #3
   22306:	e7fa      	b.n	222fe <uECC_valid_public_key+0x3c>

00022308 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   22308:	78cb      	ldrb	r3, [r1, #3]
   2230a:	7802      	ldrb	r2, [r0, #0]
   2230c:	4053      	eors	r3, r2
   2230e:	7003      	strb	r3, [r0, #0]
   22310:	884b      	ldrh	r3, [r1, #2]
   22312:	7842      	ldrb	r2, [r0, #1]
   22314:	4053      	eors	r3, r2
   22316:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   22318:	680a      	ldr	r2, [r1, #0]
   2231a:	7883      	ldrb	r3, [r0, #2]
   2231c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   22320:	7083      	strb	r3, [r0, #2]
   22322:	680a      	ldr	r2, [r1, #0]
   22324:	78c3      	ldrb	r3, [r0, #3]
   22326:	4053      	eors	r3, r2
   22328:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2232a:	79cb      	ldrb	r3, [r1, #7]
   2232c:	7902      	ldrb	r2, [r0, #4]
   2232e:	4053      	eors	r3, r2
   22330:	7103      	strb	r3, [r0, #4]
   22332:	88cb      	ldrh	r3, [r1, #6]
   22334:	7942      	ldrb	r2, [r0, #5]
   22336:	4053      	eors	r3, r2
   22338:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2233a:	684a      	ldr	r2, [r1, #4]
   2233c:	7983      	ldrb	r3, [r0, #6]
   2233e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   22342:	7183      	strb	r3, [r0, #6]
   22344:	684a      	ldr	r2, [r1, #4]
   22346:	79c3      	ldrb	r3, [r0, #7]
   22348:	4053      	eors	r3, r2
   2234a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2234c:	7acb      	ldrb	r3, [r1, #11]
   2234e:	7a02      	ldrb	r2, [r0, #8]
   22350:	4053      	eors	r3, r2
   22352:	7203      	strb	r3, [r0, #8]
   22354:	7a42      	ldrb	r2, [r0, #9]
   22356:	894b      	ldrh	r3, [r1, #10]
   22358:	4053      	eors	r3, r2
   2235a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2235c:	688a      	ldr	r2, [r1, #8]
   2235e:	7a83      	ldrb	r3, [r0, #10]
   22360:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   22364:	7283      	strb	r3, [r0, #10]
   22366:	688a      	ldr	r2, [r1, #8]
   22368:	7ac3      	ldrb	r3, [r0, #11]
   2236a:	4053      	eors	r3, r2
   2236c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2236e:	7bcb      	ldrb	r3, [r1, #15]
   22370:	7b02      	ldrb	r2, [r0, #12]
   22372:	4053      	eors	r3, r2
   22374:	7303      	strb	r3, [r0, #12]
   22376:	89cb      	ldrh	r3, [r1, #14]
   22378:	7b42      	ldrb	r2, [r0, #13]
   2237a:	4053      	eors	r3, r2
   2237c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2237e:	68ca      	ldr	r2, [r1, #12]
   22380:	7b83      	ldrb	r3, [r0, #14]
   22382:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   22386:	7383      	strb	r3, [r0, #14]
   22388:	68ca      	ldr	r2, [r1, #12]
   2238a:	7bc3      	ldrb	r3, [r0, #15]
   2238c:	4053      	eors	r3, r2
   2238e:	73c3      	strb	r3, [r0, #15]
}
   22390:	4770      	bx	lr

00022392 <shift_rows>:
{
   22392:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   22394:	7802      	ldrb	r2, [r0, #0]
   22396:	f88d 2000 	strb.w	r2, [sp]
   2239a:	7942      	ldrb	r2, [r0, #5]
   2239c:	f88d 2001 	strb.w	r2, [sp, #1]
   223a0:	7a82      	ldrb	r2, [r0, #10]
   223a2:	f88d 2002 	strb.w	r2, [sp, #2]
   223a6:	7bc2      	ldrb	r2, [r0, #15]
   223a8:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   223ac:	7902      	ldrb	r2, [r0, #4]
   223ae:	f88d 2004 	strb.w	r2, [sp, #4]
   223b2:	7a42      	ldrb	r2, [r0, #9]
   223b4:	f88d 2005 	strb.w	r2, [sp, #5]
   223b8:	7b82      	ldrb	r2, [r0, #14]
   223ba:	f88d 2006 	strb.w	r2, [sp, #6]
   223be:	78c2      	ldrb	r2, [r0, #3]
   223c0:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   223c4:	7a02      	ldrb	r2, [r0, #8]
   223c6:	f88d 2008 	strb.w	r2, [sp, #8]
   223ca:	7b42      	ldrb	r2, [r0, #13]
   223cc:	f88d 2009 	strb.w	r2, [sp, #9]
   223d0:	7882      	ldrb	r2, [r0, #2]
   223d2:	f88d 200a 	strb.w	r2, [sp, #10]
   223d6:	79c2      	ldrb	r2, [r0, #7]
   223d8:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   223dc:	7b02      	ldrb	r2, [r0, #12]
   223de:	f88d 200c 	strb.w	r2, [sp, #12]
   223e2:	7842      	ldrb	r2, [r0, #1]
   223e4:	7ac3      	ldrb	r3, [r0, #11]
   223e6:	f88d 200d 	strb.w	r2, [sp, #13]
   223ea:	7982      	ldrb	r2, [r0, #6]
   223ec:	f88d 200e 	strb.w	r2, [sp, #14]
   223f0:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   223f4:	2310      	movs	r3, #16
   223f6:	466a      	mov	r2, sp
   223f8:	4619      	mov	r1, r3
   223fa:	f7ff f87b 	bl	214f4 <_copy>
}
   223fe:	b005      	add	sp, #20
   22400:	f85d fb04 	ldr.w	pc, [sp], #4

00022404 <mult_row_column>:
{
   22404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22406:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   22408:	7808      	ldrb	r0, [r1, #0]
{
   2240a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2240c:	f7ff f881 	bl	21512 <_double_byte>
   22410:	4605      	mov	r5, r0
   22412:	7860      	ldrb	r0, [r4, #1]
   22414:	f7ff f87d 	bl	21512 <_double_byte>
   22418:	78a2      	ldrb	r2, [r4, #2]
   2241a:	7863      	ldrb	r3, [r4, #1]
   2241c:	4053      	eors	r3, r2
   2241e:	78e2      	ldrb	r2, [r4, #3]
   22420:	4053      	eors	r3, r2
   22422:	405d      	eors	r5, r3
   22424:	4045      	eors	r5, r0
   22426:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   22428:	7860      	ldrb	r0, [r4, #1]
   2242a:	7827      	ldrb	r7, [r4, #0]
   2242c:	f7ff f871 	bl	21512 <_double_byte>
   22430:	4605      	mov	r5, r0
   22432:	78a0      	ldrb	r0, [r4, #2]
   22434:	f7ff f86d 	bl	21512 <_double_byte>
   22438:	78a3      	ldrb	r3, [r4, #2]
   2243a:	405f      	eors	r7, r3
   2243c:	78e3      	ldrb	r3, [r4, #3]
   2243e:	405f      	eors	r7, r3
   22440:	407d      	eors	r5, r7
   22442:	4045      	eors	r5, r0
   22444:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   22446:	78a0      	ldrb	r0, [r4, #2]
   22448:	7865      	ldrb	r5, [r4, #1]
   2244a:	7827      	ldrb	r7, [r4, #0]
   2244c:	f7ff f861 	bl	21512 <_double_byte>
   22450:	406f      	eors	r7, r5
   22452:	4605      	mov	r5, r0
   22454:	78e0      	ldrb	r0, [r4, #3]
   22456:	f7ff f85c 	bl	21512 <_double_byte>
   2245a:	78e3      	ldrb	r3, [r4, #3]
   2245c:	405f      	eors	r7, r3
   2245e:	407d      	eors	r5, r7
   22460:	4045      	eors	r5, r0
   22462:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   22464:	7820      	ldrb	r0, [r4, #0]
   22466:	f7ff f854 	bl	21512 <_double_byte>
   2246a:	7863      	ldrb	r3, [r4, #1]
   2246c:	7825      	ldrb	r5, [r4, #0]
   2246e:	405d      	eors	r5, r3
   22470:	78a3      	ldrb	r3, [r4, #2]
   22472:	405d      	eors	r5, r3
   22474:	4045      	eors	r5, r0
   22476:	78e0      	ldrb	r0, [r4, #3]
   22478:	f7ff f84b 	bl	21512 <_double_byte>
   2247c:	b2ed      	uxtb	r5, r5
   2247e:	4045      	eors	r5, r0
   22480:	70f5      	strb	r5, [r6, #3]
}
   22482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022484 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   22484:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   22486:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   22488:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2248a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2248e:	2b00      	cmp	r3, #0
   22490:	bfb4      	ite	lt
   22492:	2387      	movlt	r3, #135	; 0x87
   22494:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   22496:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2249a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2249e:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   224a0:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   224a4:	d002      	beq.n	224ac <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   224a6:	7813      	ldrb	r3, [r2, #0]
   224a8:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   224aa:	e7f4      	b.n	22496 <gf_double+0x12>
	}
}
   224ac:	bd10      	pop	{r4, pc}

000224ae <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   224ae:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   224b0:	b120      	cbz	r0, 224bc <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   224b2:	2258      	movs	r2, #88	; 0x58
   224b4:	2100      	movs	r1, #0
   224b6:	f7ff f82a 	bl	2150e <_set>
   224ba:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   224bc:	bd08      	pop	{r3, pc}

000224be <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   224be:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   224c0:	4604      	mov	r4, r0
   224c2:	b188      	cbz	r0, 224e8 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   224c4:	2210      	movs	r2, #16
   224c6:	2100      	movs	r1, #0
   224c8:	f7ff f821 	bl	2150e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   224cc:	2210      	movs	r2, #16
   224ce:	f104 0030 	add.w	r0, r4, #48	; 0x30
   224d2:	2100      	movs	r1, #0
   224d4:	f7ff f81b 	bl	2150e <_set>
	s->leftover_offset = 0;
   224d8:	2300      	movs	r3, #0
   224da:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   224dc:	2200      	movs	r2, #0
   224de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   224e2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   224e6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   224e8:	bd10      	pop	{r4, pc}

000224ea <tc_cmac_setup>:
{
   224ea:	b570      	push	{r4, r5, r6, lr}
   224ec:	460d      	mov	r5, r1
   224ee:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   224f0:	4604      	mov	r4, r0
   224f2:	b310      	cbz	r0, 2253a <tc_cmac_setup+0x50>
   224f4:	b311      	cbz	r1, 2253c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   224f6:	2258      	movs	r2, #88	; 0x58
   224f8:	2100      	movs	r1, #0
   224fa:	f7ff f808 	bl	2150e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   224fe:	4629      	mov	r1, r5
	s->sched = sched;
   22500:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   22502:	4630      	mov	r0, r6
   22504:	f7e4 f8a8 	bl	6658 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   22508:	2210      	movs	r2, #16
   2250a:	2100      	movs	r1, #0
   2250c:	4620      	mov	r0, r4
   2250e:	f7fe fffe 	bl	2150e <_set>
	gf_double (s->K1, s->iv);
   22512:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   22516:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   22518:	4621      	mov	r1, r4
   2251a:	4620      	mov	r0, r4
   2251c:	f7e4 f8ee 	bl	66fc <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   22520:	4621      	mov	r1, r4
   22522:	4628      	mov	r0, r5
   22524:	f7ff ffae 	bl	22484 <gf_double>
	gf_double (s->K2, s->K1);
   22528:	4629      	mov	r1, r5
   2252a:	f104 0020 	add.w	r0, r4, #32
   2252e:	f7ff ffa9 	bl	22484 <gf_double>
	tc_cmac_init(s);
   22532:	4620      	mov	r0, r4
   22534:	f7ff ffc3 	bl	224be <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   22538:	2001      	movs	r0, #1
}
   2253a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2253c:	4608      	mov	r0, r1
   2253e:	e7fc      	b.n	2253a <tc_cmac_setup+0x50>

00022540 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   22540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22544:	460d      	mov	r5, r1
   22546:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   22548:	4604      	mov	r4, r0
   2254a:	2800      	cmp	r0, #0
   2254c:	d062      	beq.n	22614 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2254e:	b912      	cbnz	r2, 22556 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   22550:	2001      	movs	r0, #1
}
   22552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   22556:	2900      	cmp	r1, #0
   22558:	d05c      	beq.n	22614 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   2255a:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   2255e:	ea50 0301 	orrs.w	r3, r0, r1
   22562:	d057      	beq.n	22614 <tc_cmac_update+0xd4>
	s->countdown--;
   22564:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   22568:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   2256c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   22570:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   22574:	f1b8 0f00 	cmp.w	r8, #0
   22578:	d02a      	beq.n	225d0 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2257a:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   2257e:	f108 0030 	add.w	r0, r8, #48	; 0x30
   22582:	42be      	cmp	r6, r7
   22584:	4420      	add	r0, r4
   22586:	d208      	bcs.n	2259a <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   22588:	462a      	mov	r2, r5
   2258a:	4633      	mov	r3, r6
   2258c:	4631      	mov	r1, r6
   2258e:	f7fe ffb1 	bl	214f4 <_copy>
			s->leftover_offset += data_length;
   22592:	6c62      	ldr	r2, [r4, #68]	; 0x44
   22594:	4432      	add	r2, r6
   22596:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   22598:	e7da      	b.n	22550 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2259a:	463b      	mov	r3, r7
   2259c:	462a      	mov	r2, r5
   2259e:	4639      	mov	r1, r7
   225a0:	f7fe ffa8 	bl	214f4 <_copy>
		data_length -= remaining_space;
   225a4:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   225a6:	2300      	movs	r3, #0
   225a8:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   225aa:	4446      	add	r6, r8
		data += remaining_space;
   225ac:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   225ae:	1e63      	subs	r3, r4, #1
   225b0:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   225b4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   225b8:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   225bc:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   225be:	ea82 0200 	eor.w	r2, r2, r0
   225c2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   225c4:	d1f6      	bne.n	225b4 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   225c6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   225c8:	4621      	mov	r1, r4
   225ca:	4620      	mov	r0, r4
   225cc:	f7e4 f896 	bl	66fc <tc_aes_encrypt>
   225d0:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   225d4:	2e10      	cmp	r6, #16
   225d6:	d80a      	bhi.n	225ee <tc_cmac_update+0xae>
	if (data_length > 0) {
   225d8:	2e00      	cmp	r6, #0
   225da:	d0b9      	beq.n	22550 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   225dc:	4633      	mov	r3, r6
   225de:	462a      	mov	r2, r5
   225e0:	4631      	mov	r1, r6
   225e2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   225e6:	f7fe ff85 	bl	214f4 <_copy>
		s->leftover_offset = data_length;
   225ea:	6466      	str	r6, [r4, #68]	; 0x44
   225ec:	e7b0      	b.n	22550 <tc_cmac_update+0x10>
   225ee:	1e63      	subs	r3, r4, #1
   225f0:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   225f2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   225f6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   225fa:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   225fc:	ea82 0200 	eor.w	r2, r2, r0
   22600:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22602:	d1f6      	bne.n	225f2 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   22604:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   22606:	4621      	mov	r1, r4
   22608:	4620      	mov	r0, r4
   2260a:	f7e4 f877 	bl	66fc <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2260e:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   22610:	3e10      	subs	r6, #16
   22612:	e7df      	b.n	225d4 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   22614:	2000      	movs	r0, #0
   22616:	e79c      	b.n	22552 <tc_cmac_update+0x12>

00022618 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   22618:	b570      	push	{r4, r5, r6, lr}
   2261a:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2261c:	4605      	mov	r5, r0
   2261e:	b1e8      	cbz	r0, 2265c <tc_cmac_final+0x44>
   22620:	b369      	cbz	r1, 2267e <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   22622:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   22624:	2a10      	cmp	r2, #16
   22626:	d11a      	bne.n	2265e <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   22628:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2262a:	1e63      	subs	r3, r4, #1
   2262c:	3901      	subs	r1, #1
   2262e:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   22632:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   22636:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2263a:	4072      	eors	r2, r6
   2263c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22640:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   22642:	ea82 0206 	eor.w	r2, r2, r6
   22646:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22648:	d1f3      	bne.n	22632 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2264a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2264c:	4621      	mov	r1, r4
   2264e:	4628      	mov	r0, r5
   22650:	f7e4 f854 	bl	66fc <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   22654:	4620      	mov	r0, r4
   22656:	f7ff ff2a 	bl	224ae <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2265a:	2001      	movs	r0, #1
}
   2265c:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2265e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   22662:	2100      	movs	r1, #0
   22664:	f1c2 0210 	rsb	r2, r2, #16
   22668:	4420      	add	r0, r4
   2266a:	f7fe ff50 	bl	2150e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2266e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   22670:	4423      	add	r3, r4
   22672:	2280      	movs	r2, #128	; 0x80
   22674:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   22678:	f104 0120 	add.w	r1, r4, #32
   2267c:	e7d5      	b.n	2262a <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2267e:	4608      	mov	r0, r1
   22680:	e7ec      	b.n	2265c <tc_cmac_final+0x44>

00022682 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   22682:	2100      	movs	r1, #0
   22684:	2001      	movs	r0, #1
   22686:	f7e4 b993 	b.w	69b0 <z_arm_fatal_error>

0002268a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2268a:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   2268c:	6800      	ldr	r0, [r0, #0]
   2268e:	f7e4 b98f 	b.w	69b0 <z_arm_fatal_error>

00022692 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   22692:	b508      	push	{r3, lr}
	handler();
   22694:	f7e4 f9c4 	bl	6a20 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   22698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2269c:	f7e4 bc2c 	b.w	6ef8 <z_arm_exc_exit>

000226a0 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   226a0:	3901      	subs	r1, #1
   226a2:	4603      	mov	r3, r0
   226a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   226a8:	b90a      	cbnz	r2, 226ae <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   226aa:	701a      	strb	r2, [r3, #0]

	return dest;
}
   226ac:	4770      	bx	lr
		*d = *s;
   226ae:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   226b2:	e7f7      	b.n	226a4 <strcpy+0x4>

000226b4 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   226b4:	b570      	push	{r4, r5, r6, lr}
   226b6:	3901      	subs	r1, #1
   226b8:	4605      	mov	r5, r0
   226ba:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   226bc:	b142      	cbz	r2, 226d0 <strncpy+0x1c>
   226be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   226c2:	1e56      	subs	r6, r2, #1
   226c4:	b92b      	cbnz	r3, 226d2 <strncpy+0x1e>
   226c6:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   226c8:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   226cc:	42a2      	cmp	r2, r4
   226ce:	d1fb      	bne.n	226c8 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   226d0:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   226d2:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   226d6:	4632      	mov	r2, r6
   226d8:	e7ef      	b.n	226ba <strncpy+0x6>

000226da <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   226da:	4603      	mov	r3, r0
	size_t n = 0;
   226dc:	2000      	movs	r0, #0

	while (*s != '\0') {
   226de:	5c1a      	ldrb	r2, [r3, r0]
   226e0:	b902      	cbnz	r2, 226e4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   226e2:	4770      	bx	lr
		n++;
   226e4:	3001      	adds	r0, #1
   226e6:	e7fa      	b.n	226de <strlen+0x4>

000226e8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   226e8:	1e43      	subs	r3, r0, #1
   226ea:	3901      	subs	r1, #1
   226ec:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   226f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   226f4:	4282      	cmp	r2, r0
   226f6:	d101      	bne.n	226fc <strcmp+0x14>
   226f8:	2a00      	cmp	r2, #0
   226fa:	d1f7      	bne.n	226ec <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   226fc:	1a10      	subs	r0, r2, r0
   226fe:	4770      	bx	lr

00022700 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   22700:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   22702:	b15a      	cbz	r2, 2271c <memcmp+0x1c>
   22704:	3901      	subs	r1, #1
   22706:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   22708:	f810 2b01 	ldrb.w	r2, [r0], #1
   2270c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   22710:	42a0      	cmp	r0, r4
   22712:	d001      	beq.n	22718 <memcmp+0x18>
   22714:	429a      	cmp	r2, r3
   22716:	d0f7      	beq.n	22708 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   22718:	1ad0      	subs	r0, r2, r3
}
   2271a:	bd10      	pop	{r4, pc}
		return 0;
   2271c:	4610      	mov	r0, r2
   2271e:	e7fc      	b.n	2271a <memcmp+0x1a>

00022720 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   22720:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   22722:	ea81 0400 	eor.w	r4, r1, r0
   22726:	07a5      	lsls	r5, r4, #30
   22728:	4603      	mov	r3, r0
   2272a:	d00b      	beq.n	22744 <memcpy+0x24>
   2272c:	3b01      	subs	r3, #1
   2272e:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   22730:	4291      	cmp	r1, r2
   22732:	d11b      	bne.n	2276c <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   22734:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   22736:	2a00      	cmp	r2, #0
   22738:	d0fc      	beq.n	22734 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   2273a:	f811 4b01 	ldrb.w	r4, [r1], #1
   2273e:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   22742:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   22744:	079c      	lsls	r4, r3, #30
   22746:	d1f6      	bne.n	22736 <memcpy+0x16>
   22748:	f022 0403 	bic.w	r4, r2, #3
   2274c:	1f1d      	subs	r5, r3, #4
   2274e:	0896      	lsrs	r6, r2, #2
   22750:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   22752:	42b9      	cmp	r1, r7
   22754:	d105      	bne.n	22762 <memcpy+0x42>
   22756:	f06f 0503 	mvn.w	r5, #3
   2275a:	fb05 2206 	mla	r2, r5, r6, r2
   2275e:	4423      	add	r3, r4
   22760:	e7e4      	b.n	2272c <memcpy+0xc>
			*(d_word++) = *(s_word++);
   22762:	f851 cb04 	ldr.w	ip, [r1], #4
   22766:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   2276a:	e7f2      	b.n	22752 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   2276c:	f811 4b01 	ldrb.w	r4, [r1], #1
   22770:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   22774:	e7dc      	b.n	22730 <memcpy+0x10>

00022776 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   22776:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   22778:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   2277a:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   2277c:	079c      	lsls	r4, r3, #30
   2277e:	d111      	bne.n	227a4 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   22780:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   22784:	f022 0603 	bic.w	r6, r2, #3
   22788:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   2278c:	441e      	add	r6, r3
   2278e:	0894      	lsrs	r4, r2, #2
   22790:	42b3      	cmp	r3, r6
   22792:	d10d      	bne.n	227b0 <memset+0x3a>
   22794:	f06f 0503 	mvn.w	r5, #3
   22798:	fb05 2204 	mla	r2, r5, r4, r2
   2279c:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   2279e:	4293      	cmp	r3, r2
   227a0:	d109      	bne.n	227b6 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   227a2:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   227a4:	2a00      	cmp	r2, #0
   227a6:	d0fc      	beq.n	227a2 <memset+0x2c>
		*(d_byte++) = c_byte;
   227a8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   227ac:	3a01      	subs	r2, #1
   227ae:	e7e5      	b.n	2277c <memset+0x6>
		*(d_word++) = c_word;
   227b0:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   227b4:	e7ec      	b.n	22790 <memset+0x1a>
		*(d_byte++) = c_byte;
   227b6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   227ba:	e7f0      	b.n	2279e <memset+0x28>

000227bc <_stdout_hook_default>:
}
   227bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   227c0:	4770      	bx	lr

000227c2 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   227c2:	f7fc bae5 	b.w	1ed90 <SystemInit>

000227c6 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   227c6:	b530      	push	{r4, r5, lr}
   227c8:	b085      	sub	sp, #20
   227ca:	4604      	mov	r4, r0
   227cc:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   227ce:	4668      	mov	r0, sp
   227d0:	2203      	movs	r2, #3
   227d2:	f7ff ffa5 	bl	22720 <memcpy>
	(void)memset(res + 3, 0, 13);
   227d6:	220d      	movs	r2, #13
   227d8:	2100      	movs	r1, #0
   227da:	f10d 0003 	add.w	r0, sp, #3
   227de:	f7ff ffca 	bl	22776 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   227e2:	4620      	mov	r0, r4
   227e4:	466a      	mov	r2, sp
   227e6:	4669      	mov	r1, sp
   227e8:	f7f1 fa54 	bl	13c94 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   227ec:	4604      	mov	r4, r0
   227ee:	b920      	cbnz	r0, 227fa <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   227f0:	2203      	movs	r2, #3
   227f2:	4669      	mov	r1, sp
   227f4:	4628      	mov	r0, r5
   227f6:	f7ff ff93 	bl	22720 <memcpy>

	return 0;
}
   227fa:	4620      	mov	r0, r4
   227fc:	b005      	add	sp, #20
   227fe:	bd30      	pop	{r4, r5, pc}

00022800 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   22800:	b513      	push	{r0, r1, r4, lr}
   22802:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   22804:	aa01      	add	r2, sp, #4
   22806:	3103      	adds	r1, #3
   22808:	f7ff ffdd 	bl	227c6 <ah>
	if (err) {
   2280c:	b948      	cbnz	r0, 22822 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   2280e:	2203      	movs	r2, #3
   22810:	a901      	add	r1, sp, #4
   22812:	4620      	mov	r0, r4
   22814:	f7ff ff74 	bl	22700 <memcmp>
   22818:	fab0 f080 	clz	r0, r0
   2281c:	0940      	lsrs	r0, r0, #5
}
   2281e:	b002      	add	sp, #8
   22820:	bd10      	pop	{r4, pc}
		return false;
   22822:	2000      	movs	r0, #0
   22824:	e7fb      	b.n	2281e <bt_rpa_irk_matches+0x1e>

00022826 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   22826:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   22828:	1cce      	adds	r6, r1, #3
{
   2282a:	4605      	mov	r5, r0
   2282c:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   2282e:	4630      	mov	r0, r6
   22830:	2103      	movs	r1, #3
   22832:	f7f1 fa2d 	bl	13c90 <bt_rand>
	if (err) {
   22836:	b960      	cbnz	r0, 22852 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   22838:	7963      	ldrb	r3, [r4, #5]
   2283a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2283e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22842:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   22844:	4622      	mov	r2, r4
   22846:	4631      	mov	r1, r6
   22848:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   2284a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   2284e:	f7ff bfba 	b.w	227c6 <ah>
}
   22852:	bd70      	pop	{r4, r5, r6, pc}

00022854 <send_cmd_status>:
{
   22854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   22858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   2285c:	4606      	mov	r6, r0
   2285e:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   22860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22864:	2100      	movs	r1, #0
   22866:	200f      	movs	r0, #15
   22868:	f7e7 fa86 	bl	9d78 <bt_buf_get_evt>
	*(uint8_t *)net_buf_user_data(buf) = type;
   2286c:	2701      	movs	r7, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   2286e:	f100 0808 	add.w	r8, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   22872:	4604      	mov	r4, r0
   22874:	7507      	strb	r7, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   22876:	2102      	movs	r1, #2
   22878:	4640      	mov	r0, r8
   2287a:	f002 fdb7 	bl	253ec <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2287e:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   22880:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   22882:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   22884:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   22886:	4640      	mov	r0, r8
   22888:	f002 fdb0 	bl	253ec <net_buf_simple_add>
	evt->ncmd = 1U;
   2288c:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   2288e:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   22890:	8046      	strh	r6, [r0, #2]
	bt_recv_prio(buf);
   22892:	4620      	mov	r0, r4
}
   22894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_recv_prio(buf);
   22898:	f7e6 bca4 	b.w	91e4 <bt_recv_prio>

0002289c <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   2289c:	f101 0320 	add.w	r3, r1, #32
   228a0:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   228a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   228a6:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   228aa:	428b      	cmp	r3, r1
   228ac:	d1f9      	bne.n	228a2 <sys_memcpy_swap.constprop.0+0x6>
}
   228ae:	4770      	bx	lr

000228b0 <default_CSPRNG>:
{
   228b0:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   228b2:	f7f1 f9ed 	bl	13c90 <bt_rand>
}
   228b6:	fab0 f080 	clz	r0, r0
   228ba:	0940      	lsrs	r0, r0, #5
   228bc:	bd08      	pop	{r3, pc}

000228be <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   228be:	b510      	push	{r4, lr}
   228c0:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   228c2:	7801      	ldrb	r1, [r0, #0]
   228c4:	7822      	ldrb	r2, [r4, #0]
   228c6:	428a      	cmp	r2, r1
{
   228c8:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   228ca:	d00e      	beq.n	228ea <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   228cc:	4669      	mov	r1, sp
   228ce:	f7e4 fe31 	bl	7534 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   228d2:	a905      	add	r1, sp, #20
   228d4:	4620      	mov	r0, r4
   228d6:	f7e4 fe2d 	bl	7534 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   228da:	2210      	movs	r2, #16
   228dc:	f10d 0115 	add.w	r1, sp, #21
   228e0:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   228e4:	f7ff ff0c 	bl	22700 <memcmp>
   228e8:	e007      	b.n	228fa <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   228ea:	2a01      	cmp	r2, #1
   228ec:	d007      	beq.n	228fe <bt_uuid_cmp+0x40>
   228ee:	2a02      	cmp	r2, #2
   228f0:	d008      	beq.n	22904 <bt_uuid_cmp+0x46>
   228f2:	b95a      	cbnz	r2, 2290c <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   228f4:	8840      	ldrh	r0, [r0, #2]
   228f6:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   228f8:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   228fa:	b00a      	add	sp, #40	; 0x28
   228fc:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   228fe:	6840      	ldr	r0, [r0, #4]
   22900:	6863      	ldr	r3, [r4, #4]
   22902:	e7f9      	b.n	228f8 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   22904:	2210      	movs	r2, #16
   22906:	1c61      	adds	r1, r4, #1
   22908:	3001      	adds	r0, #1
   2290a:	e7eb      	b.n	228e4 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   2290c:	f06f 0015 	mvn.w	r0, #21
   22910:	e7f3      	b.n	228fa <bt_uuid_cmp+0x3c>

00022912 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   22912:	2a04      	cmp	r2, #4
{
   22914:	b538      	push	{r3, r4, r5, lr}
   22916:	460c      	mov	r4, r1
	switch (data_len) {
   22918:	d00d      	beq.n	22936 <bt_uuid_create+0x24>
   2291a:	2a10      	cmp	r2, #16
   2291c:	d019      	beq.n	22952 <bt_uuid_create+0x40>
   2291e:	2a02      	cmp	r2, #2
   22920:	f04f 0300 	mov.w	r3, #0
   22924:	d11b      	bne.n	2295e <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   22926:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   22928:	784a      	ldrb	r2, [r1, #1]
   2292a:	780b      	ldrb	r3, [r1, #0]
   2292c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   22930:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   22932:	2001      	movs	r0, #1
}
   22934:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   22936:	2301      	movs	r3, #1
   22938:	7003      	strb	r3, [r0, #0]
   2293a:	78a2      	ldrb	r2, [r4, #2]
   2293c:	78c9      	ldrb	r1, [r1, #3]
   2293e:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   22940:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   22944:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   22946:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   2294a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2294e:	6042      	str	r2, [r0, #4]
		break;
   22950:	e7ef      	b.n	22932 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   22952:	2302      	movs	r3, #2
   22954:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   22958:	f7ff fee2 	bl	22720 <memcpy>
		break;
   2295c:	e7e9      	b.n	22932 <bt_uuid_create+0x20>
	switch (data_len) {
   2295e:	4618      	mov	r0, r3
   22960:	e7e8      	b.n	22934 <bt_uuid_create+0x22>

00022962 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22962:	f3bf 8f5b 	dmb	ish
   22966:	6800      	ldr	r0, [r0, #0]
   22968:	f3bf 8f5b 	dmb	ish
}
   2296c:	4770      	bx	lr

0002296e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2296e:	2207      	movs	r2, #7
   22970:	f7ff bed6 	b.w	22720 <memcpy>

00022974 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   22974:	2207      	movs	r2, #7
   22976:	f7ff bec3 	b.w	22700 <memcmp>

0002297a <atomic_and>:
{
   2297a:	4603      	mov	r3, r0
}
   2297c:	f3bf 8f5b 	dmb	ish
   22980:	e853 0f00 	ldrex	r0, [r3]
   22984:	ea00 0201 	and.w	r2, r0, r1
   22988:	e843 2c00 	strex	ip, r2, [r3]
   2298c:	f1bc 0f00 	cmp.w	ip, #0
   22990:	d1f6      	bne.n	22980 <atomic_and+0x6>
   22992:	f3bf 8f5b 	dmb	ish
   22996:	4770      	bx	lr

00022998 <atomic_or>:
{
   22998:	4603      	mov	r3, r0
}
   2299a:	f3bf 8f5b 	dmb	ish
   2299e:	e853 0f00 	ldrex	r0, [r3]
   229a2:	ea40 0201 	orr.w	r2, r0, r1
   229a6:	e843 2c00 	strex	ip, r2, [r3]
   229aa:	f1bc 0f00 	cmp.w	ip, #0
   229ae:	d1f6      	bne.n	2299e <atomic_or+0x6>
   229b0:	f3bf 8f5b 	dmb	ish
   229b4:	4770      	bx	lr

000229b6 <atomic_set_bit_to>:
{
   229b6:	460b      	mov	r3, r1
   229b8:	b410      	push	{r4}
   229ba:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   229bc:	f001 041f 	and.w	r4, r1, #31
   229c0:	2101      	movs	r1, #1
   229c2:	40a1      	lsls	r1, r4
	if (val) {
   229c4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   229c8:	b112      	cbz	r2, 229d0 <atomic_set_bit_to+0x1a>
	}
}
   229ca:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   229cc:	f7ff bfe4 	b.w	22998 <atomic_or>
}
   229d0:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   229d2:	43c9      	mvns	r1, r1
   229d4:	f7ff bfd1 	b.w	2297a <atomic_and>

000229d8 <atomic_test_and_set_bit>:
{
   229d8:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   229da:	2301      	movs	r3, #1
   229dc:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   229e0:	f7ff ffda 	bl	22998 <atomic_or>
	return (old & mask) != 0;
   229e4:	4201      	tst	r1, r0
}
   229e6:	bf14      	ite	ne
   229e8:	2001      	movne	r0, #1
   229ea:	2000      	moveq	r0, #0
   229ec:	bd08      	pop	{r3, pc}

000229ee <sys_put_le64>:
	dst[1] = val >> 8;
   229ee:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   229f2:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   229f4:	0e00      	lsrs	r0, r0, #24
   229f6:	7053      	strb	r3, [r2, #1]
   229f8:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   229fa:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   229fc:	f3c1 2007 	ubfx	r0, r1, #8, #8
   22a00:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   22a02:	7093      	strb	r3, [r2, #2]
   22a04:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   22a06:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   22a08:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   22a0a:	71d1      	strb	r1, [r2, #7]
}
   22a0c:	4770      	bx	lr

00022a0e <le_adv_set_private_addr.isra.0>:
static int le_set_private_addr(uint8_t id)
   22a0e:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   22a10:	2106      	movs	r1, #6
   22a12:	4668      	mov	r0, sp
   22a14:	f7f1 f93c 	bl	13c90 <bt_rand>
	if (err) {
   22a18:	b940      	cbnz	r0, 22a2c <le_adv_set_private_addr.isra.0+0x1e>
	nrpa.val[5] &= 0x3f;
   22a1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   22a1e:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   22a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22a24:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   22a28:	f7e5 fc80 	bl	832c <set_random_address>
}
   22a2c:	b003      	add	sp, #12
   22a2e:	f85d fb04 	ldr.w	pc, [sp], #4

00022a32 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   22a32:	f100 0314 	add.w	r3, r0, #20
{
   22a36:	b510      	push	{r4, lr}
   22a38:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   22a3a:	4618      	mov	r0, r3
   22a3c:	f7ff ff91 	bl	22962 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   22a40:	0642      	lsls	r2, r0, #25
   22a42:	d50a      	bpl.n	22a5a <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   22a44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   22a48:	4618      	mov	r0, r3
   22a4a:	f7ff ffa5 	bl	22998 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   22a4e:	4620      	mov	r0, r4
   22a50:	2100      	movs	r1, #0
}
   22a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   22a56:	f7e5 bca9 	b.w	83ac <set_le_adv_enable_legacy>
}
   22a5a:	bd10      	pop	{r4, pc}

00022a5c <adv_unpause_enabled>:
{
   22a5c:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   22a5e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   22a62:	4604      	mov	r4, r0
   22a64:	3014      	adds	r0, #20
   22a66:	f7ff ff88 	bl	2297a <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   22a6a:	04c3      	lsls	r3, r0, #19
   22a6c:	d505      	bpl.n	22a7a <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   22a6e:	4620      	mov	r0, r4
   22a70:	2101      	movs	r1, #1
}
   22a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   22a76:	f7e5 bc99 	b.w	83ac <set_le_adv_enable_legacy>
}
   22a7a:	bd10      	pop	{r4, pc}

00022a7c <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   22a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22a7e:	4607      	mov	r7, r0
   22a80:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   22a82:	f242 0027 	movw	r0, #8231	; 0x2027
   22a86:	2127      	movs	r1, #39	; 0x27
   22a88:	f7e5 fa52 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
   22a8c:	4604      	mov	r4, r0
   22a8e:	b1d0      	cbz	r0, 22ac6 <hci_id_add.isra.0+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
   22a90:	2127      	movs	r1, #39	; 0x27
   22a92:	3008      	adds	r0, #8
   22a94:	f002 fcaa 	bl	253ec <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   22a98:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
   22a9a:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   22a9c:	f7ff ff67 	bl	2296e <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   22aa0:	4631      	mov	r1, r6
   22aa2:	2210      	movs	r2, #16
   22aa4:	1de8      	adds	r0, r5, #7
   22aa6:	f7ff fe3b 	bl	22720 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   22aaa:	2210      	movs	r2, #16
   22aac:	2100      	movs	r1, #0
   22aae:	f105 0017 	add.w	r0, r5, #23
   22ab2:	f7ff fe60 	bl	22776 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   22ab6:	4621      	mov	r1, r4
   22ab8:	2200      	movs	r2, #0
}
   22aba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   22abe:	f242 0027 	movw	r0, #8231	; 0x2027
   22ac2:	f7e5 bb91 	b.w	81e8 <bt_hci_cmd_send_sync>
}
   22ac6:	f06f 0036 	mvn.w	r0, #54	; 0x36
   22aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022acc <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   22acc:	7a03      	ldrb	r3, [r0, #8]
   22ace:	075b      	lsls	r3, r3, #29
   22ad0:	d504      	bpl.n	22adc <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   22ad2:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   22ad6:	3001      	adds	r0, #1
   22ad8:	f7ff bfd0 	b.w	22a7c <hci_id_add.isra.0>
}
   22adc:	4770      	bx	lr

00022ade <addr_res_enable>:
{
   22ade:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   22ae0:	2101      	movs	r1, #1
{
   22ae2:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   22ae4:	f242 002d 	movw	r0, #8237	; 0x202d
   22ae8:	f7e5 fa22 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
   22aec:	4604      	mov	r4, r0
   22aee:	b158      	cbz	r0, 22b08 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   22af0:	4629      	mov	r1, r5
   22af2:	3008      	adds	r0, #8
   22af4:	f002 fc89 	bl	2540a <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   22af8:	4621      	mov	r1, r4
   22afa:	2200      	movs	r2, #0
}
   22afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   22b00:	f242 002d 	movw	r0, #8237	; 0x202d
   22b04:	f7e5 bb70 	b.w	81e8 <bt_hci_cmd_send_sync>
}
   22b08:	f06f 0036 	mvn.w	r0, #54	; 0x36
   22b0c:	bd38      	pop	{r3, r4, r5, pc}

00022b0e <set_le_scan_enable>:
	return set_le_scan_enable_legacy(enable);
   22b0e:	f7e5 bc7b 	b.w	8408 <set_le_scan_enable_legacy>

00022b12 <bt_lookup_id_addr>:
{
   22b12:	b510      	push	{r4, lr}
   22b14:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   22b16:	f7ed fe2f 	bl	10778 <bt_keys_find_irk>
		if (keys) {
   22b1a:	b100      	cbz	r0, 22b1e <bt_lookup_id_addr+0xc>
			return &keys->addr;
   22b1c:	1c44      	adds	r4, r0, #1
}
   22b1e:	4620      	mov	r0, r4
   22b20:	bd10      	pop	{r4, pc}

00022b22 <bt_hci_disconnect>:
{
   22b22:	b570      	push	{r4, r5, r6, lr}
   22b24:	4606      	mov	r6, r0
   22b26:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   22b28:	f240 4006 	movw	r0, #1030	; 0x406
   22b2c:	2103      	movs	r1, #3
   22b2e:	f7e5 f9ff 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
   22b32:	4604      	mov	r4, r0
   22b34:	b160      	cbz	r0, 22b50 <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   22b36:	2103      	movs	r1, #3
   22b38:	3008      	adds	r0, #8
   22b3a:	f002 fc57 	bl	253ec <net_buf_simple_add>
	disconn->reason = reason;
   22b3e:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   22b40:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   22b42:	4621      	mov	r1, r4
   22b44:	f240 4006 	movw	r0, #1030	; 0x406
}
   22b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   22b4c:	f7e5 ba28 	b.w	7fa0 <bt_hci_cmd_send>
}
   22b50:	f06f 0036 	mvn.w	r0, #54	; 0x36
   22b54:	bd70      	pop	{r4, r5, r6, pc}

00022b56 <bt_le_set_data_len>:
{
   22b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22b58:	4607      	mov	r7, r0
   22b5a:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   22b5c:	f242 0022 	movw	r0, #8226	; 0x2022
   22b60:	2106      	movs	r1, #6
{
   22b62:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   22b64:	f7e5 f9e4 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
   22b68:	4604      	mov	r4, r0
   22b6a:	b170      	cbz	r0, 22b8a <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   22b6c:	2106      	movs	r1, #6
   22b6e:	3008      	adds	r0, #8
   22b70:	f002 fc3c 	bl	253ec <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   22b74:	883b      	ldrh	r3, [r7, #0]
   22b76:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   22b78:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   22b7a:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   22b7c:	4621      	mov	r1, r4
   22b7e:	f242 0022 	movw	r0, #8226	; 0x2022
}
   22b82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   22b86:	f7e5 ba0b 	b.w	7fa0 <bt_hci_cmd_send>
}
   22b8a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   22b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022b90 <bt_le_set_phy>:
{
   22b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22b94:	4680      	mov	r8, r0
   22b96:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   22b98:	f242 0032 	movw	r0, #8242	; 0x2032
   22b9c:	2107      	movs	r1, #7
{
   22b9e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   22ba2:	4616      	mov	r6, r2
   22ba4:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   22ba6:	f7e5 f9c3 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
   22baa:	4604      	mov	r4, r0
   22bac:	b190      	cbz	r0, 22bd4 <bt_le_set_phy+0x44>
	cp = net_buf_add(buf, sizeof(*cp));
   22bae:	2107      	movs	r1, #7
   22bb0:	3008      	adds	r0, #8
   22bb2:	f002 fc1b 	bl	253ec <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   22bb6:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   22bba:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   22bbc:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   22bbe:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   22bc0:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   22bc2:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   22bc6:	4621      	mov	r1, r4
   22bc8:	f242 0032 	movw	r0, #8242	; 0x2032
}
   22bcc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   22bd0:	f7e5 b9e6 	b.w	7fa0 <bt_hci_cmd_send>
}
   22bd4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   22bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00022bdc <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   22bdc:	8802      	ldrh	r2, [r0, #0]
   22bde:	8843      	ldrh	r3, [r0, #2]
   22be0:	429a      	cmp	r2, r3
{
   22be2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   22be4:	d818      	bhi.n	22c18 <bt_le_conn_params_valid+0x3c>
   22be6:	2a05      	cmp	r2, #5
   22be8:	d916      	bls.n	22c18 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   22bea:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   22bee:	d813      	bhi.n	22c18 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   22bf0:	8884      	ldrh	r4, [r0, #4]
   22bf2:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   22bf6:	d20f      	bcs.n	22c18 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   22bf8:	88c1      	ldrh	r1, [r0, #6]
   22bfa:	f1a1 020a 	sub.w	r2, r1, #10
   22bfe:	b292      	uxth	r2, r2
   22c00:	f640 4076 	movw	r0, #3190	; 0xc76
   22c04:	4282      	cmp	r2, r0
   22c06:	d807      	bhi.n	22c18 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   22c08:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   22c0c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   22c10:	bf34      	ite	cc
   22c12:	2001      	movcc	r0, #1
   22c14:	2000      	movcs	r0, #0
}
   22c16:	bd10      	pop	{r4, pc}
		return false;
   22c18:	2000      	movs	r0, #0
   22c1a:	e7fc      	b.n	22c16 <bt_le_conn_params_valid+0x3a>

00022c1c <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   22c1c:	7a03      	ldrb	r3, [r0, #8]
   22c1e:	07d9      	lsls	r1, r3, #31
   22c20:	d504      	bpl.n	22c2c <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   22c22:	f023 0301 	bic.w	r3, r3, #1
   22c26:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   22c28:	f7e5 bf44 	b.w	8ab4 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   22c2c:	0799      	lsls	r1, r3, #30
   22c2e:	d504      	bpl.n	22c3a <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   22c30:	f023 0302 	bic.w	r3, r3, #2
   22c34:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   22c36:	f7e6 b81b 	b.w	8c70 <bt_id_del>
}
   22c3a:	4770      	bx	lr

00022c3c <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   22c3c:	2301      	movs	r3, #1
{
   22c3e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   22c40:	2106      	movs	r1, #6
{
   22c42:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   22c44:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   22c48:	f7f1 f822 	bl	13c90 <bt_rand>
	if (err) {
   22c4c:	b918      	cbnz	r0, 22c56 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   22c4e:	79a3      	ldrb	r3, [r4, #6]
   22c50:	f063 033f 	orn	r3, r3, #63	; 0x3f
   22c54:	71a3      	strb	r3, [r4, #6]
}
   22c56:	bd10      	pop	{r4, pc}

00022c58 <bt_send>:
		return bt_hci_ecc_send(buf);
   22c58:	f7e4 bbc0 	b.w	73dc <bt_hci_ecc_send>

00022c5c <bt_addr_le_is_bonded>:
{
   22c5c:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   22c5e:	f7ed fdc5 	bl	107ec <bt_keys_find_addr>
		return keys && keys->keys;
   22c62:	b118      	cbz	r0, 22c6c <bt_addr_le_is_bonded+0x10>
   22c64:	89c0      	ldrh	r0, [r0, #14]
   22c66:	3800      	subs	r0, #0
   22c68:	bf18      	it	ne
   22c6a:	2001      	movne	r0, #1
}
   22c6c:	bd08      	pop	{r3, pc}

00022c6e <bt_le_adv_start>:
	return bt_le_adv_start_legacy(param, ad, ad_len, sd, sd_len);
   22c6e:	f7e6 bd45 	b.w	96fc <bt_le_adv_start_legacy>

00022c72 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   22c72:	6880      	ldr	r0, [r0, #8]
   22c74:	f7e6 bf1a 	b.w	9aac <enh_conn_complete>

00022c78 <le_legacy_conn_complete>:
{
   22c78:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   22c7a:	6881      	ldr	r1, [r0, #8]
{
   22c7c:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   22c7e:	780b      	ldrb	r3, [r1, #0]
   22c80:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   22c84:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   22c88:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   22c8c:	78cb      	ldrb	r3, [r1, #3]
   22c8e:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   22c92:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   22c96:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   22c9a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   22c9e:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   22ca2:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   22ca6:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   22caa:	7c4b      	ldrb	r3, [r1, #17]
   22cac:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   22cb0:	a803      	add	r0, sp, #12
   22cb2:	3104      	adds	r1, #4
   22cb4:	f7ff fe5b 	bl	2296e <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   22cb8:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   22cba:	4669      	mov	r1, sp
   22cbc:	2206      	movs	r2, #6
   22cbe:	f10d 0013 	add.w	r0, sp, #19
   22cc2:	9400      	str	r4, [sp, #0]
   22cc4:	f8ad 4004 	strh.w	r4, [sp, #4]
   22cc8:	f7ff fd2a 	bl	22720 <memcpy>
   22ccc:	2206      	movs	r2, #6
   22cce:	4669      	mov	r1, sp
   22cd0:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   22cd4:	9400      	str	r4, [sp, #0]
   22cd6:	f8ad 4004 	strh.w	r4, [sp, #4]
   22cda:	f7ff fd21 	bl	22720 <memcpy>
	enh_conn_complete(&enh);
   22cde:	a802      	add	r0, sp, #8
   22ce0:	f7e6 fee4 	bl	9aac <enh_conn_complete>
}
   22ce4:	b00a      	add	sp, #40	; 0x28
   22ce6:	bd10      	pop	{r4, pc}

00022ce8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22ce8:	f3bf 8f5b 	dmb	ish
   22cec:	6800      	ldr	r0, [r0, #0]
   22cee:	f3bf 8f5b 	dmb	ish
}
   22cf2:	4770      	bx	lr

00022cf4 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   22cf4:	89c3      	ldrh	r3, [r0, #14]
{
   22cf6:	b510      	push	{r4, lr}
   22cf8:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   22cfa:	b12b      	cbz	r3, 22d08 <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   22cfc:	6900      	ldr	r0, [r0, #16]
   22cfe:	f7fb f95b 	bl	1dfb8 <net_buf_unref>
	conn->rx = NULL;
   22d02:	2300      	movs	r3, #0
   22d04:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   22d06:	81e3      	strh	r3, [r4, #14]
}
   22d08:	bd10      	pop	{r4, pc}

00022d0a <atomic_dec>:
{
   22d0a:	4603      	mov	r3, r0
}
   22d0c:	f3bf 8f5b 	dmb	ish
   22d10:	e853 0f00 	ldrex	r0, [r3]
   22d14:	1e42      	subs	r2, r0, #1
   22d16:	e843 2100 	strex	r1, r2, [r3]
   22d1a:	2900      	cmp	r1, #0
   22d1c:	d1f8      	bne.n	22d10 <atomic_dec+0x6>
   22d1e:	f3bf 8f5b 	dmb	ish
   22d22:	4770      	bx	lr

00022d24 <atomic_inc>:
{
   22d24:	4603      	mov	r3, r0
}
   22d26:	f3bf 8f5b 	dmb	ish
   22d2a:	e853 0f00 	ldrex	r0, [r3]
   22d2e:	1c42      	adds	r2, r0, #1
   22d30:	e843 2100 	strex	r1, r2, [r3]
   22d34:	2900      	cmp	r1, #0
   22d36:	d1f8      	bne.n	22d2a <atomic_inc+0x6>
   22d38:	f3bf 8f5b 	dmb	ish
   22d3c:	4770      	bx	lr

00022d3e <tx_notify>:
{
   22d3e:	b570      	push	{r4, r5, r6, lr}
   22d40:	4604      	mov	r4, r0
	__asm__ volatile(
   22d42:	f04f 0220 	mov.w	r2, #32
   22d46:	f3ef 8311 	mrs	r3, BASEPRI
   22d4a:	f382 8811 	msr	BASEPRI, r2
   22d4e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   22d52:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   22d54:	b920      	cbnz	r0, 22d60 <tx_notify+0x22>
	__asm__ volatile(
   22d56:	f383 8811 	msr	BASEPRI, r3
   22d5a:	f3bf 8f6f 	isb	sy
}
   22d5e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22d60:	6a61      	ldr	r1, [r4, #36]	; 0x24
   22d62:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   22d64:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22d66:	4288      	cmp	r0, r1
	list->tail = node;
   22d68:	bf08      	it	eq
   22d6a:	6262      	streq	r2, [r4, #36]	; 0x24
   22d6c:	f383 8811 	msr	BASEPRI, r3
   22d70:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   22d74:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   22d78:	f7e7 f8c0 	bl	9efc <tx_free>
		cb(conn, user_data);
   22d7c:	4631      	mov	r1, r6
   22d7e:	4620      	mov	r0, r4
   22d80:	47a8      	blx	r5
	while (1) {
   22d82:	e7de      	b.n	22d42 <tx_notify+0x4>

00022d84 <tx_complete_work>:
	tx_notify(conn);
   22d84:	3828      	subs	r0, #40	; 0x28
   22d86:	f7ff bfda 	b.w	22d3e <tx_notify>

00022d8a <bt_conn_le_start_encryption>:
{
   22d8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22d8e:	4682      	mov	sl, r0
   22d90:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   22d92:	f242 0019 	movw	r0, #8217	; 0x2019
   22d96:	211c      	movs	r1, #28
{
   22d98:	9e08      	ldr	r6, [sp, #32]
   22d9a:	4690      	mov	r8, r2
   22d9c:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   22d9e:	f7e5 f8c7 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
   22da2:	4605      	mov	r5, r0
   22da4:	b340      	cbz	r0, 22df8 <bt_conn_le_start_encryption+0x6e>
	cp = net_buf_add(buf, sizeof(*cp));
   22da6:	211c      	movs	r1, #28
   22da8:	3008      	adds	r0, #8
   22daa:	f002 fb1f 	bl	253ec <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   22dae:	f8ba 3000 	ldrh.w	r3, [sl]
	cp = net_buf_add(buf, sizeof(*cp));
   22db2:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   22db4:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   22db6:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   22dba:	4649      	mov	r1, r9
   22dbc:	f7ff fcb0 	bl	22720 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   22dc0:	2202      	movs	r2, #2
   22dc2:	4641      	mov	r1, r8
   22dc4:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   22dc8:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   22dca:	f7ff fca9 	bl	22720 <memcpy>
	memcpy(cp->ltk, ltk, len);
   22dce:	4632      	mov	r2, r6
   22dd0:	4639      	mov	r1, r7
   22dd2:	4620      	mov	r0, r4
   22dd4:	f7ff fca4 	bl	22720 <memcpy>
	if (len < sizeof(cp->ltk)) {
   22dd8:	2e0f      	cmp	r6, #15
   22dda:	d805      	bhi.n	22de8 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   22ddc:	f1c6 0210 	rsb	r2, r6, #16
   22de0:	2100      	movs	r1, #0
   22de2:	19a0      	adds	r0, r4, r6
   22de4:	f7ff fcc7 	bl	22776 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   22de8:	4629      	mov	r1, r5
   22dea:	2200      	movs	r2, #0
}
   22dec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   22df0:	f242 0019 	movw	r0, #8217	; 0x2019
   22df4:	f7e5 b9f8 	b.w	81e8 <bt_hci_cmd_send_sync>
}
   22df8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   22dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00022e00 <bt_conn_set_security>:
{
   22e00:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   22e02:	7b43      	ldrb	r3, [r0, #13]
   22e04:	2b06      	cmp	r3, #6
{
   22e06:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   22e08:	d128      	bne.n	22e5c <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   22e0a:	7a43      	ldrb	r3, [r0, #9]
   22e0c:	428b      	cmp	r3, r1
   22e0e:	d228      	bcs.n	22e62 <bt_conn_set_security+0x62>
   22e10:	7a83      	ldrb	r3, [r0, #10]
   22e12:	428b      	cmp	r3, r1
   22e14:	d225      	bcs.n	22e62 <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22e16:	f3bf 8f5b 	dmb	ish
	if (val) {
   22e1a:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   22e1c:	f100 0304 	add.w	r3, r0, #4
   22e20:	d513      	bpl.n	22e4a <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22e22:	e853 2f00 	ldrex	r2, [r3]
   22e26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   22e2a:	e843 2000 	strex	r0, r2, [r3]
   22e2e:	2800      	cmp	r0, #0
   22e30:	d1f7      	bne.n	22e22 <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22e32:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   22e36:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   22e3a:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   22e3c:	4620      	mov	r0, r4
   22e3e:	f002 f99b 	bl	25178 <bt_smp_start_security>
	if (err) {
   22e42:	b108      	cbz	r0, 22e48 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   22e44:	7a63      	ldrb	r3, [r4, #9]
   22e46:	72a3      	strb	r3, [r4, #10]
}
   22e48:	bd10      	pop	{r4, pc}
   22e4a:	e853 2f00 	ldrex	r2, [r3]
   22e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   22e52:	e843 2000 	strex	r0, r2, [r3]
   22e56:	2800      	cmp	r0, #0
   22e58:	d0eb      	beq.n	22e32 <bt_conn_set_security+0x32>
   22e5a:	e7f6      	b.n	22e4a <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   22e5c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   22e60:	e7f2      	b.n	22e48 <bt_conn_set_security+0x48>
		return 0;
   22e62:	2000      	movs	r0, #0
   22e64:	e7f0      	b.n	22e48 <bt_conn_set_security+0x48>

00022e66 <bt_conn_get_security>:
}
   22e66:	7a40      	ldrb	r0, [r0, #9]
   22e68:	4770      	bx	lr

00022e6a <bt_conn_is_peer_addr_le>:
{
   22e6a:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   22e6c:	7a03      	ldrb	r3, [r0, #8]
   22e6e:	428b      	cmp	r3, r1
{
   22e70:	4604      	mov	r4, r0
   22e72:	4615      	mov	r5, r2
	if (id != conn->id) {
   22e74:	d115      	bne.n	22ea2 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   22e76:	f100 0188 	add.w	r1, r0, #136	; 0x88
   22e7a:	2207      	movs	r2, #7
   22e7c:	4628      	mov	r0, r5
   22e7e:	f7ff fc3f 	bl	22700 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   22e82:	b180      	cbz	r0, 22ea6 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   22e84:	78e3      	ldrb	r3, [r4, #3]
   22e86:	2207      	movs	r2, #7
   22e88:	b943      	cbnz	r3, 22e9c <bt_conn_is_peer_addr_le+0x32>
   22e8a:	f104 0196 	add.w	r1, r4, #150	; 0x96
   22e8e:	4628      	mov	r0, r5
   22e90:	f7ff fc36 	bl	22700 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   22e94:	fab0 f080 	clz	r0, r0
   22e98:	0940      	lsrs	r0, r0, #5
}
   22e9a:	bd38      	pop	{r3, r4, r5, pc}
   22e9c:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   22ea0:	e7f5      	b.n	22e8e <bt_conn_is_peer_addr_le+0x24>
		return false;
   22ea2:	2000      	movs	r0, #0
   22ea4:	e7f9      	b.n	22e9a <bt_conn_is_peer_addr_le+0x30>
		return true;
   22ea6:	2001      	movs	r0, #1
   22ea8:	e7f7      	b.n	22e9a <bt_conn_is_peer_addr_le+0x30>

00022eaa <bt_conn_ref>:
{
   22eaa:	b510      	push	{r4, lr}
   22eac:	4604      	mov	r4, r0
	atomic_val_t old = atomic_inc(&conn->ref);
   22eae:	3054      	adds	r0, #84	; 0x54
   22eb0:	f7ff ff38 	bl	22d24 <atomic_inc>
}
   22eb4:	4620      	mov	r0, r4
   22eb6:	bd10      	pop	{r4, pc}

00022eb8 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   22eb8:	3054      	adds	r0, #84	; 0x54
   22eba:	f7ff bf26 	b.w	22d0a <atomic_dec>

00022ebe <bt_conn_get_dst>:
}
   22ebe:	3088      	adds	r0, #136	; 0x88
   22ec0:	4770      	bx	lr

00022ec2 <bt_conn_le_conn_update>:
{
   22ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22ec4:	4607      	mov	r7, r0
   22ec6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   22ec8:	f242 0013 	movw	r0, #8211	; 0x2013
   22ecc:	210e      	movs	r1, #14
   22ece:	f7e5 f82f 	bl	7f30 <bt_hci_cmd_create>
	if (!buf) {
   22ed2:	4606      	mov	r6, r0
   22ed4:	b1d0      	cbz	r0, 22f0c <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   22ed6:	210e      	movs	r1, #14
   22ed8:	3008      	adds	r0, #8
   22eda:	f002 fa87 	bl	253ec <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   22ede:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   22ee0:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   22ee2:	2100      	movs	r1, #0
   22ee4:	f7ff fc47 	bl	22776 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   22ee8:	883b      	ldrh	r3, [r7, #0]
   22eea:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   22eec:	882b      	ldrh	r3, [r5, #0]
   22eee:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   22ef0:	886b      	ldrh	r3, [r5, #2]
   22ef2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   22ef4:	88ab      	ldrh	r3, [r5, #4]
   22ef6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   22ef8:	88eb      	ldrh	r3, [r5, #6]
   22efa:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   22efc:	4631      	mov	r1, r6
   22efe:	2200      	movs	r2, #0
}
   22f00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   22f04:	f242 0013 	movw	r0, #8211	; 0x2013
   22f08:	f7e5 b96e 	b.w	81e8 <bt_hci_cmd_send_sync>
}
   22f0c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   22f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022f12 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   22f12:	6813      	ldr	r3, [r2, #0]
   22f14:	b939      	cbnz	r1, 22f26 <sys_slist_remove+0x14>
   22f16:	6841      	ldr	r1, [r0, #4]
	list->head = node;
   22f18:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   22f1a:	428a      	cmp	r2, r1
   22f1c:	d100      	bne.n	22f20 <sys_slist_remove+0xe>
	list->tail = node;
   22f1e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   22f20:	2300      	movs	r3, #0
   22f22:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   22f24:	4770      	bx	lr
	parent->next = child;
   22f26:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   22f28:	6843      	ldr	r3, [r0, #4]
   22f2a:	429a      	cmp	r2, r3
	list->tail = node;
   22f2c:	bf08      	it	eq
   22f2e:	6041      	streq	r1, [r0, #4]
}
   22f30:	e7f6      	b.n	22f20 <sys_slist_remove+0xe>

00022f32 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   22f32:	4603      	mov	r3, r0
	size_t bytes = 0;
   22f34:	2000      	movs	r0, #0

	while (buf) {
   22f36:	b903      	cbnz	r3, 22f3a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   22f38:	4770      	bx	lr
		bytes += buf->len;
   22f3a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   22f3c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   22f3e:	4410      	add	r0, r2
		buf = buf->frags;
   22f40:	e7f9      	b.n	22f36 <net_buf_frags_len+0x4>

00022f42 <__l2cap_lookup_ident>:
{
   22f42:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22f44:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
{
   22f46:	460b      	mov	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22f48:	b164      	cbz	r4, 22f64 <__l2cap_lookup_ident+0x22>
   22f4a:	3c08      	subs	r4, #8
   22f4c:	2100      	movs	r1, #0
   22f4e:	b14c      	cbz	r4, 22f64 <__l2cap_lookup_ident+0x22>
		if (chan->ident == ident) {
   22f50:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
   22f54:	429d      	cmp	r5, r3
   22f56:	d107      	bne.n	22f68 <__l2cap_lookup_ident+0x26>
			if (remove) {
   22f58:	b122      	cbz	r2, 22f64 <__l2cap_lookup_ident+0x22>
				sys_slist_remove(&conn->channels, prev,
   22f5a:	f104 0208 	add.w	r2, r4, #8
   22f5e:	304c      	adds	r0, #76	; 0x4c
   22f60:	f7ff ffd7 	bl	22f12 <sys_slist_remove>
}
   22f64:	4620      	mov	r0, r4
   22f66:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   22f68:	f114 0108 	adds.w	r1, r4, #8
   22f6c:	d004      	beq.n	22f78 <__l2cap_lookup_ident+0x36>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22f6e:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22f70:	2c00      	cmp	r4, #0
   22f72:	d0f7      	beq.n	22f64 <__l2cap_lookup_ident+0x22>
   22f74:	3c08      	subs	r4, #8
   22f76:	e7ea      	b.n	22f4e <__l2cap_lookup_ident+0xc>
	return NULL;
   22f78:	460c      	mov	r4, r1
   22f7a:	e7f3      	b.n	22f64 <__l2cap_lookup_ident+0x22>

00022f7c <l2cap_remove_rx_cid>:
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
   22f7c:	f1a1 0240 	sub.w	r2, r1, #64	; 0x40
   22f80:	2a3f      	cmp	r2, #63	; 0x3f
{
   22f82:	b538      	push	{r3, r4, r5, lr}
   22f84:	460b      	mov	r3, r1
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
   22f86:	d816      	bhi.n	22fb6 <l2cap_remove_rx_cid+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22f88:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
   22f8a:	b15c      	cbz	r4, 22fa4 <l2cap_remove_rx_cid+0x28>
   22f8c:	3c08      	subs	r4, #8
   22f8e:	2100      	movs	r1, #0
   22f90:	b144      	cbz	r4, 22fa4 <l2cap_remove_rx_cid+0x28>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   22f92:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
   22f96:	429d      	cmp	r5, r3
   22f98:	f104 0208 	add.w	r2, r4, #8
   22f9c:	d104      	bne.n	22fa8 <l2cap_remove_rx_cid+0x2c>
			sys_slist_remove(&conn->channels, prev, &chan->node);
   22f9e:	304c      	adds	r0, #76	; 0x4c
   22fa0:	f7ff ffb7 	bl	22f12 <sys_slist_remove>
}
   22fa4:	4620      	mov	r0, r4
   22fa6:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   22fa8:	b13a      	cbz	r2, 22fba <l2cap_remove_rx_cid+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22faa:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22fac:	2c00      	cmp	r4, #0
   22fae:	d0f9      	beq.n	22fa4 <l2cap_remove_rx_cid+0x28>
   22fb0:	3c08      	subs	r4, #8
   22fb2:	4611      	mov	r1, r2
   22fb4:	e7ec      	b.n	22f90 <l2cap_remove_rx_cid+0x14>
		return NULL;
   22fb6:	2400      	movs	r4, #0
   22fb8:	e7f4      	b.n	22fa4 <l2cap_remove_rx_cid+0x28>
   22fba:	4614      	mov	r4, r2
   22fbc:	e7f2      	b.n	22fa4 <l2cap_remove_rx_cid+0x28>

00022fbe <l2cap_alloc_frag>:
{
   22fbe:	b508      	push	{r3, lr}
	frag = chan->chan.ops->alloc_buf(&chan->chan);
   22fc0:	6853      	ldr	r3, [r2, #4]
{
   22fc2:	4610      	mov	r0, r2
	frag = chan->chan.ops->alloc_buf(&chan->chan);
   22fc4:	68db      	ldr	r3, [r3, #12]
   22fc6:	4798      	blx	r3
}
   22fc8:	2800      	cmp	r0, #0
   22fca:	bf38      	it	cc
   22fcc:	2000      	movcc	r0, #0
   22fce:	bd08      	pop	{r3, pc}

00022fd0 <l2cap_connected>:
}
   22fd0:	4770      	bx	lr

00022fd2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22fd2:	f3bf 8f5b 	dmb	ish
   22fd6:	6800      	ldr	r0, [r0, #0]
   22fd8:	f3bf 8f5b 	dmb	ish
}
   22fdc:	4770      	bx	lr

00022fde <atomic_add>:
{
   22fde:	4603      	mov	r3, r0
}
   22fe0:	f3bf 8f5b 	dmb	ish
   22fe4:	e853 0f00 	ldrex	r0, [r3]
   22fe8:	1842      	adds	r2, r0, r1
   22fea:	e843 2c00 	strex	ip, r2, [r3]
   22fee:	f1bc 0f00 	cmp.w	ip, #0
   22ff2:	d1f7      	bne.n	22fe4 <atomic_add+0x6>
   22ff4:	f3bf 8f5b 	dmb	ish
   22ff8:	4770      	bx	lr

00022ffa <l2cap_chan_destroy>:
{
   22ffa:	b570      	push	{r4, r5, r6, lr}
   22ffc:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
   22ffe:	3010      	adds	r0, #16
   23000:	f002 ffac 	bl	25f5c <k_delayed_work_cancel>
	if (ch->tx_buf) {
   23004:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   23008:	b120      	cbz	r0, 23014 <l2cap_chan_destroy+0x1a>
		net_buf_unref(ch->tx_buf);
   2300a:	f7fa ffd5 	bl	1dfb8 <net_buf_unref>
		ch->tx_buf = NULL;
   2300e:	2300      	movs	r3, #0
   23010:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
   23014:	f104 0568 	add.w	r5, r4, #104	; 0x68
   23018:	2200      	movs	r2, #0
   2301a:	2300      	movs	r3, #0
   2301c:	4628      	mov	r0, r5
   2301e:	f002 f982 	bl	25326 <net_buf_get>
   23022:	b990      	cbnz	r0, 2304a <l2cap_chan_destroy+0x50>
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
   23024:	f104 06a4 	add.w	r6, r4, #164	; 0xa4
   23028:	2200      	movs	r2, #0
   2302a:	2300      	movs	r3, #0
   2302c:	4630      	mov	r0, r6
   2302e:	f002 f97a 	bl	25326 <net_buf_get>
   23032:	4605      	mov	r5, r0
   23034:	b960      	cbnz	r0, 23050 <l2cap_chan_destroy+0x56>
	if (ch->_sdu) {
   23036:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   2303a:	b128      	cbz	r0, 23048 <l2cap_chan_destroy+0x4e>
		net_buf_unref(ch->_sdu);
   2303c:	f7fa ffbc 	bl	1dfb8 <net_buf_unref>
		ch->_sdu = NULL;
   23040:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		ch->_sdu_len = 0U;
   23044:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
}
   23048:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2304a:	f7fa ffb5 	bl	1dfb8 <net_buf_unref>
   2304e:	e7e3      	b.n	23018 <l2cap_chan_destroy+0x1e>
		net_buf_unref(buf);
   23050:	f7fa ffb2 	bl	1dfb8 <net_buf_unref>
   23054:	e7e8      	b.n	23028 <l2cap_chan_destroy+0x2e>

00023056 <l2cap_chan_rx_init>:
	if (!chan->rx.mtu) {
   23056:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   2305a:	b913      	cbnz	r3, 23062 <l2cap_chan_rx_init+0xc>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
   2305c:	23f5      	movs	r3, #245	; 0xf5
   2305e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	if (!chan->rx.init_credits) {
   23062:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
   23066:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   2306a:	b94a      	cbnz	r2, 23080 <l2cap_chan_rx_init+0x2a>
		if (chan->chan.ops->alloc_buf) {
   2306c:	6842      	ldr	r2, [r0, #4]
   2306e:	68d2      	ldr	r2, [r2, #12]
   23070:	b1ca      	cbz	r2, 230a6 <l2cap_chan_rx_init+0x50>
			chan->rx.init_credits = (chan->rx.mtu +
   23072:	f103 02f6 	add.w	r2, r3, #246	; 0xf6
						 (L2CAP_MAX_LE_MPS - 1)) /
   23076:	21f7      	movs	r1, #247	; 0xf7
   23078:	fbb2 f2f1 	udiv	r2, r2, r1
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
   2307c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
	chan->rx.mps = MIN(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
   23080:	3302      	adds	r3, #2
   23082:	2bf7      	cmp	r3, #247	; 0xf7
   23084:	bfa8      	it	ge
   23086:	23f7      	movge	r3, #247	; 0xf7
   23088:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2308c:	3058      	adds	r0, #88	; 0x58
   2308e:	2300      	movs	r3, #0
   23090:	f3bf 8f5b 	dmb	ish
   23094:	e850 2f00 	ldrex	r2, [r0]
   23098:	e840 3100 	strex	r1, r3, [r0]
   2309c:	2900      	cmp	r1, #0
   2309e:	d1f9      	bne.n	23094 <l2cap_chan_rx_init+0x3e>
   230a0:	f3bf 8f5b 	dmb	ish
}
   230a4:	4770      	bx	lr
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
   230a6:	2202      	movs	r2, #2
   230a8:	e7e8      	b.n	2307c <l2cap_chan_rx_init+0x26>

000230aa <l2cap_disconnected>:
   230aa:	4770      	bx	lr

000230ac <l2cap_chan_tx_give_credits>:
{
   230ac:	b510      	push	{r4, lr}
   230ae:	4604      	mov	r4, r0
	atomic_add(&chan->tx.credits, credits);
   230b0:	3064      	adds	r0, #100	; 0x64
   230b2:	f7ff ff94 	bl	22fde <atomic_add>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   230b6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(chan->chan.status, BT_L2CAP_STATUS_OUT) &&
   230ba:	f104 0140 	add.w	r1, r4, #64	; 0x40
   230be:	e851 3f00 	ldrex	r3, [r1]
   230c2:	f043 0201 	orr.w	r2, r3, #1
   230c6:	e841 2000 	strex	r0, r2, [r1]
   230ca:	2800      	cmp	r0, #0
   230cc:	d1f7      	bne.n	230be <l2cap_chan_tx_give_credits+0x12>
   230ce:	f3bf 8f5b 	dmb	ish
   230d2:	07db      	lsls	r3, r3, #31
   230d4:	d406      	bmi.n	230e4 <l2cap_chan_tx_give_credits+0x38>
	    chan->chan.ops->status) {
   230d6:	6863      	ldr	r3, [r4, #4]
   230d8:	699b      	ldr	r3, [r3, #24]
	if (!atomic_test_and_set_bit(chan->chan.status, BT_L2CAP_STATUS_OUT) &&
   230da:	b11b      	cbz	r3, 230e4 <l2cap_chan_tx_give_credits+0x38>
		chan->chan.ops->status(&chan->chan, chan->chan.status);
   230dc:	4620      	mov	r0, r4
}
   230de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->chan.ops->status(&chan->chan, chan->chan.status);
   230e2:	4718      	bx	r3
}
   230e4:	bd10      	pop	{r4, pc}

000230e6 <l2cap_change_security>:
{
   230e6:	b510      	push	{r4, lr}
	if (atomic_test_bit(chan->chan.status,
   230e8:	f100 0440 	add.w	r4, r0, #64	; 0x40
{
   230ec:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   230ee:	4620      	mov	r0, r4
   230f0:	f7ff ff6f 	bl	22fd2 <atomic_get>
	if (atomic_test_bit(chan->chan.status,
   230f4:	0742      	lsls	r2, r0, #29
   230f6:	d42b      	bmi.n	23150 <l2cap_change_security+0x6a>
	switch (err) {
   230f8:	2905      	cmp	r1, #5
   230fa:	d01d      	beq.n	23138 <l2cap_change_security+0x52>
   230fc:	2908      	cmp	r1, #8
   230fe:	d12a      	bne.n	23156 <l2cap_change_security+0x70>
		if (chan->chan.required_sec_level >= BT_SECURITY_L2) {
   23100:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
   23104:	2a01      	cmp	r2, #1
   23106:	d829      	bhi.n	2315c <l2cap_change_security+0x76>
		chan->chan.required_sec_level = BT_SECURITY_L2;
   23108:	2202      	movs	r2, #2
			chan->chan.required_sec_level = BT_SECURITY_L4;
   2310a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	ret = bt_conn_set_security(chan->chan.conn,
   2310e:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
   23112:	6818      	ldr	r0, [r3, #0]
   23114:	f7ff fe74 	bl	22e00 <bt_conn_set_security>
	if (ret < 0) {
   23118:	2800      	cmp	r0, #0
   2311a:	db0c      	blt.n	23136 <l2cap_change_security+0x50>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2311c:	f3bf 8f5b 	dmb	ish
   23120:	e854 3f00 	ldrex	r3, [r4]
   23124:	f043 0304 	orr.w	r3, r3, #4
   23128:	e844 3200 	strex	r2, r3, [r4]
   2312c:	2a00      	cmp	r2, #0
   2312e:	d1f7      	bne.n	23120 <l2cap_change_security+0x3a>
   23130:	f3bf 8f5b 	dmb	ish
	return 0;
   23134:	2000      	movs	r0, #0
}
   23136:	bd10      	pop	{r4, pc}
		if (chan->chan.required_sec_level < BT_SECURITY_L2) {
   23138:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
   2313c:	2a01      	cmp	r2, #1
   2313e:	d9e3      	bls.n	23108 <l2cap_change_security+0x22>
		} else if (chan->chan.required_sec_level < BT_SECURITY_L3) {
   23140:	2a02      	cmp	r2, #2
   23142:	d101      	bne.n	23148 <l2cap_change_security+0x62>
			chan->chan.required_sec_level = BT_SECURITY_L3;
   23144:	2203      	movs	r2, #3
   23146:	e7e0      	b.n	2310a <l2cap_change_security+0x24>
		} else if (chan->chan.required_sec_level < BT_SECURITY_L4) {
   23148:	2a03      	cmp	r2, #3
   2314a:	d107      	bne.n	2315c <l2cap_change_security+0x76>
			chan->chan.required_sec_level = BT_SECURITY_L4;
   2314c:	2204      	movs	r2, #4
   2314e:	e7dc      	b.n	2310a <l2cap_change_security+0x24>
		return -EINPROGRESS;
   23150:	f06f 0043 	mvn.w	r0, #67	; 0x43
   23154:	e7ef      	b.n	23136 <l2cap_change_security+0x50>
	switch (err) {
   23156:	f06f 0015 	mvn.w	r0, #21
   2315a:	e7ec      	b.n	23136 <l2cap_change_security+0x50>
			return -EALREADY;
   2315c:	f06f 0044 	mvn.w	r0, #68	; 0x44
   23160:	e7e9      	b.n	23136 <l2cap_change_security+0x50>

00023162 <l2cap_chan_tx_resume>:
{
   23162:	b508      	push	{r3, lr}
   23164:	4603      	mov	r3, r0
	if (!atomic_get(&ch->tx.credits) ||
   23166:	3064      	adds	r0, #100	; 0x64
   23168:	f7ff ff33 	bl	22fd2 <atomic_get>
   2316c:	b150      	cbz	r0, 23184 <l2cap_chan_tx_resume+0x22>
   2316e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   23170:	b912      	cbnz	r2, 23178 <l2cap_chan_tx_resume+0x16>
	    (k_fifo_is_empty(&ch->tx_queue) && !ch->tx_buf)) {
   23172:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   23176:	b12a      	cbz	r2, 23184 <l2cap_chan_tx_resume+0x22>
	k_work_submit_to_queue(&k_sys_work_q, work);
   23178:	f103 0084 	add.w	r0, r3, #132	; 0x84
}
   2317c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23180:	f7e7 bf0c 	b.w	af9c <k_work_submit_to_queue.constprop.0>
   23184:	bd08      	pop	{r3, pc}

00023186 <l2cap_chan_seg_sent>:
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   23186:	4608      	mov	r0, r1
   23188:	f7ff bfeb 	b.w	23162 <l2cap_chan_tx_resume>

0002318c <l2cap_chan_sdu_sent>:
	if (chan->ops->sent) {
   2318c:	684b      	ldr	r3, [r1, #4]
   2318e:	695b      	ldr	r3, [r3, #20]
{
   23190:	b510      	push	{r4, lr}
   23192:	460c      	mov	r4, r1
	if (chan->ops->sent) {
   23194:	b10b      	cbz	r3, 2319a <l2cap_chan_sdu_sent+0xe>
		chan->ops->sent(chan);
   23196:	4608      	mov	r0, r1
   23198:	4798      	blx	r3
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   2319a:	4620      	mov	r0, r4
}
   2319c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   231a0:	f7ff bfdf 	b.w	23162 <l2cap_chan_tx_resume>

000231a4 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   231a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   231a6:	b410      	push	{r4}
   231a8:	460c      	mov	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   231aa:	b113      	cbz	r3, 231b2 <bt_l2cap_chan_remove+0xe>
   231ac:	3b08      	subs	r3, #8
   231ae:	2100      	movs	r1, #0
   231b0:	b90b      	cbnz	r3, 231b6 <bt_l2cap_chan_remove+0x12>
}
   231b2:	bc10      	pop	{r4}
   231b4:	4770      	bx	lr
		if (chan == ch) {
   231b6:	42a3      	cmp	r3, r4
   231b8:	f103 0208 	add.w	r2, r3, #8
   231bc:	d103      	bne.n	231c6 <bt_l2cap_chan_remove+0x22>
}
   231be:	bc10      	pop	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   231c0:	304c      	adds	r0, #76	; 0x4c
   231c2:	f7ff bea6 	b.w	22f12 <sys_slist_remove>
Z_GENLIST_PEEK_NEXT(slist, snode)
   231c6:	2a00      	cmp	r2, #0
   231c8:	d0f3      	beq.n	231b2 <bt_l2cap_chan_remove+0xe>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   231ca:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   231cc:	2b00      	cmp	r3, #0
   231ce:	d0f0      	beq.n	231b2 <bt_l2cap_chan_remove+0xe>
   231d0:	3b08      	subs	r3, #8
   231d2:	4611      	mov	r1, r2
   231d4:	e7ec      	b.n	231b0 <bt_l2cap_chan_remove+0xc>

000231d6 <bt_l2cap_chan_del>:
{
   231d6:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   231d8:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   231dc:	4604      	mov	r4, r0
	if (!chan->conn) {
   231de:	b123      	cbz	r3, 231ea <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   231e0:	686b      	ldr	r3, [r5, #4]
   231e2:	b103      	cbz	r3, 231e6 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   231e4:	4798      	blx	r3
	chan->conn = NULL;
   231e6:	2300      	movs	r3, #0
   231e8:	6023      	str	r3, [r4, #0]
	chan->state = state;
   231ea:	2300      	movs	r3, #0
   231ec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	chan->psm = 0U;
   231f0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
	if (chan->destroy) {
   231f4:	68e3      	ldr	r3, [r4, #12]
   231f6:	b10b      	cbz	r3, 231fc <bt_l2cap_chan_del+0x26>
		chan->destroy(chan);
   231f8:	4620      	mov	r0, r4
   231fa:	4798      	blx	r3
	if (ops->released) {
   231fc:	69eb      	ldr	r3, [r5, #28]
   231fe:	b11b      	cbz	r3, 23208 <bt_l2cap_chan_del+0x32>
		ops->released(chan);
   23200:	4620      	mov	r0, r4
}
   23202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   23206:	4718      	bx	r3
}
   23208:	bd70      	pop	{r4, r5, r6, pc}

0002320a <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2320a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   2320c:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2320e:	b18b      	cbz	r3, 23234 <bt_l2cap_disconnected+0x2a>
   23210:	f1b3 0008 	subs.w	r0, r3, #8
   23214:	d00e      	beq.n	23234 <bt_l2cap_disconnected+0x2a>
   23216:	681c      	ldr	r4, [r3, #0]
   23218:	b104      	cbz	r4, 2321c <bt_l2cap_disconnected+0x12>
   2321a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2321c:	f7ff ffdb 	bl	231d6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   23220:	b144      	cbz	r4, 23234 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23222:	f114 0308 	adds.w	r3, r4, #8
   23226:	d002      	beq.n	2322e <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23228:	68a3      	ldr	r3, [r4, #8]
   2322a:	b103      	cbz	r3, 2322e <bt_l2cap_disconnected+0x24>
   2322c:	3b08      	subs	r3, #8
{
   2322e:	4620      	mov	r0, r4
   23230:	461c      	mov	r4, r3
   23232:	e7f3      	b.n	2321c <bt_l2cap_disconnected+0x12>
}
   23234:	bd10      	pop	{r4, pc}

00023236 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   23236:	3104      	adds	r1, #4
   23238:	f7e7 bcc8 	b.w	abcc <bt_conn_create_pdu_timeout>

0002323c <bt_l2cap_send_cb>:
{
   2323c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23240:	4614      	mov	r4, r2
   23242:	4605      	mov	r5, r0
   23244:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   23246:	f102 0008 	add.w	r0, r2, #8
   2324a:	2104      	movs	r1, #4
{
   2324c:	461e      	mov	r6, r3
   2324e:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   23252:	f002 f8ec 	bl	2542e <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   23256:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   23258:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2325a:	3a04      	subs	r2, #4
   2325c:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2325e:	4643      	mov	r3, r8
   23260:	4632      	mov	r2, r6
   23262:	4621      	mov	r1, r4
   23264:	4628      	mov	r0, r5
}
   23266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2326a:	f7e7 b847 	b.w	a2fc <bt_conn_send_cb>

0002326e <l2cap_chan_le_send_sdu>:
{
   2326e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	total_len = net_buf_frags_len(*buf) + sent;
   23272:	680c      	ldr	r4, [r1, #0]
{
   23274:	4607      	mov	r7, r0
	total_len = net_buf_frags_len(*buf) + sent;
   23276:	4620      	mov	r0, r4
{
   23278:	4616      	mov	r6, r2
   2327a:	4688      	mov	r8, r1
	total_len = net_buf_frags_len(*buf) + sent;
   2327c:	f7ff fe59 	bl	22f32 <net_buf_frags_len>
	if (total_len > ch->tx.mtu) {
   23280:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
	total_len = net_buf_frags_len(*buf) + sent;
   23284:	eb06 0900 	add.w	r9, r6, r0
	if (total_len > ch->tx.mtu) {
   23288:	454b      	cmp	r3, r9
   2328a:	db2e      	blt.n	232ea <l2cap_chan_le_send_sdu+0x7c>
	if (!frag->len && frag->frags) {
   2328c:	89a3      	ldrh	r3, [r4, #12]
   2328e:	b91b      	cbnz	r3, 23298 <l2cap_chan_le_send_sdu+0x2a>
   23290:	6823      	ldr	r3, [r4, #0]
   23292:	2b00      	cmp	r3, #0
   23294:	bf18      	it	ne
   23296:	461c      	movne	r4, r3
	if (!sent) {
   23298:	b986      	cbnz	r6, 232bc <l2cap_chan_le_send_sdu+0x4e>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
   2329a:	2202      	movs	r2, #2
   2329c:	4621      	mov	r1, r4
   2329e:	4638      	mov	r0, r7
   232a0:	f7e7 febc 	bl	b01c <l2cap_chan_le_send>
		if (ret < 0) {
   232a4:	1e05      	subs	r5, r0, #0
   232a6:	da08      	bge.n	232ba <l2cap_chan_le_send_sdu+0x4c>
			if (ret == -EAGAIN) {
   232a8:	f115 0f0b 	cmn.w	r5, #11
				data_sent(frag)->len = sent;
   232ac:	bf08      	it	eq
   232ae:	82a6      	strheq	r6, [r4, #20]
			*buf = frag;
   232b0:	f8c8 4000 	str.w	r4, [r8]
}
   232b4:	4628      	mov	r0, r5
   232b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sent = ret;
   232ba:	b2ae      	uxth	r6, r5
	if (!frag->len && frag->frags) {
   232bc:	2500      	movs	r5, #0
	for (ret = 0; sent < total_len; sent += ret) {
   232be:	454e      	cmp	r6, r9
   232c0:	db03      	blt.n	232ca <l2cap_chan_le_send_sdu+0x5c>
	net_buf_unref(frag);
   232c2:	4620      	mov	r0, r4
   232c4:	f7fa fe78 	bl	1dfb8 <net_buf_unref>
	return ret;
   232c8:	e7f4      	b.n	232b4 <l2cap_chan_le_send_sdu+0x46>
		if (!frag->len) {
   232ca:	89a0      	ldrh	r0, [r4, #12]
   232cc:	b918      	cbnz	r0, 232d6 <l2cap_chan_le_send_sdu+0x68>
			frag = net_buf_frag_del(NULL, frag);
   232ce:	4621      	mov	r1, r4
   232d0:	f002 f880 	bl	253d4 <net_buf_frag_del>
   232d4:	4604      	mov	r4, r0
		ret = l2cap_chan_le_send(ch, frag, 0);
   232d6:	2200      	movs	r2, #0
   232d8:	4621      	mov	r1, r4
   232da:	4638      	mov	r0, r7
   232dc:	f7e7 fe9e 	bl	b01c <l2cap_chan_le_send>
		if (ret < 0) {
   232e0:	1e05      	subs	r5, r0, #0
   232e2:	dbe1      	blt.n	232a8 <l2cap_chan_le_send_sdu+0x3a>
	for (ret = 0; sent < total_len; sent += ret) {
   232e4:	442e      	add	r6, r5
   232e6:	b2b6      	uxth	r6, r6
   232e8:	e7e9      	b.n	232be <l2cap_chan_le_send_sdu+0x50>
		return -EMSGSIZE;
   232ea:	f06f 0523 	mvn.w	r5, #35	; 0x23
   232ee:	e7e1      	b.n	232b4 <l2cap_chan_le_send_sdu+0x46>

000232f0 <l2cap_chan_tx_process>:
{
   232f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   232f2:	4604      	mov	r4, r0
	ch = CONTAINER_OF(work, struct bt_l2cap_le_chan, tx_work);
   232f4:	f1a0 0584 	sub.w	r5, r0, #132	; 0x84
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
   232f8:	f1a0 061c 	sub.w	r6, r0, #28
		ch->tx_buf = NULL;
   232fc:	2700      	movs	r7, #0
	if (ch->tx_buf) {
   232fe:	f854 0c04 	ldr.w	r0, [r4, #-4]
   23302:	b188      	cbz	r0, 23328 <l2cap_chan_tx_process+0x38>
		ch->tx_buf = NULL;
   23304:	f844 7c04 	str.w	r7, [r4, #-4]
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
   23308:	9001      	str	r0, [sp, #4]
   2330a:	b158      	cbz	r0, 23324 <l2cap_chan_tx_process+0x34>
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
   2330c:	8a82      	ldrh	r2, [r0, #20]
   2330e:	a901      	add	r1, sp, #4
   23310:	4628      	mov	r0, r5
   23312:	f7ff ffac 	bl	2326e <l2cap_chan_le_send_sdu>
		if (sent < 0) {
   23316:	2800      	cmp	r0, #0
   23318:	daf1      	bge.n	232fe <l2cap_chan_tx_process+0xe>
			if (sent == -EAGAIN) {
   2331a:	300b      	adds	r0, #11
   2331c:	d102      	bne.n	23324 <l2cap_chan_tx_process+0x34>
				ch->tx_buf = buf;
   2331e:	9b01      	ldr	r3, [sp, #4]
   23320:	f844 3c04 	str.w	r3, [r4, #-4]
}
   23324:	b003      	add	sp, #12
   23326:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
   23328:	2200      	movs	r2, #0
   2332a:	2300      	movs	r3, #0
   2332c:	4630      	mov	r0, r6
   2332e:	f001 fffa 	bl	25326 <net_buf_get>
   23332:	e7e9      	b.n	23308 <l2cap_chan_tx_process+0x18>

00023334 <bt_l2cap_send.constprop.0>:
 * ignored.
 */
int bt_l2cap_send_cb(struct bt_conn *conn, uint16_t cid, struct net_buf *buf,
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
   23334:	b507      	push	{r0, r1, r2, lr}
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   23336:	2300      	movs	r3, #0
static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
   23338:	460a      	mov	r2, r1
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   2333a:	9300      	str	r3, [sp, #0]
   2333c:	2105      	movs	r1, #5
   2333e:	f7ff ff7d 	bl	2323c <bt_l2cap_send_cb>
}
   23342:	b003      	add	sp, #12
   23344:	f85d fb04 	ldr.w	pc, [sp], #4

00023348 <l2cap_send_reject>:
{
   23348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2334c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   23350:	4606      	mov	r6, r0
   23352:	4617      	mov	r7, r2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   23354:	2001      	movs	r0, #1
   23356:	f109 0202 	add.w	r2, r9, #2
{
   2335a:	461d      	mov	r5, r3
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2335c:	f7e7 fdce 	bl	aefc <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   23360:	4604      	mov	r4, r0
   23362:	b190      	cbz	r0, 2338a <l2cap_send_reject+0x42>
	rej = net_buf_add(buf, sizeof(*rej));
   23364:	f100 0808 	add.w	r8, r0, #8
   23368:	2102      	movs	r1, #2
   2336a:	4640      	mov	r0, r8
   2336c:	f002 f83e 	bl	253ec <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   23370:	8007      	strh	r7, [r0, #0]
	if (data) {
   23372:	b125      	cbz	r5, 2337e <l2cap_send_reject+0x36>
		net_buf_add_mem(buf, data, data_len);
   23374:	464a      	mov	r2, r9
   23376:	4629      	mov	r1, r5
   23378:	4640      	mov	r0, r8
   2337a:	f002 f83d 	bl	253f8 <net_buf_simple_add_mem>
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   2337e:	4621      	mov	r1, r4
   23380:	4630      	mov	r0, r6
}
   23382:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   23386:	f7ff bfd5 	b.w	23334 <bt_l2cap_send.constprop.0>
}
   2338a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002338e <l2cap_ecred_conn_req>:
{
   2338e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23392:	460d      	mov	r5, r1
	if (!chan || !channels) {
   23394:	4604      	mov	r4, r0
   23396:	b3b0      	cbz	r0, 23406 <l2cap_ecred_conn_req+0x78>
   23398:	b3a9      	cbz	r1, 23406 <l2cap_ecred_conn_req+0x78>
	ident = get_ident();
   2339a:	f7e7 fd65 	bl	ae68 <get_ident>
				      sizeof(*req) +
   2339e:	1d0a      	adds	r2, r1, #4
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_ECRED_CONN_REQ, ident,
   233a0:	0052      	lsls	r2, r2, #1
   233a2:	b292      	uxth	r2, r2
   233a4:	4601      	mov	r1, r0
	ident = get_ident();
   233a6:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_ECRED_CONN_REQ, ident,
   233a8:	2017      	movs	r0, #23
   233aa:	f7e7 fda7 	bl	aefc <l2cap_create_le_sig_pdu.isra.0>
	req = net_buf_add(buf, sizeof(*req));
   233ae:	f100 0908 	add.w	r9, r0, #8
   233b2:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_ECRED_CONN_REQ, ident,
   233b4:	4607      	mov	r7, r0
	req = net_buf_add(buf, sizeof(*req));
   233b6:	4648      	mov	r0, r9
   233b8:	f002 f818 	bl	253ec <net_buf_simple_add>
	ch = BT_L2CAP_LE_CHAN(chan[0]);
   233bc:	6822      	ldr	r2, [r4, #0]
	req->psm = sys_cpu_to_le16(ch->chan.psm);
   233be:	f8b2 1046 	ldrh.w	r1, [r2, #70]	; 0x46
   233c2:	8001      	strh	r1, [r0, #0]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
   233c4:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
   233c8:	8041      	strh	r1, [r0, #2]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
   233ca:	f8b2 1054 	ldrh.w	r1, [r2, #84]	; 0x54
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
   233ce:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
	req->mps = sys_cpu_to_le16(ch->rx.mps);
   233d2:	8081      	strh	r1, [r0, #4]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
   233d4:	80c2      	strh	r2, [r0, #6]
	for (i = 0; i < channels; i++) {
   233d6:	46a0      	mov	r8, r4
   233d8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
		ch = BT_L2CAP_LE_CHAN(chan[i]);
   233dc:	f858 3b04 	ldr.w	r3, [r8], #4
		net_buf_add_le16(buf, ch->rx.cid);
   233e0:	4648      	mov	r0, r9
   233e2:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
		ch->chan.ident = ident;
   233e6:	f883 6048 	strb.w	r6, [r3, #72]	; 0x48
		net_buf_add_le16(buf, ch->rx.cid);
   233ea:	f002 f816 	bl	2541a <net_buf_simple_add_le16>
	for (i = 0; i < channels; i++) {
   233ee:	4545      	cmp	r5, r8
   233f0:	d1f4      	bne.n	233dc <l2cap_ecred_conn_req+0x4e>
	l2cap_chan_send_req(*chan, buf, L2CAP_CONN_TIMEOUT);
   233f2:	6820      	ldr	r0, [r4, #0]
   233f4:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
   233f8:	2300      	movs	r3, #0
   233fa:	4639      	mov	r1, r7
   233fc:	f7e7 fefa 	bl	b1f4 <l2cap_chan_send_req>
	return 0;
   23400:	2000      	movs	r0, #0
}
   23402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   23406:	f06f 0015 	mvn.w	r0, #21
   2340a:	e7fa      	b.n	23402 <l2cap_ecred_conn_req+0x74>

0002340c <l2cap_le_conn_req>:
{
   2340c:	b538      	push	{r3, r4, r5, lr}
   2340e:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
   23410:	f7e7 fd2a 	bl	ae68 <get_ident>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
   23414:	220a      	movs	r2, #10
	ch->chan.ident = get_ident();
   23416:	4601      	mov	r1, r0
   23418:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
   2341c:	2014      	movs	r0, #20
   2341e:	f7e7 fd6d 	bl	aefc <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   23422:	4605      	mov	r5, r0
   23424:	b1d8      	cbz	r0, 2345e <l2cap_le_conn_req+0x52>
	req = net_buf_add(buf, sizeof(*req));
   23426:	210a      	movs	r1, #10
   23428:	3008      	adds	r0, #8
   2342a:	f001 ffdf 	bl	253ec <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
   2342e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   23432:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
   23434:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   23438:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
   2343a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   2343e:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
   23440:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
   23444:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
   23446:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   2344a:	8103      	strh	r3, [r0, #8]
	l2cap_chan_send_req(&ch->chan, buf, L2CAP_CONN_TIMEOUT);
   2344c:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
   23450:	4620      	mov	r0, r4
   23452:	2300      	movs	r3, #0
   23454:	4629      	mov	r1, r5
   23456:	f7e7 fecd 	bl	b1f4 <l2cap_chan_send_req>
	return 0;
   2345a:	2000      	movs	r0, #0
}
   2345c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   2345e:	f06f 000b 	mvn.w	r0, #11
   23462:	e7fb      	b.n	2345c <l2cap_le_conn_req+0x50>

00023464 <bt_l2cap_encrypt_change>:
{
   23464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23468:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
{
   2346a:	b086      	sub	sp, #24
   2346c:	460f      	mov	r7, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2346e:	b10c      	cbz	r4, 23474 <bt_l2cap_encrypt_change+0x10>
   23470:	3c08      	subs	r4, #8
   23472:	b914      	cbnz	r4, 2347a <bt_l2cap_encrypt_change+0x16>
}
   23474:	b006      	add	sp, #24
   23476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2347a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2347e:	f3bf 8f5b 	dmb	ish
   23482:	e853 2f00 	ldrex	r2, [r3]
   23486:	f022 0104 	bic.w	r1, r2, #4
   2348a:	e843 1000 	strex	r0, r1, [r3]
   2348e:	2800      	cmp	r0, #0
   23490:	d1f7      	bne.n	23482 <bt_l2cap_encrypt_change+0x1e>
   23492:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_clear_bit(chan->status,
   23496:	0753      	lsls	r3, r2, #29
   23498:	d507      	bpl.n	234aa <bt_l2cap_encrypt_change+0x46>
	if (status) {
   2349a:	b18f      	cbz	r7, 234c0 <bt_l2cap_encrypt_change+0x5c>
		bt_l2cap_chan_remove(chan->conn, chan);
   2349c:	6820      	ldr	r0, [r4, #0]
   2349e:	4621      	mov	r1, r4
   234a0:	f7ff fe80 	bl	231a4 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
   234a4:	4620      	mov	r0, r4
   234a6:	f7ff fe96 	bl	231d6 <bt_l2cap_chan_del>
		if (chan->ops->encrypt_change) {
   234aa:	6863      	ldr	r3, [r4, #4]
   234ac:	689b      	ldr	r3, [r3, #8]
   234ae:	b113      	cbz	r3, 234b6 <bt_l2cap_encrypt_change+0x52>
			chan->ops->encrypt_change(chan, hci_status);
   234b0:	4639      	mov	r1, r7
   234b2:	4620      	mov	r0, r4
   234b4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   234b6:	f114 0f08 	cmn.w	r4, #8
   234ba:	d0db      	beq.n	23474 <bt_l2cap_encrypt_change+0x10>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   234bc:	68a4      	ldr	r4, [r4, #8]
   234be:	e7d6      	b.n	2346e <bt_l2cap_encrypt_change+0xa>
	if (chan->ident) {
   234c0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   234c4:	b193      	cbz	r3, 234ec <bt_l2cap_encrypt_change+0x88>
   234c6:	ae01      	add	r6, sp, #4
		int i = 0;
   234c8:	463d      	mov	r5, r7
   234ca:	46b0      	mov	r8, r6
		while ((ch = l2cap_remove_ident(chan->conn, chan->ident))) {
   234cc:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   234d0:	6820      	ldr	r0, [r4, #0]
   234d2:	2201      	movs	r2, #1
   234d4:	f7ff fd35 	bl	22f42 <__l2cap_lookup_ident>
   234d8:	b920      	cbnz	r0, 234e4 <bt_l2cap_encrypt_change+0x80>
		l2cap_ecred_conn_req(echan, i);
   234da:	4629      	mov	r1, r5
   234dc:	4640      	mov	r0, r8
   234de:	f7ff ff56 	bl	2338e <l2cap_ecred_conn_req>
		return;
   234e2:	e7e2      	b.n	234aa <bt_l2cap_encrypt_change+0x46>
			echan[i++] = &ch->chan;
   234e4:	f846 0b04 	str.w	r0, [r6], #4
   234e8:	3501      	adds	r5, #1
   234ea:	e7ef      	b.n	234cc <bt_l2cap_encrypt_change+0x68>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
   234ec:	4620      	mov	r0, r4
   234ee:	f7ff ff8d 	bl	2340c <l2cap_le_conn_req>
   234f2:	e7da      	b.n	234aa <bt_l2cap_encrypt_change+0x46>

000234f4 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   234f4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   234f6:	b160      	cbz	r0, 23512 <bt_l2cap_le_lookup_tx_cid+0x1e>
   234f8:	3808      	subs	r0, #8
   234fa:	b900      	cbnz	r0, 234fe <bt_l2cap_le_lookup_tx_cid+0xa>
   234fc:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   234fe:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
   23502:	428b      	cmp	r3, r1
   23504:	d005      	beq.n	23512 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23506:	f110 0308 	adds.w	r3, r0, #8
   2350a:	d001      	beq.n	23510 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2350c:	6880      	ldr	r0, [r0, #8]
   2350e:	e7f2      	b.n	234f6 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   23510:	4618      	mov	r0, r3
}
   23512:	4770      	bx	lr

00023514 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23514:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   23516:	b160      	cbz	r0, 23532 <bt_l2cap_le_lookup_rx_cid+0x1e>
   23518:	3808      	subs	r0, #8
   2351a:	b900      	cbnz	r0, 2351e <bt_l2cap_le_lookup_rx_cid+0xa>
   2351c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2351e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   23522:	428b      	cmp	r3, r1
   23524:	d005      	beq.n	23532 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23526:	f110 0308 	adds.w	r3, r0, #8
   2352a:	d001      	beq.n	23530 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2352c:	6880      	ldr	r0, [r0, #8]
   2352e:	e7f2      	b.n	23516 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   23530:	4618      	mov	r0, r3
}
   23532:	4770      	bx	lr

00023534 <bt_l2cap_update_conn_param>:
{
   23534:	b570      	push	{r4, r5, r6, lr}
   23536:	460c      	mov	r4, r1
   23538:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2353a:	f7e7 fc95 	bl	ae68 <get_ident>
   2353e:	2208      	movs	r2, #8
   23540:	4601      	mov	r1, r0
   23542:	2012      	movs	r0, #18
   23544:	f7e7 fcda 	bl	aefc <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   23548:	4605      	mov	r5, r0
   2354a:	b188      	cbz	r0, 23570 <bt_l2cap_update_conn_param+0x3c>
	req = net_buf_add(buf, sizeof(*req));
   2354c:	2108      	movs	r1, #8
   2354e:	4408      	add	r0, r1
   23550:	f001 ff4c 	bl	253ec <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   23554:	8822      	ldrh	r2, [r4, #0]
   23556:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   23558:	8862      	ldrh	r2, [r4, #2]
   2355a:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   2355c:	88a2      	ldrh	r2, [r4, #4]
   2355e:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   23560:	88e2      	ldrh	r2, [r4, #6]
   23562:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   23564:	4629      	mov	r1, r5
   23566:	4630      	mov	r0, r6
   23568:	f7ff fee4 	bl	23334 <bt_l2cap_send.constprop.0>
	return 0;
   2356c:	2000      	movs	r0, #0
}
   2356e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   23570:	f06f 000b 	mvn.w	r0, #11
   23574:	e7fb      	b.n	2356e <bt_l2cap_update_conn_param+0x3a>

00023576 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   23576:	4770      	bx	lr

00023578 <bt_l2cap_chan_disconnect>:

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
}

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
   23578:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
   2357a:	6803      	ldr	r3, [r0, #0]
{
   2357c:	4604      	mov	r4, r0
	if (!conn) {
   2357e:	b303      	cbz	r3, 235c2 <bt_l2cap_chan_disconnect+0x4a>
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
   23580:	f7e7 fc72 	bl	ae68 <get_ident>

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
   23584:	2204      	movs	r2, #4
	ch->chan.ident = get_ident();
   23586:	4601      	mov	r1, r0
   23588:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
   2358c:	2006      	movs	r0, #6
   2358e:	f7e7 fcb5 	bl	aefc <l2cap_create_le_sig_pdu.isra.0>
				      ch->chan.ident, sizeof(*req));
	if (!buf) {
   23592:	4605      	mov	r5, r0
   23594:	b1c0      	cbz	r0, 235c8 <bt_l2cap_chan_disconnect+0x50>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
   23596:	2104      	movs	r1, #4
   23598:	3008      	adds	r0, #8
   2359a:	f001 ff27 	bl	253ec <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->rx.cid);
   2359e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   235a2:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->tx.cid);
   235a4:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   235a8:	8043      	strh	r3, [r0, #2]

	l2cap_chan_send_req(chan, buf, L2CAP_DISC_TIMEOUT);
   235aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   235ae:	2300      	movs	r3, #0
   235b0:	4620      	mov	r0, r4
   235b2:	4629      	mov	r1, r5
   235b4:	f7e7 fe1e 	bl	b1f4 <l2cap_chan_send_req>
	chan->state = state;
   235b8:	2304      	movs	r3, #4
   235ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);

	return 0;
   235be:	2000      	movs	r0, #0
}
   235c0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
   235c2:	f06f 0038 	mvn.w	r0, #56	; 0x38
   235c6:	e7fb      	b.n	235c0 <bt_l2cap_chan_disconnect+0x48>
		return -ENOMEM;
   235c8:	f06f 000b 	mvn.w	r0, #11
   235cc:	e7f8      	b.n	235c0 <bt_l2cap_chan_disconnect+0x48>

000235ce <l2cap_rx_process>:
{
   235ce:	b570      	push	{r4, r5, r6, lr}
	struct bt_l2cap_le_chan *ch = CHAN_RX(work);
   235d0:	f1a0 0698 	sub.w	r6, r0, #152	; 0x98
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
   235d4:	f100 040c 	add.w	r4, r0, #12
   235d8:	2200      	movs	r2, #0
   235da:	2300      	movs	r3, #0
   235dc:	4620      	mov	r0, r4
   235de:	f001 fea2 	bl	25326 <net_buf_get>
   235e2:	4605      	mov	r5, r0
   235e4:	b900      	cbnz	r0, 235e8 <l2cap_rx_process+0x1a>
}
   235e6:	bd70      	pop	{r4, r5, r6, pc}
		l2cap_chan_le_recv(ch, buf);
   235e8:	4630      	mov	r0, r6
   235ea:	4629      	mov	r1, r5
   235ec:	f7e8 f83e 	bl	b66c <l2cap_chan_le_recv>
		net_buf_unref(buf);
   235f0:	4628      	mov	r0, r5
   235f2:	f7fa fce1 	bl	1dfb8 <net_buf_unref>
   235f6:	e7ef      	b.n	235d8 <l2cap_rx_process+0xa>

000235f8 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   235f8:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   235fa:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   235fc:	b128      	cbz	r0, 2360a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   235fe:	6859      	ldr	r1, [r3, #4]
   23600:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   23602:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23604:	4288      	cmp	r0, r1
	list->tail = node;
   23606:	bf08      	it	eq
   23608:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2360a:	4770      	bx	lr

0002360c <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2360c:	4603      	mov	r3, r0
   2360e:	6800      	ldr	r0, [r0, #0]
   23610:	2200      	movs	r2, #0
   23612:	b900      	cbnz	r0, 23616 <sys_slist_find_and_remove+0xa>
   23614:	4770      	bx	lr
   23616:	4288      	cmp	r0, r1
   23618:	d110      	bne.n	2363c <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   2361a:	6808      	ldr	r0, [r1, #0]
   2361c:	b942      	cbnz	r2, 23630 <sys_slist_find_and_remove+0x24>
   2361e:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   23620:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   23622:	4291      	cmp	r1, r2
   23624:	d100      	bne.n	23628 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   23626:	6058      	str	r0, [r3, #4]
	parent->next = child;
   23628:	2300      	movs	r3, #0
   2362a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2362c:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2362e:	4770      	bx	lr
	parent->next = child;
   23630:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   23632:	6858      	ldr	r0, [r3, #4]
   23634:	4281      	cmp	r1, r0
	list->tail = node;
   23636:	bf08      	it	eq
   23638:	605a      	streq	r2, [r3, #4]
}
   2363a:	e7f5      	b.n	23628 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2363c:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2363e:	6800      	ldr	r0, [r0, #0]
   23640:	e7e7      	b.n	23612 <sys_slist_find_and_remove+0x6>

00023642 <net_buf_frags_len>:
{
   23642:	4603      	mov	r3, r0
	size_t bytes = 0;
   23644:	2000      	movs	r0, #0
	while (buf) {
   23646:	b903      	cbnz	r3, 2364a <net_buf_frags_len+0x8>
}
   23648:	4770      	bx	lr
		bytes += buf->len;
   2364a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2364c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2364e:	4410      	add	r0, r2
		buf = buf->frags;
   23650:	e7f9      	b.n	23646 <net_buf_frags_len+0x4>

00023652 <att_sent>:
	if (chan->ops->sent) {
   23652:	684b      	ldr	r3, [r1, #4]
   23654:	695b      	ldr	r3, [r3, #20]
{
   23656:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   23658:	b103      	cbz	r3, 2365c <att_sent+0xa>
		chan->ops->sent(chan);
   2365a:	4718      	bx	r3
}
   2365c:	4770      	bx	lr

0002365e <attr_read_type_cb>:
{
   2365e:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   23660:	68d4      	ldr	r4, [r2, #12]
   23662:	7823      	ldrb	r3, [r4, #0]
   23664:	3102      	adds	r1, #2
   23666:	b913      	cbnz	r3, 2366e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   23668:	7021      	strb	r1, [r4, #0]
	return true;
   2366a:	2001      	movs	r0, #1
   2366c:	e006      	b.n	2367c <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2366e:	428b      	cmp	r3, r1
   23670:	d0fb      	beq.n	2366a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   23672:	8983      	ldrh	r3, [r0, #12]
   23674:	3b02      	subs	r3, #2
   23676:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   23678:	2000      	movs	r0, #0
   2367a:	6110      	str	r0, [r2, #16]
}
   2367c:	bd10      	pop	{r4, pc}

0002367e <att_op_get_type>:
	switch (op) {
   2367e:	281e      	cmp	r0, #30
   23680:	d816      	bhi.n	236b0 <att_op_get_type+0x32>
   23682:	b308      	cbz	r0, 236c8 <att_op_get_type+0x4a>
   23684:	1e43      	subs	r3, r0, #1
   23686:	2b1d      	cmp	r3, #29
   23688:	d81e      	bhi.n	236c8 <att_op_get_type+0x4a>
   2368a:	e8df f003 	tbb	[pc, r3]
   2368e:	2317      	.short	0x2317
   23690:	23172317 	.word	0x23172317
   23694:	23172317 	.word	0x23172317
   23698:	23172317 	.word	0x23172317
   2369c:	23172317 	.word	0x23172317
   236a0:	231d1d17 	.word	0x231d1d17
   236a4:	1d172317 	.word	0x1d172317
   236a8:	0f1b1d19 	.word	0x0f1b1d19
   236ac:	2004      	movs	r0, #4
   236ae:	4770      	bx	lr
   236b0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   236b4:	2b52      	cmp	r3, #82	; 0x52
   236b6:	d107      	bne.n	236c8 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   236b8:	2000      	movs	r0, #0
}
   236ba:	4770      	bx	lr
		return ATT_RESPONSE;
   236bc:	2002      	movs	r0, #2
   236be:	4770      	bx	lr
		return ATT_NOTIFICATION;
   236c0:	2003      	movs	r0, #3
   236c2:	4770      	bx	lr
		return ATT_INDICATION;
   236c4:	2005      	movs	r0, #5
   236c6:	4770      	bx	lr
		return ATT_COMMAND;
   236c8:	f010 0f40 	tst.w	r0, #64	; 0x40
   236cc:	bf0c      	ite	eq
   236ce:	2006      	moveq	r0, #6
   236d0:	2000      	movne	r0, #0
   236d2:	4770      	bx	lr
		return ATT_REQUEST;
   236d4:	2001      	movs	r0, #1
   236d6:	4770      	bx	lr

000236d8 <att_notify_mult>:
{
   236d8:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   236da:	6803      	ldr	r3, [r0, #0]
   236dc:	898a      	ldrh	r2, [r1, #12]
   236de:	6818      	ldr	r0, [r3, #0]
   236e0:	6889      	ldr	r1, [r1, #8]
   236e2:	f7eb f9a5 	bl	ea30 <bt_gatt_mult_notification>
}
   236e6:	2000      	movs	r0, #0
   236e8:	bd08      	pop	{r3, pc}

000236ea <att_notify>:
{
   236ea:	b538      	push	{r3, r4, r5, lr}
   236ec:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   236ee:	f101 0008 	add.w	r0, r1, #8
{
   236f2:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
   236f4:	f001 fec7 	bl	25486 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   236f8:	682d      	ldr	r5, [r5, #0]
   236fa:	89a3      	ldrh	r3, [r4, #12]
   236fc:	68a2      	ldr	r2, [r4, #8]
	handle = net_buf_pull_le16(buf);
   236fe:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   23700:	6828      	ldr	r0, [r5, #0]
   23702:	f000 ff3c 	bl	2457e <bt_gatt_notification>
}
   23706:	2000      	movs	r0, #0
   23708:	bd38      	pop	{r3, r4, r5, pc}

0002370a <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2370a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2370c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   23710:	2300      	movs	r3, #0
   23712:	9300      	str	r3, [sp, #0]
   23714:	461a      	mov	r2, r3
   23716:	f7ea fa7b 	bl	dc10 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2371a:	b005      	add	sp, #20
   2371c:	f85d fb04 	ldr.w	pc, [sp], #4

00023720 <find_info_cb>:
	if (!data->rsp) {
   23720:	688b      	ldr	r3, [r1, #8]
{
   23722:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   23724:	680e      	ldr	r6, [r1, #0]
{
   23726:	4605      	mov	r5, r0
   23728:	460c      	mov	r4, r1
	if (!data->rsp) {
   2372a:	b963      	cbnz	r3, 23746 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2372c:	6848      	ldr	r0, [r1, #4]
   2372e:	2101      	movs	r1, #1
   23730:	3008      	adds	r0, #8
   23732:	f001 fe5b 	bl	253ec <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   23736:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   23738:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2373a:	781b      	ldrb	r3, [r3, #0]
   2373c:	2b00      	cmp	r3, #0
   2373e:	bf0c      	ite	eq
   23740:	2301      	moveq	r3, #1
   23742:	2302      	movne	r3, #2
   23744:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   23746:	68a3      	ldr	r3, [r4, #8]
   23748:	781b      	ldrb	r3, [r3, #0]
   2374a:	2b01      	cmp	r3, #1
   2374c:	d003      	beq.n	23756 <find_info_cb+0x36>
   2374e:	2b02      	cmp	r3, #2
   23750:	d01a      	beq.n	23788 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   23752:	2000      	movs	r0, #0
   23754:	e017      	b.n	23786 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   23756:	682b      	ldr	r3, [r5, #0]
   23758:	781b      	ldrb	r3, [r3, #0]
   2375a:	2b00      	cmp	r3, #0
   2375c:	d1f9      	bne.n	23752 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2375e:	6860      	ldr	r0, [r4, #4]
   23760:	2104      	movs	r1, #4
   23762:	3008      	adds	r0, #8
   23764:	f001 fe42 	bl	253ec <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   23768:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2376a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   2376c:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2376e:	682b      	ldr	r3, [r5, #0]
   23770:	885b      	ldrh	r3, [r3, #2]
   23772:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   23774:	6863      	ldr	r3, [r4, #4]
   23776:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
   2377a:	899b      	ldrh	r3, [r3, #12]
   2377c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2377e:	2804      	cmp	r0, #4
   23780:	bf94      	ite	ls
   23782:	2000      	movls	r0, #0
   23784:	2001      	movhi	r0, #1
}
   23786:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   23788:	682b      	ldr	r3, [r5, #0]
   2378a:	781b      	ldrb	r3, [r3, #0]
   2378c:	2b02      	cmp	r3, #2
   2378e:	d1e0      	bne.n	23752 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   23790:	6860      	ldr	r0, [r4, #4]
   23792:	2112      	movs	r1, #18
   23794:	3008      	adds	r0, #8
   23796:	f001 fe29 	bl	253ec <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2379a:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   2379c:	8a2b      	ldrh	r3, [r5, #16]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2379e:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   237a0:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   237a2:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   237a6:	3101      	adds	r1, #1
   237a8:	f7fe ffba 	bl	22720 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   237ac:	6863      	ldr	r3, [r4, #4]
   237ae:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
   237b2:	899b      	ldrh	r3, [r3, #12]
   237b4:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   237b6:	2812      	cmp	r0, #18
   237b8:	e7e2      	b.n	23780 <find_info_cb+0x60>

000237ba <att_chan_read>:
{
   237ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   237be:	4680      	mov	r8, r0
   237c0:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   237c2:	4610      	mov	r0, r2
{
   237c4:	4699      	mov	r9, r3
   237c6:	468b      	mov	fp, r1
   237c8:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   237ca:	f7ff ff3a 	bl	23642 <net_buf_frags_len>
   237ce:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
   237d2:	4283      	cmp	r3, r0
   237d4:	d97a      	bls.n	238cc <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   237d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   237da:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   237dc:	4630      	mov	r0, r6
   237de:	f001 fdd7 	bl	25390 <net_buf_frag_last>
	size_t len, total = 0;
   237e2:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   237e6:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   237e8:	4630      	mov	r0, r6
   237ea:	f7ff ff2a 	bl	23642 <net_buf_frags_len>
   237ee:	f8b8 4066 	ldrh.w	r4, [r8, #102]	; 0x66
   237f2:	f105 0708 	add.w	r7, r5, #8
   237f6:	1a24      	subs	r4, r4, r0
   237f8:	4638      	mov	r0, r7
   237fa:	f001 fe50 	bl	2549e <net_buf_simple_tailroom>
   237fe:	4284      	cmp	r4, r0
   23800:	d211      	bcs.n	23826 <att_chan_read+0x6c>
   23802:	4630      	mov	r0, r6
   23804:	f7ff ff1d 	bl	23642 <net_buf_frags_len>
   23808:	f8b8 4066 	ldrh.w	r4, [r8, #102]	; 0x66
   2380c:	1a24      	subs	r4, r4, r0
		if (!len) {
   2380e:	bb34      	cbnz	r4, 2385e <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   23810:	79b0      	ldrb	r0, [r6, #6]
   23812:	f7fa fb15 	bl	1de40 <net_buf_pool_get>
   23816:	2200      	movs	r2, #0
   23818:	2300      	movs	r3, #0
   2381a:	f001 fd7f 	bl	2531c <net_buf_alloc_fixed>
			if (!frag) {
   2381e:	4605      	mov	r5, r0
   23820:	b930      	cbnz	r0, 23830 <att_chan_read+0x76>
	return total;
   23822:	4657      	mov	r7, sl
   23824:	e02c      	b.n	23880 <att_chan_read+0xc6>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   23826:	4638      	mov	r0, r7
   23828:	f001 fe39 	bl	2549e <net_buf_simple_tailroom>
   2382c:	4604      	mov	r4, r0
   2382e:	e7ee      	b.n	2380e <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   23830:	4601      	mov	r1, r0
   23832:	4630      	mov	r0, r6
   23834:	f001 fdbd 	bl	253b2 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   23838:	4630      	mov	r0, r6
   2383a:	f7ff ff02 	bl	23642 <net_buf_frags_len>
   2383e:	f8b8 4066 	ldrh.w	r4, [r8, #102]	; 0x66
   23842:	f105 0708 	add.w	r7, r5, #8
   23846:	1a24      	subs	r4, r4, r0
   23848:	4638      	mov	r0, r7
   2384a:	f001 fe28 	bl	2549e <net_buf_simple_tailroom>
   2384e:	4284      	cmp	r4, r0
   23850:	d21a      	bcs.n	23888 <att_chan_read+0xce>
   23852:	4630      	mov	r0, r6
   23854:	f7ff fef5 	bl	23642 <net_buf_frags_len>
   23858:	f8b8 4066 	ldrh.w	r4, [r8, #102]	; 0x66
   2385c:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2385e:	68a9      	ldr	r1, [r5, #8]
   23860:	89aa      	ldrh	r2, [r5, #12]
   23862:	f8db 7004 	ldr.w	r7, [fp, #4]
   23866:	9803      	ldr	r0, [sp, #12]
   23868:	f8cd 9000 	str.w	r9, [sp]
   2386c:	440a      	add	r2, r1
   2386e:	b2a3      	uxth	r3, r4
   23870:	4659      	mov	r1, fp
   23872:	47b8      	blx	r7
		if (read < 0) {
   23874:	1e07      	subs	r7, r0, #0
   23876:	da0c      	bge.n	23892 <att_chan_read+0xd8>
				return total;
   23878:	f1ba 0f00 	cmp.w	sl, #0
   2387c:	bf18      	it	ne
   2387e:	4657      	movne	r7, sl
}
   23880:	4638      	mov	r0, r7
   23882:	b005      	add	sp, #20
   23884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   23888:	4638      	mov	r0, r7
   2388a:	f001 fe08 	bl	2549e <net_buf_simple_tailroom>
   2388e:	4604      	mov	r4, r0
   23890:	e7e5      	b.n	2385e <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   23892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23894:	b993      	cbnz	r3, 238bc <att_chan_read+0x102>
		net_buf_add(frag, read);
   23896:	4639      	mov	r1, r7
   23898:	f105 0008 	add.w	r0, r5, #8
   2389c:	f001 fda6 	bl	253ec <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   238a0:	4630      	mov	r0, r6
   238a2:	f7ff fece 	bl	23642 <net_buf_frags_len>
   238a6:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
		offset += read;
   238aa:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   238ac:	4283      	cmp	r3, r0
		total += read;
   238ae:	44ba      	add	sl, r7
		offset += read;
   238b0:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   238b4:	d9b5      	bls.n	23822 <att_chan_read+0x68>
   238b6:	42a7      	cmp	r7, r4
   238b8:	d096      	beq.n	237e8 <att_chan_read+0x2e>
   238ba:	e7b2      	b.n	23822 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   238bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   238be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   238c0:	4639      	mov	r1, r7
   238c2:	4628      	mov	r0, r5
   238c4:	4798      	blx	r3
   238c6:	2800      	cmp	r0, #0
   238c8:	d1e5      	bne.n	23896 <att_chan_read+0xdc>
   238ca:	e7aa      	b.n	23822 <att_chan_read+0x68>
		return 0;
   238cc:	2700      	movs	r7, #0
   238ce:	e7d7      	b.n	23880 <att_chan_read+0xc6>

000238d0 <attr_read_group_cb>:
	if (!data->rsp->len) {
   238d0:	68d0      	ldr	r0, [r2, #12]
   238d2:	7803      	ldrb	r3, [r0, #0]
   238d4:	3104      	adds	r1, #4
   238d6:	b913      	cbnz	r3, 238de <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   238d8:	7001      	strb	r1, [r0, #0]
	return true;
   238da:	2001      	movs	r0, #1
}
   238dc:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   238de:	428b      	cmp	r3, r1
   238e0:	d0fb      	beq.n	238da <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   238e2:	6891      	ldr	r1, [r2, #8]
   238e4:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   238e6:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   238e8:	3b04      	subs	r3, #4
   238ea:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   238ec:	6110      	str	r0, [r2, #16]
		return false;
   238ee:	4770      	bx	lr

000238f0 <chan_cfm_sent>:
   238f0:	30c8      	adds	r0, #200	; 0xc8
   238f2:	f3bf 8f5b 	dmb	ish
   238f6:	e850 3f00 	ldrex	r3, [r0]
   238fa:	f023 0302 	bic.w	r3, r3, #2
   238fe:	e840 3200 	strex	r2, r3, [r0]
   23902:	2a00      	cmp	r2, #0
   23904:	d1f7      	bne.n	238f6 <chan_cfm_sent+0x6>
   23906:	f3bf 8f5b 	dmb	ish
}
   2390a:	4770      	bx	lr

0002390c <chan_rsp_sent>:
   2390c:	30c8      	adds	r0, #200	; 0xc8
   2390e:	f3bf 8f5b 	dmb	ish
   23912:	e850 3f00 	ldrex	r3, [r0]
   23916:	f023 0301 	bic.w	r3, r3, #1
   2391a:	e840 3200 	strex	r2, r3, [r0]
   2391e:	2a00      	cmp	r2, #0
   23920:	d1f7      	bne.n	23912 <chan_rsp_sent+0x6>
   23922:	f3bf 8f5b 	dmb	ish
}
   23926:	4770      	bx	lr

00023928 <write_cb>:
{
   23928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2392a:	460c      	mov	r4, r1
   2392c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2392e:	4601      	mov	r1, r0
   23930:	222a      	movs	r2, #42	; 0x2a
   23932:	6820      	ldr	r0, [r4, #0]
   23934:	f000 fd16 	bl	24364 <bt_gatt_check_perm>
   23938:	4605      	mov	r5, r0
   2393a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2393c:	bb00      	cbnz	r0, 23980 <write_cb+0x58>
	if (!data->req) {
   2393e:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   23940:	68b7      	ldr	r7, [r6, #8]
   23942:	68e2      	ldr	r2, [r4, #12]
   23944:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   23946:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   23948:	bf14      	ite	ne
   2394a:	2300      	movne	r3, #0
   2394c:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2394e:	9301      	str	r3, [sp, #4]
   23950:	8a63      	ldrh	r3, [r4, #18]
   23952:	9300      	str	r3, [sp, #0]
   23954:	4631      	mov	r1, r6
   23956:	8a23      	ldrh	r3, [r4, #16]
   23958:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2395a:	1e03      	subs	r3, r0, #0
   2395c:	db05      	blt.n	2396a <write_cb+0x42>
   2395e:	8a22      	ldrh	r2, [r4, #16]
   23960:	4293      	cmp	r3, r2
   23962:	d10b      	bne.n	2397c <write_cb+0x54>
	data->err = 0U;
   23964:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   23966:	2501      	movs	r5, #1
   23968:	e005      	b.n	23976 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   2396a:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2396e:	d305      	bcc.n	2397c <write_cb+0x54>
		return -err;
   23970:	425b      	negs	r3, r3
   23972:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   23974:	7523      	strb	r3, [r4, #20]
}
   23976:	4628      	mov	r0, r5
   23978:	b003      	add	sp, #12
   2397a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2397c:	230e      	movs	r3, #14
   2397e:	e7f9      	b.n	23974 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   23980:	2500      	movs	r5, #0
   23982:	e7f8      	b.n	23976 <write_cb+0x4e>

00023984 <read_cb>:
{
   23984:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23988:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2398a:	6888      	ldr	r0, [r1, #8]
	struct bt_att_chan *chan = data->chan;
   2398c:	f8d1 8000 	ldr.w	r8, [r1]
{
   23990:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   23992:	3008      	adds	r0, #8
   23994:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   23996:	f8d8 5008 	ldr.w	r5, [r8, #8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2399a:	f001 fd27 	bl	253ec <net_buf_simple_add>
	data->err = 0x00;
   2399e:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   239a0:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
   239a2:	7427      	strb	r7, [r4, #16]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   239a4:	4628      	mov	r0, r5
   239a6:	2215      	movs	r2, #21
   239a8:	4631      	mov	r1, r6
   239aa:	f000 fcdb 	bl	24364 <bt_gatt_check_perm>
   239ae:	4605      	mov	r5, r0
   239b0:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   239b2:	b9a0      	cbnz	r0, 239de <read_cb+0x5a>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   239b4:	e9cd 0000 	strd	r0, r0, [sp]
   239b8:	88a3      	ldrh	r3, [r4, #4]
   239ba:	68a2      	ldr	r2, [r4, #8]
   239bc:	4631      	mov	r1, r6
   239be:	4640      	mov	r0, r8
   239c0:	f7ff fefb 	bl	237ba <att_chan_read>
	if (ret < 0) {
   239c4:	1e03      	subs	r3, r0, #0
   239c6:	da0c      	bge.n	239e2 <read_cb+0x5e>
	if (err < 0 && err >= -0xff) {
   239c8:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   239cc:	bf26      	itte	cs
   239ce:	425b      	negcs	r3, r3
   239d0:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   239d2:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   239d4:	7423      	strb	r3, [r4, #16]
}
   239d6:	4628      	mov	r0, r5
   239d8:	b002      	add	sp, #8
   239da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   239de:	463d      	mov	r5, r7
   239e0:	e7f9      	b.n	239d6 <read_cb+0x52>
	return BT_GATT_ITER_CONTINUE;
   239e2:	2501      	movs	r5, #1
   239e4:	e7f7      	b.n	239d6 <read_cb+0x52>

000239e6 <chan_req_send>:
{
   239e6:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   239e8:	690e      	ldr	r6, [r1, #16]
{
   239ea:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   239ec:	4630      	mov	r0, r6
{
   239ee:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   239f0:	f7ff fe27 	bl	23642 <net_buf_frags_len>
   239f4:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
   239f8:	4283      	cmp	r3, r0
   239fa:	d31a      	bcc.n	23a32 <chan_req_send+0x4c>
	chan->req = req;
   239fc:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   23a00:	f106 0008 	add.w	r0, r6, #8
   23a04:	f001 fd47 	bl	25496 <net_buf_simple_headroom>
	state->len = buf->len;
   23a08:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   23a0a:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   23a0c:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   23a0e:	6920      	ldr	r0, [r4, #16]
   23a10:	f001 fcba 	bl	25388 <net_buf_ref>
   23a14:	2200      	movs	r2, #0
   23a16:	4601      	mov	r1, r0
   23a18:	4628      	mov	r0, r5
   23a1a:	f7e8 fd95 	bl	c548 <chan_send>
	if (err < 0) {
   23a1e:	1e06      	subs	r6, r0, #0
   23a20:	da05      	bge.n	23a2e <chan_req_send+0x48>
		net_buf_unref(req->buf);
   23a22:	6920      	ldr	r0, [r4, #16]
   23a24:	f7fa fac8 	bl	1dfb8 <net_buf_unref>
		chan->req = NULL;
   23a28:	2300      	movs	r3, #0
   23a2a:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
}
   23a2e:	4630      	mov	r0, r6
   23a30:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   23a32:	f06f 0623 	mvn.w	r6, #35	; 0x23
   23a36:	e7fa      	b.n	23a2e <chan_req_send+0x48>

00023a38 <bt_att_chan_req_send>:
{
   23a38:	b570      	push	{r4, r5, r6, lr}
   23a3a:	4604      	mov	r4, r0
   23a3c:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   23a3e:	f500 768c 	add.w	r6, r0, #280	; 0x118
	return z_impl_k_sem_take(sem, timeout);
   23a42:	2200      	movs	r2, #0
   23a44:	2300      	movs	r3, #0
   23a46:	4630      	mov	r0, r6
   23a48:	f7fc f92e 	bl	1fca8 <z_impl_k_sem_take>
   23a4c:	2800      	cmp	r0, #0
   23a4e:	db0a      	blt.n	23a66 <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   23a50:	4620      	mov	r0, r4
   23a52:	4629      	mov	r1, r5
   23a54:	f7ff ffc7 	bl	239e6 <chan_req_send>
	if (err < 0) {
   23a58:	1e04      	subs	r4, r0, #0
   23a5a:	da02      	bge.n	23a62 <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   23a5c:	4630      	mov	r0, r6
   23a5e:	f7fc f8fd 	bl	1fc5c <z_impl_k_sem_give>
}
   23a62:	4620      	mov	r0, r4
   23a64:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   23a66:	f06f 040a 	mvn.w	r4, #10
   23a6a:	e7fa      	b.n	23a62 <bt_att_chan_req_send+0x2a>

00023a6c <bt_att_status>:
{
   23a6c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23a6e:	f3bf 8f5b 	dmb	ish
   23a72:	680b      	ldr	r3, [r1, #0]
   23a74:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   23a78:	07db      	lsls	r3, r3, #31
{
   23a7a:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   23a7c:	d518      	bpl.n	23ab0 <bt_att_status+0x44>
	if (chan->req) {
   23a7e:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   23a82:	b9ab      	cbnz	r3, 23ab0 <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   23a84:	f850 0c08 	ldr.w	r0, [r0, #-8]
   23a88:	3004      	adds	r0, #4
   23a8a:	f7ff fdb5 	bl	235f8 <sys_slist_get>
	if (!node) {
   23a8e:	4604      	mov	r4, r0
   23a90:	b170      	cbz	r0, 23ab0 <bt_att_status+0x44>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   23a92:	4601      	mov	r1, r0
   23a94:	f1a5 0008 	sub.w	r0, r5, #8
   23a98:	f7ff ffce 	bl	23a38 <bt_att_chan_req_send>
   23a9c:	2800      	cmp	r0, #0
   23a9e:	da07      	bge.n	23ab0 <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   23aa0:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   23aa4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   23aa6:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   23aa8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   23aaa:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   23aac:	b902      	cbnz	r2, 23ab0 <bt_att_status+0x44>
	list->tail = node;
   23aae:	609c      	str	r4, [r3, #8]
}
   23ab0:	bd38      	pop	{r3, r4, r5, pc}

00023ab2 <bt_att_chan_send>:
{
   23ab2:	b570      	push	{r4, r5, r6, lr}
   23ab4:	4604      	mov	r4, r0
   23ab6:	460e      	mov	r6, r1
	if (!cb) {
   23ab8:	4615      	mov	r5, r2
   23aba:	b132      	cbz	r2, 23aca <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   23abc:	462a      	mov	r2, r5
   23abe:	4631      	mov	r1, r6
   23ac0:	4620      	mov	r0, r4
}
   23ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   23ac6:	f7e8 bd3f 	b.w	c548 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   23aca:	2200      	movs	r2, #0
   23acc:	2300      	movs	r3, #0
   23ace:	f500 708c 	add.w	r0, r0, #280	; 0x118
   23ad2:	f7fc f8e9 	bl	1fca8 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   23ad6:	2800      	cmp	r0, #0
   23ad8:	daf0      	bge.n	23abc <bt_att_chan_send+0xa>
}
   23ada:	f06f 000a 	mvn.w	r0, #10
   23ade:	bd70      	pop	{r4, r5, r6, pc}

00023ae0 <bt_att_chan_send_rsp>:
{
   23ae0:	b538      	push	{r3, r4, r5, lr}
   23ae2:	4604      	mov	r4, r0
   23ae4:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   23ae6:	f7ff ffe4 	bl	23ab2 <bt_att_chan_send>
	if (err) {
   23aea:	b130      	cbz	r0, 23afa <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   23aec:	4629      	mov	r1, r5
   23aee:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   23af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   23af6:	f001 bc3a 	b.w	2536e <net_buf_put>
}
   23afa:	bd38      	pop	{r3, r4, r5, pc}

00023afc <process_queue>:
{
   23afc:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   23afe:	2200      	movs	r2, #0
{
   23b00:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   23b02:	2300      	movs	r3, #0
   23b04:	4608      	mov	r0, r1
{
   23b06:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   23b08:	f001 fc0d 	bl	25326 <net_buf_get>
	if (buf) {
   23b0c:	4605      	mov	r5, r0
   23b0e:	b160      	cbz	r0, 23b2a <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   23b10:	4601      	mov	r1, r0
   23b12:	2200      	movs	r2, #0
   23b14:	4620      	mov	r0, r4
   23b16:	f7e8 fd17 	bl	c548 <chan_send>
		if (err) {
   23b1a:	4604      	mov	r4, r0
   23b1c:	b118      	cbz	r0, 23b26 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   23b1e:	4629      	mov	r1, r5
   23b20:	4630      	mov	r0, r6
   23b22:	f002 f822 	bl	25b6a <k_queue_prepend>
}
   23b26:	4620      	mov	r0, r4
   23b28:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   23b2a:	f06f 0401 	mvn.w	r4, #1
   23b2e:	e7fa      	b.n	23b26 <process_queue+0x2a>

00023b30 <bt_att_sent>:
{
   23b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   23b32:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
	struct bt_att *att = chan->att;
   23b36:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   23b3a:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   23b3c:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   23b40:	b10b      	cbz	r3, 23b46 <bt_att_sent+0x16>
		chan->sent(chan);
   23b42:	4638      	mov	r0, r7
   23b44:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23b46:	f3bf 8f5b 	dmb	ish
   23b4a:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   23b4e:	e853 2f00 	ldrex	r2, [r3]
   23b52:	f022 0210 	bic.w	r2, r2, #16
   23b56:	e843 2100 	strex	r1, r2, [r3]
   23b5a:	2900      	cmp	r1, #0
   23b5c:	d1f7      	bne.n	23b4e <bt_att_sent+0x1e>
   23b5e:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   23b62:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   23b66:	b98b      	cbnz	r3, 23b8c <bt_att_sent+0x5c>
   23b68:	686b      	ldr	r3, [r5, #4]
   23b6a:	b17b      	cbz	r3, 23b8c <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   23b6c:	1d28      	adds	r0, r5, #4
   23b6e:	f7ff fd43 	bl	235f8 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   23b72:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   23b74:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   23b76:	4638      	mov	r0, r7
   23b78:	f7ff ff35 	bl	239e6 <chan_req_send>
   23b7c:	2800      	cmp	r0, #0
   23b7e:	da17      	bge.n	23bb0 <bt_att_sent+0x80>
Z_GENLIST_PREPEND(slist, snode)
   23b80:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   23b82:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   23b84:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   23b86:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   23b88:	b903      	cbnz	r3, 23b8c <bt_att_sent+0x5c>
	list->tail = node;
   23b8a:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   23b8c:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   23b90:	4638      	mov	r0, r7
   23b92:	f7ff ffb3 	bl	23afc <process_queue>
	if (!err) {
   23b96:	b158      	cbz	r0, 23bb0 <bt_att_sent+0x80>
	err = process_queue(chan, &att->tx_queue);
   23b98:	f105 010c 	add.w	r1, r5, #12
   23b9c:	4638      	mov	r0, r7
   23b9e:	f7ff ffad 	bl	23afc <process_queue>
	if (!err) {
   23ba2:	b128      	cbz	r0, 23bb0 <bt_att_sent+0x80>
	z_impl_k_sem_give(sem);
   23ba4:	f504 7088 	add.w	r0, r4, #272	; 0x110
}
   23ba8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23bac:	f7fc b856 	b.w	1fc5c <z_impl_k_sem_give>
   23bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023bb2 <att_write_cmd>:
{
   23bb2:	b530      	push	{r4, r5, lr}
   23bb4:	460c      	mov	r4, r1
   23bb6:	b085      	sub	sp, #20
   23bb8:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   23bba:	f101 0008 	add.w	r0, r1, #8
   23bbe:	f001 fc62 	bl	25486 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   23bc2:	89a2      	ldrh	r2, [r4, #12]
   23bc4:	9202      	str	r2, [sp, #8]
   23bc6:	68a2      	ldr	r2, [r4, #8]
   23bc8:	9201      	str	r2, [sp, #4]
   23bca:	2200      	movs	r2, #0
	handle = net_buf_pull_le16(buf);
   23bcc:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   23bce:	9200      	str	r2, [sp, #0]
   23bd0:	4611      	mov	r1, r2
   23bd2:	4628      	mov	r0, r5
   23bd4:	f7e8 fe42 	bl	c85c <att_write_rsp>
}
   23bd8:	b005      	add	sp, #20
   23bda:	bd30      	pop	{r4, r5, pc}

00023bdc <att_write_req>:
{
   23bdc:	b530      	push	{r4, r5, lr}
   23bde:	460c      	mov	r4, r1
   23be0:	b085      	sub	sp, #20
   23be2:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   23be4:	f101 0008 	add.w	r0, r1, #8
   23be8:	f001 fc4d 	bl	25486 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   23bec:	89a2      	ldrh	r2, [r4, #12]
   23bee:	9202      	str	r2, [sp, #8]
   23bf0:	68a2      	ldr	r2, [r4, #8]
   23bf2:	9201      	str	r2, [sp, #4]
   23bf4:	2200      	movs	r2, #0
	handle = net_buf_pull_le16(buf);
   23bf6:	4603      	mov	r3, r0
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   23bf8:	9200      	str	r2, [sp, #0]
   23bfa:	2112      	movs	r1, #18
   23bfc:	2213      	movs	r2, #19
   23bfe:	4628      	mov	r0, r5
   23c00:	f7e8 fe2c 	bl	c85c <att_write_rsp>
}
   23c04:	b005      	add	sp, #20
   23c06:	bd30      	pop	{r4, r5, pc}

00023c08 <att_read_blob_req>:
{
   23c08:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   23c0a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   23c0c:	8813      	ldrh	r3, [r2, #0]
   23c0e:	8852      	ldrh	r2, [r2, #2]
   23c10:	9200      	str	r2, [sp, #0]
   23c12:	210c      	movs	r1, #12
   23c14:	220d      	movs	r2, #13
   23c16:	f7e9 f83f 	bl	cc98 <att_read_rsp>
}
   23c1a:	b003      	add	sp, #12
   23c1c:	f85d fb04 	ldr.w	pc, [sp], #4

00023c20 <att_read_req>:
{
   23c20:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   23c22:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   23c24:	2200      	movs	r2, #0
   23c26:	881b      	ldrh	r3, [r3, #0]
   23c28:	9200      	str	r2, [sp, #0]
   23c2a:	210a      	movs	r1, #10
   23c2c:	220b      	movs	r2, #11
   23c2e:	f7e9 f833 	bl	cc98 <att_read_rsp>
}
   23c32:	b003      	add	sp, #12
   23c34:	f85d fb04 	ldr.w	pc, [sp], #4

00023c38 <bt_att_init>:
	bt_gatt_init();
   23c38:	f7e9 bf8e 	b.w	db58 <bt_gatt_init>

00023c3c <bt_att_get_mtu>:
{
   23c3c:	b508      	push	{r3, lr}
	att = att_get(conn);
   23c3e:	f7e8 fb59 	bl	c2f4 <att_get>
	if (!att) {
   23c42:	b1d8      	cbz	r0, 23c7c <bt_att_get_mtu+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23c44:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   23c46:	b1c8      	cbz	r0, 23c7c <bt_att_get_mtu+0x40>
   23c48:	f5b0 719a 	subs.w	r1, r0, #308	; 0x134
   23c4c:	d015      	beq.n	23c7a <bt_att_get_mtu+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23c4e:	6803      	ldr	r3, [r0, #0]
   23c50:	b10b      	cbz	r3, 23c56 <bt_att_get_mtu+0x1a>
   23c52:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
{
   23c56:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   23c58:	f8b1 2066 	ldrh.w	r2, [r1, #102]	; 0x66
   23c5c:	4290      	cmp	r0, r2
   23c5e:	bf38      	it	cc
   23c60:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23c62:	b15b      	cbz	r3, 23c7c <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23c64:	f513 729a 	adds.w	r2, r3, #308	; 0x134
   23c68:	d004      	beq.n	23c74 <bt_att_get_mtu+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23c6a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
   23c6e:	b10a      	cbz	r2, 23c74 <bt_att_get_mtu+0x38>
   23c70:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
{
   23c74:	4619      	mov	r1, r3
   23c76:	4613      	mov	r3, r2
   23c78:	e7ee      	b.n	23c58 <bt_att_get_mtu+0x1c>
		return 0;
   23c7a:	4608      	mov	r0, r1
}
   23c7c:	bd08      	pop	{r3, pc}

00023c7e <att_req_destroy>:
{
   23c7e:	b510      	push	{r4, lr}
   23c80:	4604      	mov	r4, r0
	if (req->buf) {
   23c82:	6900      	ldr	r0, [r0, #16]
   23c84:	b108      	cbz	r0, 23c8a <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   23c86:	f7fa f997 	bl	1dfb8 <net_buf_unref>
	if (req->destroy) {
   23c8a:	68a3      	ldr	r3, [r4, #8]
   23c8c:	b10b      	cbz	r3, 23c92 <att_req_destroy+0x14>
		req->destroy(req);
   23c8e:	4620      	mov	r0, r4
   23c90:	4798      	blx	r3
	bt_att_req_free(req);
   23c92:	4620      	mov	r0, r4
}
   23c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   23c98:	f7e9 b9a4 	b.w	cfe4 <bt_att_req_free>

00023c9c <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   23c9c:	898a      	ldrh	r2, [r1, #12]
   23c9e:	6889      	ldr	r1, [r1, #8]
   23ca0:	2300      	movs	r3, #0
   23ca2:	f7e9 b9ab 	b.w	cffc <att_handle_rsp>

00023ca6 <att_handle_find_type_rsp>:
   23ca6:	f7ff bff9 	b.w	23c9c <att_handle_find_info_rsp>

00023caa <att_handle_read_type_rsp>:
   23caa:	f7ff bff7 	b.w	23c9c <att_handle_find_info_rsp>

00023cae <att_handle_read_rsp>:
   23cae:	f7ff bff5 	b.w	23c9c <att_handle_find_info_rsp>

00023cb2 <att_handle_read_blob_rsp>:
   23cb2:	f7ff bff3 	b.w	23c9c <att_handle_find_info_rsp>

00023cb6 <att_handle_read_mult_rsp>:
   23cb6:	f7ff bff1 	b.w	23c9c <att_handle_find_info_rsp>

00023cba <att_handle_read_group_rsp>:
   23cba:	f7ff bfef 	b.w	23c9c <att_handle_find_info_rsp>

00023cbe <att_handle_write_rsp>:
   23cbe:	f7ff bfed 	b.w	23c9c <att_handle_find_info_rsp>

00023cc2 <att_handle_prepare_write_rsp>:
   23cc2:	f7ff bfeb 	b.w	23c9c <att_handle_find_info_rsp>

00023cc6 <att_handle_exec_write_rsp>:
   23cc6:	f7ff bfe9 	b.w	23c9c <att_handle_find_info_rsp>

00023cca <att_confirm>:
   23cca:	f7ff bfe7 	b.w	23c9c <att_handle_find_info_rsp>

00023cce <att_mtu_rsp>:
{
   23cce:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   23cd0:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   23cd2:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   23cd4:	2b16      	cmp	r3, #22
{
   23cd6:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   23cd8:	d805      	bhi.n	23ce6 <att_mtu_rsp+0x18>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   23cda:	2200      	movs	r2, #0
   23cdc:	2304      	movs	r3, #4
   23cde:	4611      	mov	r1, r2
}
   23ce0:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   23ce2:	f7e9 b98b 	b.w	cffc <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   23ce6:	2bf7      	cmp	r3, #247	; 0xf7
   23ce8:	bf28      	it	cs
   23cea:	23f7      	movcs	r3, #247	; 0xf7
   23cec:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   23cf0:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
	return att_handle_rsp(chan, rsp, buf->len, 0);
   23cf4:	8992      	ldrh	r2, [r2, #12]
   23cf6:	2300      	movs	r3, #0
   23cf8:	e7f2      	b.n	23ce0 <att_mtu_rsp+0x12>

00023cfa <att_chan_detach>:
{
   23cfa:	b570      	push	{r4, r5, r6, lr}
   23cfc:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   23cfe:	6800      	ldr	r0, [r0, #0]
   23d00:	f504 719a 	add.w	r1, r4, #308	; 0x134
   23d04:	303c      	adds	r0, #60	; 0x3c
   23d06:	f7ff fc81 	bl	2360c <sys_slist_find_and_remove>
   23d0a:	250a      	movs	r5, #10
		k_sem_give(&chan->tx_sem);
   23d0c:	f504 768c 	add.w	r6, r4, #280	; 0x118
   23d10:	4630      	mov	r0, r6
   23d12:	f7fb ffa3 	bl	1fc5c <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   23d16:	3d01      	subs	r5, #1
   23d18:	d1fa      	bne.n	23d10 <att_chan_detach+0x16>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   23d1a:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   23d1e:	2200      	movs	r2, #0
   23d20:	2300      	movs	r3, #0
   23d22:	4628      	mov	r0, r5
   23d24:	f001 faff 	bl	25326 <net_buf_get>
   23d28:	4602      	mov	r2, r0
   23d2a:	b950      	cbnz	r0, 23d42 <att_chan_detach+0x48>
	if (chan->req) {
   23d2c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   23d30:	b123      	cbz	r3, 23d3c <att_chan_detach+0x42>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   23d32:	4601      	mov	r1, r0
   23d34:	230e      	movs	r3, #14
   23d36:	4620      	mov	r0, r4
   23d38:	f7e9 f960 	bl	cffc <att_handle_rsp>
	chan->att = NULL;
   23d3c:	2300      	movs	r3, #0
   23d3e:	6023      	str	r3, [r4, #0]
}
   23d40:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   23d42:	f7fa f939 	bl	1dfb8 <net_buf_unref>
   23d46:	e7ea      	b.n	23d1e <att_chan_detach+0x24>

00023d48 <bt_att_disconnected>:
{
   23d48:	b538      	push	{r3, r4, r5, lr}
   23d4a:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   23d4c:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   23d50:	f7ff ffd3 	bl	23cfa <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   23d54:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   23d56:	b93b      	cbnz	r3, 23d68 <bt_att_disconnected+0x20>
	att_reset(att);
   23d58:	4628      	mov	r0, r5
   23d5a:	f7e9 fa39 	bl	d1d0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   23d5e:	6820      	ldr	r0, [r4, #0]
}
   23d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   23d64:	f7ea bf3a 	b.w	ebdc <bt_gatt_disconnected>
}
   23d68:	bd38      	pop	{r3, r4, r5, pc}

00023d6a <bt_att_send>:
{
   23d6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23d6e:	4605      	mov	r5, r0
   23d70:	460e      	mov	r6, r1
   23d72:	4614      	mov	r4, r2
   23d74:	4698      	mov	r8, r3
	att = att_get(conn);
   23d76:	f7e8 fabd 	bl	c2f4 <att_get>
	if (!att) {
   23d7a:	4607      	mov	r7, r0
   23d7c:	b938      	cbnz	r0, 23d8e <bt_att_send+0x24>
		net_buf_unref(buf);
   23d7e:	4630      	mov	r0, r6
   23d80:	f7fa f91a 	bl	1dfb8 <net_buf_unref>
		return -ENOTCONN;
   23d84:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   23d88:	b002      	add	sp, #8
   23d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   23d8e:	b144      	cbz	r4, 23da2 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   23d90:	f8cd 8000 	str.w	r8, [sp]
   23d94:	4623      	mov	r3, r4
   23d96:	4632      	mov	r2, r6
   23d98:	2104      	movs	r1, #4
   23d9a:	4628      	mov	r0, r5
   23d9c:	f7ff fa4e 	bl	2323c <bt_l2cap_send_cb>
   23da0:	e7f2      	b.n	23d88 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23da2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
   23da4:	b184      	cbz	r4, 23dc8 <bt_att_send+0x5e>
   23da6:	f5b4 759a 	subs.w	r5, r4, #308	; 0x134
   23daa:	d00f      	beq.n	23dcc <bt_att_send+0x62>
   23dac:	6824      	ldr	r4, [r4, #0]
   23dae:	b10c      	cbz	r4, 23db4 <bt_att_send+0x4a>
   23db0:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
   23db4:	2000      	movs	r0, #0
   23db6:	b95d      	cbnz	r5, 23dd0 <bt_att_send+0x66>
	if (ret < 0) {
   23db8:	b188      	cbz	r0, 23dde <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   23dba:	f107 000c 	add.w	r0, r7, #12
   23dbe:	4631      	mov	r1, r6
   23dc0:	f001 fad5 	bl	2536e <net_buf_put>
	return 0;
   23dc4:	4628      	mov	r0, r5
   23dc6:	e7df      	b.n	23d88 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23dc8:	4625      	mov	r5, r4
   23dca:	e7f3      	b.n	23db4 <bt_att_send+0x4a>
   23dcc:	462c      	mov	r4, r5
   23dce:	e7f1      	b.n	23db4 <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   23dd0:	2200      	movs	r2, #0
   23dd2:	4631      	mov	r1, r6
   23dd4:	4628      	mov	r0, r5
   23dd6:	f7ff fe6c 	bl	23ab2 <bt_att_chan_send>
		if (ret >= 0) {
   23dda:	2800      	cmp	r0, #0
   23ddc:	db01      	blt.n	23de2 <bt_att_send+0x78>
	return 0;
   23dde:	2000      	movs	r0, #0
   23de0:	e7d2      	b.n	23d88 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23de2:	b154      	cbz	r4, 23dfa <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23de4:	f514 739a 	adds.w	r3, r4, #308	; 0x134
   23de8:	d004      	beq.n	23df4 <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23dea:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   23dee:	b10b      	cbz	r3, 23df4 <bt_att_send+0x8a>
   23df0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
   23df4:	4625      	mov	r5, r4
   23df6:	461c      	mov	r4, r3
   23df8:	e7dd      	b.n	23db6 <bt_att_send+0x4c>
   23dfa:	4623      	mov	r3, r4
   23dfc:	e7fa      	b.n	23df4 <bt_att_send+0x8a>

00023dfe <bt_att_req_send>:
{
   23dfe:	b570      	push	{r4, r5, r6, lr}
   23e00:	460c      	mov	r4, r1
	att = att_get(conn);
   23e02:	f7e8 fa77 	bl	c2f4 <att_get>
	if (!att) {
   23e06:	4605      	mov	r5, r0
   23e08:	b930      	cbnz	r0, 23e18 <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   23e0a:	6920      	ldr	r0, [r4, #16]
   23e0c:	f7fa f8d4 	bl	1dfb8 <net_buf_unref>
		req->buf = NULL;
   23e10:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   23e12:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   23e16:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23e18:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   23e1a:	b153      	cbz	r3, 23e32 <bt_att_req_send+0x34>
   23e1c:	f5b3 709a 	subs.w	r0, r3, #308	; 0x134
   23e20:	d007      	beq.n	23e32 <bt_att_req_send+0x34>
   23e22:	681e      	ldr	r6, [r3, #0]
   23e24:	b10e      	cbz	r6, 23e2a <bt_att_req_send+0x2c>
   23e26:	f5a6 769a 	sub.w	r6, r6, #308	; 0x134
		if (!chan->req) {
   23e2a:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   23e2e:	b143      	cbz	r3, 23e42 <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23e30:	b96e      	cbnz	r6, 23e4e <bt_att_req_send+0x50>
	parent->next = child;
   23e32:	2000      	movs	r0, #0
   23e34:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   23e36:	68ab      	ldr	r3, [r5, #8]
   23e38:	b9a3      	cbnz	r3, 23e64 <bt_att_req_send+0x66>
	list->head = node;
   23e3a:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   23e3e:	4618      	mov	r0, r3
}
   23e40:	e7e9      	b.n	23e16 <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   23e42:	4621      	mov	r1, r4
   23e44:	f7ff fdf8 	bl	23a38 <bt_att_chan_req_send>
			if (ret >= 0) {
   23e48:	2800      	cmp	r0, #0
   23e4a:	dbf1      	blt.n	23e30 <bt_att_req_send+0x32>
   23e4c:	e7e3      	b.n	23e16 <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23e4e:	f516 739a 	adds.w	r3, r6, #308	; 0x134
   23e52:	d004      	beq.n	23e5e <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23e54:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23e58:	b10b      	cbz	r3, 23e5e <bt_att_req_send+0x60>
   23e5a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
{
   23e5e:	4630      	mov	r0, r6
   23e60:	461e      	mov	r6, r3
   23e62:	e7e2      	b.n	23e2a <bt_att_req_send+0x2c>
	parent->next = child;
   23e64:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23e66:	60ac      	str	r4, [r5, #8]
}
   23e68:	e7d5      	b.n	23e16 <bt_att_req_send+0x18>

00023e6a <gatt_ccc_changed>:
{
   23e6a:	460b      	mov	r3, r1
   23e6c:	8909      	ldrh	r1, [r1, #8]
   23e6e:	8a5a      	ldrh	r2, [r3, #18]
   23e70:	428a      	cmp	r2, r1
   23e72:	bf38      	it	cc
   23e74:	460a      	movcc	r2, r1
		if (ccc->cfg[i].value > value) {
   23e76:	8b99      	ldrh	r1, [r3, #28]
   23e78:	4291      	cmp	r1, r2
   23e7a:	bf38      	it	cc
   23e7c:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   23e7e:	8bda      	ldrh	r2, [r3, #30]
   23e80:	428a      	cmp	r2, r1
   23e82:	d003      	beq.n	23e8c <gatt_ccc_changed+0x22>
		ccc->value = value;
   23e84:	83d9      	strh	r1, [r3, #30]
		if (ccc->cfg_changed) {
   23e86:	6a1b      	ldr	r3, [r3, #32]
   23e88:	b103      	cbz	r3, 23e8c <gatt_ccc_changed+0x22>
			ccc->cfg_changed(attr, value);
   23e8a:	4718      	bx	r3
}
   23e8c:	4770      	bx	lr

00023e8e <gatt_indicate_rsp>:
{
   23e8e:	b410      	push	{r4}
   23e90:	9b01      	ldr	r3, [sp, #4]
   23e92:	460a      	mov	r2, r1
	params->func(conn, params->attr, err);
   23e94:	e9d3 1401 	ldrd	r1, r4, [r3, #4]
   23e98:	4623      	mov	r3, r4
}
   23e9a:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   23e9c:	4718      	bx	r3

00023e9e <gatt_mtu_rsp>:
{
   23e9e:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   23ea0:	6813      	ldr	r3, [r2, #0]
   23ea2:	4718      	bx	r3

00023ea4 <gen_hash_m>:
{
   23ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   23ea6:	6807      	ldr	r7, [r0, #0]
   23ea8:	783e      	ldrb	r6, [r7, #0]
{
   23eaa:	b089      	sub	sp, #36	; 0x24
   23eac:	4605      	mov	r5, r0
   23eae:	460c      	mov	r4, r1
	if (attr->uuid->type != BT_UUID_TYPE_16)
   23eb0:	b10e      	cbz	r6, 23eb6 <gen_hash_m+0x12>
	switch (u16->val) {
   23eb2:	2601      	movs	r6, #1
   23eb4:	e015      	b.n	23ee2 <gen_hash_m+0x3e>
   23eb6:	887b      	ldrh	r3, [r7, #2]
   23eb8:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   23ebc:	d004      	beq.n	23ec8 <gen_hash_m+0x24>
   23ebe:	d813      	bhi.n	23ee8 <gen_hash_m+0x44>
   23ec0:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   23ec4:	2b03      	cmp	r3, #3
   23ec6:	d8f4      	bhi.n	23eb2 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   23ec8:	8a2b      	ldrh	r3, [r5, #16]
   23eca:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23ece:	2202      	movs	r2, #2
   23ed0:	f10d 010e 	add.w	r1, sp, #14
   23ed4:	4620      	mov	r0, r4
   23ed6:	f7fe fb33 	bl	22540 <tc_cmac_update>
   23eda:	b9e8      	cbnz	r0, 23f18 <gen_hash_m+0x74>
			state->err = -EINVAL;
   23edc:	f06f 0315 	mvn.w	r3, #21
   23ee0:	65a3      	str	r3, [r4, #88]	; 0x58
}
   23ee2:	4630      	mov	r0, r6
   23ee4:	b009      	add	sp, #36	; 0x24
   23ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   23ee8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   23eec:	33ff      	adds	r3, #255	; 0xff
   23eee:	b29b      	uxth	r3, r3
   23ef0:	2b04      	cmp	r3, #4
   23ef2:	d8de      	bhi.n	23eb2 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   23ef4:	8a03      	ldrh	r3, [r0, #16]
   23ef6:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23efa:	2202      	movs	r2, #2
   23efc:	f10d 010e 	add.w	r1, sp, #14
   23f00:	4620      	mov	r0, r4
   23f02:	f7fe fb1d 	bl	22540 <tc_cmac_update>
   23f06:	2800      	cmp	r0, #0
   23f08:	d0e8      	beq.n	23edc <gen_hash_m+0x38>
		value = sys_cpu_to_le16(u16->val);
   23f0a:	887b      	ldrh	r3, [r7, #2]
   23f0c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23f10:	2202      	movs	r2, #2
   23f12:	f10d 010e 	add.w	r1, sp, #14
   23f16:	e017      	b.n	23f48 <gen_hash_m+0xa4>
		value = sys_cpu_to_le16(u16->val);
   23f18:	887b      	ldrh	r3, [r7, #2]
   23f1a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23f1e:	2202      	movs	r2, #2
   23f20:	f10d 010e 	add.w	r1, sp, #14
   23f24:	4620      	mov	r0, r4
   23f26:	f7fe fb0b 	bl	22540 <tc_cmac_update>
   23f2a:	2800      	cmp	r0, #0
   23f2c:	d0d6      	beq.n	23edc <gen_hash_m+0x38>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   23f2e:	2000      	movs	r0, #0
   23f30:	2310      	movs	r3, #16
   23f32:	eb0d 0203 	add.w	r2, sp, r3
   23f36:	686f      	ldr	r7, [r5, #4]
   23f38:	9000      	str	r0, [sp, #0]
   23f3a:	4629      	mov	r1, r5
   23f3c:	47b8      	blx	r7
		if (len < 0) {
   23f3e:	1e02      	subs	r2, r0, #0
   23f40:	da01      	bge.n	23f46 <gen_hash_m+0xa2>
			state->err = len;
   23f42:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   23f44:	e7cd      	b.n	23ee2 <gen_hash_m+0x3e>
		if (tc_cmac_update(&state->state, data, len) ==
   23f46:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23f48:	4620      	mov	r0, r4
   23f4a:	f7fe faf9 	bl	22540 <tc_cmac_update>
   23f4e:	2800      	cmp	r0, #0
   23f50:	d1af      	bne.n	23eb2 <gen_hash_m+0xe>
   23f52:	e7c3      	b.n	23edc <gen_hash_m+0x38>

00023f54 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   23f54:	2207      	movs	r2, #7
   23f56:	f7fe bbe3 	b.w	22720 <memcpy>

00023f5a <gatt_notify_mult_send>:
{
   23f5a:	b538      	push	{r3, r4, r5, lr}
   23f5c:	460c      	mov	r4, r1
	struct nfy_mult_data *data = nfy_mult_user_data(*buf);
   23f5e:	6809      	ldr	r1, [r1, #0]
	ret = bt_att_send(conn, *buf, data->func, data->user_data);
   23f60:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   23f64:	f7ff ff01 	bl	23d6a <bt_att_send>
	if (ret < 0) {
   23f68:	1e05      	subs	r5, r0, #0
   23f6a:	da02      	bge.n	23f72 <gatt_notify_mult_send+0x18>
		net_buf_unref(*buf);
   23f6c:	6820      	ldr	r0, [r4, #0]
   23f6e:	f7fa f823 	bl	1dfb8 <net_buf_unref>
	*buf = NULL;
   23f72:	2300      	movs	r3, #0
   23f74:	6023      	str	r3, [r4, #0]
}
   23f76:	4628      	mov	r0, r5
   23f78:	bd38      	pop	{r3, r4, r5, pc}

00023f7a <gatt_read_mult_rsp>:
{
   23f7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23f7c:	9d08      	ldr	r5, [sp, #32]
   23f7e:	4606      	mov	r6, r0
   23f80:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   23f82:	460c      	mov	r4, r1
   23f84:	b901      	cbnz	r1, 23f88 <gatt_read_mult_rsp+0xe>
   23f86:	b94b      	cbnz	r3, 23f9c <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   23f88:	2300      	movs	r3, #0
   23f8a:	9308      	str	r3, [sp, #32]
   23f8c:	462a      	mov	r2, r5
   23f8e:	4621      	mov	r1, r4
	params->func(conn, 0, params, NULL, 0);
   23f90:	4630      	mov	r0, r6
   23f92:	46bc      	mov	ip, r7
}
   23f94:	b003      	add	sp, #12
   23f96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   23f9a:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   23f9c:	9300      	str	r3, [sp, #0]
   23f9e:	4613      	mov	r3, r2
   23fa0:	462a      	mov	r2, r5
   23fa2:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   23fa4:	9408      	str	r4, [sp, #32]
   23fa6:	682f      	ldr	r7, [r5, #0]
   23fa8:	4623      	mov	r3, r4
   23faa:	462a      	mov	r2, r5
   23fac:	4621      	mov	r1, r4
   23fae:	e7ef      	b.n	23f90 <gatt_read_mult_rsp+0x16>

00023fb0 <gatt_sub_remove.part.0>:
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   23fb0:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   23fb2:	2300      	movs	r3, #0
   23fb4:	4669      	mov	r1, sp
   23fb6:	3001      	adds	r0, #1
   23fb8:	9300      	str	r3, [sp, #0]
   23fba:	f8cd 3003 	str.w	r3, [sp, #3]
   23fbe:	f7ff ffc9 	bl	23f54 <bt_addr_le_copy>
}
   23fc2:	b003      	add	sp, #12
   23fc4:	f85d fb04 	ldr.w	pc, [sp], #4

00023fc8 <clear_cf_cfg>:
{
   23fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23fca:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   23fcc:	2500      	movs	r5, #0
   23fce:	4669      	mov	r1, sp
   23fd0:	3001      	adds	r0, #1
   23fd2:	9500      	str	r5, [sp, #0]
   23fd4:	f8cd 5003 	str.w	r5, [sp, #3]
   23fd8:	f7ff ffbc 	bl	23f54 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   23fdc:	f104 0008 	add.w	r0, r4, #8
   23fe0:	2201      	movs	r2, #1
   23fe2:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   23fe4:	340c      	adds	r4, #12
   23fe6:	f7fe fbc6 	bl	22776 <memset>
   23fea:	f3bf 8f5b 	dmb	ish
   23fee:	e854 3f00 	ldrex	r3, [r4]
   23ff2:	e844 5200 	strex	r2, r5, [r4]
   23ff6:	2a00      	cmp	r2, #0
   23ff8:	d1f9      	bne.n	23fee <clear_cf_cfg+0x26>
   23ffa:	f3bf 8f5b 	dmb	ish
}
   23ffe:	b003      	add	sp, #12
   24000:	bd30      	pop	{r4, r5, pc}

00024002 <match_uuid>:
   24002:	6008      	str	r0, [r1, #0]
   24004:	2000      	movs	r0, #0
   24006:	4770      	bx	lr

00024008 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   24008:	2301      	movs	r3, #1
   2400a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2400c:	f3bf 8f5b 	dmb	ish
   24010:	e850 2f00 	ldrex	r2, [r0]
   24014:	431a      	orrs	r2, r3
   24016:	e840 2100 	strex	r1, r2, [r0]
   2401a:	2900      	cmp	r1, #0
   2401c:	d1f8      	bne.n	24010 <atomic_set_bit+0x8>
   2401e:	f3bf 8f5b 	dmb	ish
}
   24022:	4770      	bx	lr

00024024 <sc_restore_rsp>:
{
   24024:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   24026:	f7e9 fadd 	bl	d5e4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2402a:	b140      	cbz	r0, 2403e <sc_restore_rsp+0x1a>
   2402c:	7a03      	ldrb	r3, [r0, #8]
   2402e:	07db      	lsls	r3, r3, #31
   24030:	d505      	bpl.n	2403e <sc_restore_rsp+0x1a>
}
   24032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   24036:	2100      	movs	r1, #0
   24038:	300c      	adds	r0, #12
   2403a:	f7ff bfe5 	b.w	24008 <atomic_set_bit>
}
   2403e:	bd08      	pop	{r3, pc}

00024040 <find_ccc_cfg>:
{
   24040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24042:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   24044:	1c4c      	adds	r4, r1, #1
   24046:	f101 051f 	add.w	r5, r1, #31
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   2404a:	1e67      	subs	r7, r4, #1
		if (conn) {
   2404c:	b14e      	cbz	r6, 24062 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2404e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   24052:	4622      	mov	r2, r4
   24054:	4630      	mov	r0, r6
   24056:	f7fe ff08 	bl	22e6a <bt_conn_is_peer_addr_le>
   2405a:	b160      	cbz	r0, 24076 <find_ccc_cfg+0x36>
}
   2405c:	4638      	mov	r0, r7
   2405e:	b003      	add	sp, #12
   24060:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
   24062:	2207      	movs	r2, #7
   24064:	4669      	mov	r1, sp
   24066:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   24068:	9600      	str	r6, [sp, #0]
   2406a:	f8cd 6003 	str.w	r6, [sp, #3]
   2406e:	f7fe fb47 	bl	22700 <memcmp>
   24072:	2800      	cmp	r0, #0
   24074:	d0f2      	beq.n	2405c <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   24076:	340a      	adds	r4, #10
   24078:	42ac      	cmp	r4, r5
   2407a:	d1e6      	bne.n	2404a <find_ccc_cfg+0xa>
	return NULL;
   2407c:	2700      	movs	r7, #0
   2407e:	e7ed      	b.n	2405c <find_ccc_cfg+0x1c>

00024080 <read_appearance>:
{
   24080:	b513      	push	{r0, r1, r4, lr}
   24082:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   24086:	4610      	mov	r0, r2
	if (offset > value_len) {
   24088:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   2408a:	f04f 0200 	mov.w	r2, #0
   2408e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   24092:	d80d      	bhi.n	240b0 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   24094:	f1c1 0402 	rsb	r4, r1, #2
   24098:	429c      	cmp	r4, r3
   2409a:	bfa8      	it	ge
   2409c:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2409e:	f10d 0306 	add.w	r3, sp, #6
   240a2:	4622      	mov	r2, r4
   240a4:	4419      	add	r1, r3
   240a6:	f7fe fb3b 	bl	22720 <memcpy>
}
   240aa:	4620      	mov	r0, r4
   240ac:	b002      	add	sp, #8
   240ae:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   240b0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   240b4:	e7f9      	b.n	240aa <read_appearance+0x2a>

000240b6 <read_name>:
{
   240b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   240ba:	4698      	mov	r8, r3
   240bc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   240c0:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   240c2:	f7e5 f969 	bl	9398 <bt_get_name>
   240c6:	4607      	mov	r7, r0
				 strlen(name));
   240c8:	f7fe fb07 	bl	226da <strlen>
	if (offset > value_len) {
   240cc:	b283      	uxth	r3, r0
   240ce:	42b3      	cmp	r3, r6
   240d0:	d30c      	bcc.n	240ec <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   240d2:	1b9c      	subs	r4, r3, r6
   240d4:	4544      	cmp	r4, r8
   240d6:	bfa8      	it	ge
   240d8:	4644      	movge	r4, r8
   240da:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   240dc:	4622      	mov	r2, r4
   240de:	19b9      	adds	r1, r7, r6
   240e0:	4628      	mov	r0, r5
   240e2:	f7fe fb1d 	bl	22720 <memcpy>
}
   240e6:	4620      	mov	r0, r4
   240e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   240ec:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   240f0:	e7f9      	b.n	240e6 <read_name+0x30>

000240f2 <bt_gatt_attr_read_ccc>:
{
   240f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   240f4:	68c9      	ldr	r1, [r1, #12]
{
   240f6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   240fa:	4615      	mov	r5, r2
   240fc:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   240fe:	f7ff ff9f 	bl	24040 <find_ccc_cfg>
	if (cfg) {
   24102:	b100      	cbz	r0, 24106 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   24104:	8900      	ldrh	r0, [r0, #8]
   24106:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2410a:	2e02      	cmp	r6, #2
   2410c:	d80e      	bhi.n	2412c <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2410e:	f1c6 0402 	rsb	r4, r6, #2
   24112:	42bc      	cmp	r4, r7
   24114:	bfa8      	it	ge
   24116:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   24118:	f10d 0306 	add.w	r3, sp, #6
   2411c:	4622      	mov	r2, r4
   2411e:	1999      	adds	r1, r3, r6
   24120:	4628      	mov	r0, r5
   24122:	f7fe fafd 	bl	22720 <memcpy>
}
   24126:	4620      	mov	r0, r4
   24128:	b003      	add	sp, #12
   2412a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2412c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   24130:	e7f9      	b.n	24126 <bt_gatt_attr_read_ccc+0x34>

00024132 <cf_read>:
{
   24132:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24134:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   24136:	2300      	movs	r3, #0
{
   24138:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2413c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   24140:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   24142:	f7e9 fa4f 	bl	d5e4 <find_cf_cfg>
	if (cfg) {
   24146:	b128      	cbz	r0, 24154 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   24148:	f100 0108 	add.w	r1, r0, #8
   2414c:	2201      	movs	r2, #1
   2414e:	a801      	add	r0, sp, #4
   24150:	f7fe fae6 	bl	22720 <memcpy>
	if (offset > value_len) {
   24154:	2e01      	cmp	r6, #1
   24156:	d80d      	bhi.n	24174 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   24158:	f1c6 0401 	rsb	r4, r6, #1
   2415c:	42bc      	cmp	r4, r7
   2415e:	bfa8      	it	ge
   24160:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   24162:	ab01      	add	r3, sp, #4
   24164:	4622      	mov	r2, r4
   24166:	1999      	adds	r1, r3, r6
   24168:	4628      	mov	r0, r5
   2416a:	f7fe fad9 	bl	22720 <memcpy>
}
   2416e:	4620      	mov	r0, r4
   24170:	b003      	add	sp, #12
   24172:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24174:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   24178:	e7f9      	b.n	2416e <cf_read+0x3c>

0002417a <bt_gatt_attr_read_service>:
{
   2417a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   2417c:	68c9      	ldr	r1, [r1, #12]
{
   2417e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   24182:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   24184:	780b      	ldrb	r3, [r1, #0]
{
   24186:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   24188:	b993      	cbnz	r3, 241b0 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2418a:	884b      	ldrh	r3, [r1, #2]
   2418c:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   24190:	2d02      	cmp	r5, #2
   24192:	d819      	bhi.n	241c8 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   24194:	f1c5 0202 	rsb	r2, r5, #2
   24198:	4294      	cmp	r4, r2
   2419a:	bfa8      	it	ge
   2419c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2419e:	f10d 0306 	add.w	r3, sp, #6
   241a2:	4622      	mov	r2, r4
   241a4:	1959      	adds	r1, r3, r5
   241a6:	f7fe fabb 	bl	22720 <memcpy>
}
   241aa:	4620      	mov	r0, r4
   241ac:	b003      	add	sp, #12
   241ae:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   241b0:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   241b2:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   241b6:	d807      	bhi.n	241c8 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   241b8:	f1c5 0210 	rsb	r2, r5, #16
   241bc:	4294      	cmp	r4, r2
   241be:	bfa8      	it	ge
   241c0:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   241c2:	4622      	mov	r2, r4
   241c4:	4429      	add	r1, r5
   241c6:	e7ee      	b.n	241a6 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   241c8:	f06f 0406 	mvn.w	r4, #6
   241cc:	e7ed      	b.n	241aa <bt_gatt_attr_read_service+0x30>

000241ce <gatt_sub_remove>:
{
   241ce:	b538      	push	{r3, r4, r5, lr}
   241d0:	460c      	mov	r4, r1
	if (params) {
   241d2:	4619      	mov	r1, r3
   241d4:	b16b      	cbz	r3, 241f2 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   241d6:	f103 0510 	add.w	r5, r3, #16
Z_GENLIST_REMOVE(slist, snode)
   241da:	691b      	ldr	r3, [r3, #16]
   241dc:	b982      	cbnz	r2, 24200 <gatt_sub_remove+0x32>
   241de:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   241e0:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   241e2:	4295      	cmp	r5, r2
   241e4:	d100      	bne.n	241e8 <gatt_sub_remove+0x1a>
	list->tail = node;
   241e6:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   241e8:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   241ea:	680d      	ldr	r5, [r1, #0]
   241ec:	610b      	str	r3, [r1, #16]
   241ee:	461a      	mov	r2, r3
   241f0:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   241f2:	68a3      	ldr	r3, [r4, #8]
   241f4:	b953      	cbnz	r3, 2420c <gatt_sub_remove+0x3e>
   241f6:	4620      	mov	r0, r4
}
   241f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   241fc:	f7ff bed8 	b.w	23fb0 <gatt_sub_remove.part.0>
   24200:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   24202:	68e3      	ldr	r3, [r4, #12]
   24204:	429d      	cmp	r5, r3
	list->tail = node;
   24206:	bf08      	it	eq
   24208:	60e2      	streq	r2, [r4, #12]
}
   2420a:	e7ed      	b.n	241e8 <gatt_sub_remove+0x1a>
   2420c:	bd38      	pop	{r3, r4, r5, pc}

0002420e <gatt_write_ccc_rsp>:
{
   2420e:	b570      	push	{r4, r5, r6, lr}
   24210:	9c04      	ldr	r4, [sp, #16]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24212:	f3bf 8f5b 	dmb	ish
   24216:	4605      	mov	r5, r0
   24218:	f104 030c 	add.w	r3, r4, #12
   2421c:	e853 2f00 	ldrex	r2, [r3]
   24220:	f022 0204 	bic.w	r2, r2, #4
   24224:	e843 2c00 	strex	ip, r2, [r3]
   24228:	f1bc 0f00 	cmp.w	ip, #0
   2422c:	d1f6      	bne.n	2421c <gatt_write_ccc_rsp+0xe>
   2422e:	f3bf 8f5b 	dmb	ish
	if (err) {
   24232:	b1a9      	cbz	r1, 24260 <gatt_write_ccc_rsp+0x52>
		sub = gatt_sub_find(conn);
   24234:	2100      	movs	r1, #0
   24236:	f7e9 f91d 	bl	d474 <gatt_sub_find_free>
		if (!sub) {
   2423a:	4601      	mov	r1, r0
   2423c:	b1c8      	cbz	r0, 24272 <gatt_write_ccc_rsp+0x64>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   2423e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   24240:	b1bb      	cbz	r3, 24272 <gatt_write_ccc_rsp+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24242:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   24244:	f104 0010 	add.w	r0, r4, #16
   24248:	4283      	cmp	r3, r0
   2424a:	d105      	bne.n	24258 <gatt_write_ccc_rsp+0x4a>
				gatt_sub_remove(conn, sub, tmp, params);
   2424c:	4623      	mov	r3, r4
   2424e:	4628      	mov	r0, r5
}
   24250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				gatt_sub_remove(conn, sub, tmp, params);
   24254:	f7ff bfbb 	b.w	241ce <gatt_sub_remove>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24258:	b15a      	cbz	r2, 24272 <gatt_write_ccc_rsp+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2425a:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   2425c:	6812      	ldr	r2, [r2, #0]
   2425e:	e7f3      	b.n	24248 <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   24260:	8923      	ldrh	r3, [r4, #8]
   24262:	b933      	cbnz	r3, 24272 <gatt_write_ccc_rsp+0x64>
		params->notify(conn, params, NULL, 0);
   24264:	6825      	ldr	r5, [r4, #0]
   24266:	4621      	mov	r1, r4
   24268:	46ac      	mov	ip, r5
   2426a:	461a      	mov	r2, r3
}
   2426c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->notify(conn, params, NULL, 0);
   24270:	4760      	bx	ip
}
   24272:	bd70      	pop	{r4, r5, r6, pc}

00024274 <sc_clear>:
{
   24274:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   24276:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   2427a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2427c:	4631      	mov	r1, r6
   2427e:	7a00      	ldrb	r0, [r0, #8]
   24280:	f7fe fcec 	bl	22c5c <bt_addr_le_is_bonded>
   24284:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   24286:	4631      	mov	r1, r6
   24288:	f7e9 f952 	bl	d530 <find_sc_cfg>
	if (!cfg) {
   2428c:	b128      	cbz	r0, 2429a <sc_clear+0x26>
}
   2428e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   24292:	220c      	movs	r2, #12
   24294:	2100      	movs	r1, #0
   24296:	f7fe ba6e 	b.w	22776 <memset>
}
   2429a:	bd70      	pop	{r4, r5, r6, pc}

0002429c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2429c:	2a02      	cmp	r2, #2
{
   2429e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   242a0:	d108      	bne.n	242b4 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   242a2:	2300      	movs	r3, #0
   242a4:	f100 0188 	add.w	r1, r0, #136	; 0x88
   242a8:	461a      	mov	r2, r3
   242aa:	7a00      	ldrb	r0, [r0, #8]
   242ac:	f7e9 f962 	bl	d574 <sc_save>
}
   242b0:	2002      	movs	r0, #2
   242b2:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   242b4:	f7ff ffde 	bl	24274 <sc_clear>
   242b8:	e7fa      	b.n	242b0 <sc_ccc_cfg_write+0x14>

000242ba <bt_gatt_attr_read>:
{
   242ba:	b538      	push	{r3, r4, r5, lr}
   242bc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   242c0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   242c4:	42a9      	cmp	r1, r5
{
   242c6:	4610      	mov	r0, r2
	if (offset > value_len) {
   242c8:	d80b      	bhi.n	242e2 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   242ca:	1a6d      	subs	r5, r5, r1
   242cc:	429d      	cmp	r5, r3
   242ce:	bfa8      	it	ge
   242d0:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   242d2:	9b05      	ldr	r3, [sp, #20]
   242d4:	b2ad      	uxth	r5, r5
   242d6:	462a      	mov	r2, r5
   242d8:	4419      	add	r1, r3
   242da:	f7fe fa21 	bl	22720 <memcpy>
}
   242de:	4628      	mov	r0, r5
   242e0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   242e2:	f06f 0506 	mvn.w	r5, #6
   242e6:	e7fa      	b.n	242de <bt_gatt_attr_read+0x24>

000242e8 <bt_gatt_attr_read_chrc>:
{
   242e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   242ea:	68cf      	ldr	r7, [r1, #12]
{
   242ec:	b087      	sub	sp, #28
   242ee:	4608      	mov	r0, r1
   242f0:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   242f2:	79bb      	ldrb	r3, [r7, #6]
   242f4:	f88d 3004 	strb.w	r3, [sp, #4]
{
   242f8:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   242fa:	f7e9 fc71 	bl	dbe0 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   242fe:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   24300:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   24304:	780b      	ldrb	r3, [r1, #0]
{
   24306:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2430a:	b99b      	cbnz	r3, 24334 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2430c:	884b      	ldrh	r3, [r1, #2]
   2430e:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   24312:	2105      	movs	r1, #5
	if (offset > value_len) {
   24314:	42b1      	cmp	r1, r6
   24316:	d315      	bcc.n	24344 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   24318:	1b89      	subs	r1, r1, r6
   2431a:	42a1      	cmp	r1, r4
   2431c:	bfa8      	it	ge
   2431e:	4621      	movge	r1, r4
   24320:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   24322:	ab01      	add	r3, sp, #4
   24324:	4622      	mov	r2, r4
   24326:	1999      	adds	r1, r3, r6
   24328:	4628      	mov	r0, r5
   2432a:	f7fe f9f9 	bl	22720 <memcpy>
}
   2432e:	4620      	mov	r0, r4
   24330:	b007      	add	sp, #28
   24332:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   24334:	3101      	adds	r1, #1
   24336:	2210      	movs	r2, #16
   24338:	f10d 0007 	add.w	r0, sp, #7
   2433c:	f7fe f9f0 	bl	22720 <memcpy>
		value_len += 16U;
   24340:	2113      	movs	r1, #19
   24342:	e7e7      	b.n	24314 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24344:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   24348:	e7f1      	b.n	2432e <bt_gatt_attr_read_chrc+0x46>

0002434a <bt_gatt_foreach_attr>:
{
   2434a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2434c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   24350:	2300      	movs	r3, #0
   24352:	9300      	str	r3, [sp, #0]
   24354:	461a      	mov	r2, r3
   24356:	f7e9 fc5b 	bl	dc10 <bt_gatt_foreach_attr_type>
}
   2435a:	b005      	add	sp, #20
   2435c:	f85d fb04 	ldr.w	pc, [sp], #4

00024360 <db_hash_process>:
	db_hash_gen(true);
   24360:	f7e9 bcb6 	b.w	dcd0 <db_hash_gen.isra.0>

00024364 <bt_gatt_check_perm>:
{
   24364:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   24366:	07d4      	lsls	r4, r2, #31
{
   24368:	4605      	mov	r5, r0
   2436a:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2436c:	d504      	bpl.n	24378 <bt_gatt_check_perm+0x14>
   2436e:	f010 0f15 	tst.w	r0, #21
   24372:	d01e      	beq.n	243b2 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   24374:	684b      	ldr	r3, [r1, #4]
   24376:	b1e3      	cbz	r3, 243b2 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   24378:	0793      	lsls	r3, r2, #30
   2437a:	d504      	bpl.n	24386 <bt_gatt_check_perm+0x22>
   2437c:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   24380:	d019      	beq.n	243b6 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   24382:	688b      	ldr	r3, [r1, #8]
   24384:	b1bb      	cbz	r3, 243b6 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   24386:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2438a:	f014 0f30 	tst.w	r4, #48	; 0x30
   2438e:	d103      	bne.n	24398 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   24390:	f014 000c 	ands.w	r0, r4, #12
   24394:	d107      	bne.n	243a6 <bt_gatt_check_perm+0x42>
}
   24396:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   24398:	4628      	mov	r0, r5
   2439a:	f7fe fd64 	bl	22e66 <bt_conn_get_security>
   2439e:	2802      	cmp	r0, #2
   243a0:	d8f6      	bhi.n	24390 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   243a2:	2005      	movs	r0, #5
   243a4:	e7f7      	b.n	24396 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   243a6:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   243a8:	2b00      	cmp	r3, #0
   243aa:	bf14      	ite	ne
   243ac:	2000      	movne	r0, #0
   243ae:	200f      	moveq	r0, #15
   243b0:	e7f1      	b.n	24396 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   243b2:	2002      	movs	r0, #2
   243b4:	e7ef      	b.n	24396 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   243b6:	2003      	movs	r0, #3
   243b8:	e7ed      	b.n	24396 <bt_gatt_check_perm+0x32>

000243ba <gatt_discover_next>:
{
   243ba:	b570      	push	{r4, r5, r6, lr}
   243bc:	4605      	mov	r5, r0
   243be:	4614      	mov	r4, r2
	if (!last_handle)
   243c0:	b929      	cbnz	r1, 243ce <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   243c2:	4621      	mov	r1, r4
   243c4:	4628      	mov	r0, r5
   243c6:	f7e9 fe39 	bl	e03c <bt_gatt_discover>
   243ca:	b928      	cbnz	r0, 243d8 <gatt_discover_next+0x1e>
}
   243cc:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   243ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
   243d2:	4291      	cmp	r1, r2
   243d4:	d107      	bne.n	243e6 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   243d6:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   243d8:	6863      	ldr	r3, [r4, #4]
   243da:	4622      	mov	r2, r4
   243dc:	4628      	mov	r0, r5
   243de:	2100      	movs	r1, #0
}
   243e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   243e4:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   243e6:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   243e8:	1c4b      	adds	r3, r1, #1
   243ea:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   243ec:	429a      	cmp	r2, r3
		params->start_handle++;
   243ee:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   243f0:	d2e7      	bcs.n	243c2 <gatt_discover_next+0x8>
   243f2:	e7f1      	b.n	243d8 <gatt_discover_next+0x1e>

000243f4 <gatt_find_type_rsp>:
{
   243f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   243f8:	b088      	sub	sp, #32
   243fa:	4607      	mov	r7, r0
   243fc:	9e10      	ldr	r6, [sp, #64]	; 0x40
   243fe:	4690      	mov	r8, r2
   24400:	461d      	mov	r5, r3
	if (err) {
   24402:	460c      	mov	r4, r1
   24404:	2900      	cmp	r1, #0
   24406:	d13a      	bne.n	2447e <gatt_find_type_rsp+0x8a>
	uint16_t end_handle = 0U, start_handle;
   24408:	4689      	mov	r9, r1
		struct bt_gatt_attr attr = {};
   2440a:	468a      	mov	sl, r1
	for (i = 0U; length >= sizeof(rsp->list[i]);
   2440c:	2d03      	cmp	r5, #3
   2440e:	d809      	bhi.n	24424 <gatt_find_type_rsp+0x30>
	if (length > 0) {
   24410:	2d00      	cmp	r5, #0
   24412:	d134      	bne.n	2447e <gatt_find_type_rsp+0x8a>
	gatt_discover_next(conn, end_handle, params);
   24414:	4632      	mov	r2, r6
   24416:	4649      	mov	r1, r9
   24418:	4638      	mov	r0, r7
   2441a:	f7ff ffce 	bl	243ba <gatt_discover_next>
}
   2441e:	b008      	add	sp, #32
   24420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_gatt_attr attr = {};
   24424:	2210      	movs	r2, #16
   24426:	2100      	movs	r1, #0
   24428:	eb0d 0002 	add.w	r0, sp, r2
   2442c:	f7fe f9a3 	bl	22776 <memset>
		start_handle = sys_le16_to_cpu(rsp->list[i].start_handle);
   24430:	b2e3      	uxtb	r3, r4
   24432:	eb08 0183 	add.w	r1, r8, r3, lsl #2
   24436:	f838 2023 	ldrh.w	r2, [r8, r3, lsl #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2443a:	7c33      	ldrb	r3, [r6, #16]
		end_handle = sys_le16_to_cpu(rsp->list[i].end_handle);
   2443c:	f8b1 9002 	ldrh.w	r9, [r1, #2]
		attr.handle = start_handle;
   24440:	f8ad 201c 	strh.w	r2, [sp, #28]
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
   24444:	2b00      	cmp	r3, #0
   24446:	f642 0301 	movw	r3, #10241	; 0x2801
   2444a:	bf08      	it	eq
   2444c:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   24450:	f8ad 3002 	strh.w	r3, [sp, #2]
		value.uuid = params->uuid;
   24454:	6833      	ldr	r3, [r6, #0]
   24456:	9301      	str	r3, [sp, #4]
		attr.user_data = &value;
   24458:	ab01      	add	r3, sp, #4
   2445a:	9306      	str	r3, [sp, #24]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2445c:	f88d a000 	strb.w	sl, [sp]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   24460:	6873      	ldr	r3, [r6, #4]
		value.end_handle = end_handle;
   24462:	f8ad 9008 	strh.w	r9, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   24466:	f8cd d00c 	str.w	sp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2446a:	4632      	mov	r2, r6
   2446c:	a903      	add	r1, sp, #12
   2446e:	4638      	mov	r0, r7
   24470:	4798      	blx	r3
   24472:	3401      	adds	r4, #1
   24474:	2800      	cmp	r0, #0
   24476:	d0d2      	beq.n	2441e <gatt_find_type_rsp+0x2a>
	     i++, length -=  sizeof(rsp->list[i])) {
   24478:	3d04      	subs	r5, #4
   2447a:	b2ad      	uxth	r5, r5
   2447c:	e7c6      	b.n	2440c <gatt_find_type_rsp+0x18>
	params->func(conn, NULL, params);
   2447e:	6873      	ldr	r3, [r6, #4]
   24480:	4632      	mov	r2, r6
   24482:	2100      	movs	r1, #0
   24484:	4638      	mov	r0, r7
   24486:	4798      	blx	r3
   24488:	e7c9      	b.n	2441e <gatt_find_type_rsp+0x2a>

0002448a <bt_gatt_unsubscribe>:
{
   2448a:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2448e:	7b43      	ldrb	r3, [r0, #13]
   24490:	2b06      	cmp	r3, #6
{
   24492:	4681      	mov	r9, r0
   24494:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   24496:	d16f      	bne.n	24578 <bt_gatt_unsubscribe+0xee>
	sub = gatt_sub_find(conn);
   24498:	2100      	movs	r1, #0
   2449a:	f7e8 ffeb 	bl	d474 <gatt_sub_find_free>
	if (!sub) {
   2449e:	4607      	mov	r7, r0
   244a0:	b920      	cbnz	r0, 244ac <bt_gatt_unsubscribe+0x22>
		return -EINVAL;
   244a2:	f06f 0015 	mvn.w	r0, #21
}
   244a6:	b001      	add	sp, #4
   244a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   244ac:	6884      	ldr	r4, [r0, #8]
   244ae:	b1cc      	cbz	r4, 244e4 <bt_gatt_unsubscribe+0x5a>
   244b0:	f1b4 0510 	subs.w	r5, r4, #16
   244b4:	d018      	beq.n	244e8 <bt_gatt_unsubscribe+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   244b6:	6824      	ldr	r4, [r4, #0]
   244b8:	b104      	cbz	r4, 244bc <bt_gatt_unsubscribe+0x32>
   244ba:	3c10      	subs	r4, #16
   244bc:	f04f 0800 	mov.w	r8, #0
   244c0:	46c3      	mov	fp, r8
   244c2:	46c2      	mov	sl, r8
	parent->next = child;
   244c4:	4642      	mov	r2, r8
   244c6:	b98d      	cbnz	r5, 244ec <bt_gatt_unsubscribe+0x62>
	if (!found) {
   244c8:	f1bb 0f00 	cmp.w	fp, #0
   244cc:	d0e9      	beq.n	244a2 <bt_gatt_unsubscribe+0x18>
	if (has_subscription) {
   244ce:	f1ba 0f00 	cmp.w	sl, #0
   244d2:	d046      	beq.n	24562 <bt_gatt_unsubscribe+0xd8>
		params->notify(conn, params, NULL, 0);
   244d4:	6834      	ldr	r4, [r6, #0]
   244d6:	462b      	mov	r3, r5
   244d8:	462a      	mov	r2, r5
   244da:	4631      	mov	r1, r6
   244dc:	4648      	mov	r0, r9
   244de:	47a0      	blx	r4
		return 0;
   244e0:	4628      	mov	r0, r5
   244e2:	e7e0      	b.n	244a6 <bt_gatt_unsubscribe+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   244e4:	4625      	mov	r5, r4
   244e6:	e7e9      	b.n	244bc <bt_gatt_unsubscribe+0x32>
   244e8:	462c      	mov	r4, r5
   244ea:	e7e7      	b.n	244bc <bt_gatt_unsubscribe+0x32>
		if (params == tmp) {
   244ec:	42b5      	cmp	r5, r6
   244ee:	f105 0310 	add.w	r3, r5, #16
   244f2:	d129      	bne.n	24548 <bt_gatt_unsubscribe+0xbe>
Z_GENLIST_REMOVE(slist, snode)
   244f4:	6928      	ldr	r0, [r5, #16]
   244f6:	f1b8 0f00 	cmp.w	r8, #0
   244fa:	d11d      	bne.n	24538 <bt_gatt_unsubscribe+0xae>
   244fc:	68f9      	ldr	r1, [r7, #12]
	list->head = node;
   244fe:	60b8      	str	r0, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
   24500:	428b      	cmp	r3, r1
   24502:	d100      	bne.n	24506 <bt_gatt_unsubscribe+0x7c>
	list->tail = node;
   24504:	60f8      	str	r0, [r7, #12]
	parent->next = child;
   24506:	612a      	str	r2, [r5, #16]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24508:	f3bf 8f5b 	dmb	ish
   2450c:	68f3      	ldr	r3, [r6, #12]
   2450e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   24512:	f3c3 0b80 	ubfx	fp, r3, #2, #1
			if (atomic_test_bit(params->flags,
   24516:	075b      	lsls	r3, r3, #29
   24518:	d51e      	bpl.n	24558 <bt_gatt_unsubscribe+0xce>
	bt_att_req_cancel(conn, params);
   2451a:	4631      	mov	r1, r6
   2451c:	4648      	mov	r0, r9
   2451e:	f7e8 feb7 	bl	d290 <bt_att_req_cancel>
}
   24522:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   24524:	b1dc      	cbz	r4, 2455e <bt_gatt_unsubscribe+0xd4>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24526:	f114 0310 	adds.w	r3, r4, #16
   2452a:	d002      	beq.n	24532 <bt_gatt_unsubscribe+0xa8>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2452c:	6923      	ldr	r3, [r4, #16]
   2452e:	b103      	cbz	r3, 24532 <bt_gatt_unsubscribe+0xa8>
   24530:	3b10      	subs	r3, #16
   24532:	4625      	mov	r5, r4
   24534:	461c      	mov	r4, r3
   24536:	e7c6      	b.n	244c6 <bt_gatt_unsubscribe+0x3c>
	parent->next = child;
   24538:	f8c8 0000 	str.w	r0, [r8]
Z_GENLIST_REMOVE(slist, snode)
   2453c:	68f9      	ldr	r1, [r7, #12]
   2453e:	428b      	cmp	r3, r1
	list->tail = node;
   24540:	bf08      	it	eq
   24542:	f8c7 800c 	streq.w	r8, [r7, #12]
}
   24546:	e7de      	b.n	24506 <bt_gatt_unsubscribe+0x7c>
		if (tmp->value_handle == params->value_handle) {
   24548:	88a8      	ldrh	r0, [r5, #4]
   2454a:	88b1      	ldrh	r1, [r6, #4]
   2454c:	4698      	mov	r8, r3
   2454e:	4288      	cmp	r0, r1
   24550:	bf08      	it	eq
   24552:	f04f 0a01 	moveq.w	sl, #1
   24556:	e7e5      	b.n	24524 <bt_gatt_unsubscribe+0x9a>
			found = true;
   24558:	f04f 0b01 	mov.w	fp, #1
   2455c:	e7e2      	b.n	24524 <bt_gatt_unsubscribe+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   2455e:	4623      	mov	r3, r4
   24560:	e7e7      	b.n	24532 <bt_gatt_unsubscribe+0xa8>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   24562:	88f1      	ldrh	r1, [r6, #6]
	params->value = 0x0000;
   24564:	f8a6 a008 	strh.w	sl, [r6, #8]
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   24568:	4633      	mov	r3, r6
   2456a:	4652      	mov	r2, sl
   2456c:	4648      	mov	r0, r9
}
   2456e:	b001      	add	sp, #4
   24570:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   24574:	f7e8 bfa8 	b.w	d4c8 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   24578:	f06f 0038 	mvn.w	r0, #56	; 0x38
   2457c:	e793      	b.n	244a6 <bt_gatt_unsubscribe+0x1c>

0002457e <bt_gatt_notification>:
{
   2457e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24582:	4688      	mov	r8, r1
	sub = gatt_sub_find(conn);
   24584:	2100      	movs	r1, #0
{
   24586:	4607      	mov	r7, r0
   24588:	4691      	mov	r9, r2
   2458a:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   2458c:	f7e8 ff72 	bl	d474 <gatt_sub_find_free>
	if (!sub) {
   24590:	b1f8      	cbz	r0, 245d2 <bt_gatt_notification+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   24592:	6883      	ldr	r3, [r0, #8]
   24594:	b1eb      	cbz	r3, 245d2 <bt_gatt_notification+0x54>
   24596:	f1b3 0610 	subs.w	r6, r3, #16
   2459a:	d01a      	beq.n	245d2 <bt_gatt_notification+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2459c:	681c      	ldr	r4, [r3, #0]
   2459e:	b104      	cbz	r4, 245a2 <bt_gatt_notification+0x24>
   245a0:	3c10      	subs	r4, #16
		if (handle != params->value_handle) {
   245a2:	88b3      	ldrh	r3, [r6, #4]
   245a4:	4543      	cmp	r3, r8
   245a6:	d10a      	bne.n	245be <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   245a8:	6835      	ldr	r5, [r6, #0]
   245aa:	4653      	mov	r3, sl
   245ac:	464a      	mov	r2, r9
   245ae:	4631      	mov	r1, r6
   245b0:	4638      	mov	r0, r7
   245b2:	47a8      	blx	r5
   245b4:	b918      	cbnz	r0, 245be <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   245b6:	4631      	mov	r1, r6
   245b8:	4638      	mov	r0, r7
   245ba:	f7ff ff66 	bl	2448a <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   245be:	b144      	cbz	r4, 245d2 <bt_gatt_notification+0x54>
Z_GENLIST_PEEK_NEXT(slist, snode)
   245c0:	f114 0510 	adds.w	r5, r4, #16
   245c4:	d002      	beq.n	245cc <bt_gatt_notification+0x4e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   245c6:	6925      	ldr	r5, [r4, #16]
   245c8:	b105      	cbz	r5, 245cc <bt_gatt_notification+0x4e>
   245ca:	3d10      	subs	r5, #16
{
   245cc:	4626      	mov	r6, r4
   245ce:	462c      	mov	r4, r5
   245d0:	e7e7      	b.n	245a2 <bt_gatt_notification+0x24>
}
   245d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000245d6 <bt_gatt_change_aware>:
{
   245d6:	b510      	push	{r4, lr}
   245d8:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   245da:	f7e9 f803 	bl	d5e4 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   245de:	4603      	mov	r3, r0
   245e0:	b910      	cbnz	r0, 245e8 <bt_gatt_change_aware+0x12>
		return true;
   245e2:	2401      	movs	r4, #1
}
   245e4:	4620      	mov	r0, r4
   245e6:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   245e8:	7a02      	ldrb	r2, [r0, #8]
   245ea:	07d2      	lsls	r2, r2, #31
   245ec:	d5f9      	bpl.n	245e2 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   245ee:	f3bf 8f5b 	dmb	ish
   245f2:	68d9      	ldr	r1, [r3, #12]
   245f4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   245f8:	f011 0101 	ands.w	r1, r1, #1
   245fc:	f100 000c 	add.w	r0, r0, #12
   24600:	d1ef      	bne.n	245e2 <bt_gatt_change_aware+0xc>
	if (!req) {
   24602:	2c00      	cmp	r4, #0
   24604:	d0ee      	beq.n	245e4 <bt_gatt_change_aware+0xe>
   24606:	f3bf 8f5b 	dmb	ish
   2460a:	68db      	ldr	r3, [r3, #12]
   2460c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   24610:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   24614:	079b      	lsls	r3, r3, #30
   24616:	d50e      	bpl.n	24636 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24618:	f3bf 8f5b 	dmb	ish
   2461c:	e850 3f00 	ldrex	r3, [r0]
   24620:	f023 0302 	bic.w	r3, r3, #2
   24624:	e840 3200 	strex	r2, r3, [r0]
   24628:	2a00      	cmp	r2, #0
   2462a:	d1f7      	bne.n	2461c <bt_gatt_change_aware+0x46>
   2462c:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   24630:	f7ff fcea 	bl	24008 <atomic_set_bit>
	return false;
   24634:	e7d6      	b.n	245e4 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   24636:	2101      	movs	r1, #1
   24638:	e7fa      	b.n	24630 <bt_gatt_change_aware+0x5a>

0002463a <sys_memcpy_swap>:
	psrc += length - 1;
   2463a:	1e53      	subs	r3, r2, #1
   2463c:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2463e:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   24640:	f811 3901 	ldrb.w	r3, [r1], #-1
   24644:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   24648:	4290      	cmp	r0, r2
   2464a:	d1f9      	bne.n	24640 <sys_memcpy_swap+0x6>
}
   2464c:	4770      	bx	lr

0002464e <smp_signing_info>:
}
   2464e:	2007      	movs	r0, #7
   24650:	4770      	bx	lr

00024652 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   24652:	2301      	movs	r3, #1
   24654:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24656:	f3bf 8f5b 	dmb	ish
   2465a:	e850 2f00 	ldrex	r2, [r0]
   2465e:	431a      	orrs	r2, r3
   24660:	e840 2100 	strex	r1, r2, [r0]
   24664:	2900      	cmp	r1, #0
   24666:	d1f8      	bne.n	2465a <atomic_set_bit+0x8>
   24668:	f3bf 8f5b 	dmb	ish
}
   2466c:	4770      	bx	lr

0002466e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2466e:	f3bf 8f5b 	dmb	ish
   24672:	6800      	ldr	r0, [r0, #0]
   24674:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   24678:	4108      	asrs	r0, r1
}
   2467a:	f000 0001 	and.w	r0, r0, #1
   2467e:	4770      	bx	lr

00024680 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   24680:	2301      	movs	r3, #1
   24682:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24684:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24686:	f3bf 8f5b 	dmb	ish
   2468a:	e850 2f00 	ldrex	r2, [r0]
   2468e:	401a      	ands	r2, r3
   24690:	e840 2100 	strex	r1, r2, [r0]
   24694:	2900      	cmp	r1, #0
   24696:	d1f8      	bne.n	2468a <atomic_clear_bit+0xa>
   24698:	f3bf 8f5b 	dmb	ish
}
   2469c:	4770      	bx	lr

0002469e <bt_smp_aes_cmac>:
{
   2469e:	b570      	push	{r4, r5, r6, lr}
   246a0:	b0c2      	sub	sp, #264	; 0x108
   246a2:	460d      	mov	r5, r1
   246a4:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   246a6:	4601      	mov	r1, r0
   246a8:	aa16      	add	r2, sp, #88	; 0x58
   246aa:	4668      	mov	r0, sp
{
   246ac:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   246ae:	f7fd ff1c 	bl	224ea <tc_cmac_setup>
   246b2:	b150      	cbz	r0, 246ca <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   246b4:	4632      	mov	r2, r6
   246b6:	4629      	mov	r1, r5
   246b8:	4668      	mov	r0, sp
   246ba:	f7fd ff41 	bl	22540 <tc_cmac_update>
   246be:	b120      	cbz	r0, 246ca <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   246c0:	4669      	mov	r1, sp
   246c2:	4620      	mov	r0, r4
   246c4:	f7fd ffa8 	bl	22618 <tc_cmac_final>
   246c8:	b918      	cbnz	r0, 246d2 <bt_smp_aes_cmac+0x34>
		return -EIO;
   246ca:	f06f 0004 	mvn.w	r0, #4
}
   246ce:	b042      	add	sp, #264	; 0x108
   246d0:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   246d2:	2000      	movs	r0, #0
   246d4:	e7fb      	b.n	246ce <bt_smp_aes_cmac+0x30>

000246d6 <bt_smp_disconnected>:
{
   246d6:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   246d8:	6803      	ldr	r3, [r0, #0]
   246da:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
{
   246de:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   246e0:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   246e4:	f001 fc3a 	bl	25f5c <k_delayed_work_cancel>
	if (keys) {
   246e8:	b13d      	cbz	r5, 246fa <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   246ea:	89eb      	ldrh	r3, [r5, #14]
   246ec:	b113      	cbz	r3, 246f4 <bt_smp_disconnected+0x1e>
   246ee:	7b6b      	ldrb	r3, [r5, #13]
   246f0:	079b      	lsls	r3, r3, #30
   246f2:	d502      	bpl.n	246fa <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   246f4:	4628      	mov	r0, r5
   246f6:	f000 fe02 	bl	252fe <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   246fa:	4620      	mov	r0, r4
   246fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
}
   24700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   24704:	2100      	movs	r1, #0
   24706:	f7fe b836 	b.w	22776 <memset>

0002470a <update_keys_check>:
{
   2470a:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   2470c:	6805      	ldr	r5, [r0, #0]
	if (!conn->le.keys) {
   2470e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
{
   24712:	4604      	mov	r4, r0
	if (!conn->le.keys) {
   24714:	b933      	cbnz	r3, 24724 <update_keys_check+0x1a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   24716:	7a28      	ldrb	r0, [r5, #8]
   24718:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2471c:	f7eb ffe0 	bl	106e0 <bt_keys_get_addr>
   24720:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   24724:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
   24728:	b1fa      	cbz	r2, 2476a <update_keys_check+0x60>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2472a:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
   2472c:	f011 0f24 	tst.w	r1, #36	; 0x24
   24730:	d01b      	beq.n	2476a <update_keys_check+0x60>
	return MIN(req->max_key_size, rsp->max_key_size);
   24732:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
   24736:	f894 00cd 	ldrb.w	r0, [r4, #205]	; 0xcd
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
   2473a:	7b12      	ldrb	r2, [r2, #12]
   2473c:	4283      	cmp	r3, r0
   2473e:	bf28      	it	cs
   24740:	4603      	movcs	r3, r0
   24742:	429a      	cmp	r2, r3
   24744:	d901      	bls.n	2474a <update_keys_check+0x40>
		return false;
   24746:	2000      	movs	r0, #0
}
   24748:	bd38      	pop	{r3, r4, r5, pc}
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   2474a:	068b      	lsls	r3, r1, #26
   2474c:	d405      	bmi.n	2475a <update_keys_check+0x50>
	if ((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   2474e:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
   24752:	3800      	subs	r0, #0
   24754:	bf18      	it	ne
   24756:	2001      	movne	r0, #1
   24758:	e7f6      	b.n	24748 <update_keys_check+0x3e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2475a:	2105      	movs	r1, #5
   2475c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   24760:	f7ff ff85 	bl	2466e <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   24764:	2800      	cmp	r0, #0
   24766:	d1f2      	bne.n	2474e <update_keys_check+0x44>
   24768:	e7ed      	b.n	24746 <update_keys_check+0x3c>
		return true;
   2476a:	2001      	movs	r0, #1
   2476c:	e7ec      	b.n	24748 <update_keys_check+0x3e>

0002476e <le_sc_oob_config_set.isra.0>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2476e:	f890 20cb 	ldrb.w	r2, [r0, #203]	; 0xcb
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   24772:	f890 30d2 	ldrb.w	r3, [r0, #210]	; 0xd2
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   24776:	6800      	ldr	r0, [r0, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24778:	78c0      	ldrb	r0, [r0, #3]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2477a:	f002 0201 	and.w	r2, r2, #1
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2477e:	f003 0301 	and.w	r3, r3, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24782:	b930      	cbnz	r0, 24792 <le_sc_oob_config_set.isra.0+0x24>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   24784:	b95a      	cbnz	r2, 2479e <le_sc_oob_config_set.isra.0+0x30>
		if (rsp_oob_present) {
   24786:	2b00      	cmp	r3, #0
				     BT_CONN_OOB_BOTH_PEERS :
   24788:	bf0c      	ite	eq
   2478a:	2303      	moveq	r3, #3
   2478c:	2300      	movne	r3, #0
	info->lesc.oob_config = oob_config;
   2478e:	700b      	strb	r3, [r1, #0]
}
   24790:	4770      	bx	lr
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   24792:	b94a      	cbnz	r2, 247a8 <le_sc_oob_config_set.isra.0+0x3a>
		if (rsp_oob_present) {
   24794:	2b00      	cmp	r3, #0
				     BT_CONN_OOB_BOTH_PEERS :
   24796:	bf0c      	ite	eq
   24798:	2303      	moveq	r3, #3
   2479a:	2301      	movne	r3, #1
   2479c:	e7f7      	b.n	2478e <le_sc_oob_config_set.isra.0+0x20>
		if (rsp_oob_present) {
   2479e:	2b00      	cmp	r3, #0
				     BT_CONN_OOB_BOTH_PEERS :
   247a0:	bf0c      	ite	eq
   247a2:	2301      	moveq	r3, #1
   247a4:	2302      	movne	r3, #2
   247a6:	e7f2      	b.n	2478e <le_sc_oob_config_set.isra.0+0x20>
   247a8:	005b      	lsls	r3, r3, #1
   247aa:	e7f0      	b.n	2478e <le_sc_oob_config_set.isra.0+0x20>

000247ac <smp_keys_check.part.0>:
static bool smp_keys_check(struct bt_conn *conn)
   247ac:	b538      	push	{r3, r4, r5, lr}
	if (!conn->le.keys) {
   247ae:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
static bool smp_keys_check(struct bt_conn *conn)
   247b2:	4604      	mov	r4, r0
	if (!conn->le.keys) {
   247b4:	b983      	cbnz	r3, 247d8 <smp_keys_check.part.0+0x2c>
						     conn->id, &conn->le.dst);
   247b6:	f100 0588 	add.w	r5, r0, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   247ba:	7a01      	ldrb	r1, [r0, #8]
   247bc:	462a      	mov	r2, r5
   247be:	2020      	movs	r0, #32
   247c0:	f7eb ffc4 	bl	1074c <bt_keys_find>
   247c4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   247c8:	b930      	cbnz	r0, 247d8 <smp_keys_check.part.0+0x2c>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   247ca:	7a21      	ldrb	r1, [r4, #8]
   247cc:	462a      	mov	r2, r5
   247ce:	2004      	movs	r0, #4
   247d0:	f7eb ffbc 	bl	1074c <bt_keys_find>
   247d4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   247d8:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   247dc:	b152      	cbz	r2, 247f4 <smp_keys_check.part.0+0x48>
   247de:	89d3      	ldrh	r3, [r2, #14]
   247e0:	f013 0024 	ands.w	r0, r3, #36	; 0x24
   247e4:	d005      	beq.n	247f2 <smp_keys_check.part.0+0x46>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   247e6:	7aa3      	ldrb	r3, [r4, #10]
   247e8:	2b02      	cmp	r3, #2
   247ea:	d905      	bls.n	247f8 <smp_keys_check.part.0+0x4c>
   247ec:	7b50      	ldrb	r0, [r2, #13]
   247ee:	f000 0001 	and.w	r0, r0, #1
}
   247f2:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   247f4:	4610      	mov	r0, r2
   247f6:	e7fc      	b.n	247f2 <smp_keys_check.part.0+0x46>
	return true;
   247f8:	2001      	movs	r0, #1
   247fa:	e7fa      	b.n	247f2 <smp_keys_check.part.0+0x46>

000247fc <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   247fc:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   247fe:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   24802:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   24804:	4628      	mov	r0, r5
   24806:	2104      	movs	r1, #4
   24808:	f7ff ff31 	bl	2466e <atomic_test_bit>
   2480c:	b168      	cbz	r0, 2482a <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   2480e:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   24810:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   24812:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   24814:	4608      	mov	r0, r1
   24816:	f7fe fd0e 	bl	23236 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2481a:	4604      	mov	r4, r0
   2481c:	b940      	cbnz	r0, 24830 <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2481e:	2104      	movs	r1, #4
   24820:	4628      	mov	r0, r5
   24822:	f7ff ff16 	bl	24652 <atomic_set_bit>
}
   24826:	4620      	mov	r0, r4
   24828:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2482a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2482e:	e7ef      	b.n	24810 <smp_create_pdu.isra.0+0x14>
	hdr = net_buf_add(buf, sizeof(*hdr));
   24830:	2101      	movs	r1, #1
   24832:	3008      	adds	r0, #8
   24834:	f000 fdda 	bl	253ec <net_buf_simple_add>
	hdr->code = op;
   24838:	7006      	strb	r6, [r0, #0]
	return buf;
   2483a:	e7f4      	b.n	24826 <smp_create_pdu.isra.0+0x2a>

0002483c <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2483c:	b510      	push	{r4, lr}
   2483e:	1e43      	subs	r3, r0, #1
   24840:	f100 0210 	add.w	r2, r0, #16
   24844:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   24846:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2484a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2484e:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   24850:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   24852:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   24854:	d1f7      	bne.n	24846 <sys_mem_swap.constprop.0+0xa>
	}
}
   24856:	bd10      	pop	{r4, pc}

00024858 <smp_f6>:
{
   24858:	b5f0      	push	{r4, r5, r6, r7, lr}
   2485a:	b097      	sub	sp, #92	; 0x5c
   2485c:	4605      	mov	r5, r0
   2485e:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   24860:	a805      	add	r0, sp, #20
   24862:	2210      	movs	r2, #16
{
   24864:	461c      	mov	r4, r3
   24866:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   24868:	f7ff fee7 	bl	2463a <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2486c:	2210      	movs	r2, #16
   2486e:	4631      	mov	r1, r6
   24870:	a809      	add	r0, sp, #36	; 0x24
   24872:	f7ff fee2 	bl	2463a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   24876:	4621      	mov	r1, r4
   24878:	2210      	movs	r2, #16
   2487a:	a80d      	add	r0, sp, #52	; 0x34
   2487c:	f7ff fedd 	bl	2463a <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   24880:	991c      	ldr	r1, [sp, #112]	; 0x70
   24882:	2203      	movs	r2, #3
   24884:	a811      	add	r0, sp, #68	; 0x44
   24886:	f7ff fed8 	bl	2463a <sys_memcpy_swap>
	m[51] = a1->type;
   2488a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2488c:	f814 3b01 	ldrb.w	r3, [r4], #1
   24890:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   24894:	4621      	mov	r1, r4
   24896:	2206      	movs	r2, #6
   24898:	a812      	add	r0, sp, #72	; 0x48
   2489a:	f7fd ff41 	bl	22720 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2489e:	4621      	mov	r1, r4
   248a0:	2206      	movs	r2, #6
   248a2:	a812      	add	r0, sp, #72	; 0x48
   248a4:	f7ff fec9 	bl	2463a <sys_memcpy_swap>
	m[58] = a2->type;
   248a8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   248aa:	f814 3b01 	ldrb.w	r3, [r4], #1
   248ae:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   248b2:	4621      	mov	r1, r4
   248b4:	2206      	movs	r2, #6
   248b6:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   248ba:	f7fd ff31 	bl	22720 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   248be:	4621      	mov	r1, r4
   248c0:	2206      	movs	r2, #6
   248c2:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   248c6:	f7ff feb8 	bl	2463a <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   248ca:	2210      	movs	r2, #16
   248cc:	4629      	mov	r1, r5
   248ce:	a801      	add	r0, sp, #4
   248d0:	f7ff feb3 	bl	2463a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   248d4:	463b      	mov	r3, r7
   248d6:	2241      	movs	r2, #65	; 0x41
   248d8:	a905      	add	r1, sp, #20
   248da:	a801      	add	r0, sp, #4
   248dc:	f7ff fedf 	bl	2469e <bt_smp_aes_cmac>
	if (err) {
   248e0:	4604      	mov	r4, r0
   248e2:	b910      	cbnz	r0, 248ea <smp_f6+0x92>
	sys_mem_swap(check, 16);
   248e4:	4638      	mov	r0, r7
   248e6:	f7ff ffa9 	bl	2483c <sys_mem_swap.constprop.0>
}
   248ea:	4620      	mov	r0, r4
   248ec:	b017      	add	sp, #92	; 0x5c
   248ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000248f0 <smp_f4>:
{
   248f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   248f2:	b097      	sub	sp, #92	; 0x5c
   248f4:	4614      	mov	r4, r2
   248f6:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   248f8:	2220      	movs	r2, #32
   248fa:	4601      	mov	r1, r0
   248fc:	a805      	add	r0, sp, #20
{
   248fe:	461d      	mov	r5, r3
   24900:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   24902:	f7ff fe9a 	bl	2463a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   24906:	2220      	movs	r2, #32
   24908:	4631      	mov	r1, r6
   2490a:	a80d      	add	r0, sp, #52	; 0x34
   2490c:	f7ff fe95 	bl	2463a <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   24910:	4621      	mov	r1, r4
   24912:	2210      	movs	r2, #16
   24914:	a801      	add	r0, sp, #4
	m[64] = z;
   24916:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2491a:	f7ff fe8e 	bl	2463a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   2491e:	463b      	mov	r3, r7
   24920:	2241      	movs	r2, #65	; 0x41
   24922:	a905      	add	r1, sp, #20
   24924:	a801      	add	r0, sp, #4
   24926:	f7ff feba 	bl	2469e <bt_smp_aes_cmac>
	if (err) {
   2492a:	4604      	mov	r4, r0
   2492c:	b910      	cbnz	r0, 24934 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   2492e:	4638      	mov	r0, r7
   24930:	f7ff ff84 	bl	2483c <sys_mem_swap.constprop.0>
}
   24934:	4620      	mov	r0, r4
   24936:	b017      	add	sp, #92	; 0x5c
   24938:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002493a <sc_smp_send_dhkey_check>:
{
   2493a:	b570      	push	{r4, r5, r6, lr}
   2493c:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   2493e:	210d      	movs	r1, #13
{
   24940:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   24942:	f7ff ff5b 	bl	247fc <smp_create_pdu.isra.0>
	if (!buf) {
   24946:	4604      	mov	r4, r0
   24948:	b170      	cbz	r0, 24968 <sc_smp_send_dhkey_check+0x2e>
	req = net_buf_add(buf, sizeof(*req));
   2494a:	2110      	movs	r1, #16
   2494c:	3008      	adds	r0, #8
   2494e:	f000 fd4d 	bl	253ec <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   24952:	2210      	movs	r2, #16
   24954:	4631      	mov	r1, r6
   24956:	f7fd fee3 	bl	22720 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   2495a:	4628      	mov	r0, r5
   2495c:	2200      	movs	r2, #0
   2495e:	4621      	mov	r1, r4
   24960:	f7ea fcc4 	bl	f2ec <smp_send.isra.0>
	return 0;
   24964:	2000      	movs	r0, #0
}
   24966:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   24968:	2008      	movs	r0, #8
   2496a:	e7fc      	b.n	24966 <sc_smp_send_dhkey_check+0x2c>

0002496c <compute_and_send_master_dhcheck>:
{
   2496c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24970:	4604      	mov	r4, r0
   24972:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
   24974:	2210      	movs	r2, #16
   24976:	2100      	movs	r1, #0
   24978:	a808      	add	r0, sp, #32
   2497a:	f7fd fefc 	bl	22776 <memset>
	switch (smp->method) {
   2497e:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   24982:	2b05      	cmp	r3, #5
   24984:	d820      	bhi.n	249c8 <compute_and_send_master_dhcheck+0x5c>
   24986:	e8df f003 	tbb	[pc, r3]
   2498a:	0309      	.short	0x0309
   2498c:	211f0903 	.word	0x211f0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   24990:	2204      	movs	r2, #4
   24992:	f504 71cc 	add.w	r1, r4, #408	; 0x198
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   24996:	a808      	add	r0, sp, #32
   24998:	f7fd fec2 	bl	22720 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   2499c:	4625      	mov	r5, r4
		   smp->tk)) {
   2499e:	f204 1207 	addw	r2, r4, #263	; 0x107
		   &smp->chan.chan.conn->le.init_addr,
   249a2:	f855 3bf7 	ldr.w	r3, [r5], #247
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   249a6:	f204 1787 	addw	r7, r4, #391	; 0x187
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   249aa:	e9cd 7201 	strd	r7, r2, [sp, #4]
   249ae:	f104 08e7 	add.w	r8, r4, #231	; 0xe7
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   249b2:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   249b6:	9200      	str	r2, [sp, #0]
   249b8:	338f      	adds	r3, #143	; 0x8f
   249ba:	462a      	mov	r2, r5
   249bc:	4641      	mov	r1, r8
   249be:	f204 1057 	addw	r0, r4, #343	; 0x157
   249c2:	f7ea fbf5 	bl	f1b0 <smp_f5>
   249c6:	b138      	cbz	r0, 249d8 <compute_and_send_master_dhcheck+0x6c>
	switch (smp->method) {
   249c8:	2008      	movs	r0, #8
   249ca:	e021      	b.n	24a10 <compute_and_send_master_dhcheck+0xa4>
		if (smp->oobd_remote) {
   249cc:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
   249d0:	2900      	cmp	r1, #0
   249d2:	d0e3      	beq.n	2499c <compute_and_send_master_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   249d4:	2210      	movs	r2, #16
   249d6:	e7de      	b.n	24996 <compute_and_send_master_dhcheck+0x2a>
		   &smp->chan.chan.conn->le.init_addr,
   249d8:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   249da:	ae04      	add	r6, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
   249dc:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   249e0:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   249e2:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   249e6:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   249e8:	e9cd 2300 	strd	r2, r3, [sp]
   249ec:	9102      	str	r1, [sp, #8]
   249ee:	ab08      	add	r3, sp, #32
   249f0:	462a      	mov	r2, r5
   249f2:	4641      	mov	r1, r8
   249f4:	4638      	mov	r0, r7
   249f6:	f7ff ff2f 	bl	24858 <smp_f6>
   249fa:	2800      	cmp	r0, #0
   249fc:	d1e4      	bne.n	249c8 <compute_and_send_master_dhcheck+0x5c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   249fe:	210d      	movs	r1, #13
   24a00:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   24a04:	f7ff fe25 	bl	24652 <atomic_set_bit>
	return sc_smp_send_dhkey_check(smp, e);
   24a08:	4631      	mov	r1, r6
   24a0a:	4620      	mov	r0, r4
   24a0c:	f7ff ff95 	bl	2493a <sc_smp_send_dhkey_check>
}
   24a10:	b00c      	add	sp, #48	; 0x30
   24a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024a16 <compute_and_check_and_send_slave_dhcheck>:
{
   24a16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24a1a:	4604      	mov	r4, r0
   24a1c:	b091      	sub	sp, #68	; 0x44
	(void)memset(r, 0, sizeof(r));
   24a1e:	2210      	movs	r2, #16
   24a20:	2100      	movs	r1, #0
   24a22:	a80c      	add	r0, sp, #48	; 0x30
   24a24:	f7fd fea7 	bl	22776 <memset>
	switch (smp->method) {
   24a28:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   24a2c:	2b05      	cmp	r3, #5
   24a2e:	d820      	bhi.n	24a72 <compute_and_check_and_send_slave_dhcheck+0x5c>
   24a30:	e8df f003 	tbb	[pc, r3]
   24a34:	09030309 	.word	0x09030309
   24a38:	211f      	.short	0x211f
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   24a3a:	2204      	movs	r2, #4
   24a3c:	f504 71cc 	add.w	r1, r4, #408	; 0x198
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   24a40:	a80c      	add	r0, sp, #48	; 0x30
   24a42:	f7fd fe6d 	bl	22720 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   24a46:	4625      	mov	r5, r4
		   smp->tk)) {
   24a48:	f204 1207 	addw	r2, r4, #263	; 0x107
		   &smp->chan.chan.conn->le.init_addr,
   24a4c:	f855 3be7 	ldr.w	r3, [r5], #231
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   24a50:	f204 1687 	addw	r6, r4, #391	; 0x187
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   24a54:	e9cd 6201 	strd	r6, r2, [sp, #4]
   24a58:	f104 07f7 	add.w	r7, r4, #247	; 0xf7
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   24a5c:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   24a60:	9200      	str	r2, [sp, #0]
   24a62:	338f      	adds	r3, #143	; 0x8f
   24a64:	462a      	mov	r2, r5
   24a66:	4639      	mov	r1, r7
   24a68:	f204 1057 	addw	r0, r4, #343	; 0x157
   24a6c:	f7ea fba0 	bl	f1b0 <smp_f5>
   24a70:	b138      	cbz	r0, 24a82 <compute_and_check_and_send_slave_dhcheck+0x6c>
	switch (smp->method) {
   24a72:	2508      	movs	r5, #8
   24a74:	e04c      	b.n	24b10 <compute_and_check_and_send_slave_dhcheck+0xfa>
		if (smp->oobd_remote) {
   24a76:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
   24a7a:	2900      	cmp	r1, #0
   24a7c:	d0e3      	beq.n	24a46 <compute_and_check_and_send_slave_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   24a7e:	2210      	movs	r2, #16
   24a80:	e7de      	b.n	24a40 <compute_and_check_and_send_slave_dhcheck+0x2a>
		   &smp->chan.chan.conn->le.resp_addr,
   24a82:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   24a84:	f10d 0820 	add.w	r8, sp, #32
		   &smp->chan.chan.conn->le.resp_addr,
   24a88:	f852 3bd1 	ldr.w	r3, [r2], #209
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   24a8c:	f8cd 800c 	str.w	r8, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   24a90:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   24a94:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   24a96:	e9cd 2300 	strd	r2, r3, [sp]
   24a9a:	9102      	str	r1, [sp, #8]
   24a9c:	ab0c      	add	r3, sp, #48	; 0x30
   24a9e:	463a      	mov	r2, r7
   24aa0:	4629      	mov	r1, r5
   24aa2:	4630      	mov	r0, r6
   24aa4:	f7ff fed8 	bl	24858 <smp_f6>
   24aa8:	2800      	cmp	r0, #0
   24aaa:	d1e2      	bne.n	24a72 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (smp->method == LE_SC_OOB) {
   24aac:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   24ab0:	2b05      	cmp	r3, #5
   24ab2:	d106      	bne.n	24ac2 <compute_and_check_and_send_slave_dhcheck+0xac>
		if (smp->oobd_local) {
   24ab4:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   24ab8:	2210      	movs	r2, #16
   24aba:	a80c      	add	r0, sp, #48	; 0x30
		if (smp->oobd_local) {
   24abc:	b361      	cbz	r1, 24b18 <compute_and_check_and_send_slave_dhcheck+0x102>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   24abe:	f7fd fe2f 	bl	22720 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   24ac2:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   24ac4:	f10d 0910 	add.w	r9, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
   24ac8:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   24acc:	f8cd 900c 	str.w	r9, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   24ad0:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   24ad4:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   24ad6:	e9cd 2300 	strd	r2, r3, [sp]
   24ada:	9102      	str	r1, [sp, #8]
   24adc:	ab0c      	add	r3, sp, #48	; 0x30
   24ade:	462a      	mov	r2, r5
   24ae0:	4639      	mov	r1, r7
   24ae2:	4630      	mov	r0, r6
   24ae4:	f7ff feb8 	bl	24858 <smp_f6>
   24ae8:	2800      	cmp	r0, #0
   24aea:	d1c2      	bne.n	24a72 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
   24aec:	2210      	movs	r2, #16
   24aee:	4649      	mov	r1, r9
   24af0:	f204 1077 	addw	r0, r4, #375	; 0x177
   24af4:	f7fd fe04 	bl	22700 <memcmp>
   24af8:	b988      	cbnz	r0, 24b1e <compute_and_check_and_send_slave_dhcheck+0x108>
	err = sc_smp_send_dhkey_check(smp, e);
   24afa:	4641      	mov	r1, r8
   24afc:	4620      	mov	r0, r4
   24afe:	f7ff ff1c 	bl	2493a <sc_smp_send_dhkey_check>
	if (err) {
   24b02:	4605      	mov	r5, r0
   24b04:	b920      	cbnz	r0, 24b10 <compute_and_check_and_send_slave_dhcheck+0xfa>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   24b06:	2101      	movs	r1, #1
   24b08:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   24b0c:	f7ff fda1 	bl	24652 <atomic_set_bit>
}
   24b10:	4628      	mov	r0, r5
   24b12:	b011      	add	sp, #68	; 0x44
   24b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
   24b18:	f7fd fe2d 	bl	22776 <memset>
   24b1c:	e7d1      	b.n	24ac2 <compute_and_check_and_send_slave_dhcheck+0xac>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   24b1e:	250b      	movs	r5, #11
   24b20:	e7f6      	b.n	24b10 <compute_and_check_and_send_slave_dhcheck+0xfa>

00024b22 <smp_dhkey_check>:
{
   24b22:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   24b24:	6803      	ldr	r3, [r0, #0]
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   24b26:	688f      	ldr	r7, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   24b28:	78dc      	ldrb	r4, [r3, #3]
{
   24b2a:	b091      	sub	sp, #68	; 0x44
   24b2c:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24b2e:	2c00      	cmp	r4, #0
   24b30:	d15d      	bne.n	24bee <smp_dhkey_check+0xcc>
		(void)memset(r, 0, sizeof(r));
   24b32:	2210      	movs	r2, #16
   24b34:	4621      	mov	r1, r4
   24b36:	a80c      	add	r0, sp, #48	; 0x30
   24b38:	f7fd fe1d 	bl	22776 <memset>
		switch (smp->method) {
   24b3c:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
   24b40:	2b05      	cmp	r3, #5
   24b42:	d81f      	bhi.n	24b84 <smp_dhkey_check+0x62>
   24b44:	e8df f003 	tbb	[pc, r3]
   24b48:	09030309 	.word	0x09030309
   24b4c:	221e      	.short	0x221e
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   24b4e:	2204      	movs	r2, #4
   24b50:	f506 71cc 	add.w	r1, r6, #408	; 0x198
				memcpy(r, smp->oobd_local->r, sizeof(r));
   24b54:	a80c      	add	r0, sp, #48	; 0x30
   24b56:	f7fd fde3 	bl	22720 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   24b5a:	4632      	mov	r2, r6
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   24b5c:	ad08      	add	r5, sp, #32
			   &smp->chan.chan.conn->le.resp_addr,
   24b5e:	f852 3be7 	ldr.w	r3, [r2], #231
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   24b62:	9503      	str	r5, [sp, #12]
			   &smp->chan.chan.conn->le.init_addr, e)) {
   24b64:	f103 018f 	add.w	r1, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
   24b68:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   24b6a:	9301      	str	r3, [sp, #4]
   24b6c:	f106 03d1 	add.w	r3, r6, #209	; 0xd1
   24b70:	9102      	str	r1, [sp, #8]
   24b72:	9300      	str	r3, [sp, #0]
   24b74:	f106 01f7 	add.w	r1, r6, #247	; 0xf7
   24b78:	ab0c      	add	r3, sp, #48	; 0x30
   24b7a:	f206 1087 	addw	r0, r6, #391	; 0x187
   24b7e:	f7ff fe6b 	bl	24858 <smp_f6>
   24b82:	b148      	cbz	r0, 24b98 <smp_dhkey_check+0x76>
		switch (smp->method) {
   24b84:	2408      	movs	r4, #8
}
   24b86:	4620      	mov	r0, r4
   24b88:	b011      	add	sp, #68	; 0x44
   24b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (smp->oobd_local) {
   24b8c:	f8d6 11a0 	ldr.w	r1, [r6, #416]	; 0x1a0
   24b90:	2900      	cmp	r1, #0
   24b92:	d0e2      	beq.n	24b5a <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   24b94:	2210      	movs	r2, #16
   24b96:	e7dd      	b.n	24b54 <smp_dhkey_check+0x32>
		if (memcmp(e, req->e, 16)) {
   24b98:	4628      	mov	r0, r5
   24b9a:	2210      	movs	r2, #16
   24b9c:	4639      	mov	r1, r7
   24b9e:	f7fd fdaf 	bl	22700 <memcmp>
   24ba2:	4605      	mov	r5, r0
   24ba4:	bb08      	cbnz	r0, 24bea <smp_dhkey_check+0xc8>
	return MIN(req->max_key_size, rsp->max_key_size);
   24ba6:	f896 30d4 	ldrb.w	r3, [r6, #212]	; 0xd4
   24baa:	f896 70cd 	ldrb.w	r7, [r6, #205]	; 0xcd
		(void)memset(ediv, 0, sizeof(ediv));
   24bae:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   24bb0:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   24bb2:	f04f 0202 	mov.w	r2, #2
   24bb6:	a805      	add	r0, sp, #20
	return MIN(req->max_key_size, rsp->max_key_size);
   24bb8:	bf28      	it	cs
   24bba:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   24bbc:	f7fd fddb 	bl	22776 <memset>
		(void)memset(rand, 0, sizeof(rand));
   24bc0:	2208      	movs	r2, #8
   24bc2:	4629      	mov	r1, r5
   24bc4:	a806      	add	r0, sp, #24
   24bc6:	f7fd fdd6 	bl	22776 <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   24bca:	6830      	ldr	r0, [r6, #0]
   24bcc:	9700      	str	r7, [sp, #0]
   24bce:	f206 1307 	addw	r3, r6, #263	; 0x107
   24bd2:	aa05      	add	r2, sp, #20
   24bd4:	a906      	add	r1, sp, #24
   24bd6:	f7fe f8d8 	bl	22d8a <bt_conn_le_start_encryption>
   24bda:	2800      	cmp	r0, #0
   24bdc:	dbd2      	blt.n	24b84 <smp_dhkey_check+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   24bde:	2101      	movs	r1, #1
   24be0:	f106 00c4 	add.w	r0, r6, #196	; 0xc4
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   24be4:	f7ff fd35 	bl	24652 <atomic_set_bit>
			return 0;
   24be8:	e7cd      	b.n	24b86 <smp_dhkey_check+0x64>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   24bea:	240b      	movs	r4, #11
   24bec:	e7cb      	b.n	24b86 <smp_dhkey_check+0x64>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   24bee:	2c01      	cmp	r4, #1
   24bf0:	d115      	bne.n	24c1e <smp_dhkey_check+0xfc>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   24bf2:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   24bf6:	210f      	movs	r1, #15
   24bf8:	4628      	mov	r0, r5
   24bfa:	f7ff fd41 	bl	24680 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   24bfe:	2210      	movs	r2, #16
   24c00:	4639      	mov	r1, r7
   24c02:	f206 1077 	addw	r0, r6, #375	; 0x177
   24c06:	f7fd fd8b 	bl	22720 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   24c0a:	2107      	movs	r1, #7
   24c0c:	4628      	mov	r0, r5
   24c0e:	f7ff fd2e 	bl	2466e <atomic_test_bit>
   24c12:	4604      	mov	r4, r0
   24c14:	b128      	cbz	r0, 24c22 <smp_dhkey_check+0x100>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   24c16:	2108      	movs	r1, #8
   24c18:	4628      	mov	r0, r5
   24c1a:	f7ff fd1a 	bl	24652 <atomic_set_bit>
	return 0;
   24c1e:	2400      	movs	r4, #0
   24c20:	e7b1      	b.n	24b86 <smp_dhkey_check+0x64>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   24c22:	2109      	movs	r1, #9
   24c24:	4628      	mov	r0, r5
   24c26:	f7ff fd22 	bl	2466e <atomic_test_bit>
   24c2a:	b110      	cbz	r0, 24c32 <smp_dhkey_check+0x110>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   24c2c:	2108      	movs	r1, #8
   24c2e:	4628      	mov	r0, r5
   24c30:	e7d8      	b.n	24be4 <smp_dhkey_check+0xc2>
		return compute_and_check_and_send_slave_dhcheck(smp);
   24c32:	4630      	mov	r0, r6
   24c34:	f7ff feef 	bl	24a16 <compute_and_check_and_send_slave_dhcheck>
   24c38:	4604      	mov	r4, r0
   24c3a:	e7a4      	b.n	24b86 <smp_dhkey_check+0x64>

00024c3c <smp_send_pairing_random>:
{
   24c3c:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   24c3e:	2104      	movs	r1, #4
{
   24c40:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   24c42:	f7ff fddb 	bl	247fc <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   24c46:	4604      	mov	r4, r0
   24c48:	b178      	cbz	r0, 24c6a <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   24c4a:	2110      	movs	r1, #16
   24c4c:	3008      	adds	r0, #8
   24c4e:	f000 fbcd 	bl	253ec <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   24c52:	2210      	movs	r2, #16
   24c54:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   24c58:	f7fd fd62 	bl	22720 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   24c5c:	4628      	mov	r0, r5
   24c5e:	2200      	movs	r2, #0
   24c60:	4621      	mov	r1, r4
   24c62:	f7ea fb43 	bl	f2ec <smp_send.isra.0>
	return 0;
   24c66:	2000      	movs	r0, #0
}
   24c68:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   24c6a:	2008      	movs	r0, #8
   24c6c:	e7fc      	b.n	24c68 <smp_send_pairing_random+0x2c>

00024c6e <send_pairing_rsp>:
{
   24c6e:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   24c70:	2102      	movs	r1, #2
{
   24c72:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   24c74:	f7ff fdc2 	bl	247fc <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   24c78:	4604      	mov	r4, r0
   24c7a:	b178      	cbz	r0, 24c9c <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
   24c7c:	2106      	movs	r1, #6
   24c7e:	3008      	adds	r0, #8
   24c80:	f000 fbb4 	bl	253ec <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   24c84:	2206      	movs	r2, #6
   24c86:	f105 01d1 	add.w	r1, r5, #209	; 0xd1
   24c8a:	f7fd fd49 	bl	22720 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   24c8e:	4628      	mov	r0, r5
   24c90:	2200      	movs	r2, #0
   24c92:	4621      	mov	r1, r4
   24c94:	f7ea fb2a 	bl	f2ec <smp_send.isra.0>
	return 0;
   24c98:	2000      	movs	r0, #0
}
   24c9a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   24c9c:	2008      	movs	r0, #8
   24c9e:	e7fc      	b.n	24c9a <send_pairing_rsp+0x2c>

00024ca0 <atomic_test_and_clear_bit>:
{
   24ca0:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   24ca2:	2301      	movs	r3, #1
   24ca4:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24ca8:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24caa:	f3bf 8f5b 	dmb	ish
   24cae:	e850 3f00 	ldrex	r3, [r0]
   24cb2:	ea03 0c02 	and.w	ip, r3, r2
   24cb6:	e840 ce00 	strex	lr, ip, [r0]
   24cba:	f1be 0f00 	cmp.w	lr, #0
   24cbe:	d1f6      	bne.n	24cae <atomic_test_and_clear_bit+0xe>
   24cc0:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   24cc4:	420b      	tst	r3, r1
}
   24cc6:	bf14      	ite	ne
   24cc8:	2001      	movne	r0, #1
   24cca:	2000      	moveq	r0, #0
   24ccc:	f85d fb04 	ldr.w	pc, [sp], #4

00024cd0 <smp_reset>:
{
   24cd0:	b538      	push	{r3, r4, r5, lr}
   24cd2:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   24cd4:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   24cd6:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   24cda:	f001 f93f 	bl	25f5c <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   24cde:	2300      	movs	r3, #0
   24ce0:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	atomic_set(&smp->allowed_cmds, 0);
   24ce4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   24ce8:	f3bf 8f5b 	dmb	ish
   24cec:	e850 2f00 	ldrex	r2, [r0]
   24cf0:	e840 3100 	strex	r1, r3, [r0]
   24cf4:	2900      	cmp	r1, #0
   24cf6:	d1f9      	bne.n	24cec <smp_reset+0x1c>
   24cf8:	f3bf 8f5b 	dmb	ish
   24cfc:	f3bf 8f5b 	dmb	ish
   24d00:	34c4      	adds	r4, #196	; 0xc4
   24d02:	e854 2f00 	ldrex	r2, [r4]
   24d06:	e844 3100 	strex	r1, r3, [r4]
   24d0a:	2900      	cmp	r1, #0
   24d0c:	d1f9      	bne.n	24d02 <smp_reset+0x32>
   24d0e:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
   24d12:	7a6b      	ldrb	r3, [r5, #9]
   24d14:	7aaa      	ldrb	r2, [r5, #10]
   24d16:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   24d18:	bf18      	it	ne
   24d1a:	72ab      	strbne	r3, [r5, #10]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24d1c:	78eb      	ldrb	r3, [r5, #3]
   24d1e:	b923      	cbnz	r3, 24d2a <smp_reset+0x5a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   24d20:	210b      	movs	r1, #11
}
   24d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   24d26:	f7ff bc94 	b.w	24652 <atomic_set_bit>
   24d2a:	2101      	movs	r1, #1
   24d2c:	e7f9      	b.n	24d22 <smp_reset+0x52>

00024d2e <smp_error>:
{
   24d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24d30:	4606      	mov	r6, r0
   24d32:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   24d34:	f7ea fdec 	bl	f910 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   24d38:	2105      	movs	r1, #5
   24d3a:	4630      	mov	r0, r6
   24d3c:	f7ff fd5e 	bl	247fc <smp_create_pdu.isra.0>
	if (!buf) {
   24d40:	4605      	mov	r5, r0
   24d42:	b178      	cbz	r0, 24d64 <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   24d44:	2101      	movs	r1, #1
   24d46:	3008      	adds	r0, #8
   24d48:	f000 fb50 	bl	253ec <net_buf_simple_add>
	rsp->reason = reason;
   24d4c:	7004      	strb	r4, [r0, #0]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   24d4e:	2400      	movs	r4, #0
   24d50:	6830      	ldr	r0, [r6, #0]
   24d52:	9400      	str	r4, [sp, #0]
   24d54:	4623      	mov	r3, r4
   24d56:	462a      	mov	r2, r5
   24d58:	2106      	movs	r1, #6
   24d5a:	f7fe fa6f 	bl	2323c <bt_l2cap_send_cb>
	return 0;
   24d5e:	4620      	mov	r0, r4
}
   24d60:	b002      	add	sp, #8
   24d62:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   24d64:	f06f 0036 	mvn.w	r0, #54	; 0x36
   24d68:	e7fa      	b.n	24d60 <smp_error+0x32>

00024d6a <smp_ident_sent>:
{
   24d6a:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   24d6c:	7883      	ldrb	r3, [r0, #2]
   24d6e:	2b01      	cmp	r3, #1
   24d70:	d10f      	bne.n	24d92 <smp_ident_sent+0x28>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   24d72:	2106      	movs	r1, #6
   24d74:	f7fe fbbe 	bl	234f4 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   24d78:	f890 21a8 	ldrb.w	r2, [r0, #424]	; 0x1a8
   24d7c:	f022 0201 	bic.w	r2, r2, #1
   24d80:	f880 21a8 	strb.w	r2, [r0, #424]	; 0x1a8
		if (!smp->local_dist && !smp->remote_dist) {
   24d84:	f8b0 11a8 	ldrh.w	r1, [r0, #424]	; 0x1a8
   24d88:	b919      	cbnz	r1, 24d92 <smp_ident_sent+0x28>
}
   24d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   24d8e:	f7ea bdbf 	b.w	f910 <smp_pairing_complete>
}
   24d92:	bd08      	pop	{r3, pc}

00024d94 <bt_smp_encrypt_change>:
{
   24d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->conn;
   24d96:	4605      	mov	r5, r0
{
   24d98:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
   24d9a:	f855 7bc4 	ldr.w	r7, [r5], #196
{
   24d9e:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   24da0:	2101      	movs	r1, #1
   24da2:	4628      	mov	r0, r5
   24da4:	f7ff fc6c 	bl	24680 <atomic_clear_bit>
	if (hci_status) {
   24da8:	2e00      	cmp	r6, #0
   24daa:	d14a      	bne.n	24e42 <bt_smp_encrypt_change+0xae>
	if (!conn->encrypt) {
   24dac:	7afb      	ldrb	r3, [r7, #11]
   24dae:	2b00      	cmp	r3, #0
   24db0:	d047      	beq.n	24e42 <bt_smp_encrypt_change+0xae>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   24db2:	2103      	movs	r1, #3
   24db4:	f7ff fc5b 	bl	2466e <atomic_test_bit>
   24db8:	b920      	cbnz	r0, 24dc4 <bt_smp_encrypt_change+0x30>
		smp_reset(smp);
   24dba:	4620      	mov	r0, r4
}
   24dbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_reset(smp);
   24dc0:	f7ff bf86 	b.w	24cd0 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   24dc4:	2105      	movs	r1, #5
   24dc6:	4628      	mov	r0, r5
   24dc8:	f7ff fc51 	bl	2466e <atomic_test_bit>
   24dcc:	b198      	cbz	r0, 24df6 <bt_smp_encrypt_change+0x62>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   24dce:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   24dd2:	071e      	lsls	r6, r3, #28
   24dd4:	d507      	bpl.n	24de6 <bt_smp_encrypt_change+0x52>
   24dd6:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   24dda:	0718      	lsls	r0, r3, #28
   24ddc:	d503      	bpl.n	24de6 <bt_smp_encrypt_change+0x52>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   24dde:	2110      	movs	r1, #16
   24de0:	4628      	mov	r0, r5
   24de2:	f7ff fc36 	bl	24652 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   24de6:	f8b4 31a8 	ldrh.w	r3, [r4, #424]	; 0x1a8
   24dea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   24dee:	f023 0308 	bic.w	r3, r3, #8
   24df2:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   24df6:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   24dfa:	07d9      	lsls	r1, r3, #31
   24dfc:	d519      	bpl.n	24e32 <bt_smp_encrypt_change+0x9e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   24dfe:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   24e00:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   24e04:	f7ff fc25 	bl	24652 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   24e08:	2102      	movs	r1, #2
   24e0a:	4628      	mov	r0, r5
   24e0c:	f7ff fc21 	bl	24652 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24e10:	78fb      	ldrb	r3, [r7, #3]
   24e12:	b913      	cbnz	r3, 24e1a <bt_smp_encrypt_change+0x86>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
   24e14:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   24e18:	b99b      	cbnz	r3, 24e42 <bt_smp_encrypt_change+0xae>
	if (bt_smp_distribute_keys(smp)) {
   24e1a:	4620      	mov	r0, r4
   24e1c:	f7ea fcd2 	bl	f7c4 <bt_smp_distribute_keys>
   24e20:	b978      	cbnz	r0, 24e42 <bt_smp_encrypt_change+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
   24e22:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
   24e26:	b961      	cbnz	r1, 24e42 <bt_smp_encrypt_change+0xae>
		smp_pairing_complete(smp, 0);
   24e28:	4620      	mov	r0, r4
}
   24e2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_pairing_complete(smp, 0);
   24e2e:	f7ea bd6f 	b.w	f910 <smp_pairing_complete>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   24e32:	079a      	lsls	r2, r3, #30
   24e34:	d501      	bpl.n	24e3a <bt_smp_encrypt_change+0xa6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   24e36:	2108      	movs	r1, #8
   24e38:	e7e2      	b.n	24e00 <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   24e3a:	075b      	lsls	r3, r3, #29
   24e3c:	d5e4      	bpl.n	24e08 <bt_smp_encrypt_change+0x74>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   24e3e:	210a      	movs	r1, #10
   24e40:	e7de      	b.n	24e00 <bt_smp_encrypt_change+0x6c>
}
   24e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024e44 <smp_c1>:
{
   24e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24e48:	b089      	sub	sp, #36	; 0x24
   24e4a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   24e4e:	4699      	mov	r9, r3
	p1[0] = ia->type;
   24e50:	783b      	ldrb	r3, [r7, #0]
{
   24e52:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   24e54:	f88d 3000 	strb.w	r3, [sp]
{
   24e58:	460c      	mov	r4, r1
	p1[1] = ra->type;
   24e5a:	f898 3000 	ldrb.w	r3, [r8]
   24e5e:	f88d 3001 	strb.w	r3, [sp, #1]
{
   24e62:	4611      	mov	r1, r2
   24e64:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   24e66:	2207      	movs	r2, #7
   24e68:	f10d 0002 	add.w	r0, sp, #2
   24e6c:	f7fd fc58 	bl	22720 <memcpy>
	memcpy(p1 + 9, pres, 7);
   24e70:	2207      	movs	r2, #7
   24e72:	4649      	mov	r1, r9
   24e74:	f10d 0009 	add.w	r0, sp, #9
   24e78:	f7fd fc52 	bl	22720 <memcpy>
	while (len--) {
   24e7c:	f104 0010 	add.w	r0, r4, #16
   24e80:	4629      	mov	r1, r5
   24e82:	466a      	mov	r2, sp
   24e84:	4284      	cmp	r4, r0
   24e86:	d127      	bne.n	24ed8 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   24e88:	462a      	mov	r2, r5
   24e8a:	4629      	mov	r1, r5
   24e8c:	4630      	mov	r0, r6
   24e8e:	f7ee ff01 	bl	13c94 <bt_encrypt_le>
	if (err) {
   24e92:	4604      	mov	r4, r0
   24e94:	b9e0      	cbnz	r0, 24ed0 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   24e96:	2206      	movs	r2, #6
   24e98:	f108 0101 	add.w	r1, r8, #1
   24e9c:	a804      	add	r0, sp, #16
   24e9e:	f7fd fc3f 	bl	22720 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   24ea2:	2206      	movs	r2, #6
   24ea4:	1c79      	adds	r1, r7, #1
   24ea6:	f10d 0016 	add.w	r0, sp, #22
   24eaa:	f7fd fc39 	bl	22720 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   24eae:	2204      	movs	r2, #4
   24eb0:	4621      	mov	r1, r4
   24eb2:	a807      	add	r0, sp, #28
   24eb4:	f7fd fc5f 	bl	22776 <memset>
	while (len--) {
   24eb8:	f105 0010 	add.w	r0, r5, #16
   24ebc:	462a      	mov	r2, r5
   24ebe:	ab04      	add	r3, sp, #16
   24ec0:	4282      	cmp	r2, r0
   24ec2:	d112      	bne.n	24eea <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   24ec4:	462a      	mov	r2, r5
   24ec6:	4629      	mov	r1, r5
   24ec8:	4630      	mov	r0, r6
   24eca:	f7ee fee3 	bl	13c94 <bt_encrypt_le>
   24ece:	4604      	mov	r4, r0
}
   24ed0:	4620      	mov	r0, r4
   24ed2:	b009      	add	sp, #36	; 0x24
   24ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   24ed8:	f814 3b01 	ldrb.w	r3, [r4], #1
   24edc:	f812 cb01 	ldrb.w	ip, [r2], #1
   24ee0:	ea83 030c 	eor.w	r3, r3, ip
   24ee4:	f801 3b01 	strb.w	r3, [r1], #1
   24ee8:	e7cc      	b.n	24e84 <smp_c1+0x40>
   24eea:	f812 1b01 	ldrb.w	r1, [r2], #1
   24eee:	f813 4b01 	ldrb.w	r4, [r3], #1
   24ef2:	4061      	eors	r1, r4
   24ef4:	f802 1c01 	strb.w	r1, [r2, #-1]
   24ef8:	e7e2      	b.n	24ec0 <smp_c1+0x7c>

00024efa <legacy_send_pairing_confirm>:
{
   24efa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   24efc:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   24efe:	6804      	ldr	r4, [r0, #0]
{
   24f00:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   24f02:	f7ff fc7b 	bl	247fc <smp_create_pdu.isra.0>
	if (!buf) {
   24f06:	4606      	mov	r6, r0
   24f08:	b1c0      	cbz	r0, 24f3c <legacy_send_pairing_confirm+0x42>
	req = net_buf_add(buf, sizeof(*req));
   24f0a:	2110      	movs	r1, #16
   24f0c:	3008      	adds	r0, #8
   24f0e:	f000 fa6d 	bl	253ec <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   24f12:	f104 0396 	add.w	r3, r4, #150	; 0x96
   24f16:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   24f18:	9002      	str	r0, [sp, #8]
   24f1a:	9301      	str	r3, [sp, #4]
   24f1c:	9400      	str	r4, [sp, #0]
   24f1e:	f105 03d0 	add.w	r3, r5, #208	; 0xd0
   24f22:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
   24f26:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   24f2a:	f205 1007 	addw	r0, r5, #263	; 0x107
   24f2e:	f7ff ff89 	bl	24e44 <smp_c1>
   24f32:	4604      	mov	r4, r0
   24f34:	b120      	cbz	r0, 24f40 <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
   24f36:	4630      	mov	r0, r6
   24f38:	f7f9 f83e 	bl	1dfb8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   24f3c:	2008      	movs	r0, #8
   24f3e:	e00a      	b.n	24f56 <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL, NULL);
   24f40:	4602      	mov	r2, r0
   24f42:	4631      	mov	r1, r6
   24f44:	4628      	mov	r0, r5
   24f46:	f7ea f9d1 	bl	f2ec <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   24f4a:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   24f4e:	4621      	mov	r1, r4
   24f50:	f7ff fb96 	bl	24680 <atomic_clear_bit>
	return 0;
   24f54:	4620      	mov	r0, r4
}
   24f56:	b004      	add	sp, #16
   24f58:	bd70      	pop	{r4, r5, r6, pc}

00024f5a <legacy_pairing_confirm>:
{
   24f5a:	b510      	push	{r4, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   24f5c:	6803      	ldr	r3, [r0, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24f5e:	78db      	ldrb	r3, [r3, #3]
{
   24f60:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24f62:	b94b      	cbnz	r3, 24f78 <legacy_pairing_confirm+0x1e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   24f64:	2103      	movs	r1, #3
			atomic_set_bit(&smp->allowed_cmds,
   24f66:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   24f6a:	f7ff fb72 	bl	24652 <atomic_set_bit>
			return legacy_send_pairing_confirm(smp);
   24f6e:	4620      	mov	r0, r4
}
   24f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return legacy_send_pairing_confirm(smp);
   24f74:	f7ff bfc1 	b.w	24efa <legacy_send_pairing_confirm>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   24f78:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
   24f7c:	2109      	movs	r1, #9
   24f7e:	4618      	mov	r0, r3
   24f80:	f7ff fb75 	bl	2466e <atomic_test_bit>
   24f84:	b908      	cbnz	r0, 24f8a <legacy_pairing_confirm+0x30>
			atomic_set_bit(&smp->allowed_cmds,
   24f86:	2104      	movs	r1, #4
   24f88:	e7ed      	b.n	24f66 <legacy_pairing_confirm+0xc>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   24f8a:	4618      	mov	r0, r3
   24f8c:	2100      	movs	r1, #0
   24f8e:	f7ff fb60 	bl	24652 <atomic_set_bit>
}
   24f92:	2000      	movs	r0, #0
   24f94:	bd10      	pop	{r4, pc}

00024f96 <smp_pairing_confirm>:
{
   24f96:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   24f98:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   24f9a:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
{
   24f9e:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   24fa0:	210a      	movs	r1, #10
   24fa2:	4628      	mov	r0, r5
   24fa4:	f7ff fb6c 	bl	24680 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   24fa8:	2210      	movs	r2, #16
   24faa:	4631      	mov	r1, r6
   24fac:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   24fb0:	f7fd fbb6 	bl	22720 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   24fb4:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24fb6:	78db      	ldrb	r3, [r3, #3]
   24fb8:	b94b      	cbnz	r3, 24fce <smp_pairing_confirm+0x38>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   24fba:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   24fbe:	2104      	movs	r1, #4
   24fc0:	f7ff fb47 	bl	24652 <atomic_set_bit>
		return smp_send_pairing_random(smp);
   24fc4:	4620      	mov	r0, r4
}
   24fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_random(smp);
   24fca:	f7ff be37 	b.w	24c3c <smp_send_pairing_random>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   24fce:	2105      	movs	r1, #5
   24fd0:	4628      	mov	r0, r5
   24fd2:	f7ff fb4c 	bl	2466e <atomic_test_bit>
   24fd6:	b920      	cbnz	r0, 24fe2 <smp_pairing_confirm+0x4c>
		return legacy_pairing_confirm(smp);
   24fd8:	4620      	mov	r0, r4
}
   24fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   24fde:	f7ff bfbc 	b.w	24f5a <legacy_pairing_confirm>
	switch (smp->method) {
   24fe2:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   24fe6:	2b01      	cmp	r3, #1
   24fe8:	d00b      	beq.n	25002 <smp_pairing_confirm+0x6c>
   24fea:	2b02      	cmp	r3, #2
   24fec:	d115      	bne.n	2501a <smp_pairing_confirm+0x84>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   24fee:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   24ff2:	2104      	movs	r1, #4
   24ff4:	f7ff fb2d 	bl	24652 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   24ff8:	4620      	mov	r0, r4
}
   24ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   24ffe:	f7ea ba9b 	b.w	f538 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   25002:	2109      	movs	r1, #9
   25004:	4628      	mov	r0, r5
   25006:	f7ff fb32 	bl	2466e <atomic_test_bit>
   2500a:	2800      	cmp	r0, #0
   2500c:	d0ef      	beq.n	24fee <smp_pairing_confirm+0x58>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2500e:	4628      	mov	r0, r5
   25010:	2100      	movs	r1, #0
   25012:	f7ff fb1e 	bl	24652 <atomic_set_bit>
			return 0;
   25016:	2000      	movs	r0, #0
}
   25018:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   2501a:	2008      	movs	r0, #8
   2501c:	e7fc      	b.n	25018 <smp_pairing_confirm+0x82>

0002501e <bt_smp_request_ltk>:
{
   2501e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25022:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   25024:	e9cd 2300 	strd	r2, r3, [sp]
   25028:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   2502a:	f7ea f811 	bl	f050 <smp_chan_get>
	if (!smp) {
   2502e:	4604      	mov	r4, r0
   25030:	2800      	cmp	r0, #0
   25032:	f000 809c 	beq.w	2516e <bt_smp_request_ltk+0x150>
	if (ediv == 0U && rand == 0U &&
   25036:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   2503a:	f1b9 0f00 	cmp.w	r9, #0
   2503e:	d12d      	bne.n	2509c <bt_smp_request_ltk+0x7e>
   25040:	e9dd 2300 	ldrd	r2, r3, [sp]
   25044:	4313      	orrs	r3, r2
   25046:	d129      	bne.n	2509c <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   25048:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
   2504c:	2103      	movs	r1, #3
   2504e:	4640      	mov	r0, r8
   25050:	f7ff fb0d 	bl	2466e <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   25054:	b310      	cbz	r0, 2509c <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   25056:	2101      	movs	r1, #1
   25058:	4640      	mov	r0, r8
   2505a:	f7ff fb08 	bl	2466e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2505e:	4606      	mov	r6, r0
   25060:	b1e0      	cbz	r0, 2509c <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   25062:	f894 50d4 	ldrb.w	r5, [r4, #212]	; 0xd4
   25066:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   2506a:	429d      	cmp	r5, r3
   2506c:	bf28      	it	cs
   2506e:	461d      	movcs	r5, r3
		memcpy(ltk, smp->tk, enc_size);
   25070:	462a      	mov	r2, r5
   25072:	f204 1107 	addw	r1, r4, #263	; 0x107
   25076:	4638      	mov	r0, r7
   25078:	f7fd fb52 	bl	22720 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2507c:	2d0f      	cmp	r5, #15
   2507e:	d805      	bhi.n	2508c <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   25080:	f1c5 0210 	rsb	r2, r5, #16
   25084:	4649      	mov	r1, r9
   25086:	1978      	adds	r0, r7, r5
   25088:	f7fd fb75 	bl	22776 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2508c:	2101      	movs	r1, #1
   2508e:	4640      	mov	r0, r8
   25090:	f7ff fadf 	bl	24652 <atomic_set_bit>
}
   25094:	4630      	mov	r0, r6
   25096:	b003      	add	sp, #12
   25098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   2509c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   250a0:	b983      	cbnz	r3, 250c4 <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   250a2:	f105 0688 	add.w	r6, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   250a6:	7a29      	ldrb	r1, [r5, #8]
   250a8:	4632      	mov	r2, r6
   250aa:	2020      	movs	r0, #32
   250ac:	f7eb fb4e 	bl	1074c <bt_keys_find>
   250b0:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   250b4:	b930      	cbnz	r0, 250c4 <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   250b6:	7a29      	ldrb	r1, [r5, #8]
   250b8:	4632      	mov	r2, r6
   250ba:	2001      	movs	r0, #1
   250bc:	f7eb fb46 	bl	1074c <bt_keys_find>
   250c0:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   250c4:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   250c8:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   250cc:	b9ce      	cbnz	r6, 25102 <bt_smp_request_ltk+0xe4>
   250ce:	e9dd 2300 	ldrd	r2, r3, [sp]
   250d2:	4313      	orrs	r3, r2
   250d4:	d115      	bne.n	25102 <bt_smp_request_ltk+0xe4>
   250d6:	2800      	cmp	r0, #0
   250d8:	d03c      	beq.n	25154 <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   250da:	89c3      	ldrh	r3, [r0, #14]
   250dc:	069a      	lsls	r2, r3, #26
   250de:	d511      	bpl.n	25104 <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   250e0:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   250e2:	f100 011a 	add.w	r1, r0, #26
   250e6:	4622      	mov	r2, r4
   250e8:	4638      	mov	r0, r7
   250ea:	f7fd fb19 	bl	22720 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   250ee:	2c0f      	cmp	r4, #15
   250f0:	d805      	bhi.n	250fe <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   250f2:	f1c4 0210 	rsb	r2, r4, #16
   250f6:	4631      	mov	r1, r6
   250f8:	1938      	adds	r0, r7, r4
   250fa:	f7fd fb3c 	bl	22776 <memset>
		return true;
   250fe:	2601      	movs	r6, #1
   25100:	e7c8      	b.n	25094 <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   25102:	b338      	cbz	r0, 25154 <bt_smp_request_ltk+0x136>
   25104:	89c3      	ldrh	r3, [r0, #14]
   25106:	07db      	lsls	r3, r3, #31
   25108:	d524      	bpl.n	25154 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   2510a:	2208      	movs	r2, #8
   2510c:	4669      	mov	r1, sp
   2510e:	3040      	adds	r0, #64	; 0x40
   25110:	f7fd faf6 	bl	22700 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   25114:	b9f0      	cbnz	r0, 25154 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   25116:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   2511a:	2202      	movs	r2, #2
   2511c:	a90a      	add	r1, sp, #40	; 0x28
   2511e:	3048      	adds	r0, #72	; 0x48
   25120:	f7fd faee 	bl	22700 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   25124:	4606      	mov	r6, r0
   25126:	b9a8      	cbnz	r0, 25154 <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   25128:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
   2512c:	7b0d      	ldrb	r5, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   2512e:	4638      	mov	r0, r7
   25130:	462a      	mov	r2, r5
   25132:	314a      	adds	r1, #74	; 0x4a
   25134:	f7fd faf4 	bl	22720 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   25138:	2d0f      	cmp	r5, #15
   2513a:	d805      	bhi.n	25148 <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   2513c:	f1c5 0210 	rsb	r2, r5, #16
   25140:	4631      	mov	r1, r6
   25142:	1978      	adds	r0, r7, r5
   25144:	f7fd fb17 	bl	22776 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   25148:	2101      	movs	r1, #1
   2514a:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   2514e:	f7ff fa80 	bl	24652 <atomic_set_bit>
		return true;
   25152:	e7d4      	b.n	250fe <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   25154:	210e      	movs	r1, #14
   25156:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   2515a:	f7ff fa88 	bl	2466e <atomic_test_bit>
   2515e:	b118      	cbz	r0, 25168 <bt_smp_request_ltk+0x14a>
		bt_conn_security_changed(smp->chan.chan.conn,
   25160:	6820      	ldr	r0, [r4, #0]
   25162:	2102      	movs	r1, #2
   25164:	f7e5 f816 	bl	a194 <bt_conn_security_changed>
	smp_reset(smp);
   25168:	4620      	mov	r0, r4
   2516a:	f7ff fdb1 	bl	24cd0 <smp_reset>
	return false;
   2516e:	2600      	movs	r6, #0
   25170:	e790      	b.n	25094 <bt_smp_request_ltk+0x76>

00025172 <bt_smp_sign>:
   25172:	f06f 0022 	mvn.w	r0, #34	; 0x22
   25176:	4770      	bx	lr

00025178 <bt_smp_start_security>:
{
   25178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   2517c:	78c4      	ldrb	r4, [r0, #3]
{
   2517e:	4605      	mov	r5, r0
	switch (conn->role) {
   25180:	b124      	cbz	r4, 2518c <bt_smp_start_security+0x14>
   25182:	2c01      	cmp	r4, #1
   25184:	d045      	beq.n	25212 <bt_smp_start_security+0x9a>
		return -EINVAL;
   25186:	f06f 0415 	mvn.w	r4, #21
   2518a:	e005      	b.n	25198 <bt_smp_start_security+0x20>
		smp = smp_chan_get(conn);
   2518c:	f7e9 ff60 	bl	f050 <smp_chan_get>
		if (!smp) {
   25190:	4606      	mov	r6, r0
   25192:	b928      	cbnz	r0, 251a0 <bt_smp_start_security+0x28>
			return -ENOTCONN;
   25194:	f06f 0438 	mvn.w	r4, #56	; 0x38
}
   25198:	4620      	mov	r0, r4
   2519a:	b003      	add	sp, #12
   2519c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   251a0:	210b      	movs	r1, #11
   251a2:	1d28      	adds	r0, r5, #4
   251a4:	f7ff fa63 	bl	2466e <atomic_test_bit>
   251a8:	b128      	cbz	r0, 251b6 <bt_smp_start_security+0x3e>
			return smp_send_pairing_req(conn);
   251aa:	4628      	mov	r0, r5
}
   251ac:	b003      	add	sp, #12
   251ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return smp_send_pairing_req(conn);
   251b2:	f7ea ba01 	b.w	f5b8 <smp_send_pairing_req>
   251b6:	4628      	mov	r0, r5
   251b8:	f7ff faf8 	bl	247ac <smp_keys_check.part.0>
		if (!smp_keys_check(conn)) {
   251bc:	2800      	cmp	r0, #0
   251be:	d0f4      	beq.n	251aa <bt_smp_start_security+0x32>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   251c0:	f106 07c4 	add.w	r7, r6, #196	; 0xc4
   251c4:	2103      	movs	r1, #3
   251c6:	4638      	mov	r0, r7
   251c8:	f7ff fa51 	bl	2466e <atomic_test_bit>
   251cc:	b110      	cbz	r0, 251d4 <bt_smp_start_security+0x5c>
			return -EBUSY;
   251ce:	f06f 040f 	mvn.w	r4, #15
   251d2:	e7e1      	b.n	25198 <bt_smp_start_security+0x20>
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   251d4:	2101      	movs	r1, #1
   251d6:	4638      	mov	r0, r7
   251d8:	f7ff fa49 	bl	2466e <atomic_test_bit>
   251dc:	2800      	cmp	r0, #0
   251de:	d1f6      	bne.n	251ce <bt_smp_start_security+0x56>
						  conn->le.keys->ltk.rand,
   251e0:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   251e4:	7b0b      	ldrb	r3, [r1, #12]
   251e6:	9300      	str	r3, [sp, #0]
   251e8:	f101 0218 	add.w	r2, r1, #24
   251ec:	f101 031a 	add.w	r3, r1, #26
   251f0:	4628      	mov	r0, r5
   251f2:	3110      	adds	r1, #16
   251f4:	f7fd fdc9 	bl	22d8a <bt_conn_le_start_encryption>
		if (err) {
   251f8:	4604      	mov	r4, r0
   251fa:	2800      	cmp	r0, #0
   251fc:	d1cc      	bne.n	25198 <bt_smp_start_security+0x20>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   251fe:	210b      	movs	r1, #11
   25200:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   25204:	f7ff fa25 	bl	24652 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   25208:	2101      	movs	r1, #1
   2520a:	4638      	mov	r0, r7
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2520c:	f7ff fa21 	bl	24652 <atomic_set_bit>
	return 0;
   25210:	e7c2      	b.n	25198 <bt_smp_start_security+0x20>
	smp = smp_chan_get(conn);
   25212:	f7e9 ff1d 	bl	f050 <smp_chan_get>
	if (!smp) {
   25216:	4606      	mov	r6, r0
   25218:	2800      	cmp	r0, #0
   2521a:	d0bb      	beq.n	25194 <bt_smp_start_security+0x1c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2521c:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
   25220:	2104      	movs	r1, #4
   25222:	4640      	mov	r0, r8
   25224:	f7ff fa23 	bl	2466e <atomic_test_bit>
   25228:	2800      	cmp	r0, #0
   2522a:	d151      	bne.n	252d0 <bt_smp_start_security+0x158>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2522c:	2103      	movs	r1, #3
   2522e:	4640      	mov	r0, r8
   25230:	f7ff fa1d 	bl	2466e <atomic_test_bit>
   25234:	2800      	cmp	r0, #0
   25236:	d1ca      	bne.n	251ce <bt_smp_start_security+0x56>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   25238:	4621      	mov	r1, r4
   2523a:	4640      	mov	r0, r8
   2523c:	f7ff fa17 	bl	2466e <atomic_test_bit>
   25240:	2800      	cmp	r0, #0
   25242:	d1c4      	bne.n	251ce <bt_smp_start_security+0x56>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   25244:	7aa8      	ldrb	r0, [r5, #10]
   25246:	f7e9 fed3 	bl	eff0 <sec_level_reachable.isra.0>
   2524a:	b168      	cbz	r0, 25268 <bt_smp_start_security+0xf0>
	if (!conn->le.keys) {
   2524c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   25250:	b9b3      	cbnz	r3, 25280 <bt_smp_start_security+0x108>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   25252:	7a28      	ldrb	r0, [r5, #8]
   25254:	f105 0188 	add.w	r1, r5, #136	; 0x88
   25258:	f7eb fa42 	bl	106e0 <bt_keys_get_addr>
   2525c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   25260:	b970      	cbnz	r0, 25280 <bt_smp_start_security+0x108>
			return -ENOMEM;
   25262:	f06f 040b 	mvn.w	r4, #11
   25266:	e797      	b.n	25198 <bt_smp_start_security+0x20>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   25268:	210b      	movs	r1, #11
   2526a:	1d28      	adds	r0, r5, #4
   2526c:	f7ff f9ff 	bl	2466e <atomic_test_bit>
   25270:	2800      	cmp	r0, #0
   25272:	d188      	bne.n	25186 <bt_smp_start_security+0xe>
   25274:	4628      	mov	r0, r5
   25276:	f7ff fa99 	bl	247ac <smp_keys_check.part.0>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   2527a:	2800      	cmp	r0, #0
   2527c:	d1e6      	bne.n	2524c <bt_smp_start_security+0xd4>
   2527e:	e782      	b.n	25186 <bt_smp_start_security+0xe>
	if (smp_init(smp) != 0) {
   25280:	4630      	mov	r0, r6
   25282:	f7e9 ff4d 	bl	f120 <smp_init>
   25286:	4604      	mov	r4, r0
   25288:	b110      	cbz	r0, 25290 <bt_smp_start_security+0x118>
		return -ENOBUFS;
   2528a:	f06f 0436 	mvn.w	r4, #54	; 0x36
   2528e:	e783      	b.n	25198 <bt_smp_start_security+0x20>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   25290:	210b      	movs	r1, #11
   25292:	4630      	mov	r0, r6
   25294:	f7ff fab2 	bl	247fc <smp_create_pdu.isra.0>
	if (!req_buf) {
   25298:	4607      	mov	r7, r0
   2529a:	2800      	cmp	r0, #0
   2529c:	d0f5      	beq.n	2528a <bt_smp_start_security+0x112>
	req = net_buf_add(req_buf, sizeof(*req));
   2529e:	2101      	movs	r1, #1
   252a0:	3008      	adds	r0, #8
   252a2:	f000 f8a3 	bl	253ec <net_buf_simple_add>
   252a6:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   252a8:	2009      	movs	r0, #9
   252aa:	f7e9 fe83 	bl	efb4 <get_auth.isra.0>
   252ae:	4623      	mov	r3, r4
   252b0:	f889 0000 	strb.w	r0, [r9]
   252b4:	463a      	mov	r2, r7
   252b6:	2106      	movs	r1, #6
   252b8:	9400      	str	r4, [sp, #0]
   252ba:	4628      	mov	r0, r5
   252bc:	f7fd ffbe 	bl	2323c <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   252c0:	210e      	movs	r1, #14
   252c2:	4640      	mov	r0, r8
   252c4:	f7ff f9c5 	bl	24652 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   252c8:	2101      	movs	r1, #1
   252ca:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   252ce:	e79d      	b.n	2520c <bt_smp_start_security+0x94>
		return -EIO;
   252d0:	f06f 0404 	mvn.w	r4, #4
   252d4:	e760      	b.n	25198 <bt_smp_start_security+0x20>

000252d6 <bt_keys_get_type>:
{
   252d6:	b570      	push	{r4, r5, r6, lr}
   252d8:	4604      	mov	r4, r0
   252da:	460d      	mov	r5, r1
   252dc:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   252de:	f7eb fa35 	bl	1074c <bt_keys_find>
	if (keys) {
   252e2:	b938      	cbnz	r0, 252f4 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   252e4:	4631      	mov	r1, r6
   252e6:	4628      	mov	r0, r5
   252e8:	f7eb f9fa 	bl	106e0 <bt_keys_get_addr>
	if (!keys) {
   252ec:	b110      	cbz	r0, 252f4 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   252ee:	89c3      	ldrh	r3, [r0, #14]
   252f0:	431c      	orrs	r4, r3
   252f2:	81c4      	strh	r4, [r0, #14]
}
   252f4:	bd70      	pop	{r4, r5, r6, pc}

000252f6 <bt_keys_add_type>:
	keys->keys |= type;
   252f6:	89c3      	ldrh	r3, [r0, #14]
   252f8:	4319      	orrs	r1, r3
   252fa:	81c1      	strh	r1, [r0, #14]
}
   252fc:	4770      	bx	lr

000252fe <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   252fe:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   25300:	7a03      	ldrb	r3, [r0, #8]
   25302:	075b      	lsls	r3, r3, #29
{
   25304:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   25306:	d501      	bpl.n	2530c <bt_keys_clear+0xe>
		bt_id_del(keys);
   25308:	f7e3 fcb2 	bl	8c70 <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   2530c:	4620      	mov	r0, r4
   2530e:	225c      	movs	r2, #92	; 0x5c
}
   25310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   25314:	2100      	movs	r1, #0
   25316:	f7fd ba2e 	b.w	22776 <memset>

0002531a <fixed_data_unref>:
}
   2531a:	4770      	bx	lr

0002531c <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2531c:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2531e:	6849      	ldr	r1, [r1, #4]
   25320:	6809      	ldr	r1, [r1, #0]
   25322:	f7f8 bdbd 	b.w	1dea0 <net_buf_alloc_len>

00025326 <net_buf_get>:
{
   25326:	b570      	push	{r4, r5, r6, lr}
   25328:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   2532a:	f7fa f913 	bl	1f554 <z_impl_k_queue_get>
	if (!buf) {
   2532e:	4605      	mov	r5, r0
   25330:	b128      	cbz	r0, 2533e <net_buf_get+0x18>
   25332:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   25334:	7963      	ldrb	r3, [r4, #5]
   25336:	f013 0301 	ands.w	r3, r3, #1
   2533a:	d102      	bne.n	25342 <net_buf_get+0x1c>
	frag->frags = NULL;
   2533c:	6023      	str	r3, [r4, #0]
}
   2533e:	4628      	mov	r0, r5
   25340:	bd70      	pop	{r4, r5, r6, pc}
   25342:	2300      	movs	r3, #0
   25344:	2200      	movs	r2, #0
   25346:	4630      	mov	r0, r6
   25348:	f7fa f904 	bl	1f554 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   2534c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   2534e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   25350:	f023 0301 	bic.w	r3, r3, #1
   25354:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   25356:	4604      	mov	r4, r0
   25358:	e7ec      	b.n	25334 <net_buf_get+0xe>

0002535a <net_buf_simple_init_with_data>:
	buf->size  = size;
   2535a:	b292      	uxth	r2, r2
	buf->__buf = data;
   2535c:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2535e:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   25360:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   25362:	8082      	strh	r2, [r0, #4]
}
   25364:	4770      	bx	lr

00025366 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   25366:	6883      	ldr	r3, [r0, #8]
   25368:	440b      	add	r3, r1
   2536a:	6003      	str	r3, [r0, #0]
}
   2536c:	4770      	bx	lr

0002536e <net_buf_put>:
{
   2536e:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   25370:	460a      	mov	r2, r1
   25372:	6814      	ldr	r4, [r2, #0]
   25374:	b914      	cbnz	r4, 2537c <net_buf_put+0xe>
}
   25376:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   25378:	f000 bbfc 	b.w	25b74 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   2537c:	7953      	ldrb	r3, [r2, #5]
   2537e:	f043 0301 	orr.w	r3, r3, #1
   25382:	7153      	strb	r3, [r2, #5]
   25384:	4622      	mov	r2, r4
   25386:	e7f4      	b.n	25372 <net_buf_put+0x4>

00025388 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   25388:	7902      	ldrb	r2, [r0, #4]
   2538a:	3201      	adds	r2, #1
   2538c:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2538e:	4770      	bx	lr

00025390 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   25390:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   25392:	4618      	mov	r0, r3
   25394:	681b      	ldr	r3, [r3, #0]
   25396:	2b00      	cmp	r3, #0
   25398:	d1fb      	bne.n	25392 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2539a:	4770      	bx	lr

0002539c <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2539c:	6802      	ldr	r2, [r0, #0]
{
   2539e:	b510      	push	{r4, lr}
	if (parent->frags) {
   253a0:	b12a      	cbz	r2, 253ae <net_buf_frag_insert+0x12>
   253a2:	460b      	mov	r3, r1
	while (buf->frags) {
   253a4:	461c      	mov	r4, r3
   253a6:	681b      	ldr	r3, [r3, #0]
   253a8:	2b00      	cmp	r3, #0
   253aa:	d1fb      	bne.n	253a4 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   253ac:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   253ae:	6001      	str	r1, [r0, #0]
}
   253b0:	bd10      	pop	{r4, pc}

000253b2 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   253b2:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   253b4:	4604      	mov	r4, r0
   253b6:	b920      	cbnz	r0, 253c2 <net_buf_frag_add+0x10>
	buf->ref++;
   253b8:	790b      	ldrb	r3, [r1, #4]
   253ba:	3301      	adds	r3, #1
   253bc:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   253be:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   253c0:	bd10      	pop	{r4, pc}
   253c2:	4603      	mov	r3, r0
	while (buf->frags) {
   253c4:	4618      	mov	r0, r3
   253c6:	681b      	ldr	r3, [r3, #0]
   253c8:	2b00      	cmp	r3, #0
   253ca:	d1fb      	bne.n	253c4 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   253cc:	f7ff ffe6 	bl	2539c <net_buf_frag_insert>
   253d0:	4620      	mov	r0, r4
   253d2:	e7f5      	b.n	253c0 <net_buf_frag_add+0xe>

000253d4 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   253d4:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   253d6:	b108      	cbz	r0, 253dc <net_buf_frag_del+0x8>
   253d8:	680b      	ldr	r3, [r1, #0]
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   253da:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   253dc:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   253de:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   253e0:	4608      	mov	r0, r1
	frag->frags = NULL;
   253e2:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   253e4:	f7f8 fde8 	bl	1dfb8 <net_buf_unref>
#endif

	return next_frag;
}
   253e8:	4620      	mov	r0, r4
   253ea:	bd10      	pop	{r4, pc}

000253ec <net_buf_simple_add>:
	return buf->data + buf->len;
   253ec:	8883      	ldrh	r3, [r0, #4]
   253ee:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   253f0:	4419      	add	r1, r3
   253f2:	8081      	strh	r1, [r0, #4]
	return tail;
}
   253f4:	18d0      	adds	r0, r2, r3
   253f6:	4770      	bx	lr

000253f8 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   253f8:	b430      	push	{r4, r5}
   253fa:	8884      	ldrh	r4, [r0, #4]
   253fc:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   253fe:	18a3      	adds	r3, r4, r2
   25400:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   25402:	1928      	adds	r0, r5, r4
}
   25404:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   25406:	f7fd b98b 	b.w	22720 <memcpy>

0002540a <net_buf_simple_add_u8>:
   2540a:	8883      	ldrh	r3, [r0, #4]
   2540c:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2540e:	b510      	push	{r4, lr}
	buf->len += len;
   25410:	1c5c      	adds	r4, r3, #1
   25412:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   25414:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   25416:	18d0      	adds	r0, r2, r3
   25418:	bd10      	pop	{r4, pc}

0002541a <net_buf_simple_add_le16>:
   2541a:	8883      	ldrh	r3, [r0, #4]
   2541c:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   2541e:	b530      	push	{r4, r5, lr}
   25420:	18d4      	adds	r4, r2, r3
	buf->len += len;
   25422:	1c9d      	adds	r5, r3, #2
   25424:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   25426:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   25428:	0a09      	lsrs	r1, r1, #8
   2542a:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   2542c:	bd30      	pop	{r4, r5, pc}

0002542e <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2542e:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   25430:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   25432:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   25434:	1a40      	subs	r0, r0, r1
	buf->len += len;
   25436:	4411      	add	r1, r2
	buf->data -= len;
   25438:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2543a:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2543c:	4770      	bx	lr

0002543e <net_buf_simple_push_le16>:
	buf->data -= len;
   2543e:	6803      	ldr	r3, [r0, #0]
   25440:	1e9a      	subs	r2, r3, #2
   25442:	6002      	str	r2, [r0, #0]
	buf->len += len;
   25444:	8882      	ldrh	r2, [r0, #4]
   25446:	3202      	adds	r2, #2
   25448:	8082      	strh	r2, [r0, #4]
	dst[0] = val;
   2544a:	f803 1c02 	strb.w	r1, [r3, #-2]
	dst[1] = val >> 8;
   2544e:	0a09      	lsrs	r1, r1, #8
   25450:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_le16(struct net_buf_simple *buf, uint16_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_push(buf, sizeof(val)));
}
   25454:	4770      	bx	lr

00025456 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   25456:	8882      	ldrh	r2, [r0, #4]
   25458:	1a52      	subs	r2, r2, r1
{
   2545a:	4603      	mov	r3, r0
	buf->len -= len;
   2545c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2545e:	6800      	ldr	r0, [r0, #0]
   25460:	4408      	add	r0, r1
   25462:	6018      	str	r0, [r3, #0]
}
   25464:	4770      	bx	lr

00025466 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   25466:	4603      	mov	r3, r0
	void *data = buf->data;
   25468:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2546a:	889a      	ldrh	r2, [r3, #4]
   2546c:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2546e:	4401      	add	r1, r0
	buf->len -= len;
   25470:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   25472:	6019      	str	r1, [r3, #0]

	return data;
}
   25474:	4770      	bx	lr

00025476 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   25476:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   25478:	6803      	ldr	r3, [r0, #0]
   2547a:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2547c:	2101      	movs	r1, #1
   2547e:	f7ff ffea 	bl	25456 <net_buf_simple_pull>

	return val;
}
   25482:	4620      	mov	r0, r4
   25484:	bd10      	pop	{r4, pc}

00025486 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   25486:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   25488:	6803      	ldr	r3, [r0, #0]
   2548a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2548c:	2102      	movs	r1, #2
   2548e:	f7ff ffe2 	bl	25456 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   25492:	4620      	mov	r0, r4
   25494:	bd10      	pop	{r4, pc}

00025496 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   25496:	6802      	ldr	r2, [r0, #0]
   25498:	6880      	ldr	r0, [r0, #8]
}
   2549a:	1a10      	subs	r0, r2, r0
   2549c:	4770      	bx	lr

0002549e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2549e:	8883      	ldrh	r3, [r0, #4]
   254a0:	88c2      	ldrh	r2, [r0, #6]
   254a2:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   254a4:	6803      	ldr	r3, [r0, #0]
   254a6:	6880      	ldr	r0, [r0, #8]
   254a8:	1a18      	subs	r0, r3, r0
}
   254aa:	1a10      	subs	r0, r2, r0
   254ac:	4770      	bx	lr

000254ae <net_buf_append_bytes>:
{
   254ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   254b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   254b4:	4681      	mov	r9, r0
   254b6:	460f      	mov	r7, r1
   254b8:	4690      	mov	r8, r2
	while (buf->frags) {
   254ba:	4606      	mov	r6, r0
   254bc:	4631      	mov	r1, r6
   254be:	6836      	ldr	r6, [r6, #0]
   254c0:	2e00      	cmp	r6, #0
   254c2:	d1fb      	bne.n	254bc <net_buf_append_bytes+0xe>
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   254c4:	f101 0a08 	add.w	sl, r1, #8
   254c8:	4650      	mov	r0, sl
   254ca:	f7ff ffe8 	bl	2549e <net_buf_simple_tailroom>
   254ce:	42b8      	cmp	r0, r7
   254d0:	bf94      	ite	ls
   254d2:	b284      	uxthls	r4, r0
   254d4:	b2bc      	uxthhi	r4, r7
		net_buf_add_mem(frag, value8, count);
   254d6:	4641      	mov	r1, r8
   254d8:	4622      	mov	r2, r4
   254da:	4650      	mov	r0, sl
   254dc:	f7ff ff8c 	bl	253f8 <net_buf_simple_add_mem>
		if (len == 0) {
   254e0:	1b3f      	subs	r7, r7, r4
		added_len += count;
   254e2:	4426      	add	r6, r4
		value8 += count;
   254e4:	44a0      	add	r8, r4
		if (len == 0) {
   254e6:	d009      	beq.n	254fc <net_buf_append_bytes+0x4e>
		frag = allocate_cb(timeout, user_data);
   254e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   254ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   254ee:	47a8      	blx	r5
		if (!frag) {
   254f0:	4601      	mov	r1, r0
   254f2:	b118      	cbz	r0, 254fc <net_buf_append_bytes+0x4e>
		net_buf_frag_add(buf, frag);
   254f4:	4648      	mov	r0, r9
   254f6:	f7ff ff5c 	bl	253b2 <net_buf_frag_add>
	do {
   254fa:	e7e3      	b.n	254c4 <net_buf_append_bytes+0x16>
}
   254fc:	4630      	mov	r0, r6
   254fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00025502 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					struct device *port,
					uint32_t pins)
{
   25502:	b570      	push	{r4, r5, r6, lr}
   25504:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   25506:	6801      	ldr	r1, [r0, #0]
{
   25508:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2550a:	b189      	cbz	r1, 25530 <gpio_fire_callbacks+0x2e>
	return node->next;
   2550c:	680c      	ldr	r4, [r1, #0]
   2550e:	2c00      	cmp	r4, #0
   25510:	bf38      	it	cc
   25512:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   25514:	688a      	ldr	r2, [r1, #8]
   25516:	402a      	ands	r2, r5
   25518:	d002      	beq.n	25520 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2551a:	684b      	ldr	r3, [r1, #4]
   2551c:	4630      	mov	r0, r6
   2551e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   25520:	b134      	cbz	r4, 25530 <gpio_fire_callbacks+0x2e>
   25522:	6823      	ldr	r3, [r4, #0]
   25524:	2b00      	cmp	r3, #0
   25526:	bf38      	it	cc
   25528:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2552a:	4621      	mov	r1, r4
   2552c:	461c      	mov	r4, r3
   2552e:	e7f1      	b.n	25514 <gpio_fire_callbacks+0x12>
		}
	}
}
   25530:	bd70      	pop	{r4, r5, r6, pc}

00025532 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25532:	6843      	ldr	r3, [r0, #4]
   25534:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   25536:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2553a:	600b      	str	r3, [r1, #0]
}
   2553c:	2000      	movs	r0, #0
   2553e:	4770      	bx	lr

00025540 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25540:	6843      	ldr	r3, [r0, #4]
   25542:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   25544:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   25548:	4042      	eors	r2, r0
   2554a:	400a      	ands	r2, r1
   2554c:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2554e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   25552:	2000      	movs	r0, #0
   25554:	4770      	bx	lr

00025556 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25556:	6843      	ldr	r3, [r0, #4]
   25558:	685b      	ldr	r3, [r3, #4]
}
   2555a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2555c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   25560:	4770      	bx	lr

00025562 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25562:	6843      	ldr	r3, [r0, #4]
   25564:	685b      	ldr	r3, [r3, #4]
}
   25566:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   25568:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2556c:	4770      	bx	lr

0002556e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2556e:	6843      	ldr	r3, [r0, #4]
   25570:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   25572:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   25576:	404b      	eors	r3, r1
    p_reg->OUT = value;
   25578:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2557c:	2000      	movs	r0, #0
   2557e:	4770      	bx	lr

00025580 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25580:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   25582:	6858      	ldr	r0, [r3, #4]
{
   25584:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   25586:	b158      	cbz	r0, 255a0 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25588:	2400      	movs	r4, #0
   2558a:	4281      	cmp	r1, r0
   2558c:	d113      	bne.n	255b6 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   2558e:	6808      	ldr	r0, [r1, #0]
   25590:	b95c      	cbnz	r4, 255aa <gpio_nrfx_manage_callback+0x2a>
   25592:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   25594:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   25596:	42a1      	cmp	r1, r4
   25598:	d100      	bne.n	2559c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2559a:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2559c:	2000      	movs	r0, #0
   2559e:	6008      	str	r0, [r1, #0]
	if (set) {
   255a0:	b972      	cbnz	r2, 255c0 <gpio_nrfx_manage_callback+0x40>
	return 0;
   255a2:	2000      	movs	r0, #0
}
   255a4:	bd30      	pop	{r4, r5, pc}
   255a6:	4628      	mov	r0, r5
   255a8:	e7ef      	b.n	2558a <gpio_nrfx_manage_callback+0xa>
   255aa:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   255ac:	6898      	ldr	r0, [r3, #8]
   255ae:	4281      	cmp	r1, r0
	list->tail = node;
   255b0:	bf08      	it	eq
   255b2:	609c      	streq	r4, [r3, #8]
}
   255b4:	e7f2      	b.n	2559c <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   255b6:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   255b8:	4604      	mov	r4, r0
   255ba:	2d00      	cmp	r5, #0
   255bc:	d1f3      	bne.n	255a6 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   255be:	b13a      	cbz	r2, 255d0 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   255c0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   255c2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   255c4:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   255c6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   255c8:	2800      	cmp	r0, #0
   255ca:	d1ea      	bne.n	255a2 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   255cc:	6099      	str	r1, [r3, #8]
}
   255ce:	e7e9      	b.n	255a4 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   255d0:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   255d4:	e7e6      	b.n	255a4 <gpio_nrfx_manage_callback+0x24>

000255d6 <check_level_trigger_pins>:
{
   255d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   255d8:	68c3      	ldr	r3, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   255da:	6847      	ldr	r7, [r0, #4]
	uint32_t out = data->pin_int_en;
   255dc:	68da      	ldr	r2, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   255de:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   255e2:	4301      	orrs	r1, r0
   255e4:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   255e8:	6879      	ldr	r1, [r7, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   255ea:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   255ec:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
   255f0:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   255f2:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t bit = 1U << pin;
   255f6:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   255f8:	2600      	movs	r6, #0
	while (level_pins) {
   255fa:	b90a      	cbnz	r2, 25600 <check_level_trigger_pins+0x2a>
}
   255fc:	4620      	mov	r0, r4
   255fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
   25600:	422a      	tst	r2, r5
   25602:	d009      	beq.n	25618 <check_level_trigger_pins+0x42>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   25604:	7a3b      	ldrb	r3, [r7, #8]
   25606:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2560a:	2100      	movs	r1, #0
   2560c:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   25610:	f7f8 fd82 	bl	1e118 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   25614:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   25618:	3601      	adds	r6, #1
		bit <<= 1;
   2561a:	006d      	lsls	r5, r5, #1
   2561c:	e7ed      	b.n	255fa <check_level_trigger_pins+0x24>

0002561e <cfg_level_pins>:
{
   2561e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   25620:	68c6      	ldr	r6, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   25622:	6847      	ldr	r7, [r0, #4]
	uint32_t out = data->pin_int_en;
   25624:	68f2      	ldr	r2, [r6, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   25626:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
   2562a:	430b      	orrs	r3, r1
   2562c:	ea22 0203 	bic.w	r2, r2, r3
	uint32_t bit = 1U << pin;
   25630:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   25632:	2400      	movs	r4, #0
	while (level_pins) {
   25634:	b902      	cbnz	r2, 25638 <cfg_level_pins+0x1a>
}
   25636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (level_pins & bit) {
   25638:	4215      	tst	r5, r2
   2563a:	d00f      	beq.n	2565c <cfg_level_pins+0x3e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2563c:	6931      	ldr	r1, [r6, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2563e:	7a3b      	ldrb	r3, [r7, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   25640:	40e1      	lsrs	r1, r4
   25642:	f001 0101 	and.w	r1, r1, #1
   25646:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2564a:	f004 001f 	and.w	r0, r4, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2564e:	b2c9      	uxtb	r1, r1
   25650:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   25654:	f7f8 fd60 	bl	1e118 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   25658:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   2565c:	3401      	adds	r4, #1
		bit <<= 1;
   2565e:	006d      	lsls	r5, r5, #1
   25660:	e7e8      	b.n	25634 <cfg_level_pins+0x16>

00025662 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   25662:	68c2      	ldr	r2, [r0, #12]
{
   25664:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   25666:	e892 0003 	ldmia.w	r2, {r0, r1}
   2566a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2566e:	2000      	movs	r0, #0
   25670:	4770      	bx	lr

00025672 <uart_nrfx_irq_tx_ready_complete>:
{
   25672:	b508      	push	{r3, lr}
	return event_txdrdy_check();
   25674:	f7f8 feb8 	bl	1e3e8 <event_txdrdy_check>
}
   25678:	bd08      	pop	{r3, pc}

0002567a <uart_nrfx_irq_update>:
}
   2567a:	2001      	movs	r0, #1
   2567c:	4770      	bx	lr

0002567e <nrf_uarte_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2567e:	2300      	movs	r3, #0
   25680:	5043      	str	r3, [r0, r1]
{
   25682:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   25684:	5843      	ldr	r3, [r0, r1]
   25686:	9301      	str	r3, [sp, #4]
    (void)dummy;
   25688:	9b01      	ldr	r3, [sp, #4]
}
   2568a:	b002      	add	sp, #8
   2568c:	4770      	bx	lr

0002568e <uarte_nrfx_isr_int>:
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2568e:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   25690:	6843      	ldr	r3, [r0, #4]
   25692:	6818      	ldr	r0, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   25694:	6893      	ldr	r3, [r2, #8]
   25696:	7b99      	ldrb	r1, [r3, #14]
{
   25698:	b510      	push	{r4, lr}
	if (data->int_driven->disable_tx_irq &&
   2569a:	b159      	cbz	r1, 256b4 <uarte_nrfx_isr_int+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2569c:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
   256a0:	b141      	cbz	r1, 256b4 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   256a2:	f44f 7280 	mov.w	r2, #256	; 0x100
   256a6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   256aa:	2201      	movs	r2, #1
   256ac:	60c2      	str	r2, [r0, #12]
		data->int_driven->disable_tx_irq = false;
   256ae:	2200      	movs	r2, #0
   256b0:	739a      	strb	r2, [r3, #14]
}
   256b2:	bd10      	pop	{r4, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   256b4:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   256b8:	b11b      	cbz	r3, 256c2 <uarte_nrfx_isr_int+0x34>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ERROR);
   256ba:	f44f 7192 	mov.w	r1, #292	; 0x124
   256be:	f7ff ffde 	bl	2567e <nrf_uarte_event_clear>
	if (data->int_driven->cb) {
   256c2:	6892      	ldr	r2, [r2, #8]
   256c4:	6813      	ldr	r3, [r2, #0]
   256c6:	2b00      	cmp	r3, #0
   256c8:	d0f3      	beq.n	256b2 <uarte_nrfx_isr_int+0x24>
}
   256ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		data->int_driven->cb(data->int_driven->cb_data);
   256ce:	6850      	ldr	r0, [r2, #4]
   256d0:	4718      	bx	r3

000256d2 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   256d2:	68c2      	ldr	r2, [r0, #12]
{
   256d4:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   256d6:	e892 0003 	ldmia.w	r2, {r0, r1}
   256da:	e883 0003 	stmia.w	r3, {r0, r1}
}
   256de:	2000      	movs	r0, #0
   256e0:	4770      	bx	lr

000256e2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   256e2:	6843      	ldr	r3, [r0, #4]
   256e4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   256e6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   256ea:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   256ee:	4770      	bx	lr

000256f0 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   256f0:	6842      	ldr	r2, [r0, #4]
{
   256f2:	b508      	push	{r3, lr}
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   256f4:	68c3      	ldr	r3, [r0, #12]
	return config->uarte_regs;
   256f6:	6810      	ldr	r0, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   256f8:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   256fc:	b14a      	cbz	r2, 25712 <uarte_nrfx_poll_in+0x22>
	*c = data->rx_data;
   256fe:	7c1b      	ldrb	r3, [r3, #16]
   25700:	700b      	strb	r3, [r1, #0]
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   25702:	f44f 7188 	mov.w	r1, #272	; 0x110
   25706:	f7ff ffba 	bl	2567e <nrf_uarte_event_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2570a:	2301      	movs	r3, #1
   2570c:	6003      	str	r3, [r0, #0]
	return 0;
   2570e:	2000      	movs	r0, #0
}
   25710:	bd08      	pop	{r3, pc}
		return -1;
   25712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25716:	e7fb      	b.n	25710 <uarte_nrfx_poll_in+0x20>

00025718 <uarte_nrfx_fifo_fill>:
{
   25718:	b570      	push	{r4, r5, r6, lr}
   2571a:	460c      	mov	r4, r1
   2571c:	4611      	mov	r1, r2
	return config->uarte_regs;
   2571e:	6842      	ldr	r2, [r0, #4]
{
   25720:	4603      	mov	r3, r0
	return config->uarte_regs;
   25722:	6810      	ldr	r0, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25724:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   25728:	b1a2      	cbz	r2, 25754 <uarte_nrfx_fifo_fill+0x3c>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2572a:	68dd      	ldr	r5, [r3, #12]
	if (len > data->int_driven->tx_buff_size) {
   2572c:	68ab      	ldr	r3, [r5, #8]
   2572e:	899a      	ldrh	r2, [r3, #12]
   25730:	428a      	cmp	r2, r1
   25732:	bfa8      	it	ge
   25734:	460a      	movge	r2, r1
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);
   25736:	f44f 7190 	mov.w	r1, #288	; 0x120
   2573a:	f7ff ffa0 	bl	2567e <nrf_uarte_event_clear>
	for (int i = 0; i < len; i++) {
   2573e:	2300      	movs	r3, #0
   25740:	68a9      	ldr	r1, [r5, #8]
   25742:	4293      	cmp	r3, r2
   25744:	6889      	ldr	r1, [r1, #8]
   25746:	db07      	blt.n	25758 <uarte_nrfx_fifo_fill+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25748:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2574a:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2574e:	f8c0 2548 	str.w	r2, [r0, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25752:	6083      	str	r3, [r0, #8]
}
   25754:	4610      	mov	r0, r2
   25756:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   25758:	5ce6      	ldrb	r6, [r4, r3]
   2575a:	54ce      	strb	r6, [r1, r3]
	for (int i = 0; i < len; i++) {
   2575c:	3301      	adds	r3, #1
   2575e:	e7ef      	b.n	25740 <uarte_nrfx_fifo_fill+0x28>

00025760 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   25760:	6843      	ldr	r3, [r0, #4]
{
   25762:	4602      	mov	r2, r0
	return config->uarte_regs;
   25764:	6818      	ldr	r0, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25766:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
{
   2576a:	b510      	push	{r4, lr}
   2576c:	460c      	mov	r4, r1
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2576e:	b143      	cbz	r3, 25782 <uarte_nrfx_fifo_read+0x22>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   25770:	f44f 7188 	mov.w	r1, #272	; 0x110
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   25774:	68d2      	ldr	r2, [r2, #12]
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   25776:	f7ff ff82 	bl	2567e <nrf_uarte_event_clear>
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   2577a:	7c13      	ldrb	r3, [r2, #16]
   2577c:	7023      	strb	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2577e:	2301      	movs	r3, #1
   25780:	6003      	str	r3, [r0, #0]
	int num_rx = 0;
   25782:	4618      	mov	r0, r3
}
   25784:	bd10      	pop	{r4, pc}

00025786 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   25786:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   25788:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   2578a:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   2578c:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   2578e:	2100      	movs	r1, #0
   25790:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   25792:	f44f 7280 	mov.w	r2, #256	; 0x100
   25796:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2579a:	4770      	bx	lr

0002579c <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2579c:	68c3      	ldr	r3, [r0, #12]
   2579e:	689b      	ldr	r3, [r3, #8]
   257a0:	2201      	movs	r2, #1
   257a2:	739a      	strb	r2, [r3, #14]
}
   257a4:	4770      	bx	lr

000257a6 <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   257a6:	68c3      	ldr	r3, [r0, #12]
   257a8:	689b      	ldr	r3, [r3, #8]
   257aa:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   257ac:	b94b      	cbnz	r3, 257c2 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   257ae:	6843      	ldr	r3, [r0, #4]
   257b0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   257b2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   257b6:	b128      	cbz	r0, 257c4 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   257b8:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   257bc:	f3c0 2000 	ubfx	r0, r0, #8, #1
   257c0:	4770      	bx	lr
   257c2:	2000      	movs	r0, #0
}
   257c4:	4770      	bx	lr

000257c6 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   257c6:	6843      	ldr	r3, [r0, #4]
   257c8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   257ca:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   257ce:	3800      	subs	r0, #0
   257d0:	bf18      	it	ne
   257d2:	2001      	movne	r0, #1
   257d4:	4770      	bx	lr

000257d6 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   257d6:	6843      	ldr	r3, [r0, #4]
   257d8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   257da:	2210      	movs	r2, #16
   257dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   257e0:	4770      	bx	lr

000257e2 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   257e2:	6843      	ldr	r3, [r0, #4]
   257e4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   257e6:	2210      	movs	r2, #16
   257e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   257ec:	4770      	bx	lr

000257ee <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   257ee:	6843      	ldr	r3, [r0, #4]
   257f0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   257f2:	f44f 7200 	mov.w	r2, #512	; 0x200
   257f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   257fa:	4770      	bx	lr

000257fc <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   257fc:	6843      	ldr	r3, [r0, #4]
   257fe:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   25800:	f44f 7200 	mov.w	r2, #512	; 0x200
   25804:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   25808:	4770      	bx	lr

0002580a <uarte_nrfx_irq_update>:
}
   2580a:	2001      	movs	r0, #1
   2580c:	4770      	bx	lr

0002580e <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2580e:	68c3      	ldr	r3, [r0, #12]
   25810:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   25812:	e9c3 1200 	strd	r1, r2, [r3]
}
   25816:	4770      	bx	lr

00025818 <uarte_nrfx_irq_is_pending>:
{
   25818:	b508      	push	{r3, lr}
	return config->uarte_regs;
   2581a:	6843      	ldr	r3, [r0, #4]
   2581c:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   2581e:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   25822:	05db      	lsls	r3, r3, #23
{
   25824:	4602      	mov	r2, r0
		||
   25826:	d405      	bmi.n	25834 <uarte_nrfx_irq_is_pending+0x1c>
   25828:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   2582c:	f010 0010 	ands.w	r0, r0, #16
   25830:	d106      	bne.n	25840 <uarte_nrfx_irq_is_pending+0x28>
}
   25832:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   25834:	f7ff ffb7 	bl	257a6 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   25838:	2800      	cmp	r0, #0
   2583a:	d0f5      	beq.n	25828 <uarte_nrfx_irq_is_pending+0x10>
		||
   2583c:	2001      	movs	r0, #1
   2583e:	e7f8      	b.n	25832 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   25840:	4610      	mov	r0, r2
   25842:	f7ff ffc0 	bl	257c6 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   25846:	3800      	subs	r0, #0
   25848:	bf18      	it	ne
   2584a:	2001      	movne	r0, #1
   2584c:	e7f1      	b.n	25832 <uarte_nrfx_irq_is_pending+0x1a>

0002584e <uarte_nrfx_poll_out>:
{
   2584e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   25852:	6843      	ldr	r3, [r0, #4]
{
   25854:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   25858:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2585a:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   2585c:	f000 fb03 	bl	25e66 <k_is_in_isr>
   25860:	bbb8      	cbnz	r0, 258d2 <uarte_nrfx_poll_out+0x84>
   25862:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   25864:	f106 070c 	add.w	r7, r6, #12
   25868:	f04f 0801 	mov.w	r8, #1
   2586c:	f3bf 8f5b 	dmb	ish
   25870:	e857 3f00 	ldrex	r3, [r7]
   25874:	2b00      	cmp	r3, #0
   25876:	d103      	bne.n	25880 <uarte_nrfx_poll_out+0x32>
   25878:	e847 8200 	strex	r2, r8, [r7]
   2587c:	2a00      	cmp	r2, #0
   2587e:	d1f7      	bne.n	25870 <uarte_nrfx_poll_out+0x22>
   25880:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   25884:	d007      	beq.n	25896 <uarte_nrfx_poll_out+0x48>
	return z_impl_k_sleep(timeout);
   25886:	2021      	movs	r0, #33	; 0x21
   25888:	2100      	movs	r1, #0
   2588a:	3d01      	subs	r5, #1
   2588c:	f7fa f9c0 	bl	1fc10 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   25890:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   25894:	d1ea      	bne.n	2586c <uarte_nrfx_poll_out+0x1e>
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);
   25896:	f44f 7190 	mov.w	r1, #288	; 0x120
   2589a:	4620      	mov	r0, r4
   2589c:	f7ff feef 	bl	2567e <nrf_uarte_event_clear>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   258a0:	f10d 0307 	add.w	r3, sp, #7
   258a4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   258a8:	2301      	movs	r3, #1
   258aa:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   258ae:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   258b2:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   258b4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   258b8:	b923      	cbnz	r3, 258c4 <uarte_nrfx_poll_out+0x76>
   258ba:	2001      	movs	r0, #1
   258bc:	f000 f80c 	bl	258d8 <nrfx_busy_wait>
   258c0:	3d01      	subs	r5, #1
   258c2:	d1f7      	bne.n	258b4 <uarte_nrfx_poll_out+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   258c4:	2301      	movs	r3, #1
   258c6:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   258c8:	2300      	movs	r3, #0
   258ca:	60f3      	str	r3, [r6, #12]
}
   258cc:	b002      	add	sp, #8
   258ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   258d2:	2301      	movs	r3, #1
   258d4:	60f3      	str	r3, [r6, #12]
   258d6:	e7de      	b.n	25896 <uarte_nrfx_poll_out+0x48>

000258d8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   258d8:	f000 bacb 	b.w	25e72 <z_impl_k_busy_wait>

000258dc <device_busy_set>:
	atomic_set_bit((atomic_t *) __device_busy_start,
		       (busy_dev - __device_start));
#else
	ARG_UNUSED(busy_dev);
#endif
}
   258dc:	4770      	bx	lr

000258de <device_busy_clear>:
   258de:	4770      	bx	lr

000258e0 <arch_system_halt>:
	__asm__ volatile(
   258e0:	f04f 0220 	mov.w	r2, #32
   258e4:	f3ef 8311 	mrs	r3, BASEPRI
   258e8:	f382 8811 	msr	BASEPRI, r2
   258ec:	f3bf 8f6f 	isb	sy
	for (;;) {
   258f0:	e7fe      	b.n	258f0 <arch_system_halt+0x10>

000258f2 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   258f2:	f7fb bdf7 	b.w	214e4 <z_clock_idle_exit>

000258f6 <k_heap_init>:
{
   258f6:	b410      	push	{r4}
   258f8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   258fc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   25900:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   25902:	f7fb b8c7 	b.w	20a94 <sys_heap_init>

00025906 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   25906:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2590a:	4604      	mov	r4, r0
   2590c:	b085      	sub	sp, #20
   2590e:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   25910:	4610      	mov	r0, r2
   25912:	4619      	mov	r1, r3
   25914:	f000 fb7d 	bl	26012 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   25918:	f104 0a14 	add.w	sl, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   2591c:	4605      	mov	r5, r0
   2591e:	460f      	mov	r7, r1
   25920:	f04f 0220 	mov.w	r2, #32
   25924:	f3ef 8311 	mrs	r3, BASEPRI
   25928:	f382 8811 	msr	BASEPRI, r2
   2592c:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   25930:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   25934:	4631      	mov	r1, r6
   25936:	4620      	mov	r0, r4
   25938:	9303      	str	r3, [sp, #12]
   2593a:	f7fb f88d 	bl	20a58 <sys_heap_alloc>
   2593e:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
   25940:	f7fa fc3e 	bl	201c0 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   25944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   25948:	b13a      	cbz	r2, 2595a <k_heap_alloc+0x54>
	__asm__ volatile(
   2594a:	f383 8811 	msr	BASEPRI, r3
   2594e:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   25952:	4610      	mov	r0, r2
   25954:	b005      	add	sp, #20
   25956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   2595a:	ebb5 0800 	subs.w	r8, r5, r0
   2595e:	eb67 0901 	sbc.w	r9, r7, r1
   25962:	f1b8 0f01 	cmp.w	r8, #1
   25966:	f179 0100 	sbcs.w	r1, r9, #0
   2596a:	dbee      	blt.n	2594a <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2596c:	e9cd 8900 	strd	r8, r9, [sp]
   25970:	465a      	mov	r2, fp
   25972:	4619      	mov	r1, r3
   25974:	4650      	mov	r0, sl
   25976:	f7fa f899 	bl	1faac <z_pend_curr>
	__asm__ volatile(
   2597a:	f04f 0220 	mov.w	r2, #32
   2597e:	f3ef 8311 	mrs	r3, BASEPRI
   25982:	f382 8811 	msr	BASEPRI, r2
   25986:	f3bf 8f6f 	isb	sy
   2598a:	e7d3      	b.n	25934 <k_heap_alloc+0x2e>

0002598c <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   2598c:	b538      	push	{r3, r4, r5, lr}
   2598e:	4604      	mov	r4, r0
   25990:	f04f 0320 	mov.w	r3, #32
   25994:	f3ef 8511 	mrs	r5, BASEPRI
   25998:	f383 8811 	msr	BASEPRI, r3
   2599c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   259a0:	f7fb f84a 	bl	20a38 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   259a4:	f104 000c 	add.w	r0, r4, #12
   259a8:	f000 fa3d 	bl	25e26 <z_unpend_all>
   259ac:	b130      	cbz	r0, 259bc <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   259ae:	4629      	mov	r1, r5
   259b0:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   259b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   259b8:	f000 b94a 	b.w	25c50 <z_reschedule>
	__asm__ volatile(
   259bc:	f385 8811 	msr	BASEPRI, r5
   259c0:	f3bf 8f6f 	isb	sy
}
   259c4:	bd38      	pop	{r3, r4, r5, pc}

000259c6 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   259c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   259c8:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	block->id.heap = p->heap;
   259cc:	6800      	ldr	r0, [r0, #0]
   259ce:	6048      	str	r0, [r1, #4]
{
   259d0:	4614      	mov	r4, r2
   259d2:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
   259d4:	4632      	mov	r2, r6
   259d6:	463b      	mov	r3, r7
   259d8:	4621      	mov	r1, r4
   259da:	f7ff ff94 	bl	25906 <k_heap_alloc>
   259de:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   259e0:	b144      	cbz	r4, 259f4 <k_mem_pool_alloc+0x2e>
   259e2:	b938      	cbnz	r0, 259f4 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   259e4:	ea56 0307 	orrs.w	r3, r6, r7
   259e8:	bf0c      	ite	eq
   259ea:	f06f 000b 	mvneq.w	r0, #11
   259ee:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   259f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   259f4:	2000      	movs	r0, #0
   259f6:	e7fc      	b.n	259f2 <k_mem_pool_alloc+0x2c>

000259f8 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   259f8:	e9d0 1000 	ldrd	r1, r0, [r0]
   259fc:	f7ff bfc6 	b.w	2598c <k_heap_free>

00025a00 <k_mem_slab_init>:
{
   25a00:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   25a02:	2400      	movs	r4, #0
   25a04:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   25a06:	ea41 0402 	orr.w	r4, r1, r2
   25a0a:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   25a0e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   25a12:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   25a14:	d10c      	bne.n	25a30 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   25a16:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   25a18:	42a3      	cmp	r3, r4
   25a1a:	d103      	bne.n	25a24 <k_mem_slab_init+0x24>
   25a1c:	e9c0 0000 	strd	r0, r0, [r0]
}
   25a20:	2000      	movs	r0, #0
}
   25a22:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   25a24:	6945      	ldr	r5, [r0, #20]
   25a26:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   25a28:	3401      	adds	r4, #1
		slab->free_list = p;
   25a2a:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   25a2c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   25a2e:	e7f3      	b.n	25a18 <k_mem_slab_init+0x18>
		return -EINVAL;
   25a30:	f06f 0015 	mvn.w	r0, #21
	return rc;
   25a34:	e7f5      	b.n	25a22 <k_mem_slab_init+0x22>

00025a36 <k_mem_pool_malloc>:
{
   25a36:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   25a38:	2408      	movs	r4, #8
   25a3a:	190a      	adds	r2, r1, r4
   25a3c:	d208      	bcs.n	25a50 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   25a3e:	2600      	movs	r6, #0
   25a40:	2700      	movs	r7, #0
   25a42:	e9cd 6700 	strd	r6, r7, [sp]
   25a46:	eb0d 0104 	add.w	r1, sp, r4
   25a4a:	f7ff ffbc 	bl	259c6 <k_mem_pool_alloc>
   25a4e:	b110      	cbz	r0, 25a56 <k_mem_pool_malloc+0x20>
		return NULL;
   25a50:	2000      	movs	r0, #0
}
   25a52:	b004      	add	sp, #16
   25a54:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   25a56:	9802      	ldr	r0, [sp, #8]
   25a58:	4622      	mov	r2, r4
   25a5a:	a902      	add	r1, sp, #8
   25a5c:	f7fc fe60 	bl	22720 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   25a60:	9802      	ldr	r0, [sp, #8]
   25a62:	3008      	adds	r0, #8
   25a64:	e7f5      	b.n	25a52 <k_mem_pool_malloc+0x1c>

00025a66 <k_free>:
	if (ptr != NULL) {
   25a66:	b110      	cbz	r0, 25a6e <k_free+0x8>
		k_mem_pool_free_id(ptr);
   25a68:	3808      	subs	r0, #8
   25a6a:	f7ff bfc5 	b.w	259f8 <k_mem_pool_free_id>
}
   25a6e:	4770      	bx	lr

00025a70 <queue_insert>:
{
   25a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25a74:	4604      	mov	r4, r0
   25a76:	460d      	mov	r5, r1
   25a78:	4690      	mov	r8, r2
   25a7a:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25a7c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   25a80:	f04f 0320 	mov.w	r3, #32
   25a84:	f3ef 8711 	mrs	r7, BASEPRI
   25a88:	f383 8811 	msr	BASEPRI, r3
   25a8c:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   25a90:	4630      	mov	r0, r6
   25a92:	f000 f99b 	bl	25dcc <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   25a96:	b158      	cbz	r0, 25ab0 <queue_insert+0x40>
   25a98:	2400      	movs	r4, #0
   25a9a:	6784      	str	r4, [r0, #120]	; 0x78
   25a9c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   25aa0:	f000 f91e 	bl	25ce0 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   25aa4:	4630      	mov	r0, r6
   25aa6:	4639      	mov	r1, r7
   25aa8:	f000 f8d2 	bl	25c50 <z_reschedule>
	return 0;
   25aac:	2000      	movs	r0, #0
   25aae:	e00c      	b.n	25aca <queue_insert+0x5a>
	if (alloc) {
   25ab0:	f1b9 0f00 	cmp.w	r9, #0
   25ab4:	d01b      	beq.n	25aee <queue_insert+0x7e>
		anode = z_thread_malloc(sizeof(*anode));
   25ab6:	2008      	movs	r0, #8
   25ab8:	f7f9 fc78 	bl	1f3ac <z_thread_malloc>
		if (anode == NULL) {
   25abc:	b938      	cbnz	r0, 25ace <queue_insert+0x5e>
	__asm__ volatile(
   25abe:	f387 8811 	msr	BASEPRI, r7
   25ac2:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   25ac6:	f06f 000b 	mvn.w	r0, #11
}
   25aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   25ace:	2301      	movs	r3, #1
		anode->data = data;
   25ad0:	f8c0 8004 	str.w	r8, [r0, #4]
   25ad4:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   25ad6:	6803      	ldr	r3, [r0, #0]
   25ad8:	f003 0203 	and.w	r2, r3, #3
   25adc:	b95d      	cbnz	r5, 25af6 <queue_insert+0x86>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25ade:	6823      	ldr	r3, [r4, #0]
   25ae0:	4313      	orrs	r3, r2
   25ae2:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25ae4:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   25ae6:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25ae8:	b973      	cbnz	r3, 25b08 <queue_insert+0x98>
	list->tail = node;
   25aea:	6060      	str	r0, [r4, #4]
}
   25aec:	e00c      	b.n	25b08 <queue_insert+0x98>
	node->next_and_flags = flags;
   25aee:	f8c8 9000 	str.w	r9, [r8]
}
   25af2:	4640      	mov	r0, r8
   25af4:	e7ef      	b.n	25ad6 <queue_insert+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25af6:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   25af8:	f033 0303 	bics.w	r3, r3, #3
   25afc:	d110      	bne.n	25b20 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25afe:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   25b00:	6862      	ldr	r2, [r4, #4]
   25b02:	b93a      	cbnz	r2, 25b14 <queue_insert+0xa4>
	list->head = node;
   25b04:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   25b08:	2104      	movs	r1, #4
   25b0a:	f104 0010 	add.w	r0, r4, #16
   25b0e:	f000 fbe7 	bl	262e0 <z_handle_obj_poll_events>
   25b12:	e7c7      	b.n	25aa4 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25b14:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25b16:	f003 0303 	and.w	r3, r3, #3
   25b1a:	4303      	orrs	r3, r0
   25b1c:	6013      	str	r3, [r2, #0]
   25b1e:	e7e4      	b.n	25aea <queue_insert+0x7a>
   25b20:	4313      	orrs	r3, r2
   25b22:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25b24:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25b26:	f003 0303 	and.w	r3, r3, #3
   25b2a:	4303      	orrs	r3, r0
   25b2c:	602b      	str	r3, [r5, #0]
}
   25b2e:	e7eb      	b.n	25b08 <queue_insert+0x98>

00025b30 <z_queue_node_peek>:
{
   25b30:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   25b32:	4604      	mov	r4, r0
   25b34:	b130      	cbz	r0, 25b44 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25b36:	6802      	ldr	r2, [r0, #0]
   25b38:	0793      	lsls	r3, r2, #30
   25b3a:	d003      	beq.n	25b44 <z_queue_node_peek+0x14>
		ret = anode->data;
   25b3c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   25b3e:	b109      	cbz	r1, 25b44 <z_queue_node_peek+0x14>
			k_free(anode);
   25b40:	f7ff ff91 	bl	25a66 <k_free>
}
   25b44:	4620      	mov	r0, r4
   25b46:	bd10      	pop	{r4, pc}

00025b48 <z_impl_k_queue_init>:
	list->head = NULL;
   25b48:	2300      	movs	r3, #0
	list->tail = NULL;
   25b4a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   25b4e:	f100 0308 	add.w	r3, r0, #8
   25b52:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   25b56:	f100 0310 	add.w	r3, r0, #16
   25b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   25b5e:	4770      	bx	lr

00025b60 <k_queue_append>:
{
   25b60:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   25b62:	2300      	movs	r3, #0
   25b64:	6841      	ldr	r1, [r0, #4]
   25b66:	f7ff bf83 	b.w	25a70 <queue_insert>

00025b6a <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   25b6a:	2300      	movs	r3, #0
{
   25b6c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
   25b6e:	4619      	mov	r1, r3
   25b70:	f7ff bf7e 	b.w	25a70 <queue_insert>

00025b74 <k_queue_append_list>:
{
   25b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25b78:	4605      	mov	r5, r0
   25b7a:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   25b7c:	460c      	mov	r4, r1
   25b7e:	b391      	cbz	r1, 25be6 <k_queue_append_list+0x72>
   25b80:	b38a      	cbz	r2, 25be6 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25b82:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   25b86:	f04f 0320 	mov.w	r3, #32
   25b8a:	f3ef 8811 	mrs	r8, BASEPRI
   25b8e:	f383 8811 	msr	BASEPRI, r3
   25b92:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   25b96:	4638      	mov	r0, r7
   25b98:	f000 f918 	bl	25dcc <z_unpend_first_thread>
   25b9c:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   25ba0:	b920      	cbnz	r0, 25bac <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   25ba2:	686b      	ldr	r3, [r5, #4]
   25ba4:	b9cb      	cbnz	r3, 25bda <k_queue_append_list+0x66>
	list->head = node;
   25ba6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   25ba8:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   25baa:	e00a      	b.n	25bc2 <k_queue_append_list+0x4e>
   25bac:	6144      	str	r4, [r0, #20]
   25bae:	f8c0 9078 	str.w	r9, [r0, #120]	; 0x78
	z_ready_thread(thread);
   25bb2:	f000 f895 	bl	25ce0 <z_ready_thread>
		head = *(void **)head;
   25bb6:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   25bb8:	4638      	mov	r0, r7
   25bba:	f000 f907 	bl	25dcc <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   25bbe:	2c00      	cmp	r4, #0
   25bc0:	d1ee      	bne.n	25ba0 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   25bc2:	2104      	movs	r1, #4
   25bc4:	f105 0010 	add.w	r0, r5, #16
   25bc8:	f000 fb8a 	bl	262e0 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   25bcc:	4638      	mov	r0, r7
   25bce:	4641      	mov	r1, r8
   25bd0:	f000 f83e 	bl	25c50 <z_reschedule>
	return 0;
   25bd4:	2000      	movs	r0, #0
}
   25bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25bda:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25bdc:	f001 0103 	and.w	r1, r1, #3
   25be0:	430c      	orrs	r4, r1
   25be2:	601c      	str	r4, [r3, #0]
}
   25be4:	e7e0      	b.n	25ba8 <k_queue_append_list+0x34>
		return -EINVAL;
   25be6:	f06f 0015 	mvn.w	r0, #21
   25bea:	e7f4      	b.n	25bd6 <k_queue_append_list+0x62>

00025bec <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   25bec:	f990 000e 	ldrsb.w	r0, [r0, #14]
   25bf0:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   25bf4:	4298      	cmp	r0, r3
   25bf6:	bfac      	ite	ge
   25bf8:	2000      	movge	r0, #0
   25bfa:	2001      	movlt	r0, #1
   25bfc:	4770      	bx	lr

00025bfe <z_find_first_thread_to_unpend>:
{
   25bfe:	b510      	push	{r4, lr}
   25c00:	f04f 0320 	mov.w	r3, #32
   25c04:	f3ef 8411 	mrs	r4, BASEPRI
   25c08:	f383 8811 	msr	BASEPRI, r3
   25c0c:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   25c10:	f000 f85c 	bl	25ccc <z_priq_dumb_best>
	__asm__ volatile(
   25c14:	f384 8811 	msr	BASEPRI, r4
   25c18:	f3bf 8f6f 	isb	sy
}
   25c1c:	bd10      	pop	{r4, pc}

00025c1e <z_unpend_thread_no_timeout>:
{
   25c1e:	b538      	push	{r3, r4, r5, lr}
   25c20:	4604      	mov	r4, r0
	__asm__ volatile(
   25c22:	f04f 0320 	mov.w	r3, #32
   25c26:	f3ef 8511 	mrs	r5, BASEPRI
   25c2a:	f383 8811 	msr	BASEPRI, r3
   25c2e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25c32:	4601      	mov	r1, r0
   25c34:	6880      	ldr	r0, [r0, #8]
   25c36:	f7f9 fd17 	bl	1f668 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25c3a:	7b63      	ldrb	r3, [r4, #13]
   25c3c:	f023 0302 	bic.w	r3, r3, #2
   25c40:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   25c42:	2300      	movs	r3, #0
   25c44:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   25c46:	f385 8811 	msr	BASEPRI, r5
   25c4a:	f3bf 8f6f 	isb	sy
}
   25c4e:	bd38      	pop	{r3, r4, r5, pc}

00025c50 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25c50:	b921      	cbnz	r1, 25c5c <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25c52:	f3ef 8005 	mrs	r0, IPSR
   25c56:	b908      	cbnz	r0, 25c5c <z_reschedule+0xc>
   25c58:	f7e0 bdba 	b.w	67d0 <arch_swap>
   25c5c:	f381 8811 	msr	BASEPRI, r1
   25c60:	f3bf 8f6f 	isb	sy
}
   25c64:	4770      	bx	lr

00025c66 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25c66:	4603      	mov	r3, r0
   25c68:	b920      	cbnz	r0, 25c74 <z_reschedule_irqlock+0xe>
   25c6a:	f3ef 8205 	mrs	r2, IPSR
   25c6e:	b90a      	cbnz	r2, 25c74 <z_reschedule_irqlock+0xe>
   25c70:	f7e0 bdae 	b.w	67d0 <arch_swap>
   25c74:	f383 8811 	msr	BASEPRI, r3
   25c78:	f3bf 8f6f 	isb	sy
}
   25c7c:	4770      	bx	lr

00025c7e <z_reschedule_unlocked>:
	__asm__ volatile(
   25c7e:	f04f 0320 	mov.w	r3, #32
   25c82:	f3ef 8011 	mrs	r0, BASEPRI
   25c86:	f383 8811 	msr	BASEPRI, r3
   25c8a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   25c8e:	f7ff bfea 	b.w	25c66 <z_reschedule_irqlock>

00025c92 <z_unpend_thread>:
{
   25c92:	b510      	push	{r4, lr}
   25c94:	4601      	mov	r1, r0
   25c96:	f04f 0320 	mov.w	r3, #32
   25c9a:	f3ef 8411 	mrs	r4, BASEPRI
   25c9e:	f383 8811 	msr	BASEPRI, r3
   25ca2:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25ca6:	6880      	ldr	r0, [r0, #8]
   25ca8:	f7f9 fcde 	bl	1f668 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25cac:	7b4b      	ldrb	r3, [r1, #13]
   25cae:	f023 0302 	bic.w	r3, r3, #2
   25cb2:	734b      	strb	r3, [r1, #13]
		thread->base.pended_on = NULL;
   25cb4:	2300      	movs	r3, #0
   25cb6:	608b      	str	r3, [r1, #8]
	__asm__ volatile(
   25cb8:	f384 8811 	msr	BASEPRI, r4
   25cbc:	f3bf 8f6f 	isb	sy
}
   25cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
   25cc4:	f101 0018 	add.w	r0, r1, #24
   25cc8:	f000 b95d 	b.w	25f86 <z_abort_timeout>

00025ccc <z_priq_dumb_best>:
{
   25ccc:	4603      	mov	r3, r0
	return list->head == list;
   25cce:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25cd0:	4283      	cmp	r3, r0
   25cd2:	d003      	beq.n	25cdc <z_priq_dumb_best+0x10>
	if (n != NULL) {
   25cd4:	2800      	cmp	r0, #0
   25cd6:	bf38      	it	cc
   25cd8:	2000      	movcc	r0, #0
   25cda:	4770      	bx	lr
	struct k_thread *thread = NULL;
   25cdc:	2000      	movs	r0, #0
}
   25cde:	4770      	bx	lr

00025ce0 <z_ready_thread>:
{
   25ce0:	b510      	push	{r4, lr}
	__asm__ volatile(
   25ce2:	f04f 0320 	mov.w	r3, #32
   25ce6:	f3ef 8411 	mrs	r4, BASEPRI
   25cea:	f383 8811 	msr	BASEPRI, r3
   25cee:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   25cf2:	f7f9 fd0f 	bl	1f714 <ready_thread>
	__asm__ volatile(
   25cf6:	f384 8811 	msr	BASEPRI, r4
   25cfa:	f3bf 8f6f 	isb	sy
}
   25cfe:	bd10      	pop	{r4, pc}

00025d00 <z_thread_timeout>:
{
   25d00:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   25d02:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   25d06:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   25d08:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   25d0c:	b1c3      	cbz	r3, 25d40 <z_thread_timeout+0x40>
	__asm__ volatile(
   25d0e:	f04f 0320 	mov.w	r3, #32
   25d12:	f3ef 8511 	mrs	r5, BASEPRI
   25d16:	f383 8811 	msr	BASEPRI, r3
   25d1a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25d1e:	f850 0c10 	ldr.w	r0, [r0, #-16]
   25d22:	f7f9 fca1 	bl	1f668 <z_priq_dumb_remove>
   25d26:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   25d2a:	f023 0302 	bic.w	r3, r3, #2
   25d2e:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   25d32:	2300      	movs	r3, #0
   25d34:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   25d38:	f385 8811 	msr	BASEPRI, r5
   25d3c:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   25d40:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   25d44:	f023 0314 	bic.w	r3, r3, #20
   25d48:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   25d4c:	4608      	mov	r0, r1
}
   25d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   25d52:	f7ff bfc5 	b.w	25ce0 <z_ready_thread>

00025d56 <z_remove_thread_from_ready_q>:
{
   25d56:	b510      	push	{r4, lr}
	__asm__ volatile(
   25d58:	f04f 0320 	mov.w	r3, #32
   25d5c:	f3ef 8411 	mrs	r4, BASEPRI
   25d60:	f383 8811 	msr	BASEPRI, r3
   25d64:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   25d68:	f7f9 fe32 	bl	1f9d0 <unready_thread>
	__asm__ volatile(
   25d6c:	f384 8811 	msr	BASEPRI, r4
   25d70:	f3bf 8f6f 	isb	sy
}
   25d74:	bd10      	pop	{r4, pc}

00025d76 <add_to_waitq_locked>:
{
   25d76:	b538      	push	{r3, r4, r5, lr}
   25d78:	4604      	mov	r4, r0
   25d7a:	460d      	mov	r5, r1
	unready_thread(thread);
   25d7c:	f7f9 fe28 	bl	1f9d0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   25d80:	7b63      	ldrb	r3, [r4, #13]
   25d82:	f043 0302 	orr.w	r3, r3, #2
   25d86:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   25d88:	b1c5      	cbz	r5, 25dbc <add_to_waitq_locked+0x46>
	return list->head == list;
   25d8a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   25d8c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25d8e:	429d      	cmp	r5, r3
   25d90:	bf08      	it	eq
   25d92:	2300      	moveq	r3, #0
   25d94:	2b00      	cmp	r3, #0
   25d96:	bf38      	it	cc
   25d98:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25d9a:	b183      	cbz	r3, 25dbe <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   25d9c:	f994 100e 	ldrsb.w	r1, [r4, #14]
   25da0:	f993 200e 	ldrsb.w	r2, [r3, #14]
   25da4:	4291      	cmp	r1, r2
   25da6:	db04      	blt.n	25db2 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   25da8:	686a      	ldr	r2, [r5, #4]
   25daa:	429a      	cmp	r2, r3
   25dac:	d007      	beq.n	25dbe <add_to_waitq_locked+0x48>
   25dae:	681b      	ldr	r3, [r3, #0]
   25db0:	e7f3      	b.n	25d9a <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   25db2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25db4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   25db8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   25dba:	605c      	str	r4, [r3, #4]
}
   25dbc:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   25dbe:	686b      	ldr	r3, [r5, #4]
   25dc0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   25dc2:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   25dc4:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   25dc6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25dc8:	606c      	str	r4, [r5, #4]
   25dca:	e7f7      	b.n	25dbc <add_to_waitq_locked+0x46>

00025dcc <z_unpend_first_thread>:
{
   25dcc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   25dce:	f04f 0320 	mov.w	r3, #32
   25dd2:	f3ef 8211 	mrs	r2, BASEPRI
   25dd6:	f383 8811 	msr	BASEPRI, r3
   25dda:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   25dde:	f7ff ff75 	bl	25ccc <z_priq_dumb_best>
   25de2:	4604      	mov	r4, r0
	__asm__ volatile(
   25de4:	f382 8811 	msr	BASEPRI, r2
   25de8:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   25dec:	b1c8      	cbz	r0, 25e22 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   25dee:	f04f 0320 	mov.w	r3, #32
   25df2:	f3ef 8511 	mrs	r5, BASEPRI
   25df6:	f383 8811 	msr	BASEPRI, r3
   25dfa:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25dfe:	4601      	mov	r1, r0
   25e00:	6880      	ldr	r0, [r0, #8]
   25e02:	f7f9 fc31 	bl	1f668 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25e06:	7b63      	ldrb	r3, [r4, #13]
   25e08:	f023 0302 	bic.w	r3, r3, #2
   25e0c:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   25e0e:	2300      	movs	r3, #0
   25e10:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   25e12:	f385 8811 	msr	BASEPRI, r5
   25e16:	f3bf 8f6f 	isb	sy
   25e1a:	f104 0018 	add.w	r0, r4, #24
   25e1e:	f000 f8b2 	bl	25f86 <z_abort_timeout>
}
   25e22:	4620      	mov	r0, r4
   25e24:	bd38      	pop	{r3, r4, r5, pc}

00025e26 <z_unpend_all>:
{
   25e26:	b538      	push	{r3, r4, r5, lr}
   25e28:	4605      	mov	r5, r0
	int need_sched = 0;
   25e2a:	2000      	movs	r0, #0
	return list->head == list;
   25e2c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25e2e:	42a5      	cmp	r5, r4
   25e30:	d000      	beq.n	25e34 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   25e32:	b904      	cbnz	r4, 25e36 <z_unpend_all+0x10>
}
   25e34:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   25e36:	4620      	mov	r0, r4
   25e38:	f7ff ff2b 	bl	25c92 <z_unpend_thread>
		z_ready_thread(thread);
   25e3c:	4620      	mov	r0, r4
   25e3e:	f7ff ff4f 	bl	25ce0 <z_ready_thread>
		need_sched = 1;
   25e42:	2001      	movs	r0, #1
   25e44:	e7f2      	b.n	25e2c <z_unpend_all+0x6>

00025e46 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   25e46:	b15a      	cbz	r2, 25e60 <z_impl_k_sem_init+0x1a>
   25e48:	428a      	cmp	r2, r1
   25e4a:	d309      	bcc.n	25e60 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   25e4c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   25e50:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   25e54:	e9c0 0000 	strd	r0, r0, [r0]
   25e58:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   25e5c:	2000      	movs	r0, #0
   25e5e:	4770      	bx	lr
		return -EINVAL;
   25e60:	f06f 0015 	mvn.w	r0, #21
}
   25e64:	4770      	bx	lr

00025e66 <k_is_in_isr>:
   25e66:	f3ef 8005 	mrs	r0, IPSR
}
   25e6a:	3800      	subs	r0, #0
   25e6c:	bf18      	it	ne
   25e6e:	2001      	movne	r0, #1
   25e70:	4770      	bx	lr

00025e72 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   25e72:	f7e1 b967 	b.w	7144 <arch_busy_wait>

00025e76 <z_impl_k_thread_name_set>:
}
   25e76:	f06f 0046 	mvn.w	r0, #70	; 0x46
   25e7a:	4770      	bx	lr

00025e7c <k_thread_name_get>:
}
   25e7c:	2000      	movs	r0, #0
   25e7e:	4770      	bx	lr

00025e80 <k_work_submit_to_queue>:
{
   25e80:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25e82:	f101 0308 	add.w	r3, r1, #8
   25e86:	f3bf 8f5b 	dmb	ish
   25e8a:	e853 2f00 	ldrex	r2, [r3]
   25e8e:	f042 0c01 	orr.w	ip, r2, #1
   25e92:	e843 ce00 	strex	lr, ip, [r3]
   25e96:	f1be 0f00 	cmp.w	lr, #0
   25e9a:	d1f6      	bne.n	25e8a <k_work_submit_to_queue+0xa>
   25e9c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   25ea0:	07d3      	lsls	r3, r2, #31
   25ea2:	d403      	bmi.n	25eac <k_work_submit_to_queue+0x2c>
}
   25ea4:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   25ea8:	f7ff be5a 	b.w	25b60 <k_queue_append>
}
   25eac:	f85d fb04 	ldr.w	pc, [sp], #4

00025eb0 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   25eb0:	f1a0 0110 	sub.w	r1, r0, #16
   25eb4:	6980      	ldr	r0, [r0, #24]
   25eb6:	f7ff bfe3 	b.w	25e80 <k_work_submit_to_queue>

00025eba <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   25eba:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   25ebc:	b570      	push	{r4, r5, r6, lr}
   25ebe:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   25ec0:	b913      	cbnz	r3, 25ec8 <work_cancel+0xe>
		return -EALREADY;
   25ec2:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   25ec6:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25ec8:	f3bf 8f5b 	dmb	ish
   25ecc:	6883      	ldr	r3, [r0, #8]
   25ece:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   25ed2:	07db      	lsls	r3, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   25ed4:	f100 0508 	add.w	r5, r0, #8
   25ed8:	d532      	bpl.n	25f40 <work_cancel+0x86>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   25eda:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   25edc:	6813      	ldr	r3, [r2, #0]
   25ede:	2100      	movs	r1, #0
   25ee0:	b913      	cbnz	r3, 25ee8 <work_cancel+0x2e>
			return -EINVAL;
   25ee2:	f06f 0015 	mvn.w	r0, #21
   25ee6:	e7ee      	b.n	25ec6 <work_cancel+0xc>
   25ee8:	429c      	cmp	r4, r3
   25eea:	d124      	bne.n	25f36 <work_cancel+0x7c>
Z_GENLIST_REMOVE(sflist, sfnode)
   25eec:	6823      	ldr	r3, [r4, #0]
   25eee:	6856      	ldr	r6, [r2, #4]
   25ef0:	f023 0003 	bic.w	r0, r3, #3
   25ef4:	b9b1      	cbnz	r1, 25f24 <work_cancel+0x6a>
   25ef6:	42b4      	cmp	r4, r6
	list->head = node;
   25ef8:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   25efa:	d100      	bne.n	25efe <work_cancel+0x44>
	list->tail = node;
   25efc:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25efe:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25f00:	f003 0303 	and.w	r3, r3, #3
   25f04:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   25f06:	2000      	movs	r0, #0
   25f08:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25f0a:	f3bf 8f5b 	dmb	ish
   25f0e:	e855 3f00 	ldrex	r3, [r5]
   25f12:	f023 0301 	bic.w	r3, r3, #1
   25f16:	e845 3200 	strex	r2, r3, [r5]
   25f1a:	2a00      	cmp	r2, #0
   25f1c:	d1f7      	bne.n	25f0e <work_cancel+0x54>
   25f1e:	f3bf 8f5b 	dmb	ish
   25f22:	e7d0      	b.n	25ec6 <work_cancel+0xc>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25f24:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25f26:	f003 0303 	and.w	r3, r3, #3
   25f2a:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   25f2c:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   25f2e:	600b      	str	r3, [r1, #0]
	list->tail = node;
   25f30:	bf08      	it	eq
   25f32:	6051      	streq	r1, [r2, #4]
}
   25f34:	e7e3      	b.n	25efe <work_cancel+0x44>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25f36:	6818      	ldr	r0, [r3, #0]
   25f38:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   25f3a:	f020 0303 	bic.w	r3, r0, #3
   25f3e:	e7cf      	b.n	25ee0 <work_cancel+0x26>
		int err = z_abort_timeout(&work->timeout);
   25f40:	3010      	adds	r0, #16
   25f42:	f000 f820 	bl	25f86 <z_abort_timeout>
		if (err) {
   25f46:	2800      	cmp	r0, #0
   25f48:	d0dd      	beq.n	25f06 <work_cancel+0x4c>
   25f4a:	e7ba      	b.n	25ec2 <work_cancel+0x8>

00025f4c <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   25f4c:	2300      	movs	r3, #0
   25f4e:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   25f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
   25f56:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   25f58:	6283      	str	r3, [r0, #40]	; 0x28
}
   25f5a:	4770      	bx	lr

00025f5c <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   25f5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   25f5e:	b510      	push	{r4, lr}
	if (!work->work_q) {
   25f60:	b173      	cbz	r3, 25f80 <k_delayed_work_cancel+0x24>
	__asm__ volatile(
   25f62:	f04f 0320 	mov.w	r3, #32
   25f66:	f3ef 8411 	mrs	r4, BASEPRI
   25f6a:	f383 8811 	msr	BASEPRI, r3
   25f6e:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   25f72:	f7ff ffa2 	bl	25eba <work_cancel>
	__asm__ volatile(
   25f76:	f384 8811 	msr	BASEPRI, r4
   25f7a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   25f7e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25f80:	f06f 0015 	mvn.w	r0, #21
   25f84:	e7fb      	b.n	25f7e <k_delayed_work_cancel+0x22>

00025f86 <z_abort_timeout>:
{
   25f86:	b510      	push	{r4, lr}
	__asm__ volatile(
   25f88:	f04f 0220 	mov.w	r2, #32
   25f8c:	f3ef 8411 	mrs	r4, BASEPRI
   25f90:	f382 8811 	msr	BASEPRI, r2
   25f94:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   25f98:	6803      	ldr	r3, [r0, #0]
   25f9a:	b13b      	cbz	r3, 25fac <z_abort_timeout+0x26>
			remove_timeout(to);
   25f9c:	f7f9 ffe6 	bl	1ff6c <remove_timeout>
			ret = 0;
   25fa0:	2000      	movs	r0, #0
	__asm__ volatile(
   25fa2:	f384 8811 	msr	BASEPRI, r4
   25fa6:	f3bf 8f6f 	isb	sy
}
   25faa:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   25fac:	f06f 0015 	mvn.w	r0, #21
   25fb0:	e7f7      	b.n	25fa2 <z_abort_timeout+0x1c>

00025fb2 <z_get_next_timeout_expiry>:
{
   25fb2:	b510      	push	{r4, lr}
	__asm__ volatile(
   25fb4:	f04f 0320 	mov.w	r3, #32
   25fb8:	f3ef 8411 	mrs	r4, BASEPRI
   25fbc:	f383 8811 	msr	BASEPRI, r3
   25fc0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   25fc4:	f7f9 ffec 	bl	1ffa0 <next_timeout>
	__asm__ volatile(
   25fc8:	f384 8811 	msr	BASEPRI, r4
   25fcc:	f3bf 8f6f 	isb	sy
}
   25fd0:	bd10      	pop	{r4, pc}

00025fd2 <z_set_timeout_expiry>:
{
   25fd2:	b570      	push	{r4, r5, r6, lr}
   25fd4:	4604      	mov	r4, r0
   25fd6:	460d      	mov	r5, r1
	__asm__ volatile(
   25fd8:	f04f 0320 	mov.w	r3, #32
   25fdc:	f3ef 8611 	mrs	r6, BASEPRI
   25fe0:	f383 8811 	msr	BASEPRI, r3
   25fe4:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   25fe8:	f7f9 ffda 	bl	1ffa0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   25fec:	2801      	cmp	r0, #1
   25fee:	dd05      	ble.n	25ffc <z_set_timeout_expiry+0x2a>
   25ff0:	42a0      	cmp	r0, r4
   25ff2:	dd03      	ble.n	25ffc <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   25ff4:	4629      	mov	r1, r5
   25ff6:	4620      	mov	r0, r4
   25ff8:	f7e0 f940 	bl	627c <z_clock_set_timeout>
	__asm__ volatile(
   25ffc:	f386 8811 	msr	BASEPRI, r6
   26000:	f3bf 8f6f 	isb	sy
}
   26004:	bd70      	pop	{r4, r5, r6, pc}

00026006 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   26006:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   26008:	f7fa f8da 	bl	201c0 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2600c:	bd08      	pop	{r3, pc}

0002600e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2600e:	f7fa b8d7 	b.w	201c0 <z_tick_get>

00026012 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   26012:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26014:	1c4b      	adds	r3, r1, #1
   26016:	bf08      	it	eq
   26018:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2601c:	4604      	mov	r4, r0
   2601e:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26020:	d013      	beq.n	2604a <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26022:	ea54 0105 	orrs.w	r1, r4, r5
   26026:	d103      	bne.n	26030 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   26028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2602c:	f7fa b8c8 	b.w	201c0 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   26030:	f06f 0101 	mvn.w	r1, #1
   26034:	1a0a      	subs	r2, r1, r0
   26036:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2603a:	eb61 0305 	sbc.w	r3, r1, r5
   2603e:	2a00      	cmp	r2, #0
   26040:	f173 0100 	sbcs.w	r1, r3, #0
   26044:	db02      	blt.n	2604c <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   26046:	4610      	mov	r0, r2
   26048:	4619      	mov	r1, r3
}
   2604a:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   2604c:	f7fa f8b8 	bl	201c0 <z_tick_get>
   26050:	2c01      	cmp	r4, #1
   26052:	f175 0300 	sbcs.w	r3, r5, #0
   26056:	bfbc      	itt	lt
   26058:	2401      	movlt	r4, #1
   2605a:	2500      	movlt	r5, #0
   2605c:	1820      	adds	r0, r4, r0
   2605e:	eb45 0101 	adc.w	r1, r5, r1
   26062:	e7f2      	b.n	2604a <z_timeout_end_calc+0x38>

00026064 <k_timer_init>:
	timer->status = 0U;
   26064:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   26066:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2606a:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2606e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   26072:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   26076:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   26078:	6343      	str	r3, [r0, #52]	; 0x34
}
   2607a:	4770      	bx	lr

0002607c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2607c:	b510      	push	{r4, lr}
   2607e:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   26080:	f7ff ff81 	bl	25f86 <z_abort_timeout>

	if (inactive) {
   26084:	b9d8      	cbnz	r0, 260be <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   26086:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26088:	b10b      	cbz	r3, 2608e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2608a:	4620      	mov	r0, r4
   2608c:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   2608e:	f104 0018 	add.w	r0, r4, #24
   26092:	2100      	movs	r1, #0
   26094:	f7ff fdb3 	bl	25bfe <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   26098:	4604      	mov	r4, r0
   2609a:	b180      	cbz	r0, 260be <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   2609c:	f7ff fdbf 	bl	25c1e <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   260a0:	4620      	mov	r0, r4
   260a2:	f7ff fe1d 	bl	25ce0 <z_ready_thread>
	__asm__ volatile(
   260a6:	f04f 0320 	mov.w	r3, #32
   260aa:	f3ef 8011 	mrs	r0, BASEPRI
   260ae:	f383 8811 	msr	BASEPRI, r3
   260b2:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   260b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   260ba:	f7ff bdd4 	b.w	25c66 <z_reschedule_irqlock>
   260be:	bd10      	pop	{r4, pc}

000260c0 <clear_event_registrations>:
	while (num_events--) {
   260c0:	2314      	movs	r3, #20
{
   260c2:	b530      	push	{r4, r5, lr}
   260c4:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   260c8:	2400      	movs	r4, #0
	while (num_events--) {
   260ca:	4281      	cmp	r1, r0
   260cc:	d100      	bne.n	260d0 <clear_event_registrations+0x10>
}
   260ce:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   260d0:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   260d4:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   260d8:	f003 030f 	and.w	r3, r3, #15
   260dc:	2b02      	cmp	r3, #2
   260de:	d80a      	bhi.n	260f6 <clear_event_registrations+0x36>
   260e0:	b15b      	cbz	r3, 260fa <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   260e2:	f851 3c14 	ldr.w	r3, [r1, #-20]
   260e6:	b143      	cbz	r3, 260fa <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   260e8:	f851 5c10 	ldr.w	r5, [r1, #-16]
   260ec:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   260ee:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   260f0:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   260f4:	e001      	b.n	260fa <clear_event_registrations+0x3a>
	switch (event->type) {
   260f6:	2b04      	cmp	r3, #4
   260f8:	d0f3      	beq.n	260e2 <clear_event_registrations+0x22>
	__asm__ volatile(
   260fa:	f382 8811 	msr	BASEPRI, r2
   260fe:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   26102:	f04f 0320 	mov.w	r3, #32
   26106:	f3ef 8211 	mrs	r2, BASEPRI
   2610a:	f383 8811 	msr	BASEPRI, r3
   2610e:	f3bf 8f6f 	isb	sy
   26112:	3914      	subs	r1, #20
   26114:	e7d9      	b.n	260ca <clear_event_registrations+0xa>

00026116 <signal_poll_event>:
{
   26116:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   26118:	6884      	ldr	r4, [r0, #8]
{
   2611a:	4605      	mov	r5, r0
   2611c:	460e      	mov	r6, r1
	if (poller) {
   2611e:	b19c      	cbz	r4, 26148 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   26120:	68a3      	ldr	r3, [r4, #8]
   26122:	b95b      	cbnz	r3, 2613c <signal_poll_event+0x26>
		poller->is_polling = false;
   26124:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
   26126:	4618      	mov	r0, r3
	event->poller = NULL;
   26128:	2300      	movs	r3, #0
   2612a:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   2612c:	68eb      	ldr	r3, [r5, #12]
   2612e:	f3c3 3104 	ubfx	r1, r3, #12, #5
   26132:	430e      	orrs	r6, r1
   26134:	f366 3310 	bfi	r3, r6, #12, #5
   26138:	60eb      	str	r3, [r5, #12]
	return retcode;
   2613a:	e004      	b.n	26146 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   2613c:	4798      	blx	r3
		poller->is_polling = false;
   2613e:	2300      	movs	r3, #0
		if (retcode < 0) {
   26140:	2800      	cmp	r0, #0
		poller->is_polling = false;
   26142:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   26144:	daf0      	bge.n	26128 <signal_poll_event+0x12>
}
   26146:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   26148:	4620      	mov	r0, r4
   2614a:	e7ed      	b.n	26128 <signal_poll_event+0x12>

0002614c <k_poll_poller_cb>:
{
   2614c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   2614e:	6883      	ldr	r3, [r0, #8]
   26150:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   26152:	7b63      	ldrb	r3, [r4, #13]
   26154:	079a      	lsls	r2, r3, #30
{
   26156:	460d      	mov	r5, r1
	if (!z_is_thread_pending(thread)) {
   26158:	d515      	bpl.n	26186 <k_poll_poller_cb+0x3a>
	if (z_is_thread_timeout_expired(thread)) {
   2615a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   2615e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   26162:	f06f 0001 	mvn.w	r0, #1
   26166:	428b      	cmp	r3, r1
   26168:	bf08      	it	eq
   2616a:	4282      	cmpeq	r2, r0
   2616c:	d014      	beq.n	26198 <k_poll_poller_cb+0x4c>
	z_unpend_thread(thread);
   2616e:	4620      	mov	r0, r4
   26170:	f7ff fd8f 	bl	25c92 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   26174:	2d08      	cmp	r5, #8
   26176:	bf0c      	ite	eq
   26178:	f06f 0303 	mvneq.w	r3, #3
   2617c:	2300      	movne	r3, #0
   2617e:	67a3      	str	r3, [r4, #120]	; 0x78
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   26180:	7b63      	ldrb	r3, [r4, #13]
   26182:	06db      	lsls	r3, r3, #27
   26184:	d001      	beq.n	2618a <k_poll_poller_cb+0x3e>
		return 0;
   26186:	2000      	movs	r0, #0
}
   26188:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   2618a:	69a5      	ldr	r5, [r4, #24]
   2618c:	2d00      	cmp	r5, #0
   2618e:	d1fa      	bne.n	26186 <k_poll_poller_cb+0x3a>
	z_ready_thread(thread);
   26190:	4620      	mov	r0, r4
   26192:	f7ff fda5 	bl	25ce0 <z_ready_thread>
	return 0;
   26196:	e7f6      	b.n	26186 <k_poll_poller_cb+0x3a>
		return -EAGAIN;
   26198:	f06f 000a 	mvn.w	r0, #10
   2619c:	e7f4      	b.n	26188 <k_poll_poller_cb+0x3c>

0002619e <add_event>:
{
   2619e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   261a0:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   261a2:	e9d0 2300 	ldrd	r2, r3, [r0]
   261a6:	4290      	cmp	r0, r2
   261a8:	4604      	mov	r4, r0
   261aa:	460d      	mov	r5, r1
   261ac:	d106      	bne.n	261bc <add_event+0x1e>
	node->prev = list->tail;
   261ae:	6863      	ldr	r3, [r4, #4]
   261b0:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   261b2:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   261b4:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   261b6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   261b8:	6065      	str	r5, [r4, #4]
}
   261ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   261bc:	2b00      	cmp	r3, #0
   261be:	d0f6      	beq.n	261ae <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   261c0:	689b      	ldr	r3, [r3, #8]
   261c2:	6879      	ldr	r1, [r7, #4]
   261c4:	6858      	ldr	r0, [r3, #4]
   261c6:	f7ff fd11 	bl	25bec <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   261ca:	2800      	cmp	r0, #0
   261cc:	d1ef      	bne.n	261ae <add_event+0x10>
	return list->head == list;
   261ce:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   261d0:	42b4      	cmp	r4, r6
   261d2:	d0ec      	beq.n	261ae <add_event+0x10>
   261d4:	2e00      	cmp	r6, #0
   261d6:	bf38      	it	cc
   261d8:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   261da:	2e00      	cmp	r6, #0
   261dc:	d0e7      	beq.n	261ae <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   261de:	68b3      	ldr	r3, [r6, #8]
   261e0:	6878      	ldr	r0, [r7, #4]
   261e2:	6859      	ldr	r1, [r3, #4]
   261e4:	f7ff fd02 	bl	25bec <z_is_t1_higher_prio_than_t2>
   261e8:	b128      	cbz	r0, 261f6 <add_event+0x58>
	node->prev = successor->prev;
   261ea:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   261ec:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   261f0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   261f2:	6075      	str	r5, [r6, #4]
			return;
   261f4:	e7e1      	b.n	261ba <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   261f6:	6863      	ldr	r3, [r4, #4]
   261f8:	42b3      	cmp	r3, r6
   261fa:	d0d8      	beq.n	261ae <add_event+0x10>
   261fc:	6836      	ldr	r6, [r6, #0]
   261fe:	e7ec      	b.n	261da <add_event+0x3c>

00026200 <register_events>:
{
   26200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   26204:	f04f 0a00 	mov.w	sl, #0
{
   26208:	460e      	mov	r6, r1
   2620a:	4614      	mov	r4, r2
   2620c:	461f      	mov	r7, r3
   2620e:	4683      	mov	fp, r0
	int events_registered = 0;
   26210:	4655      	mov	r5, sl
	event->poller = NULL;
   26212:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   26214:	45b2      	cmp	sl, r6
   26216:	db02      	blt.n	2621e <register_events+0x1e>
}
   26218:	4628      	mov	r0, r5
   2621a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2621e:	f04f 0320 	mov.w	r3, #32
   26222:	f3ef 8911 	mrs	r9, BASEPRI
   26226:	f383 8811 	msr	BASEPRI, r3
   2622a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2622e:	f89b 200d 	ldrb.w	r2, [fp, #13]
   26232:	f002 020f 	and.w	r2, r2, #15
   26236:	2a02      	cmp	r2, #2
   26238:	d006      	beq.n	26248 <register_events+0x48>
   2623a:	2a04      	cmp	r2, #4
   2623c:	d008      	beq.n	26250 <register_events+0x50>
   2623e:	2a01      	cmp	r2, #1
   26240:	d120      	bne.n	26284 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   26242:	f8db 3010 	ldr.w	r3, [fp, #16]
   26246:	e001      	b.n	2624c <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0) {
   26248:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   2624c:	689b      	ldr	r3, [r3, #8]
   2624e:	e002      	b.n	26256 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   26250:	f8db 3010 	ldr.w	r3, [fp, #16]
   26254:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   26256:	b1ab      	cbz	r3, 26284 <register_events+0x84>
	event->state |= state;
   26258:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   2625c:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   26260:	f3c3 3104 	ubfx	r1, r3, #12, #5
   26264:	430a      	orrs	r2, r1
   26266:	f362 3310 	bfi	r3, r2, #12, #5
   2626a:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   2626e:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   26272:	f389 8811 	msr	BASEPRI, r9
   26276:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2627a:	f10a 0a01 	add.w	sl, sl, #1
   2627e:	f10b 0b14 	add.w	fp, fp, #20
   26282:	e7c7      	b.n	26214 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   26284:	2f00      	cmp	r7, #0
   26286:	d1f4      	bne.n	26272 <register_events+0x72>
   26288:	7823      	ldrb	r3, [r4, #0]
   2628a:	2b00      	cmp	r3, #0
   2628c:	d0f1      	beq.n	26272 <register_events+0x72>
	switch (event->type) {
   2628e:	f89b 300d 	ldrb.w	r3, [fp, #13]
   26292:	f003 030f 	and.w	r3, r3, #15
   26296:	2b02      	cmp	r3, #2
   26298:	d008      	beq.n	262ac <register_events+0xac>
   2629a:	2b04      	cmp	r3, #4
   2629c:	d006      	beq.n	262ac <register_events+0xac>
   2629e:	2b01      	cmp	r3, #1
   262a0:	d10b      	bne.n	262ba <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   262a2:	f8db 0010 	ldr.w	r0, [fp, #16]
   262a6:	4622      	mov	r2, r4
   262a8:	4659      	mov	r1, fp
   262aa:	e004      	b.n	262b6 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   262ac:	f8db 0010 	ldr.w	r0, [fp, #16]
   262b0:	4622      	mov	r2, r4
   262b2:	4659      	mov	r1, fp
   262b4:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   262b6:	f7ff ff72 	bl	2619e <add_event>
	event->poller = poller;
   262ba:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   262be:	3501      	adds	r5, #1
   262c0:	e7d7      	b.n	26272 <register_events+0x72>

000262c2 <k_poll_event_init>:
{
   262c2:	b510      	push	{r4, lr}
	event->type = type;
   262c4:	0452      	lsls	r2, r2, #17
   262c6:	0209      	lsls	r1, r1, #8
   262c8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   262cc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   262d0:	430a      	orrs	r2, r1
   262d2:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   262d4:	2400      	movs	r4, #0
	event->type = type;
   262d6:	430a      	orrs	r2, r1
	event->obj = obj;
   262d8:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   262dc:	6084      	str	r4, [r0, #8]
}
   262de:	bd10      	pop	{r4, pc}

000262e0 <z_handle_obj_poll_events>:
{
   262e0:	4603      	mov	r3, r0
	return list->head == list;
   262e2:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   262e4:	4283      	cmp	r3, r0
   262e6:	d008      	beq.n	262fa <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   262e8:	e9d0 3200 	ldrd	r3, r2, [r0]
   262ec:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   262ee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   262f0:	2300      	movs	r3, #0
	node->prev = NULL;
   262f2:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   262f6:	f7ff bf0e 	b.w	26116 <signal_poll_event>
}
   262fa:	4770      	bx	lr

000262fc <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   262fc:	4770      	bx	lr
